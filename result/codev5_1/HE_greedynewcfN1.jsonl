{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    group = []\n    for char in paren_string:\n        if char == '(':\n            group.append(char)\n        elif char == ')':\n            group.append(char)\n            groups.append(''.join(group))\n            group = []\n    return groups\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/2", "completion": "    return number % 1\n"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "HumanEval/5", "completion": "    return numbers[:-1] + [delimeter] + numbers[-1:] if numbers else []\n"}
{"task_id": "HumanEval/6", "completion": "    paren_levels = []\n    current_level = 0\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n        elif char == ')':\n            current_level -= 1\n        if current_level > max(paren_levels):\n            paren_levels.append(current_level)\n    return paren_levels\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "    sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return sum_, product\n"}
{"task_id": "HumanEval/9", "completion": "    if not numbers:\n        return []\n\n    max_so_far: List[int] = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_so_far.append(max(max_so_far[-1], numbers[i]))\n\n    return max_so_far\n\n\ndef main():\n    numbers = [int(x) for x in input().split()]\n    print(*rolling_max(numbers), sep=\"\\n\")\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"task_id": "HumanEval/10", "completion": "    if is_palindrome(string):\n        return string\n\n    # Find the longest postfix of supplied string that is a palindrome.\n    postfix = ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            postfix = string[:i]\n            break\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + postfix[::-1]\n\n\ndef main():\n    \"\"\" Main function \"\"\"\n    string = input()\n    print(make_palindrome(string))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/11", "completion": "    return ''.join(map(lambda x, y: str(int(x) ^ int(y)), a, b))\n\n\ndef main():\n    a = input()\n    b = input()\n    print(string_xor(a, b))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)\n"}
{"task_id": "HumanEval/13", "completion": "    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < b:\n        return greatest_common_divisor(b, a)\n    if a % b == 0:\n        return b\n    return greatest_common_divisor(b, a % b)\n"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "HumanEval/15", "completion": "    return''.join(map(str, range(n + 1)))\n"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))\n"}
{"task_id": "HumanEval/17", "completion": "    notes = []\n    for note in music_string.split():\n        if note == 'o':\n            notes.append(4)\n        elif note == 'o|':\n            notes.append(2)\n        else:\n            notes.append(1)\n    return notes\n"}
{"task_id": "HumanEval/18", "completion": "    return string.count(substring)\n"}
{"task_id": "HumanEval/19", "completion": "    return \" \".join(sorted(numbers.split()))\n\n\nif __name__ == \"__main__\":\n    numbers = input()\n    print(sort_numbers(numbers))\n"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    min_diff_index = 0\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                min_diff_index = i\n    return (numbers[min_diff_index], numbers[min_diff_index + 1])\n\n\nif __name__ == '__main__':\n    print(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    print(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [((x - min_val) / (max_val - min_val)) for x in numbers]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]\n"}
{"task_id": "HumanEval/23", "completion": "    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n, 1, -1):\n        if n % i == 0:\n            return i\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"xs must have non zero coefficient\")\n    x = 0\n    for i in range(len(xs) // 2):\n        x -= xs[i * 2] / xs[i * 2 + 1]\n    return x\n\n\nif __name__ == \"__main__\":\n    xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(poly(xs, 1))\n    print(find_zero(xs))\n"}
{"task_id": "HumanEval/33", "completion": "    l = list(l)\n    for i in range(0, len(l), 3):\n        l[i:i+3] = sorted(l[i:i+3])\n    return l\n"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "    return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count(\"7\") > 0:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "    l = list(l)\n    for i in range(0, len(l), 2):\n        l[i] = sorted(l[i])\n    return l\n"}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\nif __name__ == \"__main__\":\n    s = input()\n    print(decode_cyclic(encode_cyclic(s)))\n"}
{"task_id": "HumanEval/39", "completion": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        fib = [2, 3]\n        for i in range(2, n):\n            fib.append(fib[i - 1] + fib[i - 2])\n            if not is_prime(fib[i]):\n                fib[i] = 0\n        return fib[n - 1]\n\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is prime.\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "    return n * (n - 1) // 2\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(car_race_collision(n))\n"}
{"task_id": "HumanEval/42", "completion": "    return [i + 1 for i in l]\n"}
{"task_id": "HumanEval/43", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    res = ''\n    while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return res\n"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2\n"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    if n == 4:\n        return 2\n    if n == 5:\n        return 4\n    if n == 6:\n        return 8\n    if n == 7:\n        return 14\n    if n == 8:\n        return 20\n    if n == 9:\n        return 28\n    if n == 10:\n        return 38\n    if n == 11:\n        return 56\n    if n == 12:\n        return 84\n    if n == 13:\n        return 120\n    if n == 14:\n        return 168\n    if n == 15:\n        return 220\n    if n == 16:\n        return 284\n    if n == 17:\n        return 356\n    if n == 18:\n        return 444\n    if n == 19:\n        return 548\n    if n == 20:\n        return 660\n    if n == 21:\n        return 804\n    if n == 22:\n        return 964\n    if n == 23:\n        return 1132\n    if n == 24:\n        return 1320\n    if n == 25:\n        return 1528\n    if n == 26:\n        return 1748\n    if n == 27:\n        return 1980\n    if n == 28:\n        return 2220\n    if n == 29:\n        return 2464\n    if n == 30:\n        return 2712\n    if n == 31:\n        return 2968\n    if n == 32:\n        return 3228\n    if n =="}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n // 2, p) % p\n"}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 + 26) % 26) + ord(\"a\")) for ch in s])\n\n\nif __name__ == \"__main__\":\n    s = input()\n    print(encode_shift(s))\n"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiou'\n    return ''.join([char for char in text if char.lower() not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)\n"}
{"task_id": "HumanEval/53", "completion": "    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)\n"}
{"task_id": "HumanEval/55", "completion": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/57", "completion": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n"}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1).intersection(set(l2)))\n"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/62", "completion": "    return [xs[i] * (i + 1) for i in range(len(xs))]\n"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n\n\ndef main():\n    \"\"\"Print the number of vowels in the given string.\"\"\"\n    s = input()\n    print(vowels_count(s))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/65", "completion": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[shift:] + s[:shift]\n"}
{"task_id": "HumanEval/66", "completion": "    return sum([ord(c) for c in s if c.isupper()])\n"}
{"task_id": "HumanEval/67", "completion": "    a,b=map(int,s.split())\n    return n-a-b"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    even = [i for i in arr if i % 2 == 0]\n    if not even:\n        return []\n    return [min(even, key=lambda x: x[1])]\n\n\nprint(pluck([4, 2, 3]))\nprint(pluck([1, 2, 3]))\nprint(pluck([]))\nprint(pluck([5, 0, 3, 0, 4, 2]))\n"}
{"task_id": "HumanEval/69", "completion": "    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] >= i:\n            return i\n    return -1\n\n\nif __name__ == '__main__':\n    print(search([4, 1, 2, 2, 3, 1]))\n    print(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\n    print(search([5, 5, 4, 4, 4]))\n"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return [lst[0]]\n    else:\n        return [lst[0], lst[-1], *strange_sort_list(lst[1:-1])]\n\n\ndef main():\n    lst = [int(x) for x in input().split()]\n    print(*strange_sort_list(lst), sep=' ')\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round(s * (s - a) * (s - b) * (s - c) ** 0.5, 2)\n    else:\n        return -1\n\n\ndef main():\n    a = float(input())\n    b = float(input())\n    c = float(input())\n    print(triangle_area(a, b, c))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/72", "completion": "    if len(q) == 1:\n        return q[0] <= w\n    if q[0] == q[-1]:\n        return will_it_fly(q[1:-1], w)\n    else:\n        return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(n - 1):\n        if arr[i] == arr[i + 1]:\n            dp[i][i + 1] = 0\n        else:\n            dp[i][i + 1] = 1\n    for i in range(n - 2):\n        for j in range(i + 2, n):\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1\n    return dp[0][-1]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 5, 4, 7, 9, 6]\n    print(smallest_change(arr))\n"}
{"task_id": "HumanEval/74", "completion": "    lst1_sum = sum([len(i) for i in lst1])\n    lst2_sum = sum([len(i) for i in lst2])\n    if lst1_sum < lst2_sum:\n        return lst1\n    elif lst1_sum > lst2_sum:\n        return lst2\n    else:\n        return lst1\n\n\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))\n"}
{"task_id": "HumanEval/75", "completion": "    if a == 1:\n        return False\n    if a == 2:\n        return True\n    if a == 3:\n        return True\n    if a == 5:\n        return True\n    if a == 7:\n        return True\n    if a == 11:\n        return True\n    if a == 13:\n        return True\n    if a == 17:\n        return True\n    if a == 19:\n        return True\n    if a == 23:\n        return True\n    if a == 29:\n        return True\n    if a == 31:\n        return True\n    if a == 37:\n        return True\n    if a == 41:\n        return True\n    if a == 43:\n        return True\n    if a == 47:\n        return True\n    if a == 53:\n        return True\n    if a == 59:\n        return True\n    if a == 61:\n        return True\n    if a == 67:\n        return True\n    if a == 71:\n        return True\n    if a == 73:\n        return True\n    if a == 79:\n        return True\n    if a == 83:\n        return True\n    if a == 89:\n        return True\n    if a == 97:\n        return True\n    if a == 101:\n        return True\n    if a == 103:\n        return True\n    if a == 107:\n        return True\n    if a == 109:\n        return True\n    if a == 113:\n        return True\n    if a == 127:\n        return True\n    if a == 131:\n        return True\n    if a == 137:\n        return True\n    if a == 139:\n        return True\n    if a == 149:\n        return True\n    if a == 151:\n        return True\n    if a == 157:\n        return True\n    if a == 163:\n       "}
{"task_id": "HumanEval/76", "completion": "    if n == 1:\n        return False\n    if x == 1:\n        return True\n    if x == n:\n        return True\n    if x % n == 0:\n        return is_simple_power(x // n, n)\n    return False\n"}
{"task_id": "HumanEval/77", "completion": "    a = abs(a)\n    for i in range(1, a + 1):\n        if a == i ** 3:\n            return True\n    return False\n\n\ndef is_cube(a):\n    return a == (a ** (1 / 3)) ** 3\n\n\ndef is_cube2(a):\n    return a == (a ** (1 / 3)) ** 3\n\n\ndef is_cube3(a):\n    return a == (a ** (1 / 3)) ** 3\n\n\ndef is_cube4(a):\n    return a == (a ** (1 / 3)) ** 3\n\n\ndef is_cube5(a):\n    return a == (a ** (1 / 3)) ** 3\n\n\ndef is_cube6(a):\n    return a == (a ** (1 / 3)) ** 3\n\n\ndef is_cube7(a):\n    return a == (a ** (1 / 3)) ** 3\n\n\ndef is_cube8(a):\n    return a == (a ** (1 / 3)) ** 3\n\n\ndef is_cube9(a):\n    return a == (a ** (1 / 3)) ** 3\n\n\ndef is_cube10(a):\n    return a == (a ** (1 / 3)) ** 3\n\n\ndef is_cube11(a):\n    return a == (a ** (1 / 3)) ** 3\n\n\ndef is_cube12(a):\n    return a == (a ** (1 / 3)) ** 3\n\n\ndef is_cube13(a):\n    return a == (a ** (1 / 3)) ** 3\n\n\ndef is_cube14(a):\n    return a == (a ** (1 / 3)) ** 3\n\n\ndef is_cube15(a):\n    return a == (a ** (1 / 3)) ** 3\n\n\ndef is_cube16(a):\n    return a == (a ** (1 / 3)) ** 3\n\n\n"}
{"task_id": "HumanEval/78", "completion": "    prime_hex = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in num:\n        if i in prime_hex:\n            count += 1\n    return count\n\n\nprint(hex_key(\"ABED1A33\"))\n"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"\n"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    s = input()\n    print(is_happy(s))\n"}
{"task_id": "HumanEval/81", "completion": "    grade_list = []\n    for grade in grades:\n        if grade >= 4.0:\n            grade_list.append('A+')\n        elif grade >= 3.7:\n            grade_list.append('A')\n        elif grade >= 3.3:\n            grade_list.append('A-')\n        elif grade >= 3.0:\n            grade_list.append('B+')\n        elif grade >= 2.7:\n            grade_list.append('B')\n        elif grade >= 2.3:\n            grade_list.append('B-')\n        elif grade >= 2.0:\n            grade_list.append('C+')\n        elif grade >= 1.7:\n            grade_list.append('C')\n        elif grade >= 1.3:\n            grade_list.append('C-')\n        elif grade >= 1.0:\n            grade_list.append('D+')\n        elif grade >= 0.7:\n            grade_list.append('D')\n        elif grade >= 0.0:\n            grade_list.append('D-')\n        else:\n            grade_list.append('E')\n    return grade_list\n\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))\n"}
{"task_id": "HumanEval/82", "completion": "    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return False\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 10\n    else:\n        return 9 * 10 ** (n - 2) + 9 * 10 ** (n - 1)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(starts_one_ends(n))\n"}
{"task_id": "HumanEval/84", "completion": "    res = ''\n    while N > 0:\n        res += str(N % 2)\n        N //= 2\n    return res[::-1]\n\n\nif __name__ == '__main__':\n    N = int(input())\n    print(solve(N))\n"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[::2])"}
{"task_id": "HumanEval/86", "completion": "    return''.join(sorted(s.split()))\n"}
{"task_id": "HumanEval/87", "completion": "    res = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                res.append((i, j))\n    return sorted(res)\n"}
{"task_id": "HumanEval/88", "completion": "    if sum(array) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n"}
{"task_id": "HumanEval/89", "completion": "    return ''.join(chr((ord(c)-97+2*2)%26+97) for c in s)\n"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for i in range(len(S)):\n        if S[i] == 'I':\n            if S[i+1] =='':\n                count += 1\n        elif S[i] == '.':\n            break\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z) and (type(x) == int) and (type(y) == int) and (type(z) == int):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/93", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    message = message.swapcase()\n    for i in range(len(message)):\n        if message[i] in vowels:\n            message = message[:i] + chr(ord(message[i]) + 2) + message[i + 1:]\n    return message\n"}
{"task_id": "HumanEval/94", "completion": "    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 1]\n    lst.sort(reverse=True)\n    for i in lst:\n        if i == 1:\n            continue\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                break\n        else:\n            return sum(map(int, str(i)))\n\n\nprint(skjkasdkd(input().split()))\n"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    if all(isinstance(k, str) and k.islower() for k in dict.keys()):\n        return True\n    if all(isinstance(k, str) and k.isupper() for k in dict.keys()):\n        return True\n    return False\n"}
{"task_id": "HumanEval/96", "completion": "    if n < 2:\n        return []\n    else:\n        return [x for x in range(2, n + 1) if all(x % y!= 0 for y in range(2, int(x ** 0.5) + 1))]\n"}
{"task_id": "HumanEval/97", "completion": "    a = str(abs(a))\n    b = str(abs(b))\n    ans = 0\n    for i in range(len(a)):\n        ans += int(a[i]) * int(b[i])\n    return ans % 10\n"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c.isupper() and c in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "    value = float(value)\n    if value % 1 == 0:\n        return int(value)\n    elif value % 1 > 0.5:\n        return int(value + 1)\n    else:\n        return int(value - 1)\n\n\ndef main():\n    value = input()\n    print(closest_integer(value))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/100", "completion": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [n] + make_a_pile(n + 1)\n    else:\n        return [n] + make_a_pile(n + 2)\n"}
{"task_id": "HumanEval/101", "completion": "    return s.split(\", \")\n"}
{"task_id": "HumanEval/102", "completion": "    for i in range(x, y+1, 2):\n        return i\n    return -1\n"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    else:\n        avg = (n + m) // 2\n        return bin(avg)[2:]\n"}
{"task_id": "HumanEval/104", "completion": "    y = []\n    for i in x:\n        if i % 2!= 0:\n            y.append(i)\n    return sorted(y)\n"}
{"task_id": "HumanEval/105", "completion": "    arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    arr.reverse()\n    return [str(x)[-1] for x in arr]\n\n\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))\n"}
{"task_id": "HumanEval/106", "completion": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + f(n - 1)\n    else:\n        return [sum(range(1, n + 1))] + f(n - 1)\n\n\nprint(f(5))\n"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(even_odd_palindrome(n))\n"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for i in arr:\n        if sum(map(int, str(abs(i)))) > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        if arr[0] < arr[1]:\n            return True\n        else:\n            return False\n    if len(arr) == 3:\n        if arr[0] < arr[1] and arr[1] < arr[2]:\n            return True\n        else:\n            return False\n    if len(arr) == 4:\n        if arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3]:\n            return True\n        else:\n            return False\n    if len(arr) == 5:\n        if arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3] and arr[3] < arr[4]:\n            return True\n        else:\n            return False\n    if len(arr) == 6:\n        if arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3] and arr[3] < arr[4] and arr[4] < arr[5]:\n            return True\n        else:\n            return False\n    if len(arr) == 7:\n        if arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3] and arr[3] < arr[4] and arr[4] < arr[5] and arr[5] < arr[6]:\n            return True\n        else:\n            return False\n    if len(arr) == 8:\n        if arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3] and arr[3] < arr[4] and arr[4] < arr[5] and arr[5] < arr[6] and arr[6] < arr[7]:\n            return True\n        else:\n            return False\n    if len(arr) == 9:\n        if arr[0] < arr[1] and arr[1]"}
{"task_id": "HumanEval/110", "completion": "    lst1 = list(map(int, lst1))\n    lst2 = list(map(int, lst2))\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n\n\nprint(exchange(input().split(), input().split()))\n"}
{"task_id": "HumanEval/111", "completion": "    test = test.split()\n    d = {}\n    for i in test:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    maxi = max(d.values())\n    ans = []\n    for i in d:\n        if d[i] == maxi:\n            ans.append(i)\n    if len(ans) == 1:\n        return {ans[0]: maxi}\n    else:\n        return {i: d[i] for i in ans}\n\n\nprint(histogram('a b c'))\nprint(histogram('a b b a'))\nprint(histogram('a b c a b'))\nprint(histogram('b b b b a'))\nprint(histogram(''))\n"}
{"task_id": "HumanEval/112", "completion": "    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.pop(i)\n    s = ''.join(s)\n    s = s[::-1]\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)\n\nprint(reverse_delete(\"abcdedcba\",\"ab\"))"}
{"task_id": "HumanEval/113", "completion": "    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n        lst[i].count('13579'), len(lst[i]), i, len(lst)) for i in range(len(lst))]\n"}
{"task_id": "HumanEval/114", "completion": "    if not nums:\n        return 0\n    min_sum = sum(nums)\n    for i in range(len(nums)):\n        cur_sum = 0\n        for j in range(i, len(nums)):\n            cur_sum += nums[j]\n            min_sum = min(min_sum, cur_sum)\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    dp = [[0]*m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                dp[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if dp[i][j] == 0:\n                continue\n            if i == 0:\n                dp[i][j] = min(dp[i][j], m-j)\n            else:\n                dp[i][j] = min(dp[i][j], dp[i-1][j])\n            if j == 0:\n                dp[i][j] = min(dp[i][j], n-i)\n            else:\n                dp[i][j] = min(dp[i][j], dp[i][j-1])\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if dp[i][j] > 0:\n                ans += math.ceil(dp[i][j]/capacity)\n    return ans\n\n\nif __name__ == \"__main__\":\n    grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]]\n    print(max_fill(grid, 1))\n"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr\n"}
{"task_id": "HumanEval/117", "completion": "    vowels = set('aeiou')\n    words = []\n    for word in s.split():\n        if len([c for c in word if c not in vowels]) == n:\n            words.append(word)\n    return words\n"}
{"task_id": "HumanEval/118", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)):\n        if word[i] in vowels:\n            if i == 0 or i == len(word) - 1:\n                continue\n            if word[i - 1] not in vowels and word[i + 1] not in vowels:\n                return word[i]\n    return ''\n\n\nprint(get_closest_vowel(\"yogurt\"))\nprint(get_closest_vowel(\"FULL\"))\nprint(get_closest_vowel(\"quick\"))\nprint(get_closest_vowel(\"ab\"))\n"}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for i in lst:\n        for j in i:\n            if j == '(':\n                stack.append(j)\n            else:\n                if len(stack) == 0:\n                    return 'No'\n                stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n\n\nprint(match_parens(['()(', ')']))\n"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    arr = arr[::-1]\n    return arr[:k]\n"}
{"task_id": "HumanEval/121", "completion": "    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2!= 0])\n"}
{"task_id": "HumanEval/122", "completion": "    arr = sorted(arr)\n    ans = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            ans += arr[i]\n    return ans\n"}
{"task_id": "HumanEval/123", "completion": "    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return get_odd_collatz(n // 2)\n    else:\n        return [n] + get_odd_collatz(3 * n + 1)\n"}
{"task_id": "HumanEval/124", "completion": "    if date == '':\n        return False\n    if date.count('-')!= 2:\n        return False\n    month, day, year = date.split('-')\n    if int(month) < 1 or int(month) > 12:\n        return False\n    if int(day) < 1 or int(day) > 31:\n        return False\n    if int(year) < 1 or int(year) > 9999:\n        return False\n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(day) < 1 or int(day) > 31:\n            return False\n    elif int(month) in [4, 6, 9, 11]:\n        if int(day) < 1 or int(day) > 30:\n            return False\n    elif int(month) == 2:\n        if int(day) < 1 or int(day) > 29:\n            return False\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "    if txt.count(',') == 0:\n        if txt.count(' ') == 0:\n            return sum([1 for i in range(26) if ord(chr(i + 97)) % 2 == 1])\n        else:\n            return txt.split()\n    else:\n        return txt.split(',')\n\n\nprint(split_words(\"Hello world!\"))\n"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) == 0:\n        return True\n    if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        if lst[0] < lst[1]:\n            return True\n        else:\n            return False\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\n\ndef main():\n    lst = [int(x) for x in input().split()]\n    print(is_sorted(lst))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/127", "completion": "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] and interval2[1] <= interval1[1]:\n        return \"YES\" if is_prime(interval2[1] - interval2[0]) else \"NO\"\n    if interval1[0] <= interval2[0]:\n        return \"YES\" if is_prime(interval2[0] - interval1[0]) else \"NO\"\n    if interval2[1] <= interval1[1]:\n        return \"YES\" if is_prime(interval1[1] - interval2[1]) else \"NO\"\n    return \"YES\" if is_prime(interval1[1] - interval1[0]) else \"NO\"\n\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n < 4:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0:\n        return False\n    r = int(n ** 0.5)\n    d = 5\n    while d <= r:\n        if n % d == 0 or n % (d + 2) == 0:\n            return False\n        d += 6\n    return True\n\n\nprint(intersection((-3, -1), (-5, 5)))\n"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign = 1\n    ans = 0\n    for i in arr:\n        if i == 0:\n            sign = 0\n        else:\n            ans += sign * abs(i)\n            sign *= i // abs(i)\n    return ans\n"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[float('inf') for _ in range(n)] for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1)\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1)\n    ans = []\n    i, j = n - 1, n - 1\n    while k > 0:\n        if dp[i][j] == k:\n            ans.append(grid[i][j])\n            k -= 1\n        if j > 0 and dp[i][j] == dp[i][j - 1] + 1:\n            j -= 1\n        if i > 0 and dp[i][j] == dp[i - 1][j] + 1:\n            i -= 1\n    ans.reverse()\n    return ans\n\n\nif __name__ == '__main__':\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    k = 3\n    print(minPath(grid, k))\n"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        t = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                t.append(1 + i / 2)\n            else:\n                t.append(t[i - 1] + t[i - 2] + t[i + 1])\n        return t\n\n\nprint(tri(int(input())))\n"}
{"task_id": "HumanEval/131", "completion": "    ans = 0\n    while n > 0:\n        if n % 10 % 2 == 1:\n            ans *= n % 10\n        n //= 10\n    return ans\n"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for i in string:\n        if i == '[':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\nprint(is_nested('[[]]'))\n"}
{"task_id": "HumanEval/133", "completion": "    return sum([int(i)**2 for i in lst])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/134", "completion": "    if txt[-1].isalpha() and txt[-1] not in \" a e i o u y\":\n        return True\n    else:\n        return False\n\n\nprint(check_if_last_char_is_a_letter(\"apple pie\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))\nprint(check_if_last_char_is_a_letter(\"\"))"}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return -1\n    return len(arr)-1\n\n\nprint(can_arrange([1,2,4,3,5]))\n"}
{"task_id": "HumanEval/136", "completion": "    pos = None\n    neg = None\n    for i in lst:\n        if i > 0:\n            if pos == None:\n                pos = i\n            elif i > pos:\n                pos = i\n        elif i < 0:\n            if neg == None:\n                neg = i\n            elif i < neg:\n                neg = i\n    return (neg, pos)\n\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))\n"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    if isinstance(a, str) and isinstance(b, str):\n        a = a.replace(\",\", \".\")\n        b = b.replace(\",\", \".\")\n    if isinstance(a, str) or isinstance(b, str):\n        return max(a, b)\n    return max(a, b)\n"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 == 1:\n        return False\n    for i in range(1, n + 1):\n        if i % 2 == 0 and n - i == 4:\n            return True\n    return False\n"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"__\", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 10:\n        return \"No\"\n    if len(file_name) < 5:\n        return \"No\"\n    if file_name.count(\".\")!= 1:\n        return \"No\"\n    if file_name[0] not in [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]:\n        return \"No\"\n    if file_name[-4:] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    if file_name.count(\"0\") > 3 or file_name.count(\"1\") > 3 or file_name.count(\"2\") > 3 or file_name.count(\"3\") > 3 or file_name.count(\"4\") > 3 or file_name.count(\"5\") > 3 or file_name.count(\"6\") > 3 or file_name.count(\"7\") > 3 or file_name.count(\"8\") > 3 or file_name.count(\"9\") > 3:\n        return \"No\"\n    return \"Yes\"\n"}
{"task_id": "HumanEval/142", "completion": "    lst = [i**2 if i % 3 == 0 else i**3 if i % 4!= 0 and i % 3!= 0 else i for i in lst]\n    return sum(lst)\n\n\nif __name__ == \"__main__\":\n    lst = list(map(int, input().split()))\n    print(sum_squares(lst))\n"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    primes = []\n    for word in words:\n        if is_prime(len(word)):\n            primes.append(word)\n    return \" \".join(primes)\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(words_in_sentence(\"This is a test\"))\n"}
{"task_id": "HumanEval/144", "completion": "    x1, x2 = x.split('/')\n    n1, n2 = n.split('/')\n    if int(x1) % int(n1) == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/145", "completion": "    nums.sort(key=lambda x: (sum(map(int, str(abs(x))))), reverse=True)\n    return nums\n"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "    # n = int(input())\n    # n = 1000000000000000000\n    # n = 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n"}
{"task_id": "HumanEval/149", "completion": "    lst = [x for x in lst if len(x) % 2 == 0]\n    lst.sort()\n    return lst\n"}
{"task_id": "HumanEval/150", "completion": "    if n == 2:\n        return x\n    else:\n        return y\n\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    else:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n\nprint(x_or_y(int(input()), int(input()), int(input())))\n"}
{"task_id": "HumanEval/151", "completion": "    return sum([i**2 for i in lst if i%2!=0])\n\nprint(double_the_difference([1, 3, 2, 0]))"}
{"task_id": "HumanEval/152", "completion": "    return [abs(game[i]-guess[i]) for i in range(len(game))]\n\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\n"}
{"task_id": "HumanEval/153", "completion": "    class_name = class_name.split('.')[-1]\n    extensions = [ext.split('.')[-1] for ext in extensions]\n    strengths = [len([c for c in ext if c.isupper()]) - len([c for c in ext if c.islower()]) for ext in extensions]\n    max_strength = max(strengths)\n    max_strength_index = strengths.index(max_strength)\n    return f'{class_name}.{extensions[max_strength_index]}'\n"}
{"task_id": "HumanEval/154", "completion": "    if b in a:\n        return True\n    else:\n        for i in range(len(b)):\n            if b[i:] + b[:i] in a:\n                return True\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result\n"}
{"task_id": "HumanEval/157", "completion": "    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n\ndef main():\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(right_angle_triangle(a, b, c))\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "HumanEval/158", "completion": "    max_len = 0\n    ans = \"\"\n    for word in words:\n        if len(set(word)) > max_len:\n            max_len = len(set(word))\n            ans = word\n    return ans\n"}
{"task_id": "HumanEval/159", "completion": "    if remaining < need:\n        need = remaining\n    return [number + need, remaining - need]\n"}
{"task_id": "HumanEval/160", "completion": "    if len(operator) == 0:\n        return operand[0]\n    else:\n        return do_algebra(operator[1:], operand[1:])\n    if operator[0] == '+':\n        return operand[0] + do_algebra(operator[1:], operand[1:])\n    elif operator[0] == '-':\n        return operand[0] - do_algebra(operator[1:], operand[1:])\n    elif operator[0] == '*':\n        return operand[0] * do_algebra(operator[1:], operand[1:])\n    elif operator[0] == '//':\n        return operand[0] // do_algebra(operator[1:], operand[1:])\n    elif operator[0] == '**':\n        return operand[0] ** do_algebra(operator[1:], operand[1:])\n\n\nif __name__ == '__main__':\n    operator = input()\n    operand = list(map(int, input().split()))\n    print(do_algebra(operator, operand))\n"}
{"task_id": "HumanEval/161", "completion": "    if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]\n"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "    return [x for x in range(a, b+1) if x%2==0]\n"}
