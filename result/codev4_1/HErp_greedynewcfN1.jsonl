{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[j] - numbers[i]) < threshold:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    print(has_close_elements([1.0, 2.0, 3.0], 0.5))\n    print(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))\n"}
{"task_id": "HumanEval/1", "completion": "    parens = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            parens.append(char)\n        elif char == ')':\n            parens.pop()\n            if len(parens) > 0:\n                current_group += char\n            else:\n                parens.append(current_group)\n                current_group = ''\n        else:\n            current_group += char\n    return parens"}
{"task_id": "HumanEval/2", "completion": "    return abs(number - int(number))\n"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(below_zero([1, 2, 3]))\n    print(below_zero([1, 2, -4, 5]))\n    print(below_zero([-1, 2, -4, 5]))\n"}
{"task_id": "HumanEval/4", "completion": "    return sum(map(lambda x: abs(x - sum(numbers) / len(numbers)), numbers)) / len(numbers)\n\n\nif __name__ == '__main__':\n    print(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))\n"}
{"task_id": "HumanEval/5", "completion": "    return numbers[:-1] + [delimeter] * (len(numbers) - 1) + numbers[-1:] if numbers else []\n\n\nif __name__ == \"__main__\":\n    print(intersperse([1, 2, 3], 4))\n"}
{"task_id": "HumanEval/6", "completion": "    paren_levels = []\n    current_level = 0\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n        elif char == ')':\n            current_level -= 1\n        else:\n            continue\n        paren_levels.append(current_level)\n    return paren_levels\n\n\nif __name__ == \"__main__\":\n    print(parse_nested_parens(\"(()()) ((())) () ((())()())\"))\n"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]\n\n\nif __name__ == \"__main__\":\n    print(filter_by_substring([], 'a'))\n    print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))\n"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n\n\nif __name__ == '__main__':\n    print(sum_product([1, 2, 3, 4]))\n"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = numbers[0]\n    for number in numbers:\n        max_so_far = max(number, max_so_far)\n        result.append(max_so_far)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(rolling_max([1, 2, 3, 2, 3, 4, 2]))\n"}
{"task_id": "HumanEval/10", "completion": "    if not string or is_palindrome(string):\n        return string\n\n    # find the longest postfix of supplied string that is a palindrome\n    i = len(string) - 1\n    while i >= 0 and not is_palindrome(string[i:]):\n        i -= 1\n\n    # append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string + string[i+1:][::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/11", "completion": "    assert len(a) == len(b)\n    res = []\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            res.append(\"1\")\n        else:\n            res.append(\"0\")\n    return \"\".join(res)\n\n\nif __name__ == \"__main__\":\n    print(string_xor(*input().split()))\n"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    else:\n        return max(strings, key=len)\n"}
{"task_id": "HumanEval/13", "completion": "    if a < b:\n        a, b = b, a\n    while b!= 0:\n        a %= b\n        a, b = b, a\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i+1] for i in range(len(string))]\n"}
{"task_id": "HumanEval/15", "completion": "    return \" \".join([str(i) for i in range(n+1)])\n\nif __name__ == \"__main__\":\n    print(string_sequence(int(input())))"}
{"task_id": "HumanEval/16", "completion": "    return len({c.lower() for c in string})\n\nif __name__ == '__main__':\n    print(count_distinct_characters(input()))"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(4)\n        elif char == 'o|':\n            result.append(2)\n        else:\n            result.append(1)\n    return result"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print(how_many_times(\"\", \"a\"))\n    print(how_many_times(\"aaa\", \"a\"))\n    print(how_many_times(\"aaaa\", \"aa\"))\n"}
{"task_id": "HumanEval/19", "completion": "    return \" \".join(sorted([int(x) for x in numbers.split()]))\n\n\nif __name__ == \"__main__\":\n    print(sort_numbers(\"three one five\"))\n"}
{"task_id": "HumanEval/20", "completion": "    min_diff = abs(numbers[0] - numbers[1])\n    result = (numbers[0], numbers[1])\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result\n\n\nif __name__ == '__main__':\n    print(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    print(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n\n\nif __name__ == '__main__':\n    print(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))\n"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if type(x) == int]\n\n\nif __name__ == \"__main__\":\n    print(filter_integers(input()))\n"}
{"task_id": "HumanEval/23", "completion": "    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "    if n == 0 or n == 1:\n        return -1\n    for i in range(int(n**0.5), 0, -1):\n        if n % i == 0:\n            return i\n\nif __name__ == \"__main__\":\n    print(largest_divisor(int(input())))"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == '__main__':\n    print(*factorize(int(input())), sep='\\n')\n"}
{"task_id": "HumanEval/26", "completion": "    return [x for x in numbers if numbers.count(x) == 1]\n\n\nif __name__ == '__main__':\n    print(remove_duplicates([1, 2, 3, 2, 4]))\n"}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()\n"}
{"task_id": "HumanEval/28", "completion": "    return \"\".join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]\n\nif __name__ == \"__main__\":\n    print(get_positive(list(map(int, input().split()))))\n"}
{"task_id": "HumanEval/31", "completion": "    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "    assert len(xs) % 2 == 0\n    n = len(xs) // 2\n    if xs[-1]!= 0:\n        return -xs[-2] / xs[-1]\n    else:\n        return -(poly(xs[:-2], 0) / poly(xs[:-2], 1))\n\n\nif __name__ == '__main__':\n    print(round(find_zero([1, 2]), 2))\n    print(round(find_zero([-6, 11, -6, 1]), 2))\n"}
{"task_id": "HumanEval/33", "completion": "    return [x if i % 3!= 0 else sorted(set(x for x in l if i % 3 == 0))[0] for i, x in enumerate(l)]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))\n\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))"}
{"task_id": "HumanEval/35", "completion": "    return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "    ans = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            ans += 1\n    return ans\n\nif __name__ == \"__main__\":\n    print(fizz_buzz(int(input())))"}
{"task_id": "HumanEval/37", "completion": "    for i in range(0, len(l), 2):\n        if i + 1 < len(l) and type(l[i]) == type(l[i+1]):\n            l[i+1] = sorted(l[i], l[i+1])\n    return l\n\nif __name__ == \"__main__\":\n    print(sort_even([1, 2, 3]))\n    print(sort_even([5, 6, 3, 4]))\n    print(sort_even([1, 2, 3, 4, 5, 6]))\n    print(sort_even([1, 2, 3, 4, 5, 6, 7]))\n    print(sort_even([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1"}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\nif __name__ == '__main__':\n    s = input()\n    print(encode_cyclic(s))\n"}
{"task_id": "HumanEval/39", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        fib = [2, 3]\n        for i in range(2, n + 1):\n            fib.append(fib[-1] + fib[-2])\n        for i in range(len(fib)):\n            if all(fib[i] % j!= 0 for j in range(2, int(fib[i] ** 0.5) + 1)):\n                return fib[i]\n\nif __name__ == \"__main__\":\n    print(prime_fib(int(input())))\n"}
{"task_id": "HumanEval/40", "completion": "    l = set(l)\n    for i in l:\n        for j in l:\n            if i + j == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return (n * (n - 1)) // 2\n\n\nif __name__ == '__main__':\n    print(car_race_collision(int(input())))\n"}
{"task_id": "HumanEval/42", "completion": "    return [i + 1 for i in l]\n"}
{"task_id": "HumanEval/43", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i]+l[j] == 0:\n                return True\n    return False\n\nif __name__ == \"__main__\":\n    print(pairs_sum_to_zero([1, 3, 5, 0]))\n    print(pairs_sum_to_zero([1, 3, -2, 1]))\n    print(pairs_sum_to_zero([1, 2, 3, 7]))\n    print(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]))\n    print(pairs_sum_to_zero([1]))\n"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return \"0\"\n    ans = \"\"\n    while x > 0:\n        ans += str(x % base)\n        x //= base\n    return ans[::-1]\n\nprint(change_base(int(input()), int(input())))"}
{"task_id": "HumanEval/45", "completion": "    return (a * h / 2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/46", "completion": "    if n < 4:\n        return n * (n - 1) // 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"}
{"task_id": "HumanEval/47", "completion": "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/49", "completion": "    if n == 0:\n        return 1 % p\n    elif n < 0:\n        return pow(2, -n, p)\n    else:\n        return pow(2, n, p)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\nif __name__ == '__main__':\n    # print(encode_shift(\"hello\"))\n    # print(decode_shift(\"mpnhg\"))\n    pass\n"}
{"task_id": "HumanEval/51", "completion": "    return \"\".join([char for char in text if not char in ['a', 'e', 'i', 'o', 'u']])\n\nprint(remove_vowels(input()))"}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)\n"}
{"task_id": "HumanEval/53", "completion": "    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "    return sorted(set(s0)) == sorted(set(s1))"}
{"task_id": "HumanEval/55", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for b in brackets:\n        if b == '<':\n            stack.append(b)\n        else:\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/57", "completion": "    return all(l[i] < l[i + 1] for i in range(len(l) - 1)) or \\\n           all(l[i] > l[i + 1] for i in range(len(l) - 1))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1).intersection(set(l2)))\n\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2\n"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for b in brackets:\n        if b == '(':\n            stack.append(b)\n        else:\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/62", "completion": "    return [x*i for i, x in enumerate(xs[::-1], start=1)][::-1]\n\nif __name__ == '__main__':\n    print(derivative([3, 1, 2, 4, 5]))\n    print(derivative([1, 2, 3]))\n"}
{"task_id": "HumanEval/63", "completion": "    if n < 3:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for i in s:\n        if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\":\n            count += 1\n        elif i == \"y\":\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print(vowels_count(input()))\n"}
{"task_id": "HumanEval/65", "completion": "    s = str(abs(x))\n    if len(s) == 1:\n        return s\n    else:\n        if shift >= len(s):\n            return s[::-1]\n        else:\n            return s[-shift:] + s[:-shift]\n        \nprint(circular_shift(-1234567890, 1))\n"}
{"task_id": "HumanEval/66", "completion": "    return sum([ord(c) for c in s if c.isupper()])\n\nprint(digitSum('abAB'))\n"}
{"task_id": "HumanEval/67", "completion": "    s=s.split()\n    n=int(s[0])+int(s[2])\n    print(n-int(s[4]))\n    \nfruit_distribution(input(),int(input()))"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_even = float('inf')\n    min_index = -1\n    for i, x in enumerate(arr):\n        if x % 2 == 0 and x < min_even:\n            min_even = x\n            min_index = i\n    return [min_even, min_index]"}
{"task_id": "HumanEval/69", "completion": "    d = {}\n    for i in lst:\n        if i not in d:\n            d[i] = 0\n        d[i]+=1\n    \n    ans = -1\n    for i in range(1,max(d)+1):\n        if d[i]>=i:\n            ans = i\n            break\n    return ans\n\nprint(search([4, 1, 2, 2, 3, 1]))\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nprint(search([5, 5, 4, 4, 4]))\n"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) == 0:\n        return lst\n    else:\n        min = min(lst)\n        max = max(lst)\n        lst.remove(min)\n        lst.remove(max)\n        return [min, max] + strange_sort_list(lst)\n\nprint(*strange_sort_list(list(map(int, input().split()))))"}
{"task_id": "HumanEval/71", "completion": "    s = sorted([a,b,c])\n    if s[0]+s[1]>s[2]:\n        return (s[0]*s[1]/2)\n    else:\n        return -1\n    \nprint(triangle_area(int(input()), int(input()), int(input())))"}
{"task_id": "HumanEval/72", "completion": "    s = sum(q)\n    if s > w:\n        return False\n    else:\n        return q == q[::-1]\n    \nn = int(input())\nfor i in range(n):\n    l = input().split()\n    print(will_it_fly(l,int(input())))"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    dp = [[float('inf')]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for l in range(1, n):\n        for i in range(n-l):\n            j = i+l\n            if arr[i]==arr[j]:\n                dp[i][j] = dp[i+1][j-1]\n            else:\n                dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1\n    return dp[0][n-1]\n\nprint(smallest_change([1,2,3,5,4,7,9,6]))\n"}
{"task_id": "HumanEval/74", "completion": "    l1 = len(lst1)\n    l2 = len(lst2)\n    if l1 < l2:\n        return lst1\n    elif l1 > l2:\n        return lst2\n    else:\n        return lst1\n\n\nprint(total_match(input().split(), input().split()))"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, 10):\n        if a % i == 0:\n            return False\n    return True\n\nprint(is_multiply_prime(int(input())))"}
{"task_id": "HumanEval/76", "completion": "    return (n ** int(str(x).split('^')[1])) == x\n    \nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"}
{"task_id": "HumanEval/77", "completion": "    return (a**(1/3))%1==0\n    \nn=int(input())\nfor i in range(n):\n    x=int(input())\n    print(iscube(x))"}
{"task_id": "HumanEval/78", "completion": "    # your code here\n    s=set()\n    for i in range(2,11):\n        if i%2==0:\n            continue\n        else:\n            s.add(i)\n    ans=0\n    for i in num:\n        if ord(i)>=ord('A'):\n            if ord(i)-ord('A')+10 in s:\n                ans+=1\n        elif ord(i)>=ord('2'):\n            if int(i) in s:\n                ans+=1\n    return ans\n    \nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))\n"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0db\"\n    else:\n        result = \"\"\n        while decimal > 0:\n            result += str(decimal % 2)\n            decimal //= 2\n        return \"db\" + result[::-1] + \"db\"\n\nprint(decimal_to_binary(int(input())))"}
{"task_id": "HumanEval/80", "completion": "    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if s[i : i + 3] in s[:i] + s[i + 3:]:\n            return False\n    return True\n\nprint(is_happy(\"abc\"))\nprint(is_happy(\"abcc\"))\nprint(is_happy(\"abccd\"))\nprint(is_happy(\"abccdd\"))\nprint(is_happy(\"abccddd\"))\nprint(is_happy(\"abccdddd\"))\nprint(is_happy(\"abccddddd\"))\nprint(is_happy(\"abccdddddd\"))\nprint(is_happy(\"abccddddddd\"))\nprint(is_happy(\"abccdddddddd\"))\nprint(is_happy(\"abccddddddddd\"))\nprint(is_happy(\"abccdddddddddd\"))\nprint(is_happy(\"abccddddddddddd\"))\nprint(is_happy(\"abccdddddddddddd\"))\nprint(is_happy(\"abccddddddddddddd\"))\nprint(is_happy(\"abccdddddddddddddd\"))\nprint(is_happy(\"abccddddddddddddddd\"))\nprint(is_happy(\"abccdddddddddddddddd\"))\nprint(is_happy(\"abccddddddddddddddddd\"))\nprint(is_happy(\"abccdddddddddddddddddd\"))\nprint(is_happy(\"abccddddddddddddddddddd\"))\nprint(is_happy(\"abccdddddddddddddddddddd\"))\nprint(is_happy(\"abccddddddddddddddddddddd\"))\nprint(is_happy(\"abccdddddddddddddddddddddd\"))\nprint(is_happy(\"abccddddddddddddddddddddddd\"))\nprint(is_happy(\"abccdddddddddddddddddddddddd\"))\nprint(is_"}
{"task_id": "HumanEval/81", "completion": "    # your code here\n    gpa = {4.0:\"A+\", 3.7:\"A\", 3.3:\"A-\", 3.0:\"B+\", 2.7:\"B\", 2.3:\"B-\", 2.0:\"C+\", 1.7:\"C\", 1.3:\"C-\", 1.0:\"D+\", 0.7:\"D\", 0.0:\"D-\"}\n    return [gpa[x] for x in grades]\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))"}
{"task_id": "HumanEval/82", "completion": "    n = len(string)\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n    \nprint(prime_length(\"abc\"))"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 10\n    elif n == 2:\n        return 91\n    else:\n        return (10**(n-1) - 1)*9 + 10\n\nprint(starts_one_ends(int(input())))"}
{"task_id": "HumanEval/84", "completion": "    ans = ''\n    while N > 0:\n        ans += str(N % 2)\n        N //= 2\n    return ans\n\nprint(solve(int(input())))"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[::2])\n    \nprint(add([int(x) for x in input().split()]))"}
{"task_id": "HumanEval/86", "completion": "    return \" \".join([sorted(word) for word in s.split(\" \")])\n\nprint(anti_shuffle(\"Hello World!!!!\"))"}
{"task_id": "HumanEval/87", "completion": "    res = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                res.append((i, len(row)-j-1))\n    return sorted(res)\n\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1))"}
{"task_id": "HumanEval/88", "completion": "    # your code here\n    s = sum(array)\n    if s % 2 == 0:\n        return sorted(array)[::-1]\n    else:\n        return sorted(array)\n    \nprint(sort_array([2, 4, 3, 0, 1, 5]))"}
{"task_id": "HumanEval/89", "completion": "    s = list(s)\n    for i in range(len(s)):\n        if ord(s[i]) >= ord(\"a\") and ord(s[i]) <= ord(\"z\"):\n            s[i] = chr((ord(s[i]) - ord(\"a\")) * 2 % 26 + ord(\"a\"))\n        elif ord(s[i]) >= ord(\"A\") and ord(s[i]) <= ord(\"Z\"):\n            s[i] = chr((ord(s[i]) - ord(\"A\")) * 2 % 26 + ord(\"A\"))\n    return \"\".join(s)\n\nprint(encrypt(\"hello\"))"}
{"task_id": "HumanEval/90", "completion": "    lst = sorted(lst)\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))\n"}
{"task_id": "HumanEval/91", "completion": "    ans = 0\n    for s in S.split('.'):\n        if s[-1] in ['?','!']:\n            s = s[:-1]\n        if s[0] == 'I':\n            ans += 1\n    return ans\n\nprint(is_bored(input()))"}
{"task_id": "HumanEval/92", "completion": "    x = int(x)\n    y = int(y)\n    z = int(z)\n    return (x+y==z or y+z==x or z+x==y) and type(x) == int and type(y) == int and type(z) == int\nprint(any_int(*map(float, input().split())))"}
{"task_id": "HumanEval/93", "completion": "    # your code here\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    ans = ''\n    for char in message:\n        if char.islower():\n            if char in vowels:\n                ans += chr((ord(char) + 2 - ord('a')) % 26 + ord('a'))\n            else:\n                ans += chr(ord(char) ^ 32)\n        elif char.isupper():\n            if char in vowels:\n                ans += chr((ord(char) + 2 - ord('A')) % 26 + ord('A'))\n            else:\n                ans += chr(ord(char) ^ 32)\n        else:\n            ans += char\n    return ans\n\nprint(encode(\"hello\"))"}
{"task_id": "HumanEval/94", "completion": "    primes = []\n    for i in range(len(lst)):\n        if lst[i] > 1:\n            for j in range(2, int(lst[i]**0.5)+1):\n                if lst[i] % j == 0:\n                    break\n            else:\n                primes.append(lst[i])\n    print(sum([int(x) for x in str(max(primes))]))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    \n    first = dict.keys()[0]\n    if type(first)!= str:\n        return False\n    \n    for key in dict.keys():\n        if type(key)!= str:\n            return False\n        \n        if len(key) > 1 and (key[0].isupper() ^ key[1:].islower()):\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/96", "completion": "    if n < 2: return []\n    primes = [2]\n    for i in range(3, n + 1):\n        flag = True\n        for j in primes:\n            if i % j == 0:\n                flag = False\n                break\n        if flag:\n            primes.append(i)\n    return primes\n\nprint(count_up_to(int(input())))"}
{"task_id": "HumanEval/97", "completion": "    if a < 0 or b < 0:\n        a = abs(a)\n        b = abs(b)\n    \n    ans = 0\n    while a > 0 or b > 0:\n        if a % 10 * b % 10!= 0:\n            ans += (a % 10) * (b % 10)\n        \n        a //= 10\n        b //= 10\n    \n    return ans\n\nprint(multiply(-14, -15))"}
{"task_id": "HumanEval/98", "completion": "    cnt = 0\n    for i, ch in enumerate(s):\n        if i % 2 == 0 and 'AEIOU'.__contains__(ch.upper()):\n            cnt += 1\n    return cnt\n\nprint(count_upper(\"A\"))\nprint(count_upper(\"AB\"))\nprint(count_upper(\"ABC\"))\nprint(count_upper(\"ABCD\"))\nprint(count_upper(\"ABCDA\"))\nprint(count_upper(\"ABCDAEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(count_upper(\"ABCDAEFGHIJKLMNOPQRSTUVWXYZA\"))\nprint(count_upper(\"ABCDAEFGHIJKLMNOPQRSTUVWXYZAB\"))\nprint(count_upper(\"ABCDAEFGHIJKLMNOPQRSTUVWXYZABC\"))\nprint(count_upper(\"ABCDAEFGHIJKLMNOPQRSTUVWXYZABCD\"))\nprint(count_upper(\"ABCDAEFGHIJKLMNOPQRSTUVWXYZABCDA\"))\nprint(count_upper(\"ABCDAEFGHIJKLMNOPQRSTUVWXYZABCDAEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(count_upper(\"ABCDAEFGHIJKLMNOPQRSTUVWXYZABCDAEFGHIJKLMNOPQRSTUVWXYZA\"))\nprint(count_upper(\"ABCDAEFGHIJKLMNOPQRSTUVWXYZABCDAEFGHIJKLMNOPQRSTUVWXYZAB\"))\nprint(count_upper(\"ABCDAEFGHIJKLMNOPQRSTUVWXYZABCDAEFGHIJKLMNOPQRSTUVWXYZABC\"))\nprint(count_upper(\"ABCDAEFGHIJKLMNOPQRSTUVWXYZABCDAEFGHIJKLMNOPQRSTUVWXYZABCD\"))\nprint(count_"}
{"task_id": "HumanEval/99", "completion": "    # your code here\n    x = float(value)\n    if int(x) == x:\n        return int(x)\n    else:\n        if x < 0:\n            return int(x + 1)\n        else:\n            return int(x - 1)\n\nprint(closest_integer(input()))"}
{"task_id": "HumanEval/100", "completion": "    ans = []\n    while n > 0:\n        ans.append(n)\n        n = (n + 1) // 2\n    return ans\n\nprint(make_a_pile(int(input())))"}
{"task_id": "HumanEval/101", "completion": "    s = s.replace(\",\",\" \")\n    return s.split()\n"}
{"task_id": "HumanEval/102", "completion": "    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1\n    \nprint(choose_num(int(input()), int(input())))"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    else:\n        avg = round((m + n)/2)\n        return format(avg, 'b')\n    \nprint(rounded_avg(int(input()), int(input())))"}
{"task_id": "HumanEval/104", "completion": "    y = []\n    for i in range(len(x)):\n        if int(str(x[i])[-1]) % 2!= 0:\n            y.append(x[i])\n    print(*sorted(y))\n\n\nif __name__ == '__main__':\n    x = input().split()\n    for i in range(len(x)):\n        x[i] = int(x[i])\n    unique_digits(x)\n"}
{"task_id": "HumanEval/105", "completion": "    names = {1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"Five\", 6:\"Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"}\n    ans = []\n    for i in sorted(filter(lambda x: 1 <= x <= 9, arr)):\n        ans.append(names[i])\n    return ans[::-1]\n\nprint(by_length([int(x) for x in input().split()]))"}
{"task_id": "HumanEval/106", "completion": "    ans = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            ans.append(i)\n        else:\n            ans.append(sum(range(1, i+1)))\n    return ans\n\nprint(f(int(input())))"}
{"task_id": "HumanEval/107", "completion": "    ans = []\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if int(str(i)[::-1]) % 2 == 0:\n                ans.append('even')\n            else:\n                ans.append('odd')\n    print(ans.count('even'), ans.count('odd'))\n\n\nif __name__ == '__main__':\n    n = int(input())\n    even_odd_palindrome(n)\n"}
{"task_id": "HumanEval/108", "completion": "    ans = 0\n    for i in arr:\n        if i < 0:\n            ans += 1\n        else:\n            s = str(i)\n            cnt = 0\n            for j in range(len(s)):\n                cnt += int(s[j])\n            if cnt > 0:\n                ans += 1\n    return ans\n\nprint(count_nums([-1, 11, -11]))\n"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        if arr[i+1] <= arr[i]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    break\n            else:\n                return 'NO'\n    return 'YES'\n\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 6]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 7]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 8]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 9]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 10]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 11]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 12]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 13]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 14]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 15]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 16]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 17]))\nprint(exchange([1, 2, 3, "}
{"task_id": "HumanEval/111", "completion": "    test = test.split()\n    d = dict()\n    for i in range(len(test)):\n        if test[i] not in d:\n            d[test[i]] = 0\n        d[test[i]] += 1\n    max_count = -1\n    for key in d:\n        if d[key] > max_count:\n            max_count = d[key]\n    ans = []\n    for key in d:\n        if d[key] == max_count:\n            ans.append((key,d[key]))\n    return ans\nprint(histogram(\"a b c\"))\n"}
{"task_id": "HumanEval/112", "completion": "    # your code here\n    s=list(s)\n    c=list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            del s[i]\n    s=\"\".join(s)\n    print(s)\n    if s==s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)\n    \nprint(reverse_delete(\"abcdedcba\",\"ab\"))"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if int(c) % 2 == 1:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}.\\n\".format(count, len(s), s, 'nput'))\n    return result\n\nprint(*odd_count(input().split()))"}
{"task_id": "HumanEval/114", "completion": "    if not nums: return 0\n    n = len(nums)\n    ans = float('inf')\n    for i in range(n):\n        cur_sum = 0\n        for j in range(i, n):\n            cur_sum += nums[j]\n            ans = min(ans, cur_sum)\n    return ans\n\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))\nprint(minSubArraySum([-1, -2, -3]))\n"}
{"task_id": "HumanEval/115", "completion": "    #print(\"max_fill\")\n    n = len(grid)\n    m = len(grid[0])\n    #print(n,m)\n    dp = [[0 for i in range(m)] for j in range(n)]\n    #print(dp)\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or j == 0:\n                dp[i][j] = grid[i][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    #print(dp)\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or j == 0:\n                continue\n            if dp[i][j] > capacity:\n                ans += (dp[i][j] // capacity) * capacity\n                dp[i][j] -= capacity\n                ans += dp[i][j]\n    return ans\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n    grid = []\n    for _ in range(int(input())):\n        grid.append([int(x) for x in input().split()])\n    print(max_fill(grid, int(input())))\nmain()"}
{"task_id": "HumanEval/116", "completion": "    arr = [(bin(x).count('1'), x) for x in arr]\n    arr.sort()\n    return [x[1] for x in arr]\n"}
{"task_id": "HumanEval/117", "completion": "    vowels = set('aeiou')\n    res = []\n    for word in s.split():\n        cnt = 0\n        for i in range(len(word)):\n            if not word[i].lower() in vowels:\n                cnt += 1\n        if cnt == n:\n            res.append(word)\n    return res\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))\n"}
{"task_id": "HumanEval/118", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)):\n        if word[i] not in vowels:\n            for j in range(i+1, len(word)):\n                if word[j] not in vowels:\n                    return word[i+1:j]\n    return ''\n\nprint(get_closest_vowel('yogurt'))\nprint(get_closest_vowel('FULL'))\nprint(get_closest_vowel('quick'))\nprint(get_closest_vowel('ab'))\n"}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for i in lst:\n        for j in i:\n            if j == \"(\":\n                stack.append(j)\n            else:\n                if len(stack) > 0:\n                    stack.pop()\n                else:\n                    return \"No\"\n    if len(stack) == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(match_parens(input().split()))"}
{"task_id": "HumanEval/120", "completion": "    # Sort the array in descending order\n    arr.sort()\n    # Return the first k elements of the sorted array\n    return arr[:k]\n\n# Tests\nprint(maximum([-3, -4, 5], 3))\nprint(maximum([4, -4, 4], 2))\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))\n"}
{"task_id": "HumanEval/121", "completion": "    ans = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1 and i % 2 == 0:\n            ans += lst[i]\n    return ans\n\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))\n"}
{"task_id": "HumanEval/122", "completion": "    ans = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            ans += arr[i]\n    return ans\n\nif __name__ == \"__main__\":\n    arr = list(map(int, input().split()))\n    k = int(input())\n    print(add_elements(arr, k))"}
{"task_id": "HumanEval/123", "completion": "    ans = []\n    while n!= 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            ans.append(n)\n            n = 3 * n + 1\n    ans.sort()\n    return ans\n\nprint(get_odd_collatz(int(input())))"}
{"task_id": "HumanEval/124", "completion": "    m = int(date[0:2])\n    d = int(date[3:5])\n    y = int(date[6:10])\n    if len(date)!= 10:\n        return False\n    elif (m < 1 or m > 12) or (d < 1 or d > 31) or (y < 1 or y > 9999):\n        return False\n    else:\n        if m == 2:\n            if d > 29:\n                return False\n        elif m in [4, 6, 9, 11]:\n            if d > 30:\n                return False\n        else:\n            if d > 31:\n                return False\n        return True\n\nif __name__ == '__main__':\n    while True:\n        try:\n            s = input()\n            print(valid_date(s))\n        except EOFError:\n            break\n"}
{"task_id": "HumanEval/125", "completion": "    if txt.count(',') > 0:\n        return txt.split(',')\n    elif txt.count(' ') > 0:\n        return txt.split()\n    else:\n        count = 0\n        for i in range(ord('a'), ord('z') + 1):\n            if chr(i) in txt and (i - ord('a')) % 2!= 0:\n                count += 1\n        return count\n    \nprint(split_words(input()))"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) == 0:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i+1] < lst[i]:\n            return False\n    return True\n\nprint(is_sorted([int(x) for x in input().split()]))"}
{"task_id": "HumanEval/127", "completion": "    if interval1[0] > interval1[1]:\n        interval1 = (interval1[1], interval1[0])\n    if interval2[0] > interval2[1]:\n        interval2 = (interval2[1], interval2[0])\n    if interval1[1] < interval2[0] or interval1[0] > interval2[1]:\n        return 'NO'\n    else:\n        x = max(interval1[0], interval2[0])\n        y = min(interval1[1], interval2[1])\n        if y - x == 0:\n            return 'NO'\n        elif y - x == 1:\n            return 'YES'\n        else:\n            for i in range(2, int(y - x + 1)):\n                if y - x == 2:\n                    return 'YES'\n                elif y - x % i == 0:\n                    return 'NO'\n            return 'YES'\n\nprint(intersection((-3, -1), (-5, 5)))\n"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign = 1\n    ans = 0\n    for i in arr:\n        if i == 0:\n            sign = 0\n        else:\n            ans += sign * abs(i)\n            sign *= i // abs(i)\n    return ans\n\nprint(prod_signs([-1, 2, 3]))\n"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[float('inf')]*n for _ in range(k)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(n):\n            for x in range(n):\n                for y in range(n):\n                    if i == x or j == y:\n                        continue\n                    dp[0][x*n+y] = min(dp[0][x*n+y], dp[0][i*n+j]+grid[i][j])\n    \n    for i in range(1, k):\n        for j in range(n**2):\n            dp[i][j] = float('inf')\n            for x in range(n):\n                for y in range(n):\n                    if j//n!= x and j%n!= y:\n                        continue\n                    dp[i][j] = min(dp[i][j], dp[i-1][x*n+y]+grid[x][y])\n    \n    ans = []\n    for i in range(n**2):\n        if dp[-1][i] == float('inf'):\n            continue\n        ans.append(i+1)\n    return ans\n\nif __name__ == '__main__':\n    grid = [[1,2,3],[4,5,6],[7,8,9]]\n    print(minPath(grid, 3))"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    else:\n        t = [1, 3]\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                t.append(1 + i / 2)\n            else:\n                t.append(t[-1] + t[-2] + t[i-1])\n        return t\n    \nprint(*tri(int(input())))"}
{"task_id": "HumanEval/131", "completion": "    ans = 1\n    while n > 0:\n        d = n % 10\n        if d % 2 == 1:\n            ans *= d\n        n //= 10\n    return ans\n\nprint(digits(int(input())))"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(i)\n        elif string[i] == ']':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                stack.append(i)\n    if len(stack)!= 0:\n        return True\n    else:\n        return False\n    \nprint(is_nested}
{"task_id": "HumanEval/133", "completion": "    ans=0\n    for i in range(len(lst)):\n        ans+=int((lst[i])**2)\n    return ans\n\nprint(sum_squares([1.4,4.2,0]))\n"}
{"task_id": "HumanEval/134", "completion": "    return txt[-1].isalpha() and txt[-1] not in''\n\nprint(check_if_last_char_is_a_letter('apple pie'))\nprint(check_if_last_char_is_a_letter('apple pi e'))\nprint(check_if_last_char_is_a_letter('apple pi e '))\nprint(check_if_last_char_is_a_letter(''))"}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr)-1,0,-1):\n        if arr[i-1] < arr[i]:\n            return i\n    return -1\n\nprint(can_arrange([1,2,4,3,5]))\nprint(can_arrange([1,2,3]))\nprint(can_arrange([1,2,4,3,5,6]))\nprint(can_arrange([1,2,4,3,5,6,7]))\nprint(can_arrange([1,2,4,3,5,6,7,8]))\nprint(can_arrange([1,2,4,3,5,6,7,8,9]))\nprint(can_arrange([1,2,4,3,5,6,7,8,9,10]))\nprint(can_arrange([1,2,4,3,5,6,7,8,9,10,11]))\nprint(can_arrange([1,2,4,3,5,6,7,8,9,10,11,12]))\nprint(can_arrange([1,2,4,3,5,6,7,8,9,10,11,12,13]))\nprint(can_arrange([1,2,4,3,5,6,7,8,9,10,11,12,13,14]))\nprint(can_arrange([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15]))\nprint(can_arrange([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(can_arrange([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(can_arrange([1,2,4,3,5,6,7,8,9,10,11,"}
{"task_id": "HumanEval/136", "completion": "    pos = neg = None\n    for i in lst:\n        if i < 0:\n            if neg is None or i > neg:\n                neg = i\n        elif i > 0:\n            if pos is None or i < pos:\n                pos = i\n    return (neg, pos)\n\nprint(largest_smallest_integers([-1, -2, -3, 1, 2, 3]))\nprint(largest_smallest_integers([-1, -2, -3, 1, 2, 3, 0]))\nprint(largest_smallest_integers([0, 0, 0, 0, 0, 0]))\nprint(largest_smallest_integers([-1, -2, -3, 1, 2, 3, 0, 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"task_id": "HumanEval/137", "completion": "    try:\n        if float(a) > float(b):\n            return a\n        elif float(a) < float(b):\n            return b\n        else:\n            return None\n    except ValueError:\n        if str(a).replace(\",\",\"\").isdigit() and str(b).replace(\",\",\"\").isdigit():\n            if int(a) > int(b):\n                return a\n            elif int(a) < int(b):\n                return b\n            else:\n                return None\n        else:\n            if len(str(a)) > len(str(b)):\n                return a\n            elif len(str(a)) < len(str(b)):\n                return b\n            else:\n                return None\n\nprint(compare_one(1, 2.5))\nprint(compare_one(1, \"2,3\"))\nprint(compare_one(\"5,1\", \"6\"))\nprint(compare_one(\"1\", 1))\nprint(compare_one(1, 1))\nprint(compare_one(1, 0))\nprint(compare_one(0, 1))\nprint(compare_one(1, -1))\nprint(compare_one(-1, 1))\nprint(compare_one(\"-1\", \"-1\"))\nprint(compare_one(\"-1\", \"1\"))\nprint(compare_one(\"1\", \"-1\"))\nprint(compare_one(\"1\", \"1\"))\nprint(compare_one(\"1\", \"0\"))\nprint(compare_one(\"0\", \"1\"))\nprint(compare_one(\"-1\", \"0\"))\nprint(compare_one(\"0\", \"-1\"))\nprint(compare_one(\"-1\", \"-1\"))\nprint(compare_one(\"1\", \"1\"))\nprint(compare_one(\"1\", \"0\"))\nprint(compare_one(\"0\", \"1\"))\nprint(compare_one(\"-1\", \"0\"))\nprint(compare_one(\"0\", \"-1\"))\nprint(compare_one(\"-1\", \"-1\"))\nprint(compare_one(\"1\", \"1\"))\nprint(compare_one(\"1\", \"0\"))\nprint(compare_one(\"0\", \"1\"))\nprint(compare_one(\"-"}
{"task_id": "HumanEval/138", "completion": "    if n % 2!= 0 or n < 8:\n        return False\n    else:\n        for i in range(2, int(n**0.5)+1, 2):\n            if n - i * 4 >= 0 and (n-i*4)%2==0:\n                return True\n        return False\n\nprint(is_equal_to_sum_even(int(input())))"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n*special_factorial(n-1)\n\nprint(special_factorial(int(input())))"}
{"task_id": "HumanEval/140", "completion": "    return '_'.join(text.split()) \\\n       .replace(' ', '-') \\\n       .replace('--', '-')\n\nprint(fix_spaces(\"Example\"))\nprint(fix_spaces(\"Example 1\"))\nprint(fix_spaces(\" Example 2\"))\nprint(fix_spaces(\" Example   3\"))\n"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 7 or len(file_name) < 5:\n        return \"No\"\n    else:\n        if file_name.count(\".\")!= 1:\n            return \"No\"\n        elif file_name[0].isalpha() == False:\n            return \"No\"\n        elif file_name[-4:] not in [\"txt\", \"exe\", \"dll\"]:\n            return \"No\"\n        else:\n            return \"Yes\"\n\nprint(file_name_check(\"example.txt\"))\nprint(file_name_check(\"1example.dll\"))\nprint(file_name_check(\"example.exe\"))\nprint(file_name_check(\"example.py\"))\nprint(file_name_check(\"example.c\"))\nprint(file_name_check(\"example.cpp\"))\nprint(file_name_check(\"example.h\"))\nprint(file_name_check(\"example.hpp\"))\nprint(file_name_check(\"example.java\"))\nprint(file_name_check(\"example.js\"))\nprint(file_name_check(\"example.css\"))\nprint(file_name_check(\"example.html\"))\nprint(file_name_check(\"example.php\"))\nprint(file_name_check(\"example.sql\"))\nprint(file_name_check(\"example.xml\"))\nprint(file_name_check(\"example.json\"))\nprint(file_name_check(\"example.md\"))\nprint(file_name_check(\"example.sh\"))\nprint(file_name_check(\"example.bat\"))\nprint(file_name_check(\"example.cmd\"))\nprint(file_name_check(\"example.pl\"))\nprint(file_name_check(\"example.rb\"))\nprint(file_name_check(\"example.py\"))\nprint(file_name_check(\"example.cs\"))\nprint(file_name_check(\"example.go\"))\nprint(file_name_check(\"example.kt\"))\nprint(file_name_check(\"example.swift\"))\nprint(file_name_check(\"example.fs\"))\nprint(file_name_check(\"example.rs\"))\nprint(file_name_check(\"example.clj\"))\nprint(file_name_check(\""}
{"task_id": "HumanEval/142", "completion": "    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] *= lst[i]\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] *= lst[i] * lst[i]\n    return sum(lst)\n\n\nif __name__ == '__main__':\n    print(sum_squares([int(x) for x in input().split()]))\n"}
{"task_id": "HumanEval/143", "completion": "    primes = []\n    for i in range(2, 101):\n        if all(i % j!= 0 for j in range(2, i)):\n            primes.append(i)\n    \n    ans = ''\n    for word in sentence.split():\n        if len(word) in primes:\n            ans +='' + word\n    print(ans[1:])\n\nwords_in_sentence(input())"}
{"task_id": "HumanEval/144", "completion": "    xn, xd = map(int, x.split('/'))\n    yn, yd = map(int, n.split('/'))\n    return (xn*yd == yn*xd) and ((xn*yd) % 1 == 0)\n\nprint(simplify('1/3', '4/9'))\n"}
{"task_id": "HumanEval/145", "completion": "    nums = sorted(((sum(map(int, str(x))), x) for x in nums), key=lambda x: (x[0], -len(str(x[1]))))\n    return [x[1] for x in nums]\n\nprint(order_by_points([-12, -11, -1, 1, 11]))\n"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] == '1' and str(num)[-1] == '1':\n            count += 1\n    return count\n    \nprint(specialFilter([int(x) for x in input().split()]))"}
{"task_id": "HumanEval/147", "completion": "    ans = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if ((i*i - i + 1) + (j*j - j + 1)) % 3 == 0:\n                ans += 1\n    return ans\n\nif __name__ == \"__main__\":\n    print(get_max_triples(int(input())))"}
{"task_id": "HumanEval/148", "completion": "    p = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    i = p.index(planet1)\n    j = p.index(planet2)\n    return tuple(sorted(p[i+1:j]))\n    \nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))\n"}
{"task_id": "HumanEval/149", "completion": "    lst = [x for x in lst if len(x) % 2 == 0]\n    lst.sort()\n    return lst\n\nprint(sorted_list_sum(['a', 'b', 'c', 'd']))\n"}
{"task_id": "HumanEval/150", "completion": "    import math\n    i = 2\n    while i <= int(math.sqrt(n)):\n        if n % i == 0:\n            return y\n        i += 1\n    return x\n        \nprint(x_or_y(int(input()), int(input()), int(input())))"}
{"task_id": "HumanEval/151", "completion": "    ans=0\n    for i in lst:\n        if type(i)==int and i%2!=0:\n            ans+=i**2\n    return ans*2\nprint(double_the_difference(list(map(int,input().split()))))"}
{"task_id": "HumanEval/152", "completion": "    return [abs(a - b) for a,b in zip(game,guess)]\n\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\n"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -float(\"inf\")\n    best_extension = None\n    for ext in extensions:\n        cap = sum([ord(c)-64 for c in ext if ord(c)>=65])\n        sm = sum([ord(c)-97 for c in ext if ord(c)<=97])\n        strength = cap-sm\n        if strength > max_strength:\n            max_strength = strength\n            best_extension = ext\n    return \"{}.{}\".format(class_name, best_extension)\n\nprint(Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]))\n"}
{"task_id": "HumanEval/154", "completion": "    n = len(b)\n    for i in range(n):\n        if b == a[i:i+n]:\n            return True\n    return False\n\nprint(cycpattern_check('abc', 'bca'))\n"}
{"task_id": "HumanEval/155", "completion": "    count = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            count += 1\n    return (str(count), str((len(str(abs(num))) - count)))\n\nprint(even_odd_count(-12))\n"}
{"task_id": "HumanEval/156", "completion": "    # Create a dictionary to map the numbers to their roman numerals\n    roman = {\n        1000 : \"m\",\n        900 : \"cm\",\n        500 : \"d\",\n        400 : \"cd\",\n        100 : \"c\",\n        90 : \"xc\",\n        50 : \"l\",\n        40 : \"xl\",\n        10 : \"x\",\n        9 : \"ix\",\n        5 : \"v\",\n        4 : \"iv\",\n        1 : \"i\"\n        }\n    \n    # Initialize our result string\n    result = \"\"\n    \n    # While our number is still greater than 0, keep subtracting the values from the dictionary\n    while number > 0:\n        for key in roman:\n            if number >= key:\n                result += roman[key]\n                number -= key\n                break\n                \n    return result\n\n# Tests\nassert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'\nassert int_to_mini_roman(3999) =='mmmcmlxxxix'\n"}
{"task_id": "HumanEval/157", "completion": "    return (a**2 + b**2 == c**2) or (b**2 + c**2 == a**2) or (c**2 + a**2 == b**2)\n\ndef main():\n    while True:\n        try:\n            a = int(input())\n            b = int(input())\n            c = int(input())\n            print(\"YES\" if right_angle_triangle(a, b, c) else \"NO\")\n        except EOFError:\n            break\nmain()"}
{"task_id": "HumanEval/158", "completion": "    max_len = -1\n    ans = ''\n    for word in words:\n        if len(set(word)) > max_len or (len(set(word)) == max_len and word < ans):\n            max_len = len(set(word))\n            ans = word\n    return ans\n\nprint(find_max(['abc', 'abcd', 'abcde']))"}
{"task_id": "HumanEval/159", "completion": "    if need > remaining:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]"}
{"task_id": "HumanEval/160", "completion": "    if len(operand) == 1:\n        return operand[0]\n    else:\n        res = operand[0]\n        for i in range(len(operator)):\n            op = operator[i]\n            num = operand[i + 1]\n            if op == \"+\":\n                res += num\n            elif op == \"-\":\n                res -= num\n            elif op == \"*\":\n                res *= num\n            elif op == \"//\":\n                res //= num\n            elif op == \"**\":\n                res **= num\n        return res"}
{"task_id": "HumanEval/161", "completion": "    ans = \"\"\n    for i in range(len(s)):\n        if ord('a') <= ord(s[i]) <= ord('z'):\n            ans += chr(ord(s[i]) ^ 0x20)\n        elif ord('A') <= ord(s[i]) <= ord('Z'):\n            ans += chr(ord(s[i]) | 0x20)\n        else:\n            ans += s[i]\n    return ans[::-1]\n\nprint(solve(input()))"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "    if a > b:\n        return []\n    else:\n        return [x for x in range(a,b+1) if x%2==0]\nprint(generate_integers(int(input()), int(input())))"}
