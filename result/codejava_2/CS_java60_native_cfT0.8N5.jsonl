{"src_uid": "3d4df21eebf32ce15841179bb85e6f2f", "id": 61, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1400, "testcases": "[{'input': '4 2\\r\\n1 2 2 3\\r\\n', 'output': ['YES\\r\\n1 2 1 2 \\r\\n']}, {'input': '5 2\\r\\n3 2 1 2 3\\r\\n', 'output': ['YES\\r\\n2 2 1 1 1 \\r\\n']}, {'input': '5 2\\r\\n2 1 1 2 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 4\\r\\n1 1 1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 1 \\r\\n']}, {'input': '11 9\\r\\n1 1 2 2 2 2 2 2 3 4 5\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 9 1 2 \\r\\n']}, {'input': '4 4\\r\\n1 2 2 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 \\r\\n']}, {'input': '5 5\\r\\n1 1 2 1 1\\r\\n', 'output': ['YES\\r\\n1 2 5 3 4 \\r\\n']}, {'input': '4 4\\r\\n1 1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 \\r\\n']}, {'input': '5 4\\r\\n1 2 1 2 3\\r\\n', 'output': ['YES\\r\\n1 3 2 4 1 \\r\\n']}, {'input': '5 5\\r\\n1 1 2 1 3\\r\\n', 'output': ['YES\\r\\n1 2 4 3 5 \\r\\n']}, {'input': '10 10\\r\\n1 2 3 1 2 3 4 5 6 7\\r\\n', 'output': ['YES\\r\\n1 3 5 2 4 6 7 8 9 10 \\r\\n']}, {'input': '8 6\\r\\n1 2 3 3 2 2 3 1\\r\\n', 'output': ['YES\\r\\n1 3 6 1 4 5 2 2 \\r\\n']}, {'input': '6 4\\r\\n1 1 2 2 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 1 2 \\r\\n']}, {'input': '5 5\\r\\n1 1 2 2 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 \\r\\n']}, {'input': '4 3\\r\\n2 2 1 1\\r\\n', 'output': ['YES\\r\\n3 1 1 2 \\r\\n']}, {'input': '10 10\\r\\n1 1 2 2 3 3 4 4 5 5\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 9 10 \\r\\n']}, {'input': '6 5\\r\\n1 1 2 2 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 1 \\r\\n']}, {'input': '4 4\\r\\n3 3 3 5\\r\\n', 'output': ['YES\\r\\n1 2 3 4 \\r\\n']}, {'input': '9 8\\r\\n1 2 2 3 3 3 4 5 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 1 8 \\r\\n']}, {'input': '5 5\\r\\n2 1 1 2 1\\r\\n', 'output': ['YES\\r\\n4 1 2 5 3 \\r\\n']}, {'input': '6 6\\r\\n1 1 2 1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 4 3 5 6 \\r\\n']}, {'input': '6 6\\r\\n1 1 1 2 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '8 8\\r\\n1 1 1 1 1 2 2 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 \\r\\n']}, {'input': '6 6\\r\\n2 1 1 2 1 3\\r\\n', 'output': ['YES\\r\\n4 1 2 5 3 6 \\r\\n']}, {'input': '5 3\\r\\n3 2 1 2 3\\r\\n', 'output': ['YES\\r\\n1 2 1 3 2 \\r\\n']}, {'input': '6 6\\r\\n1 2 3 3 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '1 1\\r\\n5000\\r\\n', 'output': ['YES\\r\\n1 \\r\\n']}, {'input': '3 3\\r\\n6 7 8\\r\\n', 'output': ['YES\\r\\n1 2 3 \\r\\n']}, {'input': '8 6\\r\\n1 1 2 2 3 4 5 6\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 1 2 \\r\\n']}, {'input': '7 5\\r\\n2 3 2 1 1 1 3\\r\\n', 'output': ['YES\\r\\n4 1 5 1 2 3 2 \\r\\n']}, {'input': '5 4\\r\\n1 2 1 2 4\\r\\n', 'output': ['YES\\r\\n1 3 2 4 1 \\r\\n']}, {'input': '8 8\\r\\n1 2 2 2 1 1 3 3\\r\\n', 'output': ['YES\\r\\n1 4 5 6 2 3 7 8 \\r\\n']}, {'input': '3 2\\r\\n5000 5000 5000\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7 6\\r\\n1 2 3 4 2 3 4\\r\\n', 'output': ['YES\\r\\n1 2 4 6 3 5 1 \\r\\n']}, {'input': '2 1\\r\\n5000 5000\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 4\\r\\n3 2 1 2 3\\r\\n', 'output': ['YES\\r\\n4 2 1 3 1 \\r\\n']}, {'input': '4 4\\r\\n2 1 2 3\\r\\n', 'output': ['YES\\r\\n2 1 3 4 \\r\\n']}, {'input': '4 4\\r\\n2 1 3 2\\r\\n', 'output': ['YES\\r\\n2 1 4 3 \\r\\n']}, {'input': '6 6\\r\\n1 2 2 2 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '7 6\\r\\n1 2 3 7 7 7 7\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 1 \\r\\n']}, {'input': '1 1\\r\\n500\\r\\n', 'output': ['YES\\r\\n1 \\r\\n']}, {'input': '8 8\\r\\n2 1 1 1 1 1 1 1\\r\\n', 'output': ['YES\\r\\n8 1 2 3 4 5 6 7 \\r\\n']}, {'input': '6 6\\r\\n1 1 2 2 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '10 9\\r\\n1 2 1 1 1 1 1 1 2 1\\r\\n', 'output': ['YES\\r\\n1 9 2 3 4 5 6 7 1 8 \\r\\n']}, {'input': '8 8\\r\\n1 2 8 2 3 3 3 3\\r\\n', 'output': ['YES\\r\\n1 2 8 3 4 5 6 7 \\r\\n']}, {'input': '9 9\\r\\n1 2 2 3 2 5 3 6 8\\r\\n', 'output': ['YES\\r\\n1 2 3 5 4 7 6 8 9 \\r\\n']}, {'input': '4 4\\r\\n1 2 1 2\\r\\n', 'output': ['YES\\r\\n1 3 2 4 \\r\\n']}, {'input': '4 2\\r\\n2000 2000 2000 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 5\\r\\n1 2 1 2 4\\r\\n', 'output': ['YES\\r\\n1 3 2 4 5 \\r\\n']}, {'input': '8 8\\r\\n1 2 2 2 1 1 1 1\\r\\n', 'output': ['YES\\r\\n1 6 7 8 2 3 4 5 \\r\\n']}, {'input': '5 5\\r\\n3 2 1 2 3\\r\\n', 'output': ['YES\\r\\n4 2 1 3 5 \\r\\n']}, {'input': '9 9\\r\\n1 1 1 1 2 2 2 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 9 \\r\\n']}, {'input': '6 6\\r\\n1 1 1 1 2 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '5 5\\r\\n1 2 2 1 1\\r\\n', 'output': ['YES\\r\\n1 4 5 2 3 \\r\\n']}, {'input': '50 20\\r\\n1 1 1 1 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 \\r\\n']}, {'input': '5 5\\r\\n1 2 3 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 \\r\\n']}, {'input': '5 5\\r\\n1 1 1 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 \\r\\n']}, {'input': '7 3\\r\\n1 2 3 4 5 5 1\\r\\n', 'output': ['YES\\r\\n1 3 1 2 3 1 2 \\r\\n']}, {'input': '2 1\\r\\n7 9\\r\\n', 'output': ['YES\\r\\n1 1 \\r\\n']}, {'input': '4 2\\r\\n4999 4999 4999 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 5\\r\\n1 1 3 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 \\r\\n']}, {'input': '3 3\\r\\n1 1 2\\r\\n', 'output': ['YES\\r\\n1 2 3 \\r\\n']}, {'input': '5 5\\r\\n2 2 1 1 2\\r\\n', 'output': ['YES\\r\\n3 4 1 2 5 \\r\\n']}, {'input': '6 5\\r\\n1 2 3 4 4 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 1 \\r\\n']}, {'input': '1 1\\r\\n1\\r\\n', 'output': ['YES\\r\\n1 \\r\\n']}, {'input': '6 6\\r\\n1 2 1 2 4 5\\r\\n', 'output': ['YES\\r\\n1 3 2 4 5 6 \\r\\n']}, {'input': '8 6\\r\\n1 2 3 4 1 2 3 4\\r\\n', 'output': ['YES\\r\\n1 3 5 1 2 4 6 2 \\r\\n']}, {'input': '6 5\\r\\n1 2 1 2 1 2\\r\\n', 'output': ['YES\\r\\n1 4 2 5 3 1 \\r\\n']}, {'input': '10 10\\r\\n1 2 3 1 2 3 1 2 4 5\\r\\n', 'output': ['YES\\r\\n1 4 7 2 5 8 3 6 9 10 \\r\\n']}, {'input': '8 5\\r\\n9 3 9 6 10 7 8 2\\r\\n', 'output': ['YES\\r\\n1 2 2 3 3 4 5 1 \\r\\n']}, {'input': '18 18\\r\\n10 9 8 7 5 3 6 2 2 9 7 8 2 9 2 8 10 7\\r\\n', 'output': ['YES\\r\\n17 14 11 8 6 5 7 1 2 15 9 12 3 16 4 13 18 10 \\r\\n']}, {'input': '5 1\\r\\n5 2 3 4 5\\r\\n', 'output': ['NO\\r\\n']}, {'input': '9 9\\r\\n9 8 1 3 4 5 3 8 9\\r\\n', 'output': ['YES\\r\\n8 6 1 2 4 5 3 7 9 \\r\\n']}, {'input': '10 10\\r\\n1 2 3 3 2 1 4 5 7 10\\r\\n', 'output': ['YES\\r\\n1 3 5 6 4 2 7 8 9 10 \\r\\n']}, {'input': '10 10\\r\\n1 2 3 3 2 1 4 5 6 10\\r\\n', 'output': ['YES\\r\\n1 3 5 6 4 2 7 8 9 10 \\r\\n']}, {'input': '3 2\\r\\n500 500 500\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 5\\r\\n1 2 3 1 2\\r\\n', 'output': ['YES\\r\\n1 3 5 2 4 \\r\\n']}, {'input': '10 5\\r\\n1 2 3 4 1 2 3 4 1 2\\r\\n', 'output': ['YES\\r\\n1 4 2 4 2 5 3 5 3 1 \\r\\n']}, {'input': '10 7\\r\\n1 2 3 1 2 3 1 2 3 1\\r\\n', 'output': ['YES\\r\\n1 5 1 2 6 2 3 7 3 4 \\r\\n']}, {'input': '3 3\\r\\n1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 \\r\\n']}, {'input': '4 4\\r\\n4999 5000 5000 4999\\r\\n', 'output': ['YES\\r\\n1 3 4 2 \\r\\n']}, {'input': '12 12\\r\\n8 8 8 8 8 8 4 4 4 4 2 2\\r\\n', 'output': ['YES\\r\\n7 8 9 10 11 12 3 4 5 6 1 2 \\r\\n']}, {'input': '5 4\\r\\n25 2 3 2 2\\r\\n', 'output': ['YES\\r\\n1 1 4 2 3 \\r\\n']}, {'input': '7 6\\r\\n1 1 1 1 1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 1 \\r\\n']}, {'input': '3 3\\r\\n5 5 5\\r\\n', 'output': ['YES\\r\\n1 2 3 \\r\\n']}, {'input': '1 1\\r\\n2\\r\\n', 'output': ['YES\\r\\n1 \\r\\n']}, {'input': '6 2\\r\\n100 100 101 101 102 102\\r\\n', 'output': ['YES\\r\\n1 2 1 2 1 2 \\r\\n']}, {'input': '8 8\\r\\n1 1 2 2 3 3 4 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 \\r\\n']}, {'input': '3 1\\r\\n2 2 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 5\\r\\n1 1 2 2 1\\r\\n', 'output': ['YES\\r\\n1 2 4 5 3 \\r\\n']}, {'input': '8 6\\r\\n1 1 1 1 2 2 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 1 2 \\r\\n']}, {'input': '3 2\\r\\n2019 2019 2019\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3 2\\r\\n2018 2018 2018\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10 10\\r\\n1 2 3 1 2 3 4 5 6 42\\r\\n', 'output': ['YES\\r\\n1 3 5 2 4 6 7 8 9 10 \\r\\n']}, {'input': '7 7\\r\\n1 1 1 1 2 3 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 \\r\\n']}, {'input': '10 10\\r\\n2017 2018 2019 2017 2018 2019 2020 2021 2022 2023\\r\\n', 'output': ['YES\\r\\n1 3 5 2 4 6 7 8 9 10 \\r\\n']}, {'input': '5 4\\r\\n1 4 6 6 3\\r\\n', 'output': ['YES\\r\\n1 3 4 1 2 \\r\\n']}, {'input': '4 4\\r\\n1 2 2 1\\r\\n', 'output': ['YES\\r\\n1 3 4 2 \\r\\n']}, {'input': '6 6\\r\\n1 1 2 2 3 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '6 3\\r\\n2 1 3 4 5 1\\r\\n', 'output': ['YES\\r\\n3 1 1 2 3 2 \\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Main{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt(), k = sc.nextInt();\n        int num[] = new int[n];\n        int tmp[][] = new int[n][k];\n        for(int i = 0; i < n; ++i){\n            num[i] = sc.nextInt();\n        }\n        if(can(n, k, num, tmp)){\n            System.out.println(\"YES\");\n            for(int i = 0; i < n; ++i){\n                System.out.print(tmp[i][0] + \" \");\n            }\n            System.out.println();\n        }\n        else System.out.println(\"NO\");\n    }\n    static boolean can(int n, int k, int num[], int tmp[][]){\n        int pos[] = new int[k];\n        for(int j = 0; j < k; ++j){\n            pos[j] = j;\n        }\n        for(int j = 0; j < n; ++j){\n            tmp[j][0] = j % k;\n        }\n        for(int j = 1; j < k; ++j){\n            boolean flag = true;\n            for(int i = 0; i < n; ++i){\n                if(num[i] == pos[j]){\n                    tmp[i][j] = j;\n                    flag = false;\n                }\n            }\n            for(int i = 0; i < n - 1; ++i){\n                for(int l = i + 1; l < n; ++l){\n                    if((num[i] == num[l] && num[i]!= pos[j]) || (num[i] == pos[j] && num[l] == pos[j])){\n                        int tmp1 = num[i];\n                        num[i] = num[l];\n                        num[l] = tmp1;\n                    }\n                }\n            }\n            if(flag){\n                for(int l = 0; l < n; ++l){\n                    if(num[l] == pos[j]){\n                        tmp[l][j] = j;\n                    }\n                }\n                return true;\n            }\n            for(int i = 0; i < n - 1; ++i){\n                for(int l = i + 1; l < n; ++l){\n                    if(num[i] == num[l]){\n                        int tmp1 = num[i];\n                        num[i] = num[l];\n                        num[l] = tmp1;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}"}
{"src_uid": "3d4df21eebf32ce15841179bb85e6f2f", "id": 61, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1400, "testcases": "[{'input': '4 2\\r\\n1 2 2 3\\r\\n', 'output': ['YES\\r\\n1 2 1 2 \\r\\n']}, {'input': '5 2\\r\\n3 2 1 2 3\\r\\n', 'output': ['YES\\r\\n2 2 1 1 1 \\r\\n']}, {'input': '5 2\\r\\n2 1 1 2 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 4\\r\\n1 1 1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 1 \\r\\n']}, {'input': '11 9\\r\\n1 1 2 2 2 2 2 2 3 4 5\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 9 1 2 \\r\\n']}, {'input': '4 4\\r\\n1 2 2 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 \\r\\n']}, {'input': '5 5\\r\\n1 1 2 1 1\\r\\n', 'output': ['YES\\r\\n1 2 5 3 4 \\r\\n']}, {'input': '4 4\\r\\n1 1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 \\r\\n']}, {'input': '5 4\\r\\n1 2 1 2 3\\r\\n', 'output': ['YES\\r\\n1 3 2 4 1 \\r\\n']}, {'input': '5 5\\r\\n1 1 2 1 3\\r\\n', 'output': ['YES\\r\\n1 2 4 3 5 \\r\\n']}, {'input': '10 10\\r\\n1 2 3 1 2 3 4 5 6 7\\r\\n', 'output': ['YES\\r\\n1 3 5 2 4 6 7 8 9 10 \\r\\n']}, {'input': '8 6\\r\\n1 2 3 3 2 2 3 1\\r\\n', 'output': ['YES\\r\\n1 3 6 1 4 5 2 2 \\r\\n']}, {'input': '6 4\\r\\n1 1 2 2 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 1 2 \\r\\n']}, {'input': '5 5\\r\\n1 1 2 2 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 \\r\\n']}, {'input': '4 3\\r\\n2 2 1 1\\r\\n', 'output': ['YES\\r\\n3 1 1 2 \\r\\n']}, {'input': '10 10\\r\\n1 1 2 2 3 3 4 4 5 5\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 9 10 \\r\\n']}, {'input': '6 5\\r\\n1 1 2 2 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 1 \\r\\n']}, {'input': '4 4\\r\\n3 3 3 5\\r\\n', 'output': ['YES\\r\\n1 2 3 4 \\r\\n']}, {'input': '9 8\\r\\n1 2 2 3 3 3 4 5 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 1 8 \\r\\n']}, {'input': '5 5\\r\\n2 1 1 2 1\\r\\n', 'output': ['YES\\r\\n4 1 2 5 3 \\r\\n']}, {'input': '6 6\\r\\n1 1 2 1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 4 3 5 6 \\r\\n']}, {'input': '6 6\\r\\n1 1 1 2 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '8 8\\r\\n1 1 1 1 1 2 2 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 \\r\\n']}, {'input': '6 6\\r\\n2 1 1 2 1 3\\r\\n', 'output': ['YES\\r\\n4 1 2 5 3 6 \\r\\n']}, {'input': '5 3\\r\\n3 2 1 2 3\\r\\n', 'output': ['YES\\r\\n1 2 1 3 2 \\r\\n']}, {'input': '6 6\\r\\n1 2 3 3 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '1 1\\r\\n5000\\r\\n', 'output': ['YES\\r\\n1 \\r\\n']}, {'input': '3 3\\r\\n6 7 8\\r\\n', 'output': ['YES\\r\\n1 2 3 \\r\\n']}, {'input': '8 6\\r\\n1 1 2 2 3 4 5 6\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 1 2 \\r\\n']}, {'input': '7 5\\r\\n2 3 2 1 1 1 3\\r\\n', 'output': ['YES\\r\\n4 1 5 1 2 3 2 \\r\\n']}, {'input': '5 4\\r\\n1 2 1 2 4\\r\\n', 'output': ['YES\\r\\n1 3 2 4 1 \\r\\n']}, {'input': '8 8\\r\\n1 2 2 2 1 1 3 3\\r\\n', 'output': ['YES\\r\\n1 4 5 6 2 3 7 8 \\r\\n']}, {'input': '3 2\\r\\n5000 5000 5000\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7 6\\r\\n1 2 3 4 2 3 4\\r\\n', 'output': ['YES\\r\\n1 2 4 6 3 5 1 \\r\\n']}, {'input': '2 1\\r\\n5000 5000\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 4\\r\\n3 2 1 2 3\\r\\n', 'output': ['YES\\r\\n4 2 1 3 1 \\r\\n']}, {'input': '4 4\\r\\n2 1 2 3\\r\\n', 'output': ['YES\\r\\n2 1 3 4 \\r\\n']}, {'input': '4 4\\r\\n2 1 3 2\\r\\n', 'output': ['YES\\r\\n2 1 4 3 \\r\\n']}, {'input': '6 6\\r\\n1 2 2 2 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '7 6\\r\\n1 2 3 7 7 7 7\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 1 \\r\\n']}, {'input': '1 1\\r\\n500\\r\\n', 'output': ['YES\\r\\n1 \\r\\n']}, {'input': '8 8\\r\\n2 1 1 1 1 1 1 1\\r\\n', 'output': ['YES\\r\\n8 1 2 3 4 5 6 7 \\r\\n']}, {'input': '6 6\\r\\n1 1 2 2 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '10 9\\r\\n1 2 1 1 1 1 1 1 2 1\\r\\n', 'output': ['YES\\r\\n1 9 2 3 4 5 6 7 1 8 \\r\\n']}, {'input': '8 8\\r\\n1 2 8 2 3 3 3 3\\r\\n', 'output': ['YES\\r\\n1 2 8 3 4 5 6 7 \\r\\n']}, {'input': '9 9\\r\\n1 2 2 3 2 5 3 6 8\\r\\n', 'output': ['YES\\r\\n1 2 3 5 4 7 6 8 9 \\r\\n']}, {'input': '4 4\\r\\n1 2 1 2\\r\\n', 'output': ['YES\\r\\n1 3 2 4 \\r\\n']}, {'input': '4 2\\r\\n2000 2000 2000 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 5\\r\\n1 2 1 2 4\\r\\n', 'output': ['YES\\r\\n1 3 2 4 5 \\r\\n']}, {'input': '8 8\\r\\n1 2 2 2 1 1 1 1\\r\\n', 'output': ['YES\\r\\n1 6 7 8 2 3 4 5 \\r\\n']}, {'input': '5 5\\r\\n3 2 1 2 3\\r\\n', 'output': ['YES\\r\\n4 2 1 3 5 \\r\\n']}, {'input': '9 9\\r\\n1 1 1 1 2 2 2 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 9 \\r\\n']}, {'input': '6 6\\r\\n1 1 1 1 2 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '5 5\\r\\n1 2 2 1 1\\r\\n', 'output': ['YES\\r\\n1 4 5 2 3 \\r\\n']}, {'input': '50 20\\r\\n1 1 1 1 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 \\r\\n']}, {'input': '5 5\\r\\n1 2 3 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 \\r\\n']}, {'input': '5 5\\r\\n1 1 1 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 \\r\\n']}, {'input': '7 3\\r\\n1 2 3 4 5 5 1\\r\\n', 'output': ['YES\\r\\n1 3 1 2 3 1 2 \\r\\n']}, {'input': '2 1\\r\\n7 9\\r\\n', 'output': ['YES\\r\\n1 1 \\r\\n']}, {'input': '4 2\\r\\n4999 4999 4999 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 5\\r\\n1 1 3 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 \\r\\n']}, {'input': '3 3\\r\\n1 1 2\\r\\n', 'output': ['YES\\r\\n1 2 3 \\r\\n']}, {'input': '5 5\\r\\n2 2 1 1 2\\r\\n', 'output': ['YES\\r\\n3 4 1 2 5 \\r\\n']}, {'input': '6 5\\r\\n1 2 3 4 4 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 1 \\r\\n']}, {'input': '1 1\\r\\n1\\r\\n', 'output': ['YES\\r\\n1 \\r\\n']}, {'input': '6 6\\r\\n1 2 1 2 4 5\\r\\n', 'output': ['YES\\r\\n1 3 2 4 5 6 \\r\\n']}, {'input': '8 6\\r\\n1 2 3 4 1 2 3 4\\r\\n', 'output': ['YES\\r\\n1 3 5 1 2 4 6 2 \\r\\n']}, {'input': '6 5\\r\\n1 2 1 2 1 2\\r\\n', 'output': ['YES\\r\\n1 4 2 5 3 1 \\r\\n']}, {'input': '10 10\\r\\n1 2 3 1 2 3 1 2 4 5\\r\\n', 'output': ['YES\\r\\n1 4 7 2 5 8 3 6 9 10 \\r\\n']}, {'input': '8 5\\r\\n9 3 9 6 10 7 8 2\\r\\n', 'output': ['YES\\r\\n1 2 2 3 3 4 5 1 \\r\\n']}, {'input': '18 18\\r\\n10 9 8 7 5 3 6 2 2 9 7 8 2 9 2 8 10 7\\r\\n', 'output': ['YES\\r\\n17 14 11 8 6 5 7 1 2 15 9 12 3 16 4 13 18 10 \\r\\n']}, {'input': '5 1\\r\\n5 2 3 4 5\\r\\n', 'output': ['NO\\r\\n']}, {'input': '9 9\\r\\n9 8 1 3 4 5 3 8 9\\r\\n', 'output': ['YES\\r\\n8 6 1 2 4 5 3 7 9 \\r\\n']}, {'input': '10 10\\r\\n1 2 3 3 2 1 4 5 7 10\\r\\n', 'output': ['YES\\r\\n1 3 5 6 4 2 7 8 9 10 \\r\\n']}, {'input': '10 10\\r\\n1 2 3 3 2 1 4 5 6 10\\r\\n', 'output': ['YES\\r\\n1 3 5 6 4 2 7 8 9 10 \\r\\n']}, {'input': '3 2\\r\\n500 500 500\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 5\\r\\n1 2 3 1 2\\r\\n', 'output': ['YES\\r\\n1 3 5 2 4 \\r\\n']}, {'input': '10 5\\r\\n1 2 3 4 1 2 3 4 1 2\\r\\n', 'output': ['YES\\r\\n1 4 2 4 2 5 3 5 3 1 \\r\\n']}, {'input': '10 7\\r\\n1 2 3 1 2 3 1 2 3 1\\r\\n', 'output': ['YES\\r\\n1 5 1 2 6 2 3 7 3 4 \\r\\n']}, {'input': '3 3\\r\\n1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 \\r\\n']}, {'input': '4 4\\r\\n4999 5000 5000 4999\\r\\n', 'output': ['YES\\r\\n1 3 4 2 \\r\\n']}, {'input': '12 12\\r\\n8 8 8 8 8 8 4 4 4 4 2 2\\r\\n', 'output': ['YES\\r\\n7 8 9 10 11 12 3 4 5 6 1 2 \\r\\n']}, {'input': '5 4\\r\\n25 2 3 2 2\\r\\n', 'output': ['YES\\r\\n1 1 4 2 3 \\r\\n']}, {'input': '7 6\\r\\n1 1 1 1 1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 1 \\r\\n']}, {'input': '3 3\\r\\n5 5 5\\r\\n', 'output': ['YES\\r\\n1 2 3 \\r\\n']}, {'input': '1 1\\r\\n2\\r\\n', 'output': ['YES\\r\\n1 \\r\\n']}, {'input': '6 2\\r\\n100 100 101 101 102 102\\r\\n', 'output': ['YES\\r\\n1 2 1 2 1 2 \\r\\n']}, {'input': '8 8\\r\\n1 1 2 2 3 3 4 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 \\r\\n']}, {'input': '3 1\\r\\n2 2 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 5\\r\\n1 1 2 2 1\\r\\n', 'output': ['YES\\r\\n1 2 4 5 3 \\r\\n']}, {'input': '8 6\\r\\n1 1 1 1 2 2 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 1 2 \\r\\n']}, {'input': '3 2\\r\\n2019 2019 2019\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3 2\\r\\n2018 2018 2018\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10 10\\r\\n1 2 3 1 2 3 4 5 6 42\\r\\n', 'output': ['YES\\r\\n1 3 5 2 4 6 7 8 9 10 \\r\\n']}, {'input': '7 7\\r\\n1 1 1 1 2 3 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 \\r\\n']}, {'input': '10 10\\r\\n2017 2018 2019 2017 2018 2019 2020 2021 2022 2023\\r\\n', 'output': ['YES\\r\\n1 3 5 2 4 6 7 8 9 10 \\r\\n']}, {'input': '5 4\\r\\n1 4 6 6 3\\r\\n', 'output': ['YES\\r\\n1 3 4 1 2 \\r\\n']}, {'input': '4 4\\r\\n1 2 2 1\\r\\n', 'output': ['YES\\r\\n1 3 4 2 \\r\\n']}, {'input': '6 6\\r\\n1 1 2 2 3 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '6 3\\r\\n2 1 3 4 5 1\\r\\n', 'output': ['YES\\r\\n3 1 1 2 3 2 \\r\\n']}]", "source_code": "import java.util.*;\n \npublic class Solution {\n    static long mod = (long)1e9+7;\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt(), k = sc.nextInt();\n        int a[] = new int[n];\n        for (int i = 0 ; i < n ; i++) a[i] = sc.nextInt();\n        int min[] = new int[n];\n        for (int i = 0 ; i < k ; i++) min[i] = n + 1;\n        boolean b[] = new boolean[n];\n        for (int i = 0 ; i < n ; i++) b[i] = false;\n        int color[] = new int[n];\n        for (int i = 0 ; i < n ; i++) color[i] = 0;\n        int c = 0;\n        while (!isPossible(min, b)) {\n            if (min[c] == n + 1) {\n                c++;\n                continue;\n            }\n            b[min[c]] = true;\n            color[min[c]] = c + 1;\n            min[c] = n + 1;\n            c = 0;\n        }\n        if (isPossible(min, b)) {\n            System.out.println(\"YES\");\n            for (int i = 0 ; i < n ; i++) System.out.print((color[i] == 0? \"0\" : color[i]) + \" \");\n        } else\n            System.out.println(\"NO\");\n    }\n    static boolean isPossible(int min[], boolean b[]) {\n        for (int i = 0 ; i < min.length ; i++)\n            if (!b[i] && min[i]!= n + 1)\n                return false;\n        return true;\n    }\n}"}
{"src_uid": "3d4df21eebf32ce15841179bb85e6f2f", "id": 61, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1400, "testcases": "[{'input': '4 2\\r\\n1 2 2 3\\r\\n', 'output': ['YES\\r\\n1 2 1 2 \\r\\n']}, {'input': '5 2\\r\\n3 2 1 2 3\\r\\n', 'output': ['YES\\r\\n2 2 1 1 1 \\r\\n']}, {'input': '5 2\\r\\n2 1 1 2 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 4\\r\\n1 1 1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 1 \\r\\n']}, {'input': '11 9\\r\\n1 1 2 2 2 2 2 2 3 4 5\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 9 1 2 \\r\\n']}, {'input': '4 4\\r\\n1 2 2 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 \\r\\n']}, {'input': '5 5\\r\\n1 1 2 1 1\\r\\n', 'output': ['YES\\r\\n1 2 5 3 4 \\r\\n']}, {'input': '4 4\\r\\n1 1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 \\r\\n']}, {'input': '5 4\\r\\n1 2 1 2 3\\r\\n', 'output': ['YES\\r\\n1 3 2 4 1 \\r\\n']}, {'input': '5 5\\r\\n1 1 2 1 3\\r\\n', 'output': ['YES\\r\\n1 2 4 3 5 \\r\\n']}, {'input': '10 10\\r\\n1 2 3 1 2 3 4 5 6 7\\r\\n', 'output': ['YES\\r\\n1 3 5 2 4 6 7 8 9 10 \\r\\n']}, {'input': '8 6\\r\\n1 2 3 3 2 2 3 1\\r\\n', 'output': ['YES\\r\\n1 3 6 1 4 5 2 2 \\r\\n']}, {'input': '6 4\\r\\n1 1 2 2 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 1 2 \\r\\n']}, {'input': '5 5\\r\\n1 1 2 2 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 \\r\\n']}, {'input': '4 3\\r\\n2 2 1 1\\r\\n', 'output': ['YES\\r\\n3 1 1 2 \\r\\n']}, {'input': '10 10\\r\\n1 1 2 2 3 3 4 4 5 5\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 9 10 \\r\\n']}, {'input': '6 5\\r\\n1 1 2 2 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 1 \\r\\n']}, {'input': '4 4\\r\\n3 3 3 5\\r\\n', 'output': ['YES\\r\\n1 2 3 4 \\r\\n']}, {'input': '9 8\\r\\n1 2 2 3 3 3 4 5 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 1 8 \\r\\n']}, {'input': '5 5\\r\\n2 1 1 2 1\\r\\n', 'output': ['YES\\r\\n4 1 2 5 3 \\r\\n']}, {'input': '6 6\\r\\n1 1 2 1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 4 3 5 6 \\r\\n']}, {'input': '6 6\\r\\n1 1 1 2 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '8 8\\r\\n1 1 1 1 1 2 2 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 \\r\\n']}, {'input': '6 6\\r\\n2 1 1 2 1 3\\r\\n', 'output': ['YES\\r\\n4 1 2 5 3 6 \\r\\n']}, {'input': '5 3\\r\\n3 2 1 2 3\\r\\n', 'output': ['YES\\r\\n1 2 1 3 2 \\r\\n']}, {'input': '6 6\\r\\n1 2 3 3 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '1 1\\r\\n5000\\r\\n', 'output': ['YES\\r\\n1 \\r\\n']}, {'input': '3 3\\r\\n6 7 8\\r\\n', 'output': ['YES\\r\\n1 2 3 \\r\\n']}, {'input': '8 6\\r\\n1 1 2 2 3 4 5 6\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 1 2 \\r\\n']}, {'input': '7 5\\r\\n2 3 2 1 1 1 3\\r\\n', 'output': ['YES\\r\\n4 1 5 1 2 3 2 \\r\\n']}, {'input': '5 4\\r\\n1 2 1 2 4\\r\\n', 'output': ['YES\\r\\n1 3 2 4 1 \\r\\n']}, {'input': '8 8\\r\\n1 2 2 2 1 1 3 3\\r\\n', 'output': ['YES\\r\\n1 4 5 6 2 3 7 8 \\r\\n']}, {'input': '3 2\\r\\n5000 5000 5000\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7 6\\r\\n1 2 3 4 2 3 4\\r\\n', 'output': ['YES\\r\\n1 2 4 6 3 5 1 \\r\\n']}, {'input': '2 1\\r\\n5000 5000\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 4\\r\\n3 2 1 2 3\\r\\n', 'output': ['YES\\r\\n4 2 1 3 1 \\r\\n']}, {'input': '4 4\\r\\n2 1 2 3\\r\\n', 'output': ['YES\\r\\n2 1 3 4 \\r\\n']}, {'input': '4 4\\r\\n2 1 3 2\\r\\n', 'output': ['YES\\r\\n2 1 4 3 \\r\\n']}, {'input': '6 6\\r\\n1 2 2 2 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '7 6\\r\\n1 2 3 7 7 7 7\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 1 \\r\\n']}, {'input': '1 1\\r\\n500\\r\\n', 'output': ['YES\\r\\n1 \\r\\n']}, {'input': '8 8\\r\\n2 1 1 1 1 1 1 1\\r\\n', 'output': ['YES\\r\\n8 1 2 3 4 5 6 7 \\r\\n']}, {'input': '6 6\\r\\n1 1 2 2 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '10 9\\r\\n1 2 1 1 1 1 1 1 2 1\\r\\n', 'output': ['YES\\r\\n1 9 2 3 4 5 6 7 1 8 \\r\\n']}, {'input': '8 8\\r\\n1 2 8 2 3 3 3 3\\r\\n', 'output': ['YES\\r\\n1 2 8 3 4 5 6 7 \\r\\n']}, {'input': '9 9\\r\\n1 2 2 3 2 5 3 6 8\\r\\n', 'output': ['YES\\r\\n1 2 3 5 4 7 6 8 9 \\r\\n']}, {'input': '4 4\\r\\n1 2 1 2\\r\\n', 'output': ['YES\\r\\n1 3 2 4 \\r\\n']}, {'input': '4 2\\r\\n2000 2000 2000 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 5\\r\\n1 2 1 2 4\\r\\n', 'output': ['YES\\r\\n1 3 2 4 5 \\r\\n']}, {'input': '8 8\\r\\n1 2 2 2 1 1 1 1\\r\\n', 'output': ['YES\\r\\n1 6 7 8 2 3 4 5 \\r\\n']}, {'input': '5 5\\r\\n3 2 1 2 3\\r\\n', 'output': ['YES\\r\\n4 2 1 3 5 \\r\\n']}, {'input': '9 9\\r\\n1 1 1 1 2 2 2 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 9 \\r\\n']}, {'input': '6 6\\r\\n1 1 1 1 2 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '5 5\\r\\n1 2 2 1 1\\r\\n', 'output': ['YES\\r\\n1 4 5 2 3 \\r\\n']}, {'input': '50 20\\r\\n1 1 1 1 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 \\r\\n']}, {'input': '5 5\\r\\n1 2 3 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 \\r\\n']}, {'input': '5 5\\r\\n1 1 1 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 \\r\\n']}, {'input': '7 3\\r\\n1 2 3 4 5 5 1\\r\\n', 'output': ['YES\\r\\n1 3 1 2 3 1 2 \\r\\n']}, {'input': '2 1\\r\\n7 9\\r\\n', 'output': ['YES\\r\\n1 1 \\r\\n']}, {'input': '4 2\\r\\n4999 4999 4999 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 5\\r\\n1 1 3 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 \\r\\n']}, {'input': '3 3\\r\\n1 1 2\\r\\n', 'output': ['YES\\r\\n1 2 3 \\r\\n']}, {'input': '5 5\\r\\n2 2 1 1 2\\r\\n', 'output': ['YES\\r\\n3 4 1 2 5 \\r\\n']}, {'input': '6 5\\r\\n1 2 3 4 4 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 1 \\r\\n']}, {'input': '1 1\\r\\n1\\r\\n', 'output': ['YES\\r\\n1 \\r\\n']}, {'input': '6 6\\r\\n1 2 1 2 4 5\\r\\n', 'output': ['YES\\r\\n1 3 2 4 5 6 \\r\\n']}, {'input': '8 6\\r\\n1 2 3 4 1 2 3 4\\r\\n', 'output': ['YES\\r\\n1 3 5 1 2 4 6 2 \\r\\n']}, {'input': '6 5\\r\\n1 2 1 2 1 2\\r\\n', 'output': ['YES\\r\\n1 4 2 5 3 1 \\r\\n']}, {'input': '10 10\\r\\n1 2 3 1 2 3 1 2 4 5\\r\\n', 'output': ['YES\\r\\n1 4 7 2 5 8 3 6 9 10 \\r\\n']}, {'input': '8 5\\r\\n9 3 9 6 10 7 8 2\\r\\n', 'output': ['YES\\r\\n1 2 2 3 3 4 5 1 \\r\\n']}, {'input': '18 18\\r\\n10 9 8 7 5 3 6 2 2 9 7 8 2 9 2 8 10 7\\r\\n', 'output': ['YES\\r\\n17 14 11 8 6 5 7 1 2 15 9 12 3 16 4 13 18 10 \\r\\n']}, {'input': '5 1\\r\\n5 2 3 4 5\\r\\n', 'output': ['NO\\r\\n']}, {'input': '9 9\\r\\n9 8 1 3 4 5 3 8 9\\r\\n', 'output': ['YES\\r\\n8 6 1 2 4 5 3 7 9 \\r\\n']}, {'input': '10 10\\r\\n1 2 3 3 2 1 4 5 7 10\\r\\n', 'output': ['YES\\r\\n1 3 5 6 4 2 7 8 9 10 \\r\\n']}, {'input': '10 10\\r\\n1 2 3 3 2 1 4 5 6 10\\r\\n', 'output': ['YES\\r\\n1 3 5 6 4 2 7 8 9 10 \\r\\n']}, {'input': '3 2\\r\\n500 500 500\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 5\\r\\n1 2 3 1 2\\r\\n', 'output': ['YES\\r\\n1 3 5 2 4 \\r\\n']}, {'input': '10 5\\r\\n1 2 3 4 1 2 3 4 1 2\\r\\n', 'output': ['YES\\r\\n1 4 2 4 2 5 3 5 3 1 \\r\\n']}, {'input': '10 7\\r\\n1 2 3 1 2 3 1 2 3 1\\r\\n', 'output': ['YES\\r\\n1 5 1 2 6 2 3 7 3 4 \\r\\n']}, {'input': '3 3\\r\\n1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 \\r\\n']}, {'input': '4 4\\r\\n4999 5000 5000 4999\\r\\n', 'output': ['YES\\r\\n1 3 4 2 \\r\\n']}, {'input': '12 12\\r\\n8 8 8 8 8 8 4 4 4 4 2 2\\r\\n', 'output': ['YES\\r\\n7 8 9 10 11 12 3 4 5 6 1 2 \\r\\n']}, {'input': '5 4\\r\\n25 2 3 2 2\\r\\n', 'output': ['YES\\r\\n1 1 4 2 3 \\r\\n']}, {'input': '7 6\\r\\n1 1 1 1 1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 1 \\r\\n']}, {'input': '3 3\\r\\n5 5 5\\r\\n', 'output': ['YES\\r\\n1 2 3 \\r\\n']}, {'input': '1 1\\r\\n2\\r\\n', 'output': ['YES\\r\\n1 \\r\\n']}, {'input': '6 2\\r\\n100 100 101 101 102 102\\r\\n', 'output': ['YES\\r\\n1 2 1 2 1 2 \\r\\n']}, {'input': '8 8\\r\\n1 1 2 2 3 3 4 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 \\r\\n']}, {'input': '3 1\\r\\n2 2 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 5\\r\\n1 1 2 2 1\\r\\n', 'output': ['YES\\r\\n1 2 4 5 3 \\r\\n']}, {'input': '8 6\\r\\n1 1 1 1 2 2 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 1 2 \\r\\n']}, {'input': '3 2\\r\\n2019 2019 2019\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3 2\\r\\n2018 2018 2018\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10 10\\r\\n1 2 3 1 2 3 4 5 6 42\\r\\n', 'output': ['YES\\r\\n1 3 5 2 4 6 7 8 9 10 \\r\\n']}, {'input': '7 7\\r\\n1 1 1 1 2 3 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 \\r\\n']}, {'input': '10 10\\r\\n2017 2018 2019 2017 2018 2019 2020 2021 2022 2023\\r\\n', 'output': ['YES\\r\\n1 3 5 2 4 6 7 8 9 10 \\r\\n']}, {'input': '5 4\\r\\n1 4 6 6 3\\r\\n', 'output': ['YES\\r\\n1 3 4 1 2 \\r\\n']}, {'input': '4 4\\r\\n1 2 2 1\\r\\n', 'output': ['YES\\r\\n1 3 4 2 \\r\\n']}, {'input': '6 6\\r\\n1 1 2 2 3 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '6 3\\r\\n2 1 3 4 5 1\\r\\n', 'output': ['YES\\r\\n3 1 1 2 3 2 \\r\\n']}]", "source_code": "//package org.samy.codeeval;\n\nimport java.util.*;\nimport java.math.*;\n\npublic class problem63b\n{\n    public static void main(String[] args) \n    {\n    \tint n, k;\n    \t\n    \tScanner input = new Scanner(System.in);\n    \tn = input.nextInt();\n    \tk = input.nextInt();\n    \t\n    \tint a[] = new int[n];\n    \tfor(int i = 0; i < n; i++)\n    \t{\n    \t\ta[i] = input.nextInt();\n    \t}\n    \t\n    \tint c[] = new int[n];\n    \tboolean can = false;\n    \tint start = 1;\n    \tint first = 1;\n    \tint prev = -1;\n    \t\n    \tfor(int i = 0; i < n; i++)\n    \t{\n    \t\tif(first == a[i])\n    \t\t{\n    \t\t\tc[i] = start;\n    \t\t\tstart++;\n    \t\t\tprev = a[i];\n    \t\t}\n    \t\telse\n    \t\t{\n    \t\t\tint rem = k - (start - 1);\n    \t\t\tif(rem > 0)\n    \t\t\t{\n    \t\t\t\tfor(int j = 1; j <= rem; j++)\n    \t\t\t\t{\n    \t\t\t\t\tif(a[i] == prev + j)\n    \t\t\t\t\t{\n    \t\t\t\t\t\tc[i] = start;\n    \t\t\t\t\t\tprev = a[i];\n    \t\t\t\t\t\tstart++;\n    \t\t\t\t\t\tj = rem + 1;\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\telse\n    \t\t\t{\n    \t\t\t\tcan = false;\n    \t\t\t}\n    \t\t}\n    \t\t\n    \t\tif(c[i] == 0)\n    \t\t\tcan = false;\n    \t}\n    \t\n    \tif(can)\n    \t\tSystem.out.print(\"YES\\n\");\n    \telse\n    \t\tSystem.out.print(\"NO\\n\");\n    \t\n    \tfor(int i = 0; i < n; i++)\n    \t\tSystem.out.print((c[i] == 0? 1 : c[i]) + \" \");\n    \t\n    }\n}\n"}
{"src_uid": "3d4df21eebf32ce15841179bb85e6f2f", "id": 61, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1400, "testcases": "[{'input': '4 2\\r\\n1 2 2 3\\r\\n', 'output': ['YES\\r\\n1 2 1 2 \\r\\n']}, {'input': '5 2\\r\\n3 2 1 2 3\\r\\n', 'output': ['YES\\r\\n2 2 1 1 1 \\r\\n']}, {'input': '5 2\\r\\n2 1 1 2 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 4\\r\\n1 1 1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 1 \\r\\n']}, {'input': '11 9\\r\\n1 1 2 2 2 2 2 2 3 4 5\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 9 1 2 \\r\\n']}, {'input': '4 4\\r\\n1 2 2 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 \\r\\n']}, {'input': '5 5\\r\\n1 1 2 1 1\\r\\n', 'output': ['YES\\r\\n1 2 5 3 4 \\r\\n']}, {'input': '4 4\\r\\n1 1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 \\r\\n']}, {'input': '5 4\\r\\n1 2 1 2 3\\r\\n', 'output': ['YES\\r\\n1 3 2 4 1 \\r\\n']}, {'input': '5 5\\r\\n1 1 2 1 3\\r\\n', 'output': ['YES\\r\\n1 2 4 3 5 \\r\\n']}, {'input': '10 10\\r\\n1 2 3 1 2 3 4 5 6 7\\r\\n', 'output': ['YES\\r\\n1 3 5 2 4 6 7 8 9 10 \\r\\n']}, {'input': '8 6\\r\\n1 2 3 3 2 2 3 1\\r\\n', 'output': ['YES\\r\\n1 3 6 1 4 5 2 2 \\r\\n']}, {'input': '6 4\\r\\n1 1 2 2 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 1 2 \\r\\n']}, {'input': '5 5\\r\\n1 1 2 2 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 \\r\\n']}, {'input': '4 3\\r\\n2 2 1 1\\r\\n', 'output': ['YES\\r\\n3 1 1 2 \\r\\n']}, {'input': '10 10\\r\\n1 1 2 2 3 3 4 4 5 5\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 9 10 \\r\\n']}, {'input': '6 5\\r\\n1 1 2 2 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 1 \\r\\n']}, {'input': '4 4\\r\\n3 3 3 5\\r\\n', 'output': ['YES\\r\\n1 2 3 4 \\r\\n']}, {'input': '9 8\\r\\n1 2 2 3 3 3 4 5 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 1 8 \\r\\n']}, {'input': '5 5\\r\\n2 1 1 2 1\\r\\n', 'output': ['YES\\r\\n4 1 2 5 3 \\r\\n']}, {'input': '6 6\\r\\n1 1 2 1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 4 3 5 6 \\r\\n']}, {'input': '6 6\\r\\n1 1 1 2 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '8 8\\r\\n1 1 1 1 1 2 2 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 \\r\\n']}, {'input': '6 6\\r\\n2 1 1 2 1 3\\r\\n', 'output': ['YES\\r\\n4 1 2 5 3 6 \\r\\n']}, {'input': '5 3\\r\\n3 2 1 2 3\\r\\n', 'output': ['YES\\r\\n1 2 1 3 2 \\r\\n']}, {'input': '6 6\\r\\n1 2 3 3 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '1 1\\r\\n5000\\r\\n', 'output': ['YES\\r\\n1 \\r\\n']}, {'input': '3 3\\r\\n6 7 8\\r\\n', 'output': ['YES\\r\\n1 2 3 \\r\\n']}, {'input': '8 6\\r\\n1 1 2 2 3 4 5 6\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 1 2 \\r\\n']}, {'input': '7 5\\r\\n2 3 2 1 1 1 3\\r\\n', 'output': ['YES\\r\\n4 1 5 1 2 3 2 \\r\\n']}, {'input': '5 4\\r\\n1 2 1 2 4\\r\\n', 'output': ['YES\\r\\n1 3 2 4 1 \\r\\n']}, {'input': '8 8\\r\\n1 2 2 2 1 1 3 3\\r\\n', 'output': ['YES\\r\\n1 4 5 6 2 3 7 8 \\r\\n']}, {'input': '3 2\\r\\n5000 5000 5000\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7 6\\r\\n1 2 3 4 2 3 4\\r\\n', 'output': ['YES\\r\\n1 2 4 6 3 5 1 \\r\\n']}, {'input': '2 1\\r\\n5000 5000\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 4\\r\\n3 2 1 2 3\\r\\n', 'output': ['YES\\r\\n4 2 1 3 1 \\r\\n']}, {'input': '4 4\\r\\n2 1 2 3\\r\\n', 'output': ['YES\\r\\n2 1 3 4 \\r\\n']}, {'input': '4 4\\r\\n2 1 3 2\\r\\n', 'output': ['YES\\r\\n2 1 4 3 \\r\\n']}, {'input': '6 6\\r\\n1 2 2 2 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '7 6\\r\\n1 2 3 7 7 7 7\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 1 \\r\\n']}, {'input': '1 1\\r\\n500\\r\\n', 'output': ['YES\\r\\n1 \\r\\n']}, {'input': '8 8\\r\\n2 1 1 1 1 1 1 1\\r\\n', 'output': ['YES\\r\\n8 1 2 3 4 5 6 7 \\r\\n']}, {'input': '6 6\\r\\n1 1 2 2 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '10 9\\r\\n1 2 1 1 1 1 1 1 2 1\\r\\n', 'output': ['YES\\r\\n1 9 2 3 4 5 6 7 1 8 \\r\\n']}, {'input': '8 8\\r\\n1 2 8 2 3 3 3 3\\r\\n', 'output': ['YES\\r\\n1 2 8 3 4 5 6 7 \\r\\n']}, {'input': '9 9\\r\\n1 2 2 3 2 5 3 6 8\\r\\n', 'output': ['YES\\r\\n1 2 3 5 4 7 6 8 9 \\r\\n']}, {'input': '4 4\\r\\n1 2 1 2\\r\\n', 'output': ['YES\\r\\n1 3 2 4 \\r\\n']}, {'input': '4 2\\r\\n2000 2000 2000 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 5\\r\\n1 2 1 2 4\\r\\n', 'output': ['YES\\r\\n1 3 2 4 5 \\r\\n']}, {'input': '8 8\\r\\n1 2 2 2 1 1 1 1\\r\\n', 'output': ['YES\\r\\n1 6 7 8 2 3 4 5 \\r\\n']}, {'input': '5 5\\r\\n3 2 1 2 3\\r\\n', 'output': ['YES\\r\\n4 2 1 3 5 \\r\\n']}, {'input': '9 9\\r\\n1 1 1 1 2 2 2 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 9 \\r\\n']}, {'input': '6 6\\r\\n1 1 1 1 2 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '5 5\\r\\n1 2 2 1 1\\r\\n', 'output': ['YES\\r\\n1 4 5 2 3 \\r\\n']}, {'input': '50 20\\r\\n1 1 1 1 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 \\r\\n']}, {'input': '5 5\\r\\n1 2 3 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 \\r\\n']}, {'input': '5 5\\r\\n1 1 1 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 \\r\\n']}, {'input': '7 3\\r\\n1 2 3 4 5 5 1\\r\\n', 'output': ['YES\\r\\n1 3 1 2 3 1 2 \\r\\n']}, {'input': '2 1\\r\\n7 9\\r\\n', 'output': ['YES\\r\\n1 1 \\r\\n']}, {'input': '4 2\\r\\n4999 4999 4999 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 5\\r\\n1 1 3 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 \\r\\n']}, {'input': '3 3\\r\\n1 1 2\\r\\n', 'output': ['YES\\r\\n1 2 3 \\r\\n']}, {'input': '5 5\\r\\n2 2 1 1 2\\r\\n', 'output': ['YES\\r\\n3 4 1 2 5 \\r\\n']}, {'input': '6 5\\r\\n1 2 3 4 4 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 1 \\r\\n']}, {'input': '1 1\\r\\n1\\r\\n', 'output': ['YES\\r\\n1 \\r\\n']}, {'input': '6 6\\r\\n1 2 1 2 4 5\\r\\n', 'output': ['YES\\r\\n1 3 2 4 5 6 \\r\\n']}, {'input': '8 6\\r\\n1 2 3 4 1 2 3 4\\r\\n', 'output': ['YES\\r\\n1 3 5 1 2 4 6 2 \\r\\n']}, {'input': '6 5\\r\\n1 2 1 2 1 2\\r\\n', 'output': ['YES\\r\\n1 4 2 5 3 1 \\r\\n']}, {'input': '10 10\\r\\n1 2 3 1 2 3 1 2 4 5\\r\\n', 'output': ['YES\\r\\n1 4 7 2 5 8 3 6 9 10 \\r\\n']}, {'input': '8 5\\r\\n9 3 9 6 10 7 8 2\\r\\n', 'output': ['YES\\r\\n1 2 2 3 3 4 5 1 \\r\\n']}, {'input': '18 18\\r\\n10 9 8 7 5 3 6 2 2 9 7 8 2 9 2 8 10 7\\r\\n', 'output': ['YES\\r\\n17 14 11 8 6 5 7 1 2 15 9 12 3 16 4 13 18 10 \\r\\n']}, {'input': '5 1\\r\\n5 2 3 4 5\\r\\n', 'output': ['NO\\r\\n']}, {'input': '9 9\\r\\n9 8 1 3 4 5 3 8 9\\r\\n', 'output': ['YES\\r\\n8 6 1 2 4 5 3 7 9 \\r\\n']}, {'input': '10 10\\r\\n1 2 3 3 2 1 4 5 7 10\\r\\n', 'output': ['YES\\r\\n1 3 5 6 4 2 7 8 9 10 \\r\\n']}, {'input': '10 10\\r\\n1 2 3 3 2 1 4 5 6 10\\r\\n', 'output': ['YES\\r\\n1 3 5 6 4 2 7 8 9 10 \\r\\n']}, {'input': '3 2\\r\\n500 500 500\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 5\\r\\n1 2 3 1 2\\r\\n', 'output': ['YES\\r\\n1 3 5 2 4 \\r\\n']}, {'input': '10 5\\r\\n1 2 3 4 1 2 3 4 1 2\\r\\n', 'output': ['YES\\r\\n1 4 2 4 2 5 3 5 3 1 \\r\\n']}, {'input': '10 7\\r\\n1 2 3 1 2 3 1 2 3 1\\r\\n', 'output': ['YES\\r\\n1 5 1 2 6 2 3 7 3 4 \\r\\n']}, {'input': '3 3\\r\\n1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 \\r\\n']}, {'input': '4 4\\r\\n4999 5000 5000 4999\\r\\n', 'output': ['YES\\r\\n1 3 4 2 \\r\\n']}, {'input': '12 12\\r\\n8 8 8 8 8 8 4 4 4 4 2 2\\r\\n', 'output': ['YES\\r\\n7 8 9 10 11 12 3 4 5 6 1 2 \\r\\n']}, {'input': '5 4\\r\\n25 2 3 2 2\\r\\n', 'output': ['YES\\r\\n1 1 4 2 3 \\r\\n']}, {'input': '7 6\\r\\n1 1 1 1 1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 1 \\r\\n']}, {'input': '3 3\\r\\n5 5 5\\r\\n', 'output': ['YES\\r\\n1 2 3 \\r\\n']}, {'input': '1 1\\r\\n2\\r\\n', 'output': ['YES\\r\\n1 \\r\\n']}, {'input': '6 2\\r\\n100 100 101 101 102 102\\r\\n', 'output': ['YES\\r\\n1 2 1 2 1 2 \\r\\n']}, {'input': '8 8\\r\\n1 1 2 2 3 3 4 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 \\r\\n']}, {'input': '3 1\\r\\n2 2 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 5\\r\\n1 1 2 2 1\\r\\n', 'output': ['YES\\r\\n1 2 4 5 3 \\r\\n']}, {'input': '8 6\\r\\n1 1 1 1 2 2 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 1 2 \\r\\n']}, {'input': '3 2\\r\\n2019 2019 2019\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3 2\\r\\n2018 2018 2018\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10 10\\r\\n1 2 3 1 2 3 4 5 6 42\\r\\n', 'output': ['YES\\r\\n1 3 5 2 4 6 7 8 9 10 \\r\\n']}, {'input': '7 7\\r\\n1 1 1 1 2 3 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 \\r\\n']}, {'input': '10 10\\r\\n2017 2018 2019 2017 2018 2019 2020 2021 2022 2023\\r\\n', 'output': ['YES\\r\\n1 3 5 2 4 6 7 8 9 10 \\r\\n']}, {'input': '5 4\\r\\n1 4 6 6 3\\r\\n', 'output': ['YES\\r\\n1 3 4 1 2 \\r\\n']}, {'input': '4 4\\r\\n1 2 2 1\\r\\n', 'output': ['YES\\r\\n1 3 4 2 \\r\\n']}, {'input': '6 6\\r\\n1 1 2 2 3 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '6 3\\r\\n2 1 3 4 5 1\\r\\n', 'output': ['YES\\r\\n3 1 1 2 3 2 \\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tint[] col = new int[k];\n\t\tboolean used = true;\n\t\t\n\t\tfor(int i = 0 ; i < n ; i++) {\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\t\n\t\tfor(int i = 0 ; i < n ; i++) {\n\t\t\tboolean ok = false;\n\t\t\tfor(int j = 0 ; j < col.length ; j++) {\n\t\t\t\tif(col[j] == a[i]) {\n\t\t\t\t\tok = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!ok) {\n\t\t\t\tfor(int j = 0 ; j < col.length ; j++) {\n\t\t\t\t\tif(col[j] == 0) {\n\t\t\t\t\t\tcol[j] = a[i];\n\t\t\t\t\t\tok = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!ok) {\n\t\t\t\tfor(int j = 0 ; j < col.length ; j++) {\n\t\t\t\t\tif(col[j] == a[i]) {\n\t\t\t\t\t\tused = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(used) {\n\t\t\t\t\tcol[0] = a[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(used) {\n\t\t\tSystem.out.println(\"YES\");\n\t\t\tfor(int i = 0 ; i < n ; i++) {\n\t\t\t\tSystem.out.print((col[a[i] - 1]));\n\t\t\t\tif(i < n - 1) System.out.print(\" \");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tSystem.out.println(\"NO\");\n\t\t}\n\t}\n}\n"}
{"src_uid": "3d4df21eebf32ce15841179bb85e6f2f", "id": 61, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1400, "testcases": "[{'input': '4 2\\r\\n1 2 2 3\\r\\n', 'output': ['YES\\r\\n1 2 1 2 \\r\\n']}, {'input': '5 2\\r\\n3 2 1 2 3\\r\\n', 'output': ['YES\\r\\n2 2 1 1 1 \\r\\n']}, {'input': '5 2\\r\\n2 1 1 2 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 4\\r\\n1 1 1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 1 \\r\\n']}, {'input': '11 9\\r\\n1 1 2 2 2 2 2 2 3 4 5\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 9 1 2 \\r\\n']}, {'input': '4 4\\r\\n1 2 2 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 \\r\\n']}, {'input': '5 5\\r\\n1 1 2 1 1\\r\\n', 'output': ['YES\\r\\n1 2 5 3 4 \\r\\n']}, {'input': '4 4\\r\\n1 1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 \\r\\n']}, {'input': '5 4\\r\\n1 2 1 2 3\\r\\n', 'output': ['YES\\r\\n1 3 2 4 1 \\r\\n']}, {'input': '5 5\\r\\n1 1 2 1 3\\r\\n', 'output': ['YES\\r\\n1 2 4 3 5 \\r\\n']}, {'input': '10 10\\r\\n1 2 3 1 2 3 4 5 6 7\\r\\n', 'output': ['YES\\r\\n1 3 5 2 4 6 7 8 9 10 \\r\\n']}, {'input': '8 6\\r\\n1 2 3 3 2 2 3 1\\r\\n', 'output': ['YES\\r\\n1 3 6 1 4 5 2 2 \\r\\n']}, {'input': '6 4\\r\\n1 1 2 2 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 1 2 \\r\\n']}, {'input': '5 5\\r\\n1 1 2 2 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 \\r\\n']}, {'input': '4 3\\r\\n2 2 1 1\\r\\n', 'output': ['YES\\r\\n3 1 1 2 \\r\\n']}, {'input': '10 10\\r\\n1 1 2 2 3 3 4 4 5 5\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 9 10 \\r\\n']}, {'input': '6 5\\r\\n1 1 2 2 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 1 \\r\\n']}, {'input': '4 4\\r\\n3 3 3 5\\r\\n', 'output': ['YES\\r\\n1 2 3 4 \\r\\n']}, {'input': '9 8\\r\\n1 2 2 3 3 3 4 5 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 1 8 \\r\\n']}, {'input': '5 5\\r\\n2 1 1 2 1\\r\\n', 'output': ['YES\\r\\n4 1 2 5 3 \\r\\n']}, {'input': '6 6\\r\\n1 1 2 1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 4 3 5 6 \\r\\n']}, {'input': '6 6\\r\\n1 1 1 2 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '8 8\\r\\n1 1 1 1 1 2 2 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 \\r\\n']}, {'input': '6 6\\r\\n2 1 1 2 1 3\\r\\n', 'output': ['YES\\r\\n4 1 2 5 3 6 \\r\\n']}, {'input': '5 3\\r\\n3 2 1 2 3\\r\\n', 'output': ['YES\\r\\n1 2 1 3 2 \\r\\n']}, {'input': '6 6\\r\\n1 2 3 3 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '1 1\\r\\n5000\\r\\n', 'output': ['YES\\r\\n1 \\r\\n']}, {'input': '3 3\\r\\n6 7 8\\r\\n', 'output': ['YES\\r\\n1 2 3 \\r\\n']}, {'input': '8 6\\r\\n1 1 2 2 3 4 5 6\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 1 2 \\r\\n']}, {'input': '7 5\\r\\n2 3 2 1 1 1 3\\r\\n', 'output': ['YES\\r\\n4 1 5 1 2 3 2 \\r\\n']}, {'input': '5 4\\r\\n1 2 1 2 4\\r\\n', 'output': ['YES\\r\\n1 3 2 4 1 \\r\\n']}, {'input': '8 8\\r\\n1 2 2 2 1 1 3 3\\r\\n', 'output': ['YES\\r\\n1 4 5 6 2 3 7 8 \\r\\n']}, {'input': '3 2\\r\\n5000 5000 5000\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7 6\\r\\n1 2 3 4 2 3 4\\r\\n', 'output': ['YES\\r\\n1 2 4 6 3 5 1 \\r\\n']}, {'input': '2 1\\r\\n5000 5000\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 4\\r\\n3 2 1 2 3\\r\\n', 'output': ['YES\\r\\n4 2 1 3 1 \\r\\n']}, {'input': '4 4\\r\\n2 1 2 3\\r\\n', 'output': ['YES\\r\\n2 1 3 4 \\r\\n']}, {'input': '4 4\\r\\n2 1 3 2\\r\\n', 'output': ['YES\\r\\n2 1 4 3 \\r\\n']}, {'input': '6 6\\r\\n1 2 2 2 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '7 6\\r\\n1 2 3 7 7 7 7\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 1 \\r\\n']}, {'input': '1 1\\r\\n500\\r\\n', 'output': ['YES\\r\\n1 \\r\\n']}, {'input': '8 8\\r\\n2 1 1 1 1 1 1 1\\r\\n', 'output': ['YES\\r\\n8 1 2 3 4 5 6 7 \\r\\n']}, {'input': '6 6\\r\\n1 1 2 2 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '10 9\\r\\n1 2 1 1 1 1 1 1 2 1\\r\\n', 'output': ['YES\\r\\n1 9 2 3 4 5 6 7 1 8 \\r\\n']}, {'input': '8 8\\r\\n1 2 8 2 3 3 3 3\\r\\n', 'output': ['YES\\r\\n1 2 8 3 4 5 6 7 \\r\\n']}, {'input': '9 9\\r\\n1 2 2 3 2 5 3 6 8\\r\\n', 'output': ['YES\\r\\n1 2 3 5 4 7 6 8 9 \\r\\n']}, {'input': '4 4\\r\\n1 2 1 2\\r\\n', 'output': ['YES\\r\\n1 3 2 4 \\r\\n']}, {'input': '4 2\\r\\n2000 2000 2000 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 5\\r\\n1 2 1 2 4\\r\\n', 'output': ['YES\\r\\n1 3 2 4 5 \\r\\n']}, {'input': '8 8\\r\\n1 2 2 2 1 1 1 1\\r\\n', 'output': ['YES\\r\\n1 6 7 8 2 3 4 5 \\r\\n']}, {'input': '5 5\\r\\n3 2 1 2 3\\r\\n', 'output': ['YES\\r\\n4 2 1 3 5 \\r\\n']}, {'input': '9 9\\r\\n1 1 1 1 2 2 2 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 9 \\r\\n']}, {'input': '6 6\\r\\n1 1 1 1 2 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '5 5\\r\\n1 2 2 1 1\\r\\n', 'output': ['YES\\r\\n1 4 5 2 3 \\r\\n']}, {'input': '50 20\\r\\n1 1 1 1 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 \\r\\n']}, {'input': '5 5\\r\\n1 2 3 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 \\r\\n']}, {'input': '5 5\\r\\n1 1 1 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 \\r\\n']}, {'input': '7 3\\r\\n1 2 3 4 5 5 1\\r\\n', 'output': ['YES\\r\\n1 3 1 2 3 1 2 \\r\\n']}, {'input': '2 1\\r\\n7 9\\r\\n', 'output': ['YES\\r\\n1 1 \\r\\n']}, {'input': '4 2\\r\\n4999 4999 4999 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 5\\r\\n1 1 3 3 3\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 \\r\\n']}, {'input': '3 3\\r\\n1 1 2\\r\\n', 'output': ['YES\\r\\n1 2 3 \\r\\n']}, {'input': '5 5\\r\\n2 2 1 1 2\\r\\n', 'output': ['YES\\r\\n3 4 1 2 5 \\r\\n']}, {'input': '6 5\\r\\n1 2 3 4 4 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 1 \\r\\n']}, {'input': '1 1\\r\\n1\\r\\n', 'output': ['YES\\r\\n1 \\r\\n']}, {'input': '6 6\\r\\n1 2 1 2 4 5\\r\\n', 'output': ['YES\\r\\n1 3 2 4 5 6 \\r\\n']}, {'input': '8 6\\r\\n1 2 3 4 1 2 3 4\\r\\n', 'output': ['YES\\r\\n1 3 5 1 2 4 6 2 \\r\\n']}, {'input': '6 5\\r\\n1 2 1 2 1 2\\r\\n', 'output': ['YES\\r\\n1 4 2 5 3 1 \\r\\n']}, {'input': '10 10\\r\\n1 2 3 1 2 3 1 2 4 5\\r\\n', 'output': ['YES\\r\\n1 4 7 2 5 8 3 6 9 10 \\r\\n']}, {'input': '8 5\\r\\n9 3 9 6 10 7 8 2\\r\\n', 'output': ['YES\\r\\n1 2 2 3 3 4 5 1 \\r\\n']}, {'input': '18 18\\r\\n10 9 8 7 5 3 6 2 2 9 7 8 2 9 2 8 10 7\\r\\n', 'output': ['YES\\r\\n17 14 11 8 6 5 7 1 2 15 9 12 3 16 4 13 18 10 \\r\\n']}, {'input': '5 1\\r\\n5 2 3 4 5\\r\\n', 'output': ['NO\\r\\n']}, {'input': '9 9\\r\\n9 8 1 3 4 5 3 8 9\\r\\n', 'output': ['YES\\r\\n8 6 1 2 4 5 3 7 9 \\r\\n']}, {'input': '10 10\\r\\n1 2 3 3 2 1 4 5 7 10\\r\\n', 'output': ['YES\\r\\n1 3 5 6 4 2 7 8 9 10 \\r\\n']}, {'input': '10 10\\r\\n1 2 3 3 2 1 4 5 6 10\\r\\n', 'output': ['YES\\r\\n1 3 5 6 4 2 7 8 9 10 \\r\\n']}, {'input': '3 2\\r\\n500 500 500\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 5\\r\\n1 2 3 1 2\\r\\n', 'output': ['YES\\r\\n1 3 5 2 4 \\r\\n']}, {'input': '10 5\\r\\n1 2 3 4 1 2 3 4 1 2\\r\\n', 'output': ['YES\\r\\n1 4 2 4 2 5 3 5 3 1 \\r\\n']}, {'input': '10 7\\r\\n1 2 3 1 2 3 1 2 3 1\\r\\n', 'output': ['YES\\r\\n1 5 1 2 6 2 3 7 3 4 \\r\\n']}, {'input': '3 3\\r\\n1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 \\r\\n']}, {'input': '4 4\\r\\n4999 5000 5000 4999\\r\\n', 'output': ['YES\\r\\n1 3 4 2 \\r\\n']}, {'input': '12 12\\r\\n8 8 8 8 8 8 4 4 4 4 2 2\\r\\n', 'output': ['YES\\r\\n7 8 9 10 11 12 3 4 5 6 1 2 \\r\\n']}, {'input': '5 4\\r\\n25 2 3 2 2\\r\\n', 'output': ['YES\\r\\n1 1 4 2 3 \\r\\n']}, {'input': '7 6\\r\\n1 1 1 1 1 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 1 \\r\\n']}, {'input': '3 3\\r\\n5 5 5\\r\\n', 'output': ['YES\\r\\n1 2 3 \\r\\n']}, {'input': '1 1\\r\\n2\\r\\n', 'output': ['YES\\r\\n1 \\r\\n']}, {'input': '6 2\\r\\n100 100 101 101 102 102\\r\\n', 'output': ['YES\\r\\n1 2 1 2 1 2 \\r\\n']}, {'input': '8 8\\r\\n1 1 2 2 3 3 4 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 8 \\r\\n']}, {'input': '3 1\\r\\n2 2 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 5\\r\\n1 1 2 2 1\\r\\n', 'output': ['YES\\r\\n1 2 4 5 3 \\r\\n']}, {'input': '8 6\\r\\n1 1 1 1 2 2 2 2\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 1 2 \\r\\n']}, {'input': '3 2\\r\\n2019 2019 2019\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3 2\\r\\n2018 2018 2018\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10 10\\r\\n1 2 3 1 2 3 4 5 6 42\\r\\n', 'output': ['YES\\r\\n1 3 5 2 4 6 7 8 9 10 \\r\\n']}, {'input': '7 7\\r\\n1 1 1 1 2 3 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 7 \\r\\n']}, {'input': '10 10\\r\\n2017 2018 2019 2017 2018 2019 2020 2021 2022 2023\\r\\n', 'output': ['YES\\r\\n1 3 5 2 4 6 7 8 9 10 \\r\\n']}, {'input': '5 4\\r\\n1 4 6 6 3\\r\\n', 'output': ['YES\\r\\n1 3 4 1 2 \\r\\n']}, {'input': '4 4\\r\\n1 2 2 1\\r\\n', 'output': ['YES\\r\\n1 3 4 2 \\r\\n']}, {'input': '6 6\\r\\n1 1 2 2 3 4\\r\\n', 'output': ['YES\\r\\n1 2 3 4 5 6 \\r\\n']}, {'input': '6 3\\r\\n2 1 3 4 5 1\\r\\n', 'output': ['YES\\r\\n3 1 1 2 3 2 \\r\\n']}]", "source_code": "import java.util.*;\npublic class Main {\n    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt(), k = in.nextInt(), a[] = new int[n], col[][] = new int[n][k], i, j, l, x;\n        for(i=0;i<n;i++) col[i][0] = 0;\n        for(i=0;i<n;i++){\n        \ta[i] = in.nextInt();\n        \tfor(j=0;j<i;j++){\n        \t\tif(a[j] == a[i]) col[i][0] = 1;\n        \t}\n        }\n        boolean flag = true;\n        if(col[0][0]!= 0) flag = false;\n        if(flag){\n        \tfor(i=0;i<n;i++){\n        \t\tSystem.out.print((col[i][0]+1)+\" \");\n        \t}\n        }\n        else System.out.print(\"NO\");\n    }\n}"}
{"src_uid": "56da4ec7cd849c4330d188d8c9bd6094", "id": 62, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1300, "testcases": "[{'input': '4\\r\\n5 2 2\\r\\n1 2 1 2 1\\r\\n9 3 3\\r\\n3 3 3 2 2 2 1 1 1\\r\\n4 10 4\\r\\n10 8 6 4\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n', 'output': ['2\\r\\n1\\r\\n4\\r\\n5', '2\\n1\\n4\\n5']}, {'input': '10000\\r\\n4 4 1\\r\\n4 3 3 1\\r\\n9 1 7\\r\\n1 1 1 1 1 1 1 1 1\\r\\n1 7 1\\r\\n4\\r\\n3 7 3\\r\\n7 1 2\\r\\n3 6 2\\r\\n4 5 6\\r\\n8 7 3\\r\\n6 3 5 7 3 6 4 3\\r\\n5 6 2\\r\\n2 3 6 3 4\\r\\n1 7 1\\r\\n5\\r\\n4 4 1\\r\\n3 1 3 1\\r\\n7 2 4\\r\\n2 1 1 1 1 2 1\\r\\n4 5 1\\r\\n1 5 4 1\\r\\n9 10 1\\r\\n7 4 4 4 6 3 7 10 7\\r\\n3 8 1\\r\\n6 4 3\\r\\n1 7 1\\r\\n4\\r\\n5 7 5\\r\\n7 5 3 5 5\\r\\n5 10 2\\r\\n5 10 9 10 1\\r\\n2 2 1\\r\\n2 2\\r\\n6 10 4\\r\\n4 10 5 1 7 2\\r\\n7 10 2\\r\\n8 5 7 3 2 2 4\\r\\n2 9 1\\r\\n8 3\\r\\n3 10 3\\r\\n1 2 9\\r\\n10 9 1\\r\\n7 2 4 3 4 1 5 8 8 7\\r\\n9 4 5\\r\\n2 2 3 2 4 4 1 1 2\\r\\n6 9 2\\r\\n6 2 3 1 9 9\\r\\n5 8 1\\r\\n5 2 1 5 8\\r\\n9 5 3\\r\\n3 1 5 2 1 2 2 4 1\\r\\n6 10 1\\r\\n8 6 4 10 10 10\\r\\n...', 'output': ['1\\r\\n1\\r\\n1\\r\\n3\\r\\n2\\r\\n3\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n2\\r\\n1\\r\\n4\\r\\n1\\r\\n1\\r\\n3\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n5\\r\\n1\\r\\n1\\r\\n3\\r\\n4\\r\\n1\\r\\n3\\r\\n3\\r\\n1\\r\\n2\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n5\\r\\n4\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n2\\r\\n2\\r\\n3\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n4\\r\\n2\\r\\n2\\r\\n3\\r\\n5\\r\\n2\\r\\n1\\r\\n5\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n4\\r\\n1\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n2\\r\\n4\\r\\n1\\r\\n3\\r\\n3\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n3\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n4\\r\\n1\\r\\n1\\r\\n3\\r\\n3\\r\\n3\\r\\n1\\r\\n1\\r\\n2\\r\\n2\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n4\\r\\n6\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n4\\r\\n1\\r\\n3\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n2...']}, {'input': '10000\\r\\n25 2 1\\r\\n1 2 2 1 2 2 2 2 2 2 2 1 1 1 2 2 2 1 2 2 1 1 1 2 1\\r\\n24 27 19\\r\\n19 2 15 17 4 8 20 13 1 2 19 2 6 9 22 16 17 20 23 25 26 8 6 24\\r\\n4 10 1\\r\\n10 7 7 9\\r\\n11 15 1\\r\\n2 2 6 3 3 5 11 15 8 12 3\\r\\n19 20 3\\r\\n10 8 8 9 8 6 1 8 20 10 9 18 20 16 4 12 9 10 2\\r\\n22 8 11\\r\\n5 3 5 1 7 7 2 4 6 4 5 8 6 1 3 7 2 7 2 5 7 6\\r\\n16 4 6\\r\\n1 1 4 3 2 1 2 1 3 3 2 3 3 3 3 2\\r\\n19 25 5\\r\\n14 18 2 11 14 12 15 16 21 11 16 12 17 7 18 23 2 3 4\\r\\n26 16 1\\r\\n2 14 12 14 5 6 5 6 15 11 9 7 15 3 3 4 8 13 1 4 4 8 3 1 12 9\\r\\n19 13 9\\r\\n11 2 3 13 6 8 7 2 6 3 9 7 1...', 'output': ['1\\r\\n14\\r\\n1\\r\\n1\\r\\n2\\r\\n7\\r\\n2\\r\\n4\\r\\n1\\r\\n6\\r\\n7\\r\\n2\\r\\n7\\r\\n9\\r\\n4\\r\\n3\\r\\n2\\r\\n8\\r\\n4\\r\\n6\\r\\n1\\r\\n4\\r\\n4\\r\\n4\\r\\n3\\r\\n3\\r\\n2\\r\\n5\\r\\n9\\r\\n1\\r\\n3\\r\\n3\\r\\n3\\r\\n1\\r\\n7\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n6\\r\\n1\\r\\n6\\r\\n1\\r\\n4\\r\\n2\\r\\n2\\r\\n5\\r\\n5\\r\\n5\\r\\n4\\r\\n5\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n6\\r\\n2\\r\\n1\\r\\n3\\r\\n8\\r\\n6\\r\\n2\\r\\n1\\r\\n4\\r\\n1\\r\\n17\\r\\n2\\r\\n11\\r\\n1\\r\\n8\\r\\n1\\r\\n4\\r\\n8\\r\\n5\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n4\\r\\n2\\r\\n10\\r\\n4\\r\\n1\\r\\n8\\r\\n5\\r\\n7\\r\\n1\\r\\n11\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n11\\r\\n6\\r\\n1\\r\\n4\\r\\n6\\r\\n16\\r\\n1\\r\\n12\\r\\n8\\r\\n4\\r\\n5\\r\\n1\\r\\n2\\r\\n6\\r\\n12\\r\\n2\\r\\n3\\r\\n3\\r\\n2\\r\\n2\\r\\n1\\r\\n6\\r\\n4\\r\\n13\\r\\n2\\r\\n11\\r\\n3\\r\\n4\\r\\n13\\r\\n1\\r\\n7\\r\\n5\\r\\n5\\r\\n11\\r\\n4\\r\\n3\\r\\n6\\r\\n6\\r\\n2\\r\\n1\\r\\n1\\r\\n9\\r\\n4\\r\\n9\\r\\n9\\r\\n13\\r\\n2\\r\\n5\\r\\n1\\r\\n1\\r\\n14\\r\\n5\\r\\n1\\r\\n10\\r\\n2\\r\\n2\\r\\n6\\r\\n1\\r\\n4\\r\\n1\\r\\n1\\r\\n2\\r\\n7\\r\\n1\\r\\n3\\r\\n1\\r\\n6\\r\\n2\\r\\n2\\r\\n4\\r\\n...']}, {'input': '1\\r\\n200000 50000 100000\\r\\n43620 16520 24169 29319 35300 6092 8697 40998 15469 16541 45920 21696 48009 37549 35849 6966 45977 49376 47590 10302 36127 14270 35645 20850 15907 32338 30934 35216 32431 48365 11343 28651 42051 4611 3208 48408 8001 13308 3528 34450 48338 44549 214 35127 25599 21629 13920 49465 30152 33128 22087 20254 29457 18159 30113 18369 20976 35278 49478 42126 44353 31877 49348 4138 43970 17640 12092 38376 23575 4559 13202 45493 27767 29431 14560 2957 25933 37550 11475 36643 29624 38619 38461 3...', 'output': ['43168']}, {'input': '1\\r\\n200000 1 100000\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1...', 'output': ['1']}, {'input': '1\\r\\n200000 10 100000\\r\\n1 9 2 9 4 1 9 4 2 6 4 10 5 2 9 6 4 3 7 5 10 2 6 7 5 8 7 2 4 1 1 1 3 3 7 10 2 6 4 5 4 10 10 2 6 2 1 4 8 3 1 2 5 8 3 4 10 8 7 5 9 5 5 5 8 4 1 10 8 7 6 9 7 7 5 7 9 4 8 10 1 5 9 5 7 7 6 9 5 4 3 5 7 10 5 6 3 2 10 3 2 10 3 10 5 3 5 4 10 10 2 9 3 3 6 2 3 6 5 1 9 1 5 6 6 9 1 9 8 3 9 7 1 3 2 7 6 5 5 8 3 10 5 1 4 9 3 4 1 9 8 2 8 5 2 6 6 3 10 7 1 2 9 3 3 7 6 9 7 2 9 9 1 8 8 2 5 2 4 8 1 8 7 3 6 5 3 10 4 2 10 9 5 5 8 6 9 1 1 8 9 2 7 7 1 10 8 10 6 5 5 2 10 10 8 3 8 9 3 7 1 2 8 6 5 6 9 4 6 1 3 4 6 3 ...', 'output': ['10']}, {'input': '1\\r\\n200000 100 20000\\r\\n56 54 36 40 73 78 52 47 66 20 77 100 36 93 23 31 59 97 74 29 58 88 27 97 37 81 15 20 89 75 8 61 52 78 1 26 86 7 63 46 21 74 39 72 38 77 68 82 97 84 79 96 65 47 42 45 70 66 28 58 81 34 81 14 52 73 75 74 87 65 82 63 56 86 56 99 32 24 18 20 60 25 97 77 28 49 53 7 35 21 10 74 34 95 30 5 4 77 69 49 81 2 5 50 32 72 50 9 7 44 15 80 70 45 39 69 12 5 61 84 33 10 88 32 94 91 24 22 49 88 99 38 30 30 1 96 27 60 4 84 89 3 21 70 21 39 69 11 28 7 17 39 71 30 19 33 91 93 26 45 6 86 61 57 80 91 5 28 64...', 'output': ['100']}, {'input': '1\\r\\n200000 999996 100000\\r\\n1 6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96 101 106 111 116 121 126 131 136 141 146 151 156 161 166 171 176 181 186 191 196 201 206 211 216 221 226 231 236 241 246 251 256 261 266 271 276 281 286 291 296 301 306 311 316 321 326 331 336 341 346 351 356 361 366 371 376 381 386 391 396 401 406 411 416 421 426 431 436 441 446 451 456 461 466 471 476 481 486 491 496 501 506 511 516 521 526 531 536 541 546 551 556 561 566 571 576 581 586 591 596 601 606 611 616 621 626 631 ...', 'output': ['100000']}, {'input': '1\\r\\n200000 1000000 200000\\r\\n1000000 999995 999990 999985 999980 999975 999970 999965 999960 999955 999950 999945 999940 999935 999930 999925 999920 999915 999910 999905 999900 999895 999890 999885 999880 999875 999870 999865 999860 999855 999850 999845 999840 999835 999830 999825 999820 999815 999810 999805 999800 999795 999790 999785 999780 999775 999770 999765 999760 999755 999750 999745 999740 999735 999730 999725 999720 999715 999710 999705 999700 999695 999690 999685 999680 999675 999670 999665 999660 9...', 'output': ['200000']}, {'input': '1\\r\\n200000 1000 100000\\r\\n620 192 107 955 564 521 642 381 695 916 549 124 253 339 472 162 131 282 959 678 207 154 876 995 734 39 412 999 815 355 18 165 430 993 27 603 666 794 993 261 70 259 289 24 684 893 292 512 941 852 393 42 314 25 25 970 671 168 914 583 666 819 637 194 512 972 681 283 401 767 709 892 607 366 529 164 211 563 726 197 72 746 537 94 150 347 365 281 320 276 734 646 118 894 974 967 68 260 563 746 985 119 431 778 249 428 511 158 692 99 125 553 877 954 302 832 611 137 181 895 51 860 150 916 284 6...', 'output': ['1000']}, {'input': '1\\r\\n200000 100000 100000\\r\\n8647 17914 36109 89778 78993 55133 74489 27482 57585 98271 77889 47476 26434 78910 72270 37433 77590 94218 26776 81236 7857 52297 75984 96580 13420 37206 57335 15966 38003 44862 95973 906 76808 94689 51811 80545 49598 60279 5137 72373 67166 84168 43937 97833 79109 97555 66522 57877 67492 14888 45878 78979 86655 76238 22212 32085 91951 14238 83686 38492 81248 57509 57652 11778 87283 25990 28664 96610 45117 5398 15632 33866 83494 31775 58512 71264 17548 46621 80189 6618 19549 76932 5...', 'output': ['62936']}, {'input': '1\\r\\n200000 1000000 200000\\r\\n470364 225896 287028 539970 507065 834358 221882 79921 952537 675938 918775 600012 658158 451805 585924 200704 727836 877423 589359 95563 175804 737263 148093 693378 834010 564940 1442 668171 699064 243399 367947 932004 332361 500470 581460 457946 747126 822659 687570 763411 734109 359915 138955 532165 905740 554112 955385 526332 377610 359080 408012 320280 805135 892507 484900 811596 483912 864488 223962 260705 468 390385 483192 247665 841481 651754 428156 822508 897711 270750 80...', 'output': ['181244']}, {'input': '1\\r\\n200000 1000000 20000\\r\\n533722 392695 889264 562461 855026 138921 815803 461194 257052 45665 831069 886688 652160 561837 516684 283787 634185 14587 677319 708000 762661 815073 509775 30098 637512 723030 819497 202814 848040 970165 882077 948960 348866 282945 296186 444252 966548 552732 274192 16694 895137 572174 815092 350234 717680 652165 545471 904085 37325 47183 763599 162009 423431 10401 212741 944445 276272 304020 763078 730235 106465 974498 982395 46321 795699 969837 135760 488480 863430 883321 2125...', 'output': ['19770']}, {'input': '1\\r\\n200000 1 1\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...', 'output': ['1']}, {'input': '1\\r\\n200000 1000000 1\\r\\n780737 872203 852770 369033 859738 846341 851594 954282 684383 209632 798015 36250 376958 793324 203798 459743 621399 649416 45468 297431 261695 620652 512718 793583 992894 200416 98975 368684 265169 695427 834486 116518 889256 354565 349037 240328 345769 475500 788435 452690 948139 738003 87787 656919 874748 293479 823979 451391 310748 446952 936638 761542 417856 248622 69762 416315 588495 748898 540043 217410 102504 122304 887006 865619 229595 6236 653431 864185 887339 426521 687555 ...', 'output': ['1']}, {'input': '1\\r\\n200000 999996 1\\r\\n1 6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96 101 106 111 116 121 126 131 136 141 146 151 156 161 166 171 176 181 186 191 196 201 206 211 216 221 226 231 236 241 246 251 256 261 266 271 276 281 286 291 296 301 306 311 316 321 326 331 336 341 346 351 356 361 366 371 376 381 386 391 396 401 406 411 416 421 426 431 436 441 446 451 456 461 466 471 476 481 486 491 496 501 506 511 516 521 526 531 536 541 546 551 556 561 566 571 576 581 586 591 596 601 606 611 616 621 626 631 636 6...', 'output': ['1']}, {'input': '1\\r\\n200000 999996 199999\\r\\n1 6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96 101 106 111 116 121 126 131 136 141 146 151 156 161 166 171 176 181 186 191 196 201 206 211 216 221 226 231 236 241 246 251 256 261 266 271 276 281 286 291 296 301 306 311 316 321 326 331 336 341 346 351 356 361 366 371 376 381 386 391 396 401 406 411 416 421 426 431 436 441 446 451 456 461 466 471 476 481 486 491 496 501 506 511 516 521 526 531 536 541 546 551 556 561 566 571 576 581 586 591 596 601 606 611 616 621 626 631 ...', 'output': ['199999']}, {'input': '10000\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 100000...', 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1...']}, {'input': '10000\\r\\n20 1000000 5\\r\\n50000 100000 150000 200000 250000 300000 350000 400000 450000 500000 550000 600000 650000 700000 750000 800000 850000 900000 950000 1000000\\r\\n20 1000000 5\\r\\n50000 100000 150000 200000 250000 300000 350000 400000 450000 500000 550000 600000 650000 700000 750000 800000 850000 900000 950000 1000000\\r\\n20 1000000 5\\r\\n50000 100000 150000 200000 250000 300000 350000 400000 450000 500000 550000 600000 650000 700000 750000 800000 850000 900000 950000 1000000\\r\\n20 1000000 5\\r\\n50000 100000 150000 20000...', 'output': ['5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5...']}, {'input': '10000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000...', 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1...']}, {'input': '10000\\r\\n20 1000000 6\\r\\n42 18468 6335 26501 19170 15725 11479 29359 26963 24465 5706 28146 23282 16828 9962 492 2996 11943 4828 5437\\r\\n20 1000000 6\\r\\n32392 14605 3903 154 293 12383 17422 18717 19719 19896 5448 21727 14772 11539 1870 19913 25668 26300 17036 9895\\r\\n20 1000000 6\\r\\n28704 23812 31323 30334 17674 4665 15142 7712 28254 6869 25548 27645 32663 32758 20038 12860 8724 9742 27530 779\\r\\n20 1000000 6\\r\\n12317 3036 22191 1843 289 30107 9041 8943 19265 22649 27447 23806 15891 6730 24371 15351 15007 31102 24394 3549...', 'output': ['6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6...']}, {'input': '10000\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 ...', 'output': ['5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5...']}, {'input': '1\\r\\n6969 100 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...', 'output': ['1']}, {'input': '10000\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n...', 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1...']}, {'input': '30\\r\\n4 4 1\\r\\n3 3 1 2\\r\\n4 4 1\\r\\n4 1 4 1\\r\\n1 1 1\\r\\n1\\r\\n3 2 1\\r\\n2 1 2\\r\\n4 4 2\\r\\n3 2 2 2\\r\\n4 2 4\\r\\n1 2 2 2\\r\\n1 4 1\\r\\n4\\r\\n2 3 1\\r\\n2 3\\r\\n2 2 1\\r\\n2 2\\r\\n4 4 2\\r\\n1 2 4 2\\r\\n4 4 1\\r\\n2 4 4 3\\r\\n4 3 1\\r\\n1 3 1 3\\r\\n1 1 1\\r\\n1\\r\\n2 2 2\\r\\n2 1\\r\\n2 4 1\\r\\n1 4\\r\\n2 4 1\\r\\n3 4\\r\\n1 2 1\\r\\n1\\r\\n2 4 2\\r\\n2 1\\r\\n3 1 2\\r\\n1 1 1\\r\\n2 4 1\\r\\n1 4\\r\\n2 3 1\\r\\n3 3\\r\\n4 2 2\\r\\n2 1 2 2\\r\\n3 2 2\\r\\n2 2 1\\r\\n4 3 1\\r\\n2 2 1 2\\r\\n2 3 1\\r\\n1 3\\r\\n4 4 4\\r\\n3 2 2 3\\r\\n1 4 1\\r\\n1\\r\\n2 1 2\\r\\n1 1\\r\\n1 4 1\\r\\n4\\r\\n2 3 1\\r\\n3 3\\r\\n', 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n1', '1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1']}, {'input': '15\\r\\n6 4 6\\r\\n2 3 2 3 4 2\\r\\n7 8 4\\r\\n5 6 2 7 7 3 3\\r\\n8 1 5\\r\\n1 1 1 1 1 1 1 1\\r\\n1 5 1\\r\\n1\\r\\n2 7 2\\r\\n6 7\\r\\n6 8 4\\r\\n8 5 4 1 6 6\\r\\n1 8 1\\r\\n2\\r\\n3 8 2\\r\\n2 3 3\\r\\n2 2 1\\r\\n1 1\\r\\n8 2 5\\r\\n2 2 1 1 1 1 1 1\\r\\n7 6 4\\r\\n2 4 1 1 2 4 3\\r\\n8 8 2\\r\\n6 5 6 1 3 1 2 8\\r\\n5 6 1\\r\\n6 1 2 6 2\\r\\n6 5 5\\r\\n1 5 2 4 4 5\\r\\n7 1 6\\r\\n1 1 1 1 1 1 1\\r\\n', 'output': ['3\\n2\\n1\\n1\\n2\\n3\\n1\\n1\\n1\\n1\\n3\\n2\\n1\\n3\\n1', '3\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n2\\r\\n1\\r\\n3\\r\\n1']}, {'input': '10\\r\\n6 9 4\\r\\n8 8 2 5 8 9\\r\\n5 3 4\\r\\n1 3 1 2 1\\r\\n10 5 10\\r\\n3 2 4 2 1 1 2 2 3 4\\r\\n7 7 3\\r\\n4 6 2 6 4 5 2\\r\\n9 9 6\\r\\n4 6 7 2 5 5 7 4 8\\r\\n6 5 4\\r\\n2 3 2 5 5 5\\r\\n8 3 4\\r\\n2 3 2 3 2 1 1 3\\r\\n10 6 9\\r\\n6 2 4 1 4 5 5 2 1 1\\r\\n8 7 2\\r\\n4 4 5 6 2 5 3 4\\r\\n1 9 1\\r\\n3\\r\\n', 'output': ['3\\r\\n3\\r\\n4\\r\\n2\\r\\n4\\r\\n2\\r\\n2\\r\\n4\\r\\n1\\r\\n1', '3\\n3\\n4\\n2\\n4\\n2\\n2\\n4\\n1\\n1']}, {'input': '5\\r\\n17 10 1\\r\\n8 5 10 7 4 7 2 9 8 10 7 2 6 5 1 1 5\\r\\n22 13 5\\r\\n1 9 12 4 6 1 8 10 1 11 1 2 1 6 8 12 11 8 10 6 2 12\\r\\n13 25 7\\r\\n22 7 19 12 7 17 7 6 22 19 5 5 23\\r\\n1 6 1\\r\\n6\\r\\n1 15 1\\r\\n7\\r\\n', 'output': ['1\\n3\\n5\\n1\\n1', '1\\r\\n3\\r\\n5\\r\\n1\\r\\n1']}, {'input': '1\\r\\n100 90 100\\r\\n8 39 60 46 68 2 42 45 7 54 89 78 16 59 21 29 5 30 20 12 64 42 34 33 13 17 55 30 54 31 23 27 38 36 2 49 45 43 47 55 4 6 55 38 60 16 34 86 67 76 55 86 39 62 12 58 74 51 10 31 38 85 50 61 48 35 69 24 64 53 4 19 15 35 28 22 88 3 25 60 9 40 67 47 26 57 58 61 65 21 76 4 15 35 37 49 62 45 81 32\\r\\n', 'output': ['67']}, {'input': '1\\r\\n100 100 100\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['100']}, {'input': '1\\r\\n100 50 100\\r\\n22 28 34 29 43 8 12 12 4 29 36 38 22 5 19 38 4 41 20 33 39 11 2 40 42 8 33 23 20 47 45 30 47 33 27 23 50 26 30 43 8 3 4 38 46 32 20 19 10 3 18 29 21 19 37 30 12 38 27 44 24 39 25 18 50 44 37 22 39 41 18 26 37 40 40 16 38 9 12 36 27 31 45 47 31 31 29 48 25 7 29 24 10 2 8 3 36 48 8 9\\r\\n', 'output': ['42']}, {'input': '1\\r\\n100 1 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 10 100\\r\\n9 2 2 3 5 2 2 3 4 9 5 3 6 2 1 4 4 8 6 2 3 10 4 1 5 2 8 8 3 9 2 7 2 3 4 2 2 8 9 7 10 3 7 7 4 4 8 8 9 7 1 8 10 3 6 8 1 9 4 6 5 6 9 2 9 6 7 10 5 8 7 10 6 1 9 2 10 10 10 9 6 5 6 9 2 8 1 2 2 5 6 6 3 3 7 10 10 1 6 3\\r\\n', 'output': ['10']}, {'input': '1\\r\\n100 2 100\\r\\n2 1 2 2 1 2 2 1 1 2 2 2 2 2 1 1 1 1 2 1 1 1 2 2 2 1 1 1 2 1 1 1 1 2 1 1 1 1 2 2 2 2 1 2 2 1 2 1 1 1 1 2 2 2 1 1 2 1 2 2 2 2 1 1 1 2 1 1 1 1 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 1 1 1 2 1 2 1 2 2 2 1 2\\r\\n', 'output': ['2']}, {'input': '1\\r\\n100 16 100\\r\\n1 11 2 2 13 8 3 15 8 11 13 1 16 16 3 5 12 10 11 16 1 14 16 8 14 3 15 8 2 8 10 1 16 14 8 4 2 10 3 8 3 5 8 10 4 12 11 8 8 15 16 5 7 6 3 9 15 7 1 14 14 2 13 4 10 6 12 13 9 8 9 2 9 3 2 12 9 3 8 11 14 9 3 3 15 10 12 10 10 16 2 12 13 7 6 7 13 1 14 15\\r\\n', 'output': ['16']}, {'input': '1\\r\\n100 100 50\\r\\n40 23 65 71 63 65 82 49 42 62 80 68 30 97 95 11 19 16 50 33 99 40 100 88 7 52 83 80 68 30 32 40 67 16 45 89 54 88 9 42 40 65 96 97 9 100 53 84 40 40 66 13 47 30 71 14 83 18 35 70 73 52 17 91 87 59 81 5 84 94 1 9 23 90 32 91 69 77 38 84 38 74 6 26 100 47 39 23 84 90 67 86 67 80 31 51 71 97 69 68\\r\\n', 'output': ['34']}, {'input': '1\\r\\n100 100 33\\r\\n78 92 82 75 58 98 94 39 38 88 89 78 2 95 53 47 74 95 14 92 49 44 8 67 31 77 90 20 16 92 19 32 26 75 81 4 79 46 21 44 5 19 64 72 13 9 74 58 84 62 70 86 77 4 39 97 1 67 98 99 89 34 29 13 24 2 69 68 30 66 77 16 26 49 1 25 89 26 28 25 96 55 51 44 10 7 36 75 12 81 31 46 52 55 48 78 82 95 39 44\\r\\n', 'output': ['28']}, {'input': '1\\r\\n100 1 1\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 20 1\\r\\n10 17 9 8 11 8 8 3 7 20 11 10 7 7 2 13 10 7 7 10 7 8 4 17 20 9 5 18 12 8 3 5 19 1 18 14 9 11 12 11 11 12 12 9 13 8 20 3 8 1 15 20 6 18 8 1 13 11 4 17 12 15 4 4 11 19 18 5 2 12 15 20 5 8 11 16 14 13 17 14 14 5 6 8 8 13 6 3 18 14 8 14 11 11 9 4 18 1 16 6\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 20 2\\r\\n18 1 3 1 13 1 3 15 3 2 7 14 1 8 1 10 1 1 9 18 11 6 9 12 17 5 6 7 13 14 9 4 6 14 7 14 19 6 13 10 7 2 17 3 10 11 11 7 2 4 9 12 11 6 20 20 4 16 7 10 8 4 19 18 2 4 6 5 20 2 12 6 20 20 18 7 11 20 10 2 8 5 16 4 19 17 18 9 7 9 13 10 3 12 18 2 6 12 18 10\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 100 1\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 100 2\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['2']}, {'input': '1\\r\\n100 100 10\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['10']}, {'input': '1\\r\\n100 100 99\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['99']}, {'input': '1\\r\\n100 100 100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['100']}, {'input': '1\\r\\n100 100 1\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 100 2\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['2']}, {'input': '1\\r\\n100 100 3\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['3']}, {'input': '1\\r\\n100 100 99\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['99']}]", "source_code": "import java.util.*;\npublic class Main{\n    \n    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int[][] a = new int[n][2];\n        int[] count = new int[101];\n        int[][] dp = new int[n][2];\n        \n        for(int i=0;i<n;i++){\n            a[i][0] = in.nextInt();\n            a[i][1] = in.nextInt();\n            count[a[i][0]]++;\n            count[a[i][1]]++;\n        }\n        \n        for(int i=0;i<n-1;i++){\n            dp[i][0] = count[a[i][0]];\n            dp[i][1] = count[a[i][1]];\n        }\n        \n        dp[n-1][0] = count[a[n-1][0]];\n        dp[n-1][1] = 1;\n        \n        for(int i=n-2;i>=0;i--){\n            if(dp[i+1][0]>0) dp[i][0] += dp[i+1][0];\n            if(dp[i+1][1]>0) dp[i][1] += dp[i+1][1];\n        }\n        \n        for(int i=0;i<n;i++){\n            for(int j=0;j<2;j++){\n                int c = 0;\n                while(a[i][j] == a[c][j]) c++;\n                int min = Math.min(dp[c][0], dp[c][1]);\n                min = Math.min(min, j+1);\n                System.out.print(min+\" \");\n            }\n        }\n    }\n}"}
{"src_uid": "56da4ec7cd849c4330d188d8c9bd6094", "id": 62, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1300, "testcases": "[{'input': '4\\r\\n5 2 2\\r\\n1 2 1 2 1\\r\\n9 3 3\\r\\n3 3 3 2 2 2 1 1 1\\r\\n4 10 4\\r\\n10 8 6 4\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n', 'output': ['2\\r\\n1\\r\\n4\\r\\n5', '2\\n1\\n4\\n5']}, {'input': '10000\\r\\n4 4 1\\r\\n4 3 3 1\\r\\n9 1 7\\r\\n1 1 1 1 1 1 1 1 1\\r\\n1 7 1\\r\\n4\\r\\n3 7 3\\r\\n7 1 2\\r\\n3 6 2\\r\\n4 5 6\\r\\n8 7 3\\r\\n6 3 5 7 3 6 4 3\\r\\n5 6 2\\r\\n2 3 6 3 4\\r\\n1 7 1\\r\\n5\\r\\n4 4 1\\r\\n3 1 3 1\\r\\n7 2 4\\r\\n2 1 1 1 1 2 1\\r\\n4 5 1\\r\\n1 5 4 1\\r\\n9 10 1\\r\\n7 4 4 4 6 3 7 10 7\\r\\n3 8 1\\r\\n6 4 3\\r\\n1 7 1\\r\\n4\\r\\n5 7 5\\r\\n7 5 3 5 5\\r\\n5 10 2\\r\\n5 10 9 10 1\\r\\n2 2 1\\r\\n2 2\\r\\n6 10 4\\r\\n4 10 5 1 7 2\\r\\n7 10 2\\r\\n8 5 7 3 2 2 4\\r\\n2 9 1\\r\\n8 3\\r\\n3 10 3\\r\\n1 2 9\\r\\n10 9 1\\r\\n7 2 4 3 4 1 5 8 8 7\\r\\n9 4 5\\r\\n2 2 3 2 4 4 1 1 2\\r\\n6 9 2\\r\\n6 2 3 1 9 9\\r\\n5 8 1\\r\\n5 2 1 5 8\\r\\n9 5 3\\r\\n3 1 5 2 1 2 2 4 1\\r\\n6 10 1\\r\\n8 6 4 10 10 10\\r\\n...', 'output': ['1\\r\\n1\\r\\n1\\r\\n3\\r\\n2\\r\\n3\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n2\\r\\n1\\r\\n4\\r\\n1\\r\\n1\\r\\n3\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n5\\r\\n1\\r\\n1\\r\\n3\\r\\n4\\r\\n1\\r\\n3\\r\\n3\\r\\n1\\r\\n2\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n5\\r\\n4\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n2\\r\\n2\\r\\n3\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n4\\r\\n2\\r\\n2\\r\\n3\\r\\n5\\r\\n2\\r\\n1\\r\\n5\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n4\\r\\n1\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n2\\r\\n4\\r\\n1\\r\\n3\\r\\n3\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n3\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n4\\r\\n1\\r\\n1\\r\\n3\\r\\n3\\r\\n3\\r\\n1\\r\\n1\\r\\n2\\r\\n2\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n4\\r\\n6\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n4\\r\\n1\\r\\n3\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n2...']}, {'input': '10000\\r\\n25 2 1\\r\\n1 2 2 1 2 2 2 2 2 2 2 1 1 1 2 2 2 1 2 2 1 1 1 2 1\\r\\n24 27 19\\r\\n19 2 15 17 4 8 20 13 1 2 19 2 6 9 22 16 17 20 23 25 26 8 6 24\\r\\n4 10 1\\r\\n10 7 7 9\\r\\n11 15 1\\r\\n2 2 6 3 3 5 11 15 8 12 3\\r\\n19 20 3\\r\\n10 8 8 9 8 6 1 8 20 10 9 18 20 16 4 12 9 10 2\\r\\n22 8 11\\r\\n5 3 5 1 7 7 2 4 6 4 5 8 6 1 3 7 2 7 2 5 7 6\\r\\n16 4 6\\r\\n1 1 4 3 2 1 2 1 3 3 2 3 3 3 3 2\\r\\n19 25 5\\r\\n14 18 2 11 14 12 15 16 21 11 16 12 17 7 18 23 2 3 4\\r\\n26 16 1\\r\\n2 14 12 14 5 6 5 6 15 11 9 7 15 3 3 4 8 13 1 4 4 8 3 1 12 9\\r\\n19 13 9\\r\\n11 2 3 13 6 8 7 2 6 3 9 7 1...', 'output': ['1\\r\\n14\\r\\n1\\r\\n1\\r\\n2\\r\\n7\\r\\n2\\r\\n4\\r\\n1\\r\\n6\\r\\n7\\r\\n2\\r\\n7\\r\\n9\\r\\n4\\r\\n3\\r\\n2\\r\\n8\\r\\n4\\r\\n6\\r\\n1\\r\\n4\\r\\n4\\r\\n4\\r\\n3\\r\\n3\\r\\n2\\r\\n5\\r\\n9\\r\\n1\\r\\n3\\r\\n3\\r\\n3\\r\\n1\\r\\n7\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n6\\r\\n1\\r\\n6\\r\\n1\\r\\n4\\r\\n2\\r\\n2\\r\\n5\\r\\n5\\r\\n5\\r\\n4\\r\\n5\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n6\\r\\n2\\r\\n1\\r\\n3\\r\\n8\\r\\n6\\r\\n2\\r\\n1\\r\\n4\\r\\n1\\r\\n17\\r\\n2\\r\\n11\\r\\n1\\r\\n8\\r\\n1\\r\\n4\\r\\n8\\r\\n5\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n4\\r\\n2\\r\\n10\\r\\n4\\r\\n1\\r\\n8\\r\\n5\\r\\n7\\r\\n1\\r\\n11\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n11\\r\\n6\\r\\n1\\r\\n4\\r\\n6\\r\\n16\\r\\n1\\r\\n12\\r\\n8\\r\\n4\\r\\n5\\r\\n1\\r\\n2\\r\\n6\\r\\n12\\r\\n2\\r\\n3\\r\\n3\\r\\n2\\r\\n2\\r\\n1\\r\\n6\\r\\n4\\r\\n13\\r\\n2\\r\\n11\\r\\n3\\r\\n4\\r\\n13\\r\\n1\\r\\n7\\r\\n5\\r\\n5\\r\\n11\\r\\n4\\r\\n3\\r\\n6\\r\\n6\\r\\n2\\r\\n1\\r\\n1\\r\\n9\\r\\n4\\r\\n9\\r\\n9\\r\\n13\\r\\n2\\r\\n5\\r\\n1\\r\\n1\\r\\n14\\r\\n5\\r\\n1\\r\\n10\\r\\n2\\r\\n2\\r\\n6\\r\\n1\\r\\n4\\r\\n1\\r\\n1\\r\\n2\\r\\n7\\r\\n1\\r\\n3\\r\\n1\\r\\n6\\r\\n2\\r\\n2\\r\\n4\\r\\n...']}, {'input': '1\\r\\n200000 50000 100000\\r\\n43620 16520 24169 29319 35300 6092 8697 40998 15469 16541 45920 21696 48009 37549 35849 6966 45977 49376 47590 10302 36127 14270 35645 20850 15907 32338 30934 35216 32431 48365 11343 28651 42051 4611 3208 48408 8001 13308 3528 34450 48338 44549 214 35127 25599 21629 13920 49465 30152 33128 22087 20254 29457 18159 30113 18369 20976 35278 49478 42126 44353 31877 49348 4138 43970 17640 12092 38376 23575 4559 13202 45493 27767 29431 14560 2957 25933 37550 11475 36643 29624 38619 38461 3...', 'output': ['43168']}, {'input': '1\\r\\n200000 1 100000\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1...', 'output': ['1']}, {'input': '1\\r\\n200000 10 100000\\r\\n1 9 2 9 4 1 9 4 2 6 4 10 5 2 9 6 4 3 7 5 10 2 6 7 5 8 7 2 4 1 1 1 3 3 7 10 2 6 4 5 4 10 10 2 6 2 1 4 8 3 1 2 5 8 3 4 10 8 7 5 9 5 5 5 8 4 1 10 8 7 6 9 7 7 5 7 9 4 8 10 1 5 9 5 7 7 6 9 5 4 3 5 7 10 5 6 3 2 10 3 2 10 3 10 5 3 5 4 10 10 2 9 3 3 6 2 3 6 5 1 9 1 5 6 6 9 1 9 8 3 9 7 1 3 2 7 6 5 5 8 3 10 5 1 4 9 3 4 1 9 8 2 8 5 2 6 6 3 10 7 1 2 9 3 3 7 6 9 7 2 9 9 1 8 8 2 5 2 4 8 1 8 7 3 6 5 3 10 4 2 10 9 5 5 8 6 9 1 1 8 9 2 7 7 1 10 8 10 6 5 5 2 10 10 8 3 8 9 3 7 1 2 8 6 5 6 9 4 6 1 3 4 6 3 ...', 'output': ['10']}, {'input': '1\\r\\n200000 100 20000\\r\\n56 54 36 40 73 78 52 47 66 20 77 100 36 93 23 31 59 97 74 29 58 88 27 97 37 81 15 20 89 75 8 61 52 78 1 26 86 7 63 46 21 74 39 72 38 77 68 82 97 84 79 96 65 47 42 45 70 66 28 58 81 34 81 14 52 73 75 74 87 65 82 63 56 86 56 99 32 24 18 20 60 25 97 77 28 49 53 7 35 21 10 74 34 95 30 5 4 77 69 49 81 2 5 50 32 72 50 9 7 44 15 80 70 45 39 69 12 5 61 84 33 10 88 32 94 91 24 22 49 88 99 38 30 30 1 96 27 60 4 84 89 3 21 70 21 39 69 11 28 7 17 39 71 30 19 33 91 93 26 45 6 86 61 57 80 91 5 28 64...', 'output': ['100']}, {'input': '1\\r\\n200000 999996 100000\\r\\n1 6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96 101 106 111 116 121 126 131 136 141 146 151 156 161 166 171 176 181 186 191 196 201 206 211 216 221 226 231 236 241 246 251 256 261 266 271 276 281 286 291 296 301 306 311 316 321 326 331 336 341 346 351 356 361 366 371 376 381 386 391 396 401 406 411 416 421 426 431 436 441 446 451 456 461 466 471 476 481 486 491 496 501 506 511 516 521 526 531 536 541 546 551 556 561 566 571 576 581 586 591 596 601 606 611 616 621 626 631 ...', 'output': ['100000']}, {'input': '1\\r\\n200000 1000000 200000\\r\\n1000000 999995 999990 999985 999980 999975 999970 999965 999960 999955 999950 999945 999940 999935 999930 999925 999920 999915 999910 999905 999900 999895 999890 999885 999880 999875 999870 999865 999860 999855 999850 999845 999840 999835 999830 999825 999820 999815 999810 999805 999800 999795 999790 999785 999780 999775 999770 999765 999760 999755 999750 999745 999740 999735 999730 999725 999720 999715 999710 999705 999700 999695 999690 999685 999680 999675 999670 999665 999660 9...', 'output': ['200000']}, {'input': '1\\r\\n200000 1000 100000\\r\\n620 192 107 955 564 521 642 381 695 916 549 124 253 339 472 162 131 282 959 678 207 154 876 995 734 39 412 999 815 355 18 165 430 993 27 603 666 794 993 261 70 259 289 24 684 893 292 512 941 852 393 42 314 25 25 970 671 168 914 583 666 819 637 194 512 972 681 283 401 767 709 892 607 366 529 164 211 563 726 197 72 746 537 94 150 347 365 281 320 276 734 646 118 894 974 967 68 260 563 746 985 119 431 778 249 428 511 158 692 99 125 553 877 954 302 832 611 137 181 895 51 860 150 916 284 6...', 'output': ['1000']}, {'input': '1\\r\\n200000 100000 100000\\r\\n8647 17914 36109 89778 78993 55133 74489 27482 57585 98271 77889 47476 26434 78910 72270 37433 77590 94218 26776 81236 7857 52297 75984 96580 13420 37206 57335 15966 38003 44862 95973 906 76808 94689 51811 80545 49598 60279 5137 72373 67166 84168 43937 97833 79109 97555 66522 57877 67492 14888 45878 78979 86655 76238 22212 32085 91951 14238 83686 38492 81248 57509 57652 11778 87283 25990 28664 96610 45117 5398 15632 33866 83494 31775 58512 71264 17548 46621 80189 6618 19549 76932 5...', 'output': ['62936']}, {'input': '1\\r\\n200000 1000000 200000\\r\\n470364 225896 287028 539970 507065 834358 221882 79921 952537 675938 918775 600012 658158 451805 585924 200704 727836 877423 589359 95563 175804 737263 148093 693378 834010 564940 1442 668171 699064 243399 367947 932004 332361 500470 581460 457946 747126 822659 687570 763411 734109 359915 138955 532165 905740 554112 955385 526332 377610 359080 408012 320280 805135 892507 484900 811596 483912 864488 223962 260705 468 390385 483192 247665 841481 651754 428156 822508 897711 270750 80...', 'output': ['181244']}, {'input': '1\\r\\n200000 1000000 20000\\r\\n533722 392695 889264 562461 855026 138921 815803 461194 257052 45665 831069 886688 652160 561837 516684 283787 634185 14587 677319 708000 762661 815073 509775 30098 637512 723030 819497 202814 848040 970165 882077 948960 348866 282945 296186 444252 966548 552732 274192 16694 895137 572174 815092 350234 717680 652165 545471 904085 37325 47183 763599 162009 423431 10401 212741 944445 276272 304020 763078 730235 106465 974498 982395 46321 795699 969837 135760 488480 863430 883321 2125...', 'output': ['19770']}, {'input': '1\\r\\n200000 1 1\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...', 'output': ['1']}, {'input': '1\\r\\n200000 1000000 1\\r\\n780737 872203 852770 369033 859738 846341 851594 954282 684383 209632 798015 36250 376958 793324 203798 459743 621399 649416 45468 297431 261695 620652 512718 793583 992894 200416 98975 368684 265169 695427 834486 116518 889256 354565 349037 240328 345769 475500 788435 452690 948139 738003 87787 656919 874748 293479 823979 451391 310748 446952 936638 761542 417856 248622 69762 416315 588495 748898 540043 217410 102504 122304 887006 865619 229595 6236 653431 864185 887339 426521 687555 ...', 'output': ['1']}, {'input': '1\\r\\n200000 999996 1\\r\\n1 6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96 101 106 111 116 121 126 131 136 141 146 151 156 161 166 171 176 181 186 191 196 201 206 211 216 221 226 231 236 241 246 251 256 261 266 271 276 281 286 291 296 301 306 311 316 321 326 331 336 341 346 351 356 361 366 371 376 381 386 391 396 401 406 411 416 421 426 431 436 441 446 451 456 461 466 471 476 481 486 491 496 501 506 511 516 521 526 531 536 541 546 551 556 561 566 571 576 581 586 591 596 601 606 611 616 621 626 631 636 6...', 'output': ['1']}, {'input': '1\\r\\n200000 999996 199999\\r\\n1 6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96 101 106 111 116 121 126 131 136 141 146 151 156 161 166 171 176 181 186 191 196 201 206 211 216 221 226 231 236 241 246 251 256 261 266 271 276 281 286 291 296 301 306 311 316 321 326 331 336 341 346 351 356 361 366 371 376 381 386 391 396 401 406 411 416 421 426 431 436 441 446 451 456 461 466 471 476 481 486 491 496 501 506 511 516 521 526 531 536 541 546 551 556 561 566 571 576 581 586 591 596 601 606 611 616 621 626 631 ...', 'output': ['199999']}, {'input': '10000\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 100000...', 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1...']}, {'input': '10000\\r\\n20 1000000 5\\r\\n50000 100000 150000 200000 250000 300000 350000 400000 450000 500000 550000 600000 650000 700000 750000 800000 850000 900000 950000 1000000\\r\\n20 1000000 5\\r\\n50000 100000 150000 200000 250000 300000 350000 400000 450000 500000 550000 600000 650000 700000 750000 800000 850000 900000 950000 1000000\\r\\n20 1000000 5\\r\\n50000 100000 150000 200000 250000 300000 350000 400000 450000 500000 550000 600000 650000 700000 750000 800000 850000 900000 950000 1000000\\r\\n20 1000000 5\\r\\n50000 100000 150000 20000...', 'output': ['5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5...']}, {'input': '10000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000...', 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1...']}, {'input': '10000\\r\\n20 1000000 6\\r\\n42 18468 6335 26501 19170 15725 11479 29359 26963 24465 5706 28146 23282 16828 9962 492 2996 11943 4828 5437\\r\\n20 1000000 6\\r\\n32392 14605 3903 154 293 12383 17422 18717 19719 19896 5448 21727 14772 11539 1870 19913 25668 26300 17036 9895\\r\\n20 1000000 6\\r\\n28704 23812 31323 30334 17674 4665 15142 7712 28254 6869 25548 27645 32663 32758 20038 12860 8724 9742 27530 779\\r\\n20 1000000 6\\r\\n12317 3036 22191 1843 289 30107 9041 8943 19265 22649 27447 23806 15891 6730 24371 15351 15007 31102 24394 3549...', 'output': ['6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6...']}, {'input': '10000\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 ...', 'output': ['5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5...']}, {'input': '1\\r\\n6969 100 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...', 'output': ['1']}, {'input': '10000\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n...', 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1...']}, {'input': '30\\r\\n4 4 1\\r\\n3 3 1 2\\r\\n4 4 1\\r\\n4 1 4 1\\r\\n1 1 1\\r\\n1\\r\\n3 2 1\\r\\n2 1 2\\r\\n4 4 2\\r\\n3 2 2 2\\r\\n4 2 4\\r\\n1 2 2 2\\r\\n1 4 1\\r\\n4\\r\\n2 3 1\\r\\n2 3\\r\\n2 2 1\\r\\n2 2\\r\\n4 4 2\\r\\n1 2 4 2\\r\\n4 4 1\\r\\n2 4 4 3\\r\\n4 3 1\\r\\n1 3 1 3\\r\\n1 1 1\\r\\n1\\r\\n2 2 2\\r\\n2 1\\r\\n2 4 1\\r\\n1 4\\r\\n2 4 1\\r\\n3 4\\r\\n1 2 1\\r\\n1\\r\\n2 4 2\\r\\n2 1\\r\\n3 1 2\\r\\n1 1 1\\r\\n2 4 1\\r\\n1 4\\r\\n2 3 1\\r\\n3 3\\r\\n4 2 2\\r\\n2 1 2 2\\r\\n3 2 2\\r\\n2 2 1\\r\\n4 3 1\\r\\n2 2 1 2\\r\\n2 3 1\\r\\n1 3\\r\\n4 4 4\\r\\n3 2 2 3\\r\\n1 4 1\\r\\n1\\r\\n2 1 2\\r\\n1 1\\r\\n1 4 1\\r\\n4\\r\\n2 3 1\\r\\n3 3\\r\\n', 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n1', '1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1']}, {'input': '15\\r\\n6 4 6\\r\\n2 3 2 3 4 2\\r\\n7 8 4\\r\\n5 6 2 7 7 3 3\\r\\n8 1 5\\r\\n1 1 1 1 1 1 1 1\\r\\n1 5 1\\r\\n1\\r\\n2 7 2\\r\\n6 7\\r\\n6 8 4\\r\\n8 5 4 1 6 6\\r\\n1 8 1\\r\\n2\\r\\n3 8 2\\r\\n2 3 3\\r\\n2 2 1\\r\\n1 1\\r\\n8 2 5\\r\\n2 2 1 1 1 1 1 1\\r\\n7 6 4\\r\\n2 4 1 1 2 4 3\\r\\n8 8 2\\r\\n6 5 6 1 3 1 2 8\\r\\n5 6 1\\r\\n6 1 2 6 2\\r\\n6 5 5\\r\\n1 5 2 4 4 5\\r\\n7 1 6\\r\\n1 1 1 1 1 1 1\\r\\n', 'output': ['3\\n2\\n1\\n1\\n2\\n3\\n1\\n1\\n1\\n1\\n3\\n2\\n1\\n3\\n1', '3\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n2\\r\\n1\\r\\n3\\r\\n1']}, {'input': '10\\r\\n6 9 4\\r\\n8 8 2 5 8 9\\r\\n5 3 4\\r\\n1 3 1 2 1\\r\\n10 5 10\\r\\n3 2 4 2 1 1 2 2 3 4\\r\\n7 7 3\\r\\n4 6 2 6 4 5 2\\r\\n9 9 6\\r\\n4 6 7 2 5 5 7 4 8\\r\\n6 5 4\\r\\n2 3 2 5 5 5\\r\\n8 3 4\\r\\n2 3 2 3 2 1 1 3\\r\\n10 6 9\\r\\n6 2 4 1 4 5 5 2 1 1\\r\\n8 7 2\\r\\n4 4 5 6 2 5 3 4\\r\\n1 9 1\\r\\n3\\r\\n', 'output': ['3\\r\\n3\\r\\n4\\r\\n2\\r\\n4\\r\\n2\\r\\n2\\r\\n4\\r\\n1\\r\\n1', '3\\n3\\n4\\n2\\n4\\n2\\n2\\n4\\n1\\n1']}, {'input': '5\\r\\n17 10 1\\r\\n8 5 10 7 4 7 2 9 8 10 7 2 6 5 1 1 5\\r\\n22 13 5\\r\\n1 9 12 4 6 1 8 10 1 11 1 2 1 6 8 12 11 8 10 6 2 12\\r\\n13 25 7\\r\\n22 7 19 12 7 17 7 6 22 19 5 5 23\\r\\n1 6 1\\r\\n6\\r\\n1 15 1\\r\\n7\\r\\n', 'output': ['1\\n3\\n5\\n1\\n1', '1\\r\\n3\\r\\n5\\r\\n1\\r\\n1']}, {'input': '1\\r\\n100 90 100\\r\\n8 39 60 46 68 2 42 45 7 54 89 78 16 59 21 29 5 30 20 12 64 42 34 33 13 17 55 30 54 31 23 27 38 36 2 49 45 43 47 55 4 6 55 38 60 16 34 86 67 76 55 86 39 62 12 58 74 51 10 31 38 85 50 61 48 35 69 24 64 53 4 19 15 35 28 22 88 3 25 60 9 40 67 47 26 57 58 61 65 21 76 4 15 35 37 49 62 45 81 32\\r\\n', 'output': ['67']}, {'input': '1\\r\\n100 100 100\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['100']}, {'input': '1\\r\\n100 50 100\\r\\n22 28 34 29 43 8 12 12 4 29 36 38 22 5 19 38 4 41 20 33 39 11 2 40 42 8 33 23 20 47 45 30 47 33 27 23 50 26 30 43 8 3 4 38 46 32 20 19 10 3 18 29 21 19 37 30 12 38 27 44 24 39 25 18 50 44 37 22 39 41 18 26 37 40 40 16 38 9 12 36 27 31 45 47 31 31 29 48 25 7 29 24 10 2 8 3 36 48 8 9\\r\\n', 'output': ['42']}, {'input': '1\\r\\n100 1 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 10 100\\r\\n9 2 2 3 5 2 2 3 4 9 5 3 6 2 1 4 4 8 6 2 3 10 4 1 5 2 8 8 3 9 2 7 2 3 4 2 2 8 9 7 10 3 7 7 4 4 8 8 9 7 1 8 10 3 6 8 1 9 4 6 5 6 9 2 9 6 7 10 5 8 7 10 6 1 9 2 10 10 10 9 6 5 6 9 2 8 1 2 2 5 6 6 3 3 7 10 10 1 6 3\\r\\n', 'output': ['10']}, {'input': '1\\r\\n100 2 100\\r\\n2 1 2 2 1 2 2 1 1 2 2 2 2 2 1 1 1 1 2 1 1 1 2 2 2 1 1 1 2 1 1 1 1 2 1 1 1 1 2 2 2 2 1 2 2 1 2 1 1 1 1 2 2 2 1 1 2 1 2 2 2 2 1 1 1 2 1 1 1 1 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 1 1 1 2 1 2 1 2 2 2 1 2\\r\\n', 'output': ['2']}, {'input': '1\\r\\n100 16 100\\r\\n1 11 2 2 13 8 3 15 8 11 13 1 16 16 3 5 12 10 11 16 1 14 16 8 14 3 15 8 2 8 10 1 16 14 8 4 2 10 3 8 3 5 8 10 4 12 11 8 8 15 16 5 7 6 3 9 15 7 1 14 14 2 13 4 10 6 12 13 9 8 9 2 9 3 2 12 9 3 8 11 14 9 3 3 15 10 12 10 10 16 2 12 13 7 6 7 13 1 14 15\\r\\n', 'output': ['16']}, {'input': '1\\r\\n100 100 50\\r\\n40 23 65 71 63 65 82 49 42 62 80 68 30 97 95 11 19 16 50 33 99 40 100 88 7 52 83 80 68 30 32 40 67 16 45 89 54 88 9 42 40 65 96 97 9 100 53 84 40 40 66 13 47 30 71 14 83 18 35 70 73 52 17 91 87 59 81 5 84 94 1 9 23 90 32 91 69 77 38 84 38 74 6 26 100 47 39 23 84 90 67 86 67 80 31 51 71 97 69 68\\r\\n', 'output': ['34']}, {'input': '1\\r\\n100 100 33\\r\\n78 92 82 75 58 98 94 39 38 88 89 78 2 95 53 47 74 95 14 92 49 44 8 67 31 77 90 20 16 92 19 32 26 75 81 4 79 46 21 44 5 19 64 72 13 9 74 58 84 62 70 86 77 4 39 97 1 67 98 99 89 34 29 13 24 2 69 68 30 66 77 16 26 49 1 25 89 26 28 25 96 55 51 44 10 7 36 75 12 81 31 46 52 55 48 78 82 95 39 44\\r\\n', 'output': ['28']}, {'input': '1\\r\\n100 1 1\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 20 1\\r\\n10 17 9 8 11 8 8 3 7 20 11 10 7 7 2 13 10 7 7 10 7 8 4 17 20 9 5 18 12 8 3 5 19 1 18 14 9 11 12 11 11 12 12 9 13 8 20 3 8 1 15 20 6 18 8 1 13 11 4 17 12 15 4 4 11 19 18 5 2 12 15 20 5 8 11 16 14 13 17 14 14 5 6 8 8 13 6 3 18 14 8 14 11 11 9 4 18 1 16 6\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 20 2\\r\\n18 1 3 1 13 1 3 15 3 2 7 14 1 8 1 10 1 1 9 18 11 6 9 12 17 5 6 7 13 14 9 4 6 14 7 14 19 6 13 10 7 2 17 3 10 11 11 7 2 4 9 12 11 6 20 20 4 16 7 10 8 4 19 18 2 4 6 5 20 2 12 6 20 20 18 7 11 20 10 2 8 5 16 4 19 17 18 9 7 9 13 10 3 12 18 2 6 12 18 10\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 100 1\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 100 2\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['2']}, {'input': '1\\r\\n100 100 10\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['10']}, {'input': '1\\r\\n100 100 99\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['99']}, {'input': '1\\r\\n100 100 100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['100']}, {'input': '1\\r\\n100 100 1\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 100 2\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['2']}, {'input': '1\\r\\n100 100 3\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['3']}, {'input': '1\\r\\n100 100 99\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['99']}]", "source_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport static java.util.Collections.reverseOrder;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class HelloWorld {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int t = scanner.nextInt();\n        \n        while (t > 0) {\n            int n = scanner.nextInt();\n            int k = scanner.nextInt();\n            int d = scanner.nextInt();\n            int[] days = new int[n];\n            for (int i = 0; i < n; ++i) {\n                days[i] = scanner.nextInt();\n            }\n            int start = 0;\n            int max = 1;\n            int maxIdx = 0;\n            while (start < n) {\n                int counter = 0;\n                while (start < n && days[start] == days[start + 1]) {\n                    start++;\n                    counter++;\n                }\n                if (counter >= d) {\n                    if (max < counter) {\n                        max = counter;\n                        maxIdx = days[start - counter];\n                    }\n                }\n                start++;\n            }\n            System.out.println(k);\n            t--;\n        }\n    }\n}\n"}
{"src_uid": "56da4ec7cd849c4330d188d8c9bd6094", "id": 62, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1300, "testcases": "[{'input': '4\\r\\n5 2 2\\r\\n1 2 1 2 1\\r\\n9 3 3\\r\\n3 3 3 2 2 2 1 1 1\\r\\n4 10 4\\r\\n10 8 6 4\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n', 'output': ['2\\r\\n1\\r\\n4\\r\\n5', '2\\n1\\n4\\n5']}, {'input': '10000\\r\\n4 4 1\\r\\n4 3 3 1\\r\\n9 1 7\\r\\n1 1 1 1 1 1 1 1 1\\r\\n1 7 1\\r\\n4\\r\\n3 7 3\\r\\n7 1 2\\r\\n3 6 2\\r\\n4 5 6\\r\\n8 7 3\\r\\n6 3 5 7 3 6 4 3\\r\\n5 6 2\\r\\n2 3 6 3 4\\r\\n1 7 1\\r\\n5\\r\\n4 4 1\\r\\n3 1 3 1\\r\\n7 2 4\\r\\n2 1 1 1 1 2 1\\r\\n4 5 1\\r\\n1 5 4 1\\r\\n9 10 1\\r\\n7 4 4 4 6 3 7 10 7\\r\\n3 8 1\\r\\n6 4 3\\r\\n1 7 1\\r\\n4\\r\\n5 7 5\\r\\n7 5 3 5 5\\r\\n5 10 2\\r\\n5 10 9 10 1\\r\\n2 2 1\\r\\n2 2\\r\\n6 10 4\\r\\n4 10 5 1 7 2\\r\\n7 10 2\\r\\n8 5 7 3 2 2 4\\r\\n2 9 1\\r\\n8 3\\r\\n3 10 3\\r\\n1 2 9\\r\\n10 9 1\\r\\n7 2 4 3 4 1 5 8 8 7\\r\\n9 4 5\\r\\n2 2 3 2 4 4 1 1 2\\r\\n6 9 2\\r\\n6 2 3 1 9 9\\r\\n5 8 1\\r\\n5 2 1 5 8\\r\\n9 5 3\\r\\n3 1 5 2 1 2 2 4 1\\r\\n6 10 1\\r\\n8 6 4 10 10 10\\r\\n...', 'output': ['1\\r\\n1\\r\\n1\\r\\n3\\r\\n2\\r\\n3\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n2\\r\\n1\\r\\n4\\r\\n1\\r\\n1\\r\\n3\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n5\\r\\n1\\r\\n1\\r\\n3\\r\\n4\\r\\n1\\r\\n3\\r\\n3\\r\\n1\\r\\n2\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n5\\r\\n4\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n2\\r\\n2\\r\\n3\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n4\\r\\n2\\r\\n2\\r\\n3\\r\\n5\\r\\n2\\r\\n1\\r\\n5\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n4\\r\\n1\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n2\\r\\n4\\r\\n1\\r\\n3\\r\\n3\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n3\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n4\\r\\n1\\r\\n1\\r\\n3\\r\\n3\\r\\n3\\r\\n1\\r\\n1\\r\\n2\\r\\n2\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n4\\r\\n6\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n4\\r\\n1\\r\\n3\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n2...']}, {'input': '10000\\r\\n25 2 1\\r\\n1 2 2 1 2 2 2 2 2 2 2 1 1 1 2 2 2 1 2 2 1 1 1 2 1\\r\\n24 27 19\\r\\n19 2 15 17 4 8 20 13 1 2 19 2 6 9 22 16 17 20 23 25 26 8 6 24\\r\\n4 10 1\\r\\n10 7 7 9\\r\\n11 15 1\\r\\n2 2 6 3 3 5 11 15 8 12 3\\r\\n19 20 3\\r\\n10 8 8 9 8 6 1 8 20 10 9 18 20 16 4 12 9 10 2\\r\\n22 8 11\\r\\n5 3 5 1 7 7 2 4 6 4 5 8 6 1 3 7 2 7 2 5 7 6\\r\\n16 4 6\\r\\n1 1 4 3 2 1 2 1 3 3 2 3 3 3 3 2\\r\\n19 25 5\\r\\n14 18 2 11 14 12 15 16 21 11 16 12 17 7 18 23 2 3 4\\r\\n26 16 1\\r\\n2 14 12 14 5 6 5 6 15 11 9 7 15 3 3 4 8 13 1 4 4 8 3 1 12 9\\r\\n19 13 9\\r\\n11 2 3 13 6 8 7 2 6 3 9 7 1...', 'output': ['1\\r\\n14\\r\\n1\\r\\n1\\r\\n2\\r\\n7\\r\\n2\\r\\n4\\r\\n1\\r\\n6\\r\\n7\\r\\n2\\r\\n7\\r\\n9\\r\\n4\\r\\n3\\r\\n2\\r\\n8\\r\\n4\\r\\n6\\r\\n1\\r\\n4\\r\\n4\\r\\n4\\r\\n3\\r\\n3\\r\\n2\\r\\n5\\r\\n9\\r\\n1\\r\\n3\\r\\n3\\r\\n3\\r\\n1\\r\\n7\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n6\\r\\n1\\r\\n6\\r\\n1\\r\\n4\\r\\n2\\r\\n2\\r\\n5\\r\\n5\\r\\n5\\r\\n4\\r\\n5\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n6\\r\\n2\\r\\n1\\r\\n3\\r\\n8\\r\\n6\\r\\n2\\r\\n1\\r\\n4\\r\\n1\\r\\n17\\r\\n2\\r\\n11\\r\\n1\\r\\n8\\r\\n1\\r\\n4\\r\\n8\\r\\n5\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n4\\r\\n2\\r\\n10\\r\\n4\\r\\n1\\r\\n8\\r\\n5\\r\\n7\\r\\n1\\r\\n11\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n11\\r\\n6\\r\\n1\\r\\n4\\r\\n6\\r\\n16\\r\\n1\\r\\n12\\r\\n8\\r\\n4\\r\\n5\\r\\n1\\r\\n2\\r\\n6\\r\\n12\\r\\n2\\r\\n3\\r\\n3\\r\\n2\\r\\n2\\r\\n1\\r\\n6\\r\\n4\\r\\n13\\r\\n2\\r\\n11\\r\\n3\\r\\n4\\r\\n13\\r\\n1\\r\\n7\\r\\n5\\r\\n5\\r\\n11\\r\\n4\\r\\n3\\r\\n6\\r\\n6\\r\\n2\\r\\n1\\r\\n1\\r\\n9\\r\\n4\\r\\n9\\r\\n9\\r\\n13\\r\\n2\\r\\n5\\r\\n1\\r\\n1\\r\\n14\\r\\n5\\r\\n1\\r\\n10\\r\\n2\\r\\n2\\r\\n6\\r\\n1\\r\\n4\\r\\n1\\r\\n1\\r\\n2\\r\\n7\\r\\n1\\r\\n3\\r\\n1\\r\\n6\\r\\n2\\r\\n2\\r\\n4\\r\\n...']}, {'input': '1\\r\\n200000 50000 100000\\r\\n43620 16520 24169 29319 35300 6092 8697 40998 15469 16541 45920 21696 48009 37549 35849 6966 45977 49376 47590 10302 36127 14270 35645 20850 15907 32338 30934 35216 32431 48365 11343 28651 42051 4611 3208 48408 8001 13308 3528 34450 48338 44549 214 35127 25599 21629 13920 49465 30152 33128 22087 20254 29457 18159 30113 18369 20976 35278 49478 42126 44353 31877 49348 4138 43970 17640 12092 38376 23575 4559 13202 45493 27767 29431 14560 2957 25933 37550 11475 36643 29624 38619 38461 3...', 'output': ['43168']}, {'input': '1\\r\\n200000 1 100000\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1...', 'output': ['1']}, {'input': '1\\r\\n200000 10 100000\\r\\n1 9 2 9 4 1 9 4 2 6 4 10 5 2 9 6 4 3 7 5 10 2 6 7 5 8 7 2 4 1 1 1 3 3 7 10 2 6 4 5 4 10 10 2 6 2 1 4 8 3 1 2 5 8 3 4 10 8 7 5 9 5 5 5 8 4 1 10 8 7 6 9 7 7 5 7 9 4 8 10 1 5 9 5 7 7 6 9 5 4 3 5 7 10 5 6 3 2 10 3 2 10 3 10 5 3 5 4 10 10 2 9 3 3 6 2 3 6 5 1 9 1 5 6 6 9 1 9 8 3 9 7 1 3 2 7 6 5 5 8 3 10 5 1 4 9 3 4 1 9 8 2 8 5 2 6 6 3 10 7 1 2 9 3 3 7 6 9 7 2 9 9 1 8 8 2 5 2 4 8 1 8 7 3 6 5 3 10 4 2 10 9 5 5 8 6 9 1 1 8 9 2 7 7 1 10 8 10 6 5 5 2 10 10 8 3 8 9 3 7 1 2 8 6 5 6 9 4 6 1 3 4 6 3 ...', 'output': ['10']}, {'input': '1\\r\\n200000 100 20000\\r\\n56 54 36 40 73 78 52 47 66 20 77 100 36 93 23 31 59 97 74 29 58 88 27 97 37 81 15 20 89 75 8 61 52 78 1 26 86 7 63 46 21 74 39 72 38 77 68 82 97 84 79 96 65 47 42 45 70 66 28 58 81 34 81 14 52 73 75 74 87 65 82 63 56 86 56 99 32 24 18 20 60 25 97 77 28 49 53 7 35 21 10 74 34 95 30 5 4 77 69 49 81 2 5 50 32 72 50 9 7 44 15 80 70 45 39 69 12 5 61 84 33 10 88 32 94 91 24 22 49 88 99 38 30 30 1 96 27 60 4 84 89 3 21 70 21 39 69 11 28 7 17 39 71 30 19 33 91 93 26 45 6 86 61 57 80 91 5 28 64...', 'output': ['100']}, {'input': '1\\r\\n200000 999996 100000\\r\\n1 6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96 101 106 111 116 121 126 131 136 141 146 151 156 161 166 171 176 181 186 191 196 201 206 211 216 221 226 231 236 241 246 251 256 261 266 271 276 281 286 291 296 301 306 311 316 321 326 331 336 341 346 351 356 361 366 371 376 381 386 391 396 401 406 411 416 421 426 431 436 441 446 451 456 461 466 471 476 481 486 491 496 501 506 511 516 521 526 531 536 541 546 551 556 561 566 571 576 581 586 591 596 601 606 611 616 621 626 631 ...', 'output': ['100000']}, {'input': '1\\r\\n200000 1000000 200000\\r\\n1000000 999995 999990 999985 999980 999975 999970 999965 999960 999955 999950 999945 999940 999935 999930 999925 999920 999915 999910 999905 999900 999895 999890 999885 999880 999875 999870 999865 999860 999855 999850 999845 999840 999835 999830 999825 999820 999815 999810 999805 999800 999795 999790 999785 999780 999775 999770 999765 999760 999755 999750 999745 999740 999735 999730 999725 999720 999715 999710 999705 999700 999695 999690 999685 999680 999675 999670 999665 999660 9...', 'output': ['200000']}, {'input': '1\\r\\n200000 1000 100000\\r\\n620 192 107 955 564 521 642 381 695 916 549 124 253 339 472 162 131 282 959 678 207 154 876 995 734 39 412 999 815 355 18 165 430 993 27 603 666 794 993 261 70 259 289 24 684 893 292 512 941 852 393 42 314 25 25 970 671 168 914 583 666 819 637 194 512 972 681 283 401 767 709 892 607 366 529 164 211 563 726 197 72 746 537 94 150 347 365 281 320 276 734 646 118 894 974 967 68 260 563 746 985 119 431 778 249 428 511 158 692 99 125 553 877 954 302 832 611 137 181 895 51 860 150 916 284 6...', 'output': ['1000']}, {'input': '1\\r\\n200000 100000 100000\\r\\n8647 17914 36109 89778 78993 55133 74489 27482 57585 98271 77889 47476 26434 78910 72270 37433 77590 94218 26776 81236 7857 52297 75984 96580 13420 37206 57335 15966 38003 44862 95973 906 76808 94689 51811 80545 49598 60279 5137 72373 67166 84168 43937 97833 79109 97555 66522 57877 67492 14888 45878 78979 86655 76238 22212 32085 91951 14238 83686 38492 81248 57509 57652 11778 87283 25990 28664 96610 45117 5398 15632 33866 83494 31775 58512 71264 17548 46621 80189 6618 19549 76932 5...', 'output': ['62936']}, {'input': '1\\r\\n200000 1000000 200000\\r\\n470364 225896 287028 539970 507065 834358 221882 79921 952537 675938 918775 600012 658158 451805 585924 200704 727836 877423 589359 95563 175804 737263 148093 693378 834010 564940 1442 668171 699064 243399 367947 932004 332361 500470 581460 457946 747126 822659 687570 763411 734109 359915 138955 532165 905740 554112 955385 526332 377610 359080 408012 320280 805135 892507 484900 811596 483912 864488 223962 260705 468 390385 483192 247665 841481 651754 428156 822508 897711 270750 80...', 'output': ['181244']}, {'input': '1\\r\\n200000 1000000 20000\\r\\n533722 392695 889264 562461 855026 138921 815803 461194 257052 45665 831069 886688 652160 561837 516684 283787 634185 14587 677319 708000 762661 815073 509775 30098 637512 723030 819497 202814 848040 970165 882077 948960 348866 282945 296186 444252 966548 552732 274192 16694 895137 572174 815092 350234 717680 652165 545471 904085 37325 47183 763599 162009 423431 10401 212741 944445 276272 304020 763078 730235 106465 974498 982395 46321 795699 969837 135760 488480 863430 883321 2125...', 'output': ['19770']}, {'input': '1\\r\\n200000 1 1\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...', 'output': ['1']}, {'input': '1\\r\\n200000 1000000 1\\r\\n780737 872203 852770 369033 859738 846341 851594 954282 684383 209632 798015 36250 376958 793324 203798 459743 621399 649416 45468 297431 261695 620652 512718 793583 992894 200416 98975 368684 265169 695427 834486 116518 889256 354565 349037 240328 345769 475500 788435 452690 948139 738003 87787 656919 874748 293479 823979 451391 310748 446952 936638 761542 417856 248622 69762 416315 588495 748898 540043 217410 102504 122304 887006 865619 229595 6236 653431 864185 887339 426521 687555 ...', 'output': ['1']}, {'input': '1\\r\\n200000 999996 1\\r\\n1 6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96 101 106 111 116 121 126 131 136 141 146 151 156 161 166 171 176 181 186 191 196 201 206 211 216 221 226 231 236 241 246 251 256 261 266 271 276 281 286 291 296 301 306 311 316 321 326 331 336 341 346 351 356 361 366 371 376 381 386 391 396 401 406 411 416 421 426 431 436 441 446 451 456 461 466 471 476 481 486 491 496 501 506 511 516 521 526 531 536 541 546 551 556 561 566 571 576 581 586 591 596 601 606 611 616 621 626 631 636 6...', 'output': ['1']}, {'input': '1\\r\\n200000 999996 199999\\r\\n1 6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96 101 106 111 116 121 126 131 136 141 146 151 156 161 166 171 176 181 186 191 196 201 206 211 216 221 226 231 236 241 246 251 256 261 266 271 276 281 286 291 296 301 306 311 316 321 326 331 336 341 346 351 356 361 366 371 376 381 386 391 396 401 406 411 416 421 426 431 436 441 446 451 456 461 466 471 476 481 486 491 496 501 506 511 516 521 526 531 536 541 546 551 556 561 566 571 576 581 586 591 596 601 606 611 616 621 626 631 ...', 'output': ['199999']}, {'input': '10000\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 100000...', 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1...']}, {'input': '10000\\r\\n20 1000000 5\\r\\n50000 100000 150000 200000 250000 300000 350000 400000 450000 500000 550000 600000 650000 700000 750000 800000 850000 900000 950000 1000000\\r\\n20 1000000 5\\r\\n50000 100000 150000 200000 250000 300000 350000 400000 450000 500000 550000 600000 650000 700000 750000 800000 850000 900000 950000 1000000\\r\\n20 1000000 5\\r\\n50000 100000 150000 200000 250000 300000 350000 400000 450000 500000 550000 600000 650000 700000 750000 800000 850000 900000 950000 1000000\\r\\n20 1000000 5\\r\\n50000 100000 150000 20000...', 'output': ['5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5...']}, {'input': '10000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000...', 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1...']}, {'input': '10000\\r\\n20 1000000 6\\r\\n42 18468 6335 26501 19170 15725 11479 29359 26963 24465 5706 28146 23282 16828 9962 492 2996 11943 4828 5437\\r\\n20 1000000 6\\r\\n32392 14605 3903 154 293 12383 17422 18717 19719 19896 5448 21727 14772 11539 1870 19913 25668 26300 17036 9895\\r\\n20 1000000 6\\r\\n28704 23812 31323 30334 17674 4665 15142 7712 28254 6869 25548 27645 32663 32758 20038 12860 8724 9742 27530 779\\r\\n20 1000000 6\\r\\n12317 3036 22191 1843 289 30107 9041 8943 19265 22649 27447 23806 15891 6730 24371 15351 15007 31102 24394 3549...', 'output': ['6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6...']}, {'input': '10000\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 ...', 'output': ['5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5...']}, {'input': '1\\r\\n6969 100 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...', 'output': ['1']}, {'input': '10000\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n...', 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1...']}, {'input': '30\\r\\n4 4 1\\r\\n3 3 1 2\\r\\n4 4 1\\r\\n4 1 4 1\\r\\n1 1 1\\r\\n1\\r\\n3 2 1\\r\\n2 1 2\\r\\n4 4 2\\r\\n3 2 2 2\\r\\n4 2 4\\r\\n1 2 2 2\\r\\n1 4 1\\r\\n4\\r\\n2 3 1\\r\\n2 3\\r\\n2 2 1\\r\\n2 2\\r\\n4 4 2\\r\\n1 2 4 2\\r\\n4 4 1\\r\\n2 4 4 3\\r\\n4 3 1\\r\\n1 3 1 3\\r\\n1 1 1\\r\\n1\\r\\n2 2 2\\r\\n2 1\\r\\n2 4 1\\r\\n1 4\\r\\n2 4 1\\r\\n3 4\\r\\n1 2 1\\r\\n1\\r\\n2 4 2\\r\\n2 1\\r\\n3 1 2\\r\\n1 1 1\\r\\n2 4 1\\r\\n1 4\\r\\n2 3 1\\r\\n3 3\\r\\n4 2 2\\r\\n2 1 2 2\\r\\n3 2 2\\r\\n2 2 1\\r\\n4 3 1\\r\\n2 2 1 2\\r\\n2 3 1\\r\\n1 3\\r\\n4 4 4\\r\\n3 2 2 3\\r\\n1 4 1\\r\\n1\\r\\n2 1 2\\r\\n1 1\\r\\n1 4 1\\r\\n4\\r\\n2 3 1\\r\\n3 3\\r\\n', 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n1', '1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1']}, {'input': '15\\r\\n6 4 6\\r\\n2 3 2 3 4 2\\r\\n7 8 4\\r\\n5 6 2 7 7 3 3\\r\\n8 1 5\\r\\n1 1 1 1 1 1 1 1\\r\\n1 5 1\\r\\n1\\r\\n2 7 2\\r\\n6 7\\r\\n6 8 4\\r\\n8 5 4 1 6 6\\r\\n1 8 1\\r\\n2\\r\\n3 8 2\\r\\n2 3 3\\r\\n2 2 1\\r\\n1 1\\r\\n8 2 5\\r\\n2 2 1 1 1 1 1 1\\r\\n7 6 4\\r\\n2 4 1 1 2 4 3\\r\\n8 8 2\\r\\n6 5 6 1 3 1 2 8\\r\\n5 6 1\\r\\n6 1 2 6 2\\r\\n6 5 5\\r\\n1 5 2 4 4 5\\r\\n7 1 6\\r\\n1 1 1 1 1 1 1\\r\\n', 'output': ['3\\n2\\n1\\n1\\n2\\n3\\n1\\n1\\n1\\n1\\n3\\n2\\n1\\n3\\n1', '3\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n2\\r\\n1\\r\\n3\\r\\n1']}, {'input': '10\\r\\n6 9 4\\r\\n8 8 2 5 8 9\\r\\n5 3 4\\r\\n1 3 1 2 1\\r\\n10 5 10\\r\\n3 2 4 2 1 1 2 2 3 4\\r\\n7 7 3\\r\\n4 6 2 6 4 5 2\\r\\n9 9 6\\r\\n4 6 7 2 5 5 7 4 8\\r\\n6 5 4\\r\\n2 3 2 5 5 5\\r\\n8 3 4\\r\\n2 3 2 3 2 1 1 3\\r\\n10 6 9\\r\\n6 2 4 1 4 5 5 2 1 1\\r\\n8 7 2\\r\\n4 4 5 6 2 5 3 4\\r\\n1 9 1\\r\\n3\\r\\n', 'output': ['3\\r\\n3\\r\\n4\\r\\n2\\r\\n4\\r\\n2\\r\\n2\\r\\n4\\r\\n1\\r\\n1', '3\\n3\\n4\\n2\\n4\\n2\\n2\\n4\\n1\\n1']}, {'input': '5\\r\\n17 10 1\\r\\n8 5 10 7 4 7 2 9 8 10 7 2 6 5 1 1 5\\r\\n22 13 5\\r\\n1 9 12 4 6 1 8 10 1 11 1 2 1 6 8 12 11 8 10 6 2 12\\r\\n13 25 7\\r\\n22 7 19 12 7 17 7 6 22 19 5 5 23\\r\\n1 6 1\\r\\n6\\r\\n1 15 1\\r\\n7\\r\\n', 'output': ['1\\n3\\n5\\n1\\n1', '1\\r\\n3\\r\\n5\\r\\n1\\r\\n1']}, {'input': '1\\r\\n100 90 100\\r\\n8 39 60 46 68 2 42 45 7 54 89 78 16 59 21 29 5 30 20 12 64 42 34 33 13 17 55 30 54 31 23 27 38 36 2 49 45 43 47 55 4 6 55 38 60 16 34 86 67 76 55 86 39 62 12 58 74 51 10 31 38 85 50 61 48 35 69 24 64 53 4 19 15 35 28 22 88 3 25 60 9 40 67 47 26 57 58 61 65 21 76 4 15 35 37 49 62 45 81 32\\r\\n', 'output': ['67']}, {'input': '1\\r\\n100 100 100\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['100']}, {'input': '1\\r\\n100 50 100\\r\\n22 28 34 29 43 8 12 12 4 29 36 38 22 5 19 38 4 41 20 33 39 11 2 40 42 8 33 23 20 47 45 30 47 33 27 23 50 26 30 43 8 3 4 38 46 32 20 19 10 3 18 29 21 19 37 30 12 38 27 44 24 39 25 18 50 44 37 22 39 41 18 26 37 40 40 16 38 9 12 36 27 31 45 47 31 31 29 48 25 7 29 24 10 2 8 3 36 48 8 9\\r\\n', 'output': ['42']}, {'input': '1\\r\\n100 1 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 10 100\\r\\n9 2 2 3 5 2 2 3 4 9 5 3 6 2 1 4 4 8 6 2 3 10 4 1 5 2 8 8 3 9 2 7 2 3 4 2 2 8 9 7 10 3 7 7 4 4 8 8 9 7 1 8 10 3 6 8 1 9 4 6 5 6 9 2 9 6 7 10 5 8 7 10 6 1 9 2 10 10 10 9 6 5 6 9 2 8 1 2 2 5 6 6 3 3 7 10 10 1 6 3\\r\\n', 'output': ['10']}, {'input': '1\\r\\n100 2 100\\r\\n2 1 2 2 1 2 2 1 1 2 2 2 2 2 1 1 1 1 2 1 1 1 2 2 2 1 1 1 2 1 1 1 1 2 1 1 1 1 2 2 2 2 1 2 2 1 2 1 1 1 1 2 2 2 1 1 2 1 2 2 2 2 1 1 1 2 1 1 1 1 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 1 1 1 2 1 2 1 2 2 2 1 2\\r\\n', 'output': ['2']}, {'input': '1\\r\\n100 16 100\\r\\n1 11 2 2 13 8 3 15 8 11 13 1 16 16 3 5 12 10 11 16 1 14 16 8 14 3 15 8 2 8 10 1 16 14 8 4 2 10 3 8 3 5 8 10 4 12 11 8 8 15 16 5 7 6 3 9 15 7 1 14 14 2 13 4 10 6 12 13 9 8 9 2 9 3 2 12 9 3 8 11 14 9 3 3 15 10 12 10 10 16 2 12 13 7 6 7 13 1 14 15\\r\\n', 'output': ['16']}, {'input': '1\\r\\n100 100 50\\r\\n40 23 65 71 63 65 82 49 42 62 80 68 30 97 95 11 19 16 50 33 99 40 100 88 7 52 83 80 68 30 32 40 67 16 45 89 54 88 9 42 40 65 96 97 9 100 53 84 40 40 66 13 47 30 71 14 83 18 35 70 73 52 17 91 87 59 81 5 84 94 1 9 23 90 32 91 69 77 38 84 38 74 6 26 100 47 39 23 84 90 67 86 67 80 31 51 71 97 69 68\\r\\n', 'output': ['34']}, {'input': '1\\r\\n100 100 33\\r\\n78 92 82 75 58 98 94 39 38 88 89 78 2 95 53 47 74 95 14 92 49 44 8 67 31 77 90 20 16 92 19 32 26 75 81 4 79 46 21 44 5 19 64 72 13 9 74 58 84 62 70 86 77 4 39 97 1 67 98 99 89 34 29 13 24 2 69 68 30 66 77 16 26 49 1 25 89 26 28 25 96 55 51 44 10 7 36 75 12 81 31 46 52 55 48 78 82 95 39 44\\r\\n', 'output': ['28']}, {'input': '1\\r\\n100 1 1\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 20 1\\r\\n10 17 9 8 11 8 8 3 7 20 11 10 7 7 2 13 10 7 7 10 7 8 4 17 20 9 5 18 12 8 3 5 19 1 18 14 9 11 12 11 11 12 12 9 13 8 20 3 8 1 15 20 6 18 8 1 13 11 4 17 12 15 4 4 11 19 18 5 2 12 15 20 5 8 11 16 14 13 17 14 14 5 6 8 8 13 6 3 18 14 8 14 11 11 9 4 18 1 16 6\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 20 2\\r\\n18 1 3 1 13 1 3 15 3 2 7 14 1 8 1 10 1 1 9 18 11 6 9 12 17 5 6 7 13 14 9 4 6 14 7 14 19 6 13 10 7 2 17 3 10 11 11 7 2 4 9 12 11 6 20 20 4 16 7 10 8 4 19 18 2 4 6 5 20 2 12 6 20 20 18 7 11 20 10 2 8 5 16 4 19 17 18 9 7 9 13 10 3 12 18 2 6 12 18 10\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 100 1\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 100 2\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['2']}, {'input': '1\\r\\n100 100 10\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['10']}, {'input': '1\\r\\n100 100 99\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['99']}, {'input': '1\\r\\n100 100 100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['100']}, {'input': '1\\r\\n100 100 1\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 100 2\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['2']}, {'input': '1\\r\\n100 100 3\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['3']}, {'input': '1\\r\\n100 100 99\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['99']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Solution {\n    public static void main(String[] args) throws Exception {\n        try (Input reader = new StandardInput()) {\n            int t = reader.nextInt();\n            while (t > 0) {\n                int n = reader.nextInt(), k = reader.nextInt(), d = reader.nextInt();\n                int[] days = reader.readIntArray();\n                int max = 0;\n                for (int i = 0; i < n; i++) {\n                    int cur = 0, maxi = 0;\n                    for (int j = i; j < n; j++) {\n                        if (days[j] == days[i]) {\n                            cur++;\n                            maxi = Math.max(maxi, cur);\n                            if (cur == d) {\n                                max = Math.max(max, maxi);\n                                cur = 0;\n                            }\n                        } else {\n                            cur = 0;\n                        }\n                    }\n                }\n                max = Math.max(max, k - max);\n                System.out.println(max);\n                t--;\n            }\n        }\n    }\n\n    private static interface Input extends Closeable {\n        String next() throws IOException;\n\n        default int nextInt() throws IOException {\n            return Integer.parseInt(next());\n        }\n\n        default long nextLong() throws IOException {\n            return Long.parseLong(next());\n        }\n\n        default double nextDouble() throws IOException {\n            return Double.parseDouble(next());\n        }\n\n        default int[] readIntArray() throws IOException {\n            return readIntArray(nextInt());\n        }\n\n        default int[] readIntArray(int size) throws IOException {\n            int[] array = new int[size];\n            for (int i = 0; i < array.length; i++) {\n                array[i] = nextInt();\n            }\n            return array;\n        }\n    }\n\n    private static class StandardInput implements Input {\n        private final Input reader = new Scanner(System.in);\n\n        private StandardInput() throws IOException {\n            reader.nextInt();\n        }\n\n        @Override\n        public void close() throws IOException {\n            reader.close();\n        }\n\n        @Override\n        public String next() throws IOException {\n            return reader.next();\n        }\n    }\n}\n"}
{"src_uid": "56da4ec7cd849c4330d188d8c9bd6094", "id": 62, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1300, "testcases": "[{'input': '4\\r\\n5 2 2\\r\\n1 2 1 2 1\\r\\n9 3 3\\r\\n3 3 3 2 2 2 1 1 1\\r\\n4 10 4\\r\\n10 8 6 4\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n', 'output': ['2\\r\\n1\\r\\n4\\r\\n5', '2\\n1\\n4\\n5']}, {'input': '10000\\r\\n4 4 1\\r\\n4 3 3 1\\r\\n9 1 7\\r\\n1 1 1 1 1 1 1 1 1\\r\\n1 7 1\\r\\n4\\r\\n3 7 3\\r\\n7 1 2\\r\\n3 6 2\\r\\n4 5 6\\r\\n8 7 3\\r\\n6 3 5 7 3 6 4 3\\r\\n5 6 2\\r\\n2 3 6 3 4\\r\\n1 7 1\\r\\n5\\r\\n4 4 1\\r\\n3 1 3 1\\r\\n7 2 4\\r\\n2 1 1 1 1 2 1\\r\\n4 5 1\\r\\n1 5 4 1\\r\\n9 10 1\\r\\n7 4 4 4 6 3 7 10 7\\r\\n3 8 1\\r\\n6 4 3\\r\\n1 7 1\\r\\n4\\r\\n5 7 5\\r\\n7 5 3 5 5\\r\\n5 10 2\\r\\n5 10 9 10 1\\r\\n2 2 1\\r\\n2 2\\r\\n6 10 4\\r\\n4 10 5 1 7 2\\r\\n7 10 2\\r\\n8 5 7 3 2 2 4\\r\\n2 9 1\\r\\n8 3\\r\\n3 10 3\\r\\n1 2 9\\r\\n10 9 1\\r\\n7 2 4 3 4 1 5 8 8 7\\r\\n9 4 5\\r\\n2 2 3 2 4 4 1 1 2\\r\\n6 9 2\\r\\n6 2 3 1 9 9\\r\\n5 8 1\\r\\n5 2 1 5 8\\r\\n9 5 3\\r\\n3 1 5 2 1 2 2 4 1\\r\\n6 10 1\\r\\n8 6 4 10 10 10\\r\\n...', 'output': ['1\\r\\n1\\r\\n1\\r\\n3\\r\\n2\\r\\n3\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n2\\r\\n1\\r\\n4\\r\\n1\\r\\n1\\r\\n3\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n5\\r\\n1\\r\\n1\\r\\n3\\r\\n4\\r\\n1\\r\\n3\\r\\n3\\r\\n1\\r\\n2\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n5\\r\\n4\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n2\\r\\n2\\r\\n3\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n4\\r\\n2\\r\\n2\\r\\n3\\r\\n5\\r\\n2\\r\\n1\\r\\n5\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n4\\r\\n1\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n2\\r\\n4\\r\\n1\\r\\n3\\r\\n3\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n3\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n4\\r\\n1\\r\\n1\\r\\n3\\r\\n3\\r\\n3\\r\\n1\\r\\n1\\r\\n2\\r\\n2\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n4\\r\\n6\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n4\\r\\n1\\r\\n3\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n2...']}, {'input': '10000\\r\\n25 2 1\\r\\n1 2 2 1 2 2 2 2 2 2 2 1 1 1 2 2 2 1 2 2 1 1 1 2 1\\r\\n24 27 19\\r\\n19 2 15 17 4 8 20 13 1 2 19 2 6 9 22 16 17 20 23 25 26 8 6 24\\r\\n4 10 1\\r\\n10 7 7 9\\r\\n11 15 1\\r\\n2 2 6 3 3 5 11 15 8 12 3\\r\\n19 20 3\\r\\n10 8 8 9 8 6 1 8 20 10 9 18 20 16 4 12 9 10 2\\r\\n22 8 11\\r\\n5 3 5 1 7 7 2 4 6 4 5 8 6 1 3 7 2 7 2 5 7 6\\r\\n16 4 6\\r\\n1 1 4 3 2 1 2 1 3 3 2 3 3 3 3 2\\r\\n19 25 5\\r\\n14 18 2 11 14 12 15 16 21 11 16 12 17 7 18 23 2 3 4\\r\\n26 16 1\\r\\n2 14 12 14 5 6 5 6 15 11 9 7 15 3 3 4 8 13 1 4 4 8 3 1 12 9\\r\\n19 13 9\\r\\n11 2 3 13 6 8 7 2 6 3 9 7 1...', 'output': ['1\\r\\n14\\r\\n1\\r\\n1\\r\\n2\\r\\n7\\r\\n2\\r\\n4\\r\\n1\\r\\n6\\r\\n7\\r\\n2\\r\\n7\\r\\n9\\r\\n4\\r\\n3\\r\\n2\\r\\n8\\r\\n4\\r\\n6\\r\\n1\\r\\n4\\r\\n4\\r\\n4\\r\\n3\\r\\n3\\r\\n2\\r\\n5\\r\\n9\\r\\n1\\r\\n3\\r\\n3\\r\\n3\\r\\n1\\r\\n7\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n6\\r\\n1\\r\\n6\\r\\n1\\r\\n4\\r\\n2\\r\\n2\\r\\n5\\r\\n5\\r\\n5\\r\\n4\\r\\n5\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n6\\r\\n2\\r\\n1\\r\\n3\\r\\n8\\r\\n6\\r\\n2\\r\\n1\\r\\n4\\r\\n1\\r\\n17\\r\\n2\\r\\n11\\r\\n1\\r\\n8\\r\\n1\\r\\n4\\r\\n8\\r\\n5\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n4\\r\\n2\\r\\n10\\r\\n4\\r\\n1\\r\\n8\\r\\n5\\r\\n7\\r\\n1\\r\\n11\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n11\\r\\n6\\r\\n1\\r\\n4\\r\\n6\\r\\n16\\r\\n1\\r\\n12\\r\\n8\\r\\n4\\r\\n5\\r\\n1\\r\\n2\\r\\n6\\r\\n12\\r\\n2\\r\\n3\\r\\n3\\r\\n2\\r\\n2\\r\\n1\\r\\n6\\r\\n4\\r\\n13\\r\\n2\\r\\n11\\r\\n3\\r\\n4\\r\\n13\\r\\n1\\r\\n7\\r\\n5\\r\\n5\\r\\n11\\r\\n4\\r\\n3\\r\\n6\\r\\n6\\r\\n2\\r\\n1\\r\\n1\\r\\n9\\r\\n4\\r\\n9\\r\\n9\\r\\n13\\r\\n2\\r\\n5\\r\\n1\\r\\n1\\r\\n14\\r\\n5\\r\\n1\\r\\n10\\r\\n2\\r\\n2\\r\\n6\\r\\n1\\r\\n4\\r\\n1\\r\\n1\\r\\n2\\r\\n7\\r\\n1\\r\\n3\\r\\n1\\r\\n6\\r\\n2\\r\\n2\\r\\n4\\r\\n...']}, {'input': '1\\r\\n200000 50000 100000\\r\\n43620 16520 24169 29319 35300 6092 8697 40998 15469 16541 45920 21696 48009 37549 35849 6966 45977 49376 47590 10302 36127 14270 35645 20850 15907 32338 30934 35216 32431 48365 11343 28651 42051 4611 3208 48408 8001 13308 3528 34450 48338 44549 214 35127 25599 21629 13920 49465 30152 33128 22087 20254 29457 18159 30113 18369 20976 35278 49478 42126 44353 31877 49348 4138 43970 17640 12092 38376 23575 4559 13202 45493 27767 29431 14560 2957 25933 37550 11475 36643 29624 38619 38461 3...', 'output': ['43168']}, {'input': '1\\r\\n200000 1 100000\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1...', 'output': ['1']}, {'input': '1\\r\\n200000 10 100000\\r\\n1 9 2 9 4 1 9 4 2 6 4 10 5 2 9 6 4 3 7 5 10 2 6 7 5 8 7 2 4 1 1 1 3 3 7 10 2 6 4 5 4 10 10 2 6 2 1 4 8 3 1 2 5 8 3 4 10 8 7 5 9 5 5 5 8 4 1 10 8 7 6 9 7 7 5 7 9 4 8 10 1 5 9 5 7 7 6 9 5 4 3 5 7 10 5 6 3 2 10 3 2 10 3 10 5 3 5 4 10 10 2 9 3 3 6 2 3 6 5 1 9 1 5 6 6 9 1 9 8 3 9 7 1 3 2 7 6 5 5 8 3 10 5 1 4 9 3 4 1 9 8 2 8 5 2 6 6 3 10 7 1 2 9 3 3 7 6 9 7 2 9 9 1 8 8 2 5 2 4 8 1 8 7 3 6 5 3 10 4 2 10 9 5 5 8 6 9 1 1 8 9 2 7 7 1 10 8 10 6 5 5 2 10 10 8 3 8 9 3 7 1 2 8 6 5 6 9 4 6 1 3 4 6 3 ...', 'output': ['10']}, {'input': '1\\r\\n200000 100 20000\\r\\n56 54 36 40 73 78 52 47 66 20 77 100 36 93 23 31 59 97 74 29 58 88 27 97 37 81 15 20 89 75 8 61 52 78 1 26 86 7 63 46 21 74 39 72 38 77 68 82 97 84 79 96 65 47 42 45 70 66 28 58 81 34 81 14 52 73 75 74 87 65 82 63 56 86 56 99 32 24 18 20 60 25 97 77 28 49 53 7 35 21 10 74 34 95 30 5 4 77 69 49 81 2 5 50 32 72 50 9 7 44 15 80 70 45 39 69 12 5 61 84 33 10 88 32 94 91 24 22 49 88 99 38 30 30 1 96 27 60 4 84 89 3 21 70 21 39 69 11 28 7 17 39 71 30 19 33 91 93 26 45 6 86 61 57 80 91 5 28 64...', 'output': ['100']}, {'input': '1\\r\\n200000 999996 100000\\r\\n1 6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96 101 106 111 116 121 126 131 136 141 146 151 156 161 166 171 176 181 186 191 196 201 206 211 216 221 226 231 236 241 246 251 256 261 266 271 276 281 286 291 296 301 306 311 316 321 326 331 336 341 346 351 356 361 366 371 376 381 386 391 396 401 406 411 416 421 426 431 436 441 446 451 456 461 466 471 476 481 486 491 496 501 506 511 516 521 526 531 536 541 546 551 556 561 566 571 576 581 586 591 596 601 606 611 616 621 626 631 ...', 'output': ['100000']}, {'input': '1\\r\\n200000 1000000 200000\\r\\n1000000 999995 999990 999985 999980 999975 999970 999965 999960 999955 999950 999945 999940 999935 999930 999925 999920 999915 999910 999905 999900 999895 999890 999885 999880 999875 999870 999865 999860 999855 999850 999845 999840 999835 999830 999825 999820 999815 999810 999805 999800 999795 999790 999785 999780 999775 999770 999765 999760 999755 999750 999745 999740 999735 999730 999725 999720 999715 999710 999705 999700 999695 999690 999685 999680 999675 999670 999665 999660 9...', 'output': ['200000']}, {'input': '1\\r\\n200000 1000 100000\\r\\n620 192 107 955 564 521 642 381 695 916 549 124 253 339 472 162 131 282 959 678 207 154 876 995 734 39 412 999 815 355 18 165 430 993 27 603 666 794 993 261 70 259 289 24 684 893 292 512 941 852 393 42 314 25 25 970 671 168 914 583 666 819 637 194 512 972 681 283 401 767 709 892 607 366 529 164 211 563 726 197 72 746 537 94 150 347 365 281 320 276 734 646 118 894 974 967 68 260 563 746 985 119 431 778 249 428 511 158 692 99 125 553 877 954 302 832 611 137 181 895 51 860 150 916 284 6...', 'output': ['1000']}, {'input': '1\\r\\n200000 100000 100000\\r\\n8647 17914 36109 89778 78993 55133 74489 27482 57585 98271 77889 47476 26434 78910 72270 37433 77590 94218 26776 81236 7857 52297 75984 96580 13420 37206 57335 15966 38003 44862 95973 906 76808 94689 51811 80545 49598 60279 5137 72373 67166 84168 43937 97833 79109 97555 66522 57877 67492 14888 45878 78979 86655 76238 22212 32085 91951 14238 83686 38492 81248 57509 57652 11778 87283 25990 28664 96610 45117 5398 15632 33866 83494 31775 58512 71264 17548 46621 80189 6618 19549 76932 5...', 'output': ['62936']}, {'input': '1\\r\\n200000 1000000 200000\\r\\n470364 225896 287028 539970 507065 834358 221882 79921 952537 675938 918775 600012 658158 451805 585924 200704 727836 877423 589359 95563 175804 737263 148093 693378 834010 564940 1442 668171 699064 243399 367947 932004 332361 500470 581460 457946 747126 822659 687570 763411 734109 359915 138955 532165 905740 554112 955385 526332 377610 359080 408012 320280 805135 892507 484900 811596 483912 864488 223962 260705 468 390385 483192 247665 841481 651754 428156 822508 897711 270750 80...', 'output': ['181244']}, {'input': '1\\r\\n200000 1000000 20000\\r\\n533722 392695 889264 562461 855026 138921 815803 461194 257052 45665 831069 886688 652160 561837 516684 283787 634185 14587 677319 708000 762661 815073 509775 30098 637512 723030 819497 202814 848040 970165 882077 948960 348866 282945 296186 444252 966548 552732 274192 16694 895137 572174 815092 350234 717680 652165 545471 904085 37325 47183 763599 162009 423431 10401 212741 944445 276272 304020 763078 730235 106465 974498 982395 46321 795699 969837 135760 488480 863430 883321 2125...', 'output': ['19770']}, {'input': '1\\r\\n200000 1 1\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...', 'output': ['1']}, {'input': '1\\r\\n200000 1000000 1\\r\\n780737 872203 852770 369033 859738 846341 851594 954282 684383 209632 798015 36250 376958 793324 203798 459743 621399 649416 45468 297431 261695 620652 512718 793583 992894 200416 98975 368684 265169 695427 834486 116518 889256 354565 349037 240328 345769 475500 788435 452690 948139 738003 87787 656919 874748 293479 823979 451391 310748 446952 936638 761542 417856 248622 69762 416315 588495 748898 540043 217410 102504 122304 887006 865619 229595 6236 653431 864185 887339 426521 687555 ...', 'output': ['1']}, {'input': '1\\r\\n200000 999996 1\\r\\n1 6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96 101 106 111 116 121 126 131 136 141 146 151 156 161 166 171 176 181 186 191 196 201 206 211 216 221 226 231 236 241 246 251 256 261 266 271 276 281 286 291 296 301 306 311 316 321 326 331 336 341 346 351 356 361 366 371 376 381 386 391 396 401 406 411 416 421 426 431 436 441 446 451 456 461 466 471 476 481 486 491 496 501 506 511 516 521 526 531 536 541 546 551 556 561 566 571 576 581 586 591 596 601 606 611 616 621 626 631 636 6...', 'output': ['1']}, {'input': '1\\r\\n200000 999996 199999\\r\\n1 6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96 101 106 111 116 121 126 131 136 141 146 151 156 161 166 171 176 181 186 191 196 201 206 211 216 221 226 231 236 241 246 251 256 261 266 271 276 281 286 291 296 301 306 311 316 321 326 331 336 341 346 351 356 361 366 371 376 381 386 391 396 401 406 411 416 421 426 431 436 441 446 451 456 461 466 471 476 481 486 491 496 501 506 511 516 521 526 531 536 541 546 551 556 561 566 571 576 581 586 591 596 601 606 611 616 621 626 631 ...', 'output': ['199999']}, {'input': '10000\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 100000...', 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1...']}, {'input': '10000\\r\\n20 1000000 5\\r\\n50000 100000 150000 200000 250000 300000 350000 400000 450000 500000 550000 600000 650000 700000 750000 800000 850000 900000 950000 1000000\\r\\n20 1000000 5\\r\\n50000 100000 150000 200000 250000 300000 350000 400000 450000 500000 550000 600000 650000 700000 750000 800000 850000 900000 950000 1000000\\r\\n20 1000000 5\\r\\n50000 100000 150000 200000 250000 300000 350000 400000 450000 500000 550000 600000 650000 700000 750000 800000 850000 900000 950000 1000000\\r\\n20 1000000 5\\r\\n50000 100000 150000 20000...', 'output': ['5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5...']}, {'input': '10000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000...', 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1...']}, {'input': '10000\\r\\n20 1000000 6\\r\\n42 18468 6335 26501 19170 15725 11479 29359 26963 24465 5706 28146 23282 16828 9962 492 2996 11943 4828 5437\\r\\n20 1000000 6\\r\\n32392 14605 3903 154 293 12383 17422 18717 19719 19896 5448 21727 14772 11539 1870 19913 25668 26300 17036 9895\\r\\n20 1000000 6\\r\\n28704 23812 31323 30334 17674 4665 15142 7712 28254 6869 25548 27645 32663 32758 20038 12860 8724 9742 27530 779\\r\\n20 1000000 6\\r\\n12317 3036 22191 1843 289 30107 9041 8943 19265 22649 27447 23806 15891 6730 24371 15351 15007 31102 24394 3549...', 'output': ['6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6...']}, {'input': '10000\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 ...', 'output': ['5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5...']}, {'input': '1\\r\\n6969 100 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...', 'output': ['1']}, {'input': '10000\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n...', 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1...']}, {'input': '30\\r\\n4 4 1\\r\\n3 3 1 2\\r\\n4 4 1\\r\\n4 1 4 1\\r\\n1 1 1\\r\\n1\\r\\n3 2 1\\r\\n2 1 2\\r\\n4 4 2\\r\\n3 2 2 2\\r\\n4 2 4\\r\\n1 2 2 2\\r\\n1 4 1\\r\\n4\\r\\n2 3 1\\r\\n2 3\\r\\n2 2 1\\r\\n2 2\\r\\n4 4 2\\r\\n1 2 4 2\\r\\n4 4 1\\r\\n2 4 4 3\\r\\n4 3 1\\r\\n1 3 1 3\\r\\n1 1 1\\r\\n1\\r\\n2 2 2\\r\\n2 1\\r\\n2 4 1\\r\\n1 4\\r\\n2 4 1\\r\\n3 4\\r\\n1 2 1\\r\\n1\\r\\n2 4 2\\r\\n2 1\\r\\n3 1 2\\r\\n1 1 1\\r\\n2 4 1\\r\\n1 4\\r\\n2 3 1\\r\\n3 3\\r\\n4 2 2\\r\\n2 1 2 2\\r\\n3 2 2\\r\\n2 2 1\\r\\n4 3 1\\r\\n2 2 1 2\\r\\n2 3 1\\r\\n1 3\\r\\n4 4 4\\r\\n3 2 2 3\\r\\n1 4 1\\r\\n1\\r\\n2 1 2\\r\\n1 1\\r\\n1 4 1\\r\\n4\\r\\n2 3 1\\r\\n3 3\\r\\n', 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n1', '1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1']}, {'input': '15\\r\\n6 4 6\\r\\n2 3 2 3 4 2\\r\\n7 8 4\\r\\n5 6 2 7 7 3 3\\r\\n8 1 5\\r\\n1 1 1 1 1 1 1 1\\r\\n1 5 1\\r\\n1\\r\\n2 7 2\\r\\n6 7\\r\\n6 8 4\\r\\n8 5 4 1 6 6\\r\\n1 8 1\\r\\n2\\r\\n3 8 2\\r\\n2 3 3\\r\\n2 2 1\\r\\n1 1\\r\\n8 2 5\\r\\n2 2 1 1 1 1 1 1\\r\\n7 6 4\\r\\n2 4 1 1 2 4 3\\r\\n8 8 2\\r\\n6 5 6 1 3 1 2 8\\r\\n5 6 1\\r\\n6 1 2 6 2\\r\\n6 5 5\\r\\n1 5 2 4 4 5\\r\\n7 1 6\\r\\n1 1 1 1 1 1 1\\r\\n', 'output': ['3\\n2\\n1\\n1\\n2\\n3\\n1\\n1\\n1\\n1\\n3\\n2\\n1\\n3\\n1', '3\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n2\\r\\n1\\r\\n3\\r\\n1']}, {'input': '10\\r\\n6 9 4\\r\\n8 8 2 5 8 9\\r\\n5 3 4\\r\\n1 3 1 2 1\\r\\n10 5 10\\r\\n3 2 4 2 1 1 2 2 3 4\\r\\n7 7 3\\r\\n4 6 2 6 4 5 2\\r\\n9 9 6\\r\\n4 6 7 2 5 5 7 4 8\\r\\n6 5 4\\r\\n2 3 2 5 5 5\\r\\n8 3 4\\r\\n2 3 2 3 2 1 1 3\\r\\n10 6 9\\r\\n6 2 4 1 4 5 5 2 1 1\\r\\n8 7 2\\r\\n4 4 5 6 2 5 3 4\\r\\n1 9 1\\r\\n3\\r\\n', 'output': ['3\\r\\n3\\r\\n4\\r\\n2\\r\\n4\\r\\n2\\r\\n2\\r\\n4\\r\\n1\\r\\n1', '3\\n3\\n4\\n2\\n4\\n2\\n2\\n4\\n1\\n1']}, {'input': '5\\r\\n17 10 1\\r\\n8 5 10 7 4 7 2 9 8 10 7 2 6 5 1 1 5\\r\\n22 13 5\\r\\n1 9 12 4 6 1 8 10 1 11 1 2 1 6 8 12 11 8 10 6 2 12\\r\\n13 25 7\\r\\n22 7 19 12 7 17 7 6 22 19 5 5 23\\r\\n1 6 1\\r\\n6\\r\\n1 15 1\\r\\n7\\r\\n', 'output': ['1\\n3\\n5\\n1\\n1', '1\\r\\n3\\r\\n5\\r\\n1\\r\\n1']}, {'input': '1\\r\\n100 90 100\\r\\n8 39 60 46 68 2 42 45 7 54 89 78 16 59 21 29 5 30 20 12 64 42 34 33 13 17 55 30 54 31 23 27 38 36 2 49 45 43 47 55 4 6 55 38 60 16 34 86 67 76 55 86 39 62 12 58 74 51 10 31 38 85 50 61 48 35 69 24 64 53 4 19 15 35 28 22 88 3 25 60 9 40 67 47 26 57 58 61 65 21 76 4 15 35 37 49 62 45 81 32\\r\\n', 'output': ['67']}, {'input': '1\\r\\n100 100 100\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['100']}, {'input': '1\\r\\n100 50 100\\r\\n22 28 34 29 43 8 12 12 4 29 36 38 22 5 19 38 4 41 20 33 39 11 2 40 42 8 33 23 20 47 45 30 47 33 27 23 50 26 30 43 8 3 4 38 46 32 20 19 10 3 18 29 21 19 37 30 12 38 27 44 24 39 25 18 50 44 37 22 39 41 18 26 37 40 40 16 38 9 12 36 27 31 45 47 31 31 29 48 25 7 29 24 10 2 8 3 36 48 8 9\\r\\n', 'output': ['42']}, {'input': '1\\r\\n100 1 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 10 100\\r\\n9 2 2 3 5 2 2 3 4 9 5 3 6 2 1 4 4 8 6 2 3 10 4 1 5 2 8 8 3 9 2 7 2 3 4 2 2 8 9 7 10 3 7 7 4 4 8 8 9 7 1 8 10 3 6 8 1 9 4 6 5 6 9 2 9 6 7 10 5 8 7 10 6 1 9 2 10 10 10 9 6 5 6 9 2 8 1 2 2 5 6 6 3 3 7 10 10 1 6 3\\r\\n', 'output': ['10']}, {'input': '1\\r\\n100 2 100\\r\\n2 1 2 2 1 2 2 1 1 2 2 2 2 2 1 1 1 1 2 1 1 1 2 2 2 1 1 1 2 1 1 1 1 2 1 1 1 1 2 2 2 2 1 2 2 1 2 1 1 1 1 2 2 2 1 1 2 1 2 2 2 2 1 1 1 2 1 1 1 1 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 1 1 1 2 1 2 1 2 2 2 1 2\\r\\n', 'output': ['2']}, {'input': '1\\r\\n100 16 100\\r\\n1 11 2 2 13 8 3 15 8 11 13 1 16 16 3 5 12 10 11 16 1 14 16 8 14 3 15 8 2 8 10 1 16 14 8 4 2 10 3 8 3 5 8 10 4 12 11 8 8 15 16 5 7 6 3 9 15 7 1 14 14 2 13 4 10 6 12 13 9 8 9 2 9 3 2 12 9 3 8 11 14 9 3 3 15 10 12 10 10 16 2 12 13 7 6 7 13 1 14 15\\r\\n', 'output': ['16']}, {'input': '1\\r\\n100 100 50\\r\\n40 23 65 71 63 65 82 49 42 62 80 68 30 97 95 11 19 16 50 33 99 40 100 88 7 52 83 80 68 30 32 40 67 16 45 89 54 88 9 42 40 65 96 97 9 100 53 84 40 40 66 13 47 30 71 14 83 18 35 70 73 52 17 91 87 59 81 5 84 94 1 9 23 90 32 91 69 77 38 84 38 74 6 26 100 47 39 23 84 90 67 86 67 80 31 51 71 97 69 68\\r\\n', 'output': ['34']}, {'input': '1\\r\\n100 100 33\\r\\n78 92 82 75 58 98 94 39 38 88 89 78 2 95 53 47 74 95 14 92 49 44 8 67 31 77 90 20 16 92 19 32 26 75 81 4 79 46 21 44 5 19 64 72 13 9 74 58 84 62 70 86 77 4 39 97 1 67 98 99 89 34 29 13 24 2 69 68 30 66 77 16 26 49 1 25 89 26 28 25 96 55 51 44 10 7 36 75 12 81 31 46 52 55 48 78 82 95 39 44\\r\\n', 'output': ['28']}, {'input': '1\\r\\n100 1 1\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 20 1\\r\\n10 17 9 8 11 8 8 3 7 20 11 10 7 7 2 13 10 7 7 10 7 8 4 17 20 9 5 18 12 8 3 5 19 1 18 14 9 11 12 11 11 12 12 9 13 8 20 3 8 1 15 20 6 18 8 1 13 11 4 17 12 15 4 4 11 19 18 5 2 12 15 20 5 8 11 16 14 13 17 14 14 5 6 8 8 13 6 3 18 14 8 14 11 11 9 4 18 1 16 6\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 20 2\\r\\n18 1 3 1 13 1 3 15 3 2 7 14 1 8 1 10 1 1 9 18 11 6 9 12 17 5 6 7 13 14 9 4 6 14 7 14 19 6 13 10 7 2 17 3 10 11 11 7 2 4 9 12 11 6 20 20 4 16 7 10 8 4 19 18 2 4 6 5 20 2 12 6 20 20 18 7 11 20 10 2 8 5 16 4 19 17 18 9 7 9 13 10 3 12 18 2 6 12 18 10\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 100 1\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 100 2\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['2']}, {'input': '1\\r\\n100 100 10\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['10']}, {'input': '1\\r\\n100 100 99\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['99']}, {'input': '1\\r\\n100 100 100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['100']}, {'input': '1\\r\\n100 100 1\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 100 2\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['2']}, {'input': '1\\r\\n100 100 3\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['3']}, {'input': '1\\r\\n100 100 99\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['99']}]", "source_code": "\nimport java.util.*;\n\npublic class BuySubscription {\n    public static void main(String[] args) throws Exception {\n        new BuySubscription().run();\n    }\n    void run() throws Exception {\n        var sc = new Scanner(System.in);\n        var t = sc.nextInt();\n        for (int _t = 0; _t < t; ++_t) {\n            var n = sc.nextInt();\n            var k = sc.nextInt();\n            var d = sc.nextInt();\n            var shows = new int[n];\n            var count = 0;\n            for (int _i = 0; _i < n; ++_i)\n                shows[_i] = sc.nextInt();\n            int ans = 1;\n            for (int first = 0; first < k; ++first) {\n                ans = Integer.MAX_VALUE;\n                for (int second = 0; second < k; ++second) {\n                    if (shows[0] == first && shows[n-1] == second) {\n                        ans = 1;\n                        break;\n                    }\n                    if (shows[0] == first && shows[n-d] == second) {\n                        ans = 2;\n                    }\n                    if (shows[d-1] == first && shows[n-1] == second) {\n                        ans = n-d+1;\n                    }\n                }\n                if (ans < Integer.MAX_VALUE) {\n                    break;\n                }\n            }\n            System.out.println(ans);\n        }\n    }\n}\n"}
{"src_uid": "56da4ec7cd849c4330d188d8c9bd6094", "id": 62, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1300, "testcases": "[{'input': '4\\r\\n5 2 2\\r\\n1 2 1 2 1\\r\\n9 3 3\\r\\n3 3 3 2 2 2 1 1 1\\r\\n4 10 4\\r\\n10 8 6 4\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n', 'output': ['2\\r\\n1\\r\\n4\\r\\n5', '2\\n1\\n4\\n5']}, {'input': '10000\\r\\n4 4 1\\r\\n4 3 3 1\\r\\n9 1 7\\r\\n1 1 1 1 1 1 1 1 1\\r\\n1 7 1\\r\\n4\\r\\n3 7 3\\r\\n7 1 2\\r\\n3 6 2\\r\\n4 5 6\\r\\n8 7 3\\r\\n6 3 5 7 3 6 4 3\\r\\n5 6 2\\r\\n2 3 6 3 4\\r\\n1 7 1\\r\\n5\\r\\n4 4 1\\r\\n3 1 3 1\\r\\n7 2 4\\r\\n2 1 1 1 1 2 1\\r\\n4 5 1\\r\\n1 5 4 1\\r\\n9 10 1\\r\\n7 4 4 4 6 3 7 10 7\\r\\n3 8 1\\r\\n6 4 3\\r\\n1 7 1\\r\\n4\\r\\n5 7 5\\r\\n7 5 3 5 5\\r\\n5 10 2\\r\\n5 10 9 10 1\\r\\n2 2 1\\r\\n2 2\\r\\n6 10 4\\r\\n4 10 5 1 7 2\\r\\n7 10 2\\r\\n8 5 7 3 2 2 4\\r\\n2 9 1\\r\\n8 3\\r\\n3 10 3\\r\\n1 2 9\\r\\n10 9 1\\r\\n7 2 4 3 4 1 5 8 8 7\\r\\n9 4 5\\r\\n2 2 3 2 4 4 1 1 2\\r\\n6 9 2\\r\\n6 2 3 1 9 9\\r\\n5 8 1\\r\\n5 2 1 5 8\\r\\n9 5 3\\r\\n3 1 5 2 1 2 2 4 1\\r\\n6 10 1\\r\\n8 6 4 10 10 10\\r\\n...', 'output': ['1\\r\\n1\\r\\n1\\r\\n3\\r\\n2\\r\\n3\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n2\\r\\n1\\r\\n4\\r\\n1\\r\\n1\\r\\n3\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n5\\r\\n1\\r\\n1\\r\\n3\\r\\n4\\r\\n1\\r\\n3\\r\\n3\\r\\n1\\r\\n2\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n5\\r\\n4\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n2\\r\\n2\\r\\n3\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n4\\r\\n2\\r\\n2\\r\\n3\\r\\n5\\r\\n2\\r\\n1\\r\\n5\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n4\\r\\n1\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n2\\r\\n4\\r\\n1\\r\\n3\\r\\n3\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n3\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n4\\r\\n1\\r\\n1\\r\\n3\\r\\n3\\r\\n3\\r\\n1\\r\\n1\\r\\n2\\r\\n2\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n4\\r\\n6\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n4\\r\\n1\\r\\n3\\r\\n1\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n2...']}, {'input': '10000\\r\\n25 2 1\\r\\n1 2 2 1 2 2 2 2 2 2 2 1 1 1 2 2 2 1 2 2 1 1 1 2 1\\r\\n24 27 19\\r\\n19 2 15 17 4 8 20 13 1 2 19 2 6 9 22 16 17 20 23 25 26 8 6 24\\r\\n4 10 1\\r\\n10 7 7 9\\r\\n11 15 1\\r\\n2 2 6 3 3 5 11 15 8 12 3\\r\\n19 20 3\\r\\n10 8 8 9 8 6 1 8 20 10 9 18 20 16 4 12 9 10 2\\r\\n22 8 11\\r\\n5 3 5 1 7 7 2 4 6 4 5 8 6 1 3 7 2 7 2 5 7 6\\r\\n16 4 6\\r\\n1 1 4 3 2 1 2 1 3 3 2 3 3 3 3 2\\r\\n19 25 5\\r\\n14 18 2 11 14 12 15 16 21 11 16 12 17 7 18 23 2 3 4\\r\\n26 16 1\\r\\n2 14 12 14 5 6 5 6 15 11 9 7 15 3 3 4 8 13 1 4 4 8 3 1 12 9\\r\\n19 13 9\\r\\n11 2 3 13 6 8 7 2 6 3 9 7 1...', 'output': ['1\\r\\n14\\r\\n1\\r\\n1\\r\\n2\\r\\n7\\r\\n2\\r\\n4\\r\\n1\\r\\n6\\r\\n7\\r\\n2\\r\\n7\\r\\n9\\r\\n4\\r\\n3\\r\\n2\\r\\n8\\r\\n4\\r\\n6\\r\\n1\\r\\n4\\r\\n4\\r\\n4\\r\\n3\\r\\n3\\r\\n2\\r\\n5\\r\\n9\\r\\n1\\r\\n3\\r\\n3\\r\\n3\\r\\n1\\r\\n7\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n6\\r\\n1\\r\\n6\\r\\n1\\r\\n4\\r\\n2\\r\\n2\\r\\n5\\r\\n5\\r\\n5\\r\\n4\\r\\n5\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n6\\r\\n2\\r\\n1\\r\\n3\\r\\n8\\r\\n6\\r\\n2\\r\\n1\\r\\n4\\r\\n1\\r\\n17\\r\\n2\\r\\n11\\r\\n1\\r\\n8\\r\\n1\\r\\n4\\r\\n8\\r\\n5\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n4\\r\\n2\\r\\n10\\r\\n4\\r\\n1\\r\\n8\\r\\n5\\r\\n7\\r\\n1\\r\\n11\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n11\\r\\n6\\r\\n1\\r\\n4\\r\\n6\\r\\n16\\r\\n1\\r\\n12\\r\\n8\\r\\n4\\r\\n5\\r\\n1\\r\\n2\\r\\n6\\r\\n12\\r\\n2\\r\\n3\\r\\n3\\r\\n2\\r\\n2\\r\\n1\\r\\n6\\r\\n4\\r\\n13\\r\\n2\\r\\n11\\r\\n3\\r\\n4\\r\\n13\\r\\n1\\r\\n7\\r\\n5\\r\\n5\\r\\n11\\r\\n4\\r\\n3\\r\\n6\\r\\n6\\r\\n2\\r\\n1\\r\\n1\\r\\n9\\r\\n4\\r\\n9\\r\\n9\\r\\n13\\r\\n2\\r\\n5\\r\\n1\\r\\n1\\r\\n14\\r\\n5\\r\\n1\\r\\n10\\r\\n2\\r\\n2\\r\\n6\\r\\n1\\r\\n4\\r\\n1\\r\\n1\\r\\n2\\r\\n7\\r\\n1\\r\\n3\\r\\n1\\r\\n6\\r\\n2\\r\\n2\\r\\n4\\r\\n...']}, {'input': '1\\r\\n200000 50000 100000\\r\\n43620 16520 24169 29319 35300 6092 8697 40998 15469 16541 45920 21696 48009 37549 35849 6966 45977 49376 47590 10302 36127 14270 35645 20850 15907 32338 30934 35216 32431 48365 11343 28651 42051 4611 3208 48408 8001 13308 3528 34450 48338 44549 214 35127 25599 21629 13920 49465 30152 33128 22087 20254 29457 18159 30113 18369 20976 35278 49478 42126 44353 31877 49348 4138 43970 17640 12092 38376 23575 4559 13202 45493 27767 29431 14560 2957 25933 37550 11475 36643 29624 38619 38461 3...', 'output': ['43168']}, {'input': '1\\r\\n200000 1 100000\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1...', 'output': ['1']}, {'input': '1\\r\\n200000 10 100000\\r\\n1 9 2 9 4 1 9 4 2 6 4 10 5 2 9 6 4 3 7 5 10 2 6 7 5 8 7 2 4 1 1 1 3 3 7 10 2 6 4 5 4 10 10 2 6 2 1 4 8 3 1 2 5 8 3 4 10 8 7 5 9 5 5 5 8 4 1 10 8 7 6 9 7 7 5 7 9 4 8 10 1 5 9 5 7 7 6 9 5 4 3 5 7 10 5 6 3 2 10 3 2 10 3 10 5 3 5 4 10 10 2 9 3 3 6 2 3 6 5 1 9 1 5 6 6 9 1 9 8 3 9 7 1 3 2 7 6 5 5 8 3 10 5 1 4 9 3 4 1 9 8 2 8 5 2 6 6 3 10 7 1 2 9 3 3 7 6 9 7 2 9 9 1 8 8 2 5 2 4 8 1 8 7 3 6 5 3 10 4 2 10 9 5 5 8 6 9 1 1 8 9 2 7 7 1 10 8 10 6 5 5 2 10 10 8 3 8 9 3 7 1 2 8 6 5 6 9 4 6 1 3 4 6 3 ...', 'output': ['10']}, {'input': '1\\r\\n200000 100 20000\\r\\n56 54 36 40 73 78 52 47 66 20 77 100 36 93 23 31 59 97 74 29 58 88 27 97 37 81 15 20 89 75 8 61 52 78 1 26 86 7 63 46 21 74 39 72 38 77 68 82 97 84 79 96 65 47 42 45 70 66 28 58 81 34 81 14 52 73 75 74 87 65 82 63 56 86 56 99 32 24 18 20 60 25 97 77 28 49 53 7 35 21 10 74 34 95 30 5 4 77 69 49 81 2 5 50 32 72 50 9 7 44 15 80 70 45 39 69 12 5 61 84 33 10 88 32 94 91 24 22 49 88 99 38 30 30 1 96 27 60 4 84 89 3 21 70 21 39 69 11 28 7 17 39 71 30 19 33 91 93 26 45 6 86 61 57 80 91 5 28 64...', 'output': ['100']}, {'input': '1\\r\\n200000 999996 100000\\r\\n1 6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96 101 106 111 116 121 126 131 136 141 146 151 156 161 166 171 176 181 186 191 196 201 206 211 216 221 226 231 236 241 246 251 256 261 266 271 276 281 286 291 296 301 306 311 316 321 326 331 336 341 346 351 356 361 366 371 376 381 386 391 396 401 406 411 416 421 426 431 436 441 446 451 456 461 466 471 476 481 486 491 496 501 506 511 516 521 526 531 536 541 546 551 556 561 566 571 576 581 586 591 596 601 606 611 616 621 626 631 ...', 'output': ['100000']}, {'input': '1\\r\\n200000 1000000 200000\\r\\n1000000 999995 999990 999985 999980 999975 999970 999965 999960 999955 999950 999945 999940 999935 999930 999925 999920 999915 999910 999905 999900 999895 999890 999885 999880 999875 999870 999865 999860 999855 999850 999845 999840 999835 999830 999825 999820 999815 999810 999805 999800 999795 999790 999785 999780 999775 999770 999765 999760 999755 999750 999745 999740 999735 999730 999725 999720 999715 999710 999705 999700 999695 999690 999685 999680 999675 999670 999665 999660 9...', 'output': ['200000']}, {'input': '1\\r\\n200000 1000 100000\\r\\n620 192 107 955 564 521 642 381 695 916 549 124 253 339 472 162 131 282 959 678 207 154 876 995 734 39 412 999 815 355 18 165 430 993 27 603 666 794 993 261 70 259 289 24 684 893 292 512 941 852 393 42 314 25 25 970 671 168 914 583 666 819 637 194 512 972 681 283 401 767 709 892 607 366 529 164 211 563 726 197 72 746 537 94 150 347 365 281 320 276 734 646 118 894 974 967 68 260 563 746 985 119 431 778 249 428 511 158 692 99 125 553 877 954 302 832 611 137 181 895 51 860 150 916 284 6...', 'output': ['1000']}, {'input': '1\\r\\n200000 100000 100000\\r\\n8647 17914 36109 89778 78993 55133 74489 27482 57585 98271 77889 47476 26434 78910 72270 37433 77590 94218 26776 81236 7857 52297 75984 96580 13420 37206 57335 15966 38003 44862 95973 906 76808 94689 51811 80545 49598 60279 5137 72373 67166 84168 43937 97833 79109 97555 66522 57877 67492 14888 45878 78979 86655 76238 22212 32085 91951 14238 83686 38492 81248 57509 57652 11778 87283 25990 28664 96610 45117 5398 15632 33866 83494 31775 58512 71264 17548 46621 80189 6618 19549 76932 5...', 'output': ['62936']}, {'input': '1\\r\\n200000 1000000 200000\\r\\n470364 225896 287028 539970 507065 834358 221882 79921 952537 675938 918775 600012 658158 451805 585924 200704 727836 877423 589359 95563 175804 737263 148093 693378 834010 564940 1442 668171 699064 243399 367947 932004 332361 500470 581460 457946 747126 822659 687570 763411 734109 359915 138955 532165 905740 554112 955385 526332 377610 359080 408012 320280 805135 892507 484900 811596 483912 864488 223962 260705 468 390385 483192 247665 841481 651754 428156 822508 897711 270750 80...', 'output': ['181244']}, {'input': '1\\r\\n200000 1000000 20000\\r\\n533722 392695 889264 562461 855026 138921 815803 461194 257052 45665 831069 886688 652160 561837 516684 283787 634185 14587 677319 708000 762661 815073 509775 30098 637512 723030 819497 202814 848040 970165 882077 948960 348866 282945 296186 444252 966548 552732 274192 16694 895137 572174 815092 350234 717680 652165 545471 904085 37325 47183 763599 162009 423431 10401 212741 944445 276272 304020 763078 730235 106465 974498 982395 46321 795699 969837 135760 488480 863430 883321 2125...', 'output': ['19770']}, {'input': '1\\r\\n200000 1 1\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...', 'output': ['1']}, {'input': '1\\r\\n200000 1000000 1\\r\\n780737 872203 852770 369033 859738 846341 851594 954282 684383 209632 798015 36250 376958 793324 203798 459743 621399 649416 45468 297431 261695 620652 512718 793583 992894 200416 98975 368684 265169 695427 834486 116518 889256 354565 349037 240328 345769 475500 788435 452690 948139 738003 87787 656919 874748 293479 823979 451391 310748 446952 936638 761542 417856 248622 69762 416315 588495 748898 540043 217410 102504 122304 887006 865619 229595 6236 653431 864185 887339 426521 687555 ...', 'output': ['1']}, {'input': '1\\r\\n200000 999996 1\\r\\n1 6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96 101 106 111 116 121 126 131 136 141 146 151 156 161 166 171 176 181 186 191 196 201 206 211 216 221 226 231 236 241 246 251 256 261 266 271 276 281 286 291 296 301 306 311 316 321 326 331 336 341 346 351 356 361 366 371 376 381 386 391 396 401 406 411 416 421 426 431 436 441 446 451 456 461 466 471 476 481 486 491 496 501 506 511 516 521 526 531 536 541 546 551 556 561 566 571 576 581 586 591 596 601 606 611 616 621 626 631 636 6...', 'output': ['1']}, {'input': '1\\r\\n200000 999996 199999\\r\\n1 6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96 101 106 111 116 121 126 131 136 141 146 151 156 161 166 171 176 181 186 191 196 201 206 211 216 221 226 231 236 241 246 251 256 261 266 271 276 281 286 291 296 301 306 311 316 321 326 331 336 341 346 351 356 361 366 371 376 381 386 391 396 401 406 411 416 421 426 431 436 441 446 451 456 461 466 471 476 481 486 491 496 501 506 511 516 521 526 531 536 541 546 551 556 561 566 571 576 581 586 591 596 601 606 611 616 621 626 631 ...', 'output': ['199999']}, {'input': '10000\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 1000000 1\\r\\n1\\r\\n1 100000...', 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1...']}, {'input': '10000\\r\\n20 1000000 5\\r\\n50000 100000 150000 200000 250000 300000 350000 400000 450000 500000 550000 600000 650000 700000 750000 800000 850000 900000 950000 1000000\\r\\n20 1000000 5\\r\\n50000 100000 150000 200000 250000 300000 350000 400000 450000 500000 550000 600000 650000 700000 750000 800000 850000 900000 950000 1000000\\r\\n20 1000000 5\\r\\n50000 100000 150000 200000 250000 300000 350000 400000 450000 500000 550000 600000 650000 700000 750000 800000 850000 900000 950000 1000000\\r\\n20 1000000 5\\r\\n50000 100000 150000 20000...', 'output': ['5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5...']}, {'input': '10000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000\\r\\n1 1000000 1\\r\\n1000000...', 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1...']}, {'input': '10000\\r\\n20 1000000 6\\r\\n42 18468 6335 26501 19170 15725 11479 29359 26963 24465 5706 28146 23282 16828 9962 492 2996 11943 4828 5437\\r\\n20 1000000 6\\r\\n32392 14605 3903 154 293 12383 17422 18717 19719 19896 5448 21727 14772 11539 1870 19913 25668 26300 17036 9895\\r\\n20 1000000 6\\r\\n28704 23812 31323 30334 17674 4665 15142 7712 28254 6869 25548 27645 32663 32758 20038 12860 8724 9742 27530 779\\r\\n20 1000000 6\\r\\n12317 3036 22191 1843 289 30107 9041 8943 19265 22649 27447 23806 15891 6730 24371 15351 15007 31102 24394 3549...', 'output': ['6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6...']}, {'input': '10000\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\r\\n16 9 8\\r\\n3 1 ...', 'output': ['5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5...']}, {'input': '1\\r\\n6969 100 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...', 'output': ['1']}, {'input': '10000\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n1 1000000 1\\r\\n777\\r\\n...', 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1...']}, {'input': '30\\r\\n4 4 1\\r\\n3 3 1 2\\r\\n4 4 1\\r\\n4 1 4 1\\r\\n1 1 1\\r\\n1\\r\\n3 2 1\\r\\n2 1 2\\r\\n4 4 2\\r\\n3 2 2 2\\r\\n4 2 4\\r\\n1 2 2 2\\r\\n1 4 1\\r\\n4\\r\\n2 3 1\\r\\n2 3\\r\\n2 2 1\\r\\n2 2\\r\\n4 4 2\\r\\n1 2 4 2\\r\\n4 4 1\\r\\n2 4 4 3\\r\\n4 3 1\\r\\n1 3 1 3\\r\\n1 1 1\\r\\n1\\r\\n2 2 2\\r\\n2 1\\r\\n2 4 1\\r\\n1 4\\r\\n2 4 1\\r\\n3 4\\r\\n1 2 1\\r\\n1\\r\\n2 4 2\\r\\n2 1\\r\\n3 1 2\\r\\n1 1 1\\r\\n2 4 1\\r\\n1 4\\r\\n2 3 1\\r\\n3 3\\r\\n4 2 2\\r\\n2 1 2 2\\r\\n3 2 2\\r\\n2 2 1\\r\\n4 3 1\\r\\n2 2 1 2\\r\\n2 3 1\\r\\n1 3\\r\\n4 4 4\\r\\n3 2 2 3\\r\\n1 4 1\\r\\n1\\r\\n2 1 2\\r\\n1 1\\r\\n1 4 1\\r\\n4\\r\\n2 3 1\\r\\n3 3\\r\\n', 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n1', '1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1']}, {'input': '15\\r\\n6 4 6\\r\\n2 3 2 3 4 2\\r\\n7 8 4\\r\\n5 6 2 7 7 3 3\\r\\n8 1 5\\r\\n1 1 1 1 1 1 1 1\\r\\n1 5 1\\r\\n1\\r\\n2 7 2\\r\\n6 7\\r\\n6 8 4\\r\\n8 5 4 1 6 6\\r\\n1 8 1\\r\\n2\\r\\n3 8 2\\r\\n2 3 3\\r\\n2 2 1\\r\\n1 1\\r\\n8 2 5\\r\\n2 2 1 1 1 1 1 1\\r\\n7 6 4\\r\\n2 4 1 1 2 4 3\\r\\n8 8 2\\r\\n6 5 6 1 3 1 2 8\\r\\n5 6 1\\r\\n6 1 2 6 2\\r\\n6 5 5\\r\\n1 5 2 4 4 5\\r\\n7 1 6\\r\\n1 1 1 1 1 1 1\\r\\n', 'output': ['3\\n2\\n1\\n1\\n2\\n3\\n1\\n1\\n1\\n1\\n3\\n2\\n1\\n3\\n1', '3\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n2\\r\\n1\\r\\n3\\r\\n1']}, {'input': '10\\r\\n6 9 4\\r\\n8 8 2 5 8 9\\r\\n5 3 4\\r\\n1 3 1 2 1\\r\\n10 5 10\\r\\n3 2 4 2 1 1 2 2 3 4\\r\\n7 7 3\\r\\n4 6 2 6 4 5 2\\r\\n9 9 6\\r\\n4 6 7 2 5 5 7 4 8\\r\\n6 5 4\\r\\n2 3 2 5 5 5\\r\\n8 3 4\\r\\n2 3 2 3 2 1 1 3\\r\\n10 6 9\\r\\n6 2 4 1 4 5 5 2 1 1\\r\\n8 7 2\\r\\n4 4 5 6 2 5 3 4\\r\\n1 9 1\\r\\n3\\r\\n', 'output': ['3\\r\\n3\\r\\n4\\r\\n2\\r\\n4\\r\\n2\\r\\n2\\r\\n4\\r\\n1\\r\\n1', '3\\n3\\n4\\n2\\n4\\n2\\n2\\n4\\n1\\n1']}, {'input': '5\\r\\n17 10 1\\r\\n8 5 10 7 4 7 2 9 8 10 7 2 6 5 1 1 5\\r\\n22 13 5\\r\\n1 9 12 4 6 1 8 10 1 11 1 2 1 6 8 12 11 8 10 6 2 12\\r\\n13 25 7\\r\\n22 7 19 12 7 17 7 6 22 19 5 5 23\\r\\n1 6 1\\r\\n6\\r\\n1 15 1\\r\\n7\\r\\n', 'output': ['1\\n3\\n5\\n1\\n1', '1\\r\\n3\\r\\n5\\r\\n1\\r\\n1']}, {'input': '1\\r\\n100 90 100\\r\\n8 39 60 46 68 2 42 45 7 54 89 78 16 59 21 29 5 30 20 12 64 42 34 33 13 17 55 30 54 31 23 27 38 36 2 49 45 43 47 55 4 6 55 38 60 16 34 86 67 76 55 86 39 62 12 58 74 51 10 31 38 85 50 61 48 35 69 24 64 53 4 19 15 35 28 22 88 3 25 60 9 40 67 47 26 57 58 61 65 21 76 4 15 35 37 49 62 45 81 32\\r\\n', 'output': ['67']}, {'input': '1\\r\\n100 100 100\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['100']}, {'input': '1\\r\\n100 50 100\\r\\n22 28 34 29 43 8 12 12 4 29 36 38 22 5 19 38 4 41 20 33 39 11 2 40 42 8 33 23 20 47 45 30 47 33 27 23 50 26 30 43 8 3 4 38 46 32 20 19 10 3 18 29 21 19 37 30 12 38 27 44 24 39 25 18 50 44 37 22 39 41 18 26 37 40 40 16 38 9 12 36 27 31 45 47 31 31 29 48 25 7 29 24 10 2 8 3 36 48 8 9\\r\\n', 'output': ['42']}, {'input': '1\\r\\n100 1 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 10 100\\r\\n9 2 2 3 5 2 2 3 4 9 5 3 6 2 1 4 4 8 6 2 3 10 4 1 5 2 8 8 3 9 2 7 2 3 4 2 2 8 9 7 10 3 7 7 4 4 8 8 9 7 1 8 10 3 6 8 1 9 4 6 5 6 9 2 9 6 7 10 5 8 7 10 6 1 9 2 10 10 10 9 6 5 6 9 2 8 1 2 2 5 6 6 3 3 7 10 10 1 6 3\\r\\n', 'output': ['10']}, {'input': '1\\r\\n100 2 100\\r\\n2 1 2 2 1 2 2 1 1 2 2 2 2 2 1 1 1 1 2 1 1 1 2 2 2 1 1 1 2 1 1 1 1 2 1 1 1 1 2 2 2 2 1 2 2 1 2 1 1 1 1 2 2 2 1 1 2 1 2 2 2 2 1 1 1 2 1 1 1 1 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 1 1 1 2 1 2 1 2 2 2 1 2\\r\\n', 'output': ['2']}, {'input': '1\\r\\n100 16 100\\r\\n1 11 2 2 13 8 3 15 8 11 13 1 16 16 3 5 12 10 11 16 1 14 16 8 14 3 15 8 2 8 10 1 16 14 8 4 2 10 3 8 3 5 8 10 4 12 11 8 8 15 16 5 7 6 3 9 15 7 1 14 14 2 13 4 10 6 12 13 9 8 9 2 9 3 2 12 9 3 8 11 14 9 3 3 15 10 12 10 10 16 2 12 13 7 6 7 13 1 14 15\\r\\n', 'output': ['16']}, {'input': '1\\r\\n100 100 50\\r\\n40 23 65 71 63 65 82 49 42 62 80 68 30 97 95 11 19 16 50 33 99 40 100 88 7 52 83 80 68 30 32 40 67 16 45 89 54 88 9 42 40 65 96 97 9 100 53 84 40 40 66 13 47 30 71 14 83 18 35 70 73 52 17 91 87 59 81 5 84 94 1 9 23 90 32 91 69 77 38 84 38 74 6 26 100 47 39 23 84 90 67 86 67 80 31 51 71 97 69 68\\r\\n', 'output': ['34']}, {'input': '1\\r\\n100 100 33\\r\\n78 92 82 75 58 98 94 39 38 88 89 78 2 95 53 47 74 95 14 92 49 44 8 67 31 77 90 20 16 92 19 32 26 75 81 4 79 46 21 44 5 19 64 72 13 9 74 58 84 62 70 86 77 4 39 97 1 67 98 99 89 34 29 13 24 2 69 68 30 66 77 16 26 49 1 25 89 26 28 25 96 55 51 44 10 7 36 75 12 81 31 46 52 55 48 78 82 95 39 44\\r\\n', 'output': ['28']}, {'input': '1\\r\\n100 1 1\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 20 1\\r\\n10 17 9 8 11 8 8 3 7 20 11 10 7 7 2 13 10 7 7 10 7 8 4 17 20 9 5 18 12 8 3 5 19 1 18 14 9 11 12 11 11 12 12 9 13 8 20 3 8 1 15 20 6 18 8 1 13 11 4 17 12 15 4 4 11 19 18 5 2 12 15 20 5 8 11 16 14 13 17 14 14 5 6 8 8 13 6 3 18 14 8 14 11 11 9 4 18 1 16 6\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 20 2\\r\\n18 1 3 1 13 1 3 15 3 2 7 14 1 8 1 10 1 1 9 18 11 6 9 12 17 5 6 7 13 14 9 4 6 14 7 14 19 6 13 10 7 2 17 3 10 11 11 7 2 4 9 12 11 6 20 20 4 16 7 10 8 4 19 18 2 4 6 5 20 2 12 6 20 20 18 7 11 20 10 2 8 5 16 4 19 17 18 9 7 9 13 10 3 12 18 2 6 12 18 10\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 100 1\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 100 2\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['2']}, {'input': '1\\r\\n100 100 10\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['10']}, {'input': '1\\r\\n100 100 99\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['99']}, {'input': '1\\r\\n100 100 100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n', 'output': ['100']}, {'input': '1\\r\\n100 100 1\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['1']}, {'input': '1\\r\\n100 100 2\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['2']}, {'input': '1\\r\\n100 100 3\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['3']}, {'input': '1\\r\\n100 100 99\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['99']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n\tprivate void solve() throws IOException {\n\t\tint n = reader.nextInt();\n\t\tint k = reader.nextInt();\n\t\tint d = reader.nextInt();\n\t\t\n\t\tint[] show = new int[n];\n\t\tfor(int i = 0 ; i < n ; i++) {\n\t\t\tshow[i] = reader.nextInt();\n\t\t}\n\t\t\n\t\tint[] counter = new int[k + 1];\n\t\tint[] maxCounter = new int[k + 1];\n\t\t\n\t\tmaxCounter[0] = 0;\n\t\tcounter[0] = 0;\n\t\t\n\t\tint min = 0;\n\t\tfor(int i = 0 ; i < n ; i++){\n\t\t\tcounter[show[i]]++;\n\t\t\tif(counter[show[i]] > maxCounter[show[i]]){\n\t\t\t\tmaxCounter[show[i]] = counter[show[i]];\n\t\t\t}\n\t\t\tif(maxCounter[show[i]] > maxCounter[min]) {\n\t\t\t\tmin = show[i];\n\t\t\t}\n\t\t}\n\t\t\n\t\t//System.out.println(Arrays.toString(maxCounter));\n\t\t//System.out.println(min);\n\t\t\n\t\tint num = 0;\n\t\tint minD = k;\n\t\tfor(int i = 0 ; i < k ; i++){\n\t\t\tint cnt = 0;\n\t\t\tint max = 0;\n\t\t\tfor(int j = i ; j < k ; j++){\n\t\t\t\tcnt += maxCounter[j];\n\t\t\t\tif(maxCounter[j] > max){\n\t\t\t\t\tmax = maxCounter[j];\n\t\t\t\t}\n\t\t\t\tif(cnt >= d){\n\t\t\t\t\tminD = j + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cnt >= d && max - maxCounter[i] >= d - 1){\n\t\t\t\tnum++;\n\t\t\t}\n\t\t}\n\t\t\n\t\twriter.println(num + 1);\n\t\t\n\t}\n\t\n\tpublic void run() throws IOException {\n\t\treader = new StandardInput();\n\t\twriter = new StandardOutput();\n\t\tint t = reader.nextInt();\n\t\tfor(int i = 0 ; i < t ; i++) {\n\t\t\tsolve();\n\t\t}\n\t\treader.close();\n\t\twriter.close();\n\t}\n\t\n\t//---------------------------------------------------------\n\t//--------------------- Input Class ---------------------\n\t//---------------------------------------------------------\n\t\n\tprivate interface Input {\n\t\tpublic String next();\n\t\tpublic default int nextInt() { return Integer.parseInt(next()); }\n\t\tpublic default long nextLong() { return Long.parseLong(next()); }\n\t\tpublic default int[] readIntArray() { return readIntArray(next()); }\n\t\tpublic default int[] readIntArray(String line) { return readIntArray(line, \" \"); }\n\t\tpublic default int[] readIntArray(String line, String delimiter) { return toIntArray(line.split(delimiter)); }\n\t\tpublic default long[] readLongArray(String line, String delimiter) { return toLongArray(line.split(delimiter)); }\n\t\tpublic default int[][] readIntArray2(String line, String delimiter) { return readIntArray2(line, delimiter, delimiter); }\n\t\tpublic default int[][] readIntArray2(String line, String delimiter1, String delimiter2) { \n\t\t\tint[] array = readIntArray(line);\n\t\t\tint[][] array2 = new int[array.length][];\n\t\t\tfor(int i = 0 ; i < array.length ; i++) {\n\t\t\t\tarray2[i] = readIntArray(next(), delimiter2);\n\t\t\t}\n\t\t\treturn array2;\n\t\t}\n\t\tpublic default long[][] readLongArray2(String line, String delimiter1, String delimiter2) { \n\t\t\tlong[] array = readLongArray(line);\n\t\t\tlong[][] array2 = new long[array."}
{"src_uid": "5a623c49cf7effacfb58bc82f8eaff37", "id": 63, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '1 7 11 5\\r\\n', 'output': ['YES']}, {'input': '7 3 2 5\\r\\n', 'output': ['NO']}, {'input': '3 14 36 53\\r\\n', 'output': ['YES']}, {'input': '30 74 41 63\\r\\n', 'output': ['YES']}, {'input': '92 69 83 97\\r\\n', 'output': ['NO']}, {'input': '26 52 7 19\\r\\n', 'output': ['YES']}, {'input': '72 52 62 62\\r\\n', 'output': ['YES']}, {'input': '1 1 1 1\\r\\n', 'output': ['YES']}, {'input': '70 100 10 86\\r\\n', 'output': ['NO']}, {'input': '14 10 18 24\\r\\n', 'output': ['NO']}, {'input': '20 14 37 71\\r\\n', 'output': ['YES']}, {'input': '1 1 2 1\\r\\n', 'output': ['NO']}, {'input': '2 4 1 1\\r\\n', 'output': ['YES']}, {'input': '34 11 84 39\\r\\n', 'output': ['YES']}, {'input': '76 97 99 74\\r\\n', 'output': ['YES']}, {'input': '44 58 90 53\\r\\n', 'output': ['NO']}, {'input': '18 88 18 18\\r\\n', 'output': ['NO']}, {'input': '48 14 3 31\\r\\n', 'output': ['YES']}, {'input': '72 96 2 26\\r\\n', 'output': ['YES']}, {'input': '69 7 44 30\\r\\n', 'output': ['NO']}, {'input': '66 68 16 82\\r\\n', 'output': ['NO']}, {'input': '100 100 100 100\\r\\n', 'output': ['YES']}, {'input': '100 98 99 97\\r\\n', 'output': ['YES']}, {'input': '1 100 100 1\\r\\n', 'output': ['YES']}, {'input': '100 100 99 100\\r\\n', 'output': ['NO']}, {'input': '99 100 3 98\\r\\n', 'output': ['NO']}, {'input': '4 4 4 5\\r\\n', 'output': ['NO']}, {'input': '2 6 3 2\\r\\n', 'output': ['NO']}, {'input': '7 3 6 3\\r\\n', 'output': ['NO']}, {'input': '14 9 10 6\\r\\n', 'output': ['NO']}, {'input': '2 4 6 6\\r\\n', 'output': ['NO']}, {'input': '4 2 4 2\\r\\n', 'output': ['YES']}, {'input': '4 4 4 8\\r\\n', 'output': ['NO']}, {'input': '6 4 8 6\\r\\n', 'output': ['YES']}, {'input': '97 95 91 27\\r\\n', 'output': ['NO']}, {'input': '1 2 3 2\\r\\n', 'output': ['YES']}, {'input': '1 2 8 9\\r\\n', 'output': ['YES']}, {'input': '5 10 1 6\\r\\n', 'output': ['YES']}, {'input': '1 2 3 5\\r\\n', 'output': ['NO']}, {'input': '3 5 1 3\\r\\n', 'output': ['YES']}, {'input': '1 2 3 3\\r\\n', 'output': ['NO']}, {'input': '1 1 14 12\\r\\n', 'output': ['YES']}, {'input': '1 1 1 2\\r\\n', 'output': ['NO']}, {'input': '6 3 6 6\\r\\n', 'output': ['NO']}, {'input': '10 2 3 5\\r\\n', 'output': ['YES']}, {'input': '1 2 10 7\\r\\n', 'output': ['YES']}, {'input': '3 1 1 1\\r\\n', 'output': ['YES']}, {'input': '1 2 5 5\\r\\n', 'output': ['NO']}, {'input': '2 3 10 10\\r\\n', 'output': ['NO']}, {'input': '2 2 4 6\\r\\n', 'output': ['NO']}, {'input': '1 1 10 20\\r\\n', 'output': ['NO']}, {'input': '1 1 3 1\\r\\n', 'output': ['YES']}, {'input': '1 2 1 3\\r\\n', 'output': ['NO']}, {'input': '18 17 17 20\\r\\n', 'output': ['NO']}, {'input': '3 2 1 1\\r\\n', 'output': ['NO']}, {'input': '1 1 4 5\\r\\n', 'output': ['NO']}, {'input': '90 30 30 30\\r\\n', 'output': ['YES']}, {'input': '1 2 6 3\\r\\n', 'output': ['YES']}, {'input': '2 3 3 4\\r\\n', 'output': ['YES']}, {'input': '1 1 4 2\\r\\n', 'output': ['YES']}, {'input': '1 1 2 3\\r\\n', 'output': ['NO']}, {'input': '1 1 3 4\\r\\n', 'output': ['NO']}, {'input': '2 1 28 9\\r\\n', 'output': ['NO']}, {'input': '1 2 3 4\\r\\n', 'output': ['YES']}, {'input': '1 2 4 5\\r\\n', 'output': ['YES']}, {'input': '2 2 6 2\\r\\n', 'output': ['YES']}, {'input': '2 3 2 5\\r\\n', 'output': ['NO']}, {'input': '5 7 1 3\\r\\n', 'output': ['YES']}, {'input': '4 4 12 4\\r\\n', 'output': ['YES']}, {'input': '1 2 2 7\\r\\n', 'output': ['NO']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Solution {\n    public static void main(String[] args) throws IOException{\n        try(InputStream in = System.in; \n            OutputStream out = System.out;\n            PrintStream writer = new PrintStream(out)) {\n            StringTokenizer st = new StringTokenizer(in.readAllBytes(), System.lineSeparator());\n            int[] arr = new int[4];\n            arr[0] = Integer.parseInt(st.nextToken());\n            arr[1] = Integer.parseInt(st.nextToken());\n            arr[2] = Integer.parseInt(st.nextToken());\n            arr[3] = Integer.parseInt(st.nextToken());\n            int sum = 0;\n            for(int val: arr){\n                sum += val;\n            }\n            if((sum % 2)!= 0){\n                writer.println(\"NO\");\n            }else{\n                int div = sum/2;\n                int count = 0;\n                for(int val: arr){\n                    if(val == div){\n                        count++;\n                    }\n                }\n                if(count == 4){\n                    writer.println(\"YES\");\n                }else{\n                    writer.println(\"NO\");\n                }\n            }\n        }\n    }\n}"}
{"src_uid": "5a623c49cf7effacfb58bc82f8eaff37", "id": 63, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '1 7 11 5\\r\\n', 'output': ['YES']}, {'input': '7 3 2 5\\r\\n', 'output': ['NO']}, {'input': '3 14 36 53\\r\\n', 'output': ['YES']}, {'input': '30 74 41 63\\r\\n', 'output': ['YES']}, {'input': '92 69 83 97\\r\\n', 'output': ['NO']}, {'input': '26 52 7 19\\r\\n', 'output': ['YES']}, {'input': '72 52 62 62\\r\\n', 'output': ['YES']}, {'input': '1 1 1 1\\r\\n', 'output': ['YES']}, {'input': '70 100 10 86\\r\\n', 'output': ['NO']}, {'input': '14 10 18 24\\r\\n', 'output': ['NO']}, {'input': '20 14 37 71\\r\\n', 'output': ['YES']}, {'input': '1 1 2 1\\r\\n', 'output': ['NO']}, {'input': '2 4 1 1\\r\\n', 'output': ['YES']}, {'input': '34 11 84 39\\r\\n', 'output': ['YES']}, {'input': '76 97 99 74\\r\\n', 'output': ['YES']}, {'input': '44 58 90 53\\r\\n', 'output': ['NO']}, {'input': '18 88 18 18\\r\\n', 'output': ['NO']}, {'input': '48 14 3 31\\r\\n', 'output': ['YES']}, {'input': '72 96 2 26\\r\\n', 'output': ['YES']}, {'input': '69 7 44 30\\r\\n', 'output': ['NO']}, {'input': '66 68 16 82\\r\\n', 'output': ['NO']}, {'input': '100 100 100 100\\r\\n', 'output': ['YES']}, {'input': '100 98 99 97\\r\\n', 'output': ['YES']}, {'input': '1 100 100 1\\r\\n', 'output': ['YES']}, {'input': '100 100 99 100\\r\\n', 'output': ['NO']}, {'input': '99 100 3 98\\r\\n', 'output': ['NO']}, {'input': '4 4 4 5\\r\\n', 'output': ['NO']}, {'input': '2 6 3 2\\r\\n', 'output': ['NO']}, {'input': '7 3 6 3\\r\\n', 'output': ['NO']}, {'input': '14 9 10 6\\r\\n', 'output': ['NO']}, {'input': '2 4 6 6\\r\\n', 'output': ['NO']}, {'input': '4 2 4 2\\r\\n', 'output': ['YES']}, {'input': '4 4 4 8\\r\\n', 'output': ['NO']}, {'input': '6 4 8 6\\r\\n', 'output': ['YES']}, {'input': '97 95 91 27\\r\\n', 'output': ['NO']}, {'input': '1 2 3 2\\r\\n', 'output': ['YES']}, {'input': '1 2 8 9\\r\\n', 'output': ['YES']}, {'input': '5 10 1 6\\r\\n', 'output': ['YES']}, {'input': '1 2 3 5\\r\\n', 'output': ['NO']}, {'input': '3 5 1 3\\r\\n', 'output': ['YES']}, {'input': '1 2 3 3\\r\\n', 'output': ['NO']}, {'input': '1 1 14 12\\r\\n', 'output': ['YES']}, {'input': '1 1 1 2\\r\\n', 'output': ['NO']}, {'input': '6 3 6 6\\r\\n', 'output': ['NO']}, {'input': '10 2 3 5\\r\\n', 'output': ['YES']}, {'input': '1 2 10 7\\r\\n', 'output': ['YES']}, {'input': '3 1 1 1\\r\\n', 'output': ['YES']}, {'input': '1 2 5 5\\r\\n', 'output': ['NO']}, {'input': '2 3 10 10\\r\\n', 'output': ['NO']}, {'input': '2 2 4 6\\r\\n', 'output': ['NO']}, {'input': '1 1 10 20\\r\\n', 'output': ['NO']}, {'input': '1 1 3 1\\r\\n', 'output': ['YES']}, {'input': '1 2 1 3\\r\\n', 'output': ['NO']}, {'input': '18 17 17 20\\r\\n', 'output': ['NO']}, {'input': '3 2 1 1\\r\\n', 'output': ['NO']}, {'input': '1 1 4 5\\r\\n', 'output': ['NO']}, {'input': '90 30 30 30\\r\\n', 'output': ['YES']}, {'input': '1 2 6 3\\r\\n', 'output': ['YES']}, {'input': '2 3 3 4\\r\\n', 'output': ['YES']}, {'input': '1 1 4 2\\r\\n', 'output': ['YES']}, {'input': '1 1 2 3\\r\\n', 'output': ['NO']}, {'input': '1 1 3 4\\r\\n', 'output': ['NO']}, {'input': '2 1 28 9\\r\\n', 'output': ['NO']}, {'input': '1 2 3 4\\r\\n', 'output': ['YES']}, {'input': '1 2 4 5\\r\\n', 'output': ['YES']}, {'input': '2 2 6 2\\r\\n', 'output': ['YES']}, {'input': '2 3 2 5\\r\\n', 'output': ['NO']}, {'input': '5 7 1 3\\r\\n', 'output': ['YES']}, {'input': '4 4 12 4\\r\\n', 'output': ['YES']}, {'input': '1 2 2 7\\r\\n', 'output': ['NO']}]", "source_code": "import java.util.*;\n\npublic class GiveCandies{\n\tpublic static void main (String[] args){\n\t\tint a,b,c,d,total,friend1,friend2;\n\t\tScanner scan = new Scanner(System.in);\n\t\t\ta = scan.nextInt();\n\t\t\tb = scan.nextInt();\n\t\t\tc = scan.nextInt();\n\t\t\td = scan.nextInt();\n\t\t\ttotal = a+b+c+d;\n\t\t\tif(total%2==0){\n\t\t\t\tfriend1 = total/2;\n\t\t\t\tfriend2 = friend1;\n\t\t\t\tif(a+c==friend1 || a+d==friend1 || b+c==friend1 || b+d==friend1){\n\t\t\t\t\tSystem.out.println(\"YES\");\n\t\t\t\t}else{\n\t\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t}\n\t}\n}\n"}
{"src_uid": "5a623c49cf7effacfb58bc82f8eaff37", "id": 63, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '1 7 11 5\\r\\n', 'output': ['YES']}, {'input': '7 3 2 5\\r\\n', 'output': ['NO']}, {'input': '3 14 36 53\\r\\n', 'output': ['YES']}, {'input': '30 74 41 63\\r\\n', 'output': ['YES']}, {'input': '92 69 83 97\\r\\n', 'output': ['NO']}, {'input': '26 52 7 19\\r\\n', 'output': ['YES']}, {'input': '72 52 62 62\\r\\n', 'output': ['YES']}, {'input': '1 1 1 1\\r\\n', 'output': ['YES']}, {'input': '70 100 10 86\\r\\n', 'output': ['NO']}, {'input': '14 10 18 24\\r\\n', 'output': ['NO']}, {'input': '20 14 37 71\\r\\n', 'output': ['YES']}, {'input': '1 1 2 1\\r\\n', 'output': ['NO']}, {'input': '2 4 1 1\\r\\n', 'output': ['YES']}, {'input': '34 11 84 39\\r\\n', 'output': ['YES']}, {'input': '76 97 99 74\\r\\n', 'output': ['YES']}, {'input': '44 58 90 53\\r\\n', 'output': ['NO']}, {'input': '18 88 18 18\\r\\n', 'output': ['NO']}, {'input': '48 14 3 31\\r\\n', 'output': ['YES']}, {'input': '72 96 2 26\\r\\n', 'output': ['YES']}, {'input': '69 7 44 30\\r\\n', 'output': ['NO']}, {'input': '66 68 16 82\\r\\n', 'output': ['NO']}, {'input': '100 100 100 100\\r\\n', 'output': ['YES']}, {'input': '100 98 99 97\\r\\n', 'output': ['YES']}, {'input': '1 100 100 1\\r\\n', 'output': ['YES']}, {'input': '100 100 99 100\\r\\n', 'output': ['NO']}, {'input': '99 100 3 98\\r\\n', 'output': ['NO']}, {'input': '4 4 4 5\\r\\n', 'output': ['NO']}, {'input': '2 6 3 2\\r\\n', 'output': ['NO']}, {'input': '7 3 6 3\\r\\n', 'output': ['NO']}, {'input': '14 9 10 6\\r\\n', 'output': ['NO']}, {'input': '2 4 6 6\\r\\n', 'output': ['NO']}, {'input': '4 2 4 2\\r\\n', 'output': ['YES']}, {'input': '4 4 4 8\\r\\n', 'output': ['NO']}, {'input': '6 4 8 6\\r\\n', 'output': ['YES']}, {'input': '97 95 91 27\\r\\n', 'output': ['NO']}, {'input': '1 2 3 2\\r\\n', 'output': ['YES']}, {'input': '1 2 8 9\\r\\n', 'output': ['YES']}, {'input': '5 10 1 6\\r\\n', 'output': ['YES']}, {'input': '1 2 3 5\\r\\n', 'output': ['NO']}, {'input': '3 5 1 3\\r\\n', 'output': ['YES']}, {'input': '1 2 3 3\\r\\n', 'output': ['NO']}, {'input': '1 1 14 12\\r\\n', 'output': ['YES']}, {'input': '1 1 1 2\\r\\n', 'output': ['NO']}, {'input': '6 3 6 6\\r\\n', 'output': ['NO']}, {'input': '10 2 3 5\\r\\n', 'output': ['YES']}, {'input': '1 2 10 7\\r\\n', 'output': ['YES']}, {'input': '3 1 1 1\\r\\n', 'output': ['YES']}, {'input': '1 2 5 5\\r\\n', 'output': ['NO']}, {'input': '2 3 10 10\\r\\n', 'output': ['NO']}, {'input': '2 2 4 6\\r\\n', 'output': ['NO']}, {'input': '1 1 10 20\\r\\n', 'output': ['NO']}, {'input': '1 1 3 1\\r\\n', 'output': ['YES']}, {'input': '1 2 1 3\\r\\n', 'output': ['NO']}, {'input': '18 17 17 20\\r\\n', 'output': ['NO']}, {'input': '3 2 1 1\\r\\n', 'output': ['NO']}, {'input': '1 1 4 5\\r\\n', 'output': ['NO']}, {'input': '90 30 30 30\\r\\n', 'output': ['YES']}, {'input': '1 2 6 3\\r\\n', 'output': ['YES']}, {'input': '2 3 3 4\\r\\n', 'output': ['YES']}, {'input': '1 1 4 2\\r\\n', 'output': ['YES']}, {'input': '1 1 2 3\\r\\n', 'output': ['NO']}, {'input': '1 1 3 4\\r\\n', 'output': ['NO']}, {'input': '2 1 28 9\\r\\n', 'output': ['NO']}, {'input': '1 2 3 4\\r\\n', 'output': ['YES']}, {'input': '1 2 4 5\\r\\n', 'output': ['YES']}, {'input': '2 2 6 2\\r\\n', 'output': ['YES']}, {'input': '2 3 2 5\\r\\n', 'output': ['NO']}, {'input': '5 7 1 3\\r\\n', 'output': ['YES']}, {'input': '4 4 12 4\\r\\n', 'output': ['YES']}, {'input': '1 2 2 7\\r\\n', 'output': ['NO']}]", "source_code": "import java.util.Arrays;\nimport java.util.Collections;\nimport static java.util.Collections.reverseOrder;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class DawidAndCandies {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int a1 = in.nextInt(), a2 = in.nextInt(), a3 = in.nextInt(), a4 = in.nextInt(), sum = (a1 + a2 + a3 + a4) / 2;\n        System.out.println(((a1 + a2 + a3 + a4) % 2 == 0 && a1 <= sum && a2 <= sum && a3 <= sum && a4 <= sum)? \"YES\" : \"NO\");\n    }\n}\n"}
{"src_uid": "5a623c49cf7effacfb58bc82f8eaff37", "id": 63, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '1 7 11 5\\r\\n', 'output': ['YES']}, {'input': '7 3 2 5\\r\\n', 'output': ['NO']}, {'input': '3 14 36 53\\r\\n', 'output': ['YES']}, {'input': '30 74 41 63\\r\\n', 'output': ['YES']}, {'input': '92 69 83 97\\r\\n', 'output': ['NO']}, {'input': '26 52 7 19\\r\\n', 'output': ['YES']}, {'input': '72 52 62 62\\r\\n', 'output': ['YES']}, {'input': '1 1 1 1\\r\\n', 'output': ['YES']}, {'input': '70 100 10 86\\r\\n', 'output': ['NO']}, {'input': '14 10 18 24\\r\\n', 'output': ['NO']}, {'input': '20 14 37 71\\r\\n', 'output': ['YES']}, {'input': '1 1 2 1\\r\\n', 'output': ['NO']}, {'input': '2 4 1 1\\r\\n', 'output': ['YES']}, {'input': '34 11 84 39\\r\\n', 'output': ['YES']}, {'input': '76 97 99 74\\r\\n', 'output': ['YES']}, {'input': '44 58 90 53\\r\\n', 'output': ['NO']}, {'input': '18 88 18 18\\r\\n', 'output': ['NO']}, {'input': '48 14 3 31\\r\\n', 'output': ['YES']}, {'input': '72 96 2 26\\r\\n', 'output': ['YES']}, {'input': '69 7 44 30\\r\\n', 'output': ['NO']}, {'input': '66 68 16 82\\r\\n', 'output': ['NO']}, {'input': '100 100 100 100\\r\\n', 'output': ['YES']}, {'input': '100 98 99 97\\r\\n', 'output': ['YES']}, {'input': '1 100 100 1\\r\\n', 'output': ['YES']}, {'input': '100 100 99 100\\r\\n', 'output': ['NO']}, {'input': '99 100 3 98\\r\\n', 'output': ['NO']}, {'input': '4 4 4 5\\r\\n', 'output': ['NO']}, {'input': '2 6 3 2\\r\\n', 'output': ['NO']}, {'input': '7 3 6 3\\r\\n', 'output': ['NO']}, {'input': '14 9 10 6\\r\\n', 'output': ['NO']}, {'input': '2 4 6 6\\r\\n', 'output': ['NO']}, {'input': '4 2 4 2\\r\\n', 'output': ['YES']}, {'input': '4 4 4 8\\r\\n', 'output': ['NO']}, {'input': '6 4 8 6\\r\\n', 'output': ['YES']}, {'input': '97 95 91 27\\r\\n', 'output': ['NO']}, {'input': '1 2 3 2\\r\\n', 'output': ['YES']}, {'input': '1 2 8 9\\r\\n', 'output': ['YES']}, {'input': '5 10 1 6\\r\\n', 'output': ['YES']}, {'input': '1 2 3 5\\r\\n', 'output': ['NO']}, {'input': '3 5 1 3\\r\\n', 'output': ['YES']}, {'input': '1 2 3 3\\r\\n', 'output': ['NO']}, {'input': '1 1 14 12\\r\\n', 'output': ['YES']}, {'input': '1 1 1 2\\r\\n', 'output': ['NO']}, {'input': '6 3 6 6\\r\\n', 'output': ['NO']}, {'input': '10 2 3 5\\r\\n', 'output': ['YES']}, {'input': '1 2 10 7\\r\\n', 'output': ['YES']}, {'input': '3 1 1 1\\r\\n', 'output': ['YES']}, {'input': '1 2 5 5\\r\\n', 'output': ['NO']}, {'input': '2 3 10 10\\r\\n', 'output': ['NO']}, {'input': '2 2 4 6\\r\\n', 'output': ['NO']}, {'input': '1 1 10 20\\r\\n', 'output': ['NO']}, {'input': '1 1 3 1\\r\\n', 'output': ['YES']}, {'input': '1 2 1 3\\r\\n', 'output': ['NO']}, {'input': '18 17 17 20\\r\\n', 'output': ['NO']}, {'input': '3 2 1 1\\r\\n', 'output': ['NO']}, {'input': '1 1 4 5\\r\\n', 'output': ['NO']}, {'input': '90 30 30 30\\r\\n', 'output': ['YES']}, {'input': '1 2 6 3\\r\\n', 'output': ['YES']}, {'input': '2 3 3 4\\r\\n', 'output': ['YES']}, {'input': '1 1 4 2\\r\\n', 'output': ['YES']}, {'input': '1 1 2 3\\r\\n', 'output': ['NO']}, {'input': '1 1 3 4\\r\\n', 'output': ['NO']}, {'input': '2 1 28 9\\r\\n', 'output': ['NO']}, {'input': '1 2 3 4\\r\\n', 'output': ['YES']}, {'input': '1 2 4 5\\r\\n', 'output': ['YES']}, {'input': '2 2 6 2\\r\\n', 'output': ['YES']}, {'input': '2 3 2 5\\r\\n', 'output': ['NO']}, {'input': '5 7 1 3\\r\\n', 'output': ['YES']}, {'input': '4 4 12 4\\r\\n', 'output': ['YES']}, {'input': '1 2 2 7\\r\\n', 'output': ['NO']}]", "source_code": "import java.util.*;\n\npublic class cf{\n   public static void main(String[] args){\n      Scanner in = new Scanner(System.in);\n      int a[]=new int[4];\n      for(int i=0;i<4;i++)\n         a[i]=in.nextInt();\n      \n      for(int i=0;i<4;i++){\n         for(int j=i;j<4;j++){\n            if((a[i]+a[j])==(a[0]+a[3]) || (a[i]+a[j])==(a[1]+a[2]))\n               System.out.println(\"YES\");\n            else if((a[i]+a[j])>(a[0]+a[3]) || (a[i]+a[j])>(a[1]+a[2]))\n               System.out.println(\"NO\");\n         }\n      }\n   }\n}"}
{"src_uid": "5a623c49cf7effacfb58bc82f8eaff37", "id": 63, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '1 7 11 5\\r\\n', 'output': ['YES']}, {'input': '7 3 2 5\\r\\n', 'output': ['NO']}, {'input': '3 14 36 53\\r\\n', 'output': ['YES']}, {'input': '30 74 41 63\\r\\n', 'output': ['YES']}, {'input': '92 69 83 97\\r\\n', 'output': ['NO']}, {'input': '26 52 7 19\\r\\n', 'output': ['YES']}, {'input': '72 52 62 62\\r\\n', 'output': ['YES']}, {'input': '1 1 1 1\\r\\n', 'output': ['YES']}, {'input': '70 100 10 86\\r\\n', 'output': ['NO']}, {'input': '14 10 18 24\\r\\n', 'output': ['NO']}, {'input': '20 14 37 71\\r\\n', 'output': ['YES']}, {'input': '1 1 2 1\\r\\n', 'output': ['NO']}, {'input': '2 4 1 1\\r\\n', 'output': ['YES']}, {'input': '34 11 84 39\\r\\n', 'output': ['YES']}, {'input': '76 97 99 74\\r\\n', 'output': ['YES']}, {'input': '44 58 90 53\\r\\n', 'output': ['NO']}, {'input': '18 88 18 18\\r\\n', 'output': ['NO']}, {'input': '48 14 3 31\\r\\n', 'output': ['YES']}, {'input': '72 96 2 26\\r\\n', 'output': ['YES']}, {'input': '69 7 44 30\\r\\n', 'output': ['NO']}, {'input': '66 68 16 82\\r\\n', 'output': ['NO']}, {'input': '100 100 100 100\\r\\n', 'output': ['YES']}, {'input': '100 98 99 97\\r\\n', 'output': ['YES']}, {'input': '1 100 100 1\\r\\n', 'output': ['YES']}, {'input': '100 100 99 100\\r\\n', 'output': ['NO']}, {'input': '99 100 3 98\\r\\n', 'output': ['NO']}, {'input': '4 4 4 5\\r\\n', 'output': ['NO']}, {'input': '2 6 3 2\\r\\n', 'output': ['NO']}, {'input': '7 3 6 3\\r\\n', 'output': ['NO']}, {'input': '14 9 10 6\\r\\n', 'output': ['NO']}, {'input': '2 4 6 6\\r\\n', 'output': ['NO']}, {'input': '4 2 4 2\\r\\n', 'output': ['YES']}, {'input': '4 4 4 8\\r\\n', 'output': ['NO']}, {'input': '6 4 8 6\\r\\n', 'output': ['YES']}, {'input': '97 95 91 27\\r\\n', 'output': ['NO']}, {'input': '1 2 3 2\\r\\n', 'output': ['YES']}, {'input': '1 2 8 9\\r\\n', 'output': ['YES']}, {'input': '5 10 1 6\\r\\n', 'output': ['YES']}, {'input': '1 2 3 5\\r\\n', 'output': ['NO']}, {'input': '3 5 1 3\\r\\n', 'output': ['YES']}, {'input': '1 2 3 3\\r\\n', 'output': ['NO']}, {'input': '1 1 14 12\\r\\n', 'output': ['YES']}, {'input': '1 1 1 2\\r\\n', 'output': ['NO']}, {'input': '6 3 6 6\\r\\n', 'output': ['NO']}, {'input': '10 2 3 5\\r\\n', 'output': ['YES']}, {'input': '1 2 10 7\\r\\n', 'output': ['YES']}, {'input': '3 1 1 1\\r\\n', 'output': ['YES']}, {'input': '1 2 5 5\\r\\n', 'output': ['NO']}, {'input': '2 3 10 10\\r\\n', 'output': ['NO']}, {'input': '2 2 4 6\\r\\n', 'output': ['NO']}, {'input': '1 1 10 20\\r\\n', 'output': ['NO']}, {'input': '1 1 3 1\\r\\n', 'output': ['YES']}, {'input': '1 2 1 3\\r\\n', 'output': ['NO']}, {'input': '18 17 17 20\\r\\n', 'output': ['NO']}, {'input': '3 2 1 1\\r\\n', 'output': ['NO']}, {'input': '1 1 4 5\\r\\n', 'output': ['NO']}, {'input': '90 30 30 30\\r\\n', 'output': ['YES']}, {'input': '1 2 6 3\\r\\n', 'output': ['YES']}, {'input': '2 3 3 4\\r\\n', 'output': ['YES']}, {'input': '1 1 4 2\\r\\n', 'output': ['YES']}, {'input': '1 1 2 3\\r\\n', 'output': ['NO']}, {'input': '1 1 3 4\\r\\n', 'output': ['NO']}, {'input': '2 1 28 9\\r\\n', 'output': ['NO']}, {'input': '1 2 3 4\\r\\n', 'output': ['YES']}, {'input': '1 2 4 5\\r\\n', 'output': ['YES']}, {'input': '2 2 6 2\\r\\n', 'output': ['YES']}, {'input': '2 3 2 5\\r\\n', 'output': ['NO']}, {'input': '5 7 1 3\\r\\n', 'output': ['YES']}, {'input': '4 4 12 4\\r\\n', 'output': ['YES']}, {'input': '1 2 2 7\\r\\n', 'output': ['NO']}]", "source_code": "import java.util.*;\nimport java.math.*;\n\npublic class Main {\n    static BigDecimal a;\n    static BigDecimal b;\n    static BigDecimal c;\n    static BigDecimal d;\n\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        a = new BigDecimal(scan.next());\n        b = new BigDecimal(scan.next());\n        c = new BigDecimal(scan.next());\n        d = new BigDecimal(scan.next());\n\n        if ((a.add(b)).compareTo((c).add(d)) == 0 || (a.add(c)).compareTo((b).add(d)) == 0 || (a.add(d)).compareTo((b).add(c)) == 0) {\n            System.out.println(\"YES\");\n        } else {\n            System.out.println(\"NO\");\n        }\n    }\n}"}
{"src_uid": "6c85175d334f811617e7030e0403f706", "id": 64, "lang_cluster": "java", "lang": "Java 11", "difficulty": 900, "testcases": "[{'input': 'mew\\r\\n', 'output': ['3']}, {'input': 'wuffuw\\r\\n', 'output': ['5']}, {'input': 'qqqqqqqq\\r\\n', 'output': ['0']}, {'input': 'ijvji\\r\\n', 'output': ['4']}, {'input': 'iiiiiii\\r\\n', 'output': ['0']}, {'input': 'wobervhvvkihcuyjtmqhaaigvvgiaahqmtjyuchikvvhvrebow\\r\\n', 'output': ['49']}, {'input': 'wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\\r\\n', 'output': ['0']}, {'input': 'wobervhvvkihcuyjtmqhaaigvahheoqleromusrartldojsjvy\\r\\n', 'output': ['50']}, {'input': 'ijvxljt\\r\\n', 'output': ['7']}, {'input': 'fyhcncnchyf\\r\\n', 'output': ['10']}, {'input': 'ffffffffffff\\r\\n', 'output': ['0']}, {'input': 'fyhcncfsepqj\\r\\n', 'output': ['12']}, {'input': 'ybejrrlbcinttnicblrrjeby\\r\\n', 'output': ['23']}, {'input': 'yyyyyyyyyyyyyyyyyyyyyyyyy\\r\\n', 'output': ['0']}, {'input': 'ybejrrlbcintahovgjddrqatv\\r\\n', 'output': ['25']}, {'input': 'oftmhcmclgyqaojljoaqyglcmchmtfo\\r\\n', 'output': ['30']}, {'input': 'oooooooooooooooooooooooooooooooo\\r\\n', 'output': ['0']}, {'input': 'oftmhcmclgyqaojllbotztajglsmcilv\\r\\n', 'output': ['32']}, {'input': 'gxandbtgpbknxvnkjaajknvxnkbpgtbdnaxg\\r\\n', 'output': ['35']}, {'input': 'gggggggggggggggggggggggggggggggggggg\\r\\n', 'output': ['0']}, {'input': 'gxandbtgpbknxvnkjaygommzqitqzjfalfkk\\r\\n', 'output': ['36']}, {'input': 'fcliblymyqckxvieotjooojtoeivxkcqymylbilcf\\r\\n', 'output': ['40']}, {'input': 'fffffffffffffffffffffffffffffffffffffffffff\\r\\n', 'output': ['0']}, {'input': 'fcliblymyqckxvieotjootiqwtyznhhvuhbaixwqnsy\\r\\n', 'output': ['43']}, {'input': 'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\\r\\n', 'output': ['0']}, {'input': 'rajccqwqnqmshmerpvjyfepxwpxyldzpzhctqjnstxyfmlhiy\\r\\n', 'output': ['49']}, {'input': 'a\\r\\n', 'output': ['0']}, {'input': 'abca\\r\\n', 'output': ['4']}, {'input': 'aaaaabaaaaa\\r\\n', 'output': ['10']}, {'input': 'aba\\r\\n', 'output': ['2']}, {'input': 'asaa\\r\\n', 'output': ['4']}, {'input': 'aabaa\\r\\n', 'output': ['4']}, {'input': 'aabbaa\\r\\n', 'output': ['5']}, {'input': 'abcdaaa\\r\\n', 'output': ['7']}, {'input': 'aaholaa\\r\\n', 'output': ['7']}, {'input': 'abcdefghijka\\r\\n', 'output': ['12']}, {'input': 'aaadcba\\r\\n', 'output': ['7']}, {'input': 'aaaabaaaa\\r\\n', 'output': ['8']}, {'input': 'abaa\\r\\n', 'output': ['4']}, {'input': 'abcbaa\\r\\n', 'output': ['6']}, {'input': 'ab\\r\\n', 'output': ['2']}, {'input': 'l\\r\\n', 'output': ['0']}, {'input': 'aaaabcaaaa\\r\\n', 'output': ['10']}, {'input': 'abbaaaaaabba\\r\\n', 'output': ['11']}, {'input': 'abaaa\\r\\n', 'output': ['5']}, {'input': 'baa\\r\\n', 'output': ['3']}, {'input': 'aaaaaaabbba\\r\\n', 'output': ['11']}, {'input': 'ccbcc\\r\\n', 'output': ['4']}, {'input': 'bbbaaab\\r\\n', 'output': ['7']}, {'input': 'abaaaaaaaa\\r\\n', 'output': ['10']}, {'input': 'abaaba\\r\\n', 'output': ['5']}, {'input': 'aabsdfaaaa\\r\\n', 'output': ['10']}, {'input': 'aaaba\\r\\n', 'output': ['5']}, {'input': 'aaabaaa\\r\\n', 'output': ['6']}, {'input': 'baaabbb\\r\\n', 'output': ['7']}, {'input': 'ccbbabbcc\\r\\n', 'output': ['8']}, {'input': 'cabc\\r\\n', 'output': ['4']}, {'input': 'aabcd\\r\\n', 'output': ['5']}, {'input': 'abcdea\\r\\n', 'output': ['6']}, {'input': 'bbabb\\r\\n', 'output': ['4']}, {'input': 'aaaaabababaaaaa\\r\\n', 'output': ['14']}, {'input': 'bbabbb\\r\\n', 'output': ['6']}, {'input': 'aababd\\r\\n', 'output': ['6']}, {'input': 'abaaaa\\r\\n', 'output': ['6']}, {'input': 'aaaaaaaabbba\\r\\n', 'output': ['12']}, {'input': 'aabca\\r\\n', 'output': ['5']}, {'input': 'aaabccbaaa\\r\\n', 'output': ['9']}, {'input': 'aaaaaaaaaaaaaaaaaaaab\\r\\n', 'output': ['21']}, {'input': 'babb\\r\\n', 'output': ['4']}, {'input': 'abcaa\\r\\n', 'output': ['5']}, {'input': 'qwqq\\r\\n', 'output': ['4']}, {'input': 'aaaaaaaaaaabbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaa\\r\\n', 'output': ['48']}, {'input': 'aaab\\r\\n', 'output': ['4']}, {'input': 'aaaaaabaaaaa\\r\\n', 'output': ['12']}, {'input': 'wwuww\\r\\n', 'output': ['4']}, {'input': 'aaaaabcbaaaaa\\r\\n', 'output': ['12']}, {'input': 'aaabbbaaa\\r\\n', 'output': ['8']}, {'input': 'aabcbaa\\r\\n', 'output': ['6']}, {'input': 'abccdefccba\\r\\n', 'output': ['11']}, {'input': 'aabbcbbaa\\r\\n', 'output': ['8']}, {'input': 'aaaabbaaaa\\r\\n', 'output': ['9']}, {'input': 'aabcda\\r\\n', 'output': ['6']}, {'input': 'abbca\\r\\n', 'output': ['5']}, {'input': 'aaaaaabbaaa\\r\\n', 'output': ['11']}, {'input': 'sssssspssssss\\r\\n', 'output': ['12']}, {'input': 'sdnmsdcs\\r\\n', 'output': ['8']}, {'input': 'aaabbbccbbbaaa\\r\\n', 'output': ['13']}, {'input': 'cbdbdc\\r\\n', 'output': ['6']}, {'input': 'abb\\r\\n', 'output': ['3']}, {'input': 'abcdefaaaa\\r\\n', 'output': ['10']}, {'input': 'abbbaaa\\r\\n', 'output': ['7']}, {'input': 'v\\r\\n', 'output': ['0']}, {'input': 'abccbba\\r\\n', 'output': ['7']}, {'input': 'axyza\\r\\n', 'output': ['5']}, {'input': 'abcdefgaaaa\\r\\n', 'output': ['11']}, {'input': 'aaabcdaaa\\r\\n', 'output': ['9']}, {'input': 'aaaacaaaa\\r\\n', 'output': ['8']}, {'input': 'aaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaa\\r\\n', 'output': ['42']}, {'input': 'abbbaa\\r\\n', 'output': ['6']}, {'input': 'abcdee\\r\\n', 'output': ['6']}, {'input': 'oom\\r\\n', 'output': ['3']}, {'input': 'aabcaa\\r\\n', 'output': ['6']}, {'input': 'abba\\r\\n', 'output': ['3']}, {'input': 'aaca\\r\\n', 'output': ['4']}, {'input': 'aacbca\\r\\n', 'output': ['6']}, {'input': 'ababa\\r\\n', 'output': ['4']}, {'input': 'abcda\\r\\n', 'output': ['5']}, {'input': 'cccaaccc\\r\\n', 'output': ['7']}, {'input': 'aaabcda\\r\\n', 'output': ['7']}, {'input': 'aa\\r\\n', 'output': ['0']}, {'input': 'aabaaaa\\r\\n', 'output': ['7']}, {'input': 'abbaaaa\\r\\n', 'output': ['7']}, {'input': 'aaabcbaaa\\r\\n', 'output': ['8']}, {'input': 'aabba\\r\\n', 'output': ['5']}, {'input': 'xyxx\\r\\n', 'output': ['4']}, {'input': 'aaaaaaaaaaaabc\\r\\n', 'output': ['14']}, {'input': 'bbaaaabb\\r\\n', 'output': ['7']}, {'input': 'aaabaa\\r\\n', 'output': ['6']}, {'input': 'sssssabsssss\\r\\n', 'output': ['12']}, {'input': 'bbbaaaabbb\\r\\n', 'output': ['9']}, {'input': 'abbbbaaaa\\r\\n', 'output': ['9']}, {'input': 'wwufuww\\r\\n', 'output': ['6']}, {'input': 'oowoo\\r\\n', 'output': ['4']}, {'input': 'cccaccc\\r\\n', 'output': ['6']}, {'input': 'aaa\\r\\n', 'output': ['0']}, {'input': 'bbbcc\\r\\n', 'output': ['5']}, {'input': 'abcdef\\r\\n', 'output': ['6']}, {'input': 'abbba\\r\\n', 'output': ['4']}, {'input': 'aab\\r\\n', 'output': ['3']}, {'input': 'aaba\\r\\n', 'output': ['4']}, {'input': 'azbyaaa\\r\\n', 'output': ['7']}, {'input': 'oooooiooooo\\r\\n', 'output': ['10']}, {'input': 'aabbbbbaaaaaa\\r\\n', 'output': ['13']}]", "source_code": "import java.util.*;\n\npublic class Solution{\n    \n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        String s = sc.next();\n        int[] lps = new int[s.length()];\n        int n = s.length();\n        int m = 1;\n        int p = 2;\n        while(p<=n){\n            if(s.charAt(p-1) == s.charAt(p)){\n                p++;\n                continue;\n            }\n            int q = p - m;\n            if(p%2 == 1){\n                q = p - 1 - m;\n            }\n            while(q>0 && q+m <= n && s.charAt(q) == s.charAt(q+m)){\n                m = m + 1;\n                q = p - m;\n                if(p%2 == 1){\n                    q = p - 1 - m;\n                }\n            }\n            if(p%2 == 1){\n                lps[p-1] = m;\n            }else{\n                lps[p] = m;\n            }\n            if(m > n/2){\n                break;\n            }\n            m = 1;\n            p = p + 2;\n        }\n        int q = 0;\n        for(int i = 1;i<=n-1;i++){\n            if(lps[i] == 0){\n                continue;\n            }\n            if(lps[i] > q){\n                q = lps[i];\n            }\n        }\n        System.out.println(q);\n    }\n}"}
{"src_uid": "6c85175d334f811617e7030e0403f706", "id": 64, "lang_cluster": "java", "lang": "Java 11", "difficulty": 900, "testcases": "[{'input': 'mew\\r\\n', 'output': ['3']}, {'input': 'wuffuw\\r\\n', 'output': ['5']}, {'input': 'qqqqqqqq\\r\\n', 'output': ['0']}, {'input': 'ijvji\\r\\n', 'output': ['4']}, {'input': 'iiiiiii\\r\\n', 'output': ['0']}, {'input': 'wobervhvvkihcuyjtmqhaaigvvgiaahqmtjyuchikvvhvrebow\\r\\n', 'output': ['49']}, {'input': 'wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\\r\\n', 'output': ['0']}, {'input': 'wobervhvvkihcuyjtmqhaaigvahheoqleromusrartldojsjvy\\r\\n', 'output': ['50']}, {'input': 'ijvxljt\\r\\n', 'output': ['7']}, {'input': 'fyhcncnchyf\\r\\n', 'output': ['10']}, {'input': 'ffffffffffff\\r\\n', 'output': ['0']}, {'input': 'fyhcncfsepqj\\r\\n', 'output': ['12']}, {'input': 'ybejrrlbcinttnicblrrjeby\\r\\n', 'output': ['23']}, {'input': 'yyyyyyyyyyyyyyyyyyyyyyyyy\\r\\n', 'output': ['0']}, {'input': 'ybejrrlbcintahovgjddrqatv\\r\\n', 'output': ['25']}, {'input': 'oftmhcmclgyqaojljoaqyglcmchmtfo\\r\\n', 'output': ['30']}, {'input': 'oooooooooooooooooooooooooooooooo\\r\\n', 'output': ['0']}, {'input': 'oftmhcmclgyqaojllbotztajglsmcilv\\r\\n', 'output': ['32']}, {'input': 'gxandbtgpbknxvnkjaajknvxnkbpgtbdnaxg\\r\\n', 'output': ['35']}, {'input': 'gggggggggggggggggggggggggggggggggggg\\r\\n', 'output': ['0']}, {'input': 'gxandbtgpbknxvnkjaygommzqitqzjfalfkk\\r\\n', 'output': ['36']}, {'input': 'fcliblymyqckxvieotjooojtoeivxkcqymylbilcf\\r\\n', 'output': ['40']}, {'input': 'fffffffffffffffffffffffffffffffffffffffffff\\r\\n', 'output': ['0']}, {'input': 'fcliblymyqckxvieotjootiqwtyznhhvuhbaixwqnsy\\r\\n', 'output': ['43']}, {'input': 'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\\r\\n', 'output': ['0']}, {'input': 'rajccqwqnqmshmerpvjyfepxwpxyldzpzhctqjnstxyfmlhiy\\r\\n', 'output': ['49']}, {'input': 'a\\r\\n', 'output': ['0']}, {'input': 'abca\\r\\n', 'output': ['4']}, {'input': 'aaaaabaaaaa\\r\\n', 'output': ['10']}, {'input': 'aba\\r\\n', 'output': ['2']}, {'input': 'asaa\\r\\n', 'output': ['4']}, {'input': 'aabaa\\r\\n', 'output': ['4']}, {'input': 'aabbaa\\r\\n', 'output': ['5']}, {'input': 'abcdaaa\\r\\n', 'output': ['7']}, {'input': 'aaholaa\\r\\n', 'output': ['7']}, {'input': 'abcdefghijka\\r\\n', 'output': ['12']}, {'input': 'aaadcba\\r\\n', 'output': ['7']}, {'input': 'aaaabaaaa\\r\\n', 'output': ['8']}, {'input': 'abaa\\r\\n', 'output': ['4']}, {'input': 'abcbaa\\r\\n', 'output': ['6']}, {'input': 'ab\\r\\n', 'output': ['2']}, {'input': 'l\\r\\n', 'output': ['0']}, {'input': 'aaaabcaaaa\\r\\n', 'output': ['10']}, {'input': 'abbaaaaaabba\\r\\n', 'output': ['11']}, {'input': 'abaaa\\r\\n', 'output': ['5']}, {'input': 'baa\\r\\n', 'output': ['3']}, {'input': 'aaaaaaabbba\\r\\n', 'output': ['11']}, {'input': 'ccbcc\\r\\n', 'output': ['4']}, {'input': 'bbbaaab\\r\\n', 'output': ['7']}, {'input': 'abaaaaaaaa\\r\\n', 'output': ['10']}, {'input': 'abaaba\\r\\n', 'output': ['5']}, {'input': 'aabsdfaaaa\\r\\n', 'output': ['10']}, {'input': 'aaaba\\r\\n', 'output': ['5']}, {'input': 'aaabaaa\\r\\n', 'output': ['6']}, {'input': 'baaabbb\\r\\n', 'output': ['7']}, {'input': 'ccbbabbcc\\r\\n', 'output': ['8']}, {'input': 'cabc\\r\\n', 'output': ['4']}, {'input': 'aabcd\\r\\n', 'output': ['5']}, {'input': 'abcdea\\r\\n', 'output': ['6']}, {'input': 'bbabb\\r\\n', 'output': ['4']}, {'input': 'aaaaabababaaaaa\\r\\n', 'output': ['14']}, {'input': 'bbabbb\\r\\n', 'output': ['6']}, {'input': 'aababd\\r\\n', 'output': ['6']}, {'input': 'abaaaa\\r\\n', 'output': ['6']}, {'input': 'aaaaaaaabbba\\r\\n', 'output': ['12']}, {'input': 'aabca\\r\\n', 'output': ['5']}, {'input': 'aaabccbaaa\\r\\n', 'output': ['9']}, {'input': 'aaaaaaaaaaaaaaaaaaaab\\r\\n', 'output': ['21']}, {'input': 'babb\\r\\n', 'output': ['4']}, {'input': 'abcaa\\r\\n', 'output': ['5']}, {'input': 'qwqq\\r\\n', 'output': ['4']}, {'input': 'aaaaaaaaaaabbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaa\\r\\n', 'output': ['48']}, {'input': 'aaab\\r\\n', 'output': ['4']}, {'input': 'aaaaaabaaaaa\\r\\n', 'output': ['12']}, {'input': 'wwuww\\r\\n', 'output': ['4']}, {'input': 'aaaaabcbaaaaa\\r\\n', 'output': ['12']}, {'input': 'aaabbbaaa\\r\\n', 'output': ['8']}, {'input': 'aabcbaa\\r\\n', 'output': ['6']}, {'input': 'abccdefccba\\r\\n', 'output': ['11']}, {'input': 'aabbcbbaa\\r\\n', 'output': ['8']}, {'input': 'aaaabbaaaa\\r\\n', 'output': ['9']}, {'input': 'aabcda\\r\\n', 'output': ['6']}, {'input': 'abbca\\r\\n', 'output': ['5']}, {'input': 'aaaaaabbaaa\\r\\n', 'output': ['11']}, {'input': 'sssssspssssss\\r\\n', 'output': ['12']}, {'input': 'sdnmsdcs\\r\\n', 'output': ['8']}, {'input': 'aaabbbccbbbaaa\\r\\n', 'output': ['13']}, {'input': 'cbdbdc\\r\\n', 'output': ['6']}, {'input': 'abb\\r\\n', 'output': ['3']}, {'input': 'abcdefaaaa\\r\\n', 'output': ['10']}, {'input': 'abbbaaa\\r\\n', 'output': ['7']}, {'input': 'v\\r\\n', 'output': ['0']}, {'input': 'abccbba\\r\\n', 'output': ['7']}, {'input': 'axyza\\r\\n', 'output': ['5']}, {'input': 'abcdefgaaaa\\r\\n', 'output': ['11']}, {'input': 'aaabcdaaa\\r\\n', 'output': ['9']}, {'input': 'aaaacaaaa\\r\\n', 'output': ['8']}, {'input': 'aaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaa\\r\\n', 'output': ['42']}, {'input': 'abbbaa\\r\\n', 'output': ['6']}, {'input': 'abcdee\\r\\n', 'output': ['6']}, {'input': 'oom\\r\\n', 'output': ['3']}, {'input': 'aabcaa\\r\\n', 'output': ['6']}, {'input': 'abba\\r\\n', 'output': ['3']}, {'input': 'aaca\\r\\n', 'output': ['4']}, {'input': 'aacbca\\r\\n', 'output': ['6']}, {'input': 'ababa\\r\\n', 'output': ['4']}, {'input': 'abcda\\r\\n', 'output': ['5']}, {'input': 'cccaaccc\\r\\n', 'output': ['7']}, {'input': 'aaabcda\\r\\n', 'output': ['7']}, {'input': 'aa\\r\\n', 'output': ['0']}, {'input': 'aabaaaa\\r\\n', 'output': ['7']}, {'input': 'abbaaaa\\r\\n', 'output': ['7']}, {'input': 'aaabcbaaa\\r\\n', 'output': ['8']}, {'input': 'aabba\\r\\n', 'output': ['5']}, {'input': 'xyxx\\r\\n', 'output': ['4']}, {'input': 'aaaaaaaaaaaabc\\r\\n', 'output': ['14']}, {'input': 'bbaaaabb\\r\\n', 'output': ['7']}, {'input': 'aaabaa\\r\\n', 'output': ['6']}, {'input': 'sssssabsssss\\r\\n', 'output': ['12']}, {'input': 'bbbaaaabbb\\r\\n', 'output': ['9']}, {'input': 'abbbbaaaa\\r\\n', 'output': ['9']}, {'input': 'wwufuww\\r\\n', 'output': ['6']}, {'input': 'oowoo\\r\\n', 'output': ['4']}, {'input': 'cccaccc\\r\\n', 'output': ['6']}, {'input': 'aaa\\r\\n', 'output': ['0']}, {'input': 'bbbcc\\r\\n', 'output': ['5']}, {'input': 'abcdef\\r\\n', 'output': ['6']}, {'input': 'abbba\\r\\n', 'output': ['4']}, {'input': 'aab\\r\\n', 'output': ['3']}, {'input': 'aaba\\r\\n', 'output': ['4']}, {'input': 'azbyaaa\\r\\n', 'output': ['7']}, {'input': 'oooooiooooo\\r\\n', 'output': ['10']}, {'input': 'aabbbbbaaaaaa\\r\\n', 'output': ['13']}]", "source_code": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.io.StreamTokenizer;\nimport java.io.Writer;\nimport static java.util.Arrays.*;\nimport static java.util.Collections.*;\nimport static java.util.Collections.reverseOrder;\nimport static java.util.Collections.sort;\nimport static java.util.Comparator.*;\nimport java.util.Deque;\nimport static java.util.Iterator.*;\nimport static java.util.Map.*;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport java.util.Map;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java.util.Map.entry;\nimport static java."}
{"src_uid": "6c85175d334f811617e7030e0403f706", "id": 64, "lang_cluster": "java", "lang": "Java 11", "difficulty": 900, "testcases": "[{'input': 'mew\\r\\n', 'output': ['3']}, {'input': 'wuffuw\\r\\n', 'output': ['5']}, {'input': 'qqqqqqqq\\r\\n', 'output': ['0']}, {'input': 'ijvji\\r\\n', 'output': ['4']}, {'input': 'iiiiiii\\r\\n', 'output': ['0']}, {'input': 'wobervhvvkihcuyjtmqhaaigvvgiaahqmtjyuchikvvhvrebow\\r\\n', 'output': ['49']}, {'input': 'wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\\r\\n', 'output': ['0']}, {'input': 'wobervhvvkihcuyjtmqhaaigvahheoqleromusrartldojsjvy\\r\\n', 'output': ['50']}, {'input': 'ijvxljt\\r\\n', 'output': ['7']}, {'input': 'fyhcncnchyf\\r\\n', 'output': ['10']}, {'input': 'ffffffffffff\\r\\n', 'output': ['0']}, {'input': 'fyhcncfsepqj\\r\\n', 'output': ['12']}, {'input': 'ybejrrlbcinttnicblrrjeby\\r\\n', 'output': ['23']}, {'input': 'yyyyyyyyyyyyyyyyyyyyyyyyy\\r\\n', 'output': ['0']}, {'input': 'ybejrrlbcintahovgjddrqatv\\r\\n', 'output': ['25']}, {'input': 'oftmhcmclgyqaojljoaqyglcmchmtfo\\r\\n', 'output': ['30']}, {'input': 'oooooooooooooooooooooooooooooooo\\r\\n', 'output': ['0']}, {'input': 'oftmhcmclgyqaojllbotztajglsmcilv\\r\\n', 'output': ['32']}, {'input': 'gxandbtgpbknxvnkjaajknvxnkbpgtbdnaxg\\r\\n', 'output': ['35']}, {'input': 'gggggggggggggggggggggggggggggggggggg\\r\\n', 'output': ['0']}, {'input': 'gxandbtgpbknxvnkjaygommzqitqzjfalfkk\\r\\n', 'output': ['36']}, {'input': 'fcliblymyqckxvieotjooojtoeivxkcqymylbilcf\\r\\n', 'output': ['40']}, {'input': 'fffffffffffffffffffffffffffffffffffffffffff\\r\\n', 'output': ['0']}, {'input': 'fcliblymyqckxvieotjootiqwtyznhhvuhbaixwqnsy\\r\\n', 'output': ['43']}, {'input': 'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\\r\\n', 'output': ['0']}, {'input': 'rajccqwqnqmshmerpvjyfepxwpxyldzpzhctqjnstxyfmlhiy\\r\\n', 'output': ['49']}, {'input': 'a\\r\\n', 'output': ['0']}, {'input': 'abca\\r\\n', 'output': ['4']}, {'input': 'aaaaabaaaaa\\r\\n', 'output': ['10']}, {'input': 'aba\\r\\n', 'output': ['2']}, {'input': 'asaa\\r\\n', 'output': ['4']}, {'input': 'aabaa\\r\\n', 'output': ['4']}, {'input': 'aabbaa\\r\\n', 'output': ['5']}, {'input': 'abcdaaa\\r\\n', 'output': ['7']}, {'input': 'aaholaa\\r\\n', 'output': ['7']}, {'input': 'abcdefghijka\\r\\n', 'output': ['12']}, {'input': 'aaadcba\\r\\n', 'output': ['7']}, {'input': 'aaaabaaaa\\r\\n', 'output': ['8']}, {'input': 'abaa\\r\\n', 'output': ['4']}, {'input': 'abcbaa\\r\\n', 'output': ['6']}, {'input': 'ab\\r\\n', 'output': ['2']}, {'input': 'l\\r\\n', 'output': ['0']}, {'input': 'aaaabcaaaa\\r\\n', 'output': ['10']}, {'input': 'abbaaaaaabba\\r\\n', 'output': ['11']}, {'input': 'abaaa\\r\\n', 'output': ['5']}, {'input': 'baa\\r\\n', 'output': ['3']}, {'input': 'aaaaaaabbba\\r\\n', 'output': ['11']}, {'input': 'ccbcc\\r\\n', 'output': ['4']}, {'input': 'bbbaaab\\r\\n', 'output': ['7']}, {'input': 'abaaaaaaaa\\r\\n', 'output': ['10']}, {'input': 'abaaba\\r\\n', 'output': ['5']}, {'input': 'aabsdfaaaa\\r\\n', 'output': ['10']}, {'input': 'aaaba\\r\\n', 'output': ['5']}, {'input': 'aaabaaa\\r\\n', 'output': ['6']}, {'input': 'baaabbb\\r\\n', 'output': ['7']}, {'input': 'ccbbabbcc\\r\\n', 'output': ['8']}, {'input': 'cabc\\r\\n', 'output': ['4']}, {'input': 'aabcd\\r\\n', 'output': ['5']}, {'input': 'abcdea\\r\\n', 'output': ['6']}, {'input': 'bbabb\\r\\n', 'output': ['4']}, {'input': 'aaaaabababaaaaa\\r\\n', 'output': ['14']}, {'input': 'bbabbb\\r\\n', 'output': ['6']}, {'input': 'aababd\\r\\n', 'output': ['6']}, {'input': 'abaaaa\\r\\n', 'output': ['6']}, {'input': 'aaaaaaaabbba\\r\\n', 'output': ['12']}, {'input': 'aabca\\r\\n', 'output': ['5']}, {'input': 'aaabccbaaa\\r\\n', 'output': ['9']}, {'input': 'aaaaaaaaaaaaaaaaaaaab\\r\\n', 'output': ['21']}, {'input': 'babb\\r\\n', 'output': ['4']}, {'input': 'abcaa\\r\\n', 'output': ['5']}, {'input': 'qwqq\\r\\n', 'output': ['4']}, {'input': 'aaaaaaaaaaabbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaa\\r\\n', 'output': ['48']}, {'input': 'aaab\\r\\n', 'output': ['4']}, {'input': 'aaaaaabaaaaa\\r\\n', 'output': ['12']}, {'input': 'wwuww\\r\\n', 'output': ['4']}, {'input': 'aaaaabcbaaaaa\\r\\n', 'output': ['12']}, {'input': 'aaabbbaaa\\r\\n', 'output': ['8']}, {'input': 'aabcbaa\\r\\n', 'output': ['6']}, {'input': 'abccdefccba\\r\\n', 'output': ['11']}, {'input': 'aabbcbbaa\\r\\n', 'output': ['8']}, {'input': 'aaaabbaaaa\\r\\n', 'output': ['9']}, {'input': 'aabcda\\r\\n', 'output': ['6']}, {'input': 'abbca\\r\\n', 'output': ['5']}, {'input': 'aaaaaabbaaa\\r\\n', 'output': ['11']}, {'input': 'sssssspssssss\\r\\n', 'output': ['12']}, {'input': 'sdnmsdcs\\r\\n', 'output': ['8']}, {'input': 'aaabbbccbbbaaa\\r\\n', 'output': ['13']}, {'input': 'cbdbdc\\r\\n', 'output': ['6']}, {'input': 'abb\\r\\n', 'output': ['3']}, {'input': 'abcdefaaaa\\r\\n', 'output': ['10']}, {'input': 'abbbaaa\\r\\n', 'output': ['7']}, {'input': 'v\\r\\n', 'output': ['0']}, {'input': 'abccbba\\r\\n', 'output': ['7']}, {'input': 'axyza\\r\\n', 'output': ['5']}, {'input': 'abcdefgaaaa\\r\\n', 'output': ['11']}, {'input': 'aaabcdaaa\\r\\n', 'output': ['9']}, {'input': 'aaaacaaaa\\r\\n', 'output': ['8']}, {'input': 'aaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaa\\r\\n', 'output': ['42']}, {'input': 'abbbaa\\r\\n', 'output': ['6']}, {'input': 'abcdee\\r\\n', 'output': ['6']}, {'input': 'oom\\r\\n', 'output': ['3']}, {'input': 'aabcaa\\r\\n', 'output': ['6']}, {'input': 'abba\\r\\n', 'output': ['3']}, {'input': 'aaca\\r\\n', 'output': ['4']}, {'input': 'aacbca\\r\\n', 'output': ['6']}, {'input': 'ababa\\r\\n', 'output': ['4']}, {'input': 'abcda\\r\\n', 'output': ['5']}, {'input': 'cccaaccc\\r\\n', 'output': ['7']}, {'input': 'aaabcda\\r\\n', 'output': ['7']}, {'input': 'aa\\r\\n', 'output': ['0']}, {'input': 'aabaaaa\\r\\n', 'output': ['7']}, {'input': 'abbaaaa\\r\\n', 'output': ['7']}, {'input': 'aaabcbaaa\\r\\n', 'output': ['8']}, {'input': 'aabba\\r\\n', 'output': ['5']}, {'input': 'xyxx\\r\\n', 'output': ['4']}, {'input': 'aaaaaaaaaaaabc\\r\\n', 'output': ['14']}, {'input': 'bbaaaabb\\r\\n', 'output': ['7']}, {'input': 'aaabaa\\r\\n', 'output': ['6']}, {'input': 'sssssabsssss\\r\\n', 'output': ['12']}, {'input': 'bbbaaaabbb\\r\\n', 'output': ['9']}, {'input': 'abbbbaaaa\\r\\n', 'output': ['9']}, {'input': 'wwufuww\\r\\n', 'output': ['6']}, {'input': 'oowoo\\r\\n', 'output': ['4']}, {'input': 'cccaccc\\r\\n', 'output': ['6']}, {'input': 'aaa\\r\\n', 'output': ['0']}, {'input': 'bbbcc\\r\\n', 'output': ['5']}, {'input': 'abcdef\\r\\n', 'output': ['6']}, {'input': 'abbba\\r\\n', 'output': ['4']}, {'input': 'aab\\r\\n', 'output': ['3']}, {'input': 'aaba\\r\\n', 'output': ['4']}, {'input': 'azbyaaa\\r\\n', 'output': ['7']}, {'input': 'oooooiooooo\\r\\n', 'output': ['10']}, {'input': 'aabbbbbaaaaaa\\r\\n', 'output': ['13']}]", "source_code": "import java.util.*;\n\npublic class JavaApplication2\n{\n\tpublic static void main(String[] args) \n\t{\n\t\tScanner input = new Scanner(System.in);\n\t\tString a = input.next();\n\t\tString s[] = a.split(\"\");\n\t\tint i = 0,j = 0,k = 0;\n\t\tboolean flag = false;\n\t\tboolean pal = true;\n\t\twhile(i < a.length()/2)\n\t\t{\n\t\t\tpal = true;\n\t\t\tj = a.length() - 1 - i;\n\t\t\tk = i;\n\t\t\twhile(k <= j)\n\t\t\t{\n\t\t\t\tif(s[i].compareTo(s[j])!= 0)\n\t\t\t\t\tpal = false;\n\t\t\t\tk++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tif(pal == false)\n\t\t\t\tflag = true;\n\t\t\ti++;\n\t\t}\n\t\tif(flag)\n\t\t\tSystem.out.println(a.length());\n\t\telse\n\t\t\tSystem.out.println(0);\n\t}\n}"}
{"src_uid": "6c85175d334f811617e7030e0403f706", "id": 64, "lang_cluster": "java", "lang": "Java 11", "difficulty": 900, "testcases": "[{'input': 'mew\\r\\n', 'output': ['3']}, {'input': 'wuffuw\\r\\n', 'output': ['5']}, {'input': 'qqqqqqqq\\r\\n', 'output': ['0']}, {'input': 'ijvji\\r\\n', 'output': ['4']}, {'input': 'iiiiiii\\r\\n', 'output': ['0']}, {'input': 'wobervhvvkihcuyjtmqhaaigvvgiaahqmtjyuchikvvhvrebow\\r\\n', 'output': ['49']}, {'input': 'wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\\r\\n', 'output': ['0']}, {'input': 'wobervhvvkihcuyjtmqhaaigvahheoqleromusrartldojsjvy\\r\\n', 'output': ['50']}, {'input': 'ijvxljt\\r\\n', 'output': ['7']}, {'input': 'fyhcncnchyf\\r\\n', 'output': ['10']}, {'input': 'ffffffffffff\\r\\n', 'output': ['0']}, {'input': 'fyhcncfsepqj\\r\\n', 'output': ['12']}, {'input': 'ybejrrlbcinttnicblrrjeby\\r\\n', 'output': ['23']}, {'input': 'yyyyyyyyyyyyyyyyyyyyyyyyy\\r\\n', 'output': ['0']}, {'input': 'ybejrrlbcintahovgjddrqatv\\r\\n', 'output': ['25']}, {'input': 'oftmhcmclgyqaojljoaqyglcmchmtfo\\r\\n', 'output': ['30']}, {'input': 'oooooooooooooooooooooooooooooooo\\r\\n', 'output': ['0']}, {'input': 'oftmhcmclgyqaojllbotztajglsmcilv\\r\\n', 'output': ['32']}, {'input': 'gxandbtgpbknxvnkjaajknvxnkbpgtbdnaxg\\r\\n', 'output': ['35']}, {'input': 'gggggggggggggggggggggggggggggggggggg\\r\\n', 'output': ['0']}, {'input': 'gxandbtgpbknxvnkjaygommzqitqzjfalfkk\\r\\n', 'output': ['36']}, {'input': 'fcliblymyqckxvieotjooojtoeivxkcqymylbilcf\\r\\n', 'output': ['40']}, {'input': 'fffffffffffffffffffffffffffffffffffffffffff\\r\\n', 'output': ['0']}, {'input': 'fcliblymyqckxvieotjootiqwtyznhhvuhbaixwqnsy\\r\\n', 'output': ['43']}, {'input': 'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\\r\\n', 'output': ['0']}, {'input': 'rajccqwqnqmshmerpvjyfepxwpxyldzpzhctqjnstxyfmlhiy\\r\\n', 'output': ['49']}, {'input': 'a\\r\\n', 'output': ['0']}, {'input': 'abca\\r\\n', 'output': ['4']}, {'input': 'aaaaabaaaaa\\r\\n', 'output': ['10']}, {'input': 'aba\\r\\n', 'output': ['2']}, {'input': 'asaa\\r\\n', 'output': ['4']}, {'input': 'aabaa\\r\\n', 'output': ['4']}, {'input': 'aabbaa\\r\\n', 'output': ['5']}, {'input': 'abcdaaa\\r\\n', 'output': ['7']}, {'input': 'aaholaa\\r\\n', 'output': ['7']}, {'input': 'abcdefghijka\\r\\n', 'output': ['12']}, {'input': 'aaadcba\\r\\n', 'output': ['7']}, {'input': 'aaaabaaaa\\r\\n', 'output': ['8']}, {'input': 'abaa\\r\\n', 'output': ['4']}, {'input': 'abcbaa\\r\\n', 'output': ['6']}, {'input': 'ab\\r\\n', 'output': ['2']}, {'input': 'l\\r\\n', 'output': ['0']}, {'input': 'aaaabcaaaa\\r\\n', 'output': ['10']}, {'input': 'abbaaaaaabba\\r\\n', 'output': ['11']}, {'input': 'abaaa\\r\\n', 'output': ['5']}, {'input': 'baa\\r\\n', 'output': ['3']}, {'input': 'aaaaaaabbba\\r\\n', 'output': ['11']}, {'input': 'ccbcc\\r\\n', 'output': ['4']}, {'input': 'bbbaaab\\r\\n', 'output': ['7']}, {'input': 'abaaaaaaaa\\r\\n', 'output': ['10']}, {'input': 'abaaba\\r\\n', 'output': ['5']}, {'input': 'aabsdfaaaa\\r\\n', 'output': ['10']}, {'input': 'aaaba\\r\\n', 'output': ['5']}, {'input': 'aaabaaa\\r\\n', 'output': ['6']}, {'input': 'baaabbb\\r\\n', 'output': ['7']}, {'input': 'ccbbabbcc\\r\\n', 'output': ['8']}, {'input': 'cabc\\r\\n', 'output': ['4']}, {'input': 'aabcd\\r\\n', 'output': ['5']}, {'input': 'abcdea\\r\\n', 'output': ['6']}, {'input': 'bbabb\\r\\n', 'output': ['4']}, {'input': 'aaaaabababaaaaa\\r\\n', 'output': ['14']}, {'input': 'bbabbb\\r\\n', 'output': ['6']}, {'input': 'aababd\\r\\n', 'output': ['6']}, {'input': 'abaaaa\\r\\n', 'output': ['6']}, {'input': 'aaaaaaaabbba\\r\\n', 'output': ['12']}, {'input': 'aabca\\r\\n', 'output': ['5']}, {'input': 'aaabccbaaa\\r\\n', 'output': ['9']}, {'input': 'aaaaaaaaaaaaaaaaaaaab\\r\\n', 'output': ['21']}, {'input': 'babb\\r\\n', 'output': ['4']}, {'input': 'abcaa\\r\\n', 'output': ['5']}, {'input': 'qwqq\\r\\n', 'output': ['4']}, {'input': 'aaaaaaaaaaabbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaa\\r\\n', 'output': ['48']}, {'input': 'aaab\\r\\n', 'output': ['4']}, {'input': 'aaaaaabaaaaa\\r\\n', 'output': ['12']}, {'input': 'wwuww\\r\\n', 'output': ['4']}, {'input': 'aaaaabcbaaaaa\\r\\n', 'output': ['12']}, {'input': 'aaabbbaaa\\r\\n', 'output': ['8']}, {'input': 'aabcbaa\\r\\n', 'output': ['6']}, {'input': 'abccdefccba\\r\\n', 'output': ['11']}, {'input': 'aabbcbbaa\\r\\n', 'output': ['8']}, {'input': 'aaaabbaaaa\\r\\n', 'output': ['9']}, {'input': 'aabcda\\r\\n', 'output': ['6']}, {'input': 'abbca\\r\\n', 'output': ['5']}, {'input': 'aaaaaabbaaa\\r\\n', 'output': ['11']}, {'input': 'sssssspssssss\\r\\n', 'output': ['12']}, {'input': 'sdnmsdcs\\r\\n', 'output': ['8']}, {'input': 'aaabbbccbbbaaa\\r\\n', 'output': ['13']}, {'input': 'cbdbdc\\r\\n', 'output': ['6']}, {'input': 'abb\\r\\n', 'output': ['3']}, {'input': 'abcdefaaaa\\r\\n', 'output': ['10']}, {'input': 'abbbaaa\\r\\n', 'output': ['7']}, {'input': 'v\\r\\n', 'output': ['0']}, {'input': 'abccbba\\r\\n', 'output': ['7']}, {'input': 'axyza\\r\\n', 'output': ['5']}, {'input': 'abcdefgaaaa\\r\\n', 'output': ['11']}, {'input': 'aaabcdaaa\\r\\n', 'output': ['9']}, {'input': 'aaaacaaaa\\r\\n', 'output': ['8']}, {'input': 'aaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaa\\r\\n', 'output': ['42']}, {'input': 'abbbaa\\r\\n', 'output': ['6']}, {'input': 'abcdee\\r\\n', 'output': ['6']}, {'input': 'oom\\r\\n', 'output': ['3']}, {'input': 'aabcaa\\r\\n', 'output': ['6']}, {'input': 'abba\\r\\n', 'output': ['3']}, {'input': 'aaca\\r\\n', 'output': ['4']}, {'input': 'aacbca\\r\\n', 'output': ['6']}, {'input': 'ababa\\r\\n', 'output': ['4']}, {'input': 'abcda\\r\\n', 'output': ['5']}, {'input': 'cccaaccc\\r\\n', 'output': ['7']}, {'input': 'aaabcda\\r\\n', 'output': ['7']}, {'input': 'aa\\r\\n', 'output': ['0']}, {'input': 'aabaaaa\\r\\n', 'output': ['7']}, {'input': 'abbaaaa\\r\\n', 'output': ['7']}, {'input': 'aaabcbaaa\\r\\n', 'output': ['8']}, {'input': 'aabba\\r\\n', 'output': ['5']}, {'input': 'xyxx\\r\\n', 'output': ['4']}, {'input': 'aaaaaaaaaaaabc\\r\\n', 'output': ['14']}, {'input': 'bbaaaabb\\r\\n', 'output': ['7']}, {'input': 'aaabaa\\r\\n', 'output': ['6']}, {'input': 'sssssabsssss\\r\\n', 'output': ['12']}, {'input': 'bbbaaaabbb\\r\\n', 'output': ['9']}, {'input': 'abbbbaaaa\\r\\n', 'output': ['9']}, {'input': 'wwufuww\\r\\n', 'output': ['6']}, {'input': 'oowoo\\r\\n', 'output': ['4']}, {'input': 'cccaccc\\r\\n', 'output': ['6']}, {'input': 'aaa\\r\\n', 'output': ['0']}, {'input': 'bbbcc\\r\\n', 'output': ['5']}, {'input': 'abcdef\\r\\n', 'output': ['6']}, {'input': 'abbba\\r\\n', 'output': ['4']}, {'input': 'aab\\r\\n', 'output': ['3']}, {'input': 'aaba\\r\\n', 'output': ['4']}, {'input': 'azbyaaa\\r\\n', 'output': ['7']}, {'input': 'oooooiooooo\\r\\n', 'output': ['10']}, {'input': 'aabbbbbaaaaaa\\r\\n', 'output': ['13']}]", "source_code": "import java.util.*;\n\npublic class Solution {\n    public static void main(String[] args) {\n        Scanner read = new Scanner(System.in);\n        String s = read.nextLine();\n        if(s.equals(\"\")||s.length()<2){\n            System.out.println(0);\n            System.exit(0);\n        }\n        int start = 0;\n        int max = 0;\n        int[] check = new int[s.length()];\n        for(int i=0;i<s.length();++i){\n            check[i]=-1;\n        }\n        check[0] = 0;\n        max = check[0];\n        while(start+2<s.length()){\n            if(check[start]>=0){\n                check[start+1] = check[start];\n                if(s.charAt(start+1)!= s.charAt(start+check[start])){\n                    check[start+2] = check[start]+2;\n                }\n            }\n            else if(s.charAt(start) == s.charAt(start+1)){\n                check[start+1] = 1;\n                check[start+2] = 2;\n                if(start+1 == s.length()-1){\n                    check[start+2]++;\n                }\n            }\n            max = Math.max(max,check[start+1]);\n            start++;\n        }\n        System.out.println(max);\n    }\n}\n"}
{"src_uid": "6c85175d334f811617e7030e0403f706", "id": 64, "lang_cluster": "java", "lang": "Java 11", "difficulty": 900, "testcases": "[{'input': 'mew\\r\\n', 'output': ['3']}, {'input': 'wuffuw\\r\\n', 'output': ['5']}, {'input': 'qqqqqqqq\\r\\n', 'output': ['0']}, {'input': 'ijvji\\r\\n', 'output': ['4']}, {'input': 'iiiiiii\\r\\n', 'output': ['0']}, {'input': 'wobervhvvkihcuyjtmqhaaigvvgiaahqmtjyuchikvvhvrebow\\r\\n', 'output': ['49']}, {'input': 'wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\\r\\n', 'output': ['0']}, {'input': 'wobervhvvkihcuyjtmqhaaigvahheoqleromusrartldojsjvy\\r\\n', 'output': ['50']}, {'input': 'ijvxljt\\r\\n', 'output': ['7']}, {'input': 'fyhcncnchyf\\r\\n', 'output': ['10']}, {'input': 'ffffffffffff\\r\\n', 'output': ['0']}, {'input': 'fyhcncfsepqj\\r\\n', 'output': ['12']}, {'input': 'ybejrrlbcinttnicblrrjeby\\r\\n', 'output': ['23']}, {'input': 'yyyyyyyyyyyyyyyyyyyyyyyyy\\r\\n', 'output': ['0']}, {'input': 'ybejrrlbcintahovgjddrqatv\\r\\n', 'output': ['25']}, {'input': 'oftmhcmclgyqaojljoaqyglcmchmtfo\\r\\n', 'output': ['30']}, {'input': 'oooooooooooooooooooooooooooooooo\\r\\n', 'output': ['0']}, {'input': 'oftmhcmclgyqaojllbotztajglsmcilv\\r\\n', 'output': ['32']}, {'input': 'gxandbtgpbknxvnkjaajknvxnkbpgtbdnaxg\\r\\n', 'output': ['35']}, {'input': 'gggggggggggggggggggggggggggggggggggg\\r\\n', 'output': ['0']}, {'input': 'gxandbtgpbknxvnkjaygommzqitqzjfalfkk\\r\\n', 'output': ['36']}, {'input': 'fcliblymyqckxvieotjooojtoeivxkcqymylbilcf\\r\\n', 'output': ['40']}, {'input': 'fffffffffffffffffffffffffffffffffffffffffff\\r\\n', 'output': ['0']}, {'input': 'fcliblymyqckxvieotjootiqwtyznhhvuhbaixwqnsy\\r\\n', 'output': ['43']}, {'input': 'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\\r\\n', 'output': ['0']}, {'input': 'rajccqwqnqmshmerpvjyfepxwpxyldzpzhctqjnstxyfmlhiy\\r\\n', 'output': ['49']}, {'input': 'a\\r\\n', 'output': ['0']}, {'input': 'abca\\r\\n', 'output': ['4']}, {'input': 'aaaaabaaaaa\\r\\n', 'output': ['10']}, {'input': 'aba\\r\\n', 'output': ['2']}, {'input': 'asaa\\r\\n', 'output': ['4']}, {'input': 'aabaa\\r\\n', 'output': ['4']}, {'input': 'aabbaa\\r\\n', 'output': ['5']}, {'input': 'abcdaaa\\r\\n', 'output': ['7']}, {'input': 'aaholaa\\r\\n', 'output': ['7']}, {'input': 'abcdefghijka\\r\\n', 'output': ['12']}, {'input': 'aaadcba\\r\\n', 'output': ['7']}, {'input': 'aaaabaaaa\\r\\n', 'output': ['8']}, {'input': 'abaa\\r\\n', 'output': ['4']}, {'input': 'abcbaa\\r\\n', 'output': ['6']}, {'input': 'ab\\r\\n', 'output': ['2']}, {'input': 'l\\r\\n', 'output': ['0']}, {'input': 'aaaabcaaaa\\r\\n', 'output': ['10']}, {'input': 'abbaaaaaabba\\r\\n', 'output': ['11']}, {'input': 'abaaa\\r\\n', 'output': ['5']}, {'input': 'baa\\r\\n', 'output': ['3']}, {'input': 'aaaaaaabbba\\r\\n', 'output': ['11']}, {'input': 'ccbcc\\r\\n', 'output': ['4']}, {'input': 'bbbaaab\\r\\n', 'output': ['7']}, {'input': 'abaaaaaaaa\\r\\n', 'output': ['10']}, {'input': 'abaaba\\r\\n', 'output': ['5']}, {'input': 'aabsdfaaaa\\r\\n', 'output': ['10']}, {'input': 'aaaba\\r\\n', 'output': ['5']}, {'input': 'aaabaaa\\r\\n', 'output': ['6']}, {'input': 'baaabbb\\r\\n', 'output': ['7']}, {'input': 'ccbbabbcc\\r\\n', 'output': ['8']}, {'input': 'cabc\\r\\n', 'output': ['4']}, {'input': 'aabcd\\r\\n', 'output': ['5']}, {'input': 'abcdea\\r\\n', 'output': ['6']}, {'input': 'bbabb\\r\\n', 'output': ['4']}, {'input': 'aaaaabababaaaaa\\r\\n', 'output': ['14']}, {'input': 'bbabbb\\r\\n', 'output': ['6']}, {'input': 'aababd\\r\\n', 'output': ['6']}, {'input': 'abaaaa\\r\\n', 'output': ['6']}, {'input': 'aaaaaaaabbba\\r\\n', 'output': ['12']}, {'input': 'aabca\\r\\n', 'output': ['5']}, {'input': 'aaabccbaaa\\r\\n', 'output': ['9']}, {'input': 'aaaaaaaaaaaaaaaaaaaab\\r\\n', 'output': ['21']}, {'input': 'babb\\r\\n', 'output': ['4']}, {'input': 'abcaa\\r\\n', 'output': ['5']}, {'input': 'qwqq\\r\\n', 'output': ['4']}, {'input': 'aaaaaaaaaaabbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaa\\r\\n', 'output': ['48']}, {'input': 'aaab\\r\\n', 'output': ['4']}, {'input': 'aaaaaabaaaaa\\r\\n', 'output': ['12']}, {'input': 'wwuww\\r\\n', 'output': ['4']}, {'input': 'aaaaabcbaaaaa\\r\\n', 'output': ['12']}, {'input': 'aaabbbaaa\\r\\n', 'output': ['8']}, {'input': 'aabcbaa\\r\\n', 'output': ['6']}, {'input': 'abccdefccba\\r\\n', 'output': ['11']}, {'input': 'aabbcbbaa\\r\\n', 'output': ['8']}, {'input': 'aaaabbaaaa\\r\\n', 'output': ['9']}, {'input': 'aabcda\\r\\n', 'output': ['6']}, {'input': 'abbca\\r\\n', 'output': ['5']}, {'input': 'aaaaaabbaaa\\r\\n', 'output': ['11']}, {'input': 'sssssspssssss\\r\\n', 'output': ['12']}, {'input': 'sdnmsdcs\\r\\n', 'output': ['8']}, {'input': 'aaabbbccbbbaaa\\r\\n', 'output': ['13']}, {'input': 'cbdbdc\\r\\n', 'output': ['6']}, {'input': 'abb\\r\\n', 'output': ['3']}, {'input': 'abcdefaaaa\\r\\n', 'output': ['10']}, {'input': 'abbbaaa\\r\\n', 'output': ['7']}, {'input': 'v\\r\\n', 'output': ['0']}, {'input': 'abccbba\\r\\n', 'output': ['7']}, {'input': 'axyza\\r\\n', 'output': ['5']}, {'input': 'abcdefgaaaa\\r\\n', 'output': ['11']}, {'input': 'aaabcdaaa\\r\\n', 'output': ['9']}, {'input': 'aaaacaaaa\\r\\n', 'output': ['8']}, {'input': 'aaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaa\\r\\n', 'output': ['42']}, {'input': 'abbbaa\\r\\n', 'output': ['6']}, {'input': 'abcdee\\r\\n', 'output': ['6']}, {'input': 'oom\\r\\n', 'output': ['3']}, {'input': 'aabcaa\\r\\n', 'output': ['6']}, {'input': 'abba\\r\\n', 'output': ['3']}, {'input': 'aaca\\r\\n', 'output': ['4']}, {'input': 'aacbca\\r\\n', 'output': ['6']}, {'input': 'ababa\\r\\n', 'output': ['4']}, {'input': 'abcda\\r\\n', 'output': ['5']}, {'input': 'cccaaccc\\r\\n', 'output': ['7']}, {'input': 'aaabcda\\r\\n', 'output': ['7']}, {'input': 'aa\\r\\n', 'output': ['0']}, {'input': 'aabaaaa\\r\\n', 'output': ['7']}, {'input': 'abbaaaa\\r\\n', 'output': ['7']}, {'input': 'aaabcbaaa\\r\\n', 'output': ['8']}, {'input': 'aabba\\r\\n', 'output': ['5']}, {'input': 'xyxx\\r\\n', 'output': ['4']}, {'input': 'aaaaaaaaaaaabc\\r\\n', 'output': ['14']}, {'input': 'bbaaaabb\\r\\n', 'output': ['7']}, {'input': 'aaabaa\\r\\n', 'output': ['6']}, {'input': 'sssssabsssss\\r\\n', 'output': ['12']}, {'input': 'bbbaaaabbb\\r\\n', 'output': ['9']}, {'input': 'abbbbaaaa\\r\\n', 'output': ['9']}, {'input': 'wwufuww\\r\\n', 'output': ['6']}, {'input': 'oowoo\\r\\n', 'output': ['4']}, {'input': 'cccaccc\\r\\n', 'output': ['6']}, {'input': 'aaa\\r\\n', 'output': ['0']}, {'input': 'bbbcc\\r\\n', 'output': ['5']}, {'input': 'abcdef\\r\\n', 'output': ['6']}, {'input': 'abbba\\r\\n', 'output': ['4']}, {'input': 'aab\\r\\n', 'output': ['3']}, {'input': 'aaba\\r\\n', 'output': ['4']}, {'input': 'azbyaaa\\r\\n', 'output': ['7']}, {'input': 'oooooiooooo\\r\\n', 'output': ['10']}, {'input': 'aabbbbbaaaaaa\\r\\n', 'output': ['13']}]", "source_code": "import java.io.*;\npublic class Solution \n{\n\n    public static void main (String[] args) throws java.lang.Exception\n    {\n        char arr[]= readline().toCharArray();\n        int l = arr.length, i, j, cnt = 0;\n        int index1[][] = new int [l] [l];\n        boolean vis[][] = new boolean [l] [l];\n        for(i = 0 ;i < l ; ++i)\n        {\n            for(j = 0 ; j < i ; ++j)\n            {\n                index1[i][j] = 1;\n            }\n        }\n        String ans = \"\";\n        for(i = 0 ; i < l-1 ; ++i)\n        {\n            if(arr[i]!= arr[l-i-1])\n            {\n                ++index1[i][l-i-1];\n            }\n        }\n        for(i = 0 ; i < l ; ++i)\n        {\n            for(j = 0 ; j < i ; ++j)\n            {\n                vis[i][j] = (index1[i][j] == index1[j][i] && index1[i][j]!= 0);\n            }\n        }\n        for(i = 0 ; i < l ; ++i)\n        {\n            for(j = 0 ; j < i ; ++j)\n            {\n                if(index1[i][j]!= 0 && vis[i][j])\n                {\n                    cnt = max(cnt, index1[i][j]);\n                }\n            }\n        }\n        System.out.println(cnt);\n\n    }\n\n    private static int max(int a,int b)\n    {\n        if(a > b)\n            return a;\n        return b;\n    }\n    private static String readline()  throws java.io.IOException \n    {\n        InputStream inputstream;\n        inputstream = System.in;\n        InputStreamReader inputstreamreader;\n        inputstreamreader = new InputStreamReader(inputstream);\n        BufferedReader bufferedreader;\n        bufferedreader = new BufferedReader(inputstreamreader);\n        String s1 = null;\n        s1 = bufferedreader.readLine();\n        return s1;\n    }\n}"}
{"src_uid": "1110d3671e9f77fd8d66dca6e74d2048", "id": 65, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1200, "testcases": "[{'input': '1 10 1 10 1\\r\\n', 'output': ['YES']}, {'input': '1 5 6 10 1\\r\\n', 'output': ['NO']}, {'input': '1 1 1 1 1\\r\\n', 'output': ['YES']}, {'input': '1 1 1 1 2\\r\\n', 'output': ['NO']}, {'input': '1 100000 1 100000 100000\\r\\n', 'output': ['YES']}, {'input': '1 100000 1 100000 100001\\r\\n', 'output': ['NO']}, {'input': '25 10000 200 10000 5\\r\\n', 'output': ['YES']}, {'input': '1 100000 10 100000 50000\\r\\n', 'output': ['NO']}, {'input': '91939 94921 10197 89487 1\\r\\n', 'output': ['NO']}, {'input': '30518 58228 74071 77671 1\\r\\n', 'output': ['NO']}, {'input': '46646 79126 78816 91164 5\\r\\n', 'output': ['NO']}, {'input': '30070 83417 92074 99337 2\\r\\n', 'output': ['NO']}, {'input': '13494 17544 96820 99660 6\\r\\n', 'output': ['NO']}, {'input': '96918 97018 10077 86510 9\\r\\n', 'output': ['YES']}, {'input': '13046 45594 14823 52475 1\\r\\n', 'output': ['YES']}, {'input': '29174 40572 95377 97669 4\\r\\n', 'output': ['NO']}, {'input': '79894 92433 8634 86398 4\\r\\n', 'output': ['YES']}, {'input': '96022 98362 13380 94100 6\\r\\n', 'output': ['YES']}, {'input': '79446 95675 93934 96272 3\\r\\n', 'output': ['NO']}, {'input': '5440 46549 61481 99500 10\\r\\n', 'output': ['NO']}, {'input': '21569 53580 74739 87749 3\\r\\n', 'output': ['NO']}, {'input': '72289 78297 79484 98991 7\\r\\n', 'output': ['NO']}, {'input': '88417 96645 92742 98450 5\\r\\n', 'output': ['NO']}, {'input': '71841 96625 73295 77648 8\\r\\n', 'output': ['NO']}, {'input': '87969 99230 78041 94736 4\\r\\n', 'output': ['NO']}, {'input': '4 4 1 2 3\\r\\n', 'output': ['NO']}, {'input': '150 150 1 2 100\\r\\n', 'output': ['NO']}, {'input': '99 100 1 100 50\\r\\n', 'output': ['YES']}, {'input': '7 7 3 6 2\\r\\n', 'output': ['NO']}, {'input': '10 10 1 10 1\\r\\n', 'output': ['YES']}, {'input': '36 36 5 7 6\\r\\n', 'output': ['YES']}, {'input': '73 96 1 51 51\\r\\n', 'output': ['NO']}, {'input': '3 3 1 3 2\\r\\n', 'output': ['NO']}, {'input': '10000000 10000000 1 100000 10000000\\r\\n', 'output': ['YES']}, {'input': '9222174 9829060 9418763 9955619 9092468\\r\\n', 'output': ['NO']}, {'input': '70 70 1 2 50\\r\\n', 'output': ['NO']}, {'input': '100 200 1 20 5\\r\\n', 'output': ['YES']}, {'input': '1 200000 65536 65536 65537\\r\\n', 'output': ['NO']}, {'input': '15 15 1 100 1\\r\\n', 'output': ['YES']}, {'input': '10000000 10000000 1 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '10 10 2 5 4\\r\\n', 'output': ['NO']}, {'input': '67 69 7 7 9\\r\\n', 'output': ['NO']}, {'input': '100000 10000000 1 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '9 12 1 2 7\\r\\n', 'output': ['NO']}, {'input': '5426234 6375745 2636512 8492816 4409404\\r\\n', 'output': ['NO']}, {'input': '6134912 6134912 10000000 10000000 999869\\r\\n', 'output': ['NO']}, {'input': '3 3 1 100 1\\r\\n', 'output': ['YES']}, {'input': '10000000 10000000 10 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '4 4 1 100 2\\r\\n', 'output': ['YES']}, {'input': '8 13 1 4 7\\r\\n', 'output': ['NO']}, {'input': '10 10 100000 10000000 10000000\\r\\n', 'output': ['NO']}, {'input': '5 6 1 4 2\\r\\n', 'output': ['YES']}, {'input': '1002 1003 1 2 1000\\r\\n', 'output': ['NO']}, {'input': '4 5 1 2 2\\r\\n', 'output': ['YES']}, {'input': '5 6 1 5 1\\r\\n', 'output': ['YES']}, {'input': '15 21 2 4 7\\r\\n', 'output': ['YES']}, {'input': '4 5 3 7 1\\r\\n', 'output': ['YES']}, {'input': '15 15 3 4 4\\r\\n', 'output': ['NO']}, {'input': '3 6 1 2 2\\r\\n', 'output': ['YES']}, {'input': '2 10 3 6 3\\r\\n', 'output': ['YES']}, {'input': '1 10000000 1 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '8 13 1 2 7\\r\\n', 'output': ['NO']}, {'input': '98112 98112 100000 100000 128850\\r\\n', 'output': ['NO']}, {'input': '2 2 1 2 1\\r\\n', 'output': ['YES']}, {'input': '8 8 3 4 2\\r\\n', 'output': ['YES']}, {'input': '60 60 2 3 25\\r\\n', 'output': ['NO']}, {'input': '16 17 2 5 5\\r\\n', 'output': ['NO']}, {'input': '2 4 1 3 1\\r\\n', 'output': ['YES']}, {'input': '4 5 1 2 3\\r\\n', 'output': ['NO']}, {'input': '10 10 3 4 3\\r\\n', 'output': ['NO']}, {'input': '10 10000000 999999 10000000 300\\r\\n', 'output': ['NO']}, {'input': '100 120 9 11 10\\r\\n', 'output': ['YES']}, {'input': '8 20 1 3 4\\r\\n', 'output': ['YES']}, {'input': '10 14 2 3 4\\r\\n', 'output': ['YES']}, {'input': '2000 2001 1 3 1000\\r\\n', 'output': ['YES']}, {'input': '12 13 2 3 5\\r\\n', 'output': ['NO']}, {'input': '7 7 2 3 3\\r\\n', 'output': ['NO']}, {'input': '5 8 1 10000000 4\\r\\n', 'output': ['YES']}, {'input': '5 5 1 1 4\\r\\n', 'output': ['NO']}, {'input': '5 5 1 6 2\\r\\n', 'output': ['NO']}, {'input': '200 300 4000381 4000382 4000381\\r\\n', 'output': ['NO']}, {'input': '11 17 2 5 2\\r\\n', 'output': ['NO']}, {'input': '9999999 10000000 1 10000000 999997\\r\\n', 'output': ['NO']}, {'input': '7 8 2 3 3\\r\\n', 'output': ['NO']}, {'input': '7 7 3 3 2\\r\\n', 'output': ['NO']}, {'input': '15 15 2 3 7\\r\\n', 'output': ['NO']}, {'input': '65408 65408 859 859 10000000\\r\\n', 'output': ['NO']}, {'input': '1000000 10000000 1 100000 1\\r\\n', 'output': ['NO']}, {'input': '6 12 2 3 2\\r\\n', 'output': ['YES']}, {'input': '7 8 1 3 3\\r\\n', 'output': ['NO']}, {'input': '4 4 1 2 2\\r\\n', 'output': ['YES']}, {'input': '2 3 1 2 2\\r\\n', 'output': ['YES']}, {'input': '11 14 2 3 5\\r\\n', 'output': ['NO']}, {'input': '7 7 1 10 3\\r\\n', 'output': ['NO']}, {'input': '49 50 1 2 27\\r\\n', 'output': ['NO']}, {'input': '1 10000000 1 10000000 123456\\r\\n', 'output': ['YES']}, {'input': '100000 10000000 100 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '17 19 2 3 8\\r\\n', 'output': ['NO']}, {'input': '4 6 3 9 1\\r\\n', 'output': ['YES']}, {'input': '19 20 6 7 3\\r\\n', 'output': ['NO']}, {'input': '5000000 10000000 1 4999999 1\\r\\n', 'output': ['NO']}]", "source_code": "import java.util.*;\npublic class A\n{\n    public static void main (String[] args) \n    {\n        Scanner kb = new Scanner(System.in);\n        int l = kb.nextInt(),\n            r = kb.nextInt(),\n            x = kb.nextInt(),\n            y = kb.nextInt(),\n            k = kb.nextInt();\n\n        for(int a = l; a <= r; a++)\n            for(int b = x; b <= y; b++)\n                if((double)a/b == k)\n                {\n                    System.out.print(\"YES\");\n                    return;\n                }\n        \n        System.out.print(\"NO\");\n    }\n}"}
{"src_uid": "1110d3671e9f77fd8d66dca6e74d2048", "id": 65, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1200, "testcases": "[{'input': '1 10 1 10 1\\r\\n', 'output': ['YES']}, {'input': '1 5 6 10 1\\r\\n', 'output': ['NO']}, {'input': '1 1 1 1 1\\r\\n', 'output': ['YES']}, {'input': '1 1 1 1 2\\r\\n', 'output': ['NO']}, {'input': '1 100000 1 100000 100000\\r\\n', 'output': ['YES']}, {'input': '1 100000 1 100000 100001\\r\\n', 'output': ['NO']}, {'input': '25 10000 200 10000 5\\r\\n', 'output': ['YES']}, {'input': '1 100000 10 100000 50000\\r\\n', 'output': ['NO']}, {'input': '91939 94921 10197 89487 1\\r\\n', 'output': ['NO']}, {'input': '30518 58228 74071 77671 1\\r\\n', 'output': ['NO']}, {'input': '46646 79126 78816 91164 5\\r\\n', 'output': ['NO']}, {'input': '30070 83417 92074 99337 2\\r\\n', 'output': ['NO']}, {'input': '13494 17544 96820 99660 6\\r\\n', 'output': ['NO']}, {'input': '96918 97018 10077 86510 9\\r\\n', 'output': ['YES']}, {'input': '13046 45594 14823 52475 1\\r\\n', 'output': ['YES']}, {'input': '29174 40572 95377 97669 4\\r\\n', 'output': ['NO']}, {'input': '79894 92433 8634 86398 4\\r\\n', 'output': ['YES']}, {'input': '96022 98362 13380 94100 6\\r\\n', 'output': ['YES']}, {'input': '79446 95675 93934 96272 3\\r\\n', 'output': ['NO']}, {'input': '5440 46549 61481 99500 10\\r\\n', 'output': ['NO']}, {'input': '21569 53580 74739 87749 3\\r\\n', 'output': ['NO']}, {'input': '72289 78297 79484 98991 7\\r\\n', 'output': ['NO']}, {'input': '88417 96645 92742 98450 5\\r\\n', 'output': ['NO']}, {'input': '71841 96625 73295 77648 8\\r\\n', 'output': ['NO']}, {'input': '87969 99230 78041 94736 4\\r\\n', 'output': ['NO']}, {'input': '4 4 1 2 3\\r\\n', 'output': ['NO']}, {'input': '150 150 1 2 100\\r\\n', 'output': ['NO']}, {'input': '99 100 1 100 50\\r\\n', 'output': ['YES']}, {'input': '7 7 3 6 2\\r\\n', 'output': ['NO']}, {'input': '10 10 1 10 1\\r\\n', 'output': ['YES']}, {'input': '36 36 5 7 6\\r\\n', 'output': ['YES']}, {'input': '73 96 1 51 51\\r\\n', 'output': ['NO']}, {'input': '3 3 1 3 2\\r\\n', 'output': ['NO']}, {'input': '10000000 10000000 1 100000 10000000\\r\\n', 'output': ['YES']}, {'input': '9222174 9829060 9418763 9955619 9092468\\r\\n', 'output': ['NO']}, {'input': '70 70 1 2 50\\r\\n', 'output': ['NO']}, {'input': '100 200 1 20 5\\r\\n', 'output': ['YES']}, {'input': '1 200000 65536 65536 65537\\r\\n', 'output': ['NO']}, {'input': '15 15 1 100 1\\r\\n', 'output': ['YES']}, {'input': '10000000 10000000 1 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '10 10 2 5 4\\r\\n', 'output': ['NO']}, {'input': '67 69 7 7 9\\r\\n', 'output': ['NO']}, {'input': '100000 10000000 1 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '9 12 1 2 7\\r\\n', 'output': ['NO']}, {'input': '5426234 6375745 2636512 8492816 4409404\\r\\n', 'output': ['NO']}, {'input': '6134912 6134912 10000000 10000000 999869\\r\\n', 'output': ['NO']}, {'input': '3 3 1 100 1\\r\\n', 'output': ['YES']}, {'input': '10000000 10000000 10 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '4 4 1 100 2\\r\\n', 'output': ['YES']}, {'input': '8 13 1 4 7\\r\\n', 'output': ['NO']}, {'input': '10 10 100000 10000000 10000000\\r\\n', 'output': ['NO']}, {'input': '5 6 1 4 2\\r\\n', 'output': ['YES']}, {'input': '1002 1003 1 2 1000\\r\\n', 'output': ['NO']}, {'input': '4 5 1 2 2\\r\\n', 'output': ['YES']}, {'input': '5 6 1 5 1\\r\\n', 'output': ['YES']}, {'input': '15 21 2 4 7\\r\\n', 'output': ['YES']}, {'input': '4 5 3 7 1\\r\\n', 'output': ['YES']}, {'input': '15 15 3 4 4\\r\\n', 'output': ['NO']}, {'input': '3 6 1 2 2\\r\\n', 'output': ['YES']}, {'input': '2 10 3 6 3\\r\\n', 'output': ['YES']}, {'input': '1 10000000 1 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '8 13 1 2 7\\r\\n', 'output': ['NO']}, {'input': '98112 98112 100000 100000 128850\\r\\n', 'output': ['NO']}, {'input': '2 2 1 2 1\\r\\n', 'output': ['YES']}, {'input': '8 8 3 4 2\\r\\n', 'output': ['YES']}, {'input': '60 60 2 3 25\\r\\n', 'output': ['NO']}, {'input': '16 17 2 5 5\\r\\n', 'output': ['NO']}, {'input': '2 4 1 3 1\\r\\n', 'output': ['YES']}, {'input': '4 5 1 2 3\\r\\n', 'output': ['NO']}, {'input': '10 10 3 4 3\\r\\n', 'output': ['NO']}, {'input': '10 10000000 999999 10000000 300\\r\\n', 'output': ['NO']}, {'input': '100 120 9 11 10\\r\\n', 'output': ['YES']}, {'input': '8 20 1 3 4\\r\\n', 'output': ['YES']}, {'input': '10 14 2 3 4\\r\\n', 'output': ['YES']}, {'input': '2000 2001 1 3 1000\\r\\n', 'output': ['YES']}, {'input': '12 13 2 3 5\\r\\n', 'output': ['NO']}, {'input': '7 7 2 3 3\\r\\n', 'output': ['NO']}, {'input': '5 8 1 10000000 4\\r\\n', 'output': ['YES']}, {'input': '5 5 1 1 4\\r\\n', 'output': ['NO']}, {'input': '5 5 1 6 2\\r\\n', 'output': ['NO']}, {'input': '200 300 4000381 4000382 4000381\\r\\n', 'output': ['NO']}, {'input': '11 17 2 5 2\\r\\n', 'output': ['NO']}, {'input': '9999999 10000000 1 10000000 999997\\r\\n', 'output': ['NO']}, {'input': '7 8 2 3 3\\r\\n', 'output': ['NO']}, {'input': '7 7 3 3 2\\r\\n', 'output': ['NO']}, {'input': '15 15 2 3 7\\r\\n', 'output': ['NO']}, {'input': '65408 65408 859 859 10000000\\r\\n', 'output': ['NO']}, {'input': '1000000 10000000 1 100000 1\\r\\n', 'output': ['NO']}, {'input': '6 12 2 3 2\\r\\n', 'output': ['YES']}, {'input': '7 8 1 3 3\\r\\n', 'output': ['NO']}, {'input': '4 4 1 2 2\\r\\n', 'output': ['YES']}, {'input': '2 3 1 2 2\\r\\n', 'output': ['YES']}, {'input': '11 14 2 3 5\\r\\n', 'output': ['NO']}, {'input': '7 7 1 10 3\\r\\n', 'output': ['NO']}, {'input': '49 50 1 2 27\\r\\n', 'output': ['NO']}, {'input': '1 10000000 1 10000000 123456\\r\\n', 'output': ['YES']}, {'input': '100000 10000000 100 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '17 19 2 3 8\\r\\n', 'output': ['NO']}, {'input': '4 6 3 9 1\\r\\n', 'output': ['YES']}, {'input': '19 20 6 7 3\\r\\n', 'output': ['NO']}, {'input': '5000000 10000000 1 4999999 1\\r\\n', 'output': ['NO']}]", "source_code": "//package main;\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int l = scanner.nextInt(), r = scanner.nextInt(), x = scanner.nextInt(), y = scanner.nextInt(), k = scanner.nextInt();\n        int count = 0;\n        for(int i = x; i <= y; i++){\n            double value = (double)(l * i)/k;\n            if((int)value <= r){\n                count++;\n            }\n        }\n        if(count!= 0){\n            System.out.println(\"YES\");\n        }else{\n            System.out.println(\"NO\");\n        }\n    }\n}"}
{"src_uid": "1110d3671e9f77fd8d66dca6e74d2048", "id": 65, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1200, "testcases": "[{'input': '1 10 1 10 1\\r\\n', 'output': ['YES']}, {'input': '1 5 6 10 1\\r\\n', 'output': ['NO']}, {'input': '1 1 1 1 1\\r\\n', 'output': ['YES']}, {'input': '1 1 1 1 2\\r\\n', 'output': ['NO']}, {'input': '1 100000 1 100000 100000\\r\\n', 'output': ['YES']}, {'input': '1 100000 1 100000 100001\\r\\n', 'output': ['NO']}, {'input': '25 10000 200 10000 5\\r\\n', 'output': ['YES']}, {'input': '1 100000 10 100000 50000\\r\\n', 'output': ['NO']}, {'input': '91939 94921 10197 89487 1\\r\\n', 'output': ['NO']}, {'input': '30518 58228 74071 77671 1\\r\\n', 'output': ['NO']}, {'input': '46646 79126 78816 91164 5\\r\\n', 'output': ['NO']}, {'input': '30070 83417 92074 99337 2\\r\\n', 'output': ['NO']}, {'input': '13494 17544 96820 99660 6\\r\\n', 'output': ['NO']}, {'input': '96918 97018 10077 86510 9\\r\\n', 'output': ['YES']}, {'input': '13046 45594 14823 52475 1\\r\\n', 'output': ['YES']}, {'input': '29174 40572 95377 97669 4\\r\\n', 'output': ['NO']}, {'input': '79894 92433 8634 86398 4\\r\\n', 'output': ['YES']}, {'input': '96022 98362 13380 94100 6\\r\\n', 'output': ['YES']}, {'input': '79446 95675 93934 96272 3\\r\\n', 'output': ['NO']}, {'input': '5440 46549 61481 99500 10\\r\\n', 'output': ['NO']}, {'input': '21569 53580 74739 87749 3\\r\\n', 'output': ['NO']}, {'input': '72289 78297 79484 98991 7\\r\\n', 'output': ['NO']}, {'input': '88417 96645 92742 98450 5\\r\\n', 'output': ['NO']}, {'input': '71841 96625 73295 77648 8\\r\\n', 'output': ['NO']}, {'input': '87969 99230 78041 94736 4\\r\\n', 'output': ['NO']}, {'input': '4 4 1 2 3\\r\\n', 'output': ['NO']}, {'input': '150 150 1 2 100\\r\\n', 'output': ['NO']}, {'input': '99 100 1 100 50\\r\\n', 'output': ['YES']}, {'input': '7 7 3 6 2\\r\\n', 'output': ['NO']}, {'input': '10 10 1 10 1\\r\\n', 'output': ['YES']}, {'input': '36 36 5 7 6\\r\\n', 'output': ['YES']}, {'input': '73 96 1 51 51\\r\\n', 'output': ['NO']}, {'input': '3 3 1 3 2\\r\\n', 'output': ['NO']}, {'input': '10000000 10000000 1 100000 10000000\\r\\n', 'output': ['YES']}, {'input': '9222174 9829060 9418763 9955619 9092468\\r\\n', 'output': ['NO']}, {'input': '70 70 1 2 50\\r\\n', 'output': ['NO']}, {'input': '100 200 1 20 5\\r\\n', 'output': ['YES']}, {'input': '1 200000 65536 65536 65537\\r\\n', 'output': ['NO']}, {'input': '15 15 1 100 1\\r\\n', 'output': ['YES']}, {'input': '10000000 10000000 1 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '10 10 2 5 4\\r\\n', 'output': ['NO']}, {'input': '67 69 7 7 9\\r\\n', 'output': ['NO']}, {'input': '100000 10000000 1 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '9 12 1 2 7\\r\\n', 'output': ['NO']}, {'input': '5426234 6375745 2636512 8492816 4409404\\r\\n', 'output': ['NO']}, {'input': '6134912 6134912 10000000 10000000 999869\\r\\n', 'output': ['NO']}, {'input': '3 3 1 100 1\\r\\n', 'output': ['YES']}, {'input': '10000000 10000000 10 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '4 4 1 100 2\\r\\n', 'output': ['YES']}, {'input': '8 13 1 4 7\\r\\n', 'output': ['NO']}, {'input': '10 10 100000 10000000 10000000\\r\\n', 'output': ['NO']}, {'input': '5 6 1 4 2\\r\\n', 'output': ['YES']}, {'input': '1002 1003 1 2 1000\\r\\n', 'output': ['NO']}, {'input': '4 5 1 2 2\\r\\n', 'output': ['YES']}, {'input': '5 6 1 5 1\\r\\n', 'output': ['YES']}, {'input': '15 21 2 4 7\\r\\n', 'output': ['YES']}, {'input': '4 5 3 7 1\\r\\n', 'output': ['YES']}, {'input': '15 15 3 4 4\\r\\n', 'output': ['NO']}, {'input': '3 6 1 2 2\\r\\n', 'output': ['YES']}, {'input': '2 10 3 6 3\\r\\n', 'output': ['YES']}, {'input': '1 10000000 1 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '8 13 1 2 7\\r\\n', 'output': ['NO']}, {'input': '98112 98112 100000 100000 128850\\r\\n', 'output': ['NO']}, {'input': '2 2 1 2 1\\r\\n', 'output': ['YES']}, {'input': '8 8 3 4 2\\r\\n', 'output': ['YES']}, {'input': '60 60 2 3 25\\r\\n', 'output': ['NO']}, {'input': '16 17 2 5 5\\r\\n', 'output': ['NO']}, {'input': '2 4 1 3 1\\r\\n', 'output': ['YES']}, {'input': '4 5 1 2 3\\r\\n', 'output': ['NO']}, {'input': '10 10 3 4 3\\r\\n', 'output': ['NO']}, {'input': '10 10000000 999999 10000000 300\\r\\n', 'output': ['NO']}, {'input': '100 120 9 11 10\\r\\n', 'output': ['YES']}, {'input': '8 20 1 3 4\\r\\n', 'output': ['YES']}, {'input': '10 14 2 3 4\\r\\n', 'output': ['YES']}, {'input': '2000 2001 1 3 1000\\r\\n', 'output': ['YES']}, {'input': '12 13 2 3 5\\r\\n', 'output': ['NO']}, {'input': '7 7 2 3 3\\r\\n', 'output': ['NO']}, {'input': '5 8 1 10000000 4\\r\\n', 'output': ['YES']}, {'input': '5 5 1 1 4\\r\\n', 'output': ['NO']}, {'input': '5 5 1 6 2\\r\\n', 'output': ['NO']}, {'input': '200 300 4000381 4000382 4000381\\r\\n', 'output': ['NO']}, {'input': '11 17 2 5 2\\r\\n', 'output': ['NO']}, {'input': '9999999 10000000 1 10000000 999997\\r\\n', 'output': ['NO']}, {'input': '7 8 2 3 3\\r\\n', 'output': ['NO']}, {'input': '7 7 3 3 2\\r\\n', 'output': ['NO']}, {'input': '15 15 2 3 7\\r\\n', 'output': ['NO']}, {'input': '65408 65408 859 859 10000000\\r\\n', 'output': ['NO']}, {'input': '1000000 10000000 1 100000 1\\r\\n', 'output': ['NO']}, {'input': '6 12 2 3 2\\r\\n', 'output': ['YES']}, {'input': '7 8 1 3 3\\r\\n', 'output': ['NO']}, {'input': '4 4 1 2 2\\r\\n', 'output': ['YES']}, {'input': '2 3 1 2 2\\r\\n', 'output': ['YES']}, {'input': '11 14 2 3 5\\r\\n', 'output': ['NO']}, {'input': '7 7 1 10 3\\r\\n', 'output': ['NO']}, {'input': '49 50 1 2 27\\r\\n', 'output': ['NO']}, {'input': '1 10000000 1 10000000 123456\\r\\n', 'output': ['YES']}, {'input': '100000 10000000 100 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '17 19 2 3 8\\r\\n', 'output': ['NO']}, {'input': '4 6 3 9 1\\r\\n', 'output': ['YES']}, {'input': '19 20 6 7 3\\r\\n', 'output': ['NO']}, {'input': '5000000 10000000 1 4999999 1\\r\\n', 'output': ['NO']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Solution {\n\n    static boolean solve() throws IOException {\n        int l = reader.nextInt();\n        int r = reader.nextInt();\n        int x = reader.nextInt();\n        int y = reader.nextInt();\n        int k = reader.nextInt();\n\n        boolean success = false;\n\n        for (int b = Math.max(x, k); b <= y; b++) {\n            for (int a = Math.max(l, (int)Math.ceil((double)k * b)); a <= r; a++) {\n                if (a * b == k * b) {\n                    success = true;\n                }\n            }\n        }\n\n        return success;\n    }\n\n    private static void run() throws IOException {\n        String result = solve()? \"YES\" : \"NO\";\n        System.out.println(result);\n    }\n\n    private static BufferedReader reader;\n\n    public static void main(String[] args) throws IOException {\n        reader = new BufferedReader(new InputStreamReader(System.in));\n        run();\n        reader.close();\n    }\n\n}\n"}
{"src_uid": "1110d3671e9f77fd8d66dca6e74d2048", "id": 65, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1200, "testcases": "[{'input': '1 10 1 10 1\\r\\n', 'output': ['YES']}, {'input': '1 5 6 10 1\\r\\n', 'output': ['NO']}, {'input': '1 1 1 1 1\\r\\n', 'output': ['YES']}, {'input': '1 1 1 1 2\\r\\n', 'output': ['NO']}, {'input': '1 100000 1 100000 100000\\r\\n', 'output': ['YES']}, {'input': '1 100000 1 100000 100001\\r\\n', 'output': ['NO']}, {'input': '25 10000 200 10000 5\\r\\n', 'output': ['YES']}, {'input': '1 100000 10 100000 50000\\r\\n', 'output': ['NO']}, {'input': '91939 94921 10197 89487 1\\r\\n', 'output': ['NO']}, {'input': '30518 58228 74071 77671 1\\r\\n', 'output': ['NO']}, {'input': '46646 79126 78816 91164 5\\r\\n', 'output': ['NO']}, {'input': '30070 83417 92074 99337 2\\r\\n', 'output': ['NO']}, {'input': '13494 17544 96820 99660 6\\r\\n', 'output': ['NO']}, {'input': '96918 97018 10077 86510 9\\r\\n', 'output': ['YES']}, {'input': '13046 45594 14823 52475 1\\r\\n', 'output': ['YES']}, {'input': '29174 40572 95377 97669 4\\r\\n', 'output': ['NO']}, {'input': '79894 92433 8634 86398 4\\r\\n', 'output': ['YES']}, {'input': '96022 98362 13380 94100 6\\r\\n', 'output': ['YES']}, {'input': '79446 95675 93934 96272 3\\r\\n', 'output': ['NO']}, {'input': '5440 46549 61481 99500 10\\r\\n', 'output': ['NO']}, {'input': '21569 53580 74739 87749 3\\r\\n', 'output': ['NO']}, {'input': '72289 78297 79484 98991 7\\r\\n', 'output': ['NO']}, {'input': '88417 96645 92742 98450 5\\r\\n', 'output': ['NO']}, {'input': '71841 96625 73295 77648 8\\r\\n', 'output': ['NO']}, {'input': '87969 99230 78041 94736 4\\r\\n', 'output': ['NO']}, {'input': '4 4 1 2 3\\r\\n', 'output': ['NO']}, {'input': '150 150 1 2 100\\r\\n', 'output': ['NO']}, {'input': '99 100 1 100 50\\r\\n', 'output': ['YES']}, {'input': '7 7 3 6 2\\r\\n', 'output': ['NO']}, {'input': '10 10 1 10 1\\r\\n', 'output': ['YES']}, {'input': '36 36 5 7 6\\r\\n', 'output': ['YES']}, {'input': '73 96 1 51 51\\r\\n', 'output': ['NO']}, {'input': '3 3 1 3 2\\r\\n', 'output': ['NO']}, {'input': '10000000 10000000 1 100000 10000000\\r\\n', 'output': ['YES']}, {'input': '9222174 9829060 9418763 9955619 9092468\\r\\n', 'output': ['NO']}, {'input': '70 70 1 2 50\\r\\n', 'output': ['NO']}, {'input': '100 200 1 20 5\\r\\n', 'output': ['YES']}, {'input': '1 200000 65536 65536 65537\\r\\n', 'output': ['NO']}, {'input': '15 15 1 100 1\\r\\n', 'output': ['YES']}, {'input': '10000000 10000000 1 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '10 10 2 5 4\\r\\n', 'output': ['NO']}, {'input': '67 69 7 7 9\\r\\n', 'output': ['NO']}, {'input': '100000 10000000 1 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '9 12 1 2 7\\r\\n', 'output': ['NO']}, {'input': '5426234 6375745 2636512 8492816 4409404\\r\\n', 'output': ['NO']}, {'input': '6134912 6134912 10000000 10000000 999869\\r\\n', 'output': ['NO']}, {'input': '3 3 1 100 1\\r\\n', 'output': ['YES']}, {'input': '10000000 10000000 10 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '4 4 1 100 2\\r\\n', 'output': ['YES']}, {'input': '8 13 1 4 7\\r\\n', 'output': ['NO']}, {'input': '10 10 100000 10000000 10000000\\r\\n', 'output': ['NO']}, {'input': '5 6 1 4 2\\r\\n', 'output': ['YES']}, {'input': '1002 1003 1 2 1000\\r\\n', 'output': ['NO']}, {'input': '4 5 1 2 2\\r\\n', 'output': ['YES']}, {'input': '5 6 1 5 1\\r\\n', 'output': ['YES']}, {'input': '15 21 2 4 7\\r\\n', 'output': ['YES']}, {'input': '4 5 3 7 1\\r\\n', 'output': ['YES']}, {'input': '15 15 3 4 4\\r\\n', 'output': ['NO']}, {'input': '3 6 1 2 2\\r\\n', 'output': ['YES']}, {'input': '2 10 3 6 3\\r\\n', 'output': ['YES']}, {'input': '1 10000000 1 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '8 13 1 2 7\\r\\n', 'output': ['NO']}, {'input': '98112 98112 100000 100000 128850\\r\\n', 'output': ['NO']}, {'input': '2 2 1 2 1\\r\\n', 'output': ['YES']}, {'input': '8 8 3 4 2\\r\\n', 'output': ['YES']}, {'input': '60 60 2 3 25\\r\\n', 'output': ['NO']}, {'input': '16 17 2 5 5\\r\\n', 'output': ['NO']}, {'input': '2 4 1 3 1\\r\\n', 'output': ['YES']}, {'input': '4 5 1 2 3\\r\\n', 'output': ['NO']}, {'input': '10 10 3 4 3\\r\\n', 'output': ['NO']}, {'input': '10 10000000 999999 10000000 300\\r\\n', 'output': ['NO']}, {'input': '100 120 9 11 10\\r\\n', 'output': ['YES']}, {'input': '8 20 1 3 4\\r\\n', 'output': ['YES']}, {'input': '10 14 2 3 4\\r\\n', 'output': ['YES']}, {'input': '2000 2001 1 3 1000\\r\\n', 'output': ['YES']}, {'input': '12 13 2 3 5\\r\\n', 'output': ['NO']}, {'input': '7 7 2 3 3\\r\\n', 'output': ['NO']}, {'input': '5 8 1 10000000 4\\r\\n', 'output': ['YES']}, {'input': '5 5 1 1 4\\r\\n', 'output': ['NO']}, {'input': '5 5 1 6 2\\r\\n', 'output': ['NO']}, {'input': '200 300 4000381 4000382 4000381\\r\\n', 'output': ['NO']}, {'input': '11 17 2 5 2\\r\\n', 'output': ['NO']}, {'input': '9999999 10000000 1 10000000 999997\\r\\n', 'output': ['NO']}, {'input': '7 8 2 3 3\\r\\n', 'output': ['NO']}, {'input': '7 7 3 3 2\\r\\n', 'output': ['NO']}, {'input': '15 15 2 3 7\\r\\n', 'output': ['NO']}, {'input': '65408 65408 859 859 10000000\\r\\n', 'output': ['NO']}, {'input': '1000000 10000000 1 100000 1\\r\\n', 'output': ['NO']}, {'input': '6 12 2 3 2\\r\\n', 'output': ['YES']}, {'input': '7 8 1 3 3\\r\\n', 'output': ['NO']}, {'input': '4 4 1 2 2\\r\\n', 'output': ['YES']}, {'input': '2 3 1 2 2\\r\\n', 'output': ['YES']}, {'input': '11 14 2 3 5\\r\\n', 'output': ['NO']}, {'input': '7 7 1 10 3\\r\\n', 'output': ['NO']}, {'input': '49 50 1 2 27\\r\\n', 'output': ['NO']}, {'input': '1 10000000 1 10000000 123456\\r\\n', 'output': ['YES']}, {'input': '100000 10000000 100 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '17 19 2 3 8\\r\\n', 'output': ['NO']}, {'input': '4 6 3 9 1\\r\\n', 'output': ['YES']}, {'input': '19 20 6 7 3\\r\\n', 'output': ['NO']}, {'input': '5000000 10000000 1 4999999 1\\r\\n', 'output': ['NO']}]", "source_code": "import java.util.*;\n\npublic class A\n{\n\tpublic static void main(String[] args) \n\t{\n\t\tScanner read = new Scanner(System.in);\n\t\tint l = read.nextInt(),\n\t\t\tr = read.nextInt(),\n\t\t\tx = read.nextInt(),\n\t\t\ty = read.nextInt(),\n\t\t\tk = read.nextInt(),\n\t\t\tflag = 0;\n\t\tfor(int a = l; a <= r; a++)\n\t\t{\n\t\t\tfor(int b = x; b <= y; b++)\n\t\t\t{\n\t\t\t\tif(((float)a / b) == k)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(\"YES\");\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag == 1)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag == 0)\n\t\t{\n\t\t\tSystem.out.println(\"NO\");\n\t\t}\n\t}\n}"}
{"src_uid": "1110d3671e9f77fd8d66dca6e74d2048", "id": 65, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1200, "testcases": "[{'input': '1 10 1 10 1\\r\\n', 'output': ['YES']}, {'input': '1 5 6 10 1\\r\\n', 'output': ['NO']}, {'input': '1 1 1 1 1\\r\\n', 'output': ['YES']}, {'input': '1 1 1 1 2\\r\\n', 'output': ['NO']}, {'input': '1 100000 1 100000 100000\\r\\n', 'output': ['YES']}, {'input': '1 100000 1 100000 100001\\r\\n', 'output': ['NO']}, {'input': '25 10000 200 10000 5\\r\\n', 'output': ['YES']}, {'input': '1 100000 10 100000 50000\\r\\n', 'output': ['NO']}, {'input': '91939 94921 10197 89487 1\\r\\n', 'output': ['NO']}, {'input': '30518 58228 74071 77671 1\\r\\n', 'output': ['NO']}, {'input': '46646 79126 78816 91164 5\\r\\n', 'output': ['NO']}, {'input': '30070 83417 92074 99337 2\\r\\n', 'output': ['NO']}, {'input': '13494 17544 96820 99660 6\\r\\n', 'output': ['NO']}, {'input': '96918 97018 10077 86510 9\\r\\n', 'output': ['YES']}, {'input': '13046 45594 14823 52475 1\\r\\n', 'output': ['YES']}, {'input': '29174 40572 95377 97669 4\\r\\n', 'output': ['NO']}, {'input': '79894 92433 8634 86398 4\\r\\n', 'output': ['YES']}, {'input': '96022 98362 13380 94100 6\\r\\n', 'output': ['YES']}, {'input': '79446 95675 93934 96272 3\\r\\n', 'output': ['NO']}, {'input': '5440 46549 61481 99500 10\\r\\n', 'output': ['NO']}, {'input': '21569 53580 74739 87749 3\\r\\n', 'output': ['NO']}, {'input': '72289 78297 79484 98991 7\\r\\n', 'output': ['NO']}, {'input': '88417 96645 92742 98450 5\\r\\n', 'output': ['NO']}, {'input': '71841 96625 73295 77648 8\\r\\n', 'output': ['NO']}, {'input': '87969 99230 78041 94736 4\\r\\n', 'output': ['NO']}, {'input': '4 4 1 2 3\\r\\n', 'output': ['NO']}, {'input': '150 150 1 2 100\\r\\n', 'output': ['NO']}, {'input': '99 100 1 100 50\\r\\n', 'output': ['YES']}, {'input': '7 7 3 6 2\\r\\n', 'output': ['NO']}, {'input': '10 10 1 10 1\\r\\n', 'output': ['YES']}, {'input': '36 36 5 7 6\\r\\n', 'output': ['YES']}, {'input': '73 96 1 51 51\\r\\n', 'output': ['NO']}, {'input': '3 3 1 3 2\\r\\n', 'output': ['NO']}, {'input': '10000000 10000000 1 100000 10000000\\r\\n', 'output': ['YES']}, {'input': '9222174 9829060 9418763 9955619 9092468\\r\\n', 'output': ['NO']}, {'input': '70 70 1 2 50\\r\\n', 'output': ['NO']}, {'input': '100 200 1 20 5\\r\\n', 'output': ['YES']}, {'input': '1 200000 65536 65536 65537\\r\\n', 'output': ['NO']}, {'input': '15 15 1 100 1\\r\\n', 'output': ['YES']}, {'input': '10000000 10000000 1 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '10 10 2 5 4\\r\\n', 'output': ['NO']}, {'input': '67 69 7 7 9\\r\\n', 'output': ['NO']}, {'input': '100000 10000000 1 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '9 12 1 2 7\\r\\n', 'output': ['NO']}, {'input': '5426234 6375745 2636512 8492816 4409404\\r\\n', 'output': ['NO']}, {'input': '6134912 6134912 10000000 10000000 999869\\r\\n', 'output': ['NO']}, {'input': '3 3 1 100 1\\r\\n', 'output': ['YES']}, {'input': '10000000 10000000 10 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '4 4 1 100 2\\r\\n', 'output': ['YES']}, {'input': '8 13 1 4 7\\r\\n', 'output': ['NO']}, {'input': '10 10 100000 10000000 10000000\\r\\n', 'output': ['NO']}, {'input': '5 6 1 4 2\\r\\n', 'output': ['YES']}, {'input': '1002 1003 1 2 1000\\r\\n', 'output': ['NO']}, {'input': '4 5 1 2 2\\r\\n', 'output': ['YES']}, {'input': '5 6 1 5 1\\r\\n', 'output': ['YES']}, {'input': '15 21 2 4 7\\r\\n', 'output': ['YES']}, {'input': '4 5 3 7 1\\r\\n', 'output': ['YES']}, {'input': '15 15 3 4 4\\r\\n', 'output': ['NO']}, {'input': '3 6 1 2 2\\r\\n', 'output': ['YES']}, {'input': '2 10 3 6 3\\r\\n', 'output': ['YES']}, {'input': '1 10000000 1 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '8 13 1 2 7\\r\\n', 'output': ['NO']}, {'input': '98112 98112 100000 100000 128850\\r\\n', 'output': ['NO']}, {'input': '2 2 1 2 1\\r\\n', 'output': ['YES']}, {'input': '8 8 3 4 2\\r\\n', 'output': ['YES']}, {'input': '60 60 2 3 25\\r\\n', 'output': ['NO']}, {'input': '16 17 2 5 5\\r\\n', 'output': ['NO']}, {'input': '2 4 1 3 1\\r\\n', 'output': ['YES']}, {'input': '4 5 1 2 3\\r\\n', 'output': ['NO']}, {'input': '10 10 3 4 3\\r\\n', 'output': ['NO']}, {'input': '10 10000000 999999 10000000 300\\r\\n', 'output': ['NO']}, {'input': '100 120 9 11 10\\r\\n', 'output': ['YES']}, {'input': '8 20 1 3 4\\r\\n', 'output': ['YES']}, {'input': '10 14 2 3 4\\r\\n', 'output': ['YES']}, {'input': '2000 2001 1 3 1000\\r\\n', 'output': ['YES']}, {'input': '12 13 2 3 5\\r\\n', 'output': ['NO']}, {'input': '7 7 2 3 3\\r\\n', 'output': ['NO']}, {'input': '5 8 1 10000000 4\\r\\n', 'output': ['YES']}, {'input': '5 5 1 1 4\\r\\n', 'output': ['NO']}, {'input': '5 5 1 6 2\\r\\n', 'output': ['NO']}, {'input': '200 300 4000381 4000382 4000381\\r\\n', 'output': ['NO']}, {'input': '11 17 2 5 2\\r\\n', 'output': ['NO']}, {'input': '9999999 10000000 1 10000000 999997\\r\\n', 'output': ['NO']}, {'input': '7 8 2 3 3\\r\\n', 'output': ['NO']}, {'input': '7 7 3 3 2\\r\\n', 'output': ['NO']}, {'input': '15 15 2 3 7\\r\\n', 'output': ['NO']}, {'input': '65408 65408 859 859 10000000\\r\\n', 'output': ['NO']}, {'input': '1000000 10000000 1 100000 1\\r\\n', 'output': ['NO']}, {'input': '6 12 2 3 2\\r\\n', 'output': ['YES']}, {'input': '7 8 1 3 3\\r\\n', 'output': ['NO']}, {'input': '4 4 1 2 2\\r\\n', 'output': ['YES']}, {'input': '2 3 1 2 2\\r\\n', 'output': ['YES']}, {'input': '11 14 2 3 5\\r\\n', 'output': ['NO']}, {'input': '7 7 1 10 3\\r\\n', 'output': ['NO']}, {'input': '49 50 1 2 27\\r\\n', 'output': ['NO']}, {'input': '1 10000000 1 10000000 123456\\r\\n', 'output': ['YES']}, {'input': '100000 10000000 100 10000000 100000\\r\\n', 'output': ['YES']}, {'input': '17 19 2 3 8\\r\\n', 'output': ['NO']}, {'input': '4 6 3 9 1\\r\\n', 'output': ['YES']}, {'input': '19 20 6 7 3\\r\\n', 'output': ['NO']}, {'input': '5000000 10000000 1 4999999 1\\r\\n', 'output': ['NO']}]", "source_code": "import java.util.*;\n\npublic class A{\n\tpublic static void main(String[] args) {\n\t\tScanner kbd=new Scanner(System.in);\n\t\tint a=kbd.nextInt(),b=kbd.nextInt(),c=kbd.nextInt(),d=kbd.nextInt(),e=kbd.nextInt();\n\t\tint max=100000;\n\t\tfor(int i=a;i<=b;i++){\n\t\t\tfor(int j=c;j<=d;j++){\n\t\t\t\tif(i*1.0/j==e){\n\t\t\t\t\tSystem.out.println(\"YES\");\n\t\t\t\t\tmax=i;\n\t\t\t\t\ti=b+2;\n\t\t\t\t\tj=d+2;\n\t\t\t\t}\n\t\t\t\tif(j<c || i<a){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(max==100000){\n\t\t\tSystem.out.println(\"NO\");\n\t\t}\n\t}\n}"}
{"src_uid": "bd5912fe2c5c37658f28f6b159b39645", "id": 66, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1000, "testcases": "[{'input': 'yandex\\r\\n6\\r\\n', 'output': ['0\\r\\n']}, {'input': 'yahoo\\r\\n5\\r\\n', 'output': ['1\\r\\n']}, {'input': 'google\\r\\n7\\r\\n', 'output': ['impossible\\r\\n']}, {'input': 'a\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'z\\r\\n2\\r\\n', 'output': ['impossible\\r\\n']}, {'input': 'fwgfrwgkuwghfiruhewgirueguhergiqrbvgrgf\\r\\n26\\r\\n', 'output': ['14\\r\\n']}, {'input': 'nfevghreuoghrueighoqghbnebvnejbvnbgneluqe\\r\\n26\\r\\n', 'output': ['12\\r\\n']}, {'input': 'a\\r\\n3\\r\\n', 'output': ['impossible\\r\\n']}, {'input': 'smaxpqplaqqbxuqxalqmbmmgubbpspxhawbxsuqhhegpmmpebqmqpbbeplwaepxmsahuepuhuhwxeqmmlgqubuaxehwuwasgxpqmugbmuawuhwqlswllssueglbxepbmwgs\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'cuguccgcugcugucgggggcgcgucgucugcuuuccccuugccg\\r\\n4\\r\\n', 'output': ['1\\r\\n']}, {'input': 'fcfccfcfccfcfcffcffffffcfccfccfcffccccfcffffccfccfcffcfcccccffcfffcccffcfccfffffcccfccffffffccfccccf\\r\\n20\\r\\n', 'output': ['18\\r\\n']}, {'input': 'swmkwaruyv\\r\\n5\\r\\n', 'output': ['0\\r\\n']}, {'input': 'tnbqpsuhkczmejirvyfdolxwga\\r\\n22\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcde\\r\\n3\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abb\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'aaaa\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcde\\r\\n2\\r\\n', 'output': ['0\\r\\n']}, {'input': 'yandex\\r\\n4\\r\\n', 'output': ['0\\r\\n']}, {'input': 'aaabbbccc\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcd\\r\\n2\\r\\n', 'output': ['0\\r\\n']}, {'input': 'asdfgh\\r\\n2\\r\\n', 'output': ['0\\r\\n']}, {'input': 'aab\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'mynameissako\\r\\n5\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcde\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcd\\r\\n3\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcdef\\r\\n2\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcdefg\\r\\n4\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abc\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'asdafjsgljdllgjdgkl\\r\\n5\\r\\n', 'output': ['0\\r\\n']}, {'input': 'yaay\\r\\n3\\r\\n', 'output': ['1\\r\\n']}, {'input': 'yaay\\r\\n4\\r\\n', 'output': ['2\\r\\n']}, {'input': 'zzzzzz\\r\\n2\\r\\n', 'output': ['1\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Different\n{\n\tpublic static void main(String args[])\n\t{\n\t\tFastScanner scanner = new FastScanner();\n\t\tString s = scanner.next();\n\t\tint k = scanner.nextInt();\n\t\tint N = s.length();\n\t\tint min = (N > k)? k : N;\n\t\tint count[] = new int[min];\n\t\tfor(int i = 0; i < min; ++i) count[i] = 1;\n\t\tfor(int i = 0; i < min - 1; ++i)\n\t\t\tif(count[i] == count[i + 1])\n\t\t\t\t++count[i];\n\t\tfor(int i = 0; i < N; ++i)\n\t\t\tif(i!= 0 && count[i] == count[i - 1])\n\t\t\t\t++count[i];\n\t\tfor(int i = 1; i < min; ++i)\n\t\t\tif(count[i] > count[i - 1])\n\t\t\t\tcount[i] = count[i - 1];\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < min; ++i)\n\t\t\tsum += count[i];\n\t\tif(N < k)\n\t\t{\n\t\t\tSystem.out.println(\"impossible\");\n\t\t\treturn;\n\t\t}\n\t\tif(sum <= k)\n\t\t{\n\t\t\tSystem.out.println(k - sum);\n\t\t\treturn;\n\t\t}\n\t\tint res = 0;\n\t\tfor(int i = min - 2; i >= 0; --i)\n\t\t\tif(count[i + 1] > count[i])\n\t\t\t{\n\t\t\t\tres += count[i + 1] - count[i];\n\t\t\t\tcount[i] = count[i + 1];\n\t\t\t}\n\t\tres += k - sum;\n\t\tSystem.out.println(res);\n\t}\n\n\tprivate static class FastScanner {\n\t\tprivate final InputStream in = System.in;\n\t\tprivate final byte[] buffer = new byte[1024];\n\t\tprivate int ptr = 0;\n\t\tprivate int buflen = 0;\n\t\tprivate boolean hasNextByte() {\n\t\t\t\tif (ptr < buflen) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t}else{\n\t\t\t\t\t\tptr = 0;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tbuflen = in.read(buffer);\n\t\t\t\t\t\t} catch (java.io.IOException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (buflen <= 0) {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t}\n\t\tprivate int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n\t\tprivate static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n\t\tpublic boolean hasNext() { while(hasNextByte() &&!isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\n\t\tpublic String next() {\n\t\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\tint b = readByte();\n\t\t\t\twhile(isPrintableChar(b)) {\n\t\t\t\t\t\tsb.appendCodePoint(b);\n\t\t\t\t\t\tb = readByte();\n\t\t\t\t}\n\t\t\t\treturn sb.toString();\n\t\t}\n\t\tpublic long nextLong() {\n\t\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\t\tlong n = 0;\n\t\t\t\tboolean minus = false;\n\t\t\t\tint b = readByte();\n\t\t\t\tif (b == '-') {\n\t\t\t\t\t\tminus = true;"}
{"src_uid": "bd5912fe2c5c37658f28f6b159b39645", "id": 66, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1000, "testcases": "[{'input': 'yandex\\r\\n6\\r\\n', 'output': ['0\\r\\n']}, {'input': 'yahoo\\r\\n5\\r\\n', 'output': ['1\\r\\n']}, {'input': 'google\\r\\n7\\r\\n', 'output': ['impossible\\r\\n']}, {'input': 'a\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'z\\r\\n2\\r\\n', 'output': ['impossible\\r\\n']}, {'input': 'fwgfrwgkuwghfiruhewgirueguhergiqrbvgrgf\\r\\n26\\r\\n', 'output': ['14\\r\\n']}, {'input': 'nfevghreuoghrueighoqghbnebvnejbvnbgneluqe\\r\\n26\\r\\n', 'output': ['12\\r\\n']}, {'input': 'a\\r\\n3\\r\\n', 'output': ['impossible\\r\\n']}, {'input': 'smaxpqplaqqbxuqxalqmbmmgubbpspxhawbxsuqhhegpmmpebqmqpbbeplwaepxmsahuepuhuhwxeqmmlgqubuaxehwuwasgxpqmugbmuawuhwqlswllssueglbxepbmwgs\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'cuguccgcugcugucgggggcgcgucgucugcuuuccccuugccg\\r\\n4\\r\\n', 'output': ['1\\r\\n']}, {'input': 'fcfccfcfccfcfcffcffffffcfccfccfcffccccfcffffccfccfcffcfcccccffcfffcccffcfccfffffcccfccffffffccfccccf\\r\\n20\\r\\n', 'output': ['18\\r\\n']}, {'input': 'swmkwaruyv\\r\\n5\\r\\n', 'output': ['0\\r\\n']}, {'input': 'tnbqpsuhkczmejirvyfdolxwga\\r\\n22\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcde\\r\\n3\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abb\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'aaaa\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcde\\r\\n2\\r\\n', 'output': ['0\\r\\n']}, {'input': 'yandex\\r\\n4\\r\\n', 'output': ['0\\r\\n']}, {'input': 'aaabbbccc\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcd\\r\\n2\\r\\n', 'output': ['0\\r\\n']}, {'input': 'asdfgh\\r\\n2\\r\\n', 'output': ['0\\r\\n']}, {'input': 'aab\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'mynameissako\\r\\n5\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcde\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcd\\r\\n3\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcdef\\r\\n2\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcdefg\\r\\n4\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abc\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'asdafjsgljdllgjdgkl\\r\\n5\\r\\n', 'output': ['0\\r\\n']}, {'input': 'yaay\\r\\n3\\r\\n', 'output': ['1\\r\\n']}, {'input': 'yaay\\r\\n4\\r\\n', 'output': ['2\\r\\n']}, {'input': 'zzzzzz\\r\\n2\\r\\n', 'output': ['1\\r\\n']}]", "source_code": "import java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport java.util.Map.*;\n\npublic class Main {\n\tpublic static void main(String[] args) throws IOException{\n\t\tFastScanner in = new FastScanner();\n\t\tString s = in.nextLine();\n\t\tint k = in.nextInt();\n\t\tint change_amount = k - getAmountOfLetters(s);\n\t\tint size = s.length();\n\t\tif(k > size){\n\t\t\tSystem.out.println(\"impossible\");\n\t\t\treturn;\n\t\t}else if(change_amount > 0)\n\t\t\tSystem.out.println(change_amount);\n\t\telse\n\t\t\tSystem.out.println(\"0\");\n\t}\n\n\tprivate static int getAmountOfLetters(String s) {\n\t\tSet<Character> set = new HashSet<>();\n\t\tfor(char c : s.toCharArray())\n\t\t\tset.add(c);\n\t\treturn set.size();\n\t}\n\n\tprivate static class FastScanner {\n\t\tprivate final InputStream in = System.in;\n\t\tprivate final byte[] buffer = new byte[1024];\n\t\tprivate int ptr = 0;\n\t\tprivate int buflen = 0;\n\t\tprivate boolean hasNextByte() {\n\t\t\t\t\t\tif (ptr < buflen) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tptr = 0;\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\tbuflen = in.read(buffer);\n\t\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (buflen <= 0) {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\tprivate int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n\t\tprivate static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n\t\tpublic boolean hasNext() { while(hasNextByte() &&!isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\n\t\tpublic String next() {\n\t\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\tint b = readByte();\n\t\t\t\twhile(isPrintableChar(b)) {\n\t\t\t\t\t\tsb.appendCodePoint(b);\n\t\t\t\t\t\tb = readByte();\n\t\t\t\t}\n\t\t\t\treturn sb.toString();\n\t\t}\n\t\tpublic long nextLong() {\n\t\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\t\tlong n = 0;\n\t\t\t\tboolean minus = false;\n\t\t\t\tint b = readByte();\n\t\t\t\tif (b == '-') {\n\t\t\t\t\t\tminus = true;\n\t\t\t\t\t\tb = readByte();\n\t\t\t\t}\n\t\t\t\tif (b < '0' || '9' < b) {\n\t\t\t\t\t\tthrow new NumberFormatException();\n\t\t\t\t}\n\t\t\t\twhile(true){\n\t\t\t\t\t\tif ('0' <= b && b <= '9') {\n\t\t\t\t\t\t\t\tn *= 10;\n\t\t\t\t\t\t\t\tn += b - '0';\n\t\t\t\t\t\t}else if(b == -1 ||!isPrintableChar(b)){\n\t\t\t\t\t\t\t\treturn minus? -n : n;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tthrow new NumberFormatException();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tb = readByte();\n\t\t\t\t}\n\t\t}\n\t\tpublic int nextInt() {\n\t\t\t\tlong nl = nextLong();\n\t\t\t"}
{"src_uid": "bd5912fe2c5c37658f28f6b159b39645", "id": 66, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1000, "testcases": "[{'input': 'yandex\\r\\n6\\r\\n', 'output': ['0\\r\\n']}, {'input': 'yahoo\\r\\n5\\r\\n', 'output': ['1\\r\\n']}, {'input': 'google\\r\\n7\\r\\n', 'output': ['impossible\\r\\n']}, {'input': 'a\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'z\\r\\n2\\r\\n', 'output': ['impossible\\r\\n']}, {'input': 'fwgfrwgkuwghfiruhewgirueguhergiqrbvgrgf\\r\\n26\\r\\n', 'output': ['14\\r\\n']}, {'input': 'nfevghreuoghrueighoqghbnebvnejbvnbgneluqe\\r\\n26\\r\\n', 'output': ['12\\r\\n']}, {'input': 'a\\r\\n3\\r\\n', 'output': ['impossible\\r\\n']}, {'input': 'smaxpqplaqqbxuqxalqmbmmgubbpspxhawbxsuqhhegpmmpebqmqpbbeplwaepxmsahuepuhuhwxeqmmlgqubuaxehwuwasgxpqmugbmuawuhwqlswllssueglbxepbmwgs\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'cuguccgcugcugucgggggcgcgucgucugcuuuccccuugccg\\r\\n4\\r\\n', 'output': ['1\\r\\n']}, {'input': 'fcfccfcfccfcfcffcffffffcfccfccfcffccccfcffffccfccfcffcfcccccffcfffcccffcfccfffffcccfccffffffccfccccf\\r\\n20\\r\\n', 'output': ['18\\r\\n']}, {'input': 'swmkwaruyv\\r\\n5\\r\\n', 'output': ['0\\r\\n']}, {'input': 'tnbqpsuhkczmejirvyfdolxwga\\r\\n22\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcde\\r\\n3\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abb\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'aaaa\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcde\\r\\n2\\r\\n', 'output': ['0\\r\\n']}, {'input': 'yandex\\r\\n4\\r\\n', 'output': ['0\\r\\n']}, {'input': 'aaabbbccc\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcd\\r\\n2\\r\\n', 'output': ['0\\r\\n']}, {'input': 'asdfgh\\r\\n2\\r\\n', 'output': ['0\\r\\n']}, {'input': 'aab\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'mynameissako\\r\\n5\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcde\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcd\\r\\n3\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcdef\\r\\n2\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcdefg\\r\\n4\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abc\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'asdafjsgljdllgjdgkl\\r\\n5\\r\\n', 'output': ['0\\r\\n']}, {'input': 'yaay\\r\\n3\\r\\n', 'output': ['1\\r\\n']}, {'input': 'yaay\\r\\n4\\r\\n', 'output': ['2\\r\\n']}, {'input': 'zzzzzz\\r\\n2\\r\\n', 'output': ['1\\r\\n']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n    static class Reader {\n        static final int BUFFER_SIZE = 1 << 16;\n        private final DataInputStream din;\n        private final byte[] buffer;\n        private int bufferPointer, bytesRead;\n\n        Reader() {\n            din = new DataInputStream(System.in);\n            buffer = new byte[BUFFER_SIZE];\n            bufferPointer = bytesRead = 0;\n        }\n\n        public Reader(String file_name) throws FileNotFoundException {\n            din = new DataInputStream(new FileInputStream(file_name));\n            buffer = new byte[BUFFER_SIZE];\n            bufferPointer = bytesRead = 0;\n        }\n\n        public String readLine() throws IOException {\n            byte[] buf = new byte[1024]; // line length\n            int cnt = 0, c;\n            boolean isComment = false;\n            while ((c = read())!= -1) {\n                if (isComment) {\n                    if (c == '\\n') isComment = false;\n                } else {\n                    if (c == '#') isComment = true;\n                    else if (c == '\\n') {\n                        return new String(buf, 0, cnt);\n                    } else {\n                        buf[cnt++] = (byte) c;\n                    }\n                }\n            }\n            return new String(buf, 0, cnt);\n        }\n\n        public int nextInt() throws IOException {\n            int ret = 0;\n            byte c = read();\n            boolean minus = false;\n            if (c == '-') {\n                minus = true;\n                c = read();\n            }\n            if (c < '0' || '9' < c) {\n                throw new NumberFormatException();\n            }\n            do {\n                ret = ret * 10 + c - '0';\n            } while ((c = read()) >= '0' && c <= '9');\n            if (minus) {\n                return -ret;\n            } else {\n                return ret;\n            }\n        }\n\n        public long nextLong() throws IOException {\n            long ret = 0;\n            byte c = read();\n            boolean minus = false;\n            if (c == '-') {\n                minus = true;\n                c = read();\n            }\n            if (c < '0' || '9' < c) {\n                throw new NumberFormatException();\n            }\n            do {\n                ret = ret * 10 + c - '0';\n            } while ((c = read()) >= '0' && c <= '9');\n            if (minus) {\n                return -ret;\n            } else {\n                return ret;\n            }\n        }\n\n        public double nextDouble() throws IOException {\n            double ret = 0, div = 1;\n            byte c = read();\n            boolean minus = false;\n            if (c == '-') {\n                minus = true;\n                c = read();\n            }\n            if (c < '0' || '9' < c) {\n                throw new NumberFormatException();\n            }\n            do {\n                ret = ret * 10 + c - '0';\n            }\n            while ((c = read()) >= '0' && c <= '9');\n            if (c == '.') {\n                while ((c = read()) >= '0' && c <= '9') {\n                    ret += (c - '0') / (div *= 10);\n                }\n            }\n            if (minus) {\n                return -ret;\n            } else {\n                return ret;\n            }\n        }\n\n        private void fillBuffer() throws IOException {\n            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);\n            if (bytesRead == -1) {\n                buffer[0] = -1;\n            }\n        }\n\n        private byte read() throws IOException {\n            if (bufferPointer == bytesRead) {\n                fillBuffer();\n            }\n            return buffer[bufferPointer++];\n        }\n\n        public void close() throws IOException {\n            if (din == null) {\n                return;\n            }\n            din.close();\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        Reader"}
{"src_uid": "bd5912fe2c5c37658f28f6b159b39645", "id": 66, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1000, "testcases": "[{'input': 'yandex\\r\\n6\\r\\n', 'output': ['0\\r\\n']}, {'input': 'yahoo\\r\\n5\\r\\n', 'output': ['1\\r\\n']}, {'input': 'google\\r\\n7\\r\\n', 'output': ['impossible\\r\\n']}, {'input': 'a\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'z\\r\\n2\\r\\n', 'output': ['impossible\\r\\n']}, {'input': 'fwgfrwgkuwghfiruhewgirueguhergiqrbvgrgf\\r\\n26\\r\\n', 'output': ['14\\r\\n']}, {'input': 'nfevghreuoghrueighoqghbnebvnejbvnbgneluqe\\r\\n26\\r\\n', 'output': ['12\\r\\n']}, {'input': 'a\\r\\n3\\r\\n', 'output': ['impossible\\r\\n']}, {'input': 'smaxpqplaqqbxuqxalqmbmmgubbpspxhawbxsuqhhegpmmpebqmqpbbeplwaepxmsahuepuhuhwxeqmmlgqubuaxehwuwasgxpqmugbmuawuhwqlswllssueglbxepbmwgs\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'cuguccgcugcugucgggggcgcgucgucugcuuuccccuugccg\\r\\n4\\r\\n', 'output': ['1\\r\\n']}, {'input': 'fcfccfcfccfcfcffcffffffcfccfccfcffccccfcffffccfccfcffcfcccccffcfffcccffcfccfffffcccfccffffffccfccccf\\r\\n20\\r\\n', 'output': ['18\\r\\n']}, {'input': 'swmkwaruyv\\r\\n5\\r\\n', 'output': ['0\\r\\n']}, {'input': 'tnbqpsuhkczmejirvyfdolxwga\\r\\n22\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcde\\r\\n3\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abb\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'aaaa\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcde\\r\\n2\\r\\n', 'output': ['0\\r\\n']}, {'input': 'yandex\\r\\n4\\r\\n', 'output': ['0\\r\\n']}, {'input': 'aaabbbccc\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcd\\r\\n2\\r\\n', 'output': ['0\\r\\n']}, {'input': 'asdfgh\\r\\n2\\r\\n', 'output': ['0\\r\\n']}, {'input': 'aab\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'mynameissako\\r\\n5\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcde\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcd\\r\\n3\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcdef\\r\\n2\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcdefg\\r\\n4\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abc\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'asdafjsgljdllgjdgkl\\r\\n5\\r\\n', 'output': ['0\\r\\n']}, {'input': 'yaay\\r\\n3\\r\\n', 'output': ['1\\r\\n']}, {'input': 'yaay\\r\\n4\\r\\n', 'output': ['2\\r\\n']}, {'input': 'zzzzzz\\r\\n2\\r\\n', 'output': ['1\\r\\n']}]", "source_code": "import java.io.InputStreamReader;\nimport java.io.*;\nimport java.util.*;\n\npublic class Solution {\n\n    public static void main(String[] args) throws Exception {\n        InputStreamReader reader = new InputStreamReader(System.in);\n        BufferedReader buffer = new BufferedReader(reader);\n\n        StringBuffer sb = new StringBuffer();\n        char[] line = buffer.readLine().toCharArray();\n        int k = Integer.parseInt(buffer.readLine());\n        int[] count = new int[26];\n        for (char c : line)\n        {\n            count[c - 'a']++;\n        }\n\n        int min = Integer.MAX_VALUE;\n        for (int i = 0 ; i < 26 ; i++)\n        {\n            min = Math.min(count[i], min);\n        }\n\n        int ans = 0;\n        if (min < k)\n        {\n            System.out.println(\"impossible\");\n        }\n        else if (min == k)\n        {\n            System.out.println(0);\n        }\n        else\n        {\n            ans += min - k;\n            for (int i = 0 ; i < 26 ; i++)\n            {\n                if (count[i] > k)\n                {\n                    ans += count[i] - k;\n                }\n            }\n\n            System.out.println(ans);\n        }\n\n    }\n}\n"}
{"src_uid": "bd5912fe2c5c37658f28f6b159b39645", "id": 66, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1000, "testcases": "[{'input': 'yandex\\r\\n6\\r\\n', 'output': ['0\\r\\n']}, {'input': 'yahoo\\r\\n5\\r\\n', 'output': ['1\\r\\n']}, {'input': 'google\\r\\n7\\r\\n', 'output': ['impossible\\r\\n']}, {'input': 'a\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'z\\r\\n2\\r\\n', 'output': ['impossible\\r\\n']}, {'input': 'fwgfrwgkuwghfiruhewgirueguhergiqrbvgrgf\\r\\n26\\r\\n', 'output': ['14\\r\\n']}, {'input': 'nfevghreuoghrueighoqghbnebvnejbvnbgneluqe\\r\\n26\\r\\n', 'output': ['12\\r\\n']}, {'input': 'a\\r\\n3\\r\\n', 'output': ['impossible\\r\\n']}, {'input': 'smaxpqplaqqbxuqxalqmbmmgubbpspxhawbxsuqhhegpmmpebqmqpbbeplwaepxmsahuepuhuhwxeqmmlgqubuaxehwuwasgxpqmugbmuawuhwqlswllssueglbxepbmwgs\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'cuguccgcugcugucgggggcgcgucgucugcuuuccccuugccg\\r\\n4\\r\\n', 'output': ['1\\r\\n']}, {'input': 'fcfccfcfccfcfcffcffffffcfccfccfcffccccfcffffccfccfcffcfcccccffcfffcccffcfccfffffcccfccffffffccfccccf\\r\\n20\\r\\n', 'output': ['18\\r\\n']}, {'input': 'swmkwaruyv\\r\\n5\\r\\n', 'output': ['0\\r\\n']}, {'input': 'tnbqpsuhkczmejirvyfdolxwga\\r\\n22\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcde\\r\\n3\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abb\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'aaaa\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcde\\r\\n2\\r\\n', 'output': ['0\\r\\n']}, {'input': 'yandex\\r\\n4\\r\\n', 'output': ['0\\r\\n']}, {'input': 'aaabbbccc\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcd\\r\\n2\\r\\n', 'output': ['0\\r\\n']}, {'input': 'asdfgh\\r\\n2\\r\\n', 'output': ['0\\r\\n']}, {'input': 'aab\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'mynameissako\\r\\n5\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcde\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcd\\r\\n3\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcdef\\r\\n2\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abcdefg\\r\\n4\\r\\n', 'output': ['0\\r\\n']}, {'input': 'abc\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': 'asdafjsgljdllgjdgkl\\r\\n5\\r\\n', 'output': ['0\\r\\n']}, {'input': 'yaay\\r\\n3\\r\\n', 'output': ['1\\r\\n']}, {'input': 'yaay\\r\\n4\\r\\n', 'output': ['2\\r\\n']}, {'input': 'zzzzzz\\r\\n2\\r\\n', 'output': ['1\\r\\n']}]", "source_code": "import java.util.Scanner;\n\npublic class D322 {\n\n\tprivate static int[][] get_hist(String str) {\n\t\tint[][] hist = new int[26][2];\n\t\tfor ( int i = 0; i < 26; i++ ) {\n\t\t\thist[i] = new int[2];\n\t\t}\n\t\tfor ( int i = 0; i < str.length(); i++ ) {\n\t\t\thist[str.charAt(i) - 97][0]++;\n\t\t\thist[str.charAt(i) - 97][1] = i;\n\t\t}\n\t\treturn hist;\n\t}\n\n\tprivate static int get_min_cost(int[][] hist, int k) {\n\t\tint cost = 0;\n\t\twhile ( k > 0 ) {\n\t\t\tint min_idx = 0;\n\t\t\tint min_cost = 100000;\n\t\t\tfor ( int i = 0; i < 26; i++ ) {\n\t\t\t\tif ( hist[i][0] < min_cost ) {\n\t\t\t\t\tmin_cost = hist[i][0];\n\t\t\t\t\tmin_idx = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( hist[min_idx][1] > cost ) {\n\t\t\t\tcost = hist[min_idx][1];\n\t\t\t\thist[min_idx][0]--;\n\t\t\t} else {\n\t\t\t\tcost++;\n\t\t\t\thist[min_idx][0]--;\n\t\t\t\thist[min_idx][1]++;\n\t\t\t}\n\t\t\tk--;\n\t\t}\n\t\treturn cost;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tString str = in.next();\n\t\tint k = in.nextInt();\n\t\tint[][] hist = get_hist(str);\n\t\tint cost = 0;\n\t\tif ( hist[0][0] >= k ) {\n\t\t\tSystem.out.print(\"0\");\n\t\t\treturn;\n\t\t} else if ( hist[0][0] + 1 >= k ) {\n\t\t\tcost += k - hist[0][0];\n\t\t} else {\n\t\t\tcost = get_min_cost(hist, k);\n\t\t}\n\t\tSystem.out.print(cost);\n\t}\n}\n"}
{"src_uid": "757cd804aba01dc4bc108cb0722f68dc", "id": 67, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '1\\r\\n', 'output': ['1']}, {'input': '2\\r\\n', 'output': ['2']}, {'input': '3\\r\\n', 'output': ['2 1', '2  1']}, {'input': '8\\r\\n', 'output': ['4']}, {'input': '100000\\r\\n', 'output': ['17  16  11  10  8  6', '17 16 11 10 8 6']}, {'input': '12345\\r\\n', 'output': ['14  13  6  5  4  1', '14 13 6 5 4 1']}, {'input': '32\\r\\n', 'output': ['6']}, {'input': '70958\\r\\n', 'output': ['17  13  11  9  6  4  3  2', '17 13 11 9 6 4 3 2']}, {'input': '97593\\r\\n', 'output': ['17 15 14 13 12 11 9 6 5 4 1', '17  15  14  13  12  11  9  6  5  4  1']}, {'input': '91706\\r\\n', 'output': ['17  15  14  11  10  6  5  4  2', '17 15 14 11 10 6 5 4 2']}, {'input': '85371\\r\\n', 'output': ['17 15 12 11 9 7 6 5 4 2 1', '17  15  12  11  9  7  6  5  4  2  1']}, {'input': '97205\\r\\n', 'output': ['17  15  14  13  12  10  9  8  6  5  3  1', '17 15 14 13 12 10 9 8 6 5 3 1']}, {'input': '34768\\r\\n', 'output': ['16  11  10  9  8  7  5', '16 11 10 9 8 7 5']}, {'input': '12705\\r\\n', 'output': ['14 13 9 8 6 1', '14  13  9  8  6  1']}, {'input': '30151\\r\\n', 'output': ['15 14 13 11 9 8 7 3 2 1', '15  14  13  11  9  8  7  3  2  1']}, {'input': '4974\\r\\n', 'output': ['13  10  9  7  6  4  3  2', '13 10 9 7 6 4 3 2']}, {'input': '32728\\r\\n', 'output': ['15  14  13  12  11  10  9  8  7  5  4', '15 14 13 12 11 10 9 8 7 5 4']}, {'input': '8192\\r\\n', 'output': ['14']}, {'input': '65536\\r\\n', 'output': ['17']}, {'input': '32\\r\\n', 'output': ['6']}, {'input': '256\\r\\n', 'output': ['9']}, {'input': '4096\\r\\n', 'output': ['13']}, {'input': '33301\\r\\n', 'output': ['16  10  5  3  1', '16 10 5 3 1']}, {'input': '16725\\r\\n', 'output': ['15 9 7 5 3 1', '15  9  7  5  3  1']}, {'input': '149\\r\\n', 'output': ['8 5 3 1', '8  5  3  1']}, {'input': '16277\\r\\n', 'output': ['14 13 12 11 10 9 8 5 3 1', '14  13  12  11  10  9  8  5  3  1']}, {'input': '99701\\r\\n', 'output': ['17 16 11 9 7 6 5 3 1', '17  16  11  9  7  6  5  3  1']}]", "source_code": "import java.util.*;\npublic class Main {\n    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int arr[] = new int[n];\n        int count = 1;\n        int index = 0;\n        while(n>0) {\n        \tif(count == 1) {\n        \t\tarr[index] = 1;\n        \t}\n        \telse {\n        \t\tif(arr[index-1] == arr[index]) {\n        \t\t\tarr[index] = arr[index]+1;\n        \t\t}\n        \t}\n        \tif(arr[index] == 2) {\n        \t\tcount = 2;\n        \t}\n        \tindex++;\n        \tn--;\n        }\n        \n        for(int i = 0 ; i < arr.length ; i++) {\n        \tif(i == 0) {\n        \t\tSystem.out.print(arr[i]);\n        \t}\n        \telse {\n        \t\tSystem.out.print(\" \"+ arr[i]);\n        \t}\n        }\n        \n        \n    }\n}\n"}
{"src_uid": "757cd804aba01dc4bc108cb0722f68dc", "id": 67, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '1\\r\\n', 'output': ['1']}, {'input': '2\\r\\n', 'output': ['2']}, {'input': '3\\r\\n', 'output': ['2 1', '2  1']}, {'input': '8\\r\\n', 'output': ['4']}, {'input': '100000\\r\\n', 'output': ['17  16  11  10  8  6', '17 16 11 10 8 6']}, {'input': '12345\\r\\n', 'output': ['14  13  6  5  4  1', '14 13 6 5 4 1']}, {'input': '32\\r\\n', 'output': ['6']}, {'input': '70958\\r\\n', 'output': ['17  13  11  9  6  4  3  2', '17 13 11 9 6 4 3 2']}, {'input': '97593\\r\\n', 'output': ['17 15 14 13 12 11 9 6 5 4 1', '17  15  14  13  12  11  9  6  5  4  1']}, {'input': '91706\\r\\n', 'output': ['17  15  14  11  10  6  5  4  2', '17 15 14 11 10 6 5 4 2']}, {'input': '85371\\r\\n', 'output': ['17 15 12 11 9 7 6 5 4 2 1', '17  15  12  11  9  7  6  5  4  2  1']}, {'input': '97205\\r\\n', 'output': ['17  15  14  13  12  10  9  8  6  5  3  1', '17 15 14 13 12 10 9 8 6 5 3 1']}, {'input': '34768\\r\\n', 'output': ['16  11  10  9  8  7  5', '16 11 10 9 8 7 5']}, {'input': '12705\\r\\n', 'output': ['14 13 9 8 6 1', '14  13  9  8  6  1']}, {'input': '30151\\r\\n', 'output': ['15 14 13 11 9 8 7 3 2 1', '15  14  13  11  9  8  7  3  2  1']}, {'input': '4974\\r\\n', 'output': ['13  10  9  7  6  4  3  2', '13 10 9 7 6 4 3 2']}, {'input': '32728\\r\\n', 'output': ['15  14  13  12  11  10  9  8  7  5  4', '15 14 13 12 11 10 9 8 7 5 4']}, {'input': '8192\\r\\n', 'output': ['14']}, {'input': '65536\\r\\n', 'output': ['17']}, {'input': '32\\r\\n', 'output': ['6']}, {'input': '256\\r\\n', 'output': ['9']}, {'input': '4096\\r\\n', 'output': ['13']}, {'input': '33301\\r\\n', 'output': ['16  10  5  3  1', '16 10 5 3 1']}, {'input': '16725\\r\\n', 'output': ['15 9 7 5 3 1', '15  9  7  5  3  1']}, {'input': '149\\r\\n', 'output': ['8 5 3 1', '8  5  3  1']}, {'input': '16277\\r\\n', 'output': ['14 13 12 11 10 9 8 5 3 1', '14  13  12  11  10  9  8  5  3  1']}, {'input': '99701\\r\\n', 'output': ['17 16 11 9 7 6 5 3 1', '17  16  11  9  7  6  5  3  1']}]", "source_code": "import java.io.*;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint N = Integer.parseInt(br.readLine());\n\t\tint[] cnt = new int[60];\n\t\tint index = 0;\n\t\twhile (N > 0) {\n\t\t\tcnt[index] += N % 2;\n\t\t\tindex++;\n\t\t\tN /= 2;\n\t\t}\n\t\tindex--;\n\t\twhile (index >= 0) {\n\t\t\tif (cnt[index] == 1) {\n\t\t\t\tSystem.out.print(index + \" \");\n\t\t\t} else if (cnt[index] == 2) {\n\t\t\t\tSystem.out.print((index - 1) + \" \" + index + \" \");\n\t\t\t} else if (cnt[index] == 3) {\n\t\t\t\tSystem.out.print(index + \" \" + (index - 1) + \" \" + (index - 2)\n\t\t\t\t\t\t+ \" \");\n\t\t\t} else if (cnt[index] >= 4) {\n\t\t\t\tint tmp = cnt[index];\n\t\t\t\tint v = 0;\n\t\t\t\tfor (v = 2; (v * v <= tmp); v++) {\n\t\t\t\t\tif ((tmp % v) == 0) {\n\t\t\t\t\t\tSystem.out\n\t\t\t\t\t\t\t\t.print((index + v) + \" \" + (index + v - 1)\n\t\t\t\t\t\t\t\t\t\t+ \" \");\n\t\t\t\t\t\ttmp -= v;\n\t\t\t\t\t\tv--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (tmp > 4) {\n\t\t\t\t\tSystem.out.print(index + \" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tindex--;\n\t\t}\n\t}\n}\n"}
{"src_uid": "757cd804aba01dc4bc108cb0722f68dc", "id": 67, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '1\\r\\n', 'output': ['1']}, {'input': '2\\r\\n', 'output': ['2']}, {'input': '3\\r\\n', 'output': ['2 1', '2  1']}, {'input': '8\\r\\n', 'output': ['4']}, {'input': '100000\\r\\n', 'output': ['17  16  11  10  8  6', '17 16 11 10 8 6']}, {'input': '12345\\r\\n', 'output': ['14  13  6  5  4  1', '14 13 6 5 4 1']}, {'input': '32\\r\\n', 'output': ['6']}, {'input': '70958\\r\\n', 'output': ['17  13  11  9  6  4  3  2', '17 13 11 9 6 4 3 2']}, {'input': '97593\\r\\n', 'output': ['17 15 14 13 12 11 9 6 5 4 1', '17  15  14  13  12  11  9  6  5  4  1']}, {'input': '91706\\r\\n', 'output': ['17  15  14  11  10  6  5  4  2', '17 15 14 11 10 6 5 4 2']}, {'input': '85371\\r\\n', 'output': ['17 15 12 11 9 7 6 5 4 2 1', '17  15  12  11  9  7  6  5  4  2  1']}, {'input': '97205\\r\\n', 'output': ['17  15  14  13  12  10  9  8  6  5  3  1', '17 15 14 13 12 10 9 8 6 5 3 1']}, {'input': '34768\\r\\n', 'output': ['16  11  10  9  8  7  5', '16 11 10 9 8 7 5']}, {'input': '12705\\r\\n', 'output': ['14 13 9 8 6 1', '14  13  9  8  6  1']}, {'input': '30151\\r\\n', 'output': ['15 14 13 11 9 8 7 3 2 1', '15  14  13  11  9  8  7  3  2  1']}, {'input': '4974\\r\\n', 'output': ['13  10  9  7  6  4  3  2', '13 10 9 7 6 4 3 2']}, {'input': '32728\\r\\n', 'output': ['15  14  13  12  11  10  9  8  7  5  4', '15 14 13 12 11 10 9 8 7 5 4']}, {'input': '8192\\r\\n', 'output': ['14']}, {'input': '65536\\r\\n', 'output': ['17']}, {'input': '32\\r\\n', 'output': ['6']}, {'input': '256\\r\\n', 'output': ['9']}, {'input': '4096\\r\\n', 'output': ['13']}, {'input': '33301\\r\\n', 'output': ['16  10  5  3  1', '16 10 5 3 1']}, {'input': '16725\\r\\n', 'output': ['15 9 7 5 3 1', '15  9  7  5  3  1']}, {'input': '149\\r\\n', 'output': ['8 5 3 1', '8  5  3  1']}, {'input': '16277\\r\\n', 'output': ['14 13 12 11 10 9 8 5 3 1', '14  13  12  11  10  9  8  5  3  1']}, {'input': '99701\\r\\n', 'output': ['17 16 11 9 7 6 5 3 1', '17  16  11  9  7  6  5  3  1']}]", "source_code": "import java.util.*;\n\npublic class HelloWorld\n{\n    public static void main(String[] args){\n        Scanner sc=new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] a = new int[n+1];\n        int x = 1;\n        int j = 1;\n        while(n > 0){\n            for(int i = 0; i < 1; i++){\n                a[j] = x;\n                j++;\n            }\n            for(int k = 0; k < n-1; k++){\n                if(a[k] == a[k+1]){\n                    a[k+1] = a[k+1] + 1;\n                }\n            }\n            x++;\n            n = n - 1;\n        }\n        for(int m = 1; m < a.length; m++){\n            if(a[m]!= a[m-1]){\n                System.out.print(a[m-1] + \" \");\n            }\n        }\n        System.out.print(a[a.length-1]);\n    }\n}"}
{"src_uid": "757cd804aba01dc4bc108cb0722f68dc", "id": 67, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '1\\r\\n', 'output': ['1']}, {'input': '2\\r\\n', 'output': ['2']}, {'input': '3\\r\\n', 'output': ['2 1', '2  1']}, {'input': '8\\r\\n', 'output': ['4']}, {'input': '100000\\r\\n', 'output': ['17  16  11  10  8  6', '17 16 11 10 8 6']}, {'input': '12345\\r\\n', 'output': ['14  13  6  5  4  1', '14 13 6 5 4 1']}, {'input': '32\\r\\n', 'output': ['6']}, {'input': '70958\\r\\n', 'output': ['17  13  11  9  6  4  3  2', '17 13 11 9 6 4 3 2']}, {'input': '97593\\r\\n', 'output': ['17 15 14 13 12 11 9 6 5 4 1', '17  15  14  13  12  11  9  6  5  4  1']}, {'input': '91706\\r\\n', 'output': ['17  15  14  11  10  6  5  4  2', '17 15 14 11 10 6 5 4 2']}, {'input': '85371\\r\\n', 'output': ['17 15 12 11 9 7 6 5 4 2 1', '17  15  12  11  9  7  6  5  4  2  1']}, {'input': '97205\\r\\n', 'output': ['17  15  14  13  12  10  9  8  6  5  3  1', '17 15 14 13 12 10 9 8 6 5 3 1']}, {'input': '34768\\r\\n', 'output': ['16  11  10  9  8  7  5', '16 11 10 9 8 7 5']}, {'input': '12705\\r\\n', 'output': ['14 13 9 8 6 1', '14  13  9  8  6  1']}, {'input': '30151\\r\\n', 'output': ['15 14 13 11 9 8 7 3 2 1', '15  14  13  11  9  8  7  3  2  1']}, {'input': '4974\\r\\n', 'output': ['13  10  9  7  6  4  3  2', '13 10 9 7 6 4 3 2']}, {'input': '32728\\r\\n', 'output': ['15  14  13  12  11  10  9  8  7  5  4', '15 14 13 12 11 10 9 8 7 5 4']}, {'input': '8192\\r\\n', 'output': ['14']}, {'input': '65536\\r\\n', 'output': ['17']}, {'input': '32\\r\\n', 'output': ['6']}, {'input': '256\\r\\n', 'output': ['9']}, {'input': '4096\\r\\n', 'output': ['13']}, {'input': '33301\\r\\n', 'output': ['16  10  5  3  1', '16 10 5 3 1']}, {'input': '16725\\r\\n', 'output': ['15 9 7 5 3 1', '15  9  7  5  3  1']}, {'input': '149\\r\\n', 'output': ['8 5 3 1', '8  5  3  1']}, {'input': '16277\\r\\n', 'output': ['14 13 12 11 10 9 8 5 3 1', '14  13  12  11  10  9  8  5  3  1']}, {'input': '99701\\r\\n', 'output': ['17 16 11 9 7 6 5 3 1', '17  16  11  9  7  6  5  3  1']}]", "source_code": "import java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] array = new int[n];\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tarray[i-1] = i;\n\t\t}\n\t\tfor(int i = 1; i <= n-1; i++){\n\t\t\tif(array[i-1] == array[i]){\n\t\t\t\tarray[i] += 1;\n\t\t\t\tarray[i+1] = 0;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(array[i] > 0){\n\t\t\t\tSystem.out.print(array[i] + \" \");\n\t\t\t}\n\t\t}\n\t}\n}\n"}
{"src_uid": "757cd804aba01dc4bc108cb0722f68dc", "id": 67, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '1\\r\\n', 'output': ['1']}, {'input': '2\\r\\n', 'output': ['2']}, {'input': '3\\r\\n', 'output': ['2 1', '2  1']}, {'input': '8\\r\\n', 'output': ['4']}, {'input': '100000\\r\\n', 'output': ['17  16  11  10  8  6', '17 16 11 10 8 6']}, {'input': '12345\\r\\n', 'output': ['14  13  6  5  4  1', '14 13 6 5 4 1']}, {'input': '32\\r\\n', 'output': ['6']}, {'input': '70958\\r\\n', 'output': ['17  13  11  9  6  4  3  2', '17 13 11 9 6 4 3 2']}, {'input': '97593\\r\\n', 'output': ['17 15 14 13 12 11 9 6 5 4 1', '17  15  14  13  12  11  9  6  5  4  1']}, {'input': '91706\\r\\n', 'output': ['17  15  14  11  10  6  5  4  2', '17 15 14 11 10 6 5 4 2']}, {'input': '85371\\r\\n', 'output': ['17 15 12 11 9 7 6 5 4 2 1', '17  15  12  11  9  7  6  5  4  2  1']}, {'input': '97205\\r\\n', 'output': ['17  15  14  13  12  10  9  8  6  5  3  1', '17 15 14 13 12 10 9 8 6 5 3 1']}, {'input': '34768\\r\\n', 'output': ['16  11  10  9  8  7  5', '16 11 10 9 8 7 5']}, {'input': '12705\\r\\n', 'output': ['14 13 9 8 6 1', '14  13  9  8  6  1']}, {'input': '30151\\r\\n', 'output': ['15 14 13 11 9 8 7 3 2 1', '15  14  13  11  9  8  7  3  2  1']}, {'input': '4974\\r\\n', 'output': ['13  10  9  7  6  4  3  2', '13 10 9 7 6 4 3 2']}, {'input': '32728\\r\\n', 'output': ['15  14  13  12  11  10  9  8  7  5  4', '15 14 13 12 11 10 9 8 7 5 4']}, {'input': '8192\\r\\n', 'output': ['14']}, {'input': '65536\\r\\n', 'output': ['17']}, {'input': '32\\r\\n', 'output': ['6']}, {'input': '256\\r\\n', 'output': ['9']}, {'input': '4096\\r\\n', 'output': ['13']}, {'input': '33301\\r\\n', 'output': ['16  10  5  3  1', '16 10 5 3 1']}, {'input': '16725\\r\\n', 'output': ['15 9 7 5 3 1', '15  9  7  5  3  1']}, {'input': '149\\r\\n', 'output': ['8 5 3 1', '8  5  3  1']}, {'input': '16277\\r\\n', 'output': ['14 13 12 11 10 9 8 5 3 1', '14  13  12  11  10  9  8  5  3  1']}, {'input': '99701\\r\\n', 'output': ['17 16 11 9 7 6 5 3 1', '17  16  11  9  7  6  5  3  1']}]", "source_code": "import java.util.*;\n\npublic class Codeforces {\n\n    public static void main (String[] args) {\n        int n = input.nextInt();\n        int[] x = new int[n];\n        x[0] = 1;\n        int count = 1;\n        int temp = 0;\n        while(count < n){\n            x[count] = x[count - 1];\n            if(x[count] == x[count - 2])\n                x[count - 2]++;\n            count++;\n        }\n        for(int i = 0; i < n ;i++){\n            if(i == 0){\n                temp = x[i];\n                System.out.print(x[i]);\n            }else if(x[i] == temp){\n                temp++;\n                System.out.print(\" \" + temp);\n            }else{\n                temp = x[i];\n                System.out.print(\" \" + x[i]);\n            }\n        }\n        input.close();\n    }\n    \n    static Scanner input = new Scanner(System.in);\n\n}"}
{"src_uid": "54c748dd983b6a0ea1af1153d08f1c01", "id": 68, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1100, "testcases": "[{'input': '1\\r\\n.\\r\\n', 'output': ['1\\r\\n']}, {'input': '1\\r\\nL\\r\\n', 'output': ['0\\r\\n']}, {'input': '1\\r\\nR\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\nL.\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\nRL\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n..\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n..L.RL\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\nLR\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n.R\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\nR.\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n.L\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\nRLR\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\nLRL\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n.L.R.\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n.R.L.\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\nRL.RL\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\nL.R\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\nR..\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n..RL.\\r\\n', 'output': ['3\\r\\n']}, {'input': '4\\r\\n.LR.\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\nL..\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.io.*;\n\npublic class Main {\n\n\tstatic boolean check(String s, int n) {\n\t\tfor (int i = 0; i < n-1; i++) {\n\t\t\tif (s.charAt(i) == 'R' && s.charAt(i+1) == 'L')\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic static void main(String[] args) throws IOException {\n\t\t// TODO Auto-generated method stub\n\t\tBufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));\n\t\t\n\t\tString nStr = stdin.readLine();\n\t\tint n = Integer.parseInt(nStr);\n\t\t\n\t\tString str = stdin.readLine();\n\t\t\n\t\tint l = 0;\n\t\tint r = n-1;\n\t\t\n\t\tint cnt = 0;\n\t\t\n\t\twhile (l <= r) {\n\t\t\tif (check(str, n)) {\n\t\t\t\tif (str.charAt(l) == '.')\n\t\t\t\t\tstr = str.replace(l, l+1, \"L\");\n\t\t\t\tif (str.charAt(r) == '.')\n\t\t\t\t\tstr = str.replace(r, r, \"R\");\n\t\t\t\t\n\t\t\t\tl++;\n\t\t\t\tr--;\n\t\t\t} else {\n\t\t\t\tcnt++;\n\t\t\t\tstr = str.replace(l, l+1, \"L\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tint res = nStr.length() - cnt;\n\t\t\n\t\tSystem.out.println(res);\n\t\t\t\n\t}\n\n}\n"}
{"src_uid": "54c748dd983b6a0ea1af1153d08f1c01", "id": 68, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1100, "testcases": "[{'input': '1\\r\\n.\\r\\n', 'output': ['1\\r\\n']}, {'input': '1\\r\\nL\\r\\n', 'output': ['0\\r\\n']}, {'input': '1\\r\\nR\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\nL.\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\nRL\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n..\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n..L.RL\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\nLR\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n.R\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\nR.\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n.L\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\nRLR\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\nLRL\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n.L.R.\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n.R.L.\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\nRL.RL\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\nL.R\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\nR..\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n..RL.\\r\\n', 'output': ['3\\r\\n']}, {'input': '4\\r\\n.LR.\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\nL..\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport static java.util.Arrays.*;\nimport static java.util.Collections.*;\nimport static java.util.Comparator.*;\nimport static java.util.stream.Collectors.*;\n\nimport java.util.ArrayList;\nimport static java.util.Arrays.*;\nimport java.util.HashMap;\nimport static java.util.Map.Entry.*;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport static java.util.Map.*;\nimport java.util.Map;\nimport java.util.TreeMap;\n\n\nimport java.util.Scanner;\nimport java.util.Set;\n\n\npublic class Dominoes {\n\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tString s = sc.next();\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tif(i < n - 1) {\n\t\t\t\tif((s.charAt(i) == 'R' && s.charAt(i + 1) == 'L') ||\n\t\t\t\t   (s.charAt(i) == 'L' && s.charAt(i + 1) == 'R')) {\n\t\t\t\t\t\t   ans++;\n\t\t\t\t\t\t   i++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(s.charAt(i)!= '.') {\n\t\t\t\t\tans++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n\n\t\n}\n"}
{"src_uid": "54c748dd983b6a0ea1af1153d08f1c01", "id": 68, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1100, "testcases": "[{'input': '1\\r\\n.\\r\\n', 'output': ['1\\r\\n']}, {'input': '1\\r\\nL\\r\\n', 'output': ['0\\r\\n']}, {'input': '1\\r\\nR\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\nL.\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\nRL\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n..\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n..L.RL\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\nLR\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n.R\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\nR.\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n.L\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\nRLR\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\nLRL\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n.L.R.\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n.R.L.\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\nRL.RL\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\nL.R\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\nR..\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n..RL.\\r\\n', 'output': ['3\\r\\n']}, {'input': '4\\r\\n.LR.\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\nL..\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class JavaApplication7 {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt(), l = 0, r = n - 1;\n        while (l <= r) {\n            if (in.next().charAt(0) == 'R') l++;\n            else if (in.next().charAt(0) == 'L') r--;\n        }\n        System.out.println(((l + r + 1) / 2));\n    }\n}"}
{"src_uid": "54c748dd983b6a0ea1af1153d08f1c01", "id": 68, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1100, "testcases": "[{'input': '1\\r\\n.\\r\\n', 'output': ['1\\r\\n']}, {'input': '1\\r\\nL\\r\\n', 'output': ['0\\r\\n']}, {'input': '1\\r\\nR\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\nL.\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\nRL\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n..\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n..L.RL\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\nLR\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n.R\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\nR.\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n.L\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\nRLR\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\nLRL\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n.L.R.\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n.R.L.\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\nRL.RL\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\nL.R\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\nR..\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n..RL.\\r\\n', 'output': ['3\\r\\n']}, {'input': '4\\r\\n.LR.\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\nL..\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.util.Scanner;\n\npublic class Solution {\n  public static void main(String[] args){\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt(), r=0, l=0, count = 0, sum = 0;\n    String s = sc.next();\n    char[] c = s.toCharArray();\n    for (int i = 1; i < n-1; i++) {\n      if (c[i] == '.') {\n        if (c[i-1] == 'L' && c[i+1] == 'L' || c[i-1] == 'R' && c[i+1] == 'R') {\n          sum = 0;\n        }\n        else if (c[i-1] == 'L' && c[i+1] == 'R' || c[i-1] == 'R' && c[i+1] == 'L') {\n          l = 0;\n          r = 0;\n          count++;\n          while (sum!= 2) {\n            if (count == 1) {\n              r++;\n            }\n            else {\n              l++;\n            }\n            count++;\n            if (count == 2*n)\n              count = 0;\n            if (c[count] == 'L') {\n              l++;\n            }\n            else if (c[count] == 'R') {\n              r++;\n            }\n            if (l == r) {\n              sum = 2;\n            }\n          }\n        }\n        else if (c[i-1] == 'L' || c[i+1] == 'L')\n          l++;\n        else if (c[i-1] == 'R' || c[i+1] == 'R')\n          r++;\n      }\n    }\n    System.out.println(l);\n  }\n}"}
{"src_uid": "54c748dd983b6a0ea1af1153d08f1c01", "id": 68, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1100, "testcases": "[{'input': '1\\r\\n.\\r\\n', 'output': ['1\\r\\n']}, {'input': '1\\r\\nL\\r\\n', 'output': ['0\\r\\n']}, {'input': '1\\r\\nR\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\nL.\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\nRL\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n..\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n..L.RL\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\nLR\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n.R\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\nR.\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n.L\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\nRLR\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\nLRL\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n.L.R.\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n.R.L.\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\nRL.RL\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\nL.R\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\nR..\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n..RL.\\r\\n', 'output': ['3\\r\\n']}, {'input': '4\\r\\n.LR.\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\nL..\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.util.Scanner;\n\n/**\n *\n * @author Fatih\n */\npublic class Main {\n    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        char a[] = in.next().toCharArray();\n        int count = 0;\n        for(int i = 0 ; i< n ; i++){\n            if(i!= 0 && a[i]!= a[i-1]){\n                if(a[i-1] == '.')\n                    count++;\n                else\n                    count = count + 2;\n            }\n            if(i == n-1){\n                if(a[n-1] == '.')\n                    count++;\n            }\n        }\n        System.out.println(count);\n    }\n}\n"}
{"src_uid": "bdd86c8bc54bbac6e2bb5a9d68b6eb1c", "id": 69, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1000, "testcases": "[{'input': '3\\r\\n3 1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n2 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n5 3 3 3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '5\\r\\n6 6 6 6 6\\r\\n', 'output': ['5\\r\\n']}, {'input': '10\\r\\n1 1 2 2 8 8 7 7 9 9\\r\\n', 'output': ['5\\r\\n']}, {'input': '8\\r\\n9 8 7 6 5 4 3 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '15\\r\\n1 2 3 4 5 5 4 3 2 1 1 2 3 4 5\\r\\n', 'output': ['10\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '1\\r\\n5000\\r\\n', 'output': ['1\\r\\n']}, {'input': '4\\r\\n5000 5000 5000 5000\\r\\n', 'output': ['4\\r\\n']}, {'input': '5\\r\\n3366 3461 4 5 4370\\r\\n', 'output': ['3\\r\\n']}, {'input': '10\\r\\n8 2 10 3 4 6 1 7 9 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '10\\r\\n551 3192 3213 2846 3068 1224 3447 1 10 9\\r\\n', 'output': ['7\\r\\n']}, {'input': '15\\r\\n4 1459 12 4281 3241 2748 10 3590 14 845 3518 1721 2 2880 1974\\r\\n', 'output': ['10\\r\\n']}, {'input': '15\\r\\n15 1 8 2 13 11 12 7 3 14 6 10 9 4 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '15\\r\\n2436 2354 4259 1210 2037 2665 700 3578 2880 973 1317 1024 24 3621 4142\\r\\n', 'output': ['15\\r\\n']}, {'input': '30\\r\\n28 1 3449 9 3242 4735 26 3472 15 21 2698 7 4073 3190 10 3 29 1301 4526 22 345 3876 19 12 4562 2535 2 630 18 27\\r\\n', 'output': ['14\\r\\n']}, {'input': '100\\r\\n50 39 95 30 66 78 2169 4326 81 31 74 34 80 40 19 48 97 63 82 6 88 16 21 57 92 77 10 1213 17 93 32 91 38 4375 29 75 44 22 4 45 14 2395 3254 59 3379 2 85 96 8 83 27 94 1512 2960 100 9 73 79 7 25 55 69 90 99 51 87 98 62 18 35 43 4376 4668 28 72 56 4070 61 65 36 54 4106 11 24 15 86 70 71 4087 23 13 76 20 4694 26 4962 4726 37 14 64\\r\\n', 'output': ['18\\r\\n']}, {'input': '100\\r\\n340 14 3275 2283 2673 1107 817 2243 1226 32 2382 3638 4652 418 68 4962 387 764 4647 159 1846 225 2760 4904 3150 403 3 2439 91 4428 92 4705 75 348 1566 1465 69 6 49 4 62 4643 564 1090 3447 1871 2255 139 24 99 2669 969 86 61 4550 158 4537 3993 1589 872 2907 1888 401 80 1825 1483 63 1 2264 4068 4113 2548 41 885 4806 36 67 167 4447 34 1248 2593 82 202 81 1783 1284 4973 16 43 95 7 865 2091 3008 1793 20 947 4912 3604\\r\\n', 'output': ['70\\r\\n']}, {'input': '1\\r\\n2\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n5000 5000\\r\\n', 'output': ['2\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n1 1\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n2 3\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n3 4\\r\\n', 'output': ['2\\r\\n']}, {'input': '10\\r\\n1 2 3 4 5 6 7 1000 10 10\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader inputReader = new InputReader(inputStream, outputStream);\n        PrintWriter printWriter = new PrintWriter(outputStream);\n        int n = inputReader.nextInt();\n        int[] in = new int[n];\n        int[] counter = new int[n+1];\n        int m = 0;\n        int c = 0;\n        for (int i = 0 ; i < n ; i++) {\n            in[i] = inputReader.nextInt();\n            counter[in[i]]++;\n        }\n        for (int i = 0 ; i <= n ; i++){\n            if(counter[i] == 0){\n                m++;\n            }\n        }\n        for (int i = 0 ; i < n ; i++){\n            if(in[i]!= i+1)\n                c++;\n        }\n        printWriter.print(c);\n        printWriter.close();\n    }\n\n    private static class InputReader {\n        private final int BUFFER_SIZE = 1 << 16;\n        private final InputStream inStream;\n        private final OutputStream outStream;\n        private final byte[] buffer;\n        private final int bufferPointer;\n        private int bytesRead;\n        private int bufferLimit;\n        private boolean isClosed;\n\n        private InputReader(InputStream inStream, OutputStream outStream) {\n            this.inStream = inStream;\n            this.outStream = outStream;\n            buffer = new byte[BUFFER_SIZE];\n            bufferPointer = bytesRead = 0;\n            bufferLimit = BUFFER_SIZE;\n            isClosed = false;\n        }\n\n        @Override\n        public void close() throws IOException {\n            if (!isClosed) {\n                isClosed = true;\n                outStream.close();\n            }\n        }\n\n        public long nextLong() throws IOException {\n            long next = 0;\n            int bit = 0;\n            int nextByte;\n            while ((nextByte = read())!= -1) {\n                next |= (nextByte & 0x7F) << bit;\n                bit += 7;\n                if ((nextByte & 0x80) == 0) {\n                    return next;\n                }\n            }\n            throw new IOException();\n        }\n\n        public int read() throws IOException {\n            if (bufferPointer == bufferLimit) {\n                bufferPointer = 0;\n                bufferLimit = inStream.read(buffer);\n                if (bufferLimit <= 0) {\n                    return -1;\n                }\n            }\n            return buffer[bufferPointer++];\n        }\n\n        public String readLine() throws IOException {\n            StringBuilder sb = new StringBuilder();\n            int ch = 0;\n            while ((ch = read()) >= 0) {\n                if (ch == '\\n') {\n                    break;\n                } else if (ch == '\\r') {\n                    int next = read();\n                    if (next!= '\\n') {\n                        sb.append((char) ch);\n                    }\n                    break;\n                } else {\n                    sb.append((char) ch);\n                }\n            }\n            return sb.toString();\n        }\n\n        public String next() throws IOException {\n            String result = \"\";\n            while ((Character.isWhitespace(read()))) {\n            }\n            while (true) {\n                if ((Character.isWhitespace(peek()))) {\n                    return result;\n                } else {\n                    result += (char) peek();\n                    read();\n                }\n            }\n        }\n\n        private int peek() throws IOException {\n            if (bufferPointer == bufferLimit) {\n                bufferPointer = 0;\n                bufferLimit = inStream.read(buffer);\n                if (bufferLimit <= 0) {\n                    return -1;\n                }\n            }\n            return buffer[bufferPointer];\n        }\n\n        private int nextInt() throws IOException {\n            int result = 0;\n            boolean minus = false;\n            int ch = 0;\n            if ((ch = read()) < 0) {\n               "}
{"src_uid": "bdd86c8bc54bbac6e2bb5a9d68b6eb1c", "id": 69, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1000, "testcases": "[{'input': '3\\r\\n3 1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n2 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n5 3 3 3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '5\\r\\n6 6 6 6 6\\r\\n', 'output': ['5\\r\\n']}, {'input': '10\\r\\n1 1 2 2 8 8 7 7 9 9\\r\\n', 'output': ['5\\r\\n']}, {'input': '8\\r\\n9 8 7 6 5 4 3 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '15\\r\\n1 2 3 4 5 5 4 3 2 1 1 2 3 4 5\\r\\n', 'output': ['10\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '1\\r\\n5000\\r\\n', 'output': ['1\\r\\n']}, {'input': '4\\r\\n5000 5000 5000 5000\\r\\n', 'output': ['4\\r\\n']}, {'input': '5\\r\\n3366 3461 4 5 4370\\r\\n', 'output': ['3\\r\\n']}, {'input': '10\\r\\n8 2 10 3 4 6 1 7 9 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '10\\r\\n551 3192 3213 2846 3068 1224 3447 1 10 9\\r\\n', 'output': ['7\\r\\n']}, {'input': '15\\r\\n4 1459 12 4281 3241 2748 10 3590 14 845 3518 1721 2 2880 1974\\r\\n', 'output': ['10\\r\\n']}, {'input': '15\\r\\n15 1 8 2 13 11 12 7 3 14 6 10 9 4 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '15\\r\\n2436 2354 4259 1210 2037 2665 700 3578 2880 973 1317 1024 24 3621 4142\\r\\n', 'output': ['15\\r\\n']}, {'input': '30\\r\\n28 1 3449 9 3242 4735 26 3472 15 21 2698 7 4073 3190 10 3 29 1301 4526 22 345 3876 19 12 4562 2535 2 630 18 27\\r\\n', 'output': ['14\\r\\n']}, {'input': '100\\r\\n50 39 95 30 66 78 2169 4326 81 31 74 34 80 40 19 48 97 63 82 6 88 16 21 57 92 77 10 1213 17 93 32 91 38 4375 29 75 44 22 4 45 14 2395 3254 59 3379 2 85 96 8 83 27 94 1512 2960 100 9 73 79 7 25 55 69 90 99 51 87 98 62 18 35 43 4376 4668 28 72 56 4070 61 65 36 54 4106 11 24 15 86 70 71 4087 23 13 76 20 4694 26 4962 4726 37 14 64\\r\\n', 'output': ['18\\r\\n']}, {'input': '100\\r\\n340 14 3275 2283 2673 1107 817 2243 1226 32 2382 3638 4652 418 68 4962 387 764 4647 159 1846 225 2760 4904 3150 403 3 2439 91 4428 92 4705 75 348 1566 1465 69 6 49 4 62 4643 564 1090 3447 1871 2255 139 24 99 2669 969 86 61 4550 158 4537 3993 1589 872 2907 1888 401 80 1825 1483 63 1 2264 4068 4113 2548 41 885 4806 36 67 167 4447 34 1248 2593 82 202 81 1783 1284 4973 16 43 95 7 865 2091 3008 1793 20 947 4912 3604\\r\\n', 'output': ['70\\r\\n']}, {'input': '1\\r\\n2\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n5000 5000\\r\\n', 'output': ['2\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n1 1\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n2 3\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n3 4\\r\\n', 'output': ['2\\r\\n']}, {'input': '10\\r\\n1 2 3 4 5 6 7 1000 10 10\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\nimport static java.util.stream.Collectors.toList;\n\n/**\n *\n * @author shalin\n */\npublic class HelloWorld {\n   \n  public static void main(String[] args) \n    {\n      Scanner in = new Scanner(System.in);\n      int n = in.nextInt();\n      int a[][] = new int [n][2];\n      int count = 0;\n      for(int i=0; i<n; i++) {\n          a[i][0] = i+1;\n          a[i][1] = in.nextInt();\n      }\n      int temp1, temp2, temp3;\n      int flag[] = new int [n];\n      for(int i=0; i<n; i++) {\n          flag[i] = 0;\n      }\n      \n      while(count!= n-1) {\n          int minPos = 0;\n          int minVal = 10000;\n          for(int i=0; i<n; i++) {\n              if(flag[i] == 0) {\n                  temp1 = a[i][0];\n                  temp2 = a[i][1];\n                  temp3 = a[minPos][1];\n                  if(temp2 > temp3) {\n                      minPos = i;\n                  }\n              }\n          }\n          if(temp1 > temp3) {\n              a[minPos][0] = temp3;\n              a[minPos][1] = temp1;\n              a[temp3-1][0] = temp2;\n              a[temp3-1][1] = temp1;\n              flag[minPos] = 1;\n              flag[temp3-1] = 1;\n              count++;\n          }\n      }\n      \n      count = 0;\n      int ans[] = new int [n];\n      for(int i=0; i<n; i++) {\n          if(a[i][0]!= a[i][1]) {\n              count++;\n          }\n      }\n      \n      System.out.println(count);\n    }\n}\n"}
{"src_uid": "bdd86c8bc54bbac6e2bb5a9d68b6eb1c", "id": 69, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1000, "testcases": "[{'input': '3\\r\\n3 1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n2 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n5 3 3 3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '5\\r\\n6 6 6 6 6\\r\\n', 'output': ['5\\r\\n']}, {'input': '10\\r\\n1 1 2 2 8 8 7 7 9 9\\r\\n', 'output': ['5\\r\\n']}, {'input': '8\\r\\n9 8 7 6 5 4 3 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '15\\r\\n1 2 3 4 5 5 4 3 2 1 1 2 3 4 5\\r\\n', 'output': ['10\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '1\\r\\n5000\\r\\n', 'output': ['1\\r\\n']}, {'input': '4\\r\\n5000 5000 5000 5000\\r\\n', 'output': ['4\\r\\n']}, {'input': '5\\r\\n3366 3461 4 5 4370\\r\\n', 'output': ['3\\r\\n']}, {'input': '10\\r\\n8 2 10 3 4 6 1 7 9 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '10\\r\\n551 3192 3213 2846 3068 1224 3447 1 10 9\\r\\n', 'output': ['7\\r\\n']}, {'input': '15\\r\\n4 1459 12 4281 3241 2748 10 3590 14 845 3518 1721 2 2880 1974\\r\\n', 'output': ['10\\r\\n']}, {'input': '15\\r\\n15 1 8 2 13 11 12 7 3 14 6 10 9 4 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '15\\r\\n2436 2354 4259 1210 2037 2665 700 3578 2880 973 1317 1024 24 3621 4142\\r\\n', 'output': ['15\\r\\n']}, {'input': '30\\r\\n28 1 3449 9 3242 4735 26 3472 15 21 2698 7 4073 3190 10 3 29 1301 4526 22 345 3876 19 12 4562 2535 2 630 18 27\\r\\n', 'output': ['14\\r\\n']}, {'input': '100\\r\\n50 39 95 30 66 78 2169 4326 81 31 74 34 80 40 19 48 97 63 82 6 88 16 21 57 92 77 10 1213 17 93 32 91 38 4375 29 75 44 22 4 45 14 2395 3254 59 3379 2 85 96 8 83 27 94 1512 2960 100 9 73 79 7 25 55 69 90 99 51 87 98 62 18 35 43 4376 4668 28 72 56 4070 61 65 36 54 4106 11 24 15 86 70 71 4087 23 13 76 20 4694 26 4962 4726 37 14 64\\r\\n', 'output': ['18\\r\\n']}, {'input': '100\\r\\n340 14 3275 2283 2673 1107 817 2243 1226 32 2382 3638 4652 418 68 4962 387 764 4647 159 1846 225 2760 4904 3150 403 3 2439 91 4428 92 4705 75 348 1566 1465 69 6 49 4 62 4643 564 1090 3447 1871 2255 139 24 99 2669 969 86 61 4550 158 4537 3993 1589 872 2907 1888 401 80 1825 1483 63 1 2264 4068 4113 2548 41 885 4806 36 67 167 4447 34 1248 2593 82 202 81 1783 1284 4973 16 43 95 7 865 2091 3008 1793 20 947 4912 3604\\r\\n', 'output': ['70\\r\\n']}, {'input': '1\\r\\n2\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n5000 5000\\r\\n', 'output': ['2\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n1 1\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n2 3\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n3 4\\r\\n', 'output': ['2\\r\\n']}, {'input': '10\\r\\n1 2 3 4 5 6 7 1000 10 10\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt(), min = 1, count = 0, x, sum = 0;\n\t\tint a[][] = new int[n][2], b[] = new int[n];\n\t\tfor(int j = 0; j < n; j++){\n\t\t\ta[j][0] = scan.nextInt();\n\t\t\ta[j][1] = a[j][0];\n\t\t}\n\t\tfor(int j = 0; j < n; j++){\n\t\t\tsum = 0;\n\t\t\tfor(int k = 1; k < n; k++){\n\t\t\t\tif(a[j][1] < a[k][1])\n\t\t\t\t\tsum++;\n\t\t\t}\n\t\t\ta[j][1] = sum;\n\t\t}\n\t\tfor(int j = 0; j < n-1; j++){\n\t\t\tmin = n;\n\t\t\tfor(int k = j; k < n; k++){\n\t\t\t\tif(a[k][1] < a[min][1])\n\t\t\t\t\tmin = k;\n\t\t\t}\n\t\t\tx = a[min][0];\n\t\t\ta[min][0] = a[j][0];\n\t\t\ta[j][0] = x;\n\t\t\tx = a[min][1];\n\t\t\ta[min][1] = a[j][1];\n\t\t\ta[j][1] = x;\n\t\t}\n\t\tfor(int j = 0; j < n; j++){\n\t\t\tif(a[j][0]!= a[j][1])\n\t\t\t\tcount++;\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}"}
{"src_uid": "bdd86c8bc54bbac6e2bb5a9d68b6eb1c", "id": 69, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1000, "testcases": "[{'input': '3\\r\\n3 1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n2 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n5 3 3 3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '5\\r\\n6 6 6 6 6\\r\\n', 'output': ['5\\r\\n']}, {'input': '10\\r\\n1 1 2 2 8 8 7 7 9 9\\r\\n', 'output': ['5\\r\\n']}, {'input': '8\\r\\n9 8 7 6 5 4 3 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '15\\r\\n1 2 3 4 5 5 4 3 2 1 1 2 3 4 5\\r\\n', 'output': ['10\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '1\\r\\n5000\\r\\n', 'output': ['1\\r\\n']}, {'input': '4\\r\\n5000 5000 5000 5000\\r\\n', 'output': ['4\\r\\n']}, {'input': '5\\r\\n3366 3461 4 5 4370\\r\\n', 'output': ['3\\r\\n']}, {'input': '10\\r\\n8 2 10 3 4 6 1 7 9 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '10\\r\\n551 3192 3213 2846 3068 1224 3447 1 10 9\\r\\n', 'output': ['7\\r\\n']}, {'input': '15\\r\\n4 1459 12 4281 3241 2748 10 3590 14 845 3518 1721 2 2880 1974\\r\\n', 'output': ['10\\r\\n']}, {'input': '15\\r\\n15 1 8 2 13 11 12 7 3 14 6 10 9 4 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '15\\r\\n2436 2354 4259 1210 2037 2665 700 3578 2880 973 1317 1024 24 3621 4142\\r\\n', 'output': ['15\\r\\n']}, {'input': '30\\r\\n28 1 3449 9 3242 4735 26 3472 15 21 2698 7 4073 3190 10 3 29 1301 4526 22 345 3876 19 12 4562 2535 2 630 18 27\\r\\n', 'output': ['14\\r\\n']}, {'input': '100\\r\\n50 39 95 30 66 78 2169 4326 81 31 74 34 80 40 19 48 97 63 82 6 88 16 21 57 92 77 10 1213 17 93 32 91 38 4375 29 75 44 22 4 45 14 2395 3254 59 3379 2 85 96 8 83 27 94 1512 2960 100 9 73 79 7 25 55 69 90 99 51 87 98 62 18 35 43 4376 4668 28 72 56 4070 61 65 36 54 4106 11 24 15 86 70 71 4087 23 13 76 20 4694 26 4962 4726 37 14 64\\r\\n', 'output': ['18\\r\\n']}, {'input': '100\\r\\n340 14 3275 2283 2673 1107 817 2243 1226 32 2382 3638 4652 418 68 4962 387 764 4647 159 1846 225 2760 4904 3150 403 3 2439 91 4428 92 4705 75 348 1566 1465 69 6 49 4 62 4643 564 1090 3447 1871 2255 139 24 99 2669 969 86 61 4550 158 4537 3993 1589 872 2907 1888 401 80 1825 1483 63 1 2264 4068 4113 2548 41 885 4806 36 67 167 4447 34 1248 2593 82 202 81 1783 1284 4973 16 43 95 7 865 2091 3008 1793 20 947 4912 3604\\r\\n', 'output': ['70\\r\\n']}, {'input': '1\\r\\n2\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n5000 5000\\r\\n', 'output': ['2\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n1 1\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n2 3\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n3 4\\r\\n', 'output': ['2\\r\\n']}, {'input': '10\\r\\n1 2 3 4 5 6 7 1000 10 10\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Try {\n \n    public static void main (String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int[] a = new int[n];\n        int[] c = new int[n+1];\n        int max = 0;\n        int count = 0;\n        int index = 0;\n        int maxindex = 0;\n        int res = 0;\n        int t = 0;\n        for(int i = 0 ; i < n ; i++){\n            a[i] = in.nextInt();\n            c[a[i]]++;\n            if(max < c[a[i]]){\n                max = c[a[i]];\n                maxindex = i;\n                index = a[i];\n            }\n            if(a[i] == i+1)\n                count++;\n        }\n        if(count == n)\n            System.out.print(res);\n        else{\n            for(int i = 1 ; i <= n ; i++){\n                if(c[i] == 0){\n                    res++;\n                }\n                else if(c[i] == 1){\n                    t = 0;\n                    for(int j = 0 ; j < n ; j++){\n                        if(a[j] == i){\n                            t = 1;\n                        }\n                    }\n                    if(t == 0)\n                        res++;\n                }\n                else if(c[i] > 2){\n                    res++;\n                }\n                else if(c[i] == 2){\n                    if(a[maxindex]!= i){\n                        res++;\n                    }\n                }\n            }\n            System.out.print(res);\n        }\n    }\n}\n"}
{"src_uid": "bdd86c8bc54bbac6e2bb5a9d68b6eb1c", "id": 69, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1000, "testcases": "[{'input': '3\\r\\n3 1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n2 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n5 3 3 3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '5\\r\\n6 6 6 6 6\\r\\n', 'output': ['5\\r\\n']}, {'input': '10\\r\\n1 1 2 2 8 8 7 7 9 9\\r\\n', 'output': ['5\\r\\n']}, {'input': '8\\r\\n9 8 7 6 5 4 3 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '15\\r\\n1 2 3 4 5 5 4 3 2 1 1 2 3 4 5\\r\\n', 'output': ['10\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '1\\r\\n5000\\r\\n', 'output': ['1\\r\\n']}, {'input': '4\\r\\n5000 5000 5000 5000\\r\\n', 'output': ['4\\r\\n']}, {'input': '5\\r\\n3366 3461 4 5 4370\\r\\n', 'output': ['3\\r\\n']}, {'input': '10\\r\\n8 2 10 3 4 6 1 7 9 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '10\\r\\n551 3192 3213 2846 3068 1224 3447 1 10 9\\r\\n', 'output': ['7\\r\\n']}, {'input': '15\\r\\n4 1459 12 4281 3241 2748 10 3590 14 845 3518 1721 2 2880 1974\\r\\n', 'output': ['10\\r\\n']}, {'input': '15\\r\\n15 1 8 2 13 11 12 7 3 14 6 10 9 4 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '15\\r\\n2436 2354 4259 1210 2037 2665 700 3578 2880 973 1317 1024 24 3621 4142\\r\\n', 'output': ['15\\r\\n']}, {'input': '30\\r\\n28 1 3449 9 3242 4735 26 3472 15 21 2698 7 4073 3190 10 3 29 1301 4526 22 345 3876 19 12 4562 2535 2 630 18 27\\r\\n', 'output': ['14\\r\\n']}, {'input': '100\\r\\n50 39 95 30 66 78 2169 4326 81 31 74 34 80 40 19 48 97 63 82 6 88 16 21 57 92 77 10 1213 17 93 32 91 38 4375 29 75 44 22 4 45 14 2395 3254 59 3379 2 85 96 8 83 27 94 1512 2960 100 9 73 79 7 25 55 69 90 99 51 87 98 62 18 35 43 4376 4668 28 72 56 4070 61 65 36 54 4106 11 24 15 86 70 71 4087 23 13 76 20 4694 26 4962 4726 37 14 64\\r\\n', 'output': ['18\\r\\n']}, {'input': '100\\r\\n340 14 3275 2283 2673 1107 817 2243 1226 32 2382 3638 4652 418 68 4962 387 764 4647 159 1846 225 2760 4904 3150 403 3 2439 91 4428 92 4705 75 348 1566 1465 69 6 49 4 62 4643 564 1090 3447 1871 2255 139 24 99 2669 969 86 61 4550 158 4537 3993 1589 872 2907 1888 401 80 1825 1483 63 1 2264 4068 4113 2548 41 885 4806 36 67 167 4447 34 1248 2593 82 202 81 1783 1284 4973 16 43 95 7 865 2091 3008 1793 20 947 4912 3604\\r\\n', 'output': ['70\\r\\n']}, {'input': '1\\r\\n2\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n5000 5000\\r\\n', 'output': ['2\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n1 1\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n2 3\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n3 4\\r\\n', 'output': ['2\\r\\n']}, {'input': '10\\r\\n1 2 3 4 5 6 7 1000 10 10\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.util.Scanner;\n\npublic class homework_17 {\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt(), min, max = 0, tmp, minCnt = 0, maxCnt = 0, cnt[] = new int[5001], minIndex[][] = new int[2][5001], maxIndex[][] = new int[2][5001], i, j;\n\t\tlong result = 0;\n\t\tfor (i = 1; i <= 5000; i++) cnt[i] = 0;\n\t\tfor (i = 0; i < n; i++) cnt[in.nextInt()]++;\n\t\tfor (i = 1; i <= 5000; i++) {\n\t\t\tminIndex[0][i] = i;\n\t\t\tminIndex[1][i] = 0;\n\t\t}\n\t\tfor (i = 1; i <= 5000; i++) {\n\t\t\tmin = 5001;\n\t\t\tfor (j = i; j <= 5000; j+=i){\n\t\t\t\tif (cnt[j] > 0 && cnt[j] < min){\n\t\t\t\t\tmin = cnt[j];\n\t\t\t\t\tminIndex[0][i] = j;\n\t\t\t\t\tminIndex[1][i] = minIndex[1][j] + 1;\n\t\t\t\t}else if (cnt[j] == 0){\n\t\t\t\t\tminIndex[0][i] = j;\n\t\t\t\t\tminIndex[1][i] = minIndex[1][j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (i = 1; i <= 5000; i++) {\n\t\t\tmaxIndex[0][i] = i;\n\t\t\tmaxIndex[1][i] = 0;\n\t\t}\n\t\tfor (i = 5000; i > 0; i--) {\n\t\t\tmax = 0;\n\t\t\tfor (j = i; j > 0; j -= i){\n\t\t\t\tif (cnt[j] > 0 && cnt[j] > max){\n\t\t\t\t\tmax = cnt[j];\n\t\t\t\t\tmaxIndex[0][i] = j;\n\t\t\t\t\tmaxIndex[1][i] = maxIndex[1][j] + 1;\n\t\t\t\t}else if (cnt[j] == 0){\n\t\t\t\t\tmaxIndex[0][i] = j;\n\t\t\t\t\tmaxIndex[1][i] = maxIndex[1][j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (i = 1; i <= 5000; i++) {\n\t\t\tcnt[i] = 0;\n\t\t}\n\t\tfor (i = 1; i <= 5000; i++){\n\t\t\tif (maxIndex[1][i]!= 0){\n\t\t\t\ttmp = maxIndex[1][i] - minIndex[1][i];\n\t\t\t\tcnt[maxIndex[1][i]]++;\n\t\t\t\tcnt[minIndex[1][i]]--;\n\t\t\t\tif (tmp < 0) result += (tmp*(-1)) + 1;\n\t\t\t}\n\t\t}\n\t\tfor (i = 1; i <= 5000; i++) {\n\t\t\tminCnt += cnt[i];\n\t\t\tmaxCnt += cnt[i];\n\t\t}\n\t\tSystem.out.print(Math.min(minCnt, maxCnt));\n\t}\n\n}\n"}
{"src_uid": "46bfdec9bfc1e91bd2f5022f3d3c8ce7", "id": 70, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '1\\r\\n2\\r\\n3\\r\\n4\\r\\n12\\r\\n', 'output': ['12']}, {'input': '2\\r\\n3\\r\\n4\\r\\n5\\r\\n24\\r\\n', 'output': ['17']}, {'input': '1\\r\\n1\\r\\n1\\r\\n1\\r\\n100000\\r\\n', 'output': ['100000']}, {'input': '10\\r\\n9\\r\\n8\\r\\n7\\r\\n6\\r\\n', 'output': ['0']}, {'input': '8\\r\\n4\\r\\n4\\r\\n3\\r\\n65437\\r\\n', 'output': ['32718']}, {'input': '8\\r\\n4\\r\\n1\\r\\n10\\r\\n59392\\r\\n', 'output': ['59392']}, {'input': '4\\r\\n1\\r\\n8\\r\\n7\\r\\n44835\\r\\n', 'output': ['44835']}, {'input': '6\\r\\n1\\r\\n7\\r\\n2\\r\\n62982\\r\\n', 'output': ['62982']}, {'input': '2\\r\\n7\\r\\n4\\r\\n9\\r\\n56937\\r\\n', 'output': ['35246']}, {'input': '2\\r\\n9\\r\\n8\\r\\n1\\r\\n75083\\r\\n', 'output': ['75083']}, {'input': '8\\r\\n7\\r\\n7\\r\\n6\\r\\n69038\\r\\n', 'output': ['24656']}, {'input': '4\\r\\n4\\r\\n2\\r\\n3\\r\\n54481\\r\\n', 'output': ['36320']}, {'input': '6\\r\\n4\\r\\n9\\r\\n8\\r\\n72628\\r\\n', 'output': ['28244']}, {'input': '9\\r\\n7\\r\\n8\\r\\n10\\r\\n42357\\r\\n', 'output': ['16540']}, {'input': '5\\r\\n6\\r\\n4\\r\\n3\\r\\n60504\\r\\n', 'output': ['36302']}, {'input': '7\\r\\n2\\r\\n3\\r\\n8\\r\\n21754\\r\\n', 'output': ['15539']}, {'input': '1\\r\\n2\\r\\n10\\r\\n4\\r\\n39901\\r\\n', 'output': ['39901']}, {'input': '3\\r\\n4\\r\\n7\\r\\n1\\r\\n58048\\r\\n', 'output': ['58048']}, {'input': '9\\r\\n10\\r\\n4\\r\\n6\\r\\n52003\\r\\n', 'output': ['21956']}, {'input': '5\\r\\n10\\r\\n9\\r\\n3\\r\\n70149\\r\\n', 'output': ['32736']}, {'input': '5\\r\\n5\\r\\n5\\r\\n10\\r\\n55592\\r\\n', 'output': ['11118']}, {'input': '1\\r\\n5\\r\\n2\\r\\n6\\r\\n49547\\r\\n', 'output': ['49547']}, {'input': '3\\r\\n7\\r\\n7\\r\\n7\\r\\n84046\\r\\n', 'output': ['36019']}, {'input': '10\\r\\n2\\r\\n1\\r\\n8\\r\\n63537\\r\\n', 'output': ['63537']}, {'input': '7\\r\\n2\\r\\n10\\r\\n5\\r\\n81684\\r\\n', 'output': ['53678']}, {'input': '7\\r\\n1\\r\\n6\\r\\n8\\r\\n99831\\r\\n', 'output': ['99831']}, {'input': '3\\r\\n9\\r\\n3\\r\\n3\\r\\n61082\\r\\n', 'output': ['20360']}, {'input': '5\\r\\n5\\r\\n8\\r\\n9\\r\\n79228\\r\\n', 'output': ['29931']}, {'input': '1\\r\\n5\\r\\n5\\r\\n6\\r\\n89535\\r\\n', 'output': ['89535']}, {'input': '5\\r\\n5\\r\\n2\\r\\n1\\r\\n7682\\r\\n', 'output': ['7682']}, {'input': '7\\r\\n4\\r\\n8\\r\\n8\\r\\n25829\\r\\n', 'output': ['9224']}, {'input': '3\\r\\n4\\r\\n3\\r\\n3\\r\\n87079\\r\\n', 'output': ['43539']}, {'input': '5\\r\\n8\\r\\n4\\r\\n9\\r\\n5226\\r\\n', 'output': ['2438']}, {'input': '4\\r\\n9\\r\\n6\\r\\n6\\r\\n1070\\r\\n', 'output': ['415']}, {'input': '10\\r\\n10\\r\\n10\\r\\n10\\r\\n100000\\r\\n', 'output': ['10000']}, {'input': '1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n', 'output': ['1']}, {'input': '10\\r\\n10\\r\\n10\\r\\n10\\r\\n1\\r\\n', 'output': ['0']}, {'input': '10\\r\\n10\\r\\n1\\r\\n10\\r\\n10\\r\\n', 'output': ['10']}, {'input': '10\\r\\n10\\r\\n1\\r\\n10\\r\\n100\\r\\n', 'output': ['100']}, {'input': '2\\r\\n2\\r\\n2\\r\\n2\\r\\n1\\r\\n', 'output': ['0']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tInputStreamReader reader = new InputStreamReader(System.in);\n\t\tBufferedReader bufferReader = new BufferedReader(reader);\n\n\t\tint k = Integer.parseInt(bufferReader.readLine());\n\t\tint l = Integer.parseInt(bufferReader.readLine());\n\t\tint m = Integer.parseInt(bufferReader.readLine());\n\t\tint n = Integer.parseInt(bufferReader.readLine());\n\t\tint d = Integer.parseInt(bufferReader.readLine());\n\n\t\tint count = 0;\n\n\t\tint dragons = 0;\n\n\t\tint mod = 0;\n\n\t\tint damage = 0;\n\n\t\twhile (count < d) {\n\n\t\t\tdragons = count + 1;\n\n\t\t\tmod = dragons % n;\n\n\t\t\tif (mod == 0) {\n\t\t\t\tdamage = (int) (damage + dragons / n);\n\t\t\t}\n\n\t\t\tmod = dragons % m;\n\t\t\tif (mod == 0) {\n\t\t\t\tdamage = (int) (damage + dragons / m);\n\t\t\t}\n\n\t\t\tmod = dragons % l;\n\t\t\tif (mod == 0) {\n\t\t\t\tdamage = (int) (damage + dragons / l);\n\t\t\t}\n\n\t\t\tmod = dragons % k;\n\t\t\tif (mod == 0) {\n\t\t\t\tdamage = (int) (damage + dragons / k);\n\t\t\t}\n\n\t\t\tif (damage!= dragons) {\n\t\t\t\tcount++;\n\t\t\t} else {\n\t\t\t\tdamage = 0;\n\t\t\t}\n\n\t\t}\n\n\t\tSystem.out.println(d - count);\n\n\t}\n\n}\n"}
{"src_uid": "46bfdec9bfc1e91bd2f5022f3d3c8ce7", "id": 70, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '1\\r\\n2\\r\\n3\\r\\n4\\r\\n12\\r\\n', 'output': ['12']}, {'input': '2\\r\\n3\\r\\n4\\r\\n5\\r\\n24\\r\\n', 'output': ['17']}, {'input': '1\\r\\n1\\r\\n1\\r\\n1\\r\\n100000\\r\\n', 'output': ['100000']}, {'input': '10\\r\\n9\\r\\n8\\r\\n7\\r\\n6\\r\\n', 'output': ['0']}, {'input': '8\\r\\n4\\r\\n4\\r\\n3\\r\\n65437\\r\\n', 'output': ['32718']}, {'input': '8\\r\\n4\\r\\n1\\r\\n10\\r\\n59392\\r\\n', 'output': ['59392']}, {'input': '4\\r\\n1\\r\\n8\\r\\n7\\r\\n44835\\r\\n', 'output': ['44835']}, {'input': '6\\r\\n1\\r\\n7\\r\\n2\\r\\n62982\\r\\n', 'output': ['62982']}, {'input': '2\\r\\n7\\r\\n4\\r\\n9\\r\\n56937\\r\\n', 'output': ['35246']}, {'input': '2\\r\\n9\\r\\n8\\r\\n1\\r\\n75083\\r\\n', 'output': ['75083']}, {'input': '8\\r\\n7\\r\\n7\\r\\n6\\r\\n69038\\r\\n', 'output': ['24656']}, {'input': '4\\r\\n4\\r\\n2\\r\\n3\\r\\n54481\\r\\n', 'output': ['36320']}, {'input': '6\\r\\n4\\r\\n9\\r\\n8\\r\\n72628\\r\\n', 'output': ['28244']}, {'input': '9\\r\\n7\\r\\n8\\r\\n10\\r\\n42357\\r\\n', 'output': ['16540']}, {'input': '5\\r\\n6\\r\\n4\\r\\n3\\r\\n60504\\r\\n', 'output': ['36302']}, {'input': '7\\r\\n2\\r\\n3\\r\\n8\\r\\n21754\\r\\n', 'output': ['15539']}, {'input': '1\\r\\n2\\r\\n10\\r\\n4\\r\\n39901\\r\\n', 'output': ['39901']}, {'input': '3\\r\\n4\\r\\n7\\r\\n1\\r\\n58048\\r\\n', 'output': ['58048']}, {'input': '9\\r\\n10\\r\\n4\\r\\n6\\r\\n52003\\r\\n', 'output': ['21956']}, {'input': '5\\r\\n10\\r\\n9\\r\\n3\\r\\n70149\\r\\n', 'output': ['32736']}, {'input': '5\\r\\n5\\r\\n5\\r\\n10\\r\\n55592\\r\\n', 'output': ['11118']}, {'input': '1\\r\\n5\\r\\n2\\r\\n6\\r\\n49547\\r\\n', 'output': ['49547']}, {'input': '3\\r\\n7\\r\\n7\\r\\n7\\r\\n84046\\r\\n', 'output': ['36019']}, {'input': '10\\r\\n2\\r\\n1\\r\\n8\\r\\n63537\\r\\n', 'output': ['63537']}, {'input': '7\\r\\n2\\r\\n10\\r\\n5\\r\\n81684\\r\\n', 'output': ['53678']}, {'input': '7\\r\\n1\\r\\n6\\r\\n8\\r\\n99831\\r\\n', 'output': ['99831']}, {'input': '3\\r\\n9\\r\\n3\\r\\n3\\r\\n61082\\r\\n', 'output': ['20360']}, {'input': '5\\r\\n5\\r\\n8\\r\\n9\\r\\n79228\\r\\n', 'output': ['29931']}, {'input': '1\\r\\n5\\r\\n5\\r\\n6\\r\\n89535\\r\\n', 'output': ['89535']}, {'input': '5\\r\\n5\\r\\n2\\r\\n1\\r\\n7682\\r\\n', 'output': ['7682']}, {'input': '7\\r\\n4\\r\\n8\\r\\n8\\r\\n25829\\r\\n', 'output': ['9224']}, {'input': '3\\r\\n4\\r\\n3\\r\\n3\\r\\n87079\\r\\n', 'output': ['43539']}, {'input': '5\\r\\n8\\r\\n4\\r\\n9\\r\\n5226\\r\\n', 'output': ['2438']}, {'input': '4\\r\\n9\\r\\n6\\r\\n6\\r\\n1070\\r\\n', 'output': ['415']}, {'input': '10\\r\\n10\\r\\n10\\r\\n10\\r\\n100000\\r\\n', 'output': ['10000']}, {'input': '1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n', 'output': ['1']}, {'input': '10\\r\\n10\\r\\n10\\r\\n10\\r\\n1\\r\\n', 'output': ['0']}, {'input': '10\\r\\n10\\r\\n1\\r\\n10\\r\\n10\\r\\n', 'output': ['10']}, {'input': '10\\r\\n10\\r\\n1\\r\\n10\\r\\n100\\r\\n', 'output': ['100']}, {'input': '2\\r\\n2\\r\\n2\\r\\n2\\r\\n1\\r\\n', 'output': ['0']}]", "source_code": "\nimport java.util.Scanner;\n\n/**\n *\n * @author Gagandeep Bali\n */\npublic class JavaApplication15 {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner s = new Scanner(System.in);\n        int a[] = new int[4];\n        int i = 0;\n        for (i = 0; i < 4; i++) {\n            a[i] = s.nextInt();\n        }\n        int d = s.nextInt(), ans = 0;\n        for (int j = 1; j <= d; j++) {\n            if ((j % a[0]!= 0) && (j % a[1]!= 0) && (j % a[2]!= 0) && (j % a[3]!= 0)) {\n                ans++;\n            }\n        }\n        System.out.println(ans);\n\n    }\n}\n"}
{"src_uid": "46bfdec9bfc1e91bd2f5022f3d3c8ce7", "id": 70, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '1\\r\\n2\\r\\n3\\r\\n4\\r\\n12\\r\\n', 'output': ['12']}, {'input': '2\\r\\n3\\r\\n4\\r\\n5\\r\\n24\\r\\n', 'output': ['17']}, {'input': '1\\r\\n1\\r\\n1\\r\\n1\\r\\n100000\\r\\n', 'output': ['100000']}, {'input': '10\\r\\n9\\r\\n8\\r\\n7\\r\\n6\\r\\n', 'output': ['0']}, {'input': '8\\r\\n4\\r\\n4\\r\\n3\\r\\n65437\\r\\n', 'output': ['32718']}, {'input': '8\\r\\n4\\r\\n1\\r\\n10\\r\\n59392\\r\\n', 'output': ['59392']}, {'input': '4\\r\\n1\\r\\n8\\r\\n7\\r\\n44835\\r\\n', 'output': ['44835']}, {'input': '6\\r\\n1\\r\\n7\\r\\n2\\r\\n62982\\r\\n', 'output': ['62982']}, {'input': '2\\r\\n7\\r\\n4\\r\\n9\\r\\n56937\\r\\n', 'output': ['35246']}, {'input': '2\\r\\n9\\r\\n8\\r\\n1\\r\\n75083\\r\\n', 'output': ['75083']}, {'input': '8\\r\\n7\\r\\n7\\r\\n6\\r\\n69038\\r\\n', 'output': ['24656']}, {'input': '4\\r\\n4\\r\\n2\\r\\n3\\r\\n54481\\r\\n', 'output': ['36320']}, {'input': '6\\r\\n4\\r\\n9\\r\\n8\\r\\n72628\\r\\n', 'output': ['28244']}, {'input': '9\\r\\n7\\r\\n8\\r\\n10\\r\\n42357\\r\\n', 'output': ['16540']}, {'input': '5\\r\\n6\\r\\n4\\r\\n3\\r\\n60504\\r\\n', 'output': ['36302']}, {'input': '7\\r\\n2\\r\\n3\\r\\n8\\r\\n21754\\r\\n', 'output': ['15539']}, {'input': '1\\r\\n2\\r\\n10\\r\\n4\\r\\n39901\\r\\n', 'output': ['39901']}, {'input': '3\\r\\n4\\r\\n7\\r\\n1\\r\\n58048\\r\\n', 'output': ['58048']}, {'input': '9\\r\\n10\\r\\n4\\r\\n6\\r\\n52003\\r\\n', 'output': ['21956']}, {'input': '5\\r\\n10\\r\\n9\\r\\n3\\r\\n70149\\r\\n', 'output': ['32736']}, {'input': '5\\r\\n5\\r\\n5\\r\\n10\\r\\n55592\\r\\n', 'output': ['11118']}, {'input': '1\\r\\n5\\r\\n2\\r\\n6\\r\\n49547\\r\\n', 'output': ['49547']}, {'input': '3\\r\\n7\\r\\n7\\r\\n7\\r\\n84046\\r\\n', 'output': ['36019']}, {'input': '10\\r\\n2\\r\\n1\\r\\n8\\r\\n63537\\r\\n', 'output': ['63537']}, {'input': '7\\r\\n2\\r\\n10\\r\\n5\\r\\n81684\\r\\n', 'output': ['53678']}, {'input': '7\\r\\n1\\r\\n6\\r\\n8\\r\\n99831\\r\\n', 'output': ['99831']}, {'input': '3\\r\\n9\\r\\n3\\r\\n3\\r\\n61082\\r\\n', 'output': ['20360']}, {'input': '5\\r\\n5\\r\\n8\\r\\n9\\r\\n79228\\r\\n', 'output': ['29931']}, {'input': '1\\r\\n5\\r\\n5\\r\\n6\\r\\n89535\\r\\n', 'output': ['89535']}, {'input': '5\\r\\n5\\r\\n2\\r\\n1\\r\\n7682\\r\\n', 'output': ['7682']}, {'input': '7\\r\\n4\\r\\n8\\r\\n8\\r\\n25829\\r\\n', 'output': ['9224']}, {'input': '3\\r\\n4\\r\\n3\\r\\n3\\r\\n87079\\r\\n', 'output': ['43539']}, {'input': '5\\r\\n8\\r\\n4\\r\\n9\\r\\n5226\\r\\n', 'output': ['2438']}, {'input': '4\\r\\n9\\r\\n6\\r\\n6\\r\\n1070\\r\\n', 'output': ['415']}, {'input': '10\\r\\n10\\r\\n10\\r\\n10\\r\\n100000\\r\\n', 'output': ['10000']}, {'input': '1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n', 'output': ['1']}, {'input': '10\\r\\n10\\r\\n10\\r\\n10\\r\\n1\\r\\n', 'output': ['0']}, {'input': '10\\r\\n10\\r\\n1\\r\\n10\\r\\n10\\r\\n', 'output': ['10']}, {'input': '10\\r\\n10\\r\\n1\\r\\n10\\r\\n100\\r\\n', 'output': ['100']}, {'input': '2\\r\\n2\\r\\n2\\r\\n2\\r\\n1\\r\\n', 'output': ['0']}]", "source_code": "\nimport java.util.Scanner;\n\npublic class Try1 {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint k = in.nextInt();\n\t\tint l = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint n = in.nextInt();\n\t\tint total = in.nextInt();\n\t\tint count = 0;\n\t\tfor (int i = 1; i <= total; i++) {\n\t\t\tif ((i % k) == 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif ((i % l) == 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif ((i % m) == 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif ((i % n) == 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println((total - count));\n\t}\n}\n"}
{"src_uid": "46bfdec9bfc1e91bd2f5022f3d3c8ce7", "id": 70, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '1\\r\\n2\\r\\n3\\r\\n4\\r\\n12\\r\\n', 'output': ['12']}, {'input': '2\\r\\n3\\r\\n4\\r\\n5\\r\\n24\\r\\n', 'output': ['17']}, {'input': '1\\r\\n1\\r\\n1\\r\\n1\\r\\n100000\\r\\n', 'output': ['100000']}, {'input': '10\\r\\n9\\r\\n8\\r\\n7\\r\\n6\\r\\n', 'output': ['0']}, {'input': '8\\r\\n4\\r\\n4\\r\\n3\\r\\n65437\\r\\n', 'output': ['32718']}, {'input': '8\\r\\n4\\r\\n1\\r\\n10\\r\\n59392\\r\\n', 'output': ['59392']}, {'input': '4\\r\\n1\\r\\n8\\r\\n7\\r\\n44835\\r\\n', 'output': ['44835']}, {'input': '6\\r\\n1\\r\\n7\\r\\n2\\r\\n62982\\r\\n', 'output': ['62982']}, {'input': '2\\r\\n7\\r\\n4\\r\\n9\\r\\n56937\\r\\n', 'output': ['35246']}, {'input': '2\\r\\n9\\r\\n8\\r\\n1\\r\\n75083\\r\\n', 'output': ['75083']}, {'input': '8\\r\\n7\\r\\n7\\r\\n6\\r\\n69038\\r\\n', 'output': ['24656']}, {'input': '4\\r\\n4\\r\\n2\\r\\n3\\r\\n54481\\r\\n', 'output': ['36320']}, {'input': '6\\r\\n4\\r\\n9\\r\\n8\\r\\n72628\\r\\n', 'output': ['28244']}, {'input': '9\\r\\n7\\r\\n8\\r\\n10\\r\\n42357\\r\\n', 'output': ['16540']}, {'input': '5\\r\\n6\\r\\n4\\r\\n3\\r\\n60504\\r\\n', 'output': ['36302']}, {'input': '7\\r\\n2\\r\\n3\\r\\n8\\r\\n21754\\r\\n', 'output': ['15539']}, {'input': '1\\r\\n2\\r\\n10\\r\\n4\\r\\n39901\\r\\n', 'output': ['39901']}, {'input': '3\\r\\n4\\r\\n7\\r\\n1\\r\\n58048\\r\\n', 'output': ['58048']}, {'input': '9\\r\\n10\\r\\n4\\r\\n6\\r\\n52003\\r\\n', 'output': ['21956']}, {'input': '5\\r\\n10\\r\\n9\\r\\n3\\r\\n70149\\r\\n', 'output': ['32736']}, {'input': '5\\r\\n5\\r\\n5\\r\\n10\\r\\n55592\\r\\n', 'output': ['11118']}, {'input': '1\\r\\n5\\r\\n2\\r\\n6\\r\\n49547\\r\\n', 'output': ['49547']}, {'input': '3\\r\\n7\\r\\n7\\r\\n7\\r\\n84046\\r\\n', 'output': ['36019']}, {'input': '10\\r\\n2\\r\\n1\\r\\n8\\r\\n63537\\r\\n', 'output': ['63537']}, {'input': '7\\r\\n2\\r\\n10\\r\\n5\\r\\n81684\\r\\n', 'output': ['53678']}, {'input': '7\\r\\n1\\r\\n6\\r\\n8\\r\\n99831\\r\\n', 'output': ['99831']}, {'input': '3\\r\\n9\\r\\n3\\r\\n3\\r\\n61082\\r\\n', 'output': ['20360']}, {'input': '5\\r\\n5\\r\\n8\\r\\n9\\r\\n79228\\r\\n', 'output': ['29931']}, {'input': '1\\r\\n5\\r\\n5\\r\\n6\\r\\n89535\\r\\n', 'output': ['89535']}, {'input': '5\\r\\n5\\r\\n2\\r\\n1\\r\\n7682\\r\\n', 'output': ['7682']}, {'input': '7\\r\\n4\\r\\n8\\r\\n8\\r\\n25829\\r\\n', 'output': ['9224']}, {'input': '3\\r\\n4\\r\\n3\\r\\n3\\r\\n87079\\r\\n', 'output': ['43539']}, {'input': '5\\r\\n8\\r\\n4\\r\\n9\\r\\n5226\\r\\n', 'output': ['2438']}, {'input': '4\\r\\n9\\r\\n6\\r\\n6\\r\\n1070\\r\\n', 'output': ['415']}, {'input': '10\\r\\n10\\r\\n10\\r\\n10\\r\\n100000\\r\\n', 'output': ['10000']}, {'input': '1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n', 'output': ['1']}, {'input': '10\\r\\n10\\r\\n10\\r\\n10\\r\\n1\\r\\n', 'output': ['0']}, {'input': '10\\r\\n10\\r\\n1\\r\\n10\\r\\n10\\r\\n', 'output': ['10']}, {'input': '10\\r\\n10\\r\\n1\\r\\n10\\r\\n100\\r\\n', 'output': ['100']}, {'input': '2\\r\\n2\\r\\n2\\r\\n2\\r\\n1\\r\\n', 'output': ['0']}]", "source_code": "import java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Scanner;\nimport java.util.Set;\n\npublic class Dragons {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int k = in.nextInt(), l = in.nextInt(), m = in.nextInt(), n = in.nextInt(), d = in.nextInt();\n        int total = 0;\n        for (int i = 1 ; i <= d ; i++){\n            if((i%k == 0) || (i%l == 0) || (i%m == 0) || (i%n == 0)){\n                total ++;\n            }\n        }\n        System.out.println(d - total);\n    }\n}"}
{"src_uid": "46bfdec9bfc1e91bd2f5022f3d3c8ce7", "id": 70, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '1\\r\\n2\\r\\n3\\r\\n4\\r\\n12\\r\\n', 'output': ['12']}, {'input': '2\\r\\n3\\r\\n4\\r\\n5\\r\\n24\\r\\n', 'output': ['17']}, {'input': '1\\r\\n1\\r\\n1\\r\\n1\\r\\n100000\\r\\n', 'output': ['100000']}, {'input': '10\\r\\n9\\r\\n8\\r\\n7\\r\\n6\\r\\n', 'output': ['0']}, {'input': '8\\r\\n4\\r\\n4\\r\\n3\\r\\n65437\\r\\n', 'output': ['32718']}, {'input': '8\\r\\n4\\r\\n1\\r\\n10\\r\\n59392\\r\\n', 'output': ['59392']}, {'input': '4\\r\\n1\\r\\n8\\r\\n7\\r\\n44835\\r\\n', 'output': ['44835']}, {'input': '6\\r\\n1\\r\\n7\\r\\n2\\r\\n62982\\r\\n', 'output': ['62982']}, {'input': '2\\r\\n7\\r\\n4\\r\\n9\\r\\n56937\\r\\n', 'output': ['35246']}, {'input': '2\\r\\n9\\r\\n8\\r\\n1\\r\\n75083\\r\\n', 'output': ['75083']}, {'input': '8\\r\\n7\\r\\n7\\r\\n6\\r\\n69038\\r\\n', 'output': ['24656']}, {'input': '4\\r\\n4\\r\\n2\\r\\n3\\r\\n54481\\r\\n', 'output': ['36320']}, {'input': '6\\r\\n4\\r\\n9\\r\\n8\\r\\n72628\\r\\n', 'output': ['28244']}, {'input': '9\\r\\n7\\r\\n8\\r\\n10\\r\\n42357\\r\\n', 'output': ['16540']}, {'input': '5\\r\\n6\\r\\n4\\r\\n3\\r\\n60504\\r\\n', 'output': ['36302']}, {'input': '7\\r\\n2\\r\\n3\\r\\n8\\r\\n21754\\r\\n', 'output': ['15539']}, {'input': '1\\r\\n2\\r\\n10\\r\\n4\\r\\n39901\\r\\n', 'output': ['39901']}, {'input': '3\\r\\n4\\r\\n7\\r\\n1\\r\\n58048\\r\\n', 'output': ['58048']}, {'input': '9\\r\\n10\\r\\n4\\r\\n6\\r\\n52003\\r\\n', 'output': ['21956']}, {'input': '5\\r\\n10\\r\\n9\\r\\n3\\r\\n70149\\r\\n', 'output': ['32736']}, {'input': '5\\r\\n5\\r\\n5\\r\\n10\\r\\n55592\\r\\n', 'output': ['11118']}, {'input': '1\\r\\n5\\r\\n2\\r\\n6\\r\\n49547\\r\\n', 'output': ['49547']}, {'input': '3\\r\\n7\\r\\n7\\r\\n7\\r\\n84046\\r\\n', 'output': ['36019']}, {'input': '10\\r\\n2\\r\\n1\\r\\n8\\r\\n63537\\r\\n', 'output': ['63537']}, {'input': '7\\r\\n2\\r\\n10\\r\\n5\\r\\n81684\\r\\n', 'output': ['53678']}, {'input': '7\\r\\n1\\r\\n6\\r\\n8\\r\\n99831\\r\\n', 'output': ['99831']}, {'input': '3\\r\\n9\\r\\n3\\r\\n3\\r\\n61082\\r\\n', 'output': ['20360']}, {'input': '5\\r\\n5\\r\\n8\\r\\n9\\r\\n79228\\r\\n', 'output': ['29931']}, {'input': '1\\r\\n5\\r\\n5\\r\\n6\\r\\n89535\\r\\n', 'output': ['89535']}, {'input': '5\\r\\n5\\r\\n2\\r\\n1\\r\\n7682\\r\\n', 'output': ['7682']}, {'input': '7\\r\\n4\\r\\n8\\r\\n8\\r\\n25829\\r\\n', 'output': ['9224']}, {'input': '3\\r\\n4\\r\\n3\\r\\n3\\r\\n87079\\r\\n', 'output': ['43539']}, {'input': '5\\r\\n8\\r\\n4\\r\\n9\\r\\n5226\\r\\n', 'output': ['2438']}, {'input': '4\\r\\n9\\r\\n6\\r\\n6\\r\\n1070\\r\\n', 'output': ['415']}, {'input': '10\\r\\n10\\r\\n10\\r\\n10\\r\\n100000\\r\\n', 'output': ['10000']}, {'input': '1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n', 'output': ['1']}, {'input': '10\\r\\n10\\r\\n10\\r\\n10\\r\\n1\\r\\n', 'output': ['0']}, {'input': '10\\r\\n10\\r\\n1\\r\\n10\\r\\n10\\r\\n', 'output': ['10']}, {'input': '10\\r\\n10\\r\\n1\\r\\n10\\r\\n100\\r\\n', 'output': ['100']}, {'input': '2\\r\\n2\\r\\n2\\r\\n2\\r\\n1\\r\\n', 'output': ['0']}]", "source_code": "import java.util.*;\nimport java.math.*;\n\npublic class Tryout1{\n  public static void main (String[] args){\n    Scanner in = new Scanner (System.in);\n    int d = in.nextInt();\n    int [] n = {1,in.nextInt(),in.nextInt(),in.nextInt(),in.nextInt()};\n    int ans = 0;\n    for (int i = 0 ; i < d ; i++)\n    if (i % n[0] == 0 && i % n[1]!= 0 && i % n[2]!= 0 && i % n[3]!= 0 && i % n[4]!= 0)\n    ans++;\n    System.out.println(ans);\n  }\n}\n"}
{"src_uid": "a37df9b239a40473516d1525d56a0da7", "id": 71, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1400, "testcases": "[{'input': '2 3\\r\\nAAB\\r\\nBAA\\r\\n', 'output': ['4\\r\\n']}, {'input': '4 5\\r\\nABABA\\r\\nBCGDG\\r\\nAAAAA\\r\\nYABSA\\r\\n', 'output': ['216\\r\\n']}, {'input': '1 1\\r\\nE\\r\\n', 'output': ['1\\r\\n']}, {'input': '2 2\\r\\nNS\\r\\nPD\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 4\\r\\nPJKD\\r\\nNFJX\\r\\nFGFK\\r\\n', 'output': ['81\\r\\n']}, {'input': '4 5\\r\\nSXFMY\\r\\nATHLM\\r\\nKDDQW\\r\\nZWGDS\\r\\n', 'output': ['1024\\r\\n']}, {'input': '20 14\\r\\nJNFKBBBJYZHWQE\\r\\nLBOKZCPFNKDBJY\\r\\nXKNWGHQHIOXUPF\\r\\nDDNRUKVUGHWMXW\\r\\nMTIZFNAAFEAPHX\\r\\nIXBQOOHEULZYHU\\r\\nMRCSREUEOOMUUN\\r\\nHJTSQWKUFYZDQU\\r\\nGMCMUZCOPRVEIQ\\r\\nXBKKGGJECOBLTH\\r\\nXXHTLXCNJZJUAF\\r\\nVLJRKXXXWMTPKZ\\r\\nPTYMNPTBBCWKAD\\r\\nQYJGOBUBHMEDYE\\r\\nGTKUUVVNKAHTUI\\r\\nZNKXYZPCYLBZFP\\r\\nQCBLJTRMBDWNNE\\r\\nTDOKJOBKEOVNLZ\\r\\nFKZUITYAFJOQIM\\r\\nUWQNSGLXEEIRWF\\r\\n', 'output': ['515139391\\r\\n']}, {'input': '5 14\\r\\nAQRXUQQNSKZPGC\\r\\nDTTKSPFGGVCLPT\\r\\nVLZQWWESCHDTAZ\\r\\nCOKOWDWDRUOMHP\\r\\nXDTRBIZTTCIDGS\\r\\n', 'output': ['124999979\\r\\n']}, {'input': '9 23\\r\\nOILBYKHRGMPENVFNHLSIUOW\\r\\nLPJFHTUQUINAALRDGLSQUXR\\r\\nLYYJJEBNZATAFQWTDZSPUNZ\\r\\nHSJPIQKKWWERJZIEMLCZUKI\\r\\nOJYIEYDGPFWRHCMISJCCUEM\\r\\nLMGKZVFYIVDRTIHBWPCNUTG\\r\\nUBGGNCITVHAIPKXCLTSAULQ\\r\\nOWSAWUOXQDBSXXBHTLSXUVD\\r\\nUGQTIZQPBGMASRQPVPSFUWK\\r\\n', 'output': ['454717784\\r\\n']}, {'input': '25 4\\r\\nLVKG\\r\\nMICU\\r\\nZHKW\\r\\nLFGG\\r\\nOWQO\\r\\nLCQG\\r\\nLVXU\\r\\nOUKB\\r\\nLNQX\\r\\nZJTO\\r\\nOOQX\\r\\nLVQP\\r\\nMFQB\\r\\nMRQV\\r\\nOIQH\\r\\nOPXX\\r\\nXFKU\\r\\nFCQB\\r\\nZPKH\\r\\nLVCH\\r\\nNFCU\\r\\nOVQW\\r\\nOZKU\\r\\nLFHX\\r\\nLPXO\\r\\n', 'output': ['5733\\r\\n']}, {'input': '30 10\\r\\nUTNTGOKZYJ\\r\\nQHOUHNYZVW\\r\\nLTVGHJRZVW\\r\\nMZHYHOLZYJ\\r\\nERYEUEPZYE\\r\\nUZDBFTURYJ\\r\\nRVSMQTIZGW\\r\\nWDJQHMIRYY\\r\\nKCORHQPZYE\\r\\nRRPLFOZZVY\\r\\nJTXMFNNNYJ\\r\\nMVTGGOZZVV\\r\\nEHAFFNUZVF\\r\\nLBRNWJZNYE\\r\\nJVMOHTPZYJ\\r\\nWTARFJLZVV\\r\\nLVJCWOURVW\\r\\nLCLQFJYRVV\\r\\nQVBVGNJRYF\\r\\nNTZGHOLRYE\\r\\nMGQKHOUPYJ\\r\\nRRSSBXPZYJ\\r\\nRYCRGTLZYJ\\r\\nJRDEGNKRVW\\r\\nRZKFGHYRVG\\r\\nMDJBFNIZYG\\r\\nMPLWHXIZYE\\r\\nSRZMHMURVE\\r\\nMTEBBMRZYJ\\r\\nJPJIFOLZYM\\r\\n', 'output': ['919913906\\r\\n']}, {'input': '40 7\\r\\nPNTVVER\\r\\nPAHTQDR\\r\\nRXMJVAS\\r\\nVIQNLYC\\r\\nILPUSVX\\r\\nYJOXQDJ\\r\\nSEFODTO\\r\\nOTJMREL\\r\\nLIQRZGD\\r\\nLBJJPOR\\r\\nRUTYHQO\\r\\nRIWEPBD\\r\\nKQUMFIB\\r\\nISTRRYH\\r\\nXBTOTGK\\r\\nRFQODEY\\r\\nHDSTZTP\\r\\nYCXFAGL\\r\\nAREGRFU\\r\\nLELZUYU\\r\\nGVABDKH\\r\\nFJAMMME\\r\\nACVULXE\\r\\nJHVPJAS\\r\\nAAQNMBX\\r\\nJJGUCXG\\r\\nOQATILQ\\r\\nNEOSHJM\\r\\nHFLWOFM\\r\\nICYEQHY\\r\\nFACGLYP\\r\\nPLLXJEQ\\r\\nDCHXYPB\\r\\nAGDDZJJ\\r\\nLSQRXTN\\r\\nHDQZXIY\\r\\nNAHDDWW\\r\\nQCMXRQN\\r\\nFDUDSZO\\r\\nHKBEVTW\\r\\n', 'output': ['206575993\\r\\n']}, {'input': '2 2\\r\\nAA\\r\\nBB\\r\\n', 'output': ['4\\r\\n']}, {'input': '1 10\\r\\nAAAAAAAAAA\\r\\n', 'output': ['1\\r\\n']}, {'input': '2 8\\r\\nAAAAAAAA\\r\\nBBBBBBBB\\r\\n', 'output': ['256\\r\\n']}, {'input': '10 10\\r\\nAAAAAAAAAA\\r\\nBBBBBBBBBB\\r\\nCCCCCCCCCC\\r\\nDDDDDDDDDD\\r\\nAAAAAAAAAA\\r\\nBBBBBBBBBB\\r\\nCCCCCCCCCC\\r\\nDDDDDDDDDD\\r\\nAAAAAAAAAA\\r\\nBBBBBBBBBB\\r\\n', 'output': ['1048576\\r\\n']}, {'input': '1 20\\r\\nAAAAAAAAAAAAAAAAAAAA\\r\\n', 'output': ['1\\r\\n']}, {'input': '20 1\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\n', 'output': ['7\\r\\n']}, {'input': '5 60\\r\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\\r\\nDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\\r\\nEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\\r\\n', 'output': ['449874206\\r\\n']}, {'input': '50 4\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\n', 'output': ['10000\\r\\n']}, {'input': '1 100\\r\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\n', 'output': ['2\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\n', 'output': ['14\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\nW\\r\\nX\\r\\nY\\r\\nZ\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\nW\\r\\nX\\r\\nY\\r\\nZ\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\nW\\r\\nX\\r\\nY\\r\\nZ\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\n', 'output': ['26\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Name{\n    static int p;\n    static long q=1000000007;\n    public static void main(String[]args){\n        Scanner in=new Scanner(System.in);\n        int n=in.nextInt(),m=in.nextInt(),max=1;p=1;\n        String[]str=new String[n];\n        for(int i=0;i<n;i++){str[i]=in.next();max=Math.max(max,str[i].length());}\n        for(int i=1;i<n;i++){\n            p=1;\n            for(int j=0;j<m;j++){\n                for(int k=0;k<n;k++){\n                    if(str[k].charAt(j)<str[i].charAt(j)){p=Math.max(p,k);}\n                }\n            }\n            String temp=str[i];str[i]=str[p];str[p]=temp;\n        }\n        for(int i=0;i<n;i++){for(int j=0;j<m;j++){if(i!=0 && j!=0){str[i]=str[i].substring(j)+str[i].charAt(j-1)+str[i].substring(j-1,j);}}}\n        int[][]count=new int[m][max];\n        for(int j=0;j<m;j++){\n            for(int k=1;k<max;k++){\n                int c=0;\n                for(int l=0;l<n;l++){\n                    if(str[l].length()>=k && str[l].charAt(k-1)<=str[l].charAt(k-1)){c++;}\n                }\n                count[j][k]=c;\n            }\n        }\n        long sum=0;\n        for(int k=0;k<max;k++){\n            long cur=1;\n            for(int j=0;j<m;j++){\n                for(int i=0;i<count[j][k];i++){cur=(cur*(count[j][k]-i))%q;}\n            }\n            sum=(sum+(cur*p))%q;\n            p*=n;p%=q;\n        }\n        System.out.println(sum);\n    }\n}"}
{"src_uid": "a37df9b239a40473516d1525d56a0da7", "id": 71, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1400, "testcases": "[{'input': '2 3\\r\\nAAB\\r\\nBAA\\r\\n', 'output': ['4\\r\\n']}, {'input': '4 5\\r\\nABABA\\r\\nBCGDG\\r\\nAAAAA\\r\\nYABSA\\r\\n', 'output': ['216\\r\\n']}, {'input': '1 1\\r\\nE\\r\\n', 'output': ['1\\r\\n']}, {'input': '2 2\\r\\nNS\\r\\nPD\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 4\\r\\nPJKD\\r\\nNFJX\\r\\nFGFK\\r\\n', 'output': ['81\\r\\n']}, {'input': '4 5\\r\\nSXFMY\\r\\nATHLM\\r\\nKDDQW\\r\\nZWGDS\\r\\n', 'output': ['1024\\r\\n']}, {'input': '20 14\\r\\nJNFKBBBJYZHWQE\\r\\nLBOKZCPFNKDBJY\\r\\nXKNWGHQHIOXUPF\\r\\nDDNRUKVUGHWMXW\\r\\nMTIZFNAAFEAPHX\\r\\nIXBQOOHEULZYHU\\r\\nMRCSREUEOOMUUN\\r\\nHJTSQWKUFYZDQU\\r\\nGMCMUZCOPRVEIQ\\r\\nXBKKGGJECOBLTH\\r\\nXXHTLXCNJZJUAF\\r\\nVLJRKXXXWMTPKZ\\r\\nPTYMNPTBBCWKAD\\r\\nQYJGOBUBHMEDYE\\r\\nGTKUUVVNKAHTUI\\r\\nZNKXYZPCYLBZFP\\r\\nQCBLJTRMBDWNNE\\r\\nTDOKJOBKEOVNLZ\\r\\nFKZUITYAFJOQIM\\r\\nUWQNSGLXEEIRWF\\r\\n', 'output': ['515139391\\r\\n']}, {'input': '5 14\\r\\nAQRXUQQNSKZPGC\\r\\nDTTKSPFGGVCLPT\\r\\nVLZQWWESCHDTAZ\\r\\nCOKOWDWDRUOMHP\\r\\nXDTRBIZTTCIDGS\\r\\n', 'output': ['124999979\\r\\n']}, {'input': '9 23\\r\\nOILBYKHRGMPENVFNHLSIUOW\\r\\nLPJFHTUQUINAALRDGLSQUXR\\r\\nLYYJJEBNZATAFQWTDZSPUNZ\\r\\nHSJPIQKKWWERJZIEMLCZUKI\\r\\nOJYIEYDGPFWRHCMISJCCUEM\\r\\nLMGKZVFYIVDRTIHBWPCNUTG\\r\\nUBGGNCITVHAIPKXCLTSAULQ\\r\\nOWSAWUOXQDBSXXBHTLSXUVD\\r\\nUGQTIZQPBGMASRQPVPSFUWK\\r\\n', 'output': ['454717784\\r\\n']}, {'input': '25 4\\r\\nLVKG\\r\\nMICU\\r\\nZHKW\\r\\nLFGG\\r\\nOWQO\\r\\nLCQG\\r\\nLVXU\\r\\nOUKB\\r\\nLNQX\\r\\nZJTO\\r\\nOOQX\\r\\nLVQP\\r\\nMFQB\\r\\nMRQV\\r\\nOIQH\\r\\nOPXX\\r\\nXFKU\\r\\nFCQB\\r\\nZPKH\\r\\nLVCH\\r\\nNFCU\\r\\nOVQW\\r\\nOZKU\\r\\nLFHX\\r\\nLPXO\\r\\n', 'output': ['5733\\r\\n']}, {'input': '30 10\\r\\nUTNTGOKZYJ\\r\\nQHOUHNYZVW\\r\\nLTVGHJRZVW\\r\\nMZHYHOLZYJ\\r\\nERYEUEPZYE\\r\\nUZDBFTURYJ\\r\\nRVSMQTIZGW\\r\\nWDJQHMIRYY\\r\\nKCORHQPZYE\\r\\nRRPLFOZZVY\\r\\nJTXMFNNNYJ\\r\\nMVTGGOZZVV\\r\\nEHAFFNUZVF\\r\\nLBRNWJZNYE\\r\\nJVMOHTPZYJ\\r\\nWTARFJLZVV\\r\\nLVJCWOURVW\\r\\nLCLQFJYRVV\\r\\nQVBVGNJRYF\\r\\nNTZGHOLRYE\\r\\nMGQKHOUPYJ\\r\\nRRSSBXPZYJ\\r\\nRYCRGTLZYJ\\r\\nJRDEGNKRVW\\r\\nRZKFGHYRVG\\r\\nMDJBFNIZYG\\r\\nMPLWHXIZYE\\r\\nSRZMHMURVE\\r\\nMTEBBMRZYJ\\r\\nJPJIFOLZYM\\r\\n', 'output': ['919913906\\r\\n']}, {'input': '40 7\\r\\nPNTVVER\\r\\nPAHTQDR\\r\\nRXMJVAS\\r\\nVIQNLYC\\r\\nILPUSVX\\r\\nYJOXQDJ\\r\\nSEFODTO\\r\\nOTJMREL\\r\\nLIQRZGD\\r\\nLBJJPOR\\r\\nRUTYHQO\\r\\nRIWEPBD\\r\\nKQUMFIB\\r\\nISTRRYH\\r\\nXBTOTGK\\r\\nRFQODEY\\r\\nHDSTZTP\\r\\nYCXFAGL\\r\\nAREGRFU\\r\\nLELZUYU\\r\\nGVABDKH\\r\\nFJAMMME\\r\\nACVULXE\\r\\nJHVPJAS\\r\\nAAQNMBX\\r\\nJJGUCXG\\r\\nOQATILQ\\r\\nNEOSHJM\\r\\nHFLWOFM\\r\\nICYEQHY\\r\\nFACGLYP\\r\\nPLLXJEQ\\r\\nDCHXYPB\\r\\nAGDDZJJ\\r\\nLSQRXTN\\r\\nHDQZXIY\\r\\nNAHDDWW\\r\\nQCMXRQN\\r\\nFDUDSZO\\r\\nHKBEVTW\\r\\n', 'output': ['206575993\\r\\n']}, {'input': '2 2\\r\\nAA\\r\\nBB\\r\\n', 'output': ['4\\r\\n']}, {'input': '1 10\\r\\nAAAAAAAAAA\\r\\n', 'output': ['1\\r\\n']}, {'input': '2 8\\r\\nAAAAAAAA\\r\\nBBBBBBBB\\r\\n', 'output': ['256\\r\\n']}, {'input': '10 10\\r\\nAAAAAAAAAA\\r\\nBBBBBBBBBB\\r\\nCCCCCCCCCC\\r\\nDDDDDDDDDD\\r\\nAAAAAAAAAA\\r\\nBBBBBBBBBB\\r\\nCCCCCCCCCC\\r\\nDDDDDDDDDD\\r\\nAAAAAAAAAA\\r\\nBBBBBBBBBB\\r\\n', 'output': ['1048576\\r\\n']}, {'input': '1 20\\r\\nAAAAAAAAAAAAAAAAAAAA\\r\\n', 'output': ['1\\r\\n']}, {'input': '20 1\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\n', 'output': ['7\\r\\n']}, {'input': '5 60\\r\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\\r\\nDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\\r\\nEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\\r\\n', 'output': ['449874206\\r\\n']}, {'input': '50 4\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\n', 'output': ['10000\\r\\n']}, {'input': '1 100\\r\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\n', 'output': ['2\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\n', 'output': ['14\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\nW\\r\\nX\\r\\nY\\r\\nZ\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\nW\\r\\nX\\r\\nY\\r\\nZ\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\nW\\r\\nX\\r\\nY\\r\\nZ\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\n', 'output': ['26\\r\\n']}]", "source_code": "import java.io.IOException;\nimport java.io.InputStreamReader;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author Fahim\n */\npublic class JavaApplication9 {\n    private static int MOD = 1000000007;\n    \n    public static void main(String[] args) throws IOException {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        int n, m;\n        char[][] arr = new char[100][100];\n        String[] st = new String[100];\n        int[][] c = new int[100][100];\n        \n        String[] temp;\n        \n        String s1, s2;\n        int i1, i2;\n        \n        temp = new String(isr.readLine().toCharArray()).split(\" \");\n        n = Integer.parseInt(temp[0]);\n        m = Integer.parseInt(temp[1]);\n        \n        for(int i = 0 ; i < n ; i ++)\n            st[i] = isr.readLine();\n        \n        for(int i = 0 ; i < n ; i ++)\n        {\n            for(int j = i + 1 ; j < n ; j ++)\n            {\n                for(int k = 1 ; k <= m ; k++)\n                {\n                    s1 = st[i].substring(0, k);\n                    s2 = st[j].substring(0, k);\n                    \n                    if(s1.compareTo(s2) > 0)\n                    {\n                        //System.out.println(\"Swap\");\n                        arr[i][j] = arr[j][i] = 1;\n                        c[i][j] = c[j][i] = 0;\n                    }\n                    else if(s1.compareTo(s2) == 0)\n                    {\n                        arr[i][j] = arr[j][i] = 2;\n                        c[i][j] = c[j][i] = 1;\n                    }\n                    else\n                    {\n                        arr[i][j] = arr[j][i] = 0;\n                        c[i][j] = c[j][i] = 0;\n                    }\n                }\n            }\n        }\n        long result = 1;\n        for(int i = 0 ; i < n ; i++)\n        {\n            for(int j = 0 ; j < i ; j++)\n            {\n                //System.out.print(c[i][j]);\n                result = (result * (long)c[i][j]) % MOD;\n            }\n            //System.out.println();\n        }\n        \n        System.out.println((int)result);\n    }\n}\n"}
{"src_uid": "a37df9b239a40473516d1525d56a0da7", "id": 71, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1400, "testcases": "[{'input': '2 3\\r\\nAAB\\r\\nBAA\\r\\n', 'output': ['4\\r\\n']}, {'input': '4 5\\r\\nABABA\\r\\nBCGDG\\r\\nAAAAA\\r\\nYABSA\\r\\n', 'output': ['216\\r\\n']}, {'input': '1 1\\r\\nE\\r\\n', 'output': ['1\\r\\n']}, {'input': '2 2\\r\\nNS\\r\\nPD\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 4\\r\\nPJKD\\r\\nNFJX\\r\\nFGFK\\r\\n', 'output': ['81\\r\\n']}, {'input': '4 5\\r\\nSXFMY\\r\\nATHLM\\r\\nKDDQW\\r\\nZWGDS\\r\\n', 'output': ['1024\\r\\n']}, {'input': '20 14\\r\\nJNFKBBBJYZHWQE\\r\\nLBOKZCPFNKDBJY\\r\\nXKNWGHQHIOXUPF\\r\\nDDNRUKVUGHWMXW\\r\\nMTIZFNAAFEAPHX\\r\\nIXBQOOHEULZYHU\\r\\nMRCSREUEOOMUUN\\r\\nHJTSQWKUFYZDQU\\r\\nGMCMUZCOPRVEIQ\\r\\nXBKKGGJECOBLTH\\r\\nXXHTLXCNJZJUAF\\r\\nVLJRKXXXWMTPKZ\\r\\nPTYMNPTBBCWKAD\\r\\nQYJGOBUBHMEDYE\\r\\nGTKUUVVNKAHTUI\\r\\nZNKXYZPCYLBZFP\\r\\nQCBLJTRMBDWNNE\\r\\nTDOKJOBKEOVNLZ\\r\\nFKZUITYAFJOQIM\\r\\nUWQNSGLXEEIRWF\\r\\n', 'output': ['515139391\\r\\n']}, {'input': '5 14\\r\\nAQRXUQQNSKZPGC\\r\\nDTTKSPFGGVCLPT\\r\\nVLZQWWESCHDTAZ\\r\\nCOKOWDWDRUOMHP\\r\\nXDTRBIZTTCIDGS\\r\\n', 'output': ['124999979\\r\\n']}, {'input': '9 23\\r\\nOILBYKHRGMPENVFNHLSIUOW\\r\\nLPJFHTUQUINAALRDGLSQUXR\\r\\nLYYJJEBNZATAFQWTDZSPUNZ\\r\\nHSJPIQKKWWERJZIEMLCZUKI\\r\\nOJYIEYDGPFWRHCMISJCCUEM\\r\\nLMGKZVFYIVDRTIHBWPCNUTG\\r\\nUBGGNCITVHAIPKXCLTSAULQ\\r\\nOWSAWUOXQDBSXXBHTLSXUVD\\r\\nUGQTIZQPBGMASRQPVPSFUWK\\r\\n', 'output': ['454717784\\r\\n']}, {'input': '25 4\\r\\nLVKG\\r\\nMICU\\r\\nZHKW\\r\\nLFGG\\r\\nOWQO\\r\\nLCQG\\r\\nLVXU\\r\\nOUKB\\r\\nLNQX\\r\\nZJTO\\r\\nOOQX\\r\\nLVQP\\r\\nMFQB\\r\\nMRQV\\r\\nOIQH\\r\\nOPXX\\r\\nXFKU\\r\\nFCQB\\r\\nZPKH\\r\\nLVCH\\r\\nNFCU\\r\\nOVQW\\r\\nOZKU\\r\\nLFHX\\r\\nLPXO\\r\\n', 'output': ['5733\\r\\n']}, {'input': '30 10\\r\\nUTNTGOKZYJ\\r\\nQHOUHNYZVW\\r\\nLTVGHJRZVW\\r\\nMZHYHOLZYJ\\r\\nERYEUEPZYE\\r\\nUZDBFTURYJ\\r\\nRVSMQTIZGW\\r\\nWDJQHMIRYY\\r\\nKCORHQPZYE\\r\\nRRPLFOZZVY\\r\\nJTXMFNNNYJ\\r\\nMVTGGOZZVV\\r\\nEHAFFNUZVF\\r\\nLBRNWJZNYE\\r\\nJVMOHTPZYJ\\r\\nWTARFJLZVV\\r\\nLVJCWOURVW\\r\\nLCLQFJYRVV\\r\\nQVBVGNJRYF\\r\\nNTZGHOLRYE\\r\\nMGQKHOUPYJ\\r\\nRRSSBXPZYJ\\r\\nRYCRGTLZYJ\\r\\nJRDEGNKRVW\\r\\nRZKFGHYRVG\\r\\nMDJBFNIZYG\\r\\nMPLWHXIZYE\\r\\nSRZMHMURVE\\r\\nMTEBBMRZYJ\\r\\nJPJIFOLZYM\\r\\n', 'output': ['919913906\\r\\n']}, {'input': '40 7\\r\\nPNTVVER\\r\\nPAHTQDR\\r\\nRXMJVAS\\r\\nVIQNLYC\\r\\nILPUSVX\\r\\nYJOXQDJ\\r\\nSEFODTO\\r\\nOTJMREL\\r\\nLIQRZGD\\r\\nLBJJPOR\\r\\nRUTYHQO\\r\\nRIWEPBD\\r\\nKQUMFIB\\r\\nISTRRYH\\r\\nXBTOTGK\\r\\nRFQODEY\\r\\nHDSTZTP\\r\\nYCXFAGL\\r\\nAREGRFU\\r\\nLELZUYU\\r\\nGVABDKH\\r\\nFJAMMME\\r\\nACVULXE\\r\\nJHVPJAS\\r\\nAAQNMBX\\r\\nJJGUCXG\\r\\nOQATILQ\\r\\nNEOSHJM\\r\\nHFLWOFM\\r\\nICYEQHY\\r\\nFACGLYP\\r\\nPLLXJEQ\\r\\nDCHXYPB\\r\\nAGDDZJJ\\r\\nLSQRXTN\\r\\nHDQZXIY\\r\\nNAHDDWW\\r\\nQCMXRQN\\r\\nFDUDSZO\\r\\nHKBEVTW\\r\\n', 'output': ['206575993\\r\\n']}, {'input': '2 2\\r\\nAA\\r\\nBB\\r\\n', 'output': ['4\\r\\n']}, {'input': '1 10\\r\\nAAAAAAAAAA\\r\\n', 'output': ['1\\r\\n']}, {'input': '2 8\\r\\nAAAAAAAA\\r\\nBBBBBBBB\\r\\n', 'output': ['256\\r\\n']}, {'input': '10 10\\r\\nAAAAAAAAAA\\r\\nBBBBBBBBBB\\r\\nCCCCCCCCCC\\r\\nDDDDDDDDDD\\r\\nAAAAAAAAAA\\r\\nBBBBBBBBBB\\r\\nCCCCCCCCCC\\r\\nDDDDDDDDDD\\r\\nAAAAAAAAAA\\r\\nBBBBBBBBBB\\r\\n', 'output': ['1048576\\r\\n']}, {'input': '1 20\\r\\nAAAAAAAAAAAAAAAAAAAA\\r\\n', 'output': ['1\\r\\n']}, {'input': '20 1\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\n', 'output': ['7\\r\\n']}, {'input': '5 60\\r\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\\r\\nDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\\r\\nEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\\r\\n', 'output': ['449874206\\r\\n']}, {'input': '50 4\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\n', 'output': ['10000\\r\\n']}, {'input': '1 100\\r\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\n', 'output': ['2\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\n', 'output': ['14\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\nW\\r\\nX\\r\\nY\\r\\nZ\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\nW\\r\\nX\\r\\nY\\r\\nZ\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\nW\\r\\nX\\r\\nY\\r\\nZ\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\n', 'output': ['26\\r\\n']}]", "source_code": "\nimport java.util.*;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\npublic class Solution\n{\n    final static BigInteger MOD = BigInteger.valueOf(1000000007);\n    final static int MAX_LENGTH = 100;\n    \n    public static void main(String[] args) \n    {\n        BigInteger[][] table = new BigInteger[MAX_LENGTH][MAX_LENGTH];\n        for (int i = 0; i < table.length; i++)\n        {\n            for (int j = 0; j < table[i].length; j++)\n            {\n                table[i][j] = BigInteger.valueOf(0);\n            }\n        }\n        \n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int m = in.nextInt();\n        char[][] names = new char[n][m];\n        for (int i = 0; i < n; i++)\n        {\n            String name = in.next();\n            names[i] = name.toCharArray();\n        }\n        \n        for (int i = 0; i < n; i++)\n        {\n            char[] name = names[i];\n            for (int j = 0; j < name.length; j++)\n            {\n                table[j][name.length - 1 - j] = table[j][name.length - 1 - j].add(BigInteger.valueOf(1));\n            }\n        }\n        \n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < m - i; j++)\n            {\n                table[j][j + i] = table[j][j + i].multiply(table[i][m - j - 1]).mod(MOD);\n            }\n        }\n        \n        BigInteger ans = BigInteger.valueOf(0);\n        for (int j = 0; j < table[0].length; j++)\n        {\n            ans = ans.add(table[0][j]).mod(MOD);\n        }\n        \n        System.out.println(ans);\n        \n        in.close();\n    }\n}"}
{"src_uid": "a37df9b239a40473516d1525d56a0da7", "id": 71, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1400, "testcases": "[{'input': '2 3\\r\\nAAB\\r\\nBAA\\r\\n', 'output': ['4\\r\\n']}, {'input': '4 5\\r\\nABABA\\r\\nBCGDG\\r\\nAAAAA\\r\\nYABSA\\r\\n', 'output': ['216\\r\\n']}, {'input': '1 1\\r\\nE\\r\\n', 'output': ['1\\r\\n']}, {'input': '2 2\\r\\nNS\\r\\nPD\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 4\\r\\nPJKD\\r\\nNFJX\\r\\nFGFK\\r\\n', 'output': ['81\\r\\n']}, {'input': '4 5\\r\\nSXFMY\\r\\nATHLM\\r\\nKDDQW\\r\\nZWGDS\\r\\n', 'output': ['1024\\r\\n']}, {'input': '20 14\\r\\nJNFKBBBJYZHWQE\\r\\nLBOKZCPFNKDBJY\\r\\nXKNWGHQHIOXUPF\\r\\nDDNRUKVUGHWMXW\\r\\nMTIZFNAAFEAPHX\\r\\nIXBQOOHEULZYHU\\r\\nMRCSREUEOOMUUN\\r\\nHJTSQWKUFYZDQU\\r\\nGMCMUZCOPRVEIQ\\r\\nXBKKGGJECOBLTH\\r\\nXXHTLXCNJZJUAF\\r\\nVLJRKXXXWMTPKZ\\r\\nPTYMNPTBBCWKAD\\r\\nQYJGOBUBHMEDYE\\r\\nGTKUUVVNKAHTUI\\r\\nZNKXYZPCYLBZFP\\r\\nQCBLJTRMBDWNNE\\r\\nTDOKJOBKEOVNLZ\\r\\nFKZUITYAFJOQIM\\r\\nUWQNSGLXEEIRWF\\r\\n', 'output': ['515139391\\r\\n']}, {'input': '5 14\\r\\nAQRXUQQNSKZPGC\\r\\nDTTKSPFGGVCLPT\\r\\nVLZQWWESCHDTAZ\\r\\nCOKOWDWDRUOMHP\\r\\nXDTRBIZTTCIDGS\\r\\n', 'output': ['124999979\\r\\n']}, {'input': '9 23\\r\\nOILBYKHRGMPENVFNHLSIUOW\\r\\nLPJFHTUQUINAALRDGLSQUXR\\r\\nLYYJJEBNZATAFQWTDZSPUNZ\\r\\nHSJPIQKKWWERJZIEMLCZUKI\\r\\nOJYIEYDGPFWRHCMISJCCUEM\\r\\nLMGKZVFYIVDRTIHBWPCNUTG\\r\\nUBGGNCITVHAIPKXCLTSAULQ\\r\\nOWSAWUOXQDBSXXBHTLSXUVD\\r\\nUGQTIZQPBGMASRQPVPSFUWK\\r\\n', 'output': ['454717784\\r\\n']}, {'input': '25 4\\r\\nLVKG\\r\\nMICU\\r\\nZHKW\\r\\nLFGG\\r\\nOWQO\\r\\nLCQG\\r\\nLVXU\\r\\nOUKB\\r\\nLNQX\\r\\nZJTO\\r\\nOOQX\\r\\nLVQP\\r\\nMFQB\\r\\nMRQV\\r\\nOIQH\\r\\nOPXX\\r\\nXFKU\\r\\nFCQB\\r\\nZPKH\\r\\nLVCH\\r\\nNFCU\\r\\nOVQW\\r\\nOZKU\\r\\nLFHX\\r\\nLPXO\\r\\n', 'output': ['5733\\r\\n']}, {'input': '30 10\\r\\nUTNTGOKZYJ\\r\\nQHOUHNYZVW\\r\\nLTVGHJRZVW\\r\\nMZHYHOLZYJ\\r\\nERYEUEPZYE\\r\\nUZDBFTURYJ\\r\\nRVSMQTIZGW\\r\\nWDJQHMIRYY\\r\\nKCORHQPZYE\\r\\nRRPLFOZZVY\\r\\nJTXMFNNNYJ\\r\\nMVTGGOZZVV\\r\\nEHAFFNUZVF\\r\\nLBRNWJZNYE\\r\\nJVMOHTPZYJ\\r\\nWTARFJLZVV\\r\\nLVJCWOURVW\\r\\nLCLQFJYRVV\\r\\nQVBVGNJRYF\\r\\nNTZGHOLRYE\\r\\nMGQKHOUPYJ\\r\\nRRSSBXPZYJ\\r\\nRYCRGTLZYJ\\r\\nJRDEGNKRVW\\r\\nRZKFGHYRVG\\r\\nMDJBFNIZYG\\r\\nMPLWHXIZYE\\r\\nSRZMHMURVE\\r\\nMTEBBMRZYJ\\r\\nJPJIFOLZYM\\r\\n', 'output': ['919913906\\r\\n']}, {'input': '40 7\\r\\nPNTVVER\\r\\nPAHTQDR\\r\\nRXMJVAS\\r\\nVIQNLYC\\r\\nILPUSVX\\r\\nYJOXQDJ\\r\\nSEFODTO\\r\\nOTJMREL\\r\\nLIQRZGD\\r\\nLBJJPOR\\r\\nRUTYHQO\\r\\nRIWEPBD\\r\\nKQUMFIB\\r\\nISTRRYH\\r\\nXBTOTGK\\r\\nRFQODEY\\r\\nHDSTZTP\\r\\nYCXFAGL\\r\\nAREGRFU\\r\\nLELZUYU\\r\\nGVABDKH\\r\\nFJAMMME\\r\\nACVULXE\\r\\nJHVPJAS\\r\\nAAQNMBX\\r\\nJJGUCXG\\r\\nOQATILQ\\r\\nNEOSHJM\\r\\nHFLWOFM\\r\\nICYEQHY\\r\\nFACGLYP\\r\\nPLLXJEQ\\r\\nDCHXYPB\\r\\nAGDDZJJ\\r\\nLSQRXTN\\r\\nHDQZXIY\\r\\nNAHDDWW\\r\\nQCMXRQN\\r\\nFDUDSZO\\r\\nHKBEVTW\\r\\n', 'output': ['206575993\\r\\n']}, {'input': '2 2\\r\\nAA\\r\\nBB\\r\\n', 'output': ['4\\r\\n']}, {'input': '1 10\\r\\nAAAAAAAAAA\\r\\n', 'output': ['1\\r\\n']}, {'input': '2 8\\r\\nAAAAAAAA\\r\\nBBBBBBBB\\r\\n', 'output': ['256\\r\\n']}, {'input': '10 10\\r\\nAAAAAAAAAA\\r\\nBBBBBBBBBB\\r\\nCCCCCCCCCC\\r\\nDDDDDDDDDD\\r\\nAAAAAAAAAA\\r\\nBBBBBBBBBB\\r\\nCCCCCCCCCC\\r\\nDDDDDDDDDD\\r\\nAAAAAAAAAA\\r\\nBBBBBBBBBB\\r\\n', 'output': ['1048576\\r\\n']}, {'input': '1 20\\r\\nAAAAAAAAAAAAAAAAAAAA\\r\\n', 'output': ['1\\r\\n']}, {'input': '20 1\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\n', 'output': ['7\\r\\n']}, {'input': '5 60\\r\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\\r\\nDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\\r\\nEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\\r\\n', 'output': ['449874206\\r\\n']}, {'input': '50 4\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\n', 'output': ['10000\\r\\n']}, {'input': '1 100\\r\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\n', 'output': ['2\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\n', 'output': ['14\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\nW\\r\\nX\\r\\nY\\r\\nZ\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\nW\\r\\nX\\r\\nY\\r\\nZ\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\nW\\r\\nX\\r\\nY\\r\\nZ\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\n', 'output': ['26\\r\\n']}]", "source_code": "import java.util.*;\npublic class tryit{\n    public static void main(String[] args) {\n        String[] a = new String[101];\n        int b[][] = new int [101][101], n, m;\n        int sum = 0, x = 1;\n        Scanner in = new Scanner(System.in);\n        n = in.nextInt();\n        m = in.nextInt();\n        for(int i = 1 ; i <= n ; i++) {\n            a[i] = in.next();\n        }\n        for(int i = 1 ; i <= n ; i++) {\n            for(int j = 1 ; j <= n ; j++) {\n                for(int k = 1 ; k <= m ; k++) {\n                    if(a[i].charAt(k-1) > a[j].charAt(k-1)) {\n                        b[i][j] = b[j][i] = 1;\n                    }\n                    else b[i][j] = b[j][i] = 0;\n                }\n            }\n        }\n        for(int i = 1 ; i <= n ; i++) {\n            sum = sum + b[i][1];\n            x = x * (n - i);\n        }\n        for(int i = 2 ; i <= n ; i++) {\n            for(int j = 1 ; j < i ; j++) {\n                sum = sum + b[j][i];\n                x = x * (n - i);\n            }\n        }\n        sum = sum * x;\n        System.out.println((sum % 1000000007));\n    }\n}"}
{"src_uid": "a37df9b239a40473516d1525d56a0da7", "id": 71, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1400, "testcases": "[{'input': '2 3\\r\\nAAB\\r\\nBAA\\r\\n', 'output': ['4\\r\\n']}, {'input': '4 5\\r\\nABABA\\r\\nBCGDG\\r\\nAAAAA\\r\\nYABSA\\r\\n', 'output': ['216\\r\\n']}, {'input': '1 1\\r\\nE\\r\\n', 'output': ['1\\r\\n']}, {'input': '2 2\\r\\nNS\\r\\nPD\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 4\\r\\nPJKD\\r\\nNFJX\\r\\nFGFK\\r\\n', 'output': ['81\\r\\n']}, {'input': '4 5\\r\\nSXFMY\\r\\nATHLM\\r\\nKDDQW\\r\\nZWGDS\\r\\n', 'output': ['1024\\r\\n']}, {'input': '20 14\\r\\nJNFKBBBJYZHWQE\\r\\nLBOKZCPFNKDBJY\\r\\nXKNWGHQHIOXUPF\\r\\nDDNRUKVUGHWMXW\\r\\nMTIZFNAAFEAPHX\\r\\nIXBQOOHEULZYHU\\r\\nMRCSREUEOOMUUN\\r\\nHJTSQWKUFYZDQU\\r\\nGMCMUZCOPRVEIQ\\r\\nXBKKGGJECOBLTH\\r\\nXXHTLXCNJZJUAF\\r\\nVLJRKXXXWMTPKZ\\r\\nPTYMNPTBBCWKAD\\r\\nQYJGOBUBHMEDYE\\r\\nGTKUUVVNKAHTUI\\r\\nZNKXYZPCYLBZFP\\r\\nQCBLJTRMBDWNNE\\r\\nTDOKJOBKEOVNLZ\\r\\nFKZUITYAFJOQIM\\r\\nUWQNSGLXEEIRWF\\r\\n', 'output': ['515139391\\r\\n']}, {'input': '5 14\\r\\nAQRXUQQNSKZPGC\\r\\nDTTKSPFGGVCLPT\\r\\nVLZQWWESCHDTAZ\\r\\nCOKOWDWDRUOMHP\\r\\nXDTRBIZTTCIDGS\\r\\n', 'output': ['124999979\\r\\n']}, {'input': '9 23\\r\\nOILBYKHRGMPENVFNHLSIUOW\\r\\nLPJFHTUQUINAALRDGLSQUXR\\r\\nLYYJJEBNZATAFQWTDZSPUNZ\\r\\nHSJPIQKKWWERJZIEMLCZUKI\\r\\nOJYIEYDGPFWRHCMISJCCUEM\\r\\nLMGKZVFYIVDRTIHBWPCNUTG\\r\\nUBGGNCITVHAIPKXCLTSAULQ\\r\\nOWSAWUOXQDBSXXBHTLSXUVD\\r\\nUGQTIZQPBGMASRQPVPSFUWK\\r\\n', 'output': ['454717784\\r\\n']}, {'input': '25 4\\r\\nLVKG\\r\\nMICU\\r\\nZHKW\\r\\nLFGG\\r\\nOWQO\\r\\nLCQG\\r\\nLVXU\\r\\nOUKB\\r\\nLNQX\\r\\nZJTO\\r\\nOOQX\\r\\nLVQP\\r\\nMFQB\\r\\nMRQV\\r\\nOIQH\\r\\nOPXX\\r\\nXFKU\\r\\nFCQB\\r\\nZPKH\\r\\nLVCH\\r\\nNFCU\\r\\nOVQW\\r\\nOZKU\\r\\nLFHX\\r\\nLPXO\\r\\n', 'output': ['5733\\r\\n']}, {'input': '30 10\\r\\nUTNTGOKZYJ\\r\\nQHOUHNYZVW\\r\\nLTVGHJRZVW\\r\\nMZHYHOLZYJ\\r\\nERYEUEPZYE\\r\\nUZDBFTURYJ\\r\\nRVSMQTIZGW\\r\\nWDJQHMIRYY\\r\\nKCORHQPZYE\\r\\nRRPLFOZZVY\\r\\nJTXMFNNNYJ\\r\\nMVTGGOZZVV\\r\\nEHAFFNUZVF\\r\\nLBRNWJZNYE\\r\\nJVMOHTPZYJ\\r\\nWTARFJLZVV\\r\\nLVJCWOURVW\\r\\nLCLQFJYRVV\\r\\nQVBVGNJRYF\\r\\nNTZGHOLRYE\\r\\nMGQKHOUPYJ\\r\\nRRSSBXPZYJ\\r\\nRYCRGTLZYJ\\r\\nJRDEGNKRVW\\r\\nRZKFGHYRVG\\r\\nMDJBFNIZYG\\r\\nMPLWHXIZYE\\r\\nSRZMHMURVE\\r\\nMTEBBMRZYJ\\r\\nJPJIFOLZYM\\r\\n', 'output': ['919913906\\r\\n']}, {'input': '40 7\\r\\nPNTVVER\\r\\nPAHTQDR\\r\\nRXMJVAS\\r\\nVIQNLYC\\r\\nILPUSVX\\r\\nYJOXQDJ\\r\\nSEFODTO\\r\\nOTJMREL\\r\\nLIQRZGD\\r\\nLBJJPOR\\r\\nRUTYHQO\\r\\nRIWEPBD\\r\\nKQUMFIB\\r\\nISTRRYH\\r\\nXBTOTGK\\r\\nRFQODEY\\r\\nHDSTZTP\\r\\nYCXFAGL\\r\\nAREGRFU\\r\\nLELZUYU\\r\\nGVABDKH\\r\\nFJAMMME\\r\\nACVULXE\\r\\nJHVPJAS\\r\\nAAQNMBX\\r\\nJJGUCXG\\r\\nOQATILQ\\r\\nNEOSHJM\\r\\nHFLWOFM\\r\\nICYEQHY\\r\\nFACGLYP\\r\\nPLLXJEQ\\r\\nDCHXYPB\\r\\nAGDDZJJ\\r\\nLSQRXTN\\r\\nHDQZXIY\\r\\nNAHDDWW\\r\\nQCMXRQN\\r\\nFDUDSZO\\r\\nHKBEVTW\\r\\n', 'output': ['206575993\\r\\n']}, {'input': '2 2\\r\\nAA\\r\\nBB\\r\\n', 'output': ['4\\r\\n']}, {'input': '1 10\\r\\nAAAAAAAAAA\\r\\n', 'output': ['1\\r\\n']}, {'input': '2 8\\r\\nAAAAAAAA\\r\\nBBBBBBBB\\r\\n', 'output': ['256\\r\\n']}, {'input': '10 10\\r\\nAAAAAAAAAA\\r\\nBBBBBBBBBB\\r\\nCCCCCCCCCC\\r\\nDDDDDDDDDD\\r\\nAAAAAAAAAA\\r\\nBBBBBBBBBB\\r\\nCCCCCCCCCC\\r\\nDDDDDDDDDD\\r\\nAAAAAAAAAA\\r\\nBBBBBBBBBB\\r\\n', 'output': ['1048576\\r\\n']}, {'input': '1 20\\r\\nAAAAAAAAAAAAAAAAAAAA\\r\\n', 'output': ['1\\r\\n']}, {'input': '20 1\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\n', 'output': ['7\\r\\n']}, {'input': '5 60\\r\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\\r\\nDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\\r\\nEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\\r\\n', 'output': ['449874206\\r\\n']}, {'input': '50 4\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\n', 'output': ['10000\\r\\n']}, {'input': '1 100\\r\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\n', 'output': ['2\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\n', 'output': ['14\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\nW\\r\\nX\\r\\nY\\r\\nZ\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\nW\\r\\nX\\r\\nY\\r\\nZ\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\nW\\r\\nX\\r\\nY\\r\\nZ\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\n', 'output': ['26\\r\\n']}]", "source_code": "import java.io.*;\n\npublic class Main {\n\tprivate static final int mod = 1000000007;\n\tprivate static final int max_n = 100;\n\tprivate static final int max_m = 100;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tchar[][] names = new char[max_n][max_m];\n\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\tString[] input = reader.readLine().split(\" \");\n\t\tint n = Integer.parseInt(input[0]);\n\t\tint m = Integer.parseInt(input[1]);\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tnames[i] = reader.readLine().toCharArray();\n\t\treader.close();\n\n\t\tint[] counts = new int[max_m];\n\t\tfor (int i = 0; i < max_m; i++)\n\t\t\tcounts[i] = -1;\n\t\tint result = 1;\n\n\t\tfor (int k = 1; k <= m; k++) {\n\t\t\tfor (int j = 0; j < n - 1; j++)\n\t\t\t\tfor (int i = j + 1; i < n; i++)\n\t\t\t\t\tif (names[i][k - 1] < names[j][k - 1]) {\n\t\t\t\t\t\tchar temp = names[i][k - 1];\n\t\t\t\t\t\tnames[i][k - 1] = names[j][k - 1];\n\t\t\t\t\t\tnames[j][k - 1] = temp;\n\t\t\t\t\t}\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tif (counts[names[i][k - 1] - 'A'] == -1)\n\t\t\t\t\tcounts[names[i][k - 1] - 'A'] = i;\n\t\t\tint temp = 0;\n\t\t\tfor (int i = 0; i < max_m; i++) {\n\t\t\t\tif (counts[i] == -1)\n\t\t\t\t\ttemp = 0;\n\t\t\t\telse\n\t\t\t\t\ttemp = counts[i] + 1;\n\t\t\t\tcounts[i] = -1;\n\t\t\t\tfor (int j = 0; j < temp; j++)\n\t\t\t\t\tresult = (result * (n - j)) % mod;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(result);\n\t}\n}\n"}
{"src_uid": "6aa83c2f6e095848bc63aba7d013aa58", "id": 72, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1200, "testcases": "[{'input': ['C E G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['C# B F\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A B H\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G H E\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D# B G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D# B F#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['F H E\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['B F# G\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F# H C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C# F C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G# C# E\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D# H G#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['C F A\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['H E G#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['G D# B\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['E C G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['G# C# F\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D# C G#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['C# F B\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D# C G\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A D F\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['F# H D\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D A F\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D A F#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['C# B F\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A C F\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D F# H\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['H G# D#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A D F#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['H E G#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D# B F#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D# H F#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['A D F#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['B G D#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['E A C#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D H G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['H D F#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['G D# C\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['H D G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['E C G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D# A E\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A F E\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C E F\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A B C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['E F D#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C G# G#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F D# G#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['B G D#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['E E G#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A G H\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F E A\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['D B E\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G# C# D\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['D# D# F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['H B G\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['D C B\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['D B B\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C A H\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F# H F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A F F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C D C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G F# A\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C C# D\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C A E\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A H B\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['B E F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G# G# A\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['B C# C#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C G D#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['C B D#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F H F\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['E G# C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F# F# F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F C F\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A F D\\r\\n'], 'output': ['minor\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class MyClass {\n\t\n\tprivate static String[] input = new String[3];\n\tprivate static int[] values = {0,0,0,0,0,0};\n\tprivate static int[] offset = {0,0,0,0,0,0};\n\t\n\tprivate static int getOffset(int index) {\n\t\tint sum = 0;\n\t\tint max = 11;\n\t\tfor(int i = 0; i < index; i++) {\n\t\t\tif(offset[i] == 0) {\n\t\t\t\tsum += values[i];\n\t\t\t} else {\n\t\t\t\tmax = max - offset[i];\n\t\t\t}\n\t\t}\n\t\tif(sum == 0 || sum == 3 || sum == 6 || sum == 7 || sum == 10) {\n\t\t\toffset[index] = 1;\n\t\t} else {\n\t\t\toffset[index] = 2;\n\t\t}\n\t\treturn max;\n\t}\n\t\n\tprivate static boolean check() {\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < 3; i++) {\n\t\t\tsum += values[i];\n\t\t}\n\t\t\n\t\tif(sum == 2 || sum == 5 || sum == 8 || sum == 11) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tpublic static void main(String args[]) {\n\t\tScanner s = new Scanner(System.in);\n\t\t\n\t\tfor(int i = 0; i < 3; i++) {\n\t\t\tinput[i] = s.next();\n\t\t}\n\t\t\n\t\tfor(int i = 0; i < 3; i++) {\n\t\t\tif(input[i].equals(\"C\")) {\n\t\t\t\tvalues[i] = 0;\n\t\t\t} else if(input[i].equals(\"C#\")) {\n\t\t\t\tvalues[i] = 1;\n\t\t\t} else if(input[i].equals(\"D\")) {\n\t\t\t\tvalues[i] = 2;\n\t\t\t} else if(input[i].equals(\"D#\")) {\n\t\t\t\tvalues[i] = 3;\n\t\t\t} else if(input[i].equals(\"E\")) {\n\t\t\t\tvalues[i] = 4;\n\t\t\t} else if(input[i].equals(\"F\")) {\n\t\t\t\tvalues[i] = 5;\n\t\t\t} else if(input[i].equals(\"F#\")) {\n\t\t\t\tvalues[i] = 6;\n\t\t\t} else if(input[i].equals(\"G\")) {\n\t\t\t\tvalues[i] = 7;\n\t\t\t} else if(input[i].equals(\"G#\")) {\n\t\t\t\tvalues[i] = 8;\n\t\t\t} else if(input[i].equals(\"A\")) {\n\t\t\t\tvalues[i] = 9;\n\t\t\t} else if(input[i].equals(\"H\")) {\n\t\t\t\tvalues[i] = 10;\n\t\t\t} else if(input[i].equals(\"B\")) {\n\t\t\t\tvalues[i] = 11;\n\t\t\t}\n\t\t}\n\t\t\n\t\tint max1 = getOffset(0);\n\t\tint max2 = getOffset(1);\n\t\tint max3 = getOffset(2);\n\t\t\n\t\tint min1 = 12;\n\t\tint min2 = 12;\n\t\tint min3 = 12;\n\t\t\n\t\tfor(int i = 0; i < 3; i++) {\n\t\t\tif(offset[i] == 1) {\n\t\t\t\tmin1 = Math.min(values[i],min1);\n\t\t\t\tmax2 = Math.max(values[i],max2);\n\t\t\t} else {\n\t\t\t\tmin2 = Math.min(values[i],min2);\n\t\t\t\tmax3 = Math.max(values[i],max3);\n\t\t\t}\n\t\t}\n"}
{"src_uid": "6aa83c2f6e095848bc63aba7d013aa58", "id": 72, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1200, "testcases": "[{'input': ['C E G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['C# B F\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A B H\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G H E\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D# B G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D# B F#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['F H E\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['B F# G\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F# H C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C# F C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G# C# E\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D# H G#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['C F A\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['H E G#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['G D# B\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['E C G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['G# C# F\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D# C G#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['C# F B\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D# C G\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A D F\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['F# H D\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D A F\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D A F#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['C# B F\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A C F\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D F# H\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['H G# D#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A D F#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['H E G#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D# B F#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D# H F#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['A D F#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['B G D#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['E A C#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D H G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['H D F#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['G D# C\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['H D G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['E C G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D# A E\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A F E\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C E F\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A B C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['E F D#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C G# G#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F D# G#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['B G D#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['E E G#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A G H\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F E A\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['D B E\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G# C# D\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['D# D# F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['H B G\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['D C B\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['D B B\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C A H\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F# H F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A F F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C D C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G F# A\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C C# D\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C A E\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A H B\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['B E F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G# G# A\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['B C# C#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C G D#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['C B D#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F H F\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['E G# C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F# F# F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F C F\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A F D\\r\\n'], 'output': ['minor\\r\\n']}]", "source_code": "import java.util.Scanner;\n\npublic class chord {\n\tpublic static void main(String[] args){\n\t\tScanner console = new Scanner(System.in);\n\t\tString first = console.next();\n\t\tString second = console.next();\n\t\tString third = console.next();\n\t\tif(third.equals(\"H\")) third = \"C\";\n\t\tif( (second.equals(\"F\") && third.equals(\"C\")) || (second.equals(\"F#\") && third.equals(\"C#\")) || (second.equals(\"E\") && third.equals(\"D\")) || (second.equals(\"D#\") && third.equals(\"E\")) ){\n\t\t\tSystem.out.print(\"minor\");\n\t\t}else if(second.equals(\"E\") && third.equals(\"G\")){\n\t\t\tSystem.out.print(\"major\");\n\t\t}else{\n\t\t\tSystem.out.print(\"strange\");\n\t\t}\n\t}\n}"}
{"src_uid": "6aa83c2f6e095848bc63aba7d013aa58", "id": 72, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1200, "testcases": "[{'input': ['C E G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['C# B F\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A B H\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G H E\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D# B G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D# B F#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['F H E\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['B F# G\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F# H C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C# F C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G# C# E\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D# H G#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['C F A\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['H E G#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['G D# B\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['E C G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['G# C# F\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D# C G#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['C# F B\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D# C G\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A D F\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['F# H D\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D A F\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D A F#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['C# B F\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A C F\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D F# H\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['H G# D#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A D F#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['H E G#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D# B F#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D# H F#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['A D F#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['B G D#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['E A C#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D H G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['H D F#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['G D# C\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['H D G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['E C G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D# A E\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A F E\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C E F\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A B C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['E F D#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C G# G#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F D# G#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['B G D#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['E E G#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A G H\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F E A\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['D B E\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G# C# D\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['D# D# F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['H B G\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['D C B\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['D B B\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C A H\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F# H F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A F F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C D C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G F# A\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C C# D\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C A E\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A H B\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['B E F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G# G# A\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['B C# C#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C G D#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['C B D#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F H F\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['E G# C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F# F# F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F C F\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A F D\\r\\n'], 'output': ['minor\\r\\n']}]", "source_code": "import java.util.*;\nimport java.math.*;\n\npublic class Chord{\n    public static void main(String[] args){\n        Scanner in=new Scanner(System.in);\n        String a=in.next();\n        String b=in.next();\n        String c=in.next();\n        String ans[][]={{a,b,c},{b,c,a},{c,a,b}};\n        for(int i=0;i<3;i++)\n            if(ans[2][0].equals(ans[i][1]) && ans[i][1].equals(ans[i][2]) && ans[i][2].equals(ans[i][0]))\n                if(((ans[i][0].compareTo(ans[i][1])<=0 && ans[i][1].compareTo(ans[i][2])<=0) || (ans[i][0].compareTo(ans[i][1])>=0 && ans[i][1].compareTo(ans[i][2])>=0)) \n                && (ans[i][2].compareTo(ans[i][0])-ans[i][1].compareTo(ans[i][0])==7))\n                    System.out.println(\"major\");\n                else if(((ans[i][0].compareTo(ans[i][1])>=0 && ans[i][1].compareTo(ans[i][2])>=0) || (ans[i][0].compareTo(ans[i][1])<=0 && ans[i][1].compareTo(ans[i][2])<=0)) \n                && (ans[i][2].compareTo(ans[i][0])-ans[i][1].compareTo(ans[i][0])==3))\n                    System.out.println(\"minor\");\n                else\n                    System.out.println(\"strange\");\n    }\n}"}
{"src_uid": "6aa83c2f6e095848bc63aba7d013aa58", "id": 72, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1200, "testcases": "[{'input': ['C E G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['C# B F\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A B H\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G H E\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D# B G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D# B F#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['F H E\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['B F# G\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F# H C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C# F C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G# C# E\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D# H G#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['C F A\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['H E G#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['G D# B\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['E C G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['G# C# F\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D# C G#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['C# F B\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D# C G\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A D F\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['F# H D\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D A F\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D A F#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['C# B F\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A C F\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D F# H\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['H G# D#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A D F#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['H E G#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D# B F#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D# H F#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['A D F#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['B G D#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['E A C#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D H G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['H D F#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['G D# C\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['H D G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['E C G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D# A E\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A F E\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C E F\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A B C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['E F D#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C G# G#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F D# G#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['B G D#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['E E G#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A G H\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F E A\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['D B E\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G# C# D\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['D# D# F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['H B G\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['D C B\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['D B B\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C A H\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F# H F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A F F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C D C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G F# A\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C C# D\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C A E\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A H B\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['B E F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G# G# A\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['B C# C#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C G D#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['C B D#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F H F\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['E G# C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F# F# F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F C F\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A F D\\r\\n'], 'output': ['minor\\r\\n']}]", "source_code": "\nimport java.io.*;\nimport java.util.*;\n\n/* Mighty Ahmad */\n/* Mighty Ahmad */\npublic class Solution {\n    private static final String NOTE_H = \"H\";\n\n    private static String note = NOTE_H;\n\n    private static void changeNote(String n) {\n        note = n;\n    }\n\n    private static String getNote() {\n        return note;\n    }\n\n    private static boolean isMajor(int[] chord) {\n        // TODO Auto-generated method stub\n        return (chord[1] - chord[0] == 4 && chord[2] - chord[1] == 3);\n    }\n\n    private static boolean isMinor(int[] chord) {\n        // TODO Auto-generated method stub\n        return (chord[1] - chord[0] == 3 && chord[2] - chord[1] == 4);\n    }\n\n    private static boolean isStrange(int[] chord) {\n        return!(isMajor(chord) || isMinor(chord));\n    }\n\n    private static boolean isMajorStrict(int[] chord) {\n        return (chord[1] - chord[0] == 4 && chord[2] - chord[1] == 3\n                &&!isLast(chord[1]) &&!isFirst(chord[1]));\n    }\n\n    private static boolean isMinorStrict(int[] chord) {\n        return (chord[1] - chord[0] == 3 && chord[2] - chord[1] == 4\n                &&!isFirst(chord[2]) &&!isLast(chord[2]));\n    }\n\n    private static boolean isStrangeStrict(int[] chord) {\n        return!(isMajorStrict(chord) || isMinorStrict(chord));\n    }\n\n    private static boolean isFirst(int chord) {\n        return chord == 0;\n    }\n\n    private static boolean isLast(int chord) {\n        return chord == 7;\n    }\n\n    private static void printClass(boolean isMajor, boolean isMinor,\n            boolean isStrange) {\n        if (isMajor) {\n            System.out.println(\"major\");\n        } else if (isMinor) {\n            System.out.println(\"minor\");\n        } else if (isStrange) {\n            System.out.println(\"strange\");\n        } else {\n            System.out.println(\"normal\");\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        // TODO Auto-generated method stub\n        Reader.init(System.in);\n        String[] input = Reader.next().split(\" \");\n        int[] chord = new int[input.length];\n        changeNote(input[0]);\n        for (int i = 0; i < chord.length; ++i) {\n            changeNote(input[i]);\n            chord[i] = getNote().hashCode();\n        }\n        printClass(isMajor(chord), isMinor(chord), isStrange(chord));\n        changeNote(NOTE_H);\n    }\n\n    static class Reader {\n        static void init(InputStream in) {\n            scanner = new Scanner(in);\n        }\n\n        static Scanner scanner;\n\n        static String next() throws IOException {\n            while (!scanner.hasNextLine()) {\n                byte[] buffer = new byte[1024];\n                scanner.read(buffer);\n            }\n            return scanner.nextLine();\n        }\n    }\n}\n"}
{"src_uid": "6aa83c2f6e095848bc63aba7d013aa58", "id": 72, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1200, "testcases": "[{'input': ['C E G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['C# B F\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A B H\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G H E\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D# B G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D# B F#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['F H E\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['B F# G\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F# H C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C# F C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G# C# E\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D# H G#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['C F A\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['H E G#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['G D# B\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['E C G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['G# C# F\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D# C G#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['C# F B\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D# C G\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A D F\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['F# H D\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D A F\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D A F#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['C# B F\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A C F\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D F# H\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['H G# D#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A D F#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['H E G#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D# B F#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['D# H F#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['A D F#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['B G D#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['E A C#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D H G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['H D F#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['G D# C\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['H D G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['E C G\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['D# A E\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A F E\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C E F\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A B C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['E F D#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C G# G#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F D# G#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['B G D#\\r\\n'], 'output': ['major\\r\\n']}, {'input': ['E E G#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A G H\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F E A\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['D B E\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G# C# D\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['D# D# F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['H B G\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['D C B\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['D B B\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C A H\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F# H F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A F F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C D C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G F# A\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C C# D\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C A E\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['A H B\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['B E F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['G# G# A\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['B C# C#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['C G D#\\r\\n'], 'output': ['minor\\r\\n']}, {'input': ['C B D#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F H F\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['E G# C\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F# F# F#\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['F C F\\r\\n'], 'output': ['strange\\r\\n']}, {'input': ['A F D\\r\\n'], 'output': ['minor\\r\\n']}]", "source_code": "import java.util.*;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class JavaApplication13 {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String s = in.nextLine();\n        String t[] = s.split(\" \");\n        String ans = \"strange\";\n        if (t[0].equals(t[2]))\n            ans = \"strange\";\n        else if (t[1].equals(t[2]))\n            ans = \"strange\";\n        else\n        {\n            if (t[2].equals(\"C\"))\n                if (t[0].equals(\"H\"))\n                    ans = \"minor\";\n                else if (t[1].equals(\"H\"))\n                    ans = \"major\";\n                else\n                    ans = \"strange\";\n            if (t[2].equals(\"D\"))\n            {\n                if (t[1].equals(t[0]) || t[1].equals(\"H\"))\n                {\n                    ans = \"major\";\n                }\n                else if (t[0].equals(\"H\"))\n                    ans = \"strange\";\n                else\n                    ans = \"minor\";\n            }\n            if (t[2].equals(\"E\"))\n            {\n                if (t[0].equals(\"H\"))\n                    ans = \"minor\";\n                else if (t[1].equals(t[0]))\n                    ans = \"strange\";\n                else\n                    ans = \"major\";\n            }\n            if (t[2].equals(\"F\"))\n            {\n                if (t[0].equals(t[1]) || t[1].equals(t[0]) || t[1].equals(\"H\"))\n                {\n                    ans = \"strange\";\n                }\n                else if (t[0].equals(\"H\"))\n                    ans = \"minor\";\n                else if (t[1].equals(\"H\"))\n                    ans = \"major\";\n            }\n            if (t[2].equals(\"F#\"))\n            {\n                if (t[0].equals(\"H\"))\n                    ans = \"major\";\n                else if (t[1].equals(\"H\"))\n                    ans = \"strange\";\n                else\n                    ans = \"minor\";\n            }\n            if (t[2].equals(\"G\"))\n            {\n                if (t[1].equals(t[0]) || t[1].equals(\"H\"))\n                {\n                    ans = \"major\";\n                }\n                else if (t[0].equals(\"H\"))\n                    ans = \"strange\";\n                else\n                    ans = \"minor\";\n            }\n            if (t[2].equals(\"G#\"))\n            {\n                if (t[0].equals(t[1]) || t[1].equals(\"H\"))\n                {\n                    ans = \"strange\";\n                }\n                else if (t[0].equals(\"H\"))\n                    ans = \"major\";\n                else if (t[1].equals(\"H\"))\n                    ans = \"strange\";\n            }\n            if (t[2].equals(\"A\"))\n            {\n                if (t[0].equals(t[1]) || t[1].equals(t[0]) || t[1].equals(\"H\"))\n                {\n                    ans = \"strange\";\n                }\n                else if (t[0].equals(\"H\"))\n                    ans = \"minor\";\n                else if (t[1].equals(\"H\"))\n                    ans = \"major\";\n            }\n            if (t[2].equals(\"B\"))\n            {\n                if (t[1].equals(t[0]) || t[1].equals(\"H\"))\n                {\n                    ans = \"minor\";\n                }\n                else if (t[0].equals(\"H\"))\n                    ans = \"major\";\n                else\n                    ans = \"strange\";\n            }\n            if (t[2].equals(\"H\"))\n                if (t[1].equals(t[0]))\n                    ans = \"strange\";\n                else\n                    ans = \"major\";\n        }\n        System.out.println(ans);\n    }\n}\n"}
{"src_uid": "33b73fd9e7f19894ea08e98b790d07f1", "id": 73, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '40047\\r\\n', 'output': ['NO']}, {'input': '7747774\\r\\n', 'output': ['YES']}, {'input': '1000000000000000000\\r\\n', 'output': ['NO']}, {'input': '7\\r\\n', 'output': ['NO']}, {'input': '4\\r\\n', 'output': ['NO']}, {'input': '474404774\\r\\n', 'output': ['NO']}, {'input': '4744000695826\\r\\n', 'output': ['YES']}, {'input': '10000000004744744\\r\\n', 'output': ['YES']}, {'input': '446486416781684178\\r\\n', 'output': ['YES']}, {'input': '999999999\\r\\n', 'output': ['NO']}, {'input': '7777\\r\\n', 'output': ['YES']}, {'input': '87414417444\\r\\n', 'output': ['NO']}, {'input': '111222333444555667\\r\\n', 'output': ['YES']}, {'input': '1\\r\\n', 'output': ['NO']}, {'input': '4700\\r\\n', 'output': ['NO']}, {'input': '3794555488744477\\r\\n', 'output': ['NO']}, {'input': '444444444444444444\\r\\n', 'output': ['NO']}, {'input': '474447447774444774\\r\\n', 'output': ['NO']}, {'input': '777777777777777\\r\\n', 'output': ['NO']}, {'input': '34777745021000000\\r\\n', 'output': ['NO']}, {'input': '963\\r\\n', 'output': ['NO']}, {'input': '855474448854788540\\r\\n', 'output': ['NO']}, {'input': '999999999999994744\\r\\n', 'output': ['YES']}, {'input': '400000000474\\r\\n', 'output': ['YES']}, {'input': '123456789123456789\\r\\n', 'output': ['YES']}, {'input': '740577777584945874\\r\\n', 'output': ['NO']}, {'input': '7777777\\r\\n', 'output': ['YES']}, {'input': '4444000111222333\\r\\n', 'output': ['YES']}, {'input': '9847745885202111\\r\\n', 'output': ['YES']}, {'input': '123456000000\\r\\n', 'output': ['NO']}, {'input': '4744447444444\\r\\n', 'output': ['NO']}, {'input': '7477\\r\\n', 'output': ['YES']}, {'input': '4747477\\r\\n', 'output': ['YES']}, {'input': '777777777444444444\\r\\n', 'output': ['NO']}]", "source_code": "import java.io.*;\nimport java.math.BigInteger;\nimport java.util.*;\n\npublic class Solution {\n    static long lucky = 4;\n    static long start = 4;\n    static long len = 4;\n    static String s = \"\";\n    static BigInteger n;\n    static BigInteger[][] dp = new BigInteger[11][2];\n\n    public static void main(String[] args) throws IOException{\n        n = new BigInteger(readLine());\n        for (int i = 0; i < 11; i++)\n            for (int j = 0; j < 2; j++)\n                dp[i][j] = BigInteger.ZERO;\n        dp[0][0] = BigInteger.ONE;\n        dp[0][1] = n;\n        for (int i = 1; i <= 10; i++){\n            for (int j = 0; j < 2; j++){\n                if (j == 0){\n                    dp[i][0] = dp[i - 1][1].divide(BigInteger.valueOf(len));\n                    if (dp[i - 1][1].mod(BigInteger.valueOf(len)).compareTo(BigInteger.ZERO) == 0){\n                        dp[i][1] = n;\n                    }\n                    else {\n                        dp[i][1] = n;\n                        dp[i][1] = dp[i][1].divide(BigInteger.valueOf(len));\n                    }\n                }\n                else {\n                    dp[i][0] = dp[i - 1][0].divide(BigInteger.valueOf(lucky));\n                    if (dp[i - 1][0].mod(BigInteger.valueOf(lucky)).compareTo(BigInteger.ZERO) == 0){\n                        dp[i][1] = BigInteger.ZERO;\n                    }\n                    else {\n                        dp[i][1] = n;\n                        dp[i][1] = dp[i][1].divide(BigInteger.valueOf(lucky));\n                    }\n                }\n            }\n            if (i!= 10){\n                lucky *= 10;\n                len *= 10;\n                start *= 10;\n            }\n        }\n\n        if (dp[10][1].equals(BigInteger.ZERO))\n            if (dp[10][0].mod(BigInteger.valueOf(4)).compareTo(BigInteger.ZERO) == 0)\n                System.out.print(\"YES\");\n            else\n                System.out.print(\"NO\");\n        else {\n            if (dp[10][1].mod(BigInteger.valueOf(4)).compareTo(BigInteger.ZERO) == 0){\n                System.out.print(\"NO\");\n                return;\n            }\n            if (dp[10][0].mod(BigInteger.valueOf(4)).compareTo(BigInteger.ZERO) == 0){\n                System.out.print(\"YES\");\n                return;\n            }\n            else {\n                if (dp[10][0].divide(BigInteger.valueOf(4)).mod(BigInteger.valueOf(7)).compareTo(BigInteger.ZERO) == 0)\n                    System.out.print(\"YES\");\n                else\n                    System.out.print(\"NO\");\n            }\n        }\n    }\n\n    private static String readLine() throws IOException {\n        InputStream inputStream = System.in;\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        return bufferedReader.readLine();\n    }\n\n}"}
{"src_uid": "33b73fd9e7f19894ea08e98b790d07f1", "id": 73, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '40047\\r\\n', 'output': ['NO']}, {'input': '7747774\\r\\n', 'output': ['YES']}, {'input': '1000000000000000000\\r\\n', 'output': ['NO']}, {'input': '7\\r\\n', 'output': ['NO']}, {'input': '4\\r\\n', 'output': ['NO']}, {'input': '474404774\\r\\n', 'output': ['NO']}, {'input': '4744000695826\\r\\n', 'output': ['YES']}, {'input': '10000000004744744\\r\\n', 'output': ['YES']}, {'input': '446486416781684178\\r\\n', 'output': ['YES']}, {'input': '999999999\\r\\n', 'output': ['NO']}, {'input': '7777\\r\\n', 'output': ['YES']}, {'input': '87414417444\\r\\n', 'output': ['NO']}, {'input': '111222333444555667\\r\\n', 'output': ['YES']}, {'input': '1\\r\\n', 'output': ['NO']}, {'input': '4700\\r\\n', 'output': ['NO']}, {'input': '3794555488744477\\r\\n', 'output': ['NO']}, {'input': '444444444444444444\\r\\n', 'output': ['NO']}, {'input': '474447447774444774\\r\\n', 'output': ['NO']}, {'input': '777777777777777\\r\\n', 'output': ['NO']}, {'input': '34777745021000000\\r\\n', 'output': ['NO']}, {'input': '963\\r\\n', 'output': ['NO']}, {'input': '855474448854788540\\r\\n', 'output': ['NO']}, {'input': '999999999999994744\\r\\n', 'output': ['YES']}, {'input': '400000000474\\r\\n', 'output': ['YES']}, {'input': '123456789123456789\\r\\n', 'output': ['YES']}, {'input': '740577777584945874\\r\\n', 'output': ['NO']}, {'input': '7777777\\r\\n', 'output': ['YES']}, {'input': '4444000111222333\\r\\n', 'output': ['YES']}, {'input': '9847745885202111\\r\\n', 'output': ['YES']}, {'input': '123456000000\\r\\n', 'output': ['NO']}, {'input': '4744447444444\\r\\n', 'output': ['NO']}, {'input': '7477\\r\\n', 'output': ['YES']}, {'input': '4747477\\r\\n', 'output': ['YES']}, {'input': '777777777444444444\\r\\n', 'output': ['NO']}]", "source_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class HelloWorld {\n\n    public static void main(String[] args) {\n        Scanner in=new Scanner(System.in);\n        String s=in.next();\n        char[] n=s.toCharArray();\n        long c4=0,c7=0;\n        int c=0;\n        for(int i=0;i<n.length;i++){\n            if(n[i]=='4'){\n                c4++;\n                c++;\n            }\n            if(n[i]=='7'){\n                c7++;\n                c++;\n            }\n        }\n        //System.out.println(c4+\" \"+c7+\" \"+c);\n        if(c==c4 || c==c7)\n            System.out.println(\"YES\");\n        else\n            System.out.println(\"NO\");\n    }\n}\n"}
{"src_uid": "33b73fd9e7f19894ea08e98b790d07f1", "id": 73, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '40047\\r\\n', 'output': ['NO']}, {'input': '7747774\\r\\n', 'output': ['YES']}, {'input': '1000000000000000000\\r\\n', 'output': ['NO']}, {'input': '7\\r\\n', 'output': ['NO']}, {'input': '4\\r\\n', 'output': ['NO']}, {'input': '474404774\\r\\n', 'output': ['NO']}, {'input': '4744000695826\\r\\n', 'output': ['YES']}, {'input': '10000000004744744\\r\\n', 'output': ['YES']}, {'input': '446486416781684178\\r\\n', 'output': ['YES']}, {'input': '999999999\\r\\n', 'output': ['NO']}, {'input': '7777\\r\\n', 'output': ['YES']}, {'input': '87414417444\\r\\n', 'output': ['NO']}, {'input': '111222333444555667\\r\\n', 'output': ['YES']}, {'input': '1\\r\\n', 'output': ['NO']}, {'input': '4700\\r\\n', 'output': ['NO']}, {'input': '3794555488744477\\r\\n', 'output': ['NO']}, {'input': '444444444444444444\\r\\n', 'output': ['NO']}, {'input': '474447447774444774\\r\\n', 'output': ['NO']}, {'input': '777777777777777\\r\\n', 'output': ['NO']}, {'input': '34777745021000000\\r\\n', 'output': ['NO']}, {'input': '963\\r\\n', 'output': ['NO']}, {'input': '855474448854788540\\r\\n', 'output': ['NO']}, {'input': '999999999999994744\\r\\n', 'output': ['YES']}, {'input': '400000000474\\r\\n', 'output': ['YES']}, {'input': '123456789123456789\\r\\n', 'output': ['YES']}, {'input': '740577777584945874\\r\\n', 'output': ['NO']}, {'input': '7777777\\r\\n', 'output': ['YES']}, {'input': '4444000111222333\\r\\n', 'output': ['YES']}, {'input': '9847745885202111\\r\\n', 'output': ['YES']}, {'input': '123456000000\\r\\n', 'output': ['NO']}, {'input': '4744447444444\\r\\n', 'output': ['NO']}, {'input': '7477\\r\\n', 'output': ['YES']}, {'input': '4747477\\r\\n', 'output': ['YES']}, {'input': '777777777444444444\\r\\n', 'output': ['NO']}]", "source_code": "import java.util.*;\nimport java.math.BigInteger;\n\npublic class Solution {\n  public static void main(String[] args){\n    Scanner in = new Scanner(System.in);\n    String s = in.next();\n    \n    BigInteger n = new BigInteger(s);\n    \n    int len = s.length();\n    int count = 0;\n    \n    for(int i=0; i<len; i++){\n      if(s.charAt(i) == '4' || s.charAt(i) == '7')\n        count++;\n    }\n    \n    if(count == 0){\n      System.out.println(\"NO\");\n    }\n    else if(count % 7 == 0 || count % 4 == 0){\n      System.out.println(\"YES\");\n    }\n    else{\n      System.out.println(\"NO\");\n    }\n  }\n}\n"}
{"src_uid": "33b73fd9e7f19894ea08e98b790d07f1", "id": 73, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '40047\\r\\n', 'output': ['NO']}, {'input': '7747774\\r\\n', 'output': ['YES']}, {'input': '1000000000000000000\\r\\n', 'output': ['NO']}, {'input': '7\\r\\n', 'output': ['NO']}, {'input': '4\\r\\n', 'output': ['NO']}, {'input': '474404774\\r\\n', 'output': ['NO']}, {'input': '4744000695826\\r\\n', 'output': ['YES']}, {'input': '10000000004744744\\r\\n', 'output': ['YES']}, {'input': '446486416781684178\\r\\n', 'output': ['YES']}, {'input': '999999999\\r\\n', 'output': ['NO']}, {'input': '7777\\r\\n', 'output': ['YES']}, {'input': '87414417444\\r\\n', 'output': ['NO']}, {'input': '111222333444555667\\r\\n', 'output': ['YES']}, {'input': '1\\r\\n', 'output': ['NO']}, {'input': '4700\\r\\n', 'output': ['NO']}, {'input': '3794555488744477\\r\\n', 'output': ['NO']}, {'input': '444444444444444444\\r\\n', 'output': ['NO']}, {'input': '474447447774444774\\r\\n', 'output': ['NO']}, {'input': '777777777777777\\r\\n', 'output': ['NO']}, {'input': '34777745021000000\\r\\n', 'output': ['NO']}, {'input': '963\\r\\n', 'output': ['NO']}, {'input': '855474448854788540\\r\\n', 'output': ['NO']}, {'input': '999999999999994744\\r\\n', 'output': ['YES']}, {'input': '400000000474\\r\\n', 'output': ['YES']}, {'input': '123456789123456789\\r\\n', 'output': ['YES']}, {'input': '740577777584945874\\r\\n', 'output': ['NO']}, {'input': '7777777\\r\\n', 'output': ['YES']}, {'input': '4444000111222333\\r\\n', 'output': ['YES']}, {'input': '9847745885202111\\r\\n', 'output': ['YES']}, {'input': '123456000000\\r\\n', 'output': ['NO']}, {'input': '4744447444444\\r\\n', 'output': ['NO']}, {'input': '7477\\r\\n', 'output': ['YES']}, {'input': '4747477\\r\\n', 'output': ['YES']}, {'input': '777777777444444444\\r\\n', 'output': ['NO']}]", "source_code": "import java.util.Scanner;\n\npublic class NearlyLucky {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String n = in.next();\n        String lucky = \"74\";\n        for(int i=0; i<n.length(); i++){\n            if(n.charAt(i)=='4' || n.charAt(i)=='7'){\n                lucky += n.charAt(i);\n            }\n        }\n        //System.out.println(lucky);\n        int c = 0;\n        for(int i=0; i<lucky.length(); i++){\n            if(lucky.charAt(i)=='7') c++;\n        }\n        if(c==0){\n            System.out.println(\"NO\");\n        }else{\n            String k = lucky;\n            for(int i=2; i<=c+1; i++){\n                if(i%2==0){\n                    if(i/2==c){\n                        if(k.charAt(k.length()-1)=='4'){\n                            k = k.substring(0, k.length()-1);\n                        }\n                    }else{\n                        k += \"7\";\n                    }\n                }else{\n                    if(k.charAt(k.length()-1)=='7'){\n                        k = k.substring(0, k.length()-1);\n                    }\n                }\n            }\n            //System.out.println(k);\n            if(k.length()==1){\n                System.out.println(\"YES\");\n            }else{\n                System.out.println(\"NO\");\n            }\n        }\n\n    }\n}"}
{"src_uid": "33b73fd9e7f19894ea08e98b790d07f1", "id": 73, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '40047\\r\\n', 'output': ['NO']}, {'input': '7747774\\r\\n', 'output': ['YES']}, {'input': '1000000000000000000\\r\\n', 'output': ['NO']}, {'input': '7\\r\\n', 'output': ['NO']}, {'input': '4\\r\\n', 'output': ['NO']}, {'input': '474404774\\r\\n', 'output': ['NO']}, {'input': '4744000695826\\r\\n', 'output': ['YES']}, {'input': '10000000004744744\\r\\n', 'output': ['YES']}, {'input': '446486416781684178\\r\\n', 'output': ['YES']}, {'input': '999999999\\r\\n', 'output': ['NO']}, {'input': '7777\\r\\n', 'output': ['YES']}, {'input': '87414417444\\r\\n', 'output': ['NO']}, {'input': '111222333444555667\\r\\n', 'output': ['YES']}, {'input': '1\\r\\n', 'output': ['NO']}, {'input': '4700\\r\\n', 'output': ['NO']}, {'input': '3794555488744477\\r\\n', 'output': ['NO']}, {'input': '444444444444444444\\r\\n', 'output': ['NO']}, {'input': '474447447774444774\\r\\n', 'output': ['NO']}, {'input': '777777777777777\\r\\n', 'output': ['NO']}, {'input': '34777745021000000\\r\\n', 'output': ['NO']}, {'input': '963\\r\\n', 'output': ['NO']}, {'input': '855474448854788540\\r\\n', 'output': ['NO']}, {'input': '999999999999994744\\r\\n', 'output': ['YES']}, {'input': '400000000474\\r\\n', 'output': ['YES']}, {'input': '123456789123456789\\r\\n', 'output': ['YES']}, {'input': '740577777584945874\\r\\n', 'output': ['NO']}, {'input': '7777777\\r\\n', 'output': ['YES']}, {'input': '4444000111222333\\r\\n', 'output': ['YES']}, {'input': '9847745885202111\\r\\n', 'output': ['YES']}, {'input': '123456000000\\r\\n', 'output': ['NO']}, {'input': '4744447444444\\r\\n', 'output': ['NO']}, {'input': '7477\\r\\n', 'output': ['YES']}, {'input': '4747477\\r\\n', 'output': ['YES']}, {'input': '777777777444444444\\r\\n', 'output': ['NO']}]", "source_code": "import java.util.Scanner;\n\npublic class A904 {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String s = in.next();\n        int cnt = 0;\n        for(char c : s.toCharArray()) {\n            if(c == '4' || c == '7') {\n                ++cnt;\n            }\n        }\n        System.out.println((cnt == 4 || cnt == 7)? \"YES\" : \"NO\");\n    }\n}\n"}
{"src_uid": "639b8b8d0dc42df46b139f0aeb3a7a0a", "id": 74, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1000, "testcases": "[{'input': '047\\r\\n', 'output': ['4']}, {'input': '16\\r\\n', 'output': ['-1']}, {'input': '472747\\r\\n', 'output': ['7']}, {'input': '1925\\r\\n', 'output': ['-1']}, {'input': '5486846414848445484\\r\\n', 'output': ['4']}, {'input': '516160414\\r\\n', 'output': ['4']}, {'input': '9458569865994896\\r\\n', 'output': ['4']}, {'input': '94894948577777777884888\\r\\n', 'output': ['7']}, {'input': '00000\\r\\n', 'output': ['-1']}, {'input': '9589\\r\\n', 'output': ['-1']}, {'input': '7665711\\r\\n', 'output': ['7']}, {'input': '538772857\\r\\n', 'output': ['7']}, {'input': '8679647744\\r\\n', 'output': ['4']}, {'input': '23607019991994\\r\\n', 'output': ['4']}, {'input': '86145305734278927901987281894864719533015270066521\\r\\n', 'output': ['7']}, {'input': '22438808523154336905543301642540261833729318191\\r\\n', 'output': ['4']}, {'input': '290732082244359495795943967215788554387079\\r\\n', 'output': ['7']}, {'input': '6363333480463521971676988087733137609715\\r\\n', 'output': ['7']}, {'input': '637789221789855555993957058\\r\\n', 'output': ['7']}, {'input': '11536708648794535307468278326553811\\r\\n', 'output': ['7']}, {'input': '619433861636130069773\\r\\n', 'output': ['7']}, {'input': '7\\r\\n', 'output': ['7']}, {'input': '00000000000000000000000000000000000000000000000000\\r\\n', 'output': ['-1']}, {'input': '0000000000000000000000000000000000000047\\r\\n', 'output': ['4']}, {'input': '8175012266795100056032281135654854227489558885698\\r\\n', 'output': ['4']}, {'input': '8862708665262955384044574268728167940741129\\r\\n', 'output': ['4']}, {'input': '538772857\\r\\n', 'output': ['7']}, {'input': '94872076199824813574576121510803\\r\\n', 'output': ['7']}, {'input': '44101164480392494025995467\\r\\n', 'output': ['4']}, {'input': '0445460407410702955646485\\r\\n', 'output': ['4']}, {'input': '91076008557028243309\\r\\n', 'output': ['7']}, {'input': '33120039\\r\\n', 'output': ['-1']}, {'input': '4\\r\\n', 'output': ['4']}, {'input': '74747474747474747474747474747474747474747474747474\\r\\n', 'output': ['4']}, {'input': '74747474747474747474747774747474747474747474747474\\r\\n', 'output': ['7']}, {'input': '74747474747474747474747474747474744474747474747474\\r\\n', 'output': ['4']}, {'input': '47474747474747474747474747474747474747474747474747\\r\\n', 'output': ['4']}, {'input': '40\\r\\n', 'output': ['4']}, {'input': '07\\r\\n', 'output': ['7']}, {'input': '007\\r\\n', 'output': ['7']}, {'input': '44\\r\\n', 'output': ['4']}, {'input': '74\\r\\n', 'output': ['4']}]", "source_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class HelloWorld {\n\n    \n    public static void main(String[] args) throws IOException{\n        try(Input reader = new StandardInput()){\n            String s = reader.next();\n            int max = 0;\n            int len = 0;\n            int index = 0;\n            for(int i = 0 ; i < s.length() ; ++i){\n                for(int j = i ; j < s.length() ; ++j){\n                    String check = s.substring(i, j + 1);\n                    int c = 0 ;\n                    for(int z = 0 ; z < check.length() ; ++z){\n                        if(check.charAt(z) == '4' || check.charAt(z) == '7')\n                            ++c;\n                    }\n                    if(check.length()!= 1 && c == check.length() && c > max){\n                        max = c ;\n                        len = check.length();\n                        index = i ;\n                    }\n                }\n            }\n            if(len == 0)\n                System.out.println(\"-1\");\n            else\n                System.out.println(s.substring(index, index + len));\n        }\n    }\n    \n    private interface Input extends Closeable{\n        String next() throws IOException;\n        default int nextInt() throws IOException{\n            return Integer.parseInt(next());\n        }\n        \n        default long nextLong() throws IOException{\n            return Long.parseLong(next());\n        }\n        \n        default int[] readIntArray() throws IOException{\n            return readIntArray(nextInt());\n        }\n        \n        default int[] readIntArray(int size) throws IOException{\n            int[] array = new int[size];\n            for(int i = 0 ; i < array.length ; ++i)\n                array[i] = nextInt();\n            return array;\n        }\n        \n        default long[] readLongArray(int size) throws IOException{\n            long[] array = new long[size];\n            for(int i = 0 ; i < array.length ; ++i)\n                array[i] = nextLong();\n            return array;\n        }\n        \n    }\n    \n    private static class StandardInput implements Input{\n        private final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        @Override\n        public void close() throws IOException {\n            reader.close();\n        }\n\n        @Override\n        public String next() throws IOException {\n            return reader.readLine();\n        }\n        \n    }\n}"}
{"src_uid": "639b8b8d0dc42df46b139f0aeb3a7a0a", "id": 74, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1000, "testcases": "[{'input': '047\\r\\n', 'output': ['4']}, {'input': '16\\r\\n', 'output': ['-1']}, {'input': '472747\\r\\n', 'output': ['7']}, {'input': '1925\\r\\n', 'output': ['-1']}, {'input': '5486846414848445484\\r\\n', 'output': ['4']}, {'input': '516160414\\r\\n', 'output': ['4']}, {'input': '9458569865994896\\r\\n', 'output': ['4']}, {'input': '94894948577777777884888\\r\\n', 'output': ['7']}, {'input': '00000\\r\\n', 'output': ['-1']}, {'input': '9589\\r\\n', 'output': ['-1']}, {'input': '7665711\\r\\n', 'output': ['7']}, {'input': '538772857\\r\\n', 'output': ['7']}, {'input': '8679647744\\r\\n', 'output': ['4']}, {'input': '23607019991994\\r\\n', 'output': ['4']}, {'input': '86145305734278927901987281894864719533015270066521\\r\\n', 'output': ['7']}, {'input': '22438808523154336905543301642540261833729318191\\r\\n', 'output': ['4']}, {'input': '290732082244359495795943967215788554387079\\r\\n', 'output': ['7']}, {'input': '6363333480463521971676988087733137609715\\r\\n', 'output': ['7']}, {'input': '637789221789855555993957058\\r\\n', 'output': ['7']}, {'input': '11536708648794535307468278326553811\\r\\n', 'output': ['7']}, {'input': '619433861636130069773\\r\\n', 'output': ['7']}, {'input': '7\\r\\n', 'output': ['7']}, {'input': '00000000000000000000000000000000000000000000000000\\r\\n', 'output': ['-1']}, {'input': '0000000000000000000000000000000000000047\\r\\n', 'output': ['4']}, {'input': '8175012266795100056032281135654854227489558885698\\r\\n', 'output': ['4']}, {'input': '8862708665262955384044574268728167940741129\\r\\n', 'output': ['4']}, {'input': '538772857\\r\\n', 'output': ['7']}, {'input': '94872076199824813574576121510803\\r\\n', 'output': ['7']}, {'input': '44101164480392494025995467\\r\\n', 'output': ['4']}, {'input': '0445460407410702955646485\\r\\n', 'output': ['4']}, {'input': '91076008557028243309\\r\\n', 'output': ['7']}, {'input': '33120039\\r\\n', 'output': ['-1']}, {'input': '4\\r\\n', 'output': ['4']}, {'input': '74747474747474747474747474747474747474747474747474\\r\\n', 'output': ['4']}, {'input': '74747474747474747474747774747474747474747474747474\\r\\n', 'output': ['7']}, {'input': '74747474747474747474747474747474744474747474747474\\r\\n', 'output': ['4']}, {'input': '47474747474747474747474747474747474747474747474747\\r\\n', 'output': ['4']}, {'input': '40\\r\\n', 'output': ['4']}, {'input': '07\\r\\n', 'output': ['7']}, {'input': '007\\r\\n', 'output': ['7']}, {'input': '44\\r\\n', 'output': ['4']}, {'input': '74\\r\\n', 'output': ['4']}]", "source_code": "import java.util.*;\n\npublic class test {\n \n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tString s = in.next(), res=\"-1\";\n\t\tint count =0, max_count = 0;\n\t\tint min_length = 100;\n\t\tint lucky_digit[] = new int [2];\n\t\tlucky_digit[0] = s.indexOf('4');\n\t\tlucky_digit[1] = s.indexOf('7');\n\t\tif(lucky_digit[0] >= 0) count ++;\n\t\tif(lucky_digit[1] >= 0) count ++;\n\t\t\n\t\tif(count == 2){\n\t\t\tmin_length =  Math.min(Math.min(lucky_digit[0],lucky_digit[1])+4,s.length());\n\t\t\tmax_count = 1;\n\t\t\tfor(int i = 0 ; i < s.length() - min_length ; i++){\n\t\t\t\tString curr_str = s.substring(i, i + min_length);\n\t\t\t\tif(curr_str.charAt(0) == '4' || curr_str.charAt(0) == '7'){\n\t\t\t\t\tcount = 0 ;\n\t\t\t\t\tfor(int j = 0 ; j < min_length ; j++){\n\t\t\t\t\t\tif(curr_str.charAt(j) == '4' || curr_str.charAt(j) == '7') count ++ ;\n\t\t\t\t\t}\n\t\t\t\t\tif(count == min_length){\n\t\t\t\t\t\tmax_count++;\n\t\t\t\t\t}else if(max_count > 0){\n\t\t\t\t\t\tmax_count--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(max_count > 0){\n\t\t\t\tres = s.substring(lucky_digit[0],lucky_digit[0]+4);\n\t\t\t}else if(max_count < 0){\n\t\t\t\tres = s.substring(lucky_digit[1],lucky_digit[1]+3);\n\t\t\t}\n\t\t}else if(count == 1){\n\t\t\tres = s.charAt(0) == '4'? \"4\" : \"7\";\n\t\t}\n\t\tSystem.out.println(res);\n\t}\n}\n"}
{"src_uid": "639b8b8d0dc42df46b139f0aeb3a7a0a", "id": 74, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1000, "testcases": "[{'input': '047\\r\\n', 'output': ['4']}, {'input': '16\\r\\n', 'output': ['-1']}, {'input': '472747\\r\\n', 'output': ['7']}, {'input': '1925\\r\\n', 'output': ['-1']}, {'input': '5486846414848445484\\r\\n', 'output': ['4']}, {'input': '516160414\\r\\n', 'output': ['4']}, {'input': '9458569865994896\\r\\n', 'output': ['4']}, {'input': '94894948577777777884888\\r\\n', 'output': ['7']}, {'input': '00000\\r\\n', 'output': ['-1']}, {'input': '9589\\r\\n', 'output': ['-1']}, {'input': '7665711\\r\\n', 'output': ['7']}, {'input': '538772857\\r\\n', 'output': ['7']}, {'input': '8679647744\\r\\n', 'output': ['4']}, {'input': '23607019991994\\r\\n', 'output': ['4']}, {'input': '86145305734278927901987281894864719533015270066521\\r\\n', 'output': ['7']}, {'input': '22438808523154336905543301642540261833729318191\\r\\n', 'output': ['4']}, {'input': '290732082244359495795943967215788554387079\\r\\n', 'output': ['7']}, {'input': '6363333480463521971676988087733137609715\\r\\n', 'output': ['7']}, {'input': '637789221789855555993957058\\r\\n', 'output': ['7']}, {'input': '11536708648794535307468278326553811\\r\\n', 'output': ['7']}, {'input': '619433861636130069773\\r\\n', 'output': ['7']}, {'input': '7\\r\\n', 'output': ['7']}, {'input': '00000000000000000000000000000000000000000000000000\\r\\n', 'output': ['-1']}, {'input': '0000000000000000000000000000000000000047\\r\\n', 'output': ['4']}, {'input': '8175012266795100056032281135654854227489558885698\\r\\n', 'output': ['4']}, {'input': '8862708665262955384044574268728167940741129\\r\\n', 'output': ['4']}, {'input': '538772857\\r\\n', 'output': ['7']}, {'input': '94872076199824813574576121510803\\r\\n', 'output': ['7']}, {'input': '44101164480392494025995467\\r\\n', 'output': ['4']}, {'input': '0445460407410702955646485\\r\\n', 'output': ['4']}, {'input': '91076008557028243309\\r\\n', 'output': ['7']}, {'input': '33120039\\r\\n', 'output': ['-1']}, {'input': '4\\r\\n', 'output': ['4']}, {'input': '74747474747474747474747474747474747474747474747474\\r\\n', 'output': ['4']}, {'input': '74747474747474747474747774747474747474747474747474\\r\\n', 'output': ['7']}, {'input': '74747474747474747474747474747474744474747474747474\\r\\n', 'output': ['4']}, {'input': '47474747474747474747474747474747474747474747474747\\r\\n', 'output': ['4']}, {'input': '40\\r\\n', 'output': ['4']}, {'input': '07\\r\\n', 'output': ['7']}, {'input': '007\\r\\n', 'output': ['7']}, {'input': '44\\r\\n', 'output': ['4']}, {'input': '74\\r\\n', 'output': ['4']}]", "source_code": "//package main;\n\nimport java.util.*;\n\npublic class LuckyNumber {\n    \n    static int MAX=50;\n    \n    static void solve() {\n        String s = sc.next();\n        int [] dp=new int [MAX+1];\n        for ( int i = 0 ; i <= MAX ; i++ ) {\n            for ( int j = 0 ; j <= MAX/2 ; j++ ) {\n                if ( s.indexOf( \"\"+4+j )!= -1 && s.indexOf( \"\"+4+j+\"7\" )!= -1 ) {\n                    dp[i] = Math.max( dp[i], dp[j] + (s.indexOf( \"\"+4+j+\"7\" )-s.indexOf( \"\"+4+j ))+2 );\n                }\n                if ( s.indexOf( \"\"+7+j )!= -1 && s.indexOf( \"\"+7+j+\"4\" )!= -1 ) {\n                    dp[i] = Math.max( dp[i], dp[j] + (s.indexOf( \"\"+7+j+\"4\" )-s.indexOf( \"\"+7+j ))+2 );\n                }\n            }\n        }\n        int cnt = 0, ind = 0 ;\n        for ( int i = MAX-1 ; i > 0 ; i-- ) {\n            if ( dp[i] > cnt ) {\n                cnt = dp[i];\n                ind = i;\n            }\n        }\n        if ( ind == 0 ) System.out.println( \"-1\" );\n        else {\n            if ( s.indexOf( \"\"+ind ) == s.lastIndexOf( \"\"+ind ) ) {\n                System.out.println( ind );\n            } else {\n                System.out.println( \"\"+4+ind );\n            }\n        }\n    }\n    \n    static java.util.Scanner sc = new java.util.Scanner( System.in );\n    \n    public static void main(String[] args){\n        solve();\n        sc.close();\n    }\n}"}
{"src_uid": "639b8b8d0dc42df46b139f0aeb3a7a0a", "id": 74, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1000, "testcases": "[{'input': '047\\r\\n', 'output': ['4']}, {'input': '16\\r\\n', 'output': ['-1']}, {'input': '472747\\r\\n', 'output': ['7']}, {'input': '1925\\r\\n', 'output': ['-1']}, {'input': '5486846414848445484\\r\\n', 'output': ['4']}, {'input': '516160414\\r\\n', 'output': ['4']}, {'input': '9458569865994896\\r\\n', 'output': ['4']}, {'input': '94894948577777777884888\\r\\n', 'output': ['7']}, {'input': '00000\\r\\n', 'output': ['-1']}, {'input': '9589\\r\\n', 'output': ['-1']}, {'input': '7665711\\r\\n', 'output': ['7']}, {'input': '538772857\\r\\n', 'output': ['7']}, {'input': '8679647744\\r\\n', 'output': ['4']}, {'input': '23607019991994\\r\\n', 'output': ['4']}, {'input': '86145305734278927901987281894864719533015270066521\\r\\n', 'output': ['7']}, {'input': '22438808523154336905543301642540261833729318191\\r\\n', 'output': ['4']}, {'input': '290732082244359495795943967215788554387079\\r\\n', 'output': ['7']}, {'input': '6363333480463521971676988087733137609715\\r\\n', 'output': ['7']}, {'input': '637789221789855555993957058\\r\\n', 'output': ['7']}, {'input': '11536708648794535307468278326553811\\r\\n', 'output': ['7']}, {'input': '619433861636130069773\\r\\n', 'output': ['7']}, {'input': '7\\r\\n', 'output': ['7']}, {'input': '00000000000000000000000000000000000000000000000000\\r\\n', 'output': ['-1']}, {'input': '0000000000000000000000000000000000000047\\r\\n', 'output': ['4']}, {'input': '8175012266795100056032281135654854227489558885698\\r\\n', 'output': ['4']}, {'input': '8862708665262955384044574268728167940741129\\r\\n', 'output': ['4']}, {'input': '538772857\\r\\n', 'output': ['7']}, {'input': '94872076199824813574576121510803\\r\\n', 'output': ['7']}, {'input': '44101164480392494025995467\\r\\n', 'output': ['4']}, {'input': '0445460407410702955646485\\r\\n', 'output': ['4']}, {'input': '91076008557028243309\\r\\n', 'output': ['7']}, {'input': '33120039\\r\\n', 'output': ['-1']}, {'input': '4\\r\\n', 'output': ['4']}, {'input': '74747474747474747474747474747474747474747474747474\\r\\n', 'output': ['4']}, {'input': '74747474747474747474747774747474747474747474747474\\r\\n', 'output': ['7']}, {'input': '74747474747474747474747474747474744474747474747474\\r\\n', 'output': ['4']}, {'input': '47474747474747474747474747474747474747474747474747\\r\\n', 'output': ['4']}, {'input': '40\\r\\n', 'output': ['4']}, {'input': '07\\r\\n', 'output': ['7']}, {'input': '007\\r\\n', 'output': ['7']}, {'input': '44\\r\\n', 'output': ['4']}, {'input': '74\\r\\n', 'output': ['4']}]", "source_code": "import java.io.*;\nimport java.util.*;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\npublic class Solution {\n\n \n    static class MyComparator implements Comparator<String> {\n        @Override\n        public int compare(String x, String y) {\n            return x.compareTo(y);\n        }\n    }\n \n    public static void main(String[] args) throws IOException{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String s = br.readLine(), str = \"\";\n        String min = \"1000\";\n        for(int i = 0; i < s.length() - 1; i++) {\n            for(int j = i + 1; j < s.length(); j++) {\n                str = s.substring(i,j+1);\n                if((str.contains(\"4\") || str.contains(\"7\")) && (!str.contains(\"0\")) && (str.compareTo(min) < 0))\n                    min = str;\n            }\n        }\n        if(!min.equals(\"1000\"))\n            System.out.print(min);\n        else\n            System.out.print(\"-1\");\n    }\n}"}
{"src_uid": "639b8b8d0dc42df46b139f0aeb3a7a0a", "id": 74, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1000, "testcases": "[{'input': '047\\r\\n', 'output': ['4']}, {'input': '16\\r\\n', 'output': ['-1']}, {'input': '472747\\r\\n', 'output': ['7']}, {'input': '1925\\r\\n', 'output': ['-1']}, {'input': '5486846414848445484\\r\\n', 'output': ['4']}, {'input': '516160414\\r\\n', 'output': ['4']}, {'input': '9458569865994896\\r\\n', 'output': ['4']}, {'input': '94894948577777777884888\\r\\n', 'output': ['7']}, {'input': '00000\\r\\n', 'output': ['-1']}, {'input': '9589\\r\\n', 'output': ['-1']}, {'input': '7665711\\r\\n', 'output': ['7']}, {'input': '538772857\\r\\n', 'output': ['7']}, {'input': '8679647744\\r\\n', 'output': ['4']}, {'input': '23607019991994\\r\\n', 'output': ['4']}, {'input': '86145305734278927901987281894864719533015270066521\\r\\n', 'output': ['7']}, {'input': '22438808523154336905543301642540261833729318191\\r\\n', 'output': ['4']}, {'input': '290732082244359495795943967215788554387079\\r\\n', 'output': ['7']}, {'input': '6363333480463521971676988087733137609715\\r\\n', 'output': ['7']}, {'input': '637789221789855555993957058\\r\\n', 'output': ['7']}, {'input': '11536708648794535307468278326553811\\r\\n', 'output': ['7']}, {'input': '619433861636130069773\\r\\n', 'output': ['7']}, {'input': '7\\r\\n', 'output': ['7']}, {'input': '00000000000000000000000000000000000000000000000000\\r\\n', 'output': ['-1']}, {'input': '0000000000000000000000000000000000000047\\r\\n', 'output': ['4']}, {'input': '8175012266795100056032281135654854227489558885698\\r\\n', 'output': ['4']}, {'input': '8862708665262955384044574268728167940741129\\r\\n', 'output': ['4']}, {'input': '538772857\\r\\n', 'output': ['7']}, {'input': '94872076199824813574576121510803\\r\\n', 'output': ['7']}, {'input': '44101164480392494025995467\\r\\n', 'output': ['4']}, {'input': '0445460407410702955646485\\r\\n', 'output': ['4']}, {'input': '91076008557028243309\\r\\n', 'output': ['7']}, {'input': '33120039\\r\\n', 'output': ['-1']}, {'input': '4\\r\\n', 'output': ['4']}, {'input': '74747474747474747474747474747474747474747474747474\\r\\n', 'output': ['4']}, {'input': '74747474747474747474747774747474747474747474747474\\r\\n', 'output': ['7']}, {'input': '74747474747474747474747474747474744474747474747474\\r\\n', 'output': ['4']}, {'input': '47474747474747474747474747474747474747474747474747\\r\\n', 'output': ['4']}, {'input': '40\\r\\n', 'output': ['4']}, {'input': '07\\r\\n', 'output': ['7']}, {'input': '007\\r\\n', 'output': ['7']}, {'input': '44\\r\\n', 'output': ['4']}, {'input': '74\\r\\n', 'output': ['4']}]", "source_code": "import java.util.*;\n\npublic class Solution {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String s = in.next();\n        s = s + \"0\";\n        String[] ans = {\"-1\", \"\"};\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '7' || s.charAt(i) == '4') {\n                for (int j = i; j < s.length(); j++) {\n                    String temp = \"\";\n                    for (int k = i; k <= j; k++) {\n                        temp = temp + s.charAt(k);\n                    }\n                    if (temp.length() > 1 &&!temp.startsWith(\"0\")) {\n                        int c = 0;\n                        for (int l = 0; l < temp.length(); l++) {\n                            if (temp.charAt(l) == '4')\n                                c++;\n                        }\n                        for (int l = 0; l < temp.length(); l++) {\n                            if (temp.charAt(l) == '7')\n                                c++;\n                        }\n                        if (c == temp.length() && temp.compareTo(ans[1]) < 0) {\n                            ans[1] = temp;\n                        }\n                    }\n                }\n            }\n        }\n        System.out.println(ans[1]);\n\n    }\n}\n"}
{"src_uid": "65fea461d3caa5a932d1e2c13e99a59e", "id": 75, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1100, "testcases": "[{'input': '5 50\\r\\n1 2 3 4 5\\r\\n', 'output': ['12.000000\\r\\n11.000000\\r\\n10.000000\\r\\n9.000000\\r\\n8.000000\\r\\n']}, {'input': '2 2\\r\\n1 100\\r\\n', 'output': ['-1\\r\\n']}, {'input': '2 2\\r\\n1 1\\r\\n', 'output': ['1.000000\\r\\n1.000000\\r\\n']}, {'input': '3 2\\r\\n1 2 1\\r\\n', 'output': ['1.000000\\r\\n0.000000\\r\\n1.000000\\r\\n']}, {'input': '3 5\\r\\n1 2 1\\r\\n', 'output': ['2.000000\\r\\n1.000000\\r\\n2.000000\\r\\n']}, {'input': '10 95\\r\\n0 0 0 0 0 1 1 1 1 1\\r\\n', 'output': ['10.000000\\r\\n10.000000\\r\\n10.000000\\r\\n10.000000\\r\\n10.000000\\r\\n9.000000\\r\\n9.000000\\r\\n9.000000\\r\\n9.000000\\r\\n9.000000\\r\\n']}, {'input': '3 5\\r\\n1 2 3\\r\\n', 'output': ['2.666667\\r\\n1.666667\\r\\n0.666667\\r\\n']}, {'input': '3 5\\r\\n1 3 2\\r\\n', 'output': ['2.666667\\r\\n0.666667\\r\\n1.666667\\r\\n']}, {'input': '3 5\\r\\n2 1 3\\r\\n', 'output': ['1.666667\\r\\n2.666667\\r\\n0.666667\\r\\n']}, {'input': '3 5\\r\\n2 3 1\\r\\n', 'output': ['1.666667\\r\\n0.666667\\r\\n2.666667\\r\\n']}, {'input': '3 5\\r\\n3 1 2\\r\\n', 'output': ['0.666667\\r\\n2.666667\\r\\n1.666667\\r\\n']}, {'input': '3 5\\r\\n3 2 1\\r\\n', 'output': ['0.666667\\r\\n1.666667\\r\\n2.666667\\r\\n']}, {'input': '2 1\\r\\n1 1\\r\\n', 'output': ['0.500000\\r\\n0.500000\\r\\n']}, {'input': '2 1\\r\\n2 2\\r\\n', 'output': ['0.500000\\r\\n0.500000\\r\\n']}, {'input': '3 2\\r\\n2 1 2\\r\\n', 'output': ['0.333333\\r\\n1.333333\\r\\n0.333333\\r\\n']}, {'input': '3 3\\r\\n2 2 1\\r\\n', 'output': ['0.666667\\r\\n0.666667\\r\\n1.666667\\r\\n']}, {'input': '3 3\\r\\n3 1 2\\r\\n', 'output': ['0.000000\\r\\n2.000000\\r\\n1.000000\\r\\n']}, {'input': '100 100\\r\\n37 97 75 52 33 29 51 22 33 37 45 96 96 60 82 58 86 71 28 73 38 50 6 6 90 17 26 76 13 41 100 47 17 93 4 1 56 16 41 74 25 17 69 61 39 37 96 73 49 93 52 14 62 24 91 30 9 97 52 100 6 16 85 8 12 26 10 3 94 63 80 27 29 78 9 48 79 64 60 18 98 75 81 35 24 81 2 100 23 70 21 60 98 38 29 29 58 37 49 72\\r\\n', 'output': ['-1\\r\\n']}, {'input': '100 100\\r\\n1 3 7 7 9 5 9 3 7 8 10 1 3 10 10 6 1 3 10 4 3 9 4 9 5 4 9 2 8 7 4 3 3 3 5 10 8 9 10 1 9 2 4 8 3 10 9 2 3 9 8 2 4 4 4 7 1 1 7 3 7 8 9 5 1 2 6 7 1 10 9 10 5 10 1 10 5 2 4 3 10 1 6 5 6 7 8 9 3 8 6 10 8 7 2 3 8 6 3 6\\r\\n', 'output': ['-1\\r\\n']}, {'input': '100 61\\r\\n81 80 83 72 87 76 91 92 77 93 77 94 76 73 71 88 88 76 87 73 89 73 85 81 79 90 76 73 82 93 79 93 71 75 72 71 78 85 92 89 88 93 74 87 71 94 74 87 85 89 90 93 86 94 92 87 90 91 75 73 90 84 92 94 92 79 74 85 74 74 89 76 84 84 84 83 86 84 82 71 76 74 83 81 89 73 73 74 71 77 90 94 73 94 73 75 93 89 84 92\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 100\\r\\n52 52 51 52 52 52 51 51 52 52\\r\\n', 'output': ['9.700000\\r\\n9.700000\\r\\n10.700000\\r\\n9.700000\\r\\n9.700000\\r\\n9.700000\\r\\n10.700000\\r\\n10.700000\\r\\n9.700000\\r\\n9.700000\\r\\n']}, {'input': '10 100\\r\\n13 13 13 13 12 13 12 13 12 12\\r\\n', 'output': ['9.600000\\r\\n9.600000\\r\\n9.600000\\r\\n9.600000\\r\\n10.600000\\r\\n9.600000\\r\\n10.600000\\r\\n9.600000\\r\\n10.600000\\r\\n10.600000\\r\\n']}, {'input': '10 100\\r\\n50 51 47 51 48 46 49 51 46 51\\r\\n', 'output': ['9.000000\\r\\n8.000000\\r\\n12.000000\\r\\n8.000000\\r\\n11.000000\\r\\n13.000000\\r\\n10.000000\\r\\n8.000000\\r\\n13.000000\\r\\n8.000000\\r\\n']}, {'input': '10 100\\r\\n13 13 9 12 12 11 13 8 10 13\\r\\n', 'output': ['8.400000\\r\\n8.400000\\r\\n12.400000\\r\\n9.400000\\r\\n9.400000\\r\\n10.400000\\r\\n8.400000\\r\\n13.400000\\r\\n11.400000\\r\\n8.400000\\r\\n']}, {'input': '13 97\\r\\n52 52 51 51 52 52 51 52 51 51 52 52 52\\r\\n', 'output': ['7.076923\\r\\n7.076923\\r\\n8.076923\\r\\n8.076923\\r\\n7.076923\\r\\n7.076923\\r\\n8.076923\\r\\n7.076923\\r\\n8.076923\\r\\n8.076923\\r\\n7.076923\\r\\n7.076923\\r\\n7.076923\\r\\n']}, {'input': '17 99\\r\\n13 13 12 13 11 12 12 12 13 13 11 13 13 13 13 12 13\\r\\n', 'output': ['5.294118\\r\\n5.294118\\r\\n6.294118\\r\\n5.294118\\r\\n7.294118\\r\\n6.294118\\r\\n6.294118\\r\\n6.294118\\r\\n5.294118\\r\\n5.294118\\r\\n7.294118\\r\\n5.294118\\r\\n5.294118\\r\\n5.294118\\r\\n5.294118\\r\\n6.294118\\r\\n5.294118\\r\\n']}, {'input': '9 91\\r\\n52 51 50 52 52 51 50 48 51\\r\\n', 'output': ['8.888889\\r\\n9.888889\\r\\n10.888889\\r\\n8.888889\\r\\n8.888889\\r\\n9.888889\\r\\n10.888889\\r\\n12.888889\\r\\n9.888889\\r\\n']}, {'input': '17 91\\r\\n13 13 13 13 12 12 13 13 12 13 12 13 10 12 13 13 12\\r\\n', 'output': ['4.823529\\r\\n4.823529\\r\\n4.823529\\r\\n4.823529\\r\\n5.823529\\r\\n5.823529\\r\\n4.823529\\r\\n4.823529\\r\\n5.823529\\r\\n4.823529\\r\\n5.823529\\r\\n4.823529\\r\\n7.823529\\r\\n5.823529\\r\\n4.823529\\r\\n4.823529\\r\\n5.823529\\r\\n']}, {'input': '2 3\\r\\n1 1\\r\\n', 'output': ['1.500000\\r\\n1.500000\\r\\n']}, {'input': '2 90\\r\\n0 89\\r\\n', 'output': ['89.500000\\r\\n0.500000\\r\\n']}, {'input': '4 17\\r\\n3 4 8 1\\r\\n', 'output': ['5.250000\\r\\n4.250000\\r\\n0.250000\\r\\n7.250000\\r\\n']}, {'input': '2 9\\r\\n5 5\\r\\n', 'output': ['4.500000\\r\\n4.500000\\r\\n']}, {'input': '7 28\\r\\n1 3 9 10 9 6 10\\r\\n', 'output': ['9.857143\\r\\n7.857143\\r\\n1.857143\\r\\n0.857143\\r\\n1.857143\\r\\n4.857143\\r\\n0.857143\\r\\n']}, {'input': '5 11\\r\\n1 2 3 4 5\\r\\n', 'output': ['4.200000\\r\\n3.200000\\r\\n2.200000\\r\\n1.200000\\r\\n0.200000\\r\\n']}, {'input': '2 1\\r\\n1 1\\r\\n', 'output': ['0.500000\\r\\n0.500000\\r\\n']}, {'input': '5 3\\r\\n1 1 1 1 1\\r\\n', 'output': ['0.600000\\r\\n0.600000\\r\\n0.600000\\r\\n0.600000\\r\\n0.600000\\r\\n']}, {'input': '3 1\\r\\n100 100 100\\r\\n', 'output': ['0.333333\\r\\n0.333333\\r\\n0.333333\\r\\n']}, {'input': '5 50\\r\\n2 2 3 2 2\\r\\n', 'output': ['10.200000\\r\\n10.200000\\r\\n9.200000\\r\\n10.200000\\r\\n10.200000\\r\\n']}, {'input': '3 3\\r\\n2 2 3\\r\\n', 'output': ['1.333333\\r\\n1.333333\\r\\n0.333333\\r\\n']}, {'input': '2 52\\r\\n2 100\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 2\\r\\n2 2 3\\r\\n', 'output': ['1.000000\\r\\n1.000000\\r\\n0.000000\\r\\n']}, {'input': '5 1\\r\\n1 1 1 1 1\\r\\n', 'output': ['0.200000\\r\\n0.200000\\r\\n0.200000\\r\\n0.200000\\r\\n0.200000\\r\\n']}, {'input': '2 4\\r\\n1 2\\r\\n', 'output': ['2.500000\\r\\n1.500000\\r\\n']}, {'input': '5 49\\r\\n1 2 3 4 5\\r\\n', 'output': ['11.800000\\r\\n10.800000\\r\\n9.800000\\r\\n8.800000\\r\\n7.800000\\r\\n']}]", "source_code": "import java.io.*;\nimport java.math.*;\nimport java.util.*;\n\npublic class CF {\n    static final int INF = Integer.MAX_VALUE / 2;\n    static final int MOD = 1_000_000_007;\n    static final double EPS = 1e-10;\n    static final int MAXN = 1005;\n\n    public static void main(String[] args) throws IOException {\n        try (Input input = new StandardInput()) {\n            execute(input);\n        }\n    }\n\n    static void execute(Input input) {\n        int n = input.nextInt(),\n                b = input.nextInt(),\n                sum = 0;\n        int[] v = new int[n];\n        for (int i = 0; i < v.length; i++) {\n            v[i] = input.nextInt();\n            sum += v[i];\n        }\n        double add = b * (n / (double) sum);\n        double need = add * sum;\n        if (n == 1) {\n            b = (int) add;\n        } else if (b + add < need) {\n            b = 0;\n        } else {\n            b = (int) (b + add - need);\n        }\n        for (int i = 0; i < v.length; i++) {\n            int vol = v[i];\n            if (b > 0) {\n                if (v[i] + b <= add) {\n                    v[i] += b;\n                    b = 0;\n                } else {\n                    v[i] = (int) add;\n                    b -= add - v[i];\n                }\n            }\n            double f = (add + (v.length - 1.0) * v[i]) / n;\n            System.out.printf(\"%.6f%n\", f);\n        }\n    }\n\n    private interface Input extends Closeable {\n        String next() throws IOException;\n\n        default int nextInt() throws IOException {\n            return Integer.parseInt(next());\n        }\n\n        default long nextLong() throws IOException {\n            return Long.parseLong(next());\n        }\n\n        default int[] readIntArray() throws IOException {\n            return readIntArray(nextInt());\n        }\n\n        default int[] readIntArray(int size) throws IOException {\n            return readIntArray(size, x -> x);\n        }\n\n        default int[] readIntArray(int size, CheckedFunction<Integer, Integer, IOException> mapper) throws IOException {\n            int[] array = new int[size];\n            for (int i = 0; i < array.length; i++) {\n                array[i] = mapper.apply(nextInt());\n            }\n            return array;\n        }\n\n        default long[] readLongArray(int size) throws IOException {\n            return readLongArray(size, x -> x);\n        }\n\n        default long[] readLongArray(int size, CheckedFunction<Long, Long, IOException> mapper) throws IOException {\n            long[] array = new long[size];\n            for (int i = 0; i < array.length; i++) {\n                array[i] = mapper.apply(nextLong());\n            }\n            return array;\n        }\n\n        default double[] readDoubleArray(int size) throws IOException {\n            return readDoubleArray(size, x -> x);\n        }\n\n        default double[] readDoubleArray(int size, CheckedFunction<Double, Double, IOException> mapper) throws IOException {\n            double[] array = new double[size];\n            for (int i = 0; i < array.length; i++) {\n                array[i] = mapper.apply(nextDouble());\n            }\n            return array;\n        }\n    }\n\n    @FunctionalInterface\n    private interface CheckedFunction<T, R, X extends Exception> {\n        R apply(T t) throws X;\n    }\n\n    private static class StandardInput implements Input {\n        private final Reader reader = new StandardReader();\n        private final BufferedReader buffer = new BufferedReader(reader);\n        private StringTokenizer tokenizer;\n\n        private StandardInput() {\n            tokenizer = new StringTokenizer(\"\");\n        }\n\n        @Override\n        public void close() throws IOException {"}
{"src_uid": "65fea461d3caa5a932d1e2c13e99a59e", "id": 75, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1100, "testcases": "[{'input': '5 50\\r\\n1 2 3 4 5\\r\\n', 'output': ['12.000000\\r\\n11.000000\\r\\n10.000000\\r\\n9.000000\\r\\n8.000000\\r\\n']}, {'input': '2 2\\r\\n1 100\\r\\n', 'output': ['-1\\r\\n']}, {'input': '2 2\\r\\n1 1\\r\\n', 'output': ['1.000000\\r\\n1.000000\\r\\n']}, {'input': '3 2\\r\\n1 2 1\\r\\n', 'output': ['1.000000\\r\\n0.000000\\r\\n1.000000\\r\\n']}, {'input': '3 5\\r\\n1 2 1\\r\\n', 'output': ['2.000000\\r\\n1.000000\\r\\n2.000000\\r\\n']}, {'input': '10 95\\r\\n0 0 0 0 0 1 1 1 1 1\\r\\n', 'output': ['10.000000\\r\\n10.000000\\r\\n10.000000\\r\\n10.000000\\r\\n10.000000\\r\\n9.000000\\r\\n9.000000\\r\\n9.000000\\r\\n9.000000\\r\\n9.000000\\r\\n']}, {'input': '3 5\\r\\n1 2 3\\r\\n', 'output': ['2.666667\\r\\n1.666667\\r\\n0.666667\\r\\n']}, {'input': '3 5\\r\\n1 3 2\\r\\n', 'output': ['2.666667\\r\\n0.666667\\r\\n1.666667\\r\\n']}, {'input': '3 5\\r\\n2 1 3\\r\\n', 'output': ['1.666667\\r\\n2.666667\\r\\n0.666667\\r\\n']}, {'input': '3 5\\r\\n2 3 1\\r\\n', 'output': ['1.666667\\r\\n0.666667\\r\\n2.666667\\r\\n']}, {'input': '3 5\\r\\n3 1 2\\r\\n', 'output': ['0.666667\\r\\n2.666667\\r\\n1.666667\\r\\n']}, {'input': '3 5\\r\\n3 2 1\\r\\n', 'output': ['0.666667\\r\\n1.666667\\r\\n2.666667\\r\\n']}, {'input': '2 1\\r\\n1 1\\r\\n', 'output': ['0.500000\\r\\n0.500000\\r\\n']}, {'input': '2 1\\r\\n2 2\\r\\n', 'output': ['0.500000\\r\\n0.500000\\r\\n']}, {'input': '3 2\\r\\n2 1 2\\r\\n', 'output': ['0.333333\\r\\n1.333333\\r\\n0.333333\\r\\n']}, {'input': '3 3\\r\\n2 2 1\\r\\n', 'output': ['0.666667\\r\\n0.666667\\r\\n1.666667\\r\\n']}, {'input': '3 3\\r\\n3 1 2\\r\\n', 'output': ['0.000000\\r\\n2.000000\\r\\n1.000000\\r\\n']}, {'input': '100 100\\r\\n37 97 75 52 33 29 51 22 33 37 45 96 96 60 82 58 86 71 28 73 38 50 6 6 90 17 26 76 13 41 100 47 17 93 4 1 56 16 41 74 25 17 69 61 39 37 96 73 49 93 52 14 62 24 91 30 9 97 52 100 6 16 85 8 12 26 10 3 94 63 80 27 29 78 9 48 79 64 60 18 98 75 81 35 24 81 2 100 23 70 21 60 98 38 29 29 58 37 49 72\\r\\n', 'output': ['-1\\r\\n']}, {'input': '100 100\\r\\n1 3 7 7 9 5 9 3 7 8 10 1 3 10 10 6 1 3 10 4 3 9 4 9 5 4 9 2 8 7 4 3 3 3 5 10 8 9 10 1 9 2 4 8 3 10 9 2 3 9 8 2 4 4 4 7 1 1 7 3 7 8 9 5 1 2 6 7 1 10 9 10 5 10 1 10 5 2 4 3 10 1 6 5 6 7 8 9 3 8 6 10 8 7 2 3 8 6 3 6\\r\\n', 'output': ['-1\\r\\n']}, {'input': '100 61\\r\\n81 80 83 72 87 76 91 92 77 93 77 94 76 73 71 88 88 76 87 73 89 73 85 81 79 90 76 73 82 93 79 93 71 75 72 71 78 85 92 89 88 93 74 87 71 94 74 87 85 89 90 93 86 94 92 87 90 91 75 73 90 84 92 94 92 79 74 85 74 74 89 76 84 84 84 83 86 84 82 71 76 74 83 81 89 73 73 74 71 77 90 94 73 94 73 75 93 89 84 92\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 100\\r\\n52 52 51 52 52 52 51 51 52 52\\r\\n', 'output': ['9.700000\\r\\n9.700000\\r\\n10.700000\\r\\n9.700000\\r\\n9.700000\\r\\n9.700000\\r\\n10.700000\\r\\n10.700000\\r\\n9.700000\\r\\n9.700000\\r\\n']}, {'input': '10 100\\r\\n13 13 13 13 12 13 12 13 12 12\\r\\n', 'output': ['9.600000\\r\\n9.600000\\r\\n9.600000\\r\\n9.600000\\r\\n10.600000\\r\\n9.600000\\r\\n10.600000\\r\\n9.600000\\r\\n10.600000\\r\\n10.600000\\r\\n']}, {'input': '10 100\\r\\n50 51 47 51 48 46 49 51 46 51\\r\\n', 'output': ['9.000000\\r\\n8.000000\\r\\n12.000000\\r\\n8.000000\\r\\n11.000000\\r\\n13.000000\\r\\n10.000000\\r\\n8.000000\\r\\n13.000000\\r\\n8.000000\\r\\n']}, {'input': '10 100\\r\\n13 13 9 12 12 11 13 8 10 13\\r\\n', 'output': ['8.400000\\r\\n8.400000\\r\\n12.400000\\r\\n9.400000\\r\\n9.400000\\r\\n10.400000\\r\\n8.400000\\r\\n13.400000\\r\\n11.400000\\r\\n8.400000\\r\\n']}, {'input': '13 97\\r\\n52 52 51 51 52 52 51 52 51 51 52 52 52\\r\\n', 'output': ['7.076923\\r\\n7.076923\\r\\n8.076923\\r\\n8.076923\\r\\n7.076923\\r\\n7.076923\\r\\n8.076923\\r\\n7.076923\\r\\n8.076923\\r\\n8.076923\\r\\n7.076923\\r\\n7.076923\\r\\n7.076923\\r\\n']}, {'input': '17 99\\r\\n13 13 12 13 11 12 12 12 13 13 11 13 13 13 13 12 13\\r\\n', 'output': ['5.294118\\r\\n5.294118\\r\\n6.294118\\r\\n5.294118\\r\\n7.294118\\r\\n6.294118\\r\\n6.294118\\r\\n6.294118\\r\\n5.294118\\r\\n5.294118\\r\\n7.294118\\r\\n5.294118\\r\\n5.294118\\r\\n5.294118\\r\\n5.294118\\r\\n6.294118\\r\\n5.294118\\r\\n']}, {'input': '9 91\\r\\n52 51 50 52 52 51 50 48 51\\r\\n', 'output': ['8.888889\\r\\n9.888889\\r\\n10.888889\\r\\n8.888889\\r\\n8.888889\\r\\n9.888889\\r\\n10.888889\\r\\n12.888889\\r\\n9.888889\\r\\n']}, {'input': '17 91\\r\\n13 13 13 13 12 12 13 13 12 13 12 13 10 12 13 13 12\\r\\n', 'output': ['4.823529\\r\\n4.823529\\r\\n4.823529\\r\\n4.823529\\r\\n5.823529\\r\\n5.823529\\r\\n4.823529\\r\\n4.823529\\r\\n5.823529\\r\\n4.823529\\r\\n5.823529\\r\\n4.823529\\r\\n7.823529\\r\\n5.823529\\r\\n4.823529\\r\\n4.823529\\r\\n5.823529\\r\\n']}, {'input': '2 3\\r\\n1 1\\r\\n', 'output': ['1.500000\\r\\n1.500000\\r\\n']}, {'input': '2 90\\r\\n0 89\\r\\n', 'output': ['89.500000\\r\\n0.500000\\r\\n']}, {'input': '4 17\\r\\n3 4 8 1\\r\\n', 'output': ['5.250000\\r\\n4.250000\\r\\n0.250000\\r\\n7.250000\\r\\n']}, {'input': '2 9\\r\\n5 5\\r\\n', 'output': ['4.500000\\r\\n4.500000\\r\\n']}, {'input': '7 28\\r\\n1 3 9 10 9 6 10\\r\\n', 'output': ['9.857143\\r\\n7.857143\\r\\n1.857143\\r\\n0.857143\\r\\n1.857143\\r\\n4.857143\\r\\n0.857143\\r\\n']}, {'input': '5 11\\r\\n1 2 3 4 5\\r\\n', 'output': ['4.200000\\r\\n3.200000\\r\\n2.200000\\r\\n1.200000\\r\\n0.200000\\r\\n']}, {'input': '2 1\\r\\n1 1\\r\\n', 'output': ['0.500000\\r\\n0.500000\\r\\n']}, {'input': '5 3\\r\\n1 1 1 1 1\\r\\n', 'output': ['0.600000\\r\\n0.600000\\r\\n0.600000\\r\\n0.600000\\r\\n0.600000\\r\\n']}, {'input': '3 1\\r\\n100 100 100\\r\\n', 'output': ['0.333333\\r\\n0.333333\\r\\n0.333333\\r\\n']}, {'input': '5 50\\r\\n2 2 3 2 2\\r\\n', 'output': ['10.200000\\r\\n10.200000\\r\\n9.200000\\r\\n10.200000\\r\\n10.200000\\r\\n']}, {'input': '3 3\\r\\n2 2 3\\r\\n', 'output': ['1.333333\\r\\n1.333333\\r\\n0.333333\\r\\n']}, {'input': '2 52\\r\\n2 100\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 2\\r\\n2 2 3\\r\\n', 'output': ['1.000000\\r\\n1.000000\\r\\n0.000000\\r\\n']}, {'input': '5 1\\r\\n1 1 1 1 1\\r\\n', 'output': ['0.200000\\r\\n0.200000\\r\\n0.200000\\r\\n0.200000\\r\\n0.200000\\r\\n']}, {'input': '2 4\\r\\n1 2\\r\\n', 'output': ['2.500000\\r\\n1.500000\\r\\n']}, {'input': '5 49\\r\\n1 2 3 4 5\\r\\n', 'output': ['11.800000\\r\\n10.800000\\r\\n9.800000\\r\\n8.800000\\r\\n7.800000\\r\\n']}]", "source_code": "import java.util.*;\nimport java.io.*;\n\n\npublic class Solution\n{\n    public static void main (String[] args) \n    {\n        Scanner in=new Scanner(System.in);\n        String s[] = in.nextLine().split(\" \");\n        int n=Integer.valueOf(s[0]);\n        int b=Integer.valueOf(s[1]);\n        s=in.nextLine().split(\" \");\n        int arr[] = new int[n];\n        int sum = 0;\n        for (int i=0;i<n;i++)\n        {\n            arr[i] = Integer.valueOf(s[i]);\n            sum += arr[i];\n        }\n        \n        if (sum < b)\n        {\n            System.out.println(-1);\n            return;\n        }\n        \n        double r = (double)(sum - b)/n;\n        System.out.printf(String.format(new java.util.Locale(\"Russian\"), \"%.6f\"), r);\n        \n        for (int i=0;i<n;i++)\n            System.out.println((b + r - arr[i])/n);\n    }\n}\n"}
{"src_uid": "65fea461d3caa5a932d1e2c13e99a59e", "id": 75, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1100, "testcases": "[{'input': '5 50\\r\\n1 2 3 4 5\\r\\n', 'output': ['12.000000\\r\\n11.000000\\r\\n10.000000\\r\\n9.000000\\r\\n8.000000\\r\\n']}, {'input': '2 2\\r\\n1 100\\r\\n', 'output': ['-1\\r\\n']}, {'input': '2 2\\r\\n1 1\\r\\n', 'output': ['1.000000\\r\\n1.000000\\r\\n']}, {'input': '3 2\\r\\n1 2 1\\r\\n', 'output': ['1.000000\\r\\n0.000000\\r\\n1.000000\\r\\n']}, {'input': '3 5\\r\\n1 2 1\\r\\n', 'output': ['2.000000\\r\\n1.000000\\r\\n2.000000\\r\\n']}, {'input': '10 95\\r\\n0 0 0 0 0 1 1 1 1 1\\r\\n', 'output': ['10.000000\\r\\n10.000000\\r\\n10.000000\\r\\n10.000000\\r\\n10.000000\\r\\n9.000000\\r\\n9.000000\\r\\n9.000000\\r\\n9.000000\\r\\n9.000000\\r\\n']}, {'input': '3 5\\r\\n1 2 3\\r\\n', 'output': ['2.666667\\r\\n1.666667\\r\\n0.666667\\r\\n']}, {'input': '3 5\\r\\n1 3 2\\r\\n', 'output': ['2.666667\\r\\n0.666667\\r\\n1.666667\\r\\n']}, {'input': '3 5\\r\\n2 1 3\\r\\n', 'output': ['1.666667\\r\\n2.666667\\r\\n0.666667\\r\\n']}, {'input': '3 5\\r\\n2 3 1\\r\\n', 'output': ['1.666667\\r\\n0.666667\\r\\n2.666667\\r\\n']}, {'input': '3 5\\r\\n3 1 2\\r\\n', 'output': ['0.666667\\r\\n2.666667\\r\\n1.666667\\r\\n']}, {'input': '3 5\\r\\n3 2 1\\r\\n', 'output': ['0.666667\\r\\n1.666667\\r\\n2.666667\\r\\n']}, {'input': '2 1\\r\\n1 1\\r\\n', 'output': ['0.500000\\r\\n0.500000\\r\\n']}, {'input': '2 1\\r\\n2 2\\r\\n', 'output': ['0.500000\\r\\n0.500000\\r\\n']}, {'input': '3 2\\r\\n2 1 2\\r\\n', 'output': ['0.333333\\r\\n1.333333\\r\\n0.333333\\r\\n']}, {'input': '3 3\\r\\n2 2 1\\r\\n', 'output': ['0.666667\\r\\n0.666667\\r\\n1.666667\\r\\n']}, {'input': '3 3\\r\\n3 1 2\\r\\n', 'output': ['0.000000\\r\\n2.000000\\r\\n1.000000\\r\\n']}, {'input': '100 100\\r\\n37 97 75 52 33 29 51 22 33 37 45 96 96 60 82 58 86 71 28 73 38 50 6 6 90 17 26 76 13 41 100 47 17 93 4 1 56 16 41 74 25 17 69 61 39 37 96 73 49 93 52 14 62 24 91 30 9 97 52 100 6 16 85 8 12 26 10 3 94 63 80 27 29 78 9 48 79 64 60 18 98 75 81 35 24 81 2 100 23 70 21 60 98 38 29 29 58 37 49 72\\r\\n', 'output': ['-1\\r\\n']}, {'input': '100 100\\r\\n1 3 7 7 9 5 9 3 7 8 10 1 3 10 10 6 1 3 10 4 3 9 4 9 5 4 9 2 8 7 4 3 3 3 5 10 8 9 10 1 9 2 4 8 3 10 9 2 3 9 8 2 4 4 4 7 1 1 7 3 7 8 9 5 1 2 6 7 1 10 9 10 5 10 1 10 5 2 4 3 10 1 6 5 6 7 8 9 3 8 6 10 8 7 2 3 8 6 3 6\\r\\n', 'output': ['-1\\r\\n']}, {'input': '100 61\\r\\n81 80 83 72 87 76 91 92 77 93 77 94 76 73 71 88 88 76 87 73 89 73 85 81 79 90 76 73 82 93 79 93 71 75 72 71 78 85 92 89 88 93 74 87 71 94 74 87 85 89 90 93 86 94 92 87 90 91 75 73 90 84 92 94 92 79 74 85 74 74 89 76 84 84 84 83 86 84 82 71 76 74 83 81 89 73 73 74 71 77 90 94 73 94 73 75 93 89 84 92\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 100\\r\\n52 52 51 52 52 52 51 51 52 52\\r\\n', 'output': ['9.700000\\r\\n9.700000\\r\\n10.700000\\r\\n9.700000\\r\\n9.700000\\r\\n9.700000\\r\\n10.700000\\r\\n10.700000\\r\\n9.700000\\r\\n9.700000\\r\\n']}, {'input': '10 100\\r\\n13 13 13 13 12 13 12 13 12 12\\r\\n', 'output': ['9.600000\\r\\n9.600000\\r\\n9.600000\\r\\n9.600000\\r\\n10.600000\\r\\n9.600000\\r\\n10.600000\\r\\n9.600000\\r\\n10.600000\\r\\n10.600000\\r\\n']}, {'input': '10 100\\r\\n50 51 47 51 48 46 49 51 46 51\\r\\n', 'output': ['9.000000\\r\\n8.000000\\r\\n12.000000\\r\\n8.000000\\r\\n11.000000\\r\\n13.000000\\r\\n10.000000\\r\\n8.000000\\r\\n13.000000\\r\\n8.000000\\r\\n']}, {'input': '10 100\\r\\n13 13 9 12 12 11 13 8 10 13\\r\\n', 'output': ['8.400000\\r\\n8.400000\\r\\n12.400000\\r\\n9.400000\\r\\n9.400000\\r\\n10.400000\\r\\n8.400000\\r\\n13.400000\\r\\n11.400000\\r\\n8.400000\\r\\n']}, {'input': '13 97\\r\\n52 52 51 51 52 52 51 52 51 51 52 52 52\\r\\n', 'output': ['7.076923\\r\\n7.076923\\r\\n8.076923\\r\\n8.076923\\r\\n7.076923\\r\\n7.076923\\r\\n8.076923\\r\\n7.076923\\r\\n8.076923\\r\\n8.076923\\r\\n7.076923\\r\\n7.076923\\r\\n7.076923\\r\\n']}, {'input': '17 99\\r\\n13 13 12 13 11 12 12 12 13 13 11 13 13 13 13 12 13\\r\\n', 'output': ['5.294118\\r\\n5.294118\\r\\n6.294118\\r\\n5.294118\\r\\n7.294118\\r\\n6.294118\\r\\n6.294118\\r\\n6.294118\\r\\n5.294118\\r\\n5.294118\\r\\n7.294118\\r\\n5.294118\\r\\n5.294118\\r\\n5.294118\\r\\n5.294118\\r\\n6.294118\\r\\n5.294118\\r\\n']}, {'input': '9 91\\r\\n52 51 50 52 52 51 50 48 51\\r\\n', 'output': ['8.888889\\r\\n9.888889\\r\\n10.888889\\r\\n8.888889\\r\\n8.888889\\r\\n9.888889\\r\\n10.888889\\r\\n12.888889\\r\\n9.888889\\r\\n']}, {'input': '17 91\\r\\n13 13 13 13 12 12 13 13 12 13 12 13 10 12 13 13 12\\r\\n', 'output': ['4.823529\\r\\n4.823529\\r\\n4.823529\\r\\n4.823529\\r\\n5.823529\\r\\n5.823529\\r\\n4.823529\\r\\n4.823529\\r\\n5.823529\\r\\n4.823529\\r\\n5.823529\\r\\n4.823529\\r\\n7.823529\\r\\n5.823529\\r\\n4.823529\\r\\n4.823529\\r\\n5.823529\\r\\n']}, {'input': '2 3\\r\\n1 1\\r\\n', 'output': ['1.500000\\r\\n1.500000\\r\\n']}, {'input': '2 90\\r\\n0 89\\r\\n', 'output': ['89.500000\\r\\n0.500000\\r\\n']}, {'input': '4 17\\r\\n3 4 8 1\\r\\n', 'output': ['5.250000\\r\\n4.250000\\r\\n0.250000\\r\\n7.250000\\r\\n']}, {'input': '2 9\\r\\n5 5\\r\\n', 'output': ['4.500000\\r\\n4.500000\\r\\n']}, {'input': '7 28\\r\\n1 3 9 10 9 6 10\\r\\n', 'output': ['9.857143\\r\\n7.857143\\r\\n1.857143\\r\\n0.857143\\r\\n1.857143\\r\\n4.857143\\r\\n0.857143\\r\\n']}, {'input': '5 11\\r\\n1 2 3 4 5\\r\\n', 'output': ['4.200000\\r\\n3.200000\\r\\n2.200000\\r\\n1.200000\\r\\n0.200000\\r\\n']}, {'input': '2 1\\r\\n1 1\\r\\n', 'output': ['0.500000\\r\\n0.500000\\r\\n']}, {'input': '5 3\\r\\n1 1 1 1 1\\r\\n', 'output': ['0.600000\\r\\n0.600000\\r\\n0.600000\\r\\n0.600000\\r\\n0.600000\\r\\n']}, {'input': '3 1\\r\\n100 100 100\\r\\n', 'output': ['0.333333\\r\\n0.333333\\r\\n0.333333\\r\\n']}, {'input': '5 50\\r\\n2 2 3 2 2\\r\\n', 'output': ['10.200000\\r\\n10.200000\\r\\n9.200000\\r\\n10.200000\\r\\n10.200000\\r\\n']}, {'input': '3 3\\r\\n2 2 3\\r\\n', 'output': ['1.333333\\r\\n1.333333\\r\\n0.333333\\r\\n']}, {'input': '2 52\\r\\n2 100\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 2\\r\\n2 2 3\\r\\n', 'output': ['1.000000\\r\\n1.000000\\r\\n0.000000\\r\\n']}, {'input': '5 1\\r\\n1 1 1 1 1\\r\\n', 'output': ['0.200000\\r\\n0.200000\\r\\n0.200000\\r\\n0.200000\\r\\n0.200000\\r\\n']}, {'input': '2 4\\r\\n1 2\\r\\n', 'output': ['2.500000\\r\\n1.500000\\r\\n']}, {'input': '5 49\\r\\n1 2 3 4 5\\r\\n', 'output': ['11.800000\\r\\n10.800000\\r\\n9.800000\\r\\n8.800000\\r\\n7.800000\\r\\n']}]", "source_code": "import java.util.Arrays;\nimport java.util.Locale;\nimport java.util.Scanner;\n\n\npublic class Solution {\n\tstatic Scanner input = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tString first_line = input.nextLine();\n\t\tString[] first = first_line.split(\" \");\n\t\tint n = Integer.valueOf(first[0]);\n\t\tint b = Integer.valueOf(first[1]);\n\t\t\n\t\tString second_line = input.nextLine();\n\t\tString[] second = second_line.split(\" \");\n\t\tdouble a[] = new double[second.length];\n\t\tfor(int i=0;i<a.length;i++)\n\t\t\ta[i] = (Integer.valueOf(second[i]));\n\t\t\n\t\tdouble total = 0;\n\t\tfor(int i=0;i<a.length;i++)\n\t\t\ttotal = total + a[i];\n\t\tdouble avg = (double) b / n ;\n\t\tfor(int i=0;i<a.length;i++){\n\t\t\tif(a[i] == 0)\n\t\t\t\tSystem.out.print(-1+\"\\n\");\n\t\t\telse{\n\t\t\t\tdouble x = Math.round((avg - a[i])*1000000)/1000000.0;\n\t\t\t\tif(x>0)\n\t\t\t\t\tSystem.out.print(x+\"\\n\");\n\t\t\t\telse\n\t\t\t\t\tSystem.out.print((avg-a[i])+\"\\n\");\n\t\t\t}\n\t\t}\n\t}\n}\n"}
{"src_uid": "65fea461d3caa5a932d1e2c13e99a59e", "id": 75, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1100, "testcases": "[{'input': '5 50\\r\\n1 2 3 4 5\\r\\n', 'output': ['12.000000\\r\\n11.000000\\r\\n10.000000\\r\\n9.000000\\r\\n8.000000\\r\\n']}, {'input': '2 2\\r\\n1 100\\r\\n', 'output': ['-1\\r\\n']}, {'input': '2 2\\r\\n1 1\\r\\n', 'output': ['1.000000\\r\\n1.000000\\r\\n']}, {'input': '3 2\\r\\n1 2 1\\r\\n', 'output': ['1.000000\\r\\n0.000000\\r\\n1.000000\\r\\n']}, {'input': '3 5\\r\\n1 2 1\\r\\n', 'output': ['2.000000\\r\\n1.000000\\r\\n2.000000\\r\\n']}, {'input': '10 95\\r\\n0 0 0 0 0 1 1 1 1 1\\r\\n', 'output': ['10.000000\\r\\n10.000000\\r\\n10.000000\\r\\n10.000000\\r\\n10.000000\\r\\n9.000000\\r\\n9.000000\\r\\n9.000000\\r\\n9.000000\\r\\n9.000000\\r\\n']}, {'input': '3 5\\r\\n1 2 3\\r\\n', 'output': ['2.666667\\r\\n1.666667\\r\\n0.666667\\r\\n']}, {'input': '3 5\\r\\n1 3 2\\r\\n', 'output': ['2.666667\\r\\n0.666667\\r\\n1.666667\\r\\n']}, {'input': '3 5\\r\\n2 1 3\\r\\n', 'output': ['1.666667\\r\\n2.666667\\r\\n0.666667\\r\\n']}, {'input': '3 5\\r\\n2 3 1\\r\\n', 'output': ['1.666667\\r\\n0.666667\\r\\n2.666667\\r\\n']}, {'input': '3 5\\r\\n3 1 2\\r\\n', 'output': ['0.666667\\r\\n2.666667\\r\\n1.666667\\r\\n']}, {'input': '3 5\\r\\n3 2 1\\r\\n', 'output': ['0.666667\\r\\n1.666667\\r\\n2.666667\\r\\n']}, {'input': '2 1\\r\\n1 1\\r\\n', 'output': ['0.500000\\r\\n0.500000\\r\\n']}, {'input': '2 1\\r\\n2 2\\r\\n', 'output': ['0.500000\\r\\n0.500000\\r\\n']}, {'input': '3 2\\r\\n2 1 2\\r\\n', 'output': ['0.333333\\r\\n1.333333\\r\\n0.333333\\r\\n']}, {'input': '3 3\\r\\n2 2 1\\r\\n', 'output': ['0.666667\\r\\n0.666667\\r\\n1.666667\\r\\n']}, {'input': '3 3\\r\\n3 1 2\\r\\n', 'output': ['0.000000\\r\\n2.000000\\r\\n1.000000\\r\\n']}, {'input': '100 100\\r\\n37 97 75 52 33 29 51 22 33 37 45 96 96 60 82 58 86 71 28 73 38 50 6 6 90 17 26 76 13 41 100 47 17 93 4 1 56 16 41 74 25 17 69 61 39 37 96 73 49 93 52 14 62 24 91 30 9 97 52 100 6 16 85 8 12 26 10 3 94 63 80 27 29 78 9 48 79 64 60 18 98 75 81 35 24 81 2 100 23 70 21 60 98 38 29 29 58 37 49 72\\r\\n', 'output': ['-1\\r\\n']}, {'input': '100 100\\r\\n1 3 7 7 9 5 9 3 7 8 10 1 3 10 10 6 1 3 10 4 3 9 4 9 5 4 9 2 8 7 4 3 3 3 5 10 8 9 10 1 9 2 4 8 3 10 9 2 3 9 8 2 4 4 4 7 1 1 7 3 7 8 9 5 1 2 6 7 1 10 9 10 5 10 1 10 5 2 4 3 10 1 6 5 6 7 8 9 3 8 6 10 8 7 2 3 8 6 3 6\\r\\n', 'output': ['-1\\r\\n']}, {'input': '100 61\\r\\n81 80 83 72 87 76 91 92 77 93 77 94 76 73 71 88 88 76 87 73 89 73 85 81 79 90 76 73 82 93 79 93 71 75 72 71 78 85 92 89 88 93 74 87 71 94 74 87 85 89 90 93 86 94 92 87 90 91 75 73 90 84 92 94 92 79 74 85 74 74 89 76 84 84 84 83 86 84 82 71 76 74 83 81 89 73 73 74 71 77 90 94 73 94 73 75 93 89 84 92\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 100\\r\\n52 52 51 52 52 52 51 51 52 52\\r\\n', 'output': ['9.700000\\r\\n9.700000\\r\\n10.700000\\r\\n9.700000\\r\\n9.700000\\r\\n9.700000\\r\\n10.700000\\r\\n10.700000\\r\\n9.700000\\r\\n9.700000\\r\\n']}, {'input': '10 100\\r\\n13 13 13 13 12 13 12 13 12 12\\r\\n', 'output': ['9.600000\\r\\n9.600000\\r\\n9.600000\\r\\n9.600000\\r\\n10.600000\\r\\n9.600000\\r\\n10.600000\\r\\n9.600000\\r\\n10.600000\\r\\n10.600000\\r\\n']}, {'input': '10 100\\r\\n50 51 47 51 48 46 49 51 46 51\\r\\n', 'output': ['9.000000\\r\\n8.000000\\r\\n12.000000\\r\\n8.000000\\r\\n11.000000\\r\\n13.000000\\r\\n10.000000\\r\\n8.000000\\r\\n13.000000\\r\\n8.000000\\r\\n']}, {'input': '10 100\\r\\n13 13 9 12 12 11 13 8 10 13\\r\\n', 'output': ['8.400000\\r\\n8.400000\\r\\n12.400000\\r\\n9.400000\\r\\n9.400000\\r\\n10.400000\\r\\n8.400000\\r\\n13.400000\\r\\n11.400000\\r\\n8.400000\\r\\n']}, {'input': '13 97\\r\\n52 52 51 51 52 52 51 52 51 51 52 52 52\\r\\n', 'output': ['7.076923\\r\\n7.076923\\r\\n8.076923\\r\\n8.076923\\r\\n7.076923\\r\\n7.076923\\r\\n8.076923\\r\\n7.076923\\r\\n8.076923\\r\\n8.076923\\r\\n7.076923\\r\\n7.076923\\r\\n7.076923\\r\\n']}, {'input': '17 99\\r\\n13 13 12 13 11 12 12 12 13 13 11 13 13 13 13 12 13\\r\\n', 'output': ['5.294118\\r\\n5.294118\\r\\n6.294118\\r\\n5.294118\\r\\n7.294118\\r\\n6.294118\\r\\n6.294118\\r\\n6.294118\\r\\n5.294118\\r\\n5.294118\\r\\n7.294118\\r\\n5.294118\\r\\n5.294118\\r\\n5.294118\\r\\n5.294118\\r\\n6.294118\\r\\n5.294118\\r\\n']}, {'input': '9 91\\r\\n52 51 50 52 52 51 50 48 51\\r\\n', 'output': ['8.888889\\r\\n9.888889\\r\\n10.888889\\r\\n8.888889\\r\\n8.888889\\r\\n9.888889\\r\\n10.888889\\r\\n12.888889\\r\\n9.888889\\r\\n']}, {'input': '17 91\\r\\n13 13 13 13 12 12 13 13 12 13 12 13 10 12 13 13 12\\r\\n', 'output': ['4.823529\\r\\n4.823529\\r\\n4.823529\\r\\n4.823529\\r\\n5.823529\\r\\n5.823529\\r\\n4.823529\\r\\n4.823529\\r\\n5.823529\\r\\n4.823529\\r\\n5.823529\\r\\n4.823529\\r\\n7.823529\\r\\n5.823529\\r\\n4.823529\\r\\n4.823529\\r\\n5.823529\\r\\n']}, {'input': '2 3\\r\\n1 1\\r\\n', 'output': ['1.500000\\r\\n1.500000\\r\\n']}, {'input': '2 90\\r\\n0 89\\r\\n', 'output': ['89.500000\\r\\n0.500000\\r\\n']}, {'input': '4 17\\r\\n3 4 8 1\\r\\n', 'output': ['5.250000\\r\\n4.250000\\r\\n0.250000\\r\\n7.250000\\r\\n']}, {'input': '2 9\\r\\n5 5\\r\\n', 'output': ['4.500000\\r\\n4.500000\\r\\n']}, {'input': '7 28\\r\\n1 3 9 10 9 6 10\\r\\n', 'output': ['9.857143\\r\\n7.857143\\r\\n1.857143\\r\\n0.857143\\r\\n1.857143\\r\\n4.857143\\r\\n0.857143\\r\\n']}, {'input': '5 11\\r\\n1 2 3 4 5\\r\\n', 'output': ['4.200000\\r\\n3.200000\\r\\n2.200000\\r\\n1.200000\\r\\n0.200000\\r\\n']}, {'input': '2 1\\r\\n1 1\\r\\n', 'output': ['0.500000\\r\\n0.500000\\r\\n']}, {'input': '5 3\\r\\n1 1 1 1 1\\r\\n', 'output': ['0.600000\\r\\n0.600000\\r\\n0.600000\\r\\n0.600000\\r\\n0.600000\\r\\n']}, {'input': '3 1\\r\\n100 100 100\\r\\n', 'output': ['0.333333\\r\\n0.333333\\r\\n0.333333\\r\\n']}, {'input': '5 50\\r\\n2 2 3 2 2\\r\\n', 'output': ['10.200000\\r\\n10.200000\\r\\n9.200000\\r\\n10.200000\\r\\n10.200000\\r\\n']}, {'input': '3 3\\r\\n2 2 3\\r\\n', 'output': ['1.333333\\r\\n1.333333\\r\\n0.333333\\r\\n']}, {'input': '2 52\\r\\n2 100\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 2\\r\\n2 2 3\\r\\n', 'output': ['1.000000\\r\\n1.000000\\r\\n0.000000\\r\\n']}, {'input': '5 1\\r\\n1 1 1 1 1\\r\\n', 'output': ['0.200000\\r\\n0.200000\\r\\n0.200000\\r\\n0.200000\\r\\n0.200000\\r\\n']}, {'input': '2 4\\r\\n1 2\\r\\n', 'output': ['2.500000\\r\\n1.500000\\r\\n']}, {'input': '5 49\\r\\n1 2 3 4 5\\r\\n', 'output': ['11.800000\\r\\n10.800000\\r\\n9.800000\\r\\n8.800000\\r\\n7.800000\\r\\n']}]", "source_code": "import java.util.*;\nimport static java.util.Arrays.*;\n\npublic class NewClass3\n{\n    public static void main (String[] args) \n    {\n        Scanner in = new Scanner(System.in);\n        \n        String[] s = in.nextLine().split(\" \");\n        int n = Integer.valueOf(s[0]);\n        int b = Integer.valueOf(s[1]);\n        \n        s = in.nextLine().split(\" \");\n        int[] t = new int[s.length];\n        int sum = 0;\n        for (int i = 0; i < s.length; i++)\n        {\n            t[i] = Integer.valueOf(s[i]);\n            sum += t[i];\n        }\n        \n        double u = 1.0 * (b + sum) / n;\n        \n        double result = 0.0;\n        \n        for (int i = 0; i < t.length; i++)\n        {\n            if (u == t[i])\n            {\n                result += 0.0;\n            }\n            else\n            {\n                result += u - t[i];\n            }\n        }\n        \n        if (result > 0.0)\n        {\n            System.out.println((int)result + \".000000\");\n            for (int i = 0; i < t.length - 1; i++)\n            {\n                System.out.println((int)result);\n            }\n        }\n        else\n        {\n            System.out.println(-1);\n        }\n    }\n}"}
{"src_uid": "65fea461d3caa5a932d1e2c13e99a59e", "id": 75, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1100, "testcases": "[{'input': '5 50\\r\\n1 2 3 4 5\\r\\n', 'output': ['12.000000\\r\\n11.000000\\r\\n10.000000\\r\\n9.000000\\r\\n8.000000\\r\\n']}, {'input': '2 2\\r\\n1 100\\r\\n', 'output': ['-1\\r\\n']}, {'input': '2 2\\r\\n1 1\\r\\n', 'output': ['1.000000\\r\\n1.000000\\r\\n']}, {'input': '3 2\\r\\n1 2 1\\r\\n', 'output': ['1.000000\\r\\n0.000000\\r\\n1.000000\\r\\n']}, {'input': '3 5\\r\\n1 2 1\\r\\n', 'output': ['2.000000\\r\\n1.000000\\r\\n2.000000\\r\\n']}, {'input': '10 95\\r\\n0 0 0 0 0 1 1 1 1 1\\r\\n', 'output': ['10.000000\\r\\n10.000000\\r\\n10.000000\\r\\n10.000000\\r\\n10.000000\\r\\n9.000000\\r\\n9.000000\\r\\n9.000000\\r\\n9.000000\\r\\n9.000000\\r\\n']}, {'input': '3 5\\r\\n1 2 3\\r\\n', 'output': ['2.666667\\r\\n1.666667\\r\\n0.666667\\r\\n']}, {'input': '3 5\\r\\n1 3 2\\r\\n', 'output': ['2.666667\\r\\n0.666667\\r\\n1.666667\\r\\n']}, {'input': '3 5\\r\\n2 1 3\\r\\n', 'output': ['1.666667\\r\\n2.666667\\r\\n0.666667\\r\\n']}, {'input': '3 5\\r\\n2 3 1\\r\\n', 'output': ['1.666667\\r\\n0.666667\\r\\n2.666667\\r\\n']}, {'input': '3 5\\r\\n3 1 2\\r\\n', 'output': ['0.666667\\r\\n2.666667\\r\\n1.666667\\r\\n']}, {'input': '3 5\\r\\n3 2 1\\r\\n', 'output': ['0.666667\\r\\n1.666667\\r\\n2.666667\\r\\n']}, {'input': '2 1\\r\\n1 1\\r\\n', 'output': ['0.500000\\r\\n0.500000\\r\\n']}, {'input': '2 1\\r\\n2 2\\r\\n', 'output': ['0.500000\\r\\n0.500000\\r\\n']}, {'input': '3 2\\r\\n2 1 2\\r\\n', 'output': ['0.333333\\r\\n1.333333\\r\\n0.333333\\r\\n']}, {'input': '3 3\\r\\n2 2 1\\r\\n', 'output': ['0.666667\\r\\n0.666667\\r\\n1.666667\\r\\n']}, {'input': '3 3\\r\\n3 1 2\\r\\n', 'output': ['0.000000\\r\\n2.000000\\r\\n1.000000\\r\\n']}, {'input': '100 100\\r\\n37 97 75 52 33 29 51 22 33 37 45 96 96 60 82 58 86 71 28 73 38 50 6 6 90 17 26 76 13 41 100 47 17 93 4 1 56 16 41 74 25 17 69 61 39 37 96 73 49 93 52 14 62 24 91 30 9 97 52 100 6 16 85 8 12 26 10 3 94 63 80 27 29 78 9 48 79 64 60 18 98 75 81 35 24 81 2 100 23 70 21 60 98 38 29 29 58 37 49 72\\r\\n', 'output': ['-1\\r\\n']}, {'input': '100 100\\r\\n1 3 7 7 9 5 9 3 7 8 10 1 3 10 10 6 1 3 10 4 3 9 4 9 5 4 9 2 8 7 4 3 3 3 5 10 8 9 10 1 9 2 4 8 3 10 9 2 3 9 8 2 4 4 4 7 1 1 7 3 7 8 9 5 1 2 6 7 1 10 9 10 5 10 1 10 5 2 4 3 10 1 6 5 6 7 8 9 3 8 6 10 8 7 2 3 8 6 3 6\\r\\n', 'output': ['-1\\r\\n']}, {'input': '100 61\\r\\n81 80 83 72 87 76 91 92 77 93 77 94 76 73 71 88 88 76 87 73 89 73 85 81 79 90 76 73 82 93 79 93 71 75 72 71 78 85 92 89 88 93 74 87 71 94 74 87 85 89 90 93 86 94 92 87 90 91 75 73 90 84 92 94 92 79 74 85 74 74 89 76 84 84 84 83 86 84 82 71 76 74 83 81 89 73 73 74 71 77 90 94 73 94 73 75 93 89 84 92\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 100\\r\\n52 52 51 52 52 52 51 51 52 52\\r\\n', 'output': ['9.700000\\r\\n9.700000\\r\\n10.700000\\r\\n9.700000\\r\\n9.700000\\r\\n9.700000\\r\\n10.700000\\r\\n10.700000\\r\\n9.700000\\r\\n9.700000\\r\\n']}, {'input': '10 100\\r\\n13 13 13 13 12 13 12 13 12 12\\r\\n', 'output': ['9.600000\\r\\n9.600000\\r\\n9.600000\\r\\n9.600000\\r\\n10.600000\\r\\n9.600000\\r\\n10.600000\\r\\n9.600000\\r\\n10.600000\\r\\n10.600000\\r\\n']}, {'input': '10 100\\r\\n50 51 47 51 48 46 49 51 46 51\\r\\n', 'output': ['9.000000\\r\\n8.000000\\r\\n12.000000\\r\\n8.000000\\r\\n11.000000\\r\\n13.000000\\r\\n10.000000\\r\\n8.000000\\r\\n13.000000\\r\\n8.000000\\r\\n']}, {'input': '10 100\\r\\n13 13 9 12 12 11 13 8 10 13\\r\\n', 'output': ['8.400000\\r\\n8.400000\\r\\n12.400000\\r\\n9.400000\\r\\n9.400000\\r\\n10.400000\\r\\n8.400000\\r\\n13.400000\\r\\n11.400000\\r\\n8.400000\\r\\n']}, {'input': '13 97\\r\\n52 52 51 51 52 52 51 52 51 51 52 52 52\\r\\n', 'output': ['7.076923\\r\\n7.076923\\r\\n8.076923\\r\\n8.076923\\r\\n7.076923\\r\\n7.076923\\r\\n8.076923\\r\\n7.076923\\r\\n8.076923\\r\\n8.076923\\r\\n7.076923\\r\\n7.076923\\r\\n7.076923\\r\\n']}, {'input': '17 99\\r\\n13 13 12 13 11 12 12 12 13 13 11 13 13 13 13 12 13\\r\\n', 'output': ['5.294118\\r\\n5.294118\\r\\n6.294118\\r\\n5.294118\\r\\n7.294118\\r\\n6.294118\\r\\n6.294118\\r\\n6.294118\\r\\n5.294118\\r\\n5.294118\\r\\n7.294118\\r\\n5.294118\\r\\n5.294118\\r\\n5.294118\\r\\n5.294118\\r\\n6.294118\\r\\n5.294118\\r\\n']}, {'input': '9 91\\r\\n52 51 50 52 52 51 50 48 51\\r\\n', 'output': ['8.888889\\r\\n9.888889\\r\\n10.888889\\r\\n8.888889\\r\\n8.888889\\r\\n9.888889\\r\\n10.888889\\r\\n12.888889\\r\\n9.888889\\r\\n']}, {'input': '17 91\\r\\n13 13 13 13 12 12 13 13 12 13 12 13 10 12 13 13 12\\r\\n', 'output': ['4.823529\\r\\n4.823529\\r\\n4.823529\\r\\n4.823529\\r\\n5.823529\\r\\n5.823529\\r\\n4.823529\\r\\n4.823529\\r\\n5.823529\\r\\n4.823529\\r\\n5.823529\\r\\n4.823529\\r\\n7.823529\\r\\n5.823529\\r\\n4.823529\\r\\n4.823529\\r\\n5.823529\\r\\n']}, {'input': '2 3\\r\\n1 1\\r\\n', 'output': ['1.500000\\r\\n1.500000\\r\\n']}, {'input': '2 90\\r\\n0 89\\r\\n', 'output': ['89.500000\\r\\n0.500000\\r\\n']}, {'input': '4 17\\r\\n3 4 8 1\\r\\n', 'output': ['5.250000\\r\\n4.250000\\r\\n0.250000\\r\\n7.250000\\r\\n']}, {'input': '2 9\\r\\n5 5\\r\\n', 'output': ['4.500000\\r\\n4.500000\\r\\n']}, {'input': '7 28\\r\\n1 3 9 10 9 6 10\\r\\n', 'output': ['9.857143\\r\\n7.857143\\r\\n1.857143\\r\\n0.857143\\r\\n1.857143\\r\\n4.857143\\r\\n0.857143\\r\\n']}, {'input': '5 11\\r\\n1 2 3 4 5\\r\\n', 'output': ['4.200000\\r\\n3.200000\\r\\n2.200000\\r\\n1.200000\\r\\n0.200000\\r\\n']}, {'input': '2 1\\r\\n1 1\\r\\n', 'output': ['0.500000\\r\\n0.500000\\r\\n']}, {'input': '5 3\\r\\n1 1 1 1 1\\r\\n', 'output': ['0.600000\\r\\n0.600000\\r\\n0.600000\\r\\n0.600000\\r\\n0.600000\\r\\n']}, {'input': '3 1\\r\\n100 100 100\\r\\n', 'output': ['0.333333\\r\\n0.333333\\r\\n0.333333\\r\\n']}, {'input': '5 50\\r\\n2 2 3 2 2\\r\\n', 'output': ['10.200000\\r\\n10.200000\\r\\n9.200000\\r\\n10.200000\\r\\n10.200000\\r\\n']}, {'input': '3 3\\r\\n2 2 3\\r\\n', 'output': ['1.333333\\r\\n1.333333\\r\\n0.333333\\r\\n']}, {'input': '2 52\\r\\n2 100\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 2\\r\\n2 2 3\\r\\n', 'output': ['1.000000\\r\\n1.000000\\r\\n0.000000\\r\\n']}, {'input': '5 1\\r\\n1 1 1 1 1\\r\\n', 'output': ['0.200000\\r\\n0.200000\\r\\n0.200000\\r\\n0.200000\\r\\n0.200000\\r\\n']}, {'input': '2 4\\r\\n1 2\\r\\n', 'output': ['2.500000\\r\\n1.500000\\r\\n']}, {'input': '5 49\\r\\n1 2 3 4 5\\r\\n', 'output': ['11.800000\\r\\n10.800000\\r\\n9.800000\\r\\n8.800000\\r\\n7.800000\\r\\n']}]", "source_code": "import java.util.*;\n\n/**\n * Created on 7/17/17.\n */\npublic class JavaApplication5 {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String[] arr1 = in.nextLine().split(\" \");\n        int N = Integer.parseInt(arr1[0]), B = Integer.parseInt(arr1[1]), sum = 0, diff = 0;\n        int C[] = new int[N];\n        int maxC = 0;\n        String[] arr2 = in.nextLine().split(\" \");\n        for(int i = 0 ; i < N ; i ++) {\n            C[i] = Integer.parseInt(arr2[i]);\n            sum += C[i];\n            if(C[i] > maxC) maxC = C[i];\n        }\n        diff = (B + sum) / N;\n        if(B + sum < N) System.out.println(-1);\n        else {\n            for(int i = 0 ; i < N ; i ++) {\n                System.out.printf(new java.util.Locale(\"Russian\"),\"%.6f\", ((double)diff + (double)(maxC - C[i])) );\n                System.out.println();\n            }\n        }\n    }\n}\n"}
{"src_uid": "782b819eb0bfc86d6f96f15ac09d5085", "id": 76, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1300, "testcases": "[{'input': ['1\\r\\n'], 'output': ['3\\r\\n']}, {'input': ['2\\r\\n'], 'output': ['10\\r\\n']}, {'input': ['385599124\\r\\n'], 'output': ['493875375\\r\\n']}, {'input': ['989464295\\r\\n'], 'output': ['31966163\\r\\n']}, {'input': ['376367012\\r\\n'], 'output': ['523204186\\r\\n']}, {'input': ['529357306\\r\\n'], 'output': ['142578489\\r\\n']}, {'input': ['782916801\\r\\n'], 'output': ['51174574\\r\\n']}, {'input': ['74859961358140080\\r\\n'], 'output': ['478768275\\r\\n']}, {'input': ['0\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['252509053898415171\\r\\n'], 'output': ['886314547\\r\\n']}, {'input': ['760713016078377938\\r\\n'], 'output': ['79611270\\r\\n']}, {'input': ['919845424847912644\\r\\n'], 'output': ['388845650\\r\\n']}, {'input': ['585335721566249104\\r\\n'], 'output': ['301383716\\r\\n']}, {'input': ['522842183413115087\\r\\n'], 'output': ['556012763\\r\\n']}, {'input': ['148049062285906746\\r\\n'], 'output': ['913927498\\r\\n']}, {'input': ['84324827171274022\\r\\n'], 'output': ['462535280\\r\\n']}, {'input': ['354979172034763159\\r\\n'], 'output': ['239287993\\r\\n']}, {'input': ['1312148742261680\\r\\n'], 'output': ['799725655\\r\\n']}, {'input': ['269587448053313253\\r\\n'], 'output': ['536645997\\r\\n']}, {'input': ['645762257531682045\\r\\n'], 'output': ['543988614\\r\\n']}, {'input': ['615812227854199662\\r\\n'], 'output': ['357939938\\r\\n']}, {'input': ['819875140559301751\\r\\n'], 'output': ['968653685\\r\\n']}, {'input': ['349993003033420740\\r\\n'], 'output': ['709392758\\r\\n']}, {'input': ['891351282398722856\\r\\n'], 'output': ['70758467\\r\\n']}, {'input': ['563324730406715801\\r\\n'], 'output': ['353494903\\r\\n']}, {'input': ['520974001002628386\\r\\n'], 'output': ['164118419\\r\\n']}, {'input': ['666729339260489789\\r\\n'], 'output': ['784700006\\r\\n']}, {'input': ['856674609788912527\\r\\n'], 'output': ['720540265\\r\\n']}, {'input': ['791809296233191092\\r\\n'], 'output': ['369199735\\r\\n']}, {'input': ['711066335916901717\\r\\n'], 'output': ['15590358\\r\\n']}, {'input': ['931356501703211379\\r\\n'], 'output': ['239824013\\r\\n']}, {'input': ['234122431978145893\\r\\n'], 'output': ['905163056\\r\\n']}, {'input': ['1000000000000000000\\r\\n'], 'output': ['899770636\\r\\n']}, {'input': ['3\\r\\n'], 'output': ['36\\r\\n']}, {'input': ['4\\r\\n'], 'output': ['136\\r\\n']}, {'input': ['5\\r\\n'], 'output': ['528\\r\\n']}, {'input': ['6\\r\\n'], 'output': ['2080\\r\\n']}, {'input': ['7\\r\\n'], 'output': ['8256\\r\\n']}, {'input': ['8\\r\\n'], 'output': ['32896\\r\\n']}, {'input': ['9\\r\\n'], 'output': ['131328\\r\\n']}, {'input': ['10\\r\\n'], 'output': ['524800\\r\\n']}, {'input': ['11\\r\\n'], 'output': ['2098176\\r\\n']}, {'input': ['12\\r\\n'], 'output': ['8390656\\r\\n']}, {'input': ['13\\r\\n'], 'output': ['33558528\\r\\n']}, {'input': ['14\\r\\n'], 'output': ['134225920\\r\\n']}, {'input': ['15\\r\\n'], 'output': ['536887296\\r\\n']}, {'input': ['16\\r\\n'], 'output': ['147516402\\r\\n']}, {'input': ['0\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['6265\\r\\n'], 'output': ['980996097\\r\\n']}]", "source_code": "import java.math.BigDecimal;\nimport java.util.*;\n\n\npublic class plant {\n\tstatic long MOD = 1000000007;\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\tlong n = scan.nextLong();\n\t\tlong k,n1,n2,r;\n\t\tif(n==0)\n\t\t{\n\t\t\tSystem.out.println(1);\n\t\t\treturn ;\n\t\t}\n\t\tk = (n-1)/(2*MOD);\n\t\tn1 = n - k*2*MOD;\n\t\tn2 = k;\n\t\tr = exp(2,n1)%MOD;\n\t\tr = mult(r,inv(3))%MOD;\n\t\tr = add(r,mult(exp(2,n2),inv(2)))%MOD;\n\t\tr = mult(r,inv(5))%MOD;\n\t\tSystem.out.println(r);\n\t}\n\tstatic long add(long a, long b)\n\t{\n\t\ta += b;\n\t\tif(a>=MOD)\n\t\t\ta-=MOD;\n\t\treturn a;\n\t}\n\tstatic long sub(long a, long b)\n\t{\n\t\ta -= b;\n\t\tif(a<0)\n\t\t\ta+=MOD;\n\t\treturn a;\n\t}\n\tstatic long mult(long a, long b)\n\t{\n\t\tlong r = (a*b)%MOD;\n\t\treturn r;\n\t}\n\tstatic long inv(long a)\n\t{\n\t\tlong b = MOD, u = 0, v = 1;\n\t\twhile(b!= 0){\n\t\t\tlong t = a/b;\n\t\t\ta = a%b;\n\t\t\tb = t;\n\t\t\tt = u;\n\t\t\tu = u-mult(a,v);\n\t\t\tu = u%MOD;\n\t\t\tv = v-mult(a,u);\n\t\t\tv = v%MOD;\n\t\t\tu = t;\n\t\t}\n\t\tif(u<0)\n\t\t\tu+=MOD;\n\t\treturn u;\n\t}\n\tstatic long exp(long a, long n)\n\t{\n\t\tif(n==0)\n\t\t\treturn 1;\n\t\tlong temp = exp(a,n/2);\n\t\ttemp = mult(temp,temp);\n\t\tif(n%2==1)\n\t\t\ttemp = mult(temp,a);\n\t\treturn temp;\n\t}\n}\n"}
{"src_uid": "782b819eb0bfc86d6f96f15ac09d5085", "id": 76, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1300, "testcases": "[{'input': ['1\\r\\n'], 'output': ['3\\r\\n']}, {'input': ['2\\r\\n'], 'output': ['10\\r\\n']}, {'input': ['385599124\\r\\n'], 'output': ['493875375\\r\\n']}, {'input': ['989464295\\r\\n'], 'output': ['31966163\\r\\n']}, {'input': ['376367012\\r\\n'], 'output': ['523204186\\r\\n']}, {'input': ['529357306\\r\\n'], 'output': ['142578489\\r\\n']}, {'input': ['782916801\\r\\n'], 'output': ['51174574\\r\\n']}, {'input': ['74859961358140080\\r\\n'], 'output': ['478768275\\r\\n']}, {'input': ['0\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['252509053898415171\\r\\n'], 'output': ['886314547\\r\\n']}, {'input': ['760713016078377938\\r\\n'], 'output': ['79611270\\r\\n']}, {'input': ['919845424847912644\\r\\n'], 'output': ['388845650\\r\\n']}, {'input': ['585335721566249104\\r\\n'], 'output': ['301383716\\r\\n']}, {'input': ['522842183413115087\\r\\n'], 'output': ['556012763\\r\\n']}, {'input': ['148049062285906746\\r\\n'], 'output': ['913927498\\r\\n']}, {'input': ['84324827171274022\\r\\n'], 'output': ['462535280\\r\\n']}, {'input': ['354979172034763159\\r\\n'], 'output': ['239287993\\r\\n']}, {'input': ['1312148742261680\\r\\n'], 'output': ['799725655\\r\\n']}, {'input': ['269587448053313253\\r\\n'], 'output': ['536645997\\r\\n']}, {'input': ['645762257531682045\\r\\n'], 'output': ['543988614\\r\\n']}, {'input': ['615812227854199662\\r\\n'], 'output': ['357939938\\r\\n']}, {'input': ['819875140559301751\\r\\n'], 'output': ['968653685\\r\\n']}, {'input': ['349993003033420740\\r\\n'], 'output': ['709392758\\r\\n']}, {'input': ['891351282398722856\\r\\n'], 'output': ['70758467\\r\\n']}, {'input': ['563324730406715801\\r\\n'], 'output': ['353494903\\r\\n']}, {'input': ['520974001002628386\\r\\n'], 'output': ['164118419\\r\\n']}, {'input': ['666729339260489789\\r\\n'], 'output': ['784700006\\r\\n']}, {'input': ['856674609788912527\\r\\n'], 'output': ['720540265\\r\\n']}, {'input': ['791809296233191092\\r\\n'], 'output': ['369199735\\r\\n']}, {'input': ['711066335916901717\\r\\n'], 'output': ['15590358\\r\\n']}, {'input': ['931356501703211379\\r\\n'], 'output': ['239824013\\r\\n']}, {'input': ['234122431978145893\\r\\n'], 'output': ['905163056\\r\\n']}, {'input': ['1000000000000000000\\r\\n'], 'output': ['899770636\\r\\n']}, {'input': ['3\\r\\n'], 'output': ['36\\r\\n']}, {'input': ['4\\r\\n'], 'output': ['136\\r\\n']}, {'input': ['5\\r\\n'], 'output': ['528\\r\\n']}, {'input': ['6\\r\\n'], 'output': ['2080\\r\\n']}, {'input': ['7\\r\\n'], 'output': ['8256\\r\\n']}, {'input': ['8\\r\\n'], 'output': ['32896\\r\\n']}, {'input': ['9\\r\\n'], 'output': ['131328\\r\\n']}, {'input': ['10\\r\\n'], 'output': ['524800\\r\\n']}, {'input': ['11\\r\\n'], 'output': ['2098176\\r\\n']}, {'input': ['12\\r\\n'], 'output': ['8390656\\r\\n']}, {'input': ['13\\r\\n'], 'output': ['33558528\\r\\n']}, {'input': ['14\\r\\n'], 'output': ['134225920\\r\\n']}, {'input': ['15\\r\\n'], 'output': ['536887296\\r\\n']}, {'input': ['16\\r\\n'], 'output': ['147516402\\r\\n']}, {'input': ['0\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['6265\\r\\n'], 'output': ['980996097\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class R74A {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner input = new Scanner (System.in);\n\t\t\n\t\tlong n = input.nextLong();\n\t\tlong MOD = 1000000007;\n\t\t\n\t\tlong a = 1; long b = 2;\n\t\t\n\t\tif(n == 0){System.out.println(2);System.exit(0);}\n\t\t\n\t\twhile(n!= 0){\n\t\t\tif(n % 2 == 1){a = (2 * a % MOD) % MOD;}\n\t\t\tb = (b*b % MOD) % MOD;\n\t\t\tn /= 2;\n\t\t}\n\t\t\n\t\tSystem.out.println(((a%MOD)*(b%MOD))%MOD);\n\t}\n}\n"}
{"src_uid": "782b819eb0bfc86d6f96f15ac09d5085", "id": 76, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1300, "testcases": "[{'input': ['1\\r\\n'], 'output': ['3\\r\\n']}, {'input': ['2\\r\\n'], 'output': ['10\\r\\n']}, {'input': ['385599124\\r\\n'], 'output': ['493875375\\r\\n']}, {'input': ['989464295\\r\\n'], 'output': ['31966163\\r\\n']}, {'input': ['376367012\\r\\n'], 'output': ['523204186\\r\\n']}, {'input': ['529357306\\r\\n'], 'output': ['142578489\\r\\n']}, {'input': ['782916801\\r\\n'], 'output': ['51174574\\r\\n']}, {'input': ['74859961358140080\\r\\n'], 'output': ['478768275\\r\\n']}, {'input': ['0\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['252509053898415171\\r\\n'], 'output': ['886314547\\r\\n']}, {'input': ['760713016078377938\\r\\n'], 'output': ['79611270\\r\\n']}, {'input': ['919845424847912644\\r\\n'], 'output': ['388845650\\r\\n']}, {'input': ['585335721566249104\\r\\n'], 'output': ['301383716\\r\\n']}, {'input': ['522842183413115087\\r\\n'], 'output': ['556012763\\r\\n']}, {'input': ['148049062285906746\\r\\n'], 'output': ['913927498\\r\\n']}, {'input': ['84324827171274022\\r\\n'], 'output': ['462535280\\r\\n']}, {'input': ['354979172034763159\\r\\n'], 'output': ['239287993\\r\\n']}, {'input': ['1312148742261680\\r\\n'], 'output': ['799725655\\r\\n']}, {'input': ['269587448053313253\\r\\n'], 'output': ['536645997\\r\\n']}, {'input': ['645762257531682045\\r\\n'], 'output': ['543988614\\r\\n']}, {'input': ['615812227854199662\\r\\n'], 'output': ['357939938\\r\\n']}, {'input': ['819875140559301751\\r\\n'], 'output': ['968653685\\r\\n']}, {'input': ['349993003033420740\\r\\n'], 'output': ['709392758\\r\\n']}, {'input': ['891351282398722856\\r\\n'], 'output': ['70758467\\r\\n']}, {'input': ['563324730406715801\\r\\n'], 'output': ['353494903\\r\\n']}, {'input': ['520974001002628386\\r\\n'], 'output': ['164118419\\r\\n']}, {'input': ['666729339260489789\\r\\n'], 'output': ['784700006\\r\\n']}, {'input': ['856674609788912527\\r\\n'], 'output': ['720540265\\r\\n']}, {'input': ['791809296233191092\\r\\n'], 'output': ['369199735\\r\\n']}, {'input': ['711066335916901717\\r\\n'], 'output': ['15590358\\r\\n']}, {'input': ['931356501703211379\\r\\n'], 'output': ['239824013\\r\\n']}, {'input': ['234122431978145893\\r\\n'], 'output': ['905163056\\r\\n']}, {'input': ['1000000000000000000\\r\\n'], 'output': ['899770636\\r\\n']}, {'input': ['3\\r\\n'], 'output': ['36\\r\\n']}, {'input': ['4\\r\\n'], 'output': ['136\\r\\n']}, {'input': ['5\\r\\n'], 'output': ['528\\r\\n']}, {'input': ['6\\r\\n'], 'output': ['2080\\r\\n']}, {'input': ['7\\r\\n'], 'output': ['8256\\r\\n']}, {'input': ['8\\r\\n'], 'output': ['32896\\r\\n']}, {'input': ['9\\r\\n'], 'output': ['131328\\r\\n']}, {'input': ['10\\r\\n'], 'output': ['524800\\r\\n']}, {'input': ['11\\r\\n'], 'output': ['2098176\\r\\n']}, {'input': ['12\\r\\n'], 'output': ['8390656\\r\\n']}, {'input': ['13\\r\\n'], 'output': ['33558528\\r\\n']}, {'input': ['14\\r\\n'], 'output': ['134225920\\r\\n']}, {'input': ['15\\r\\n'], 'output': ['536887296\\r\\n']}, {'input': ['16\\r\\n'], 'output': ['147516402\\r\\n']}, {'input': ['0\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['6265\\r\\n'], 'output': ['980996097\\r\\n']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n    \n    public static void main(String[] args){\n        new Thread(new Runnable(){\n            public void run(){\n                InputStream input = System.in;\n                BufferedReader reader = new BufferedReader(new InputStreamReader(input));\n                String[] str = null;\n                try {\n                    long a = Long.parseLong(reader.readLine());\n                    long b = a%2;\n                    long c = 0;\n                    if (b==0) c = 2*solve(a/2);\n                    if (b==1) c = solve(a/2);\n                    System.out.println((int)(c%1000000007));\n                } catch (IOException e) {}\n            }\n        }).start();\n    }\n    \n    static long solve(long a){\n        if (a==0) return 1;\n        if (a==1) return 2;\n        return (solve(a/2)+solve(a-a/2))%1000000007;\n    }\n}"}
{"src_uid": "782b819eb0bfc86d6f96f15ac09d5085", "id": 76, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1300, "testcases": "[{'input': ['1\\r\\n'], 'output': ['3\\r\\n']}, {'input': ['2\\r\\n'], 'output': ['10\\r\\n']}, {'input': ['385599124\\r\\n'], 'output': ['493875375\\r\\n']}, {'input': ['989464295\\r\\n'], 'output': ['31966163\\r\\n']}, {'input': ['376367012\\r\\n'], 'output': ['523204186\\r\\n']}, {'input': ['529357306\\r\\n'], 'output': ['142578489\\r\\n']}, {'input': ['782916801\\r\\n'], 'output': ['51174574\\r\\n']}, {'input': ['74859961358140080\\r\\n'], 'output': ['478768275\\r\\n']}, {'input': ['0\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['252509053898415171\\r\\n'], 'output': ['886314547\\r\\n']}, {'input': ['760713016078377938\\r\\n'], 'output': ['79611270\\r\\n']}, {'input': ['919845424847912644\\r\\n'], 'output': ['388845650\\r\\n']}, {'input': ['585335721566249104\\r\\n'], 'output': ['301383716\\r\\n']}, {'input': ['522842183413115087\\r\\n'], 'output': ['556012763\\r\\n']}, {'input': ['148049062285906746\\r\\n'], 'output': ['913927498\\r\\n']}, {'input': ['84324827171274022\\r\\n'], 'output': ['462535280\\r\\n']}, {'input': ['354979172034763159\\r\\n'], 'output': ['239287993\\r\\n']}, {'input': ['1312148742261680\\r\\n'], 'output': ['799725655\\r\\n']}, {'input': ['269587448053313253\\r\\n'], 'output': ['536645997\\r\\n']}, {'input': ['645762257531682045\\r\\n'], 'output': ['543988614\\r\\n']}, {'input': ['615812227854199662\\r\\n'], 'output': ['357939938\\r\\n']}, {'input': ['819875140559301751\\r\\n'], 'output': ['968653685\\r\\n']}, {'input': ['349993003033420740\\r\\n'], 'output': ['709392758\\r\\n']}, {'input': ['891351282398722856\\r\\n'], 'output': ['70758467\\r\\n']}, {'input': ['563324730406715801\\r\\n'], 'output': ['353494903\\r\\n']}, {'input': ['520974001002628386\\r\\n'], 'output': ['164118419\\r\\n']}, {'input': ['666729339260489789\\r\\n'], 'output': ['784700006\\r\\n']}, {'input': ['856674609788912527\\r\\n'], 'output': ['720540265\\r\\n']}, {'input': ['791809296233191092\\r\\n'], 'output': ['369199735\\r\\n']}, {'input': ['711066335916901717\\r\\n'], 'output': ['15590358\\r\\n']}, {'input': ['931356501703211379\\r\\n'], 'output': ['239824013\\r\\n']}, {'input': ['234122431978145893\\r\\n'], 'output': ['905163056\\r\\n']}, {'input': ['1000000000000000000\\r\\n'], 'output': ['899770636\\r\\n']}, {'input': ['3\\r\\n'], 'output': ['36\\r\\n']}, {'input': ['4\\r\\n'], 'output': ['136\\r\\n']}, {'input': ['5\\r\\n'], 'output': ['528\\r\\n']}, {'input': ['6\\r\\n'], 'output': ['2080\\r\\n']}, {'input': ['7\\r\\n'], 'output': ['8256\\r\\n']}, {'input': ['8\\r\\n'], 'output': ['32896\\r\\n']}, {'input': ['9\\r\\n'], 'output': ['131328\\r\\n']}, {'input': ['10\\r\\n'], 'output': ['524800\\r\\n']}, {'input': ['11\\r\\n'], 'output': ['2098176\\r\\n']}, {'input': ['12\\r\\n'], 'output': ['8390656\\r\\n']}, {'input': ['13\\r\\n'], 'output': ['33558528\\r\\n']}, {'input': ['14\\r\\n'], 'output': ['134225920\\r\\n']}, {'input': ['15\\r\\n'], 'output': ['536887296\\r\\n']}, {'input': ['16\\r\\n'], 'output': ['147516402\\r\\n']}, {'input': ['0\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['6265\\r\\n'], 'output': ['980996097\\r\\n']}]", "source_code": "/**\n * ******* Created on 11/12/18 8:41 PM*******\n */\n\nimport java.io.*;\nimport java.util.*;\n\npublic class JavaApplication19 {\n    \n    static long mod=1000000007;\n    static long p25=390859885463056244;\n    static long p50=1439652855299374079;\n    \n    public static void main(String[] args) throws IOException {\n        // TODO code application logic here\n        InputStreamReader in = new InputStreamReader(System.in);\n        int l = 1024;\n        char[] buffer = new char[l];\n        int k = in.read(buffer, 0, l);\n        String s = new String(buffer);\n        in.close();\n        StringBuffer sb = new StringBuffer(s);\n        sb.deleteCharAt(k - 1);\n        \n        StringBuilder res = new StringBuilder();\n        try (PrintWriter out = new PrintWriter(System.out)) {\n            res = solve(sb.toString());\n            String solution = res.toString();\n            out.println(solution);\n            out.flush();\n        }\n    }\n    \n    static StringBuilder solve(String s){\n        long n = Long.parseLong(s);\n        long[] dp = new long[n+1];\n        dp[0] = 1;\n        dp[1] = 1;\n        for(int i = 2; i <= n; i++){\n            dp[i] = ((dp[i - 1] * 2) % mod + dp[i - 2]) % mod;\n        }\n        \n        StringBuilder ans = new StringBuilder();\n        ans.append(dp[n]%mod);\n        return ans;\n    }\n}\n"}
{"src_uid": "782b819eb0bfc86d6f96f15ac09d5085", "id": 76, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1300, "testcases": "[{'input': ['1\\r\\n'], 'output': ['3\\r\\n']}, {'input': ['2\\r\\n'], 'output': ['10\\r\\n']}, {'input': ['385599124\\r\\n'], 'output': ['493875375\\r\\n']}, {'input': ['989464295\\r\\n'], 'output': ['31966163\\r\\n']}, {'input': ['376367012\\r\\n'], 'output': ['523204186\\r\\n']}, {'input': ['529357306\\r\\n'], 'output': ['142578489\\r\\n']}, {'input': ['782916801\\r\\n'], 'output': ['51174574\\r\\n']}, {'input': ['74859961358140080\\r\\n'], 'output': ['478768275\\r\\n']}, {'input': ['0\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['252509053898415171\\r\\n'], 'output': ['886314547\\r\\n']}, {'input': ['760713016078377938\\r\\n'], 'output': ['79611270\\r\\n']}, {'input': ['919845424847912644\\r\\n'], 'output': ['388845650\\r\\n']}, {'input': ['585335721566249104\\r\\n'], 'output': ['301383716\\r\\n']}, {'input': ['522842183413115087\\r\\n'], 'output': ['556012763\\r\\n']}, {'input': ['148049062285906746\\r\\n'], 'output': ['913927498\\r\\n']}, {'input': ['84324827171274022\\r\\n'], 'output': ['462535280\\r\\n']}, {'input': ['354979172034763159\\r\\n'], 'output': ['239287993\\r\\n']}, {'input': ['1312148742261680\\r\\n'], 'output': ['799725655\\r\\n']}, {'input': ['269587448053313253\\r\\n'], 'output': ['536645997\\r\\n']}, {'input': ['645762257531682045\\r\\n'], 'output': ['543988614\\r\\n']}, {'input': ['615812227854199662\\r\\n'], 'output': ['357939938\\r\\n']}, {'input': ['819875140559301751\\r\\n'], 'output': ['968653685\\r\\n']}, {'input': ['349993003033420740\\r\\n'], 'output': ['709392758\\r\\n']}, {'input': ['891351282398722856\\r\\n'], 'output': ['70758467\\r\\n']}, {'input': ['563324730406715801\\r\\n'], 'output': ['353494903\\r\\n']}, {'input': ['520974001002628386\\r\\n'], 'output': ['164118419\\r\\n']}, {'input': ['666729339260489789\\r\\n'], 'output': ['784700006\\r\\n']}, {'input': ['856674609788912527\\r\\n'], 'output': ['720540265\\r\\n']}, {'input': ['791809296233191092\\r\\n'], 'output': ['369199735\\r\\n']}, {'input': ['711066335916901717\\r\\n'], 'output': ['15590358\\r\\n']}, {'input': ['931356501703211379\\r\\n'], 'output': ['239824013\\r\\n']}, {'input': ['234122431978145893\\r\\n'], 'output': ['905163056\\r\\n']}, {'input': ['1000000000000000000\\r\\n'], 'output': ['899770636\\r\\n']}, {'input': ['3\\r\\n'], 'output': ['36\\r\\n']}, {'input': ['4\\r\\n'], 'output': ['136\\r\\n']}, {'input': ['5\\r\\n'], 'output': ['528\\r\\n']}, {'input': ['6\\r\\n'], 'output': ['2080\\r\\n']}, {'input': ['7\\r\\n'], 'output': ['8256\\r\\n']}, {'input': ['8\\r\\n'], 'output': ['32896\\r\\n']}, {'input': ['9\\r\\n'], 'output': ['131328\\r\\n']}, {'input': ['10\\r\\n'], 'output': ['524800\\r\\n']}, {'input': ['11\\r\\n'], 'output': ['2098176\\r\\n']}, {'input': ['12\\r\\n'], 'output': ['8390656\\r\\n']}, {'input': ['13\\r\\n'], 'output': ['33558528\\r\\n']}, {'input': ['14\\r\\n'], 'output': ['134225920\\r\\n']}, {'input': ['15\\r\\n'], 'output': ['536887296\\r\\n']}, {'input': ['16\\r\\n'], 'output': ['147516402\\r\\n']}, {'input': ['0\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['6265\\r\\n'], 'output': ['980996097\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Main {\n \n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tlong n;\n\t\tScanner sc = new Scanner(System.in);\n\t\tn = sc.nextLong();\n\t\t\n\t\tif(n == 0) System.out.println(1);\n\t\telse System.out.println(mult(new long[][] {{1, 0}}, expo(new long[][] {{3, 1}, {1, 3}}, n))[0][0]);\n\t}\n\t\n\tpublic static long[][] mult(long[][] a, long[][] b) {\n\t\tlong[][] res = new long[a.length][b[0].length];\n\t\tfor(int i = 0; i < a.length; i++) {\n\t\t\tfor(int j = 0; j < b[0].length; j++) {\n\t\t\t\tfor(int k = 0; k < a[0].length; k++) {\n\t\t\t\t\tres[i][j] = (res[i][j] + a[i][k]*b[k][j])%1000000007;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\t\n\tpublic static long[][] expo(long[][] base, long pow) {\n\t\tif(pow == 1) return base;\n\t\tlong[][] tmp = expo(base, pow/2);\n\t\ttmp = mult(tmp, tmp);\n\t\tif(pow%2 == 1) tmp = mult(tmp, base);\n\t\treturn tmp;\n\t}\n}\n"}
{"src_uid": "062a171cc3ea717ea95ede9d7a1c3a43", "id": 77, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1300, "testcases": "[{'input': '5 5 3 2\\r\\n', 'output': ['2']}, {'input': '7 5 5 2\\r\\n', 'output': ['2']}, {'input': '4 4 4 4\\r\\n', 'output': ['1']}, {'input': '1 1 1 1\\r\\n', 'output': ['1']}, {'input': '4000 1 2 3\\r\\n', 'output': ['4000']}, {'input': '4000 3 4 5\\r\\n', 'output': ['1333']}, {'input': '10 3 4 5\\r\\n', 'output': ['3']}, {'input': '100 23 15 50\\r\\n', 'output': ['2']}, {'input': '3119 3515 1021 7\\r\\n', 'output': ['11']}, {'input': '918 102 1327 1733\\r\\n', 'output': ['9']}, {'input': '3164 42 430 1309\\r\\n', 'output': ['15']}, {'input': '3043 317 1141 2438\\r\\n', 'output': ['7']}, {'input': '26 1 772 2683\\r\\n', 'output': ['26']}, {'input': '370 2 1 15\\r\\n', 'output': ['370']}, {'input': '734 12 6 2\\r\\n', 'output': ['367']}, {'input': '418 18 14 17\\r\\n', 'output': ['29']}, {'input': '18 16 28 9\\r\\n', 'output': ['2']}, {'input': '14 6 2 17\\r\\n', 'output': ['7']}, {'input': '29 27 18 2\\r\\n', 'output': ['2']}, {'input': '29 12 7 10\\r\\n', 'output': ['3']}, {'input': '27 23 4 3\\r\\n', 'output': ['9']}, {'input': '5 14 5 2\\r\\n', 'output': ['1']}, {'input': '5 17 26 5\\r\\n', 'output': ['1']}, {'input': '9 1 10 3\\r\\n', 'output': ['9']}, {'input': '2 19 15 1\\r\\n', 'output': ['2']}, {'input': '4 6 4 9\\r\\n', 'output': ['1']}, {'input': '10 6 2 9\\r\\n', 'output': ['5']}, {'input': '2 2 9 6\\r\\n', 'output': ['1']}, {'input': '6 2 4 1\\r\\n', 'output': ['6']}, {'input': '27 24 5 27\\r\\n', 'output': ['1']}, {'input': '2683 83 26 2709\\r\\n', 'output': ['101']}, {'input': '728 412 789 158\\r\\n', 'output': ['3']}, {'input': '3964 4 2916 176\\r\\n', 'output': ['991']}, {'input': '3399 2035 2 3334\\r\\n', 'output': ['683']}, {'input': '3455 244 3301 3\\r\\n', 'output': ['991']}, {'input': '595 2263 3625 1\\r\\n', 'output': ['595']}, {'input': '4000 1 1 1\\r\\n', 'output': ['4000']}, {'input': '3999 2 2 3999\\r\\n', 'output': ['1']}, {'input': '25 6 8 11\\r\\n', 'output': ['3']}, {'input': '4000 500 1000 2000\\r\\n', 'output': ['8']}, {'input': '53 10 11 23\\r\\n', 'output': ['5']}, {'input': '100 100 1 1\\r\\n', 'output': ['100']}, {'input': '17 3 4 10\\r\\n', 'output': ['5']}, {'input': '413 101 102 105\\r\\n', 'output': ['4']}, {'input': '490 4 49 50\\r\\n', 'output': ['111']}, {'input': '3999 2 3 3\\r\\n', 'output': ['1999']}, {'input': '8 3 8 4\\r\\n', 'output': ['2']}, {'input': '5 1 3 3\\r\\n', 'output': ['5']}, {'input': '100 3 17 22\\r\\n', 'output': ['27']}, {'input': '4000 2 3 4\\r\\n', 'output': ['2000']}, {'input': '4000 3 3 5\\r\\n', 'output': ['1332']}, {'input': '13 4 6 7\\r\\n', 'output': ['2']}, {'input': '4000 5 2 2\\r\\n', 'output': ['2000']}, {'input': '3999 2 2 3\\r\\n', 'output': ['1999']}, {'input': '4000 33 7 3333\\r\\n', 'output': ['564']}, {'input': '60 33 20 9\\r\\n', 'output': ['4']}, {'input': '100 9 11 99\\r\\n', 'output': ['10']}, {'input': '2009 6 8 9\\r\\n', 'output': ['334']}]", "source_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.stream.Collectors;\n\n\npublic class Main {\n\tstatic int n,a,b,c,m;\n\t\n\tpublic static void main(String[] args) throws IOException {\n\t\tin= new BufferedReader(new InputStreamReader(System.in));\n\t\tString s[]=in.readLine().split(\" \");\n\t\tn=Integer.parseInt(s[0]);\n\t\ta=Integer.parseInt(s[1]);\n\t\tb=Integer.parseInt(s[2]);\n\t\tc=Integer.parseInt(s[3]);\n\t\tm=c;\n\t\tm=a>b?max(a,m):max(b,m);\n\t\tm=b+c>a?max(a-b,m):max(c-b,m);\n\t\tm=a+b>c?max(c-a,m):max(a-c,m);\n\t\tm=c+b>a?max(a-c,m):max(b-c,m);\n\t\tout(m+\"\");\n\t}\n\tprivate static int max(int first,int second) {\n\t\treturn first>=second?first:second;\n\t}\n\tprivate static void out(String result) throws IOException {\n\t\tSystem.out.print(result);\n\t}\n\tprivate static String input() throws IOException {\n\t\treturn in.readLine();\n\t}\n\tprivate static BufferedReader in;\n}\n"}
{"src_uid": "062a171cc3ea717ea95ede9d7a1c3a43", "id": 77, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1300, "testcases": "[{'input': '5 5 3 2\\r\\n', 'output': ['2']}, {'input': '7 5 5 2\\r\\n', 'output': ['2']}, {'input': '4 4 4 4\\r\\n', 'output': ['1']}, {'input': '1 1 1 1\\r\\n', 'output': ['1']}, {'input': '4000 1 2 3\\r\\n', 'output': ['4000']}, {'input': '4000 3 4 5\\r\\n', 'output': ['1333']}, {'input': '10 3 4 5\\r\\n', 'output': ['3']}, {'input': '100 23 15 50\\r\\n', 'output': ['2']}, {'input': '3119 3515 1021 7\\r\\n', 'output': ['11']}, {'input': '918 102 1327 1733\\r\\n', 'output': ['9']}, {'input': '3164 42 430 1309\\r\\n', 'output': ['15']}, {'input': '3043 317 1141 2438\\r\\n', 'output': ['7']}, {'input': '26 1 772 2683\\r\\n', 'output': ['26']}, {'input': '370 2 1 15\\r\\n', 'output': ['370']}, {'input': '734 12 6 2\\r\\n', 'output': ['367']}, {'input': '418 18 14 17\\r\\n', 'output': ['29']}, {'input': '18 16 28 9\\r\\n', 'output': ['2']}, {'input': '14 6 2 17\\r\\n', 'output': ['7']}, {'input': '29 27 18 2\\r\\n', 'output': ['2']}, {'input': '29 12 7 10\\r\\n', 'output': ['3']}, {'input': '27 23 4 3\\r\\n', 'output': ['9']}, {'input': '5 14 5 2\\r\\n', 'output': ['1']}, {'input': '5 17 26 5\\r\\n', 'output': ['1']}, {'input': '9 1 10 3\\r\\n', 'output': ['9']}, {'input': '2 19 15 1\\r\\n', 'output': ['2']}, {'input': '4 6 4 9\\r\\n', 'output': ['1']}, {'input': '10 6 2 9\\r\\n', 'output': ['5']}, {'input': '2 2 9 6\\r\\n', 'output': ['1']}, {'input': '6 2 4 1\\r\\n', 'output': ['6']}, {'input': '27 24 5 27\\r\\n', 'output': ['1']}, {'input': '2683 83 26 2709\\r\\n', 'output': ['101']}, {'input': '728 412 789 158\\r\\n', 'output': ['3']}, {'input': '3964 4 2916 176\\r\\n', 'output': ['991']}, {'input': '3399 2035 2 3334\\r\\n', 'output': ['683']}, {'input': '3455 244 3301 3\\r\\n', 'output': ['991']}, {'input': '595 2263 3625 1\\r\\n', 'output': ['595']}, {'input': '4000 1 1 1\\r\\n', 'output': ['4000']}, {'input': '3999 2 2 3999\\r\\n', 'output': ['1']}, {'input': '25 6 8 11\\r\\n', 'output': ['3']}, {'input': '4000 500 1000 2000\\r\\n', 'output': ['8']}, {'input': '53 10 11 23\\r\\n', 'output': ['5']}, {'input': '100 100 1 1\\r\\n', 'output': ['100']}, {'input': '17 3 4 10\\r\\n', 'output': ['5']}, {'input': '413 101 102 105\\r\\n', 'output': ['4']}, {'input': '490 4 49 50\\r\\n', 'output': ['111']}, {'input': '3999 2 3 3\\r\\n', 'output': ['1999']}, {'input': '8 3 8 4\\r\\n', 'output': ['2']}, {'input': '5 1 3 3\\r\\n', 'output': ['5']}, {'input': '100 3 17 22\\r\\n', 'output': ['27']}, {'input': '4000 2 3 4\\r\\n', 'output': ['2000']}, {'input': '4000 3 3 5\\r\\n', 'output': ['1332']}, {'input': '13 4 6 7\\r\\n', 'output': ['2']}, {'input': '4000 5 2 2\\r\\n', 'output': ['2000']}, {'input': '3999 2 2 3\\r\\n', 'output': ['1999']}, {'input': '4000 33 7 3333\\r\\n', 'output': ['564']}, {'input': '60 33 20 9\\r\\n', 'output': ['4']}, {'input': '100 9 11 99\\r\\n', 'output': ['10']}, {'input': '2009 6 8 9\\r\\n', 'output': ['334']}]", "source_code": "//package main;\n\nimport java.util.*;\n\n//import com.google.gson.*;\nimport java.lang.reflect.Array;\nimport java.io.*;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.util.Arrays;\n\npublic class Main {\n\tpublic static int[] countDivision(int a){\n\t\tint[] res = new int[a + 1];\n\t\tArrays.fill(res, 1);\n\t\tfor(int i = 2; i * i <= a; i++){\n\t\t\tif(a % i == 0){\n\t\t\t\tres[i] += 1;\n\t\t\t\tres[a / i] += 1;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\tpublic static boolean isPrime(int n){\n\t\tboolean result = true;\n\t\tfor(int i = 2; i < n; i++){\n\t\t\tif(n % i == 0){\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\tpublic static int gcd(int a, int b){\n\t\tif(b == 0){\n\t\t\treturn a;\n\t\t}\n\t\treturn gcd(b, a % b);\n\t}\n\tpublic static void main(String[] args) throws Exception{\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt(), a = in.nextInt(), b = in.nextInt(), c = in.nextInt();\n\t\tint[] res = new int[3];\n\t\tres[0] = n % a;\n\t\tres[1] = (n / a) % b;\n\t\tres[2] = (n / a) / b;\n\t\tint max = res[0];\n\t\tfor(int i = 1; i < 3; i++){\n\t\t\tif(res[i] > max){\n\t\t\t\tmax = res[i];\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n}\n"}
{"src_uid": "062a171cc3ea717ea95ede9d7a1c3a43", "id": 77, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1300, "testcases": "[{'input': '5 5 3 2\\r\\n', 'output': ['2']}, {'input': '7 5 5 2\\r\\n', 'output': ['2']}, {'input': '4 4 4 4\\r\\n', 'output': ['1']}, {'input': '1 1 1 1\\r\\n', 'output': ['1']}, {'input': '4000 1 2 3\\r\\n', 'output': ['4000']}, {'input': '4000 3 4 5\\r\\n', 'output': ['1333']}, {'input': '10 3 4 5\\r\\n', 'output': ['3']}, {'input': '100 23 15 50\\r\\n', 'output': ['2']}, {'input': '3119 3515 1021 7\\r\\n', 'output': ['11']}, {'input': '918 102 1327 1733\\r\\n', 'output': ['9']}, {'input': '3164 42 430 1309\\r\\n', 'output': ['15']}, {'input': '3043 317 1141 2438\\r\\n', 'output': ['7']}, {'input': '26 1 772 2683\\r\\n', 'output': ['26']}, {'input': '370 2 1 15\\r\\n', 'output': ['370']}, {'input': '734 12 6 2\\r\\n', 'output': ['367']}, {'input': '418 18 14 17\\r\\n', 'output': ['29']}, {'input': '18 16 28 9\\r\\n', 'output': ['2']}, {'input': '14 6 2 17\\r\\n', 'output': ['7']}, {'input': '29 27 18 2\\r\\n', 'output': ['2']}, {'input': '29 12 7 10\\r\\n', 'output': ['3']}, {'input': '27 23 4 3\\r\\n', 'output': ['9']}, {'input': '5 14 5 2\\r\\n', 'output': ['1']}, {'input': '5 17 26 5\\r\\n', 'output': ['1']}, {'input': '9 1 10 3\\r\\n', 'output': ['9']}, {'input': '2 19 15 1\\r\\n', 'output': ['2']}, {'input': '4 6 4 9\\r\\n', 'output': ['1']}, {'input': '10 6 2 9\\r\\n', 'output': ['5']}, {'input': '2 2 9 6\\r\\n', 'output': ['1']}, {'input': '6 2 4 1\\r\\n', 'output': ['6']}, {'input': '27 24 5 27\\r\\n', 'output': ['1']}, {'input': '2683 83 26 2709\\r\\n', 'output': ['101']}, {'input': '728 412 789 158\\r\\n', 'output': ['3']}, {'input': '3964 4 2916 176\\r\\n', 'output': ['991']}, {'input': '3399 2035 2 3334\\r\\n', 'output': ['683']}, {'input': '3455 244 3301 3\\r\\n', 'output': ['991']}, {'input': '595 2263 3625 1\\r\\n', 'output': ['595']}, {'input': '4000 1 1 1\\r\\n', 'output': ['4000']}, {'input': '3999 2 2 3999\\r\\n', 'output': ['1']}, {'input': '25 6 8 11\\r\\n', 'output': ['3']}, {'input': '4000 500 1000 2000\\r\\n', 'output': ['8']}, {'input': '53 10 11 23\\r\\n', 'output': ['5']}, {'input': '100 100 1 1\\r\\n', 'output': ['100']}, {'input': '17 3 4 10\\r\\n', 'output': ['5']}, {'input': '413 101 102 105\\r\\n', 'output': ['4']}, {'input': '490 4 49 50\\r\\n', 'output': ['111']}, {'input': '3999 2 3 3\\r\\n', 'output': ['1999']}, {'input': '8 3 8 4\\r\\n', 'output': ['2']}, {'input': '5 1 3 3\\r\\n', 'output': ['5']}, {'input': '100 3 17 22\\r\\n', 'output': ['27']}, {'input': '4000 2 3 4\\r\\n', 'output': ['2000']}, {'input': '4000 3 3 5\\r\\n', 'output': ['1332']}, {'input': '13 4 6 7\\r\\n', 'output': ['2']}, {'input': '4000 5 2 2\\r\\n', 'output': ['2000']}, {'input': '3999 2 2 3\\r\\n', 'output': ['1999']}, {'input': '4000 33 7 3333\\r\\n', 'output': ['564']}, {'input': '60 33 20 9\\r\\n', 'output': ['4']}, {'input': '100 9 11 99\\r\\n', 'output': ['10']}, {'input': '2009 6 8 9\\r\\n', 'output': ['334']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        InputStream inputStream = System.in;\n        InputReader inputReader = new InputReader(inputStream);\n        int[] intArray = inputReader.nextIntArray();\n        int n = intArray[0];\n        int a = intArray[1];\n        int b = intArray[2];\n        int c = intArray[3];\n        int min = Math.min(Math.min(a, b), c);\n        int max = Math.max(Math.max(a, b), c);\n        if (n % min == 0) {\n            System.out.println(n / min);\n        } else {\n            System.out.println(n / min + 1);\n        }\n    }\n\n    private static class InputReader {\n        private final InputStream stream;\n        private final byte[] buffer = new byte[1024];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n            if (ptr < buflen) {\n                return true;\n            } else {\n                ptr = 0;\n                try {\n                    buflen = stream.read(buffer);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                if (buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n\n        private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n        private static boolean isWhiteSpace(int c) { return c =='' || c == '\\t' || c == '\\n' || c == '\\r';}\n\n        private boolean hasNextChar() { while (hasNextByte() &&!isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\n        private int readChar() { while (hasNextByte() &&!isPrintableChar(buffer[ptr])) ptr++; if (hasNextByte()) return buffer[ptr++]; else return -1;}\n        private boolean hasNextInt() { if (!hasNextChar()) return false; int c = readChar(); if (c == -1 || c < '0' || '9' < c) {ptr--; return false;} return true;}\n        private int readInt() { if (!hasNextInt()) throw new NumberFormatException(); int n = 0; boolean minus = false; int c = readChar();\n            if (c == '-') {minus = true; c = readChar();}\n            if (c < '0' || '9' < c) {ptr--; throw new NumberFormatException();}\n            do {n *= 10; n += c - '0'; c = readChar();} while (!(c < '0' || '9' < c)); if (minus) n = -n; return n;}\n\n        private boolean hasNextLong() { if (!hasNextChar()) return false; int c = readChar(); if (c == -1 || c < '0' || '9' < c) {ptr--; return false;} return true;}\n        private long readLong() { if (!hasNextLong()) throw new NumberFormatException(); long n = 0; boolean minus = false; int c = readChar();\n            if (c == '-') {minus = true; c = readChar();}\n            if (c < '0' || '9' < c) {ptr--; throw new NumberFormatException();}\n            do {n *= 10; n += c - '0'; c = readChar();} while (!(c < '0' || '9' < c)); if (minus) n = -n; return n;}\n\n        private boolean hasNextLine() { while (hasNextChar() &&!isWhiteSpace(buffer[ptr])) ptr++; return hasNextChar();}\n        private String readLine() { if (!hasNextLine()) return null; StringBuilder sb = new StringBuilder(); int c = readChar();\n            while (c >= 0 &&!isWhiteSpace(c)) { sb.appendCodePoint(c); c = readChar(); } return sb.toString();}\n        private String[] readLineArray() {\n            if (!hasNextLine()) return null;\n            String[] sa"}
{"src_uid": "062a171cc3ea717ea95ede9d7a1c3a43", "id": 77, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1300, "testcases": "[{'input': '5 5 3 2\\r\\n', 'output': ['2']}, {'input': '7 5 5 2\\r\\n', 'output': ['2']}, {'input': '4 4 4 4\\r\\n', 'output': ['1']}, {'input': '1 1 1 1\\r\\n', 'output': ['1']}, {'input': '4000 1 2 3\\r\\n', 'output': ['4000']}, {'input': '4000 3 4 5\\r\\n', 'output': ['1333']}, {'input': '10 3 4 5\\r\\n', 'output': ['3']}, {'input': '100 23 15 50\\r\\n', 'output': ['2']}, {'input': '3119 3515 1021 7\\r\\n', 'output': ['11']}, {'input': '918 102 1327 1733\\r\\n', 'output': ['9']}, {'input': '3164 42 430 1309\\r\\n', 'output': ['15']}, {'input': '3043 317 1141 2438\\r\\n', 'output': ['7']}, {'input': '26 1 772 2683\\r\\n', 'output': ['26']}, {'input': '370 2 1 15\\r\\n', 'output': ['370']}, {'input': '734 12 6 2\\r\\n', 'output': ['367']}, {'input': '418 18 14 17\\r\\n', 'output': ['29']}, {'input': '18 16 28 9\\r\\n', 'output': ['2']}, {'input': '14 6 2 17\\r\\n', 'output': ['7']}, {'input': '29 27 18 2\\r\\n', 'output': ['2']}, {'input': '29 12 7 10\\r\\n', 'output': ['3']}, {'input': '27 23 4 3\\r\\n', 'output': ['9']}, {'input': '5 14 5 2\\r\\n', 'output': ['1']}, {'input': '5 17 26 5\\r\\n', 'output': ['1']}, {'input': '9 1 10 3\\r\\n', 'output': ['9']}, {'input': '2 19 15 1\\r\\n', 'output': ['2']}, {'input': '4 6 4 9\\r\\n', 'output': ['1']}, {'input': '10 6 2 9\\r\\n', 'output': ['5']}, {'input': '2 2 9 6\\r\\n', 'output': ['1']}, {'input': '6 2 4 1\\r\\n', 'output': ['6']}, {'input': '27 24 5 27\\r\\n', 'output': ['1']}, {'input': '2683 83 26 2709\\r\\n', 'output': ['101']}, {'input': '728 412 789 158\\r\\n', 'output': ['3']}, {'input': '3964 4 2916 176\\r\\n', 'output': ['991']}, {'input': '3399 2035 2 3334\\r\\n', 'output': ['683']}, {'input': '3455 244 3301 3\\r\\n', 'output': ['991']}, {'input': '595 2263 3625 1\\r\\n', 'output': ['595']}, {'input': '4000 1 1 1\\r\\n', 'output': ['4000']}, {'input': '3999 2 2 3999\\r\\n', 'output': ['1']}, {'input': '25 6 8 11\\r\\n', 'output': ['3']}, {'input': '4000 500 1000 2000\\r\\n', 'output': ['8']}, {'input': '53 10 11 23\\r\\n', 'output': ['5']}, {'input': '100 100 1 1\\r\\n', 'output': ['100']}, {'input': '17 3 4 10\\r\\n', 'output': ['5']}, {'input': '413 101 102 105\\r\\n', 'output': ['4']}, {'input': '490 4 49 50\\r\\n', 'output': ['111']}, {'input': '3999 2 3 3\\r\\n', 'output': ['1999']}, {'input': '8 3 8 4\\r\\n', 'output': ['2']}, {'input': '5 1 3 3\\r\\n', 'output': ['5']}, {'input': '100 3 17 22\\r\\n', 'output': ['27']}, {'input': '4000 2 3 4\\r\\n', 'output': ['2000']}, {'input': '4000 3 3 5\\r\\n', 'output': ['1332']}, {'input': '13 4 6 7\\r\\n', 'output': ['2']}, {'input': '4000 5 2 2\\r\\n', 'output': ['2000']}, {'input': '3999 2 2 3\\r\\n', 'output': ['1999']}, {'input': '4000 33 7 3333\\r\\n', 'output': ['564']}, {'input': '60 33 20 9\\r\\n', 'output': ['4']}, {'input': '100 9 11 99\\r\\n', 'output': ['10']}, {'input': '2009 6 8 9\\r\\n', 'output': ['334']}]", "source_code": "import java.util.ArrayList;\nimport java.util.Collections;\nimport static java.util.Collections.reverseOrder;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class JavaApplication6 {\n    public static void main(String[] args){\n        Scanner in=new Scanner(System.in);\n        int n=in.nextInt(),a=in.nextInt(),b=in.nextInt(),c=in.nextInt();\n        int min=0,x=0,y=0,z=0;\n        if((n%a==0)||(a==b)){\n            min=n/a;\n        }\n        else if(n%b==0){\n            min=n/b;\n        }\n        else{\n            min=n/c;\n        }\n        int p;\n        if((min%a==0)||(a==b)){\n            x=min/a;\n        }\n        else if(min%b==0){\n            x=min/b;\n        }\n        else{\n            x=min/c;\n        }\n        int q;\n        if((x*a)%b==0){\n            y=(x*a)/b;\n        }\n        else if((x*b)%a==0){\n            y=(x*b)/a;\n        }\n        else{\n            y=0;\n        }\n        if((y*b)%c==0){\n            z=y*b/c;\n        }\n        else if((y*c)%b==0){\n            z=y*c/b;\n        }\n        else{\n            z=0;\n        }\n        p=min+(z*c);\n        System.out.println(p);\n    }\n}\n"}
{"src_uid": "062a171cc3ea717ea95ede9d7a1c3a43", "id": 77, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1300, "testcases": "[{'input': '5 5 3 2\\r\\n', 'output': ['2']}, {'input': '7 5 5 2\\r\\n', 'output': ['2']}, {'input': '4 4 4 4\\r\\n', 'output': ['1']}, {'input': '1 1 1 1\\r\\n', 'output': ['1']}, {'input': '4000 1 2 3\\r\\n', 'output': ['4000']}, {'input': '4000 3 4 5\\r\\n', 'output': ['1333']}, {'input': '10 3 4 5\\r\\n', 'output': ['3']}, {'input': '100 23 15 50\\r\\n', 'output': ['2']}, {'input': '3119 3515 1021 7\\r\\n', 'output': ['11']}, {'input': '918 102 1327 1733\\r\\n', 'output': ['9']}, {'input': '3164 42 430 1309\\r\\n', 'output': ['15']}, {'input': '3043 317 1141 2438\\r\\n', 'output': ['7']}, {'input': '26 1 772 2683\\r\\n', 'output': ['26']}, {'input': '370 2 1 15\\r\\n', 'output': ['370']}, {'input': '734 12 6 2\\r\\n', 'output': ['367']}, {'input': '418 18 14 17\\r\\n', 'output': ['29']}, {'input': '18 16 28 9\\r\\n', 'output': ['2']}, {'input': '14 6 2 17\\r\\n', 'output': ['7']}, {'input': '29 27 18 2\\r\\n', 'output': ['2']}, {'input': '29 12 7 10\\r\\n', 'output': ['3']}, {'input': '27 23 4 3\\r\\n', 'output': ['9']}, {'input': '5 14 5 2\\r\\n', 'output': ['1']}, {'input': '5 17 26 5\\r\\n', 'output': ['1']}, {'input': '9 1 10 3\\r\\n', 'output': ['9']}, {'input': '2 19 15 1\\r\\n', 'output': ['2']}, {'input': '4 6 4 9\\r\\n', 'output': ['1']}, {'input': '10 6 2 9\\r\\n', 'output': ['5']}, {'input': '2 2 9 6\\r\\n', 'output': ['1']}, {'input': '6 2 4 1\\r\\n', 'output': ['6']}, {'input': '27 24 5 27\\r\\n', 'output': ['1']}, {'input': '2683 83 26 2709\\r\\n', 'output': ['101']}, {'input': '728 412 789 158\\r\\n', 'output': ['3']}, {'input': '3964 4 2916 176\\r\\n', 'output': ['991']}, {'input': '3399 2035 2 3334\\r\\n', 'output': ['683']}, {'input': '3455 244 3301 3\\r\\n', 'output': ['991']}, {'input': '595 2263 3625 1\\r\\n', 'output': ['595']}, {'input': '4000 1 1 1\\r\\n', 'output': ['4000']}, {'input': '3999 2 2 3999\\r\\n', 'output': ['1']}, {'input': '25 6 8 11\\r\\n', 'output': ['3']}, {'input': '4000 500 1000 2000\\r\\n', 'output': ['8']}, {'input': '53 10 11 23\\r\\n', 'output': ['5']}, {'input': '100 100 1 1\\r\\n', 'output': ['100']}, {'input': '17 3 4 10\\r\\n', 'output': ['5']}, {'input': '413 101 102 105\\r\\n', 'output': ['4']}, {'input': '490 4 49 50\\r\\n', 'output': ['111']}, {'input': '3999 2 3 3\\r\\n', 'output': ['1999']}, {'input': '8 3 8 4\\r\\n', 'output': ['2']}, {'input': '5 1 3 3\\r\\n', 'output': ['5']}, {'input': '100 3 17 22\\r\\n', 'output': ['27']}, {'input': '4000 2 3 4\\r\\n', 'output': ['2000']}, {'input': '4000 3 3 5\\r\\n', 'output': ['1332']}, {'input': '13 4 6 7\\r\\n', 'output': ['2']}, {'input': '4000 5 2 2\\r\\n', 'output': ['2000']}, {'input': '3999 2 2 3\\r\\n', 'output': ['1999']}, {'input': '4000 33 7 3333\\r\\n', 'output': ['564']}, {'input': '60 33 20 9\\r\\n', 'output': ['4']}, {'input': '100 9 11 99\\r\\n', 'output': ['10']}, {'input': '2009 6 8 9\\r\\n', 'output': ['334']}]", "source_code": "import java.util.Arrays;\nimport java.util.HashMap;\nimport static java.util.Map.Entry.comparingByValue;\nimport java.util.Map;\nimport java.util.Scanner;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class Task {\n\n \n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int a = in.nextInt(), b = in.nextInt(), c = in.nextInt();\n        int min = a;\n        int max = a;\n        if (b > max) {\n            max = b;\n        }\n        if (c > max) {\n            max = c;\n        }\n        if (b < min) {\n            min = b;\n        }\n        if (c < min) {\n            min = c;\n        }\n        int qu = n / max;\n        int mod = n % max;\n        if (mod == 0) {\n            System.out.println(qu);\n        } else {\n            int qu1 = mod / min;\n            int mod1 = mod % min;\n            if (mod1 == 0) {\n                System.out.println(qu + qu1);\n            } else {\n                int qu2 = mod1 / max;\n                int mod2 = mod1 % max;\n                if (mod2 == 0) {\n                    System.out.println(qu + qu1 + qu2 + 1);\n                } else {\n                    System.out.println(qu + qu1 + qu2 + 1);\n                }\n            }\n        }\n    }\n}\n"}
{"src_uid": "03caf4ddf07c1783e42e9f9085cc6efd", "id": 78, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '9 3\\r\\n', 'output': ['1']}, {'input': '14 28\\r\\n', 'output': ['1']}, {'input': '4 20\\r\\n', 'output': ['0']}, {'input': '18 198\\r\\n', 'output': ['1']}, {'input': '22 326\\r\\n', 'output': ['1']}, {'input': '26 104\\r\\n', 'output': ['1']}, {'input': '14 10\\r\\n', 'output': ['0']}, {'input': '8 20\\r\\n', 'output': ['0']}, {'input': '2 8\\r\\n', 'output': ['0']}, {'input': '20 11\\r\\n', 'output': ['0']}, {'input': '57 447\\r\\n', 'output': ['1']}, {'input': '1 1\\r\\n', 'output': ['2']}, {'input': '66 296\\r\\n', 'output': ['1']}, {'input': '75 683\\r\\n', 'output': ['1']}, {'input': '227 975\\r\\n', 'output': ['1']}, {'input': '247 499\\r\\n', 'output': ['1']}, {'input': '266 116\\r\\n', 'output': ['1']}, {'input': '286 916\\r\\n', 'output': ['1']}, {'input': '307 341\\r\\n', 'output': ['1']}, {'input': '451 121\\r\\n', 'output': ['1']}, {'input': '471 921\\r\\n', 'output': ['1']}, {'input': '502 346\\r\\n', 'output': ['1']}, {'input': '535 59\\r\\n', 'output': ['1']}, {'input': '555 699\\r\\n', 'output': ['1']}, {'input': '747 351\\r\\n', 'output': ['1']}, {'input': '790 64\\r\\n', 'output': ['1']}, {'input': '810 704\\r\\n', 'output': ['1']}, {'input': '855 225\\r\\n', 'output': ['1']}, {'input': '902 34\\r\\n', 'output': ['1']}, {'input': '922 514\\r\\n', 'output': ['1']}, {'input': '971 131\\r\\n', 'output': ['1']}, {'input': '991 931\\r\\n', 'output': ['1']}, {'input': '840 780\\r\\n', 'output': ['0']}, {'input': '102 595\\r\\n', 'output': ['0']}, {'input': '139 433\\r\\n', 'output': ['0']}, {'input': '968 288\\r\\n', 'output': ['0']}, {'input': '563 354\\r\\n', 'output': ['0']}, {'input': '994 975\\r\\n', 'output': ['0']}, {'input': '456 221\\r\\n', 'output': ['0']}, {'input': '205 210\\r\\n', 'output': ['0']}, {'input': '1 11\\r\\n', 'output': ['0']}, {'input': '1000 1000\\r\\n', 'output': ['0']}, {'input': '3 3\\r\\n', 'output': ['0']}, {'input': '11 99\\r\\n', 'output': ['0']}, {'input': '2 2\\r\\n', 'output': ['1']}, {'input': '11 1\\r\\n', 'output': ['0']}, {'input': '6 6\\r\\n', 'output': ['1']}, {'input': '100 452\\r\\n', 'output': ['0']}, {'input': '420 380\\r\\n', 'output': ['0']}, {'input': '31 31\\r\\n', 'output': ['0']}, {'input': '2 6\\r\\n', 'output': ['0']}, {'input': '112 134\\r\\n', 'output': ['0']}, {'input': '13 13\\r\\n', 'output': ['0']}, {'input': '1 571\\r\\n', 'output': ['0']}]", "source_code": "import java.util.Scanner;\n\npublic class PairOfNumbersSystem {\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint a = in.nextInt();\n\t\tint b = in.nextInt();\n\t\tint count = 0;\n\t\tfor(int i = 0;i<=a;i++) {\n\t\t\tfor(int j = 0;j<=b;j++) {\n\t\t\t\tif(i * i + j == a && j == b) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n\n}\n"}
{"src_uid": "03caf4ddf07c1783e42e9f9085cc6efd", "id": 78, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '9 3\\r\\n', 'output': ['1']}, {'input': '14 28\\r\\n', 'output': ['1']}, {'input': '4 20\\r\\n', 'output': ['0']}, {'input': '18 198\\r\\n', 'output': ['1']}, {'input': '22 326\\r\\n', 'output': ['1']}, {'input': '26 104\\r\\n', 'output': ['1']}, {'input': '14 10\\r\\n', 'output': ['0']}, {'input': '8 20\\r\\n', 'output': ['0']}, {'input': '2 8\\r\\n', 'output': ['0']}, {'input': '20 11\\r\\n', 'output': ['0']}, {'input': '57 447\\r\\n', 'output': ['1']}, {'input': '1 1\\r\\n', 'output': ['2']}, {'input': '66 296\\r\\n', 'output': ['1']}, {'input': '75 683\\r\\n', 'output': ['1']}, {'input': '227 975\\r\\n', 'output': ['1']}, {'input': '247 499\\r\\n', 'output': ['1']}, {'input': '266 116\\r\\n', 'output': ['1']}, {'input': '286 916\\r\\n', 'output': ['1']}, {'input': '307 341\\r\\n', 'output': ['1']}, {'input': '451 121\\r\\n', 'output': ['1']}, {'input': '471 921\\r\\n', 'output': ['1']}, {'input': '502 346\\r\\n', 'output': ['1']}, {'input': '535 59\\r\\n', 'output': ['1']}, {'input': '555 699\\r\\n', 'output': ['1']}, {'input': '747 351\\r\\n', 'output': ['1']}, {'input': '790 64\\r\\n', 'output': ['1']}, {'input': '810 704\\r\\n', 'output': ['1']}, {'input': '855 225\\r\\n', 'output': ['1']}, {'input': '902 34\\r\\n', 'output': ['1']}, {'input': '922 514\\r\\n', 'output': ['1']}, {'input': '971 131\\r\\n', 'output': ['1']}, {'input': '991 931\\r\\n', 'output': ['1']}, {'input': '840 780\\r\\n', 'output': ['0']}, {'input': '102 595\\r\\n', 'output': ['0']}, {'input': '139 433\\r\\n', 'output': ['0']}, {'input': '968 288\\r\\n', 'output': ['0']}, {'input': '563 354\\r\\n', 'output': ['0']}, {'input': '994 975\\r\\n', 'output': ['0']}, {'input': '456 221\\r\\n', 'output': ['0']}, {'input': '205 210\\r\\n', 'output': ['0']}, {'input': '1 11\\r\\n', 'output': ['0']}, {'input': '1000 1000\\r\\n', 'output': ['0']}, {'input': '3 3\\r\\n', 'output': ['0']}, {'input': '11 99\\r\\n', 'output': ['0']}, {'input': '2 2\\r\\n', 'output': ['1']}, {'input': '11 1\\r\\n', 'output': ['0']}, {'input': '6 6\\r\\n', 'output': ['1']}, {'input': '100 452\\r\\n', 'output': ['0']}, {'input': '420 380\\r\\n', 'output': ['0']}, {'input': '31 31\\r\\n', 'output': ['0']}, {'input': '2 6\\r\\n', 'output': ['0']}, {'input': '112 134\\r\\n', 'output': ['0']}, {'input': '13 13\\r\\n', 'output': ['0']}, {'input': '1 571\\r\\n', 'output': ['0']}]", "source_code": "import java.util.*;\n\n/* Created on 14 April 2011 */\npublic class SystemOfEquations {\n    /**\n     * @param args\n     */\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt(), m = scanner.nextInt();\n        int c = 0;\n        for(int a = 0; a <= n; a++) {\n            for(int b = 0; b <= m; b++) {\n                int c1 = 2*a+3*b;\n                int c2 = 5*a+2*b;\n                if(c1 == c2)\n                    c++;\n            }\n        }\n        System.out.println(c);\n    }\n\n}\n"}
{"src_uid": "03caf4ddf07c1783e42e9f9085cc6efd", "id": 78, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '9 3\\r\\n', 'output': ['1']}, {'input': '14 28\\r\\n', 'output': ['1']}, {'input': '4 20\\r\\n', 'output': ['0']}, {'input': '18 198\\r\\n', 'output': ['1']}, {'input': '22 326\\r\\n', 'output': ['1']}, {'input': '26 104\\r\\n', 'output': ['1']}, {'input': '14 10\\r\\n', 'output': ['0']}, {'input': '8 20\\r\\n', 'output': ['0']}, {'input': '2 8\\r\\n', 'output': ['0']}, {'input': '20 11\\r\\n', 'output': ['0']}, {'input': '57 447\\r\\n', 'output': ['1']}, {'input': '1 1\\r\\n', 'output': ['2']}, {'input': '66 296\\r\\n', 'output': ['1']}, {'input': '75 683\\r\\n', 'output': ['1']}, {'input': '227 975\\r\\n', 'output': ['1']}, {'input': '247 499\\r\\n', 'output': ['1']}, {'input': '266 116\\r\\n', 'output': ['1']}, {'input': '286 916\\r\\n', 'output': ['1']}, {'input': '307 341\\r\\n', 'output': ['1']}, {'input': '451 121\\r\\n', 'output': ['1']}, {'input': '471 921\\r\\n', 'output': ['1']}, {'input': '502 346\\r\\n', 'output': ['1']}, {'input': '535 59\\r\\n', 'output': ['1']}, {'input': '555 699\\r\\n', 'output': ['1']}, {'input': '747 351\\r\\n', 'output': ['1']}, {'input': '790 64\\r\\n', 'output': ['1']}, {'input': '810 704\\r\\n', 'output': ['1']}, {'input': '855 225\\r\\n', 'output': ['1']}, {'input': '902 34\\r\\n', 'output': ['1']}, {'input': '922 514\\r\\n', 'output': ['1']}, {'input': '971 131\\r\\n', 'output': ['1']}, {'input': '991 931\\r\\n', 'output': ['1']}, {'input': '840 780\\r\\n', 'output': ['0']}, {'input': '102 595\\r\\n', 'output': ['0']}, {'input': '139 433\\r\\n', 'output': ['0']}, {'input': '968 288\\r\\n', 'output': ['0']}, {'input': '563 354\\r\\n', 'output': ['0']}, {'input': '994 975\\r\\n', 'output': ['0']}, {'input': '456 221\\r\\n', 'output': ['0']}, {'input': '205 210\\r\\n', 'output': ['0']}, {'input': '1 11\\r\\n', 'output': ['0']}, {'input': '1000 1000\\r\\n', 'output': ['0']}, {'input': '3 3\\r\\n', 'output': ['0']}, {'input': '11 99\\r\\n', 'output': ['0']}, {'input': '2 2\\r\\n', 'output': ['1']}, {'input': '11 1\\r\\n', 'output': ['0']}, {'input': '6 6\\r\\n', 'output': ['1']}, {'input': '100 452\\r\\n', 'output': ['0']}, {'input': '420 380\\r\\n', 'output': ['0']}, {'input': '31 31\\r\\n', 'output': ['0']}, {'input': '2 6\\r\\n', 'output': ['0']}, {'input': '112 134\\r\\n', 'output': ['0']}, {'input': '13 13\\r\\n', 'output': ['0']}, {'input': '1 571\\r\\n', 'output': ['0']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\n\npublic class HelloWorld{\n    \n\tstatic int n,m;\n\tstatic int f(int a,int b)\n\t{\n\t\tint c;\n\t\tc=a*a+b*b;\n\t\t//System.out.println(\"Value of c : \"+c);\n\t\treturn c;\n\t}\n\tstatic int count=0;\n\tstatic void check(int i,int j)\n\t{\n\t\tint x;\n\t\tx=f(i,j);\n\t\tx+=f(j,i);\n\t\tx+=f(n-i,m-j);\n\t\t//System.out.println(\"value of i : \"+i);\n\t\t//System.out.println(\"value of j : \"+j);\n\t\t//System.out.println(\"value of x : \"+x);\n\t\tif(x%2==0)\n\t\t\tcount++;\n\t}\n\t/*static int count=0;\n\tstatic int check(int i,int j)\n\t{\n\t\tint x;\n\t\tx=f(i,j);\n\t\tif(x%2==0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\treturn x;\n\t}*/\n\tpublic static void main(String[] args) throws IOException{\n\t\tInputStreamReader in=new InputStreamReader(System.in);\n\t\tBufferedReader br=new BufferedReader(in);\n\t\tString s[]=br.readLine().split(\" \");\n\t\tn=Integer.parseInt(s[0]);\n\t\tm=Integer.parseInt(s[1]);\n\t\tfor(int i=0;i<=n;i++)\n\t\t\tfor(int j=0;j<=m;j++)\n\t\t\t\tcheck(i,j);\n\t\tSystem.out.println(count);\n\t}\n}\n"}
{"src_uid": "03caf4ddf07c1783e42e9f9085cc6efd", "id": 78, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '9 3\\r\\n', 'output': ['1']}, {'input': '14 28\\r\\n', 'output': ['1']}, {'input': '4 20\\r\\n', 'output': ['0']}, {'input': '18 198\\r\\n', 'output': ['1']}, {'input': '22 326\\r\\n', 'output': ['1']}, {'input': '26 104\\r\\n', 'output': ['1']}, {'input': '14 10\\r\\n', 'output': ['0']}, {'input': '8 20\\r\\n', 'output': ['0']}, {'input': '2 8\\r\\n', 'output': ['0']}, {'input': '20 11\\r\\n', 'output': ['0']}, {'input': '57 447\\r\\n', 'output': ['1']}, {'input': '1 1\\r\\n', 'output': ['2']}, {'input': '66 296\\r\\n', 'output': ['1']}, {'input': '75 683\\r\\n', 'output': ['1']}, {'input': '227 975\\r\\n', 'output': ['1']}, {'input': '247 499\\r\\n', 'output': ['1']}, {'input': '266 116\\r\\n', 'output': ['1']}, {'input': '286 916\\r\\n', 'output': ['1']}, {'input': '307 341\\r\\n', 'output': ['1']}, {'input': '451 121\\r\\n', 'output': ['1']}, {'input': '471 921\\r\\n', 'output': ['1']}, {'input': '502 346\\r\\n', 'output': ['1']}, {'input': '535 59\\r\\n', 'output': ['1']}, {'input': '555 699\\r\\n', 'output': ['1']}, {'input': '747 351\\r\\n', 'output': ['1']}, {'input': '790 64\\r\\n', 'output': ['1']}, {'input': '810 704\\r\\n', 'output': ['1']}, {'input': '855 225\\r\\n', 'output': ['1']}, {'input': '902 34\\r\\n', 'output': ['1']}, {'input': '922 514\\r\\n', 'output': ['1']}, {'input': '971 131\\r\\n', 'output': ['1']}, {'input': '991 931\\r\\n', 'output': ['1']}, {'input': '840 780\\r\\n', 'output': ['0']}, {'input': '102 595\\r\\n', 'output': ['0']}, {'input': '139 433\\r\\n', 'output': ['0']}, {'input': '968 288\\r\\n', 'output': ['0']}, {'input': '563 354\\r\\n', 'output': ['0']}, {'input': '994 975\\r\\n', 'output': ['0']}, {'input': '456 221\\r\\n', 'output': ['0']}, {'input': '205 210\\r\\n', 'output': ['0']}, {'input': '1 11\\r\\n', 'output': ['0']}, {'input': '1000 1000\\r\\n', 'output': ['0']}, {'input': '3 3\\r\\n', 'output': ['0']}, {'input': '11 99\\r\\n', 'output': ['0']}, {'input': '2 2\\r\\n', 'output': ['1']}, {'input': '11 1\\r\\n', 'output': ['0']}, {'input': '6 6\\r\\n', 'output': ['1']}, {'input': '100 452\\r\\n', 'output': ['0']}, {'input': '420 380\\r\\n', 'output': ['0']}, {'input': '31 31\\r\\n', 'output': ['0']}, {'input': '2 6\\r\\n', 'output': ['0']}, {'input': '112 134\\r\\n', 'output': ['0']}, {'input': '13 13\\r\\n', 'output': ['0']}, {'input': '1 571\\r\\n', 'output': ['0']}]", "source_code": "import java.util.*;\n\npublic class JavaApplication4 {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int m = in.nextInt();\n        int count = 0;\n        int a = 0;\n        int b = 0;\n        for(a = 0; a <= n; a++)\n        {\n            for(b = 0; b <= m; b++)\n            {\n                if((a*a + b == n) && (a + b*b == m))\n                {\n                    count++;\n                }\n            }\n        }\n        System.out.println(count);\n    }\n}\n"}
{"src_uid": "03caf4ddf07c1783e42e9f9085cc6efd", "id": 78, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '9 3\\r\\n', 'output': ['1']}, {'input': '14 28\\r\\n', 'output': ['1']}, {'input': '4 20\\r\\n', 'output': ['0']}, {'input': '18 198\\r\\n', 'output': ['1']}, {'input': '22 326\\r\\n', 'output': ['1']}, {'input': '26 104\\r\\n', 'output': ['1']}, {'input': '14 10\\r\\n', 'output': ['0']}, {'input': '8 20\\r\\n', 'output': ['0']}, {'input': '2 8\\r\\n', 'output': ['0']}, {'input': '20 11\\r\\n', 'output': ['0']}, {'input': '57 447\\r\\n', 'output': ['1']}, {'input': '1 1\\r\\n', 'output': ['2']}, {'input': '66 296\\r\\n', 'output': ['1']}, {'input': '75 683\\r\\n', 'output': ['1']}, {'input': '227 975\\r\\n', 'output': ['1']}, {'input': '247 499\\r\\n', 'output': ['1']}, {'input': '266 116\\r\\n', 'output': ['1']}, {'input': '286 916\\r\\n', 'output': ['1']}, {'input': '307 341\\r\\n', 'output': ['1']}, {'input': '451 121\\r\\n', 'output': ['1']}, {'input': '471 921\\r\\n', 'output': ['1']}, {'input': '502 346\\r\\n', 'output': ['1']}, {'input': '535 59\\r\\n', 'output': ['1']}, {'input': '555 699\\r\\n', 'output': ['1']}, {'input': '747 351\\r\\n', 'output': ['1']}, {'input': '790 64\\r\\n', 'output': ['1']}, {'input': '810 704\\r\\n', 'output': ['1']}, {'input': '855 225\\r\\n', 'output': ['1']}, {'input': '902 34\\r\\n', 'output': ['1']}, {'input': '922 514\\r\\n', 'output': ['1']}, {'input': '971 131\\r\\n', 'output': ['1']}, {'input': '991 931\\r\\n', 'output': ['1']}, {'input': '840 780\\r\\n', 'output': ['0']}, {'input': '102 595\\r\\n', 'output': ['0']}, {'input': '139 433\\r\\n', 'output': ['0']}, {'input': '968 288\\r\\n', 'output': ['0']}, {'input': '563 354\\r\\n', 'output': ['0']}, {'input': '994 975\\r\\n', 'output': ['0']}, {'input': '456 221\\r\\n', 'output': ['0']}, {'input': '205 210\\r\\n', 'output': ['0']}, {'input': '1 11\\r\\n', 'output': ['0']}, {'input': '1000 1000\\r\\n', 'output': ['0']}, {'input': '3 3\\r\\n', 'output': ['0']}, {'input': '11 99\\r\\n', 'output': ['0']}, {'input': '2 2\\r\\n', 'output': ['1']}, {'input': '11 1\\r\\n', 'output': ['0']}, {'input': '6 6\\r\\n', 'output': ['1']}, {'input': '100 452\\r\\n', 'output': ['0']}, {'input': '420 380\\r\\n', 'output': ['0']}, {'input': '31 31\\r\\n', 'output': ['0']}, {'input': '2 6\\r\\n', 'output': ['0']}, {'input': '112 134\\r\\n', 'output': ['0']}, {'input': '13 13\\r\\n', 'output': ['0']}, {'input': '1 571\\r\\n', 'output': ['0']}]", "source_code": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class P4 {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int n, m, a, b = 0, count = 0;\n        String[] temp = br.readLine().split(\" \");\n        n = Integer.parseInt(temp[0]);\n        m = Integer.parseInt(temp[1]);\n        for (a = 0; a <= n; ++a) {\n            for (b = 0; b <= m; ++b) {\n                if ((a * a + b) == n && (a + b * b) == m) {\n                    ++count;\n                }\n            }\n        }\n        System.out.println(count);\n    }\n}\n"}
{"src_uid": "a491be7d5883d594c3e907a22be607c9", "id": 79, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1500, "testcases": "[{'input': '3 6\\r\\n101010\\r\\n000100\\r\\n100000\\r\\n', 'output': ['3\\r\\n']}, {'input': '2 3\\r\\n111\\r\\n000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '1 1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '1 1\\r\\n0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 1\\r\\n1\\r\\n1\\r\\n0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '6 2\\r\\n10\\r\\n11\\r\\n01\\r\\n01\\r\\n10\\r\\n11\\r\\n', 'output': ['2\\r\\n']}, {'input': '3 3\\r\\n001\\r\\n010\\r\\n100\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 4\\r\\n0001\\r\\n0100\\r\\n0010\\r\\n1000\\r\\n', 'output': ['4\\r\\n']}, {'input': '5 5\\r\\n10000\\r\\n01000\\r\\n00100\\r\\n00010\\r\\n00001\\r\\n', 'output': ['6\\r\\n']}, {'input': '5 5\\r\\n10001\\r\\n00100\\r\\n01000\\r\\n01001\\r\\n11111\\r\\n', 'output': ['2\\r\\n']}, {'input': '5 5\\r\\n11111\\r\\n11111\\r\\n11111\\r\\n11111\\r\\n00000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 10\\r\\n0001000100\\r\\n1000001000\\r\\n0001000001\\r\\n0100001010\\r\\n0110100000\\r\\n', 'output': ['5\\r\\n']}, {'input': '6 6\\r\\n111000\\r\\n011100\\r\\n001110\\r\\n000111\\r\\n100011\\r\\n110001\\r\\n', 'output': ['4\\r\\n']}, {'input': '2 9\\r\\n101010101\\r\\n010101010\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 6\\r\\n000001\\r\\n100000\\r\\n100000\\r\\n100000\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 6\\r\\n000010\\r\\n010000\\r\\n000100\\r\\n', 'output': ['3\\r\\n']}, {'input': '4 10\\r\\n0000101010\\r\\n1010101010\\r\\n0101010101\\r\\n0000010100\\r\\n', 'output': ['2\\r\\n']}, {'input': '10 10\\r\\n0000000000\\r\\n0000000010\\r\\n0010000000\\r\\n0111000010\\r\\n1000000000\\r\\n0000000100\\r\\n0000000100\\r\\n0000100100\\r\\n0010000000\\r\\n0000100000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 10\\r\\n0000000000\\r\\n0000001000\\r\\n0000000100\\r\\n0101000100\\r\\n0000000000\\r\\n0000000000\\r\\n1000110000\\r\\n1011010010\\r\\n0000100000\\r\\n0000001001\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 10\\r\\n0001001101\\r\\n0010001010\\r\\n1100000000\\r\\n0110110110\\r\\n1011011010\\r\\n1001001001\\r\\n0100010001\\r\\n0110000100\\r\\n0000100000\\r\\n1000010000\\r\\n', 'output': ['8\\r\\n']}, {'input': '10 10\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 5\\r\\n10000\\r\\n00001\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 7\\r\\n1000000\\r\\n0000010\\r\\n1000000\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 5\\r\\n10010\\r\\n11001\\r\\n00010\\r\\n11000\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 10\\r\\n0000000001\\r\\n1000000000\\r\\n', 'output': ['1\\r\\n']}, {'input': '5 5\\r\\n10000\\r\\n10000\\r\\n00001\\r\\n10000\\r\\n10000\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 4\\r\\n0001\\r\\n0001\\r\\n1000\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 6\\r\\n101010\\r\\n000010\\r\\n100000\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 7\\r\\n0100000\\r\\n0100000\\r\\n0000001\\r\\n0000001\\r\\n', 'output': ['4\\r\\n']}, {'input': '5 1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 5\\r\\n00001\\r\\n10000\\r\\n00001\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 1\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['-1\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Test {\n    static class Reader{\n        final private int BUFFER_SIZE = 1 << 16;\n        private DataInputStream din = null;\n        private byte[] buffer = null;\n        private int bufferPointer = 0;\n        private int bytesRead = 0;\n\n        public Reader(){\n            din = new DataInputStream(System.in);\n            buffer = new byte[BUFFER_SIZE];\n            bufferPointer = bytesRead = 0;\n        }\n\n        public Reader(String file_name) throws IOException {\n            din = new DataInputStream(new FileInputStream(file_name));\n            buffer = new byte[BUFFER_SIZE];\n            bufferPointer = bytesRead = 0;\n        }\n\n        public String readLine() throws IOException {\n            String s = \"\";\n            byte c = read();\n            while(c!= '\\n' && c!= -1){\n                s += (char)c;\n                c = read();\n            }\n            return s;\n        }\n\n        private byte read(){\n            if(bufferPointer < bytesRead){\n                return buffer[bufferPointer++];\n            }\n            else{\n                bufferPointer = 0;\n                bytesRead = 0;\n                try{\n                    bytesRead = din.read(buffer, 0, BUFFER_SIZE);\n                }\n                catch(IOException e){\n                    e.printStackTrace();\n                }\n                if(bytesRead <= 0) return -1;\n                return buffer[0];\n            }\n        }\n\n        public long readLong() throws IOException {\n            long num = 0;\n            int ch = 0;\n            byte c = read();\n            while(ch!= '-') {\n                if(c < '0' || c > '9')throw new NumberFormatException();\n                num = 10 * num + (c - 48);\n                c = read();\n            }\n            if(ch == '-')num = -num;\n            return num;\n        }\n\n        private double readDouble() throws IOException {\n            double num = 0;\n            boolean checkpoint = false;\n            int ch = 0;\n            byte c = read();\n            while(ch!= '.') {\n                if(c < '0' || c > '9')throw new NumberFormatException();\n                num = 10 * num + (c - 48);\n                ch = read();\n            }\n            while(true){\n                c = read();\n                if(c < '0' || c > '9'){\n                    if(checkpoint) return num;\n                    else throw new NumberFormatException();\n                }\n                num = 10 * num + (c - 48);\n                checkpoint = true;\n            }\n        }\n\n        public String readString() throws IOException {\n            byte c = read();\n            while(c =='' || c == '\\n')c = read();\n            String s = \"\";\n            while(c!= '\\n' && c!= -1){\n                s += (char)c;\n                c = read();\n            }\n            return s;\n        }\n    }\n\n    private void solve() throws IOException {\n        int n = reader.nextInt();\n        int m = reader.nextInt();\n        String[] row = new String[n];\n        int min = 20;\n        for(int i = 0 ; i < n ; ++i){\n            row[i] = reader.nextString();\n        }\n        String left = \"\";\n        String right = \"\";\n        String cur = \"\";\n        for(int j = 0 ; j < m ; ++j){\n            left = \"\";\n            right = \"\";\n            cur = \"\";\n            for(int k = 0 ; k < n ; ++k){\n                if(k == 0) left += row[k].charAt(m-1);\n                else if(k == n-1) right += row[k].charAt(0);\n                else {\n                    left += row[k].charAt(m-1);\n                    right += row[k].charAt(0);\n                    cur += row[k].charAt(j);\n                }\n            }\n            if(left.compareTo(right) <= 0)min = Math.min(min, cur.compareTo(\"1\"));\n            else min = Math.min"}
{"src_uid": "a491be7d5883d594c3e907a22be607c9", "id": 79, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1500, "testcases": "[{'input': '3 6\\r\\n101010\\r\\n000100\\r\\n100000\\r\\n', 'output': ['3\\r\\n']}, {'input': '2 3\\r\\n111\\r\\n000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '1 1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '1 1\\r\\n0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 1\\r\\n1\\r\\n1\\r\\n0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '6 2\\r\\n10\\r\\n11\\r\\n01\\r\\n01\\r\\n10\\r\\n11\\r\\n', 'output': ['2\\r\\n']}, {'input': '3 3\\r\\n001\\r\\n010\\r\\n100\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 4\\r\\n0001\\r\\n0100\\r\\n0010\\r\\n1000\\r\\n', 'output': ['4\\r\\n']}, {'input': '5 5\\r\\n10000\\r\\n01000\\r\\n00100\\r\\n00010\\r\\n00001\\r\\n', 'output': ['6\\r\\n']}, {'input': '5 5\\r\\n10001\\r\\n00100\\r\\n01000\\r\\n01001\\r\\n11111\\r\\n', 'output': ['2\\r\\n']}, {'input': '5 5\\r\\n11111\\r\\n11111\\r\\n11111\\r\\n11111\\r\\n00000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 10\\r\\n0001000100\\r\\n1000001000\\r\\n0001000001\\r\\n0100001010\\r\\n0110100000\\r\\n', 'output': ['5\\r\\n']}, {'input': '6 6\\r\\n111000\\r\\n011100\\r\\n001110\\r\\n000111\\r\\n100011\\r\\n110001\\r\\n', 'output': ['4\\r\\n']}, {'input': '2 9\\r\\n101010101\\r\\n010101010\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 6\\r\\n000001\\r\\n100000\\r\\n100000\\r\\n100000\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 6\\r\\n000010\\r\\n010000\\r\\n000100\\r\\n', 'output': ['3\\r\\n']}, {'input': '4 10\\r\\n0000101010\\r\\n1010101010\\r\\n0101010101\\r\\n0000010100\\r\\n', 'output': ['2\\r\\n']}, {'input': '10 10\\r\\n0000000000\\r\\n0000000010\\r\\n0010000000\\r\\n0111000010\\r\\n1000000000\\r\\n0000000100\\r\\n0000000100\\r\\n0000100100\\r\\n0010000000\\r\\n0000100000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 10\\r\\n0000000000\\r\\n0000001000\\r\\n0000000100\\r\\n0101000100\\r\\n0000000000\\r\\n0000000000\\r\\n1000110000\\r\\n1011010010\\r\\n0000100000\\r\\n0000001001\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 10\\r\\n0001001101\\r\\n0010001010\\r\\n1100000000\\r\\n0110110110\\r\\n1011011010\\r\\n1001001001\\r\\n0100010001\\r\\n0110000100\\r\\n0000100000\\r\\n1000010000\\r\\n', 'output': ['8\\r\\n']}, {'input': '10 10\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 5\\r\\n10000\\r\\n00001\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 7\\r\\n1000000\\r\\n0000010\\r\\n1000000\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 5\\r\\n10010\\r\\n11001\\r\\n00010\\r\\n11000\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 10\\r\\n0000000001\\r\\n1000000000\\r\\n', 'output': ['1\\r\\n']}, {'input': '5 5\\r\\n10000\\r\\n10000\\r\\n00001\\r\\n10000\\r\\n10000\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 4\\r\\n0001\\r\\n0001\\r\\n1000\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 6\\r\\n101010\\r\\n000010\\r\\n100000\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 7\\r\\n0100000\\r\\n0100000\\r\\n0000001\\r\\n0000001\\r\\n', 'output': ['4\\r\\n']}, {'input': '5 1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 5\\r\\n00001\\r\\n10000\\r\\n00001\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 1\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['-1\\r\\n']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Solution {\n    public static void main(String[] args){\n        int n, m;\n        String[] input;\n        int[][] table;\n        int c_left, c_right;\n        int shift = 0;\n        int min_shift = 10000000;\n        int result = 10000000;\n        int index = 0;\n        boolean check = false;\n        try{\n            InputStreamReader isr = new InputStreamReader(System.in);\n            BufferedReader br = new BufferedReader(isr);\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            n = Integer.parseInt(st.nextToken());\n            m = Integer.parseInt(st.nextToken());\n            table = new int[n][m];\n            input = new String[n];\n            for(int i=0; i<n; i++){\n                input[i] = br.readLine();\n            }\n            for(int i=0; i<n; i++){\n                for(int j=0; j<m; j++){\n                    if(input[i].charAt(j) == '1'){\n                        c_left = 0;\n                        for(int k=0; k<j; k++){\n                            c_left = c_left + (input[i].charAt(k) == '1'? 0 : 1);\n                        }\n                        c_right = 0;\n                        for(int k=j+1; k<m; k++){\n                            c_right = c_right + (input[i].charAt(k) == '1'? 0 : 1);\n                        }\n                        if(c_left < c_right){\n                            shift = m-j;\n                        } else if(c_left > c_right){\n                            shift = j;\n                        } else {\n                            shift = 0;\n                        }\n                        if(min_shift > shift){\n                            min_shift = shift;\n                            result = i;\n                        } else if(min_shift == shift){\n                            if(input[i].indexOf(\"1\") < input[result].indexOf(\"1\")){\n                                result = i;\n                            }\n                        }\n                        check = true;\n                        break;\n                    }\n                }\n                if(check){\n                    break;\n                }\n            }\n            if(check){\n                for(int i=0; i<n; i++){\n                    for(int j=0; j<m; j++){\n                        table[i][j] = input[i].charAt(j+result);\n                    }\n                }\n                for(int i=0; i<n; i++){\n                    c_left = 0;\n                    for(int j=0; j<m; j++){\n                        c_left = c_left + (table[i][j] == '1'? 0 : 1);\n                    }\n                    if(min_shift > c_left){\n                        min_shift = c_left;\n                        index = i;\n                    }\n                }\n                for(int i=0; i<n; i++){\n                    if(i == index){\n                        continue;\n                    }\n                    for(int j=0; j<m; j++){\n                        table[i][j] = table[i][j+min_shift];\n                    }\n                }\n                for(int i=0; i<m-min_shift; i++){\n                    table[index][i] = table[index][i+m];\n                }\n                int count = 0;\n                for(int i=0; i<n; i++){\n                    for(int j=0; j<m; j++){\n                        if(table[i][j] == '1'){\n                            count++;\n                        }\n                    }\n                }\n                System.out.println(count);\n            } else {\n                System.out.println(-1);\n            }\n        } catch (IOException e){\n            e.printStackTrace();\n        }\n    }\n}"}
{"src_uid": "a491be7d5883d594c3e907a22be607c9", "id": 79, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1500, "testcases": "[{'input': '3 6\\r\\n101010\\r\\n000100\\r\\n100000\\r\\n', 'output': ['3\\r\\n']}, {'input': '2 3\\r\\n111\\r\\n000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '1 1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '1 1\\r\\n0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 1\\r\\n1\\r\\n1\\r\\n0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '6 2\\r\\n10\\r\\n11\\r\\n01\\r\\n01\\r\\n10\\r\\n11\\r\\n', 'output': ['2\\r\\n']}, {'input': '3 3\\r\\n001\\r\\n010\\r\\n100\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 4\\r\\n0001\\r\\n0100\\r\\n0010\\r\\n1000\\r\\n', 'output': ['4\\r\\n']}, {'input': '5 5\\r\\n10000\\r\\n01000\\r\\n00100\\r\\n00010\\r\\n00001\\r\\n', 'output': ['6\\r\\n']}, {'input': '5 5\\r\\n10001\\r\\n00100\\r\\n01000\\r\\n01001\\r\\n11111\\r\\n', 'output': ['2\\r\\n']}, {'input': '5 5\\r\\n11111\\r\\n11111\\r\\n11111\\r\\n11111\\r\\n00000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 10\\r\\n0001000100\\r\\n1000001000\\r\\n0001000001\\r\\n0100001010\\r\\n0110100000\\r\\n', 'output': ['5\\r\\n']}, {'input': '6 6\\r\\n111000\\r\\n011100\\r\\n001110\\r\\n000111\\r\\n100011\\r\\n110001\\r\\n', 'output': ['4\\r\\n']}, {'input': '2 9\\r\\n101010101\\r\\n010101010\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 6\\r\\n000001\\r\\n100000\\r\\n100000\\r\\n100000\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 6\\r\\n000010\\r\\n010000\\r\\n000100\\r\\n', 'output': ['3\\r\\n']}, {'input': '4 10\\r\\n0000101010\\r\\n1010101010\\r\\n0101010101\\r\\n0000010100\\r\\n', 'output': ['2\\r\\n']}, {'input': '10 10\\r\\n0000000000\\r\\n0000000010\\r\\n0010000000\\r\\n0111000010\\r\\n1000000000\\r\\n0000000100\\r\\n0000000100\\r\\n0000100100\\r\\n0010000000\\r\\n0000100000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 10\\r\\n0000000000\\r\\n0000001000\\r\\n0000000100\\r\\n0101000100\\r\\n0000000000\\r\\n0000000000\\r\\n1000110000\\r\\n1011010010\\r\\n0000100000\\r\\n0000001001\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 10\\r\\n0001001101\\r\\n0010001010\\r\\n1100000000\\r\\n0110110110\\r\\n1011011010\\r\\n1001001001\\r\\n0100010001\\r\\n0110000100\\r\\n0000100000\\r\\n1000010000\\r\\n', 'output': ['8\\r\\n']}, {'input': '10 10\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 5\\r\\n10000\\r\\n00001\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 7\\r\\n1000000\\r\\n0000010\\r\\n1000000\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 5\\r\\n10010\\r\\n11001\\r\\n00010\\r\\n11000\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 10\\r\\n0000000001\\r\\n1000000000\\r\\n', 'output': ['1\\r\\n']}, {'input': '5 5\\r\\n10000\\r\\n10000\\r\\n00001\\r\\n10000\\r\\n10000\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 4\\r\\n0001\\r\\n0001\\r\\n1000\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 6\\r\\n101010\\r\\n000010\\r\\n100000\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 7\\r\\n0100000\\r\\n0100000\\r\\n0000001\\r\\n0000001\\r\\n', 'output': ['4\\r\\n']}, {'input': '5 1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 5\\r\\n00001\\r\\n10000\\r\\n00001\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 1\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['-1\\r\\n']}]", "source_code": "import java.util.*;\nimport static java.util.Arrays.*;\n\n\npublic class A64 implements Runnable {\n    \n    private void solve() throws Exception {\n        int n = readInt(), m = readInt();\n        int[][] arr = new int[n][m];\n        for (int i = 0 ; i < n ; i++) arr[i] = readLine().chars().toArray();\n        int mi = (int) 1e9;\n        int num = 0;\n        for (int j = 0 ; j < m ; j++) {\n            num = 0;\n            for (int i = 0 ; i < n ; i++) \n                if (arr[i][j] == '1') num++;\n            for (int i = 0 ; i < n ; i++) {\n                for (int k = 0 ; k < m - 1 ; k++) \n                    arr[i][k] = arr[i][k+1];\n                arr[i][m-1] = arr[i][0];\n            }\n            for (int i = 0 ; i < n - 1 ; i++) {\n                int val = 0;\n                for (int k = 0 ; k < n ; k++)\n                    val += arr[k][j] == '1'? 1 : 0;\n                mi = Math.min(mi, val);\n            }\n        }\n        System.out.println((mi == 1e9? -1 : num));\n    }\n    \n    public static void main(String[] args) throws Exception {\n        Locale.setDefault(Locale.UK);\n        new A64().run();\n    }\n    \n    //--------------------------------------------------------------------------\n    \n    private Scanner sc = new Scanner(System.in);\n    private StringTokenizer strtok = null;\n    \n    private int readInt() throws Exception {\n        return Integer.parseInt(nextToken());\n    }\n    \n    private long readLong() throws Exception {\n        return Long.parseLong(nextToken());\n    }\n    \n    private double readDouble() throws Exception {\n        return Double.parseDouble(nextToken());\n    }\n    \n    private String readString() throws Exception {\n        return nextToken();\n    }\n    \n    private char readChar() throws Exception {\n        return readString().charAt(0);\n    }\n    \n    private String readLine() throws Exception {\n        return sc.nextLine();\n    }\n    \n    private String nextToken() throws Exception {\n        if (strtok!= null && strtok.hasMoreTokens())\n            return strtok.nextToken();\n        strtok = new StringTokenizer(readLine());\n        return nextToken();\n    }\n}\n"}
{"src_uid": "a491be7d5883d594c3e907a22be607c9", "id": 79, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1500, "testcases": "[{'input': '3 6\\r\\n101010\\r\\n000100\\r\\n100000\\r\\n', 'output': ['3\\r\\n']}, {'input': '2 3\\r\\n111\\r\\n000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '1 1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '1 1\\r\\n0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 1\\r\\n1\\r\\n1\\r\\n0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '6 2\\r\\n10\\r\\n11\\r\\n01\\r\\n01\\r\\n10\\r\\n11\\r\\n', 'output': ['2\\r\\n']}, {'input': '3 3\\r\\n001\\r\\n010\\r\\n100\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 4\\r\\n0001\\r\\n0100\\r\\n0010\\r\\n1000\\r\\n', 'output': ['4\\r\\n']}, {'input': '5 5\\r\\n10000\\r\\n01000\\r\\n00100\\r\\n00010\\r\\n00001\\r\\n', 'output': ['6\\r\\n']}, {'input': '5 5\\r\\n10001\\r\\n00100\\r\\n01000\\r\\n01001\\r\\n11111\\r\\n', 'output': ['2\\r\\n']}, {'input': '5 5\\r\\n11111\\r\\n11111\\r\\n11111\\r\\n11111\\r\\n00000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 10\\r\\n0001000100\\r\\n1000001000\\r\\n0001000001\\r\\n0100001010\\r\\n0110100000\\r\\n', 'output': ['5\\r\\n']}, {'input': '6 6\\r\\n111000\\r\\n011100\\r\\n001110\\r\\n000111\\r\\n100011\\r\\n110001\\r\\n', 'output': ['4\\r\\n']}, {'input': '2 9\\r\\n101010101\\r\\n010101010\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 6\\r\\n000001\\r\\n100000\\r\\n100000\\r\\n100000\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 6\\r\\n000010\\r\\n010000\\r\\n000100\\r\\n', 'output': ['3\\r\\n']}, {'input': '4 10\\r\\n0000101010\\r\\n1010101010\\r\\n0101010101\\r\\n0000010100\\r\\n', 'output': ['2\\r\\n']}, {'input': '10 10\\r\\n0000000000\\r\\n0000000010\\r\\n0010000000\\r\\n0111000010\\r\\n1000000000\\r\\n0000000100\\r\\n0000000100\\r\\n0000100100\\r\\n0010000000\\r\\n0000100000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 10\\r\\n0000000000\\r\\n0000001000\\r\\n0000000100\\r\\n0101000100\\r\\n0000000000\\r\\n0000000000\\r\\n1000110000\\r\\n1011010010\\r\\n0000100000\\r\\n0000001001\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 10\\r\\n0001001101\\r\\n0010001010\\r\\n1100000000\\r\\n0110110110\\r\\n1011011010\\r\\n1001001001\\r\\n0100010001\\r\\n0110000100\\r\\n0000100000\\r\\n1000010000\\r\\n', 'output': ['8\\r\\n']}, {'input': '10 10\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 5\\r\\n10000\\r\\n00001\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 7\\r\\n1000000\\r\\n0000010\\r\\n1000000\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 5\\r\\n10010\\r\\n11001\\r\\n00010\\r\\n11000\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 10\\r\\n0000000001\\r\\n1000000000\\r\\n', 'output': ['1\\r\\n']}, {'input': '5 5\\r\\n10000\\r\\n10000\\r\\n00001\\r\\n10000\\r\\n10000\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 4\\r\\n0001\\r\\n0001\\r\\n1000\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 6\\r\\n101010\\r\\n000010\\r\\n100000\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 7\\r\\n0100000\\r\\n0100000\\r\\n0000001\\r\\n0000001\\r\\n', 'output': ['4\\r\\n']}, {'input': '5 1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 5\\r\\n00001\\r\\n10000\\r\\n00001\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 1\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['-1\\r\\n']}]", "source_code": "import java.io.*;\n\npublic class Trying\n{\n\n   public static void main (String[] args)\n   {\n\t   InputStream in=System.in;\n\t   OutputStream out=System.out;\n\t   int n,m,j,k,h,p;int i,b[],n1;int m1[];\n\t   String s[],s1;char c[],c1;\n\t   Reader.init(in,out);s=Reader.tokenize();n=Integer.parseInt(s[0]);m=Integer.parseInt(s[1]);\n\t   c=new char [n][m];\n\t   c1=new char [n][m];b=new int [n];m1=new int [m];\n\t   n1=0;\n\t   for(i=0;i<n;i++){s=Reader.tokenize();s1=Reader.tokenize();c1=s1.toCharArray();\n\t   for(j=0;j<m;j++){c[i][j]=c1[j];}\n\t   }\n\t   for(i=0;i<n;i++){\n\t   \t   for(j=0;j<m;j++){\n\t   \t   \t   if(c[i][j]=='1')\n\t   \t   \t   {\n\t   \t   \t   \t b[i]++;\n\t   \t   \t   }\n\t   \t   }\n\t   }\n\t   for(j=0;j<m;j++){p=0;h=-1;}\n\t   for(i=0;i<n;i++){\n\t   \t   if(b[i]==m){n1++;h=i;}\n\t   }\n\t   if(n1==0){p=0;}else{p=1;}\n\t   for(i=0;i<n;i++){\n\t   \t   if(b[i]==m){if(h==-1){h=i;}m1[j]=j;}\n\t   \t   else{h=0;}\n\t   }\n\t   k=Integer.MAX_VALUE;\n\t   for(i=0;i<n;i++){\n\t   \t   h=b[i];j=0;c1=new char [m];\n\t   \t   for(j=0;j<m;j++){c1[j]=c[i][m1[j]];}\n\t   \t   for(j=0;j<m-1;j++){if(c1[j]=='0'&&c1[j+1]=='1'){h=h+2;}}\n\t   \t   if(h<k){k=h;p=i;}\n\t   }\n\t   Reader.write(Integer.toString(p));\n\t   \n\t}\n   }\n   \n \n\n   \n"}
{"src_uid": "a491be7d5883d594c3e907a22be607c9", "id": 79, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1500, "testcases": "[{'input': '3 6\\r\\n101010\\r\\n000100\\r\\n100000\\r\\n', 'output': ['3\\r\\n']}, {'input': '2 3\\r\\n111\\r\\n000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '1 1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '1 1\\r\\n0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 1\\r\\n1\\r\\n1\\r\\n0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '6 2\\r\\n10\\r\\n11\\r\\n01\\r\\n01\\r\\n10\\r\\n11\\r\\n', 'output': ['2\\r\\n']}, {'input': '3 3\\r\\n001\\r\\n010\\r\\n100\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 4\\r\\n0001\\r\\n0100\\r\\n0010\\r\\n1000\\r\\n', 'output': ['4\\r\\n']}, {'input': '5 5\\r\\n10000\\r\\n01000\\r\\n00100\\r\\n00010\\r\\n00001\\r\\n', 'output': ['6\\r\\n']}, {'input': '5 5\\r\\n10001\\r\\n00100\\r\\n01000\\r\\n01001\\r\\n11111\\r\\n', 'output': ['2\\r\\n']}, {'input': '5 5\\r\\n11111\\r\\n11111\\r\\n11111\\r\\n11111\\r\\n00000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 10\\r\\n0001000100\\r\\n1000001000\\r\\n0001000001\\r\\n0100001010\\r\\n0110100000\\r\\n', 'output': ['5\\r\\n']}, {'input': '6 6\\r\\n111000\\r\\n011100\\r\\n001110\\r\\n000111\\r\\n100011\\r\\n110001\\r\\n', 'output': ['4\\r\\n']}, {'input': '2 9\\r\\n101010101\\r\\n010101010\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 6\\r\\n000001\\r\\n100000\\r\\n100000\\r\\n100000\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 6\\r\\n000010\\r\\n010000\\r\\n000100\\r\\n', 'output': ['3\\r\\n']}, {'input': '4 10\\r\\n0000101010\\r\\n1010101010\\r\\n0101010101\\r\\n0000010100\\r\\n', 'output': ['2\\r\\n']}, {'input': '10 10\\r\\n0000000000\\r\\n0000000010\\r\\n0010000000\\r\\n0111000010\\r\\n1000000000\\r\\n0000000100\\r\\n0000000100\\r\\n0000100100\\r\\n0010000000\\r\\n0000100000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 10\\r\\n0000000000\\r\\n0000001000\\r\\n0000000100\\r\\n0101000100\\r\\n0000000000\\r\\n0000000000\\r\\n1000110000\\r\\n1011010010\\r\\n0000100000\\r\\n0000001001\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 10\\r\\n0001001101\\r\\n0010001010\\r\\n1100000000\\r\\n0110110110\\r\\n1011011010\\r\\n1001001001\\r\\n0100010001\\r\\n0110000100\\r\\n0000100000\\r\\n1000010000\\r\\n', 'output': ['8\\r\\n']}, {'input': '10 10\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n1111111111\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 5\\r\\n10000\\r\\n00001\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 7\\r\\n1000000\\r\\n0000010\\r\\n1000000\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 5\\r\\n10010\\r\\n11001\\r\\n00010\\r\\n11000\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 10\\r\\n0000000001\\r\\n1000000000\\r\\n', 'output': ['1\\r\\n']}, {'input': '5 5\\r\\n10000\\r\\n10000\\r\\n00001\\r\\n10000\\r\\n10000\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 4\\r\\n0001\\r\\n0001\\r\\n1000\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 6\\r\\n101010\\r\\n000010\\r\\n100000\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 7\\r\\n0100000\\r\\n0100000\\r\\n0000001\\r\\n0000001\\r\\n', 'output': ['4\\r\\n']}, {'input': '5 1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 5\\r\\n00001\\r\\n10000\\r\\n00001\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 1\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['-1\\r\\n']}]", "source_code": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.BufferedReader;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.util.Arrays;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author http://www.moxeu.com/\n */\npublic class Main {\n\tprivate static OutputStream outputStream;\n\tprivate static BufferedReader bufferedReader;\n\tprivate static InputStream inputStream;\n\n\tprivate static StringTokenizer tokenizer;\n\n\tprivate static void flush() throws IOException {\n\t\tif(tokenizer == null ||!tokenizer.hasMoreTokens()) {\n\t\t\tString nextLine = bufferedReader.readLine();\n\t\t\tif(nextLine == null)\n\t\t\t\tthrow new IOException();\n\n\t\t\ttokenizer = new StringTokenizer(nextLine);\n\t\t}\n\t}\n\n\tprivate static void close() throws IOException {\n\t\tif(inputStream!= null)\n\t\t\tinputStream.close();\n\n\t\tif(bufferedReader!= null)\n\t\t\tbufferedReader.close();\n\n\t\tif(outputStream!= null)\n\t\t\toutputStream.close();\n\t}\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tLocale.setDefault(new Locale(\"ru\", \"Russian\"));\n\t\tSystem.in.close();\n\t\tinputStream = System.in;\n\t\tbufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n\t\toutputStream = System.out;\n\t\tprintWriter = new PrintWriter(outputStream);\n\n\t\tsolve();\n\n\t\tclose();\n\t}\n\n\tprivate static void solve() throws IOException {\n\t\tint n = parseInt(next()), m = parseInt(next());\n\n\t\tint[][] a = new int[n][m];\n\n\t\tfor(int i = 0; i < n; i++)\n\t\t\ta[i] = parseIntArray(next());\n\n\t\tint min = Integer.MAX_VALUE;\n\n\t\tfor(int j = 0; j < m; j++) {\n\t\t\tint count = 0;\n\n\t\t\tint row = j;\n\t\t\tboolean f = true;\n\n\t\t\twhile(f) {\n\t\t\t\tfor(int i = 0; i < n; i++)\n\t\t\t\t\tif(a[i][row] == 1)\n\t\t\t\t\t\ta[i][row] = 0;\n\t\t\t\t\telse {\n\t\t\t\t\t\tf = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\tcount++;\n\t\t\t\trow = (row + 1) % m;\n\t\t\t}\n\n\t\t\tf = true;\n\n\t\t\trow = j;\n\n\t\t\twhile(f) {\n\t\t\t\tfor(int i = 0; i < n; i++)\n\t\t\t\t\tif(a[i][row] == 0)\n\t\t\t\t\t\ta[i][row] = 1;\n\t\t\t\t\telse {\n\t\t\t\t\t\tf = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\tcount++;\n\t\t\t\trow = (row + m - 1) % m;\n\t\t\t}\n\n\t\t\tmin = Math.min(count, min);\n\t\t}\n\n\t\tprintWriter.print(min == Integer.MAX_VALUE? -1 : min);\n\t\tprintWriter.close();\n\t}\n\n\tprivate static int parseInt(String s) {\n\t\treturn Integer.parseInt(s);\n\t}\n\n\tprivate static long parseLong(String s) {\n\t\treturn Long.parseLong(s);\n\t}\n\n\tprivate static int[] parseIntArray(String s) {\n\t\tStringTokenizer tokenizer = new StringTokenizer(s);\n\t\tint[] result = new int[tokenizer.countTokens()];\n\t\tfor(int i = 0; i < result.length; i++)\n\t\t\tresult["}
{"src_uid": "c3244e952830643938d51ce14f043d7d", "id": 80, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1200, "testcases": "[{'input': 'atob\\r\\na\\r\\nb\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'aaacaaa\\r\\naca\\r\\naa\\r\\n', 'output': ['both\\r\\n']}, {'input': 'aaa\\r\\naa\\r\\naa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'astalavista\\r\\nastla\\r\\nlavista\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'abacabadabacaba\\r\\nabacaba\\r\\nabacaba\\r\\n', 'output': ['both\\r\\n']}, {'input': 'a\\r\\na\\r\\na\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'ab\\r\\nb\\r\\na\\r\\n', 'output': ['backward\\r\\n']}, {'input': 'aaa\\r\\naaaa\\r\\naaaa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'bbabbbbababbaabaabaa\\r\\nabb\\r\\nbaab\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'bbbbbbbbbbbbbbbbbbbbbbbbb\\r\\nbbbb\\r\\nbbbbb\\r\\n', 'output': ['both\\r\\n']}, {'input': 'babaabababaaaababaabababaabababababababbababbbabbaabababaababbaabbababaababaaabababaabbaababaaababaa\\r\\nabaabababaa\\r\\nabaabbaa\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'bbbbbbbbbbbbbbbbbbbbbbbbb\\r\\nbbbb\\r\\nbbbbb\\r\\n', 'output': ['both\\r\\n']}, {'input': 'aababaaababaabbaabababaaababaabababbaabbabaabababaabbabbbababbababababababaabababaababaaaabababaabab\\r\\nabaabababaa\\r\\nabaabbaa\\r\\n', 'output': ['backward\\r\\n']}, {'input': 'aaaa\\r\\naaa\\r\\naa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'zzzz\\r\\nzz\\r\\nzzz\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'zzzz\\r\\nzzzz\\r\\nzzzz\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'zzzz\\r\\nzz\\r\\nzz\\r\\n', 'output': ['both\\r\\n']}, {'input': 'aabaa\\r\\naab\\r\\nbaa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'aabaab\\r\\naba\\r\\nab\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'aab\\r\\nb\\r\\naa\\r\\n', 'output': ['backward\\r\\n']}, {'input': 'abacaba\\r\\naca\\r\\nba\\r\\n', 'output': ['both\\r\\n']}]", "source_code": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\nimport java.util.ArrayList;\nimport static java.util.Collections.reverseOrder;\nimport java.util.Comparator;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class HelloWorld {\n\n   public static void main(String[] args) {\n       Scanner in = new Scanner(System.in);\n       String a = in.nextLine();\n       String b = in.nextLine();\n       String c = in.nextLine();\n       String[] x = new String[3];\n       x[0] = a;\n       x[1] = b;\n       x[2] = c;\n       String result = \"fantasy\";\n       for(int i=0 ; i<3 ;i++){\n       String s = \"\" ;\n       s+=x[1] ;\n       s+=x[0];\n       x[0] = x[2];\n       x[2] = s ;\n       if(x[0].contains(b) && x[0].contains(a)){\n           result = \"both\";\n       }\n       else if(x[0].contains(b) &&!x[0].contains(c)){\n           result = \"forward\";\n       }\n       else if(x[0].contains(c) &&!x[0].contains(b)){\n           result = \"backward\";\n       }\n       else if(x[0].contains(a)){\n           result = \"fantasy\";\n       }\n       \n       \n       }\n       System.out.println(result);\n   }\n}\n"}
{"src_uid": "c3244e952830643938d51ce14f043d7d", "id": 80, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1200, "testcases": "[{'input': 'atob\\r\\na\\r\\nb\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'aaacaaa\\r\\naca\\r\\naa\\r\\n', 'output': ['both\\r\\n']}, {'input': 'aaa\\r\\naa\\r\\naa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'astalavista\\r\\nastla\\r\\nlavista\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'abacabadabacaba\\r\\nabacaba\\r\\nabacaba\\r\\n', 'output': ['both\\r\\n']}, {'input': 'a\\r\\na\\r\\na\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'ab\\r\\nb\\r\\na\\r\\n', 'output': ['backward\\r\\n']}, {'input': 'aaa\\r\\naaaa\\r\\naaaa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'bbabbbbababbaabaabaa\\r\\nabb\\r\\nbaab\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'bbbbbbbbbbbbbbbbbbbbbbbbb\\r\\nbbbb\\r\\nbbbbb\\r\\n', 'output': ['both\\r\\n']}, {'input': 'babaabababaaaababaabababaabababababababbababbbabbaabababaababbaabbababaababaaabababaabbaababaaababaa\\r\\nabaabababaa\\r\\nabaabbaa\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'bbbbbbbbbbbbbbbbbbbbbbbbb\\r\\nbbbb\\r\\nbbbbb\\r\\n', 'output': ['both\\r\\n']}, {'input': 'aababaaababaabbaabababaaababaabababbaabbabaabababaabbabbbababbababababababaabababaababaaaabababaabab\\r\\nabaabababaa\\r\\nabaabbaa\\r\\n', 'output': ['backward\\r\\n']}, {'input': 'aaaa\\r\\naaa\\r\\naa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'zzzz\\r\\nzz\\r\\nzzz\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'zzzz\\r\\nzzzz\\r\\nzzzz\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'zzzz\\r\\nzz\\r\\nzz\\r\\n', 'output': ['both\\r\\n']}, {'input': 'aabaa\\r\\naab\\r\\nbaa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'aabaab\\r\\naba\\r\\nab\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'aab\\r\\nb\\r\\naa\\r\\n', 'output': ['backward\\r\\n']}, {'input': 'abacaba\\r\\naca\\r\\nba\\r\\n', 'output': ['both\\r\\n']}]", "source_code": "import java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\n\npublic class Main {\n\n    // This is a main method for a conts-based contest; comment out when submitting to coding bat site\n   /*public static void main(String[] args) throws Exception {\n       if (args.length == 0) {\n           File f = new File(\"test.txt\");\n           if (f.exists() && f.canRead())\n              System.setIn(new FileReader(f));\n       }\n\n       Scanner in = new Scanner(System.in);\n       String a = in.next();\n       String b = in.next();\n       String c = in.next();\n       String d[] = { a+b,b+a };\n\n\n       String check[] = { \"fantasy\", \"both\", \"backward\", \"forward\" };\n       int min = 3;\n\n       for (int i = 0; i < 2; ++i) {\n           int j = 0;\n           while (j < d.length) {\n               if (d[j].indexOf(d[(j+i)%2]) >= 0) {\n                   j++;\n               } else {\n                   j = (j+1)%2;\n               }\n           }\n           min = Math.min(min,j);\n       }\n\n       System.out.println(check[min]);\n    }*/\n\n\n\n\n\n    // This is a main method for a coding bat contest; uncomment when submitting to coding bat site\n  public static void main(String[] args) throws Exception {\n\n      Scanner in = new Scanner(System.in);\n      String a = in.next();\n      String b = in.next();\n      String c = in.next();\n      String d[] = { a+b,b+a };\n\n\n      String check[] = { \"fantasy\", \"both\", \"backward\", \"forward\" };\n      int min = 3;\n\n      for (int i = 0; i < 2; ++i) {\n          int j = 0;\n          while (j < d.length) {\n              if (d[j].indexOf(d[(j+i)%2]) >= 0) {\n                  j++;\n              } else {\n                  j = (j+1)%2;\n              }\n          }\n          min = Math.min(min,j);\n      }\n\n      System.out.println(check[min]);\n  }\n}"}
{"src_uid": "c3244e952830643938d51ce14f043d7d", "id": 80, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1200, "testcases": "[{'input': 'atob\\r\\na\\r\\nb\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'aaacaaa\\r\\naca\\r\\naa\\r\\n', 'output': ['both\\r\\n']}, {'input': 'aaa\\r\\naa\\r\\naa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'astalavista\\r\\nastla\\r\\nlavista\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'abacabadabacaba\\r\\nabacaba\\r\\nabacaba\\r\\n', 'output': ['both\\r\\n']}, {'input': 'a\\r\\na\\r\\na\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'ab\\r\\nb\\r\\na\\r\\n', 'output': ['backward\\r\\n']}, {'input': 'aaa\\r\\naaaa\\r\\naaaa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'bbabbbbababbaabaabaa\\r\\nabb\\r\\nbaab\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'bbbbbbbbbbbbbbbbbbbbbbbbb\\r\\nbbbb\\r\\nbbbbb\\r\\n', 'output': ['both\\r\\n']}, {'input': 'babaabababaaaababaabababaabababababababbababbbabbaabababaababbaabbababaababaaabababaabbaababaaababaa\\r\\nabaabababaa\\r\\nabaabbaa\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'bbbbbbbbbbbbbbbbbbbbbbbbb\\r\\nbbbb\\r\\nbbbbb\\r\\n', 'output': ['both\\r\\n']}, {'input': 'aababaaababaabbaabababaaababaabababbaabbabaabababaabbabbbababbababababababaabababaababaaaabababaabab\\r\\nabaabababaa\\r\\nabaabbaa\\r\\n', 'output': ['backward\\r\\n']}, {'input': 'aaaa\\r\\naaa\\r\\naa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'zzzz\\r\\nzz\\r\\nzzz\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'zzzz\\r\\nzzzz\\r\\nzzzz\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'zzzz\\r\\nzz\\r\\nzz\\r\\n', 'output': ['both\\r\\n']}, {'input': 'aabaa\\r\\naab\\r\\nbaa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'aabaab\\r\\naba\\r\\nab\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'aab\\r\\nb\\r\\naa\\r\\n', 'output': ['backward\\r\\n']}, {'input': 'abacaba\\r\\naca\\r\\nba\\r\\n', 'output': ['both\\r\\n']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class a\n{\n\tpublic static void main(String[] args) throws IOException\n\t{\n\t\tInputStreamReader in = new InputStreamReader(System.in);\n\t\tBufferedReader reader = new BufferedReader(in);\n\n\t\tString start = reader.readLine();\n\t\tString first = reader.readLine();\n\t\tString second = reader.readLine();\n\n\t\treader.close();\n\t\tin.close();\n\n\t\tboolean first_pos = start.indexOf(first)!= -1;\n\t\tboolean first_neg = start.indexOf(second)!= -1;\n\t\tboolean second_pos = new StringBuilder(start).reverse().toString().indexOf(first)!= -1;\n\t\tboolean second_neg = new StringBuilder(start).reverse().toString().indexOf(second)!= -1;\n\n\t\tif(first_pos && second_neg)\n\t\t\tSystem.out.println(\"forward\");\n\t\telse if(first_neg && second_pos)\n\t\t\tSystem.out.println(\"backward\");\n\t\telse if(first_pos && second_pos)\n\t\t\tSystem.out.println(\"both\");\n\t\telse if(first_neg && second_neg)\n\t\t\tSystem.out.println(\"both\");\n\t\telse\n\t\t\tSystem.out.println(\"fantasy\");\n\t}\n}"}
{"src_uid": "c3244e952830643938d51ce14f043d7d", "id": 80, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1200, "testcases": "[{'input': 'atob\\r\\na\\r\\nb\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'aaacaaa\\r\\naca\\r\\naa\\r\\n', 'output': ['both\\r\\n']}, {'input': 'aaa\\r\\naa\\r\\naa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'astalavista\\r\\nastla\\r\\nlavista\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'abacabadabacaba\\r\\nabacaba\\r\\nabacaba\\r\\n', 'output': ['both\\r\\n']}, {'input': 'a\\r\\na\\r\\na\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'ab\\r\\nb\\r\\na\\r\\n', 'output': ['backward\\r\\n']}, {'input': 'aaa\\r\\naaaa\\r\\naaaa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'bbabbbbababbaabaabaa\\r\\nabb\\r\\nbaab\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'bbbbbbbbbbbbbbbbbbbbbbbbb\\r\\nbbbb\\r\\nbbbbb\\r\\n', 'output': ['both\\r\\n']}, {'input': 'babaabababaaaababaabababaabababababababbababbbabbaabababaababbaabbababaababaaabababaabbaababaaababaa\\r\\nabaabababaa\\r\\nabaabbaa\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'bbbbbbbbbbbbbbbbbbbbbbbbb\\r\\nbbbb\\r\\nbbbbb\\r\\n', 'output': ['both\\r\\n']}, {'input': 'aababaaababaabbaabababaaababaabababbaabbabaabababaabbabbbababbababababababaabababaababaaaabababaabab\\r\\nabaabababaa\\r\\nabaabbaa\\r\\n', 'output': ['backward\\r\\n']}, {'input': 'aaaa\\r\\naaa\\r\\naa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'zzzz\\r\\nzz\\r\\nzzz\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'zzzz\\r\\nzzzz\\r\\nzzzz\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'zzzz\\r\\nzz\\r\\nzz\\r\\n', 'output': ['both\\r\\n']}, {'input': 'aabaa\\r\\naab\\r\\nbaa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'aabaab\\r\\naba\\r\\nab\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'aab\\r\\nb\\r\\naa\\r\\n', 'output': ['backward\\r\\n']}, {'input': 'abacaba\\r\\naca\\r\\nba\\r\\n', 'output': ['both\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Main{\n  static boolean check (String s, String s1, String s2)\n{\n  int n = s.length();\n  return ( s.indexOf(s2) < s.indexOf(s1) && s.lastIndexOf(s2) > s.lastIndexOf(s1) ) || ( s.indexOf(s2) > s.indexOf(s1) && s.lastIndexOf(s2) < s.lastIndexOf(s1) );\n}\n\n  public static void main(String [] args){\n    String a = read(), b = read(), c = read();\n    if(check(a, b, c))\n      System.out.println(\"fantasy\");\n    else if(check(a, b, c) && check(new StringBuilder(a).reverse().toString(), b, c)){\n      System.out.println(\"both\");\n    }\n    else if(check(a, b, c))\n      System.out.println(\"forward\");\n    else if(check(new StringBuilder(a).reverse().toString(), b, c))\n      System.out.println(\"backward\");\n    else\n      System.out.println(\"fantasy\");\n  }\n  \n  static String read()\n  {\n    return readline().trim();\n  }\n  \n  static String readline()\n  {\n    String s = \"\";\n    int c = System.in.read();\n    if(c!= '\\n' && c!= -1)\n    {\n      while((c = System.in.read())!= '\\n' && c!= -1)\n        s += (char)c;\n    }\n    return s;\n  }\n}"}
{"src_uid": "c3244e952830643938d51ce14f043d7d", "id": 80, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1200, "testcases": "[{'input': 'atob\\r\\na\\r\\nb\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'aaacaaa\\r\\naca\\r\\naa\\r\\n', 'output': ['both\\r\\n']}, {'input': 'aaa\\r\\naa\\r\\naa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'astalavista\\r\\nastla\\r\\nlavista\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'abacabadabacaba\\r\\nabacaba\\r\\nabacaba\\r\\n', 'output': ['both\\r\\n']}, {'input': 'a\\r\\na\\r\\na\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'ab\\r\\nb\\r\\na\\r\\n', 'output': ['backward\\r\\n']}, {'input': 'aaa\\r\\naaaa\\r\\naaaa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'bbabbbbababbaabaabaa\\r\\nabb\\r\\nbaab\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'bbbbbbbbbbbbbbbbbbbbbbbbb\\r\\nbbbb\\r\\nbbbbb\\r\\n', 'output': ['both\\r\\n']}, {'input': 'babaabababaaaababaabababaabababababababbababbbabbaabababaababbaabbababaababaaabababaabbaababaaababaa\\r\\nabaabababaa\\r\\nabaabbaa\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'bbbbbbbbbbbbbbbbbbbbbbbbb\\r\\nbbbb\\r\\nbbbbb\\r\\n', 'output': ['both\\r\\n']}, {'input': 'aababaaababaabbaabababaaababaabababbaabbabaabababaabbabbbababbababababababaabababaababaaaabababaabab\\r\\nabaabababaa\\r\\nabaabbaa\\r\\n', 'output': ['backward\\r\\n']}, {'input': 'aaaa\\r\\naaa\\r\\naa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'zzzz\\r\\nzz\\r\\nzzz\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'zzzz\\r\\nzzzz\\r\\nzzzz\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'zzzz\\r\\nzz\\r\\nzz\\r\\n', 'output': ['both\\r\\n']}, {'input': 'aabaa\\r\\naab\\r\\nbaa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'aabaab\\r\\naba\\r\\nab\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'aab\\r\\nb\\r\\naa\\r\\n', 'output': ['backward\\r\\n']}, {'input': 'abacaba\\r\\naca\\r\\nba\\r\\n', 'output': ['both\\r\\n']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\n/* Mighty Cohadar */\npublic class FansTrain {\n\n\tprivate static String solve(String color, String color1, String color2) {\n\t\tint pos1 = color.indexOf(color1), pos2 = color.indexOf(color2);\n\t\tif (pos1 == pos2 && pos1!= -1) return \"both\";\n\t\tif (pos2 == -1 && pos1 == color.length() - color1.length()) return \"fantasy\";\n\t\tif (pos2 == -1) return \"backward\";\n\t\tif (pos1 == -1) return \"forward\";\n\t\tif (pos2 > pos1) return \"fantasy\";\n\t\tif (pos2 < pos1) return \"backward\";\n\t\treturn \"fantasy\";\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tString color = readString();\n\t\tString color1 = readString();\n\t\tString color2 = readString();\n\t\tSystem.out.println(solve(color, color1, color2));\n\t}\n\n\tprivate static String readString() {\n\t\ttry (Scanner sc = new Scanner(System.in)) {\n\t\t\treturn sc.next();\n\t\t}\n\t}\n\n}\n\n"}
{"src_uid": "d1e381b72a6c09a0723cfe72c0917372", "id": 81, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1100, "testcases": "[{'input': '3310\\r\\n1033\\r\\n', 'output': ['OK']}, {'input': '4\\r\\n5\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '40\\r\\n04\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '12\\r\\n12\\r\\n', 'output': ['OK']}, {'input': '432\\r\\n234\\r\\n', 'output': ['OK']}, {'input': '17109\\r\\n01179\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '888\\r\\n888\\r\\n', 'output': ['OK']}, {'input': '912\\r\\n9123\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '0\\r\\n00\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '11110\\r\\n1111\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '7391\\r\\n1397\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '201\\r\\n102\\r\\n', 'output': ['OK']}, {'input': '111111111\\r\\n111111111\\r\\n', 'output': ['OK']}, {'input': '32352320\\r\\n22203335\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '1000000000\\r\\n1\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '994321\\r\\n123499\\r\\n', 'output': ['OK']}, {'input': '10101\\r\\n10101\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '666\\r\\n0666\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '2\\r\\n02\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '313\\r\\n133\\r\\n', 'output': ['OK']}, {'input': '987235645\\r\\n234556789\\r\\n', 'output': ['OK']}, {'input': '90812\\r\\n010289\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '123\\r\\n321\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '707\\r\\n770\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '77774444\\r\\n47474747\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '1270\\r\\n1027\\r\\n', 'output': ['OK']}, {'input': '320\\r\\n23\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '123456789\\r\\n123456789\\r\\n', 'output': ['OK']}, {'input': '918273645\\r\\n546372819\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '300000003\\r\\n30000003\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '0\\r\\n0\\r\\n', 'output': ['OK']}, {'input': '0\\r\\n7\\r\\n', 'output': ['WRONG_ANSWER']}]", "source_code": "import java.util.Scanner;\n\npublic class DigitDice {\n\t\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner input = new Scanner(System.in);\n\t\tString original = input.nextLine();\n\t\tString temp = input.nextLine();\n\t\tString output = \"WRONG_ANSWER\";\n\t\tint min = 0;\n\t\tfor (int a = 0; a <= 9; a++) {\n\t\t\tfor (int b = 0; b <= 9; b++) {\n\t\t\t\tfor (int c = 0; c <= 9; c++) {\n\t\t\t\t\tfor (int d = 0; d <= 9; d++) {\n\t\t\t\t\t\tfor (int e = 0; e <= 9; e++) {\n\t\t\t\t\t\t\tfor (int f = 0; f <= 9; f++) {\n\t\t\t\t\t\t\t\tfor (int g = 0; g <= 9; g++) {\n\t\t\t\t\t\t\t\t\tfor (int h = 0; h <= 9; h++) {\n\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i <= 9; i++) {\n\t\t\t\t\t\t\t\t\t\t\tif (a + \"\" + b + c + d + e + f + g + h + i.equals(temp) && (a > 0 || b > 0 || c > 0 || d > 0 || e > 0 || f > 0 || g > 0 || h > 0 || i > 0)) {\n\t\t\t\t\t\t\t\t\t\t\t\tint value = a * 10000000 + b * 1000000 + c * 100000 + d * 10000 + e * 1000 + f * 100 + g * 10 + h * 1;\n\t\t\t\t\t\t\t\t\t\t\t\tif (value < min || min == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tmin = value;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutput = \"OK\";\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (original.equals(\"0\")) {\n\t\t\tif (output.equals(\"OK\")) {\n\t\t\t\toutput = \"WRONG_ANSWER\";\n\t\t\t} else if (output.equals(\"WRONG_ANSWER\")) {\n\t\t\t\toutput = \"OK\";\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(output);\n\t\t\n\t}\n\n}\n"}
{"src_uid": "d1e381b72a6c09a0723cfe72c0917372", "id": 81, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1100, "testcases": "[{'input': '3310\\r\\n1033\\r\\n', 'output': ['OK']}, {'input': '4\\r\\n5\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '40\\r\\n04\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '12\\r\\n12\\r\\n', 'output': ['OK']}, {'input': '432\\r\\n234\\r\\n', 'output': ['OK']}, {'input': '17109\\r\\n01179\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '888\\r\\n888\\r\\n', 'output': ['OK']}, {'input': '912\\r\\n9123\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '0\\r\\n00\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '11110\\r\\n1111\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '7391\\r\\n1397\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '201\\r\\n102\\r\\n', 'output': ['OK']}, {'input': '111111111\\r\\n111111111\\r\\n', 'output': ['OK']}, {'input': '32352320\\r\\n22203335\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '1000000000\\r\\n1\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '994321\\r\\n123499\\r\\n', 'output': ['OK']}, {'input': '10101\\r\\n10101\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '666\\r\\n0666\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '2\\r\\n02\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '313\\r\\n133\\r\\n', 'output': ['OK']}, {'input': '987235645\\r\\n234556789\\r\\n', 'output': ['OK']}, {'input': '90812\\r\\n010289\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '123\\r\\n321\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '707\\r\\n770\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '77774444\\r\\n47474747\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '1270\\r\\n1027\\r\\n', 'output': ['OK']}, {'input': '320\\r\\n23\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '123456789\\r\\n123456789\\r\\n', 'output': ['OK']}, {'input': '918273645\\r\\n546372819\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '300000003\\r\\n30000003\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '0\\r\\n0\\r\\n', 'output': ['OK']}, {'input': '0\\r\\n7\\r\\n', 'output': ['WRONG_ANSWER']}]", "source_code": "import java.io.*;\nimport java.math.*;\nimport java.util.*;\n\npublic class Main implements Runnable {\n    private void solve() throws IOException {\n        Reader.init(System.in);\n        char[] pattern = Reader.next().toCharArray();\n        char[] answer = Reader.next().toCharArray();\n\n        int ok = 0;\n        for (int mask = 0; mask < (1 << pattern.length); ++mask) {\n            char[] copy = pattern.clone();\n            for (int i = 0; i < pattern.length; ++i) {\n                if (mask >> i & 1!= 0) {\n                    copy[i] = answer[i];\n                }\n            }\n\n            boolean isValid = true;\n            for (int i = 1; i < copy.length; ++i) {\n                if (copy[i - 1] > copy[i]) {\n                    isValid = false;\n                    break;\n                }\n            }\n\n            ok |= isValid? 1 : 0;\n        }\n\n        System.out.println(ok == 1? \"OK\" : \"WRONG_ANSWER\");\n    }\n\n    public static void main(String[] args) throws IOException {\n        try (Input reader = new StandardInput()) {\n            new Main().run();\n        }\n    }\n\n    private static interface Input extends Closeable {\n        String next() throws IOException;\n\n        default int nextInt() throws IOException {\n            return Integer.parseInt(next());\n        }\n\n        default long nextLong() throws IOException {\n            return Long.parseLong(next());\n        }\n\n        default double nextDouble() throws IOException {\n            return Double.parseDouble(next());\n        }\n\n        default int[] readIntArray() throws IOException {\n            return readIntArray(nextInt());\n        }\n\n        default int[] readIntArray(int size) throws IOException {\n            int[] array = new int[size];\n            for (int i = 0; i < array.length; ++i) {\n                array[i] = nextInt();\n            }\n\n            return array;\n        }\n\n        default long[] readLongArray(int size) throws IOException {\n            long[] array = new long[size];\n            for (int i = 0; i < array.length; ++i) {\n                array[i] = nextLong();\n            }\n\n            return array;\n        }\n\n        default double[] readDoubleArray(int size) throws IOException {\n            double[] array = new double[size];\n            for (int i = 0; i < array.length; ++i) {\n                array[i] = nextDouble();\n            }\n\n            return array;\n        }\n    }\n\n    private static class StandardInput implements Input {\n        private final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        private final StringTokenizer tokenizer;\n\n        private StandardInput() {\n            tokenizer = new StringTokenizer(\"\");\n        }\n\n        @Override\n        public void init(InputStream input) {\n            reader.close();\n            reader.flush();\n            reader.init(input);\n            tokenizer.reset();\n        }\n\n        @Override\n        public void close() throws IOException {\n            reader.close();\n        }\n\n        @Override\n        public String next() throws IOException {\n            if (!tokenizer.hasMoreTokens()) {\n                tokenizer.close();\n                tokenizer.reset(reader.readLine());\n            }\n\n            return tokenizer.nextToken();\n        }\n    }\n\n    private static class Reader implements Input {\n        static boolean isChar(char[] array, int index) {\n            return index < array.length && array[index]!='';\n        }\n\n        private final char[] buffer;\n        private final int length;\n        private int ptr = 0;\n        private int bufferLen = 0;\n        private boolean hasNextByte = true;\n\n        private Reader(int capacity) {\n            buffer = new char[capacity];\n            length = capacity;\n        }\n\n        private void close() throws IOException {\n            if (reader!= null) {\n                reader.close();\n            }\n        }\n\n        private static void init(InputStream input) {\n            reader = new StandardInput();\n        }\n\n       "}
{"src_uid": "d1e381b72a6c09a0723cfe72c0917372", "id": 81, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1100, "testcases": "[{'input': '3310\\r\\n1033\\r\\n', 'output': ['OK']}, {'input': '4\\r\\n5\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '40\\r\\n04\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '12\\r\\n12\\r\\n', 'output': ['OK']}, {'input': '432\\r\\n234\\r\\n', 'output': ['OK']}, {'input': '17109\\r\\n01179\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '888\\r\\n888\\r\\n', 'output': ['OK']}, {'input': '912\\r\\n9123\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '0\\r\\n00\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '11110\\r\\n1111\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '7391\\r\\n1397\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '201\\r\\n102\\r\\n', 'output': ['OK']}, {'input': '111111111\\r\\n111111111\\r\\n', 'output': ['OK']}, {'input': '32352320\\r\\n22203335\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '1000000000\\r\\n1\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '994321\\r\\n123499\\r\\n', 'output': ['OK']}, {'input': '10101\\r\\n10101\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '666\\r\\n0666\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '2\\r\\n02\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '313\\r\\n133\\r\\n', 'output': ['OK']}, {'input': '987235645\\r\\n234556789\\r\\n', 'output': ['OK']}, {'input': '90812\\r\\n010289\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '123\\r\\n321\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '707\\r\\n770\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '77774444\\r\\n47474747\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '1270\\r\\n1027\\r\\n', 'output': ['OK']}, {'input': '320\\r\\n23\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '123456789\\r\\n123456789\\r\\n', 'output': ['OK']}, {'input': '918273645\\r\\n546372819\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '300000003\\r\\n30000003\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '0\\r\\n0\\r\\n', 'output': ['OK']}, {'input': '0\\r\\n7\\r\\n', 'output': ['WRONG_ANSWER']}]", "source_code": "import java.util.*;\npublic class Solution {\n    public static void main(String[] args) {\n        Scanner sc=new Scanner(System.in);\n        String alice=sc.next();\n        String bob=sc.next();\n        String ok=\"OK\";\n        String fail=\"WRONG_ANSWER\";\n        \n        int[] num=new int[10];\n        for(int i=0;i<alice.length();i++){\n            num[alice.charAt(i)-'0']++;\n        }\n        \n        int index=0;\n        int index1=0;\n        String smallest=alice;\n        while(index1<bob.length()){\n            if(bob.charAt(index1)>=alice.charAt(index)){\n                smallest=bob;\n                break;\n            }\n            index1++;\n        }\n        index1=0;\n        for(int i=0;i<10;i++){\n            while(num[i]>0){\n                num[i]--;\n                for(int j=i+1;j<10;j++){\n                    num[j]++;\n                }\n                String temp=smallest;\n                smallest=bob;\n                bob=temp;\n                index1++;\n                //System.out.println(index1);\n                //System.out.println(num[i]);\n            }\n            num[i]=0;\n        }\n        //System.out.println(index);\n        //System.out.println(index1);\n        \n        if(bob.equals(alice)||bob.equals(smallest)){\n            System.out.print(ok);\n        }else{\n            System.out.print(fail);\n        }\n    }\n}\n"}
{"src_uid": "d1e381b72a6c09a0723cfe72c0917372", "id": 81, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1100, "testcases": "[{'input': '3310\\r\\n1033\\r\\n', 'output': ['OK']}, {'input': '4\\r\\n5\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '40\\r\\n04\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '12\\r\\n12\\r\\n', 'output': ['OK']}, {'input': '432\\r\\n234\\r\\n', 'output': ['OK']}, {'input': '17109\\r\\n01179\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '888\\r\\n888\\r\\n', 'output': ['OK']}, {'input': '912\\r\\n9123\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '0\\r\\n00\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '11110\\r\\n1111\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '7391\\r\\n1397\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '201\\r\\n102\\r\\n', 'output': ['OK']}, {'input': '111111111\\r\\n111111111\\r\\n', 'output': ['OK']}, {'input': '32352320\\r\\n22203335\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '1000000000\\r\\n1\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '994321\\r\\n123499\\r\\n', 'output': ['OK']}, {'input': '10101\\r\\n10101\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '666\\r\\n0666\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '2\\r\\n02\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '313\\r\\n133\\r\\n', 'output': ['OK']}, {'input': '987235645\\r\\n234556789\\r\\n', 'output': ['OK']}, {'input': '90812\\r\\n010289\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '123\\r\\n321\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '707\\r\\n770\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '77774444\\r\\n47474747\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '1270\\r\\n1027\\r\\n', 'output': ['OK']}, {'input': '320\\r\\n23\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '123456789\\r\\n123456789\\r\\n', 'output': ['OK']}, {'input': '918273645\\r\\n546372819\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '300000003\\r\\n30000003\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '0\\r\\n0\\r\\n', 'output': ['OK']}, {'input': '0\\r\\n7\\r\\n', 'output': ['WRONG_ANSWER']}]", "source_code": "import java.util.*;\n\npublic class HelloWorld {\n\n     public static void main(String[] args) {\n\t  Scanner sc = new Scanner(System.in);\n\t  \n\t  String alice = sc.next();\n\t  String bob = sc.next();\n\t  \n\t  char min = alice.charAt(0);\n\t  int index = 0;\n\t  for(int i = 0; i < alice.length(); i++) {\n\t       if(min > alice.charAt(i)) {\n\t\t    min = alice.charAt(i);\n\t\t    index = i;\n\t       }\n\t  }\n\t  String bob_alice = bob + alice;\n\t  if(bob_alice.indexOf(alice)!= 0 ||!(bob_alice.substring(index+1, bob_alice.length()).equals(alice))) {\n\t       System.out.println(\"WRONG_ANSWER\");\n\t  } else {\n\t       System.out.println(\"OK\");\n\t  }\n     }\n}"}
{"src_uid": "d1e381b72a6c09a0723cfe72c0917372", "id": 81, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1100, "testcases": "[{'input': '3310\\r\\n1033\\r\\n', 'output': ['OK']}, {'input': '4\\r\\n5\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '40\\r\\n04\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '12\\r\\n12\\r\\n', 'output': ['OK']}, {'input': '432\\r\\n234\\r\\n', 'output': ['OK']}, {'input': '17109\\r\\n01179\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '888\\r\\n888\\r\\n', 'output': ['OK']}, {'input': '912\\r\\n9123\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '0\\r\\n00\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '11110\\r\\n1111\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '7391\\r\\n1397\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '201\\r\\n102\\r\\n', 'output': ['OK']}, {'input': '111111111\\r\\n111111111\\r\\n', 'output': ['OK']}, {'input': '32352320\\r\\n22203335\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '1000000000\\r\\n1\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '994321\\r\\n123499\\r\\n', 'output': ['OK']}, {'input': '10101\\r\\n10101\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '666\\r\\n0666\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '2\\r\\n02\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '313\\r\\n133\\r\\n', 'output': ['OK']}, {'input': '987235645\\r\\n234556789\\r\\n', 'output': ['OK']}, {'input': '90812\\r\\n010289\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '123\\r\\n321\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '707\\r\\n770\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '77774444\\r\\n47474747\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '1270\\r\\n1027\\r\\n', 'output': ['OK']}, {'input': '320\\r\\n23\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '123456789\\r\\n123456789\\r\\n', 'output': ['OK']}, {'input': '918273645\\r\\n546372819\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '300000003\\r\\n30000003\\r\\n', 'output': ['WRONG_ANSWER']}, {'input': '0\\r\\n0\\r\\n', 'output': ['OK']}, {'input': '0\\r\\n7\\r\\n', 'output': ['WRONG_ANSWER']}]", "source_code": "import java.util.*;\n\npublic class Main {\n\n  static Scanner scan = new Scanner(System.in);\n  \n  static void run() {\n    String n = scan.next();\n    String m = scan.next();\n    \n    String[] ns = n.split(\"\");\n    int[] n_ = new int[ns.length];\n    for (int i = 0; i < ns.length; i++)\n      n_[i] = Integer.parseInt(ns[i]);\n\n    String[] ms = m.split(\"\");\n    int[] m_ = new int[ms.length];\n    for (int i = 0; i < ms.length; i++)\n      m_[i] = Integer.parseInt(ms[i]);\n\n    int c = 0;\n    for (int i = 0; i < n_.length; i++) {\n      boolean ok = false;\n      for (int j = 0; j < m_.length; j++)\n        if (n_[i] == m_[j]) {\n          ok = true;\n          break;\n        }\n      if (ok)\n        c++;\n    }\n    \n    if (c == n_.length)\n      System.out.println(\"OK\");\n    else\n      System.out.println(\"WRONG_ANSWER\");\n  }\n  \n  public static void main(String[] args) {\n    run();\n  }\n\n}\n"}
{"src_uid": "c31fed523230af1f904218b2fe0d663d", "id": 82, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1200, "testcases": "[{'input': '2 2\\r\\n0 4\\r\\n6 2\\r\\n', 'output': ['4\\r\\n']}, {'input': '2 2\\r\\n0 4\\r\\n5 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '2 3\\r\\n0 4\\r\\n5 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '1 1\\r\\n1 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '1 2\\r\\n2 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 1\\r\\n2 1\\r\\n1 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 2\\r\\n0 4\\r\\n7 4\\r\\n', 'output': ['4\\r\\n']}, {'input': '4 1\\r\\n-12 1\\r\\n-14 1\\r\\n4 1\\r\\n-11 1\\r\\n', 'output': ['5\\r\\n']}, {'input': '6 15\\r\\n19 1\\r\\n2 3\\r\\n6 2\\r\\n-21 2\\r\\n-15 2\\r\\n23 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '10 21\\r\\n-61 6\\r\\n55 2\\r\\n-97 1\\r\\n37 1\\r\\n-39 1\\r\\n26 2\\r\\n21 1\\r\\n64 3\\r\\n-68 1\\r\\n-28 6\\r\\n', 'output': ['6\\r\\n']}, {'input': '26 51\\r\\n783 54\\r\\n-850 6\\r\\n-997 59\\r\\n573 31\\r\\n-125 20\\r\\n472 52\\r\\n101 5\\r\\n-561 4\\r\\n625 35\\r\\n911 14\\r\\n-47 33\\r\\n677 55\\r\\n-410 54\\r\\n13 53\\r\\n173 31\\r\\n968 30\\r\\n-497 7\\r\\n832 42\\r\\n271 59\\r\\n-638 52\\r\\n-301 51\\r\\n378 36\\r\\n-813 7\\r\\n-206 22\\r\\n-737 37\\r\\n-911 9\\r\\n', 'output': ['35\\r\\n']}, {'input': '14 101\\r\\n121 88\\r\\n-452 91\\r\\n635 28\\r\\n-162 59\\r\\n-872 26\\r\\n-996 8\\r\\n468 86\\r\\n742 63\\r\\n892 89\\r\\n-249 107\\r\\n300 51\\r\\n-753 17\\r\\n-620 31\\r\\n-13 34\\r\\n', 'output': ['16\\r\\n']}, {'input': '3 501\\r\\n827 327\\r\\n-85 480\\r\\n-999 343\\r\\n', 'output': ['6\\r\\n']}, {'input': '2 999\\r\\n-999 471\\r\\n530 588\\r\\n', 'output': ['4\\r\\n']}, {'input': '22 54\\r\\n600 43\\r\\n806 19\\r\\n-269 43\\r\\n-384 78\\r\\n222 34\\r\\n392 10\\r\\n318 30\\r\\n488 73\\r\\n-756 49\\r\\n-662 22\\r\\n-568 50\\r\\n-486 16\\r\\n-470 2\\r\\n96 66\\r\\n864 16\\r\\n934 15\\r\\n697 43\\r\\n-154 30\\r\\n775 5\\r\\n-876 71\\r\\n-33 78\\r\\n-991 31\\r\\n', 'output': ['30\\r\\n']}, {'input': '17 109\\r\\n52 7\\r\\n216 24\\r\\n-553 101\\r\\n543 39\\r\\n391 92\\r\\n-904 67\\r\\n95 34\\r\\n132 14\\r\\n730 103\\r\\n952 118\\r\\n-389 41\\r\\n-324 36\\r\\n-74 2\\r\\n-147 99\\r\\n-740 33\\r\\n233 1\\r\\n-995 3\\r\\n', 'output': ['16\\r\\n']}, {'input': '4 512\\r\\n-997 354\\r\\n-568 216\\r\\n-234 221\\r\\n603 403\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 966\\r\\n988 5\\r\\n15 2\\r\\n-992 79\\r\\n', 'output': ['6\\r\\n']}, {'input': '2 1000\\r\\n-995 201\\r\\n206 194\\r\\n', 'output': ['4\\r\\n']}, {'input': '50 21\\r\\n-178 1\\r\\n49 1\\r\\n-98 1\\r\\n-220 1\\r\\n152 1\\r\\n-160 3\\r\\n17 2\\r\\n77 1\\r\\n-24 1\\r\\n214 2\\r\\n-154 2\\r\\n-141 1\\r\\n79 1\\r\\n206 1\\r\\n8 1\\r\\n-208 1\\r\\n36 1\\r\\n231 3\\r\\n-2 2\\r\\n-130 2\\r\\n-14 2\\r\\n34 1\\r\\n-187 2\\r\\n14 1\\r\\n-83 2\\r\\n-241 1\\r\\n149 2\\r\\n73 1\\r\\n-233 3\\r\\n-45 1\\r\\n197 1\\r\\n145 2\\r\\n-127 2\\r\\n-229 4\\r\\n-85 1\\r\\n-66 1\\r\\n-76 2\\r\\n104 1\\r\\n175 1\\r\\n70 1\\r\\n131 3\\r\\n-108 1\\r\\n-5 4\\r\\n140 1\\r\\n33 1\\r\\n248 3\\r\\n-36 3\\r\\n134 1\\r\\n-183 1\\r\\n56 2\\r\\n', 'output': ['9\\r\\n']}, {'input': '50 1\\r\\n37 1\\r\\n-38 1\\r\\n7 1\\r\\n47 1\\r\\n-4 1\\r\\n24 1\\r\\n-32 1\\r\\n-23 1\\r\\n-3 1\\r\\n-19 1\\r\\n5 1\\r\\n-50 1\\r\\n11 1\\r\\n-11 1\\r\\n49 1\\r\\n-39 1\\r\\n0 1\\r\\n43 1\\r\\n-10 1\\r\\n6 1\\r\\n19 1\\r\\n1 1\\r\\n27 1\\r\\n29 1\\r\\n-47 1\\r\\n-40 1\\r\\n-46 1\\r\\n-26 1\\r\\n-42 1\\r\\n-37 1\\r\\n13 1\\r\\n-29 1\\r\\n-30 1\\r\\n3 1\\r\\n44 1\\r\\n10 1\\r\\n4 1\\r\\n-14 1\\r\\n-2 1\\r\\n34 1\\r\\n18 1\\r\\n-33 1\\r\\n-44 1\\r\\n9 1\\r\\n-36 1\\r\\n-7 1\\r\\n25 1\\r\\n22 1\\r\\n-20 1\\r\\n-41 1\\r\\n', 'output': ['43\\r\\n']}, {'input': '50 1\\r\\n-967 7\\r\\n696 7\\r\\n-366 4\\r\\n557 1\\r\\n978 2\\r\\n800 4\\r\\n-161 2\\r\\n-773 2\\r\\n-248 2\\r\\n134 3\\r\\n869 6\\r\\n-932 2\\r\\n-262 14\\r\\n191 3\\r\\n669 2\\r\\n72 5\\r\\n0 1\\r\\n757 8\\r\\n859 2\\r\\n-131 8\\r\\n-169 3\\r\\n543 10\\r\\n-120 2\\r\\n-87 8\\r\\n-936 6\\r\\n-620 3\\r\\n-281 11\\r\\n684 3\\r\\n886 10\\r\\n497 4\\r\\n380 4\\r\\n833 1\\r\\n-727 6\\r\\n470 11\\r\\n584 9\\r\\n66 6\\r\\n-609 12\\r\\n-661 4\\r\\n-57 8\\r\\n628 7\\r\\n635 4\\r\\n-924 3\\r\\n-982 4\\r\\n-201 7\\r\\n-9 8\\r\\n-560 9\\r\\n712 7\\r\\n-330 8\\r\\n-191 1\\r\\n-892 7\\r\\n', 'output': ['96\\r\\n']}, {'input': '1 1000\\r\\n0 1000\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.TreeMap;\n\nimport static java.util.Map.Entry.*;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint t = sc.nextInt();\n\t\tint[] house= new int[2*n];\n\t\tint index = 0;\n\t\tfor(int i = 0 ; i < n ; ++i){\n\t\t\thouse[index] = sc.nextInt();\n\t\t\t++index;\n\t\t\thouse[index] = sc.nextInt();\n\t\t\t++index;\n\t\t}\n\t\t\n\t\tdouble position = 0.5;\n\t\tint count = 1;\n\t\twhile(true){\n\t\t\tboolean isBreak = false;\n\t\t\tfor(int i = 0 ; i < 2*n-2 ; i+=2){\n\t\t\t\tif(position >= house[i] && position <= house[i+2]){\n\t\t\t\t\tisBreak = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}else if(position+t >= house[i] && position+t <= house[i+2] ){\n\t\t\t\t\tisBreak = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}else if(position-t <= house[i+2] && position-t >= house[i]){\n\t\t\t\t\tisBreak = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(isBreak){\n\t\t\t\t++count;\n\t\t\t\tposition = (house[(2*n-2)/2]+house[(2*n-1)/2]+2*t)/2;\n\t\t\t}else\n\t\t\t\tbreak;\n\t\t\t\n\t\t}\n\t\t\n\t\tSystem.out.println(count);\n\t}\n\n}\n"}
{"src_uid": "c31fed523230af1f904218b2fe0d663d", "id": 82, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1200, "testcases": "[{'input': '2 2\\r\\n0 4\\r\\n6 2\\r\\n', 'output': ['4\\r\\n']}, {'input': '2 2\\r\\n0 4\\r\\n5 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '2 3\\r\\n0 4\\r\\n5 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '1 1\\r\\n1 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '1 2\\r\\n2 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 1\\r\\n2 1\\r\\n1 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 2\\r\\n0 4\\r\\n7 4\\r\\n', 'output': ['4\\r\\n']}, {'input': '4 1\\r\\n-12 1\\r\\n-14 1\\r\\n4 1\\r\\n-11 1\\r\\n', 'output': ['5\\r\\n']}, {'input': '6 15\\r\\n19 1\\r\\n2 3\\r\\n6 2\\r\\n-21 2\\r\\n-15 2\\r\\n23 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '10 21\\r\\n-61 6\\r\\n55 2\\r\\n-97 1\\r\\n37 1\\r\\n-39 1\\r\\n26 2\\r\\n21 1\\r\\n64 3\\r\\n-68 1\\r\\n-28 6\\r\\n', 'output': ['6\\r\\n']}, {'input': '26 51\\r\\n783 54\\r\\n-850 6\\r\\n-997 59\\r\\n573 31\\r\\n-125 20\\r\\n472 52\\r\\n101 5\\r\\n-561 4\\r\\n625 35\\r\\n911 14\\r\\n-47 33\\r\\n677 55\\r\\n-410 54\\r\\n13 53\\r\\n173 31\\r\\n968 30\\r\\n-497 7\\r\\n832 42\\r\\n271 59\\r\\n-638 52\\r\\n-301 51\\r\\n378 36\\r\\n-813 7\\r\\n-206 22\\r\\n-737 37\\r\\n-911 9\\r\\n', 'output': ['35\\r\\n']}, {'input': '14 101\\r\\n121 88\\r\\n-452 91\\r\\n635 28\\r\\n-162 59\\r\\n-872 26\\r\\n-996 8\\r\\n468 86\\r\\n742 63\\r\\n892 89\\r\\n-249 107\\r\\n300 51\\r\\n-753 17\\r\\n-620 31\\r\\n-13 34\\r\\n', 'output': ['16\\r\\n']}, {'input': '3 501\\r\\n827 327\\r\\n-85 480\\r\\n-999 343\\r\\n', 'output': ['6\\r\\n']}, {'input': '2 999\\r\\n-999 471\\r\\n530 588\\r\\n', 'output': ['4\\r\\n']}, {'input': '22 54\\r\\n600 43\\r\\n806 19\\r\\n-269 43\\r\\n-384 78\\r\\n222 34\\r\\n392 10\\r\\n318 30\\r\\n488 73\\r\\n-756 49\\r\\n-662 22\\r\\n-568 50\\r\\n-486 16\\r\\n-470 2\\r\\n96 66\\r\\n864 16\\r\\n934 15\\r\\n697 43\\r\\n-154 30\\r\\n775 5\\r\\n-876 71\\r\\n-33 78\\r\\n-991 31\\r\\n', 'output': ['30\\r\\n']}, {'input': '17 109\\r\\n52 7\\r\\n216 24\\r\\n-553 101\\r\\n543 39\\r\\n391 92\\r\\n-904 67\\r\\n95 34\\r\\n132 14\\r\\n730 103\\r\\n952 118\\r\\n-389 41\\r\\n-324 36\\r\\n-74 2\\r\\n-147 99\\r\\n-740 33\\r\\n233 1\\r\\n-995 3\\r\\n', 'output': ['16\\r\\n']}, {'input': '4 512\\r\\n-997 354\\r\\n-568 216\\r\\n-234 221\\r\\n603 403\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 966\\r\\n988 5\\r\\n15 2\\r\\n-992 79\\r\\n', 'output': ['6\\r\\n']}, {'input': '2 1000\\r\\n-995 201\\r\\n206 194\\r\\n', 'output': ['4\\r\\n']}, {'input': '50 21\\r\\n-178 1\\r\\n49 1\\r\\n-98 1\\r\\n-220 1\\r\\n152 1\\r\\n-160 3\\r\\n17 2\\r\\n77 1\\r\\n-24 1\\r\\n214 2\\r\\n-154 2\\r\\n-141 1\\r\\n79 1\\r\\n206 1\\r\\n8 1\\r\\n-208 1\\r\\n36 1\\r\\n231 3\\r\\n-2 2\\r\\n-130 2\\r\\n-14 2\\r\\n34 1\\r\\n-187 2\\r\\n14 1\\r\\n-83 2\\r\\n-241 1\\r\\n149 2\\r\\n73 1\\r\\n-233 3\\r\\n-45 1\\r\\n197 1\\r\\n145 2\\r\\n-127 2\\r\\n-229 4\\r\\n-85 1\\r\\n-66 1\\r\\n-76 2\\r\\n104 1\\r\\n175 1\\r\\n70 1\\r\\n131 3\\r\\n-108 1\\r\\n-5 4\\r\\n140 1\\r\\n33 1\\r\\n248 3\\r\\n-36 3\\r\\n134 1\\r\\n-183 1\\r\\n56 2\\r\\n', 'output': ['9\\r\\n']}, {'input': '50 1\\r\\n37 1\\r\\n-38 1\\r\\n7 1\\r\\n47 1\\r\\n-4 1\\r\\n24 1\\r\\n-32 1\\r\\n-23 1\\r\\n-3 1\\r\\n-19 1\\r\\n5 1\\r\\n-50 1\\r\\n11 1\\r\\n-11 1\\r\\n49 1\\r\\n-39 1\\r\\n0 1\\r\\n43 1\\r\\n-10 1\\r\\n6 1\\r\\n19 1\\r\\n1 1\\r\\n27 1\\r\\n29 1\\r\\n-47 1\\r\\n-40 1\\r\\n-46 1\\r\\n-26 1\\r\\n-42 1\\r\\n-37 1\\r\\n13 1\\r\\n-29 1\\r\\n-30 1\\r\\n3 1\\r\\n44 1\\r\\n10 1\\r\\n4 1\\r\\n-14 1\\r\\n-2 1\\r\\n34 1\\r\\n18 1\\r\\n-33 1\\r\\n-44 1\\r\\n9 1\\r\\n-36 1\\r\\n-7 1\\r\\n25 1\\r\\n22 1\\r\\n-20 1\\r\\n-41 1\\r\\n', 'output': ['43\\r\\n']}, {'input': '50 1\\r\\n-967 7\\r\\n696 7\\r\\n-366 4\\r\\n557 1\\r\\n978 2\\r\\n800 4\\r\\n-161 2\\r\\n-773 2\\r\\n-248 2\\r\\n134 3\\r\\n869 6\\r\\n-932 2\\r\\n-262 14\\r\\n191 3\\r\\n669 2\\r\\n72 5\\r\\n0 1\\r\\n757 8\\r\\n859 2\\r\\n-131 8\\r\\n-169 3\\r\\n543 10\\r\\n-120 2\\r\\n-87 8\\r\\n-936 6\\r\\n-620 3\\r\\n-281 11\\r\\n684 3\\r\\n886 10\\r\\n497 4\\r\\n380 4\\r\\n833 1\\r\\n-727 6\\r\\n470 11\\r\\n584 9\\r\\n66 6\\r\\n-609 12\\r\\n-661 4\\r\\n-57 8\\r\\n628 7\\r\\n635 4\\r\\n-924 3\\r\\n-982 4\\r\\n-201 7\\r\\n-9 8\\r\\n-560 9\\r\\n712 7\\r\\n-330 8\\r\\n-191 1\\r\\n-892 7\\r\\n', 'output': ['96\\r\\n']}, {'input': '1 1000\\r\\n0 1000\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.util.*;\nimport java.math.*;\n \npublic class JavaApplication9 {\n    \n    public static int nhap() {\n        Scanner in = new Scanner(System.in);\n        return in.nextInt();\n    }\n\n    public static long nhapS() {\n        Scanner in = new Scanner(System.in);\n        return in.nextLong();\n    }\n\n    public static int nhap(int a[]) {\n        Scanner in = new Scanner(System.in);\n        for(int i = 0 ; i < a.length ; i++) {\n            a[i] = in.nextInt();\n        }\n        return a.length;\n    }\n   \n    public static long nhap(long a[]) {\n        Scanner in = new Scanner(System.in);\n        for(int i = 0 ; i < a.length ; i++) {\n            a[i] = in.nextLong();\n        }\n        return a.length;\n    }\n\n    public static int nhap(int a[][]) {\n        Scanner in = new Scanner(System.in);\n        for(int i = 0 ; i < a.length ; i++) {\n            for(int j = 0 ; j < a[i].length ; j++) {\n                a[i][j] = in.nextInt();\n            }\n        }\n        return a.length;\n    }\n   \n    public static int nhap(long a[][]) {\n        Scanner in = new Scanner(System.in);\n        for(int i = 0 ; i < a.length ; i++) {\n            for(int j = 0 ; j < a[i].length ; j++) {\n                a[i][j] = in.nextLong();\n            }\n        }\n        return a.length;\n    }\n   \n    public static int nhapmat(int a[][]) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int m = in.nextInt();\n        for(int i = 0 ; i < a.length ; i++) {\n            for(int j = 0 ; j < a[i].length ; j++) {\n                a[i][j] = in.nextInt();\n            }\n        }\n        return n;\n    }\n    \n    public static void main(String[] args) {\n        \n        //int n = nhap(), t = nhap();\n        int n = nhapmat(new int[2][]), t = nhap();\n        \n        int house[][] = new int[n][2];\n        \n        for(int i = 0 ; i < house.length ; i++) {\n            house[i][0] = nhap();\n            house[i][1] = nhap();\n        }\n        \n        double pos = 0;\n        double max = 1100;\n        int count = 0;\n        while(pos <= max) {\n            count = 0;\n            for(int i = 0 ; i < house.length ; i++) {\n                if(pos >= house[i][0] && pos <= house[i][0]+house[i][1]) {\n                    count++;\n                }\n            }\n            if(count == 0) {\n                System.out.print((int)pos+\" \");\n            }\n            pos = pos+t;\n        }\n        \n    }\n}\n"}
{"src_uid": "c31fed523230af1f904218b2fe0d663d", "id": 82, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1200, "testcases": "[{'input': '2 2\\r\\n0 4\\r\\n6 2\\r\\n', 'output': ['4\\r\\n']}, {'input': '2 2\\r\\n0 4\\r\\n5 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '2 3\\r\\n0 4\\r\\n5 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '1 1\\r\\n1 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '1 2\\r\\n2 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 1\\r\\n2 1\\r\\n1 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 2\\r\\n0 4\\r\\n7 4\\r\\n', 'output': ['4\\r\\n']}, {'input': '4 1\\r\\n-12 1\\r\\n-14 1\\r\\n4 1\\r\\n-11 1\\r\\n', 'output': ['5\\r\\n']}, {'input': '6 15\\r\\n19 1\\r\\n2 3\\r\\n6 2\\r\\n-21 2\\r\\n-15 2\\r\\n23 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '10 21\\r\\n-61 6\\r\\n55 2\\r\\n-97 1\\r\\n37 1\\r\\n-39 1\\r\\n26 2\\r\\n21 1\\r\\n64 3\\r\\n-68 1\\r\\n-28 6\\r\\n', 'output': ['6\\r\\n']}, {'input': '26 51\\r\\n783 54\\r\\n-850 6\\r\\n-997 59\\r\\n573 31\\r\\n-125 20\\r\\n472 52\\r\\n101 5\\r\\n-561 4\\r\\n625 35\\r\\n911 14\\r\\n-47 33\\r\\n677 55\\r\\n-410 54\\r\\n13 53\\r\\n173 31\\r\\n968 30\\r\\n-497 7\\r\\n832 42\\r\\n271 59\\r\\n-638 52\\r\\n-301 51\\r\\n378 36\\r\\n-813 7\\r\\n-206 22\\r\\n-737 37\\r\\n-911 9\\r\\n', 'output': ['35\\r\\n']}, {'input': '14 101\\r\\n121 88\\r\\n-452 91\\r\\n635 28\\r\\n-162 59\\r\\n-872 26\\r\\n-996 8\\r\\n468 86\\r\\n742 63\\r\\n892 89\\r\\n-249 107\\r\\n300 51\\r\\n-753 17\\r\\n-620 31\\r\\n-13 34\\r\\n', 'output': ['16\\r\\n']}, {'input': '3 501\\r\\n827 327\\r\\n-85 480\\r\\n-999 343\\r\\n', 'output': ['6\\r\\n']}, {'input': '2 999\\r\\n-999 471\\r\\n530 588\\r\\n', 'output': ['4\\r\\n']}, {'input': '22 54\\r\\n600 43\\r\\n806 19\\r\\n-269 43\\r\\n-384 78\\r\\n222 34\\r\\n392 10\\r\\n318 30\\r\\n488 73\\r\\n-756 49\\r\\n-662 22\\r\\n-568 50\\r\\n-486 16\\r\\n-470 2\\r\\n96 66\\r\\n864 16\\r\\n934 15\\r\\n697 43\\r\\n-154 30\\r\\n775 5\\r\\n-876 71\\r\\n-33 78\\r\\n-991 31\\r\\n', 'output': ['30\\r\\n']}, {'input': '17 109\\r\\n52 7\\r\\n216 24\\r\\n-553 101\\r\\n543 39\\r\\n391 92\\r\\n-904 67\\r\\n95 34\\r\\n132 14\\r\\n730 103\\r\\n952 118\\r\\n-389 41\\r\\n-324 36\\r\\n-74 2\\r\\n-147 99\\r\\n-740 33\\r\\n233 1\\r\\n-995 3\\r\\n', 'output': ['16\\r\\n']}, {'input': '4 512\\r\\n-997 354\\r\\n-568 216\\r\\n-234 221\\r\\n603 403\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 966\\r\\n988 5\\r\\n15 2\\r\\n-992 79\\r\\n', 'output': ['6\\r\\n']}, {'input': '2 1000\\r\\n-995 201\\r\\n206 194\\r\\n', 'output': ['4\\r\\n']}, {'input': '50 21\\r\\n-178 1\\r\\n49 1\\r\\n-98 1\\r\\n-220 1\\r\\n152 1\\r\\n-160 3\\r\\n17 2\\r\\n77 1\\r\\n-24 1\\r\\n214 2\\r\\n-154 2\\r\\n-141 1\\r\\n79 1\\r\\n206 1\\r\\n8 1\\r\\n-208 1\\r\\n36 1\\r\\n231 3\\r\\n-2 2\\r\\n-130 2\\r\\n-14 2\\r\\n34 1\\r\\n-187 2\\r\\n14 1\\r\\n-83 2\\r\\n-241 1\\r\\n149 2\\r\\n73 1\\r\\n-233 3\\r\\n-45 1\\r\\n197 1\\r\\n145 2\\r\\n-127 2\\r\\n-229 4\\r\\n-85 1\\r\\n-66 1\\r\\n-76 2\\r\\n104 1\\r\\n175 1\\r\\n70 1\\r\\n131 3\\r\\n-108 1\\r\\n-5 4\\r\\n140 1\\r\\n33 1\\r\\n248 3\\r\\n-36 3\\r\\n134 1\\r\\n-183 1\\r\\n56 2\\r\\n', 'output': ['9\\r\\n']}, {'input': '50 1\\r\\n37 1\\r\\n-38 1\\r\\n7 1\\r\\n47 1\\r\\n-4 1\\r\\n24 1\\r\\n-32 1\\r\\n-23 1\\r\\n-3 1\\r\\n-19 1\\r\\n5 1\\r\\n-50 1\\r\\n11 1\\r\\n-11 1\\r\\n49 1\\r\\n-39 1\\r\\n0 1\\r\\n43 1\\r\\n-10 1\\r\\n6 1\\r\\n19 1\\r\\n1 1\\r\\n27 1\\r\\n29 1\\r\\n-47 1\\r\\n-40 1\\r\\n-46 1\\r\\n-26 1\\r\\n-42 1\\r\\n-37 1\\r\\n13 1\\r\\n-29 1\\r\\n-30 1\\r\\n3 1\\r\\n44 1\\r\\n10 1\\r\\n4 1\\r\\n-14 1\\r\\n-2 1\\r\\n34 1\\r\\n18 1\\r\\n-33 1\\r\\n-44 1\\r\\n9 1\\r\\n-36 1\\r\\n-7 1\\r\\n25 1\\r\\n22 1\\r\\n-20 1\\r\\n-41 1\\r\\n', 'output': ['43\\r\\n']}, {'input': '50 1\\r\\n-967 7\\r\\n696 7\\r\\n-366 4\\r\\n557 1\\r\\n978 2\\r\\n800 4\\r\\n-161 2\\r\\n-773 2\\r\\n-248 2\\r\\n134 3\\r\\n869 6\\r\\n-932 2\\r\\n-262 14\\r\\n191 3\\r\\n669 2\\r\\n72 5\\r\\n0 1\\r\\n757 8\\r\\n859 2\\r\\n-131 8\\r\\n-169 3\\r\\n543 10\\r\\n-120 2\\r\\n-87 8\\r\\n-936 6\\r\\n-620 3\\r\\n-281 11\\r\\n684 3\\r\\n886 10\\r\\n497 4\\r\\n380 4\\r\\n833 1\\r\\n-727 6\\r\\n470 11\\r\\n584 9\\r\\n66 6\\r\\n-609 12\\r\\n-661 4\\r\\n-57 8\\r\\n628 7\\r\\n635 4\\r\\n-924 3\\r\\n-982 4\\r\\n-201 7\\r\\n-9 8\\r\\n-560 9\\r\\n712 7\\r\\n-330 8\\r\\n-191 1\\r\\n-892 7\\r\\n', 'output': ['96\\r\\n']}, {'input': '1 1000\\r\\n0 1000\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "\n\nimport java.util.*;\n\npublic class Solution {\n\n    static class House{\n        int x,a;\n\n        public House(int x, int a){\n            this.x=x;\n            this.a=a;\n        }\n    }\n\n    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt(), t = in.nextInt();\n        House[] house = new House[n];\n        for(int i = 0; i < n ; i ++){\n            int x = in.nextInt();\n            int a = in.nextInt();\n            house[i] = new House(x,a);\n        }\n        int m = 0;\n        while(house[m]!=null){\n            ++m;\n        }\n        house[m] = new House(1000,0);\n        int count = 0;\n        double l = 0 ;\n        while(house[l]!=null){\n            double max = house[l].x;\n            double min = 0;\n            double k = 0;\n            while(house[k]!=null){\n                if(max-house[k].a/2 <= house[l].x + t/2){\n                    max = max+house[k].a;\n                }\n                else {\n                    if(house[k].x > min){\n                        min =  house[k].x;\n                    }\n                    ++k;\n                }\n            }\n            if(max-t/2>=house[l].x+house[l].a/2){\n                ++count;\n            }\n            l = min;\n        }\n        System.out.println(count);\n    }\n}\n"}
{"src_uid": "c31fed523230af1f904218b2fe0d663d", "id": 82, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1200, "testcases": "[{'input': '2 2\\r\\n0 4\\r\\n6 2\\r\\n', 'output': ['4\\r\\n']}, {'input': '2 2\\r\\n0 4\\r\\n5 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '2 3\\r\\n0 4\\r\\n5 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '1 1\\r\\n1 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '1 2\\r\\n2 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 1\\r\\n2 1\\r\\n1 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 2\\r\\n0 4\\r\\n7 4\\r\\n', 'output': ['4\\r\\n']}, {'input': '4 1\\r\\n-12 1\\r\\n-14 1\\r\\n4 1\\r\\n-11 1\\r\\n', 'output': ['5\\r\\n']}, {'input': '6 15\\r\\n19 1\\r\\n2 3\\r\\n6 2\\r\\n-21 2\\r\\n-15 2\\r\\n23 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '10 21\\r\\n-61 6\\r\\n55 2\\r\\n-97 1\\r\\n37 1\\r\\n-39 1\\r\\n26 2\\r\\n21 1\\r\\n64 3\\r\\n-68 1\\r\\n-28 6\\r\\n', 'output': ['6\\r\\n']}, {'input': '26 51\\r\\n783 54\\r\\n-850 6\\r\\n-997 59\\r\\n573 31\\r\\n-125 20\\r\\n472 52\\r\\n101 5\\r\\n-561 4\\r\\n625 35\\r\\n911 14\\r\\n-47 33\\r\\n677 55\\r\\n-410 54\\r\\n13 53\\r\\n173 31\\r\\n968 30\\r\\n-497 7\\r\\n832 42\\r\\n271 59\\r\\n-638 52\\r\\n-301 51\\r\\n378 36\\r\\n-813 7\\r\\n-206 22\\r\\n-737 37\\r\\n-911 9\\r\\n', 'output': ['35\\r\\n']}, {'input': '14 101\\r\\n121 88\\r\\n-452 91\\r\\n635 28\\r\\n-162 59\\r\\n-872 26\\r\\n-996 8\\r\\n468 86\\r\\n742 63\\r\\n892 89\\r\\n-249 107\\r\\n300 51\\r\\n-753 17\\r\\n-620 31\\r\\n-13 34\\r\\n', 'output': ['16\\r\\n']}, {'input': '3 501\\r\\n827 327\\r\\n-85 480\\r\\n-999 343\\r\\n', 'output': ['6\\r\\n']}, {'input': '2 999\\r\\n-999 471\\r\\n530 588\\r\\n', 'output': ['4\\r\\n']}, {'input': '22 54\\r\\n600 43\\r\\n806 19\\r\\n-269 43\\r\\n-384 78\\r\\n222 34\\r\\n392 10\\r\\n318 30\\r\\n488 73\\r\\n-756 49\\r\\n-662 22\\r\\n-568 50\\r\\n-486 16\\r\\n-470 2\\r\\n96 66\\r\\n864 16\\r\\n934 15\\r\\n697 43\\r\\n-154 30\\r\\n775 5\\r\\n-876 71\\r\\n-33 78\\r\\n-991 31\\r\\n', 'output': ['30\\r\\n']}, {'input': '17 109\\r\\n52 7\\r\\n216 24\\r\\n-553 101\\r\\n543 39\\r\\n391 92\\r\\n-904 67\\r\\n95 34\\r\\n132 14\\r\\n730 103\\r\\n952 118\\r\\n-389 41\\r\\n-324 36\\r\\n-74 2\\r\\n-147 99\\r\\n-740 33\\r\\n233 1\\r\\n-995 3\\r\\n', 'output': ['16\\r\\n']}, {'input': '4 512\\r\\n-997 354\\r\\n-568 216\\r\\n-234 221\\r\\n603 403\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 966\\r\\n988 5\\r\\n15 2\\r\\n-992 79\\r\\n', 'output': ['6\\r\\n']}, {'input': '2 1000\\r\\n-995 201\\r\\n206 194\\r\\n', 'output': ['4\\r\\n']}, {'input': '50 21\\r\\n-178 1\\r\\n49 1\\r\\n-98 1\\r\\n-220 1\\r\\n152 1\\r\\n-160 3\\r\\n17 2\\r\\n77 1\\r\\n-24 1\\r\\n214 2\\r\\n-154 2\\r\\n-141 1\\r\\n79 1\\r\\n206 1\\r\\n8 1\\r\\n-208 1\\r\\n36 1\\r\\n231 3\\r\\n-2 2\\r\\n-130 2\\r\\n-14 2\\r\\n34 1\\r\\n-187 2\\r\\n14 1\\r\\n-83 2\\r\\n-241 1\\r\\n149 2\\r\\n73 1\\r\\n-233 3\\r\\n-45 1\\r\\n197 1\\r\\n145 2\\r\\n-127 2\\r\\n-229 4\\r\\n-85 1\\r\\n-66 1\\r\\n-76 2\\r\\n104 1\\r\\n175 1\\r\\n70 1\\r\\n131 3\\r\\n-108 1\\r\\n-5 4\\r\\n140 1\\r\\n33 1\\r\\n248 3\\r\\n-36 3\\r\\n134 1\\r\\n-183 1\\r\\n56 2\\r\\n', 'output': ['9\\r\\n']}, {'input': '50 1\\r\\n37 1\\r\\n-38 1\\r\\n7 1\\r\\n47 1\\r\\n-4 1\\r\\n24 1\\r\\n-32 1\\r\\n-23 1\\r\\n-3 1\\r\\n-19 1\\r\\n5 1\\r\\n-50 1\\r\\n11 1\\r\\n-11 1\\r\\n49 1\\r\\n-39 1\\r\\n0 1\\r\\n43 1\\r\\n-10 1\\r\\n6 1\\r\\n19 1\\r\\n1 1\\r\\n27 1\\r\\n29 1\\r\\n-47 1\\r\\n-40 1\\r\\n-46 1\\r\\n-26 1\\r\\n-42 1\\r\\n-37 1\\r\\n13 1\\r\\n-29 1\\r\\n-30 1\\r\\n3 1\\r\\n44 1\\r\\n10 1\\r\\n4 1\\r\\n-14 1\\r\\n-2 1\\r\\n34 1\\r\\n18 1\\r\\n-33 1\\r\\n-44 1\\r\\n9 1\\r\\n-36 1\\r\\n-7 1\\r\\n25 1\\r\\n22 1\\r\\n-20 1\\r\\n-41 1\\r\\n', 'output': ['43\\r\\n']}, {'input': '50 1\\r\\n-967 7\\r\\n696 7\\r\\n-366 4\\r\\n557 1\\r\\n978 2\\r\\n800 4\\r\\n-161 2\\r\\n-773 2\\r\\n-248 2\\r\\n134 3\\r\\n869 6\\r\\n-932 2\\r\\n-262 14\\r\\n191 3\\r\\n669 2\\r\\n72 5\\r\\n0 1\\r\\n757 8\\r\\n859 2\\r\\n-131 8\\r\\n-169 3\\r\\n543 10\\r\\n-120 2\\r\\n-87 8\\r\\n-936 6\\r\\n-620 3\\r\\n-281 11\\r\\n684 3\\r\\n886 10\\r\\n497 4\\r\\n380 4\\r\\n833 1\\r\\n-727 6\\r\\n470 11\\r\\n584 9\\r\\n66 6\\r\\n-609 12\\r\\n-661 4\\r\\n-57 8\\r\\n628 7\\r\\n635 4\\r\\n-924 3\\r\\n-982 4\\r\\n-201 7\\r\\n-9 8\\r\\n-560 9\\r\\n712 7\\r\\n-330 8\\r\\n-191 1\\r\\n-892 7\\r\\n', 'output': ['96\\r\\n']}, {'input': '1 1000\\r\\n0 1000\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.util.*;\nimport static java.util.Arrays.sort;\nimport static java.util.Collections.reverseOrder;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.io.Writer;\nimport static java.util.stream.Collectors.joining;\nimport static java.util.stream.Collectors.toList;\nimport java.util.function.Function;\n\npublic class Solution{\n\tpublic static void main(String [] args){\n\t\tInputStreamReader isr = new InputStreamReader(System.in);\n\t\ttry (BufferedReader br = new BufferedReader(isr)){\n\t\t\tString line = br.readLine();\n\t\t\tString[] nt = line.split(\" \");\n\t\t\tint n = Integer.parseInt(nt[0]);\n\t\t\tint t = Integer.parseInt(nt[1]);\n\t\t\tint max = 1000000;\n\t\t\tfloat min = -1000000;\n\t\t\tfloat[][] houses = new float[n][2];\n\t\t\tfor(int i = 0 ; i < n ; i++){\n\t\t\t\tline = br.readLine();\n\t\t\t\tString[] house = line.split(\" \");\n\t\t\t\thouses[i][0] = Float.parseFloat(house[0]);\n\t\t\t\thouses[i][1] = Float.parseFloat(house[1]);\n\t\t\t}\n\t\t\tint position = 0 ;\n\t\t\twhile(houses[position][0] < max){\n\t\t\t\tboolean left = false ;\n\t\t\t\tfor(int i = 0 ; i < n ; i++){\n\t\t\t\t\tif((houses[i][0] <= (houses[position][0] + t/2)) && (houses[i][0] > (houses[position][0] - t/2))){\n\t\t\t\t\t\tleft = true ;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(left == false){\n\t\t\t\t\tbreak ;\n\t\t\t\t}\n\t\t\t\tposition ++ ;\n\t\t\t}\n\t\t\twhile((houses[n-1][0] > (houses[position][0] + t/2)) && (houses[n-1][0] < (houses[position][0] - t/2))){\n\t\t\t\tposition ++ ;\n\t\t\t}\n\t\t\tint nb_position = 1 ;\n\t\t\twhile(houses[nb_position][0] < (houses[position][0] + t)){\n\t\t\t\tnb_position ++ ;\n\t\t\t}\n\t\t\tposition = nb_position - 1 ;\n\t\t\tSystem.out.println((position - n) + 1);\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"There is a problem with the reading of the file\");\n\t\t}\n\t}\n}"}
{"src_uid": "c31fed523230af1f904218b2fe0d663d", "id": 82, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1200, "testcases": "[{'input': '2 2\\r\\n0 4\\r\\n6 2\\r\\n', 'output': ['4\\r\\n']}, {'input': '2 2\\r\\n0 4\\r\\n5 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '2 3\\r\\n0 4\\r\\n5 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '1 1\\r\\n1 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '1 2\\r\\n2 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 1\\r\\n2 1\\r\\n1 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 2\\r\\n0 4\\r\\n7 4\\r\\n', 'output': ['4\\r\\n']}, {'input': '4 1\\r\\n-12 1\\r\\n-14 1\\r\\n4 1\\r\\n-11 1\\r\\n', 'output': ['5\\r\\n']}, {'input': '6 15\\r\\n19 1\\r\\n2 3\\r\\n6 2\\r\\n-21 2\\r\\n-15 2\\r\\n23 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '10 21\\r\\n-61 6\\r\\n55 2\\r\\n-97 1\\r\\n37 1\\r\\n-39 1\\r\\n26 2\\r\\n21 1\\r\\n64 3\\r\\n-68 1\\r\\n-28 6\\r\\n', 'output': ['6\\r\\n']}, {'input': '26 51\\r\\n783 54\\r\\n-850 6\\r\\n-997 59\\r\\n573 31\\r\\n-125 20\\r\\n472 52\\r\\n101 5\\r\\n-561 4\\r\\n625 35\\r\\n911 14\\r\\n-47 33\\r\\n677 55\\r\\n-410 54\\r\\n13 53\\r\\n173 31\\r\\n968 30\\r\\n-497 7\\r\\n832 42\\r\\n271 59\\r\\n-638 52\\r\\n-301 51\\r\\n378 36\\r\\n-813 7\\r\\n-206 22\\r\\n-737 37\\r\\n-911 9\\r\\n', 'output': ['35\\r\\n']}, {'input': '14 101\\r\\n121 88\\r\\n-452 91\\r\\n635 28\\r\\n-162 59\\r\\n-872 26\\r\\n-996 8\\r\\n468 86\\r\\n742 63\\r\\n892 89\\r\\n-249 107\\r\\n300 51\\r\\n-753 17\\r\\n-620 31\\r\\n-13 34\\r\\n', 'output': ['16\\r\\n']}, {'input': '3 501\\r\\n827 327\\r\\n-85 480\\r\\n-999 343\\r\\n', 'output': ['6\\r\\n']}, {'input': '2 999\\r\\n-999 471\\r\\n530 588\\r\\n', 'output': ['4\\r\\n']}, {'input': '22 54\\r\\n600 43\\r\\n806 19\\r\\n-269 43\\r\\n-384 78\\r\\n222 34\\r\\n392 10\\r\\n318 30\\r\\n488 73\\r\\n-756 49\\r\\n-662 22\\r\\n-568 50\\r\\n-486 16\\r\\n-470 2\\r\\n96 66\\r\\n864 16\\r\\n934 15\\r\\n697 43\\r\\n-154 30\\r\\n775 5\\r\\n-876 71\\r\\n-33 78\\r\\n-991 31\\r\\n', 'output': ['30\\r\\n']}, {'input': '17 109\\r\\n52 7\\r\\n216 24\\r\\n-553 101\\r\\n543 39\\r\\n391 92\\r\\n-904 67\\r\\n95 34\\r\\n132 14\\r\\n730 103\\r\\n952 118\\r\\n-389 41\\r\\n-324 36\\r\\n-74 2\\r\\n-147 99\\r\\n-740 33\\r\\n233 1\\r\\n-995 3\\r\\n', 'output': ['16\\r\\n']}, {'input': '4 512\\r\\n-997 354\\r\\n-568 216\\r\\n-234 221\\r\\n603 403\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 966\\r\\n988 5\\r\\n15 2\\r\\n-992 79\\r\\n', 'output': ['6\\r\\n']}, {'input': '2 1000\\r\\n-995 201\\r\\n206 194\\r\\n', 'output': ['4\\r\\n']}, {'input': '50 21\\r\\n-178 1\\r\\n49 1\\r\\n-98 1\\r\\n-220 1\\r\\n152 1\\r\\n-160 3\\r\\n17 2\\r\\n77 1\\r\\n-24 1\\r\\n214 2\\r\\n-154 2\\r\\n-141 1\\r\\n79 1\\r\\n206 1\\r\\n8 1\\r\\n-208 1\\r\\n36 1\\r\\n231 3\\r\\n-2 2\\r\\n-130 2\\r\\n-14 2\\r\\n34 1\\r\\n-187 2\\r\\n14 1\\r\\n-83 2\\r\\n-241 1\\r\\n149 2\\r\\n73 1\\r\\n-233 3\\r\\n-45 1\\r\\n197 1\\r\\n145 2\\r\\n-127 2\\r\\n-229 4\\r\\n-85 1\\r\\n-66 1\\r\\n-76 2\\r\\n104 1\\r\\n175 1\\r\\n70 1\\r\\n131 3\\r\\n-108 1\\r\\n-5 4\\r\\n140 1\\r\\n33 1\\r\\n248 3\\r\\n-36 3\\r\\n134 1\\r\\n-183 1\\r\\n56 2\\r\\n', 'output': ['9\\r\\n']}, {'input': '50 1\\r\\n37 1\\r\\n-38 1\\r\\n7 1\\r\\n47 1\\r\\n-4 1\\r\\n24 1\\r\\n-32 1\\r\\n-23 1\\r\\n-3 1\\r\\n-19 1\\r\\n5 1\\r\\n-50 1\\r\\n11 1\\r\\n-11 1\\r\\n49 1\\r\\n-39 1\\r\\n0 1\\r\\n43 1\\r\\n-10 1\\r\\n6 1\\r\\n19 1\\r\\n1 1\\r\\n27 1\\r\\n29 1\\r\\n-47 1\\r\\n-40 1\\r\\n-46 1\\r\\n-26 1\\r\\n-42 1\\r\\n-37 1\\r\\n13 1\\r\\n-29 1\\r\\n-30 1\\r\\n3 1\\r\\n44 1\\r\\n10 1\\r\\n4 1\\r\\n-14 1\\r\\n-2 1\\r\\n34 1\\r\\n18 1\\r\\n-33 1\\r\\n-44 1\\r\\n9 1\\r\\n-36 1\\r\\n-7 1\\r\\n25 1\\r\\n22 1\\r\\n-20 1\\r\\n-41 1\\r\\n', 'output': ['43\\r\\n']}, {'input': '50 1\\r\\n-967 7\\r\\n696 7\\r\\n-366 4\\r\\n557 1\\r\\n978 2\\r\\n800 4\\r\\n-161 2\\r\\n-773 2\\r\\n-248 2\\r\\n134 3\\r\\n869 6\\r\\n-932 2\\r\\n-262 14\\r\\n191 3\\r\\n669 2\\r\\n72 5\\r\\n0 1\\r\\n757 8\\r\\n859 2\\r\\n-131 8\\r\\n-169 3\\r\\n543 10\\r\\n-120 2\\r\\n-87 8\\r\\n-936 6\\r\\n-620 3\\r\\n-281 11\\r\\n684 3\\r\\n886 10\\r\\n497 4\\r\\n380 4\\r\\n833 1\\r\\n-727 6\\r\\n470 11\\r\\n584 9\\r\\n66 6\\r\\n-609 12\\r\\n-661 4\\r\\n-57 8\\r\\n628 7\\r\\n635 4\\r\\n-924 3\\r\\n-982 4\\r\\n-201 7\\r\\n-9 8\\r\\n-560 9\\r\\n712 7\\r\\n-330 8\\r\\n-191 1\\r\\n-892 7\\r\\n', 'output': ['96\\r\\n']}, {'input': '1 1000\\r\\n0 1000\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.util.*;\nimport java.io.*;\n\npublic class flatville {\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tFastScanner scanner = new FastScanner();\n\t\tint n = scanner.nextInt(), t = scanner.nextInt(), max = 1000;\n\t\tdouble a[][] = new double[n][2], f[] = new double[n], maxSide[][][] = new double[n][n][2];\n\t\tint flag[] = new int[n];\n\t\tfor(int i = 0; i < n; ++i) {\n\t\t\tfor(int j = 0; j < 2; ++j)\n\t\t\t\ta[i][j] = scanner.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < n-1; ++i)\n\t\t\tfor(int j = 0; j < n-i-1; ++j)\n\t\t\t\tif(a[j][0] > a[j+1][0]) {\n\t\t\t\t\ta[j][0] ^= a[j+1][0];\n\t\t\t\t\ta[j+1][0] ^= a[j][0];\n\t\t\t\t\ta[j][0] ^= a[j+1][0];\n\t\t\t\t\tfor(int k = 0; k < 2; ++k) {\n\t\t\t\t\t\tmaxSide[j][k] ^= maxSide[j+1][k];\n\t\t\t\t\t\tmaxSide[j+1][k] ^= maxSide[j][k];\n\t\t\t\t\t\tmaxSide[j][k] ^= maxSide[j+1][k];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\tfor(int i = 0; i < n; ++i) {\n\t\t\tf[i] = a[i][0];\n\t\t\tflag[i] = i;\n\t\t}\n\t\tboolean isOverlap = false;\n\t\tdouble x, min = 0;\n\t\tfor(int i = 0; i <= n; ++i) {\n\t\t\tisOverlap = false;\n\t\t\tmin = (i == 0? -max : f[0]);\n\t\t\tif(min > max) {\n\t\t\t\tx = min;\n\t\t\t\tmin = max;\n\t\t\t\tmax = x;\n\t\t\t}\n\t\t\tfor(int j = 0; j < n; ++j) {\n\t\t\t\tif(maxSide[j][0] - maxSide[j][1] > t) {\n\t\t\t\t\tif(f[flag[j]] - maxSide[j][0] > t) {\n\t\t\t\t\t\tisOverlap = true;\n\t\t\t\t\t}\n\t\t\t\t} else if(maxSide[j][0] > min && maxSide[j][0] <= max && f[flag[j]] + maxSide[j][1] >= min && f[flag[j]] + maxSide[j][1] <= max) {\n\t\t\t\t\tisOverlap = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!isOverlap) {\n\t\t\t\tx = (i == 0? 0 : f[i-1]);\n\t\t\t\tf[i] = max - t/2;\n\t\t\t\tf[i] = Math.max(f[i], x + t/2);\n\t\t\t\tif(f[i] > max)\n\t\t\t\t\tf[i] = max;\n\t\t\t}\n\t\t}\n\t\tSystem.out.print((int)Math.ceil(f[n]));\n\t}\n\tstatic class FastScanner {\n\t\tprivate final InputStream in;\n\t\tprivate final DataInputStream dis;\n\t\tprivate final InputStreamReader isr;\n\t\tprivate final BufferedReader br;\n\t\tprivate StringTokenizer st;\n\t\tpublic FastScanner() {\n\t\t\tin = System.in;\n\t\t\tdis = new DataInputStream(in);\n\t\t\tisr = new InputStreamReader(in);\n\t\t\tbr = new BufferedReader(isr);\n\t\t\tst = null;\n"}
{"src_uid": "c052d85e402691b05e494b5283d62679", "id": 83, "lang_cluster": "java", "lang": "Java 11", "difficulty": 900, "testcases": "[{'input': '7 3\\r\\n5 10\\r\\n2 5\\r\\n3 6\\r\\n', 'output': ['62']}, {'input': '3 3\\r\\n1 3\\r\\n2 2\\r\\n3 1\\r\\n', 'output': ['7']}, {'input': '1 1\\r\\n1 2\\r\\n', 'output': ['2']}, {'input': '1 2\\r\\n1 9\\r\\n1 6\\r\\n', 'output': ['9']}, {'input': '1 10\\r\\n1 1\\r\\n1 9\\r\\n1 3\\r\\n1 9\\r\\n1 7\\r\\n1 10\\r\\n1 4\\r\\n1 7\\r\\n1 3\\r\\n1 1\\r\\n', 'output': ['10']}, {'input': '2 1\\r\\n2 1\\r\\n', 'output': ['2']}, {'input': '2 2\\r\\n2 4\\r\\n1 4\\r\\n', 'output': ['8']}, {'input': '2 3\\r\\n1 7\\r\\n1 2\\r\\n1 5\\r\\n', 'output': ['12']}, {'input': '4 1\\r\\n2 2\\r\\n', 'output': ['4']}, {'input': '4 2\\r\\n1 10\\r\\n4 4\\r\\n', 'output': ['22']}, {'input': '4 3\\r\\n1 4\\r\\n6 4\\r\\n1 7\\r\\n', 'output': ['19']}, {'input': '5 1\\r\\n10 5\\r\\n', 'output': ['25']}, {'input': '5 2\\r\\n3 9\\r\\n2 2\\r\\n', 'output': ['31']}, {'input': '5 5\\r\\n2 9\\r\\n3 1\\r\\n2 1\\r\\n1 8\\r\\n2 8\\r\\n', 'output': ['42']}, {'input': '5 10\\r\\n1 3\\r\\n1 2\\r\\n1 9\\r\\n1 10\\r\\n1 1\\r\\n1 5\\r\\n1 10\\r\\n1 2\\r\\n1 3\\r\\n1 7\\r\\n', 'output': ['41']}, {'input': '10 1\\r\\n9 4\\r\\n', 'output': ['36']}, {'input': '10 2\\r\\n14 3\\r\\n1 3\\r\\n', 'output': ['30']}, {'input': '10 7\\r\\n4 8\\r\\n1 10\\r\\n1 10\\r\\n1 2\\r\\n3 3\\r\\n1 3\\r\\n1 10\\r\\n', 'output': ['71']}, {'input': '10 10\\r\\n1 8\\r\\n2 10\\r\\n1 9\\r\\n1 1\\r\\n1 9\\r\\n1 6\\r\\n1 4\\r\\n2 5\\r\\n1 2\\r\\n1 4\\r\\n', 'output': ['70']}, {'input': '10 4\\r\\n1 5\\r\\n5 2\\r\\n1 9\\r\\n3 3\\r\\n', 'output': ['33']}, {'input': '100 5\\r\\n78 6\\r\\n29 10\\r\\n3 6\\r\\n7 3\\r\\n2 4\\r\\n', 'output': ['716']}, {'input': '1000 7\\r\\n102 10\\r\\n23 6\\r\\n79 4\\r\\n48 1\\r\\n34 10\\r\\n839 8\\r\\n38 4\\r\\n', 'output': ['8218']}, {'input': '10000 10\\r\\n336 2\\r\\n2782 5\\r\\n430 10\\r\\n1893 7\\r\\n3989 10\\r\\n2593 8\\r\\n165 6\\r\\n1029 2\\r\\n2097 4\\r\\n178 10\\r\\n', 'output': ['84715']}, {'input': '100000 3\\r\\n2975 2\\r\\n35046 4\\r\\n61979 9\\r\\n', 'output': ['703945']}, {'input': '1000000 4\\r\\n314183 9\\r\\n304213 4\\r\\n16864 5\\r\\n641358 9\\r\\n', 'output': ['8794569']}, {'input': '10000000 10\\r\\n360313 10\\r\\n416076 1\\r\\n435445 9\\r\\n940322 7\\r\\n1647581 7\\r\\n4356968 10\\r\\n3589256 2\\r\\n2967933 5\\r\\n2747504 7\\r\\n1151633 3\\r\\n', 'output': ['85022733']}, {'input': '100000000 7\\r\\n32844337 7\\r\\n11210848 7\\r\\n47655987 1\\r\\n33900472 4\\r\\n9174763 2\\r\\n32228738 10\\r\\n29947408 5\\r\\n', 'output': ['749254060']}, {'input': '200000000 10\\r\\n27953106 7\\r\\n43325979 4\\r\\n4709522 1\\r\\n10975786 4\\r\\n67786538 8\\r\\n48901838 7\\r\\n15606185 6\\r\\n2747583 1\\r\\n100000000 1\\r\\n633331 3\\r\\n', 'output': ['1332923354']}, {'input': '200000000 9\\r\\n17463897 9\\r\\n79520463 1\\r\\n162407 4\\r\\n41017993 8\\r\\n71054118 4\\r\\n9447587 2\\r\\n5298038 9\\r\\n3674560 7\\r\\n20539314 5\\r\\n', 'output': ['996523209']}, {'input': '200000000 8\\r\\n6312706 6\\r\\n2920548 2\\r\\n16843192 3\\r\\n1501141 2\\r\\n13394704 6\\r\\n10047725 10\\r\\n4547663 6\\r\\n54268518 6\\r\\n', 'output': ['630991750']}, {'input': '200000000 7\\r\\n25621043 2\\r\\n21865270 1\\r\\n28833034 1\\r\\n22185073 5\\r\\n100000000 2\\r\\n13891017 9\\r\\n61298710 8\\r\\n', 'output': ['931584598']}, {'input': '200000000 6\\r\\n7465600 6\\r\\n8453505 10\\r\\n4572014 8\\r\\n8899499 3\\r\\n86805622 10\\r\\n64439238 6\\r\\n', 'output': ['1447294907']}, {'input': '200000000 5\\r\\n44608415 6\\r\\n100000000 9\\r\\n51483223 9\\r\\n44136047 1\\r\\n52718517 1\\r\\n', 'output': ['1634907859']}, {'input': '200000000 4\\r\\n37758556 10\\r\\n100000000 6\\r\\n48268521 3\\r\\n20148178 10\\r\\n', 'output': ['1305347138']}, {'input': '200000000 3\\r\\n65170000 7\\r\\n20790088 1\\r\\n74616133 4\\r\\n', 'output': ['775444620']}, {'input': '200000000 2\\r\\n11823018 6\\r\\n100000000 9\\r\\n', 'output': ['970938108']}, {'input': '200000000 1\\r\\n100000000 6\\r\\n', 'output': ['600000000']}, {'input': '200000000 10\\r\\n12097724 9\\r\\n41745972 5\\r\\n26982098 9\\r\\n14916995 7\\r\\n21549986 7\\r\\n3786630 9\\r\\n8050858 7\\r\\n27994924 4\\r\\n18345001 5\\r\\n8435339 5\\r\\n', 'output': ['1152034197']}, {'input': '200000000 10\\r\\n55649 8\\r\\n10980981 9\\r\\n3192542 8\\r\\n94994808 4\\r\\n3626106 1\\r\\n100000000 6\\r\\n5260110 9\\r\\n4121453 2\\r\\n15125061 4\\r\\n669569 6\\r\\n', 'output': ['1095537357']}, {'input': '10 20\\r\\n1 7\\r\\n1 7\\r\\n1 8\\r\\n1 3\\r\\n1 10\\r\\n1 7\\r\\n1 7\\r\\n1 9\\r\\n1 3\\r\\n1 1\\r\\n1 2\\r\\n1 1\\r\\n1 3\\r\\n1 10\\r\\n1 9\\r\\n1 8\\r\\n1 8\\r\\n1 6\\r\\n1 7\\r\\n1 5\\r\\n', 'output': ['83']}, {'input': '10000000 20\\r\\n4594 7\\r\\n520836 8\\r\\n294766 6\\r\\n298672 4\\r\\n142253 6\\r\\n450626 1\\r\\n1920034 9\\r\\n58282 4\\r\\n1043204 1\\r\\n683045 1\\r\\n1491746 5\\r\\n58420 4\\r\\n451217 2\\r\\n129423 4\\r\\n246113 5\\r\\n190612 8\\r\\n912923 6\\r\\n473153 6\\r\\n783733 6\\r\\n282411 10\\r\\n', 'output': ['54980855']}, {'input': '200000000 20\\r\\n15450824 5\\r\\n839717 10\\r\\n260084 8\\r\\n1140850 8\\r\\n28744 6\\r\\n675318 3\\r\\n25161 2\\r\\n5487 3\\r\\n6537698 9\\r\\n100000000 5\\r\\n7646970 9\\r\\n16489 6\\r\\n24627 3\\r\\n1009409 5\\r\\n22455 1\\r\\n25488456 4\\r\\n484528 9\\r\\n32663641 3\\r\\n750968 4\\r\\n5152 6\\r\\n', 'output': ['939368573']}, {'input': '200000000 20\\r\\n16896 2\\r\\n113 3\\r\\n277 2\\r\\n299 7\\r\\n69383562 2\\r\\n3929 8\\r\\n499366 4\\r\\n771846 5\\r\\n9 4\\r\\n1278173 7\\r\\n90 2\\r\\n54 7\\r\\n72199858 10\\r\\n17214 5\\r\\n3 10\\r\\n1981618 3\\r\\n3728 2\\r\\n141 8\\r\\n2013578 9\\r\\n51829246 5\\r\\n', 'output': ['1158946383']}, {'input': '200000000 20\\r\\n983125 2\\r\\n7453215 9\\r\\n9193588 2\\r\\n11558049 7\\r\\n28666199 1\\r\\n34362244 1\\r\\n5241493 5\\r\\n15451270 4\\r\\n19945845 8\\r\\n6208681 3\\r\\n38300385 7\\r\\n6441209 8\\r\\n21046742 7\\r\\n577198 10\\r\\n3826434 8\\r\\n9764276 8\\r\\n6264675 7\\r\\n8567063 3\\r\\n3610303 4\\r\\n2908232 3\\r\\n', 'output': ['1131379312']}, {'input': '10 15\\r\\n1 6\\r\\n2 6\\r\\n3 4\\r\\n1 3\\r\\n1 2\\r\\n1 5\\r\\n1 6\\r\\n1 2\\r\\n2 9\\r\\n1 10\\r\\n1 3\\r\\n1 7\\r\\n1 8\\r\\n1 2\\r\\n2 9\\r\\n', 'output': ['79']}, {'input': '10000000 15\\r\\n111 5\\r\\n914124 3\\r\\n3 9\\r\\n177790 1\\r\\n2352 3\\r\\n32138 9\\r\\n104477 1\\r\\n1223 4\\r\\n18 6\\r\\n6655580 4\\r\\n57643 10\\r\\n94309 2\\r\\n37 1\\r\\n227002 10\\r\\n1733193 7\\r\\n', 'output': ['45116295']}, {'input': '200000000 15\\r\\n7069868 1\\r\\n5567826 8\\r\\n2310059 10\\r\\n13539782 7\\r\\n38420939 4\\r\\n29911411 8\\r\\n52256316 1\\r\\n12265839 9\\r\\n2074265 1\\r\\n24896428 9\\r\\n72470695 5\\r\\n3236301 1\\r\\n3890243 2\\r\\n65168965 8\\r\\n65724 6\\r\\n', 'output': ['1489289257']}, {'input': '200000000 15\\r\\n12044094 7\\r\\n2475138 10\\r\\n944451 7\\r\\n4854766 2\\r\\n3809145 10\\r\\n7727571 2\\r\\n43908937 6\\r\\n2745883 1\\r\\n427511 2\\r\\n100000000 5\\r\\n190914 6\\r\\n554889 3\\r\\n288798 4\\r\\n1848572 5\\r\\n893874 3\\r\\n', 'output': ['961871671']}, {'input': '200000000 15\\r\\n6334191 7\\r\\n1927941 4\\r\\n5175933 10\\r\\n468389 1\\r\\n433043 10\\r\\n6863198 5\\r\\n7480646 4\\r\\n14774279 10\\r\\n2921129 8\\r\\n18325627 7\\r\\n6973152 9\\r\\n8277324 9\\r\\n21522856 2\\r\\n2058070 1\\r\\n2444742 4\\r\\n', 'output': ['664376069']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Solution\n{\n    static class Reader \n    {\n        final private int BUFFER_SIZE = 1 << 16;\n        private DataInputStream din;\n        private byte[] buffer;\n        private int bufferPointer, bytesRead;\n        \n        public Reader() \n        {\n            din = new DataInputStream(System.in);\n            buffer = new byte[BUFFER_SIZE];\n            bufferPointer = bytesRead = 0;\n        }\n        \n        public Reader(String file_name) throws IOException \n        {\n            din = new DataInputStream(new FileInputStream(file_name));\n            buffer = new byte[BUFFER_SIZE];\n            bufferPointer = bytesRead = 0;\n        }\n        \n        public void close() throws IOException \n        {\n            if (din == null) return;\n            din.close();\n        }\n        \n        public int readInt() throws IOException \n        {\n            int ret = 0;\n            byte c = read();\n            while (c <='') c = read();\n            boolean neg = (c == '-');\n            if (neg) c = read();\n            do\n            {\n                ret = ret * 10 + c - '0';\n            }  while ((c = read()) >= '0' && c <= '9');\n            if (neg) return -ret;\n            return ret;\n        }\n        \n        public long readLong() throws IOException \n        {\n            long ret = 0;\n            byte c = read();\n            while (c <='') c = read();\n            boolean neg = (c == '-');\n            if (neg) c = read();\n            do \n            {\n                ret = ret * 10 + c - '0';\n            }\n            while ((c = read()) >= '0' && c <= '9');\n            if (neg) return -ret;\n            return ret;\n        }\n        \n        public double readDouble() throws IOException \n        {\n            double ret = 0, div = 1;\n            byte c = read();\n            while (c <='') c = read();\n            boolean neg = (c == '-');\n            if (neg) c = read();\n            do \n            {\n                ret = ret * 10 + c - '0';\n            }\n            while ((c = read()) >= '0' && c <= '9');\n            if (c == '.')\n            {\n                while ((c = read()) >= '0' && c <= '9') \n                {\n                    ret += (c - '0') / (div *= 10);\n                }\n            }\n            if (neg) return -ret;\n            return ret;\n        }\n        \n        private void fillBuffer() throws IOException \n        {\n            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);\n            if (bytesRead <= 0) \n            {\n                buffer[0] = -1;\n            }\n        }\n        \n        private byte read() throws IOException \n        {\n            if (bufferPointer == bytesRead) \n            {\n                fillBuffer();\n            }\n            return buffer[bufferPointer++];\n        }\n        \n        public void emptyBuffer() throws IOException \n        {\n            if (bufferPointer < bytesRead) \n            {\n                bufferPointer = bytesRead;\n            }\n            fillBuffer();\n        }\n    }\n\n    public static void main(String[] args) throws IOException \n    {\n        Reader in = new Reader();\n        int n = in.readInt();\n        int m = in.readInt();\n        int a[] = new int[m];\n        int b[] = new int[m];\n        for(int i = 0 ; i < m ; i++)\n        {\n            a[i] = in.readInt();\n        }\n        for(int i = 0 ; i < m ; i++)\n        {\n            b[i] = in.readInt();\n        }\n        int max = 0 ;\n        int val = n;\n        int pos = 0;\n        while(n > 0)\n        {\n            max = a[pos];\n            pos = 0;\n            for(int j = 0 ; j < m ; j++ )\n            {\n                if("}
{"src_uid": "c052d85e402691b05e494b5283d62679", "id": 83, "lang_cluster": "java", "lang": "Java 11", "difficulty": 900, "testcases": "[{'input': '7 3\\r\\n5 10\\r\\n2 5\\r\\n3 6\\r\\n', 'output': ['62']}, {'input': '3 3\\r\\n1 3\\r\\n2 2\\r\\n3 1\\r\\n', 'output': ['7']}, {'input': '1 1\\r\\n1 2\\r\\n', 'output': ['2']}, {'input': '1 2\\r\\n1 9\\r\\n1 6\\r\\n', 'output': ['9']}, {'input': '1 10\\r\\n1 1\\r\\n1 9\\r\\n1 3\\r\\n1 9\\r\\n1 7\\r\\n1 10\\r\\n1 4\\r\\n1 7\\r\\n1 3\\r\\n1 1\\r\\n', 'output': ['10']}, {'input': '2 1\\r\\n2 1\\r\\n', 'output': ['2']}, {'input': '2 2\\r\\n2 4\\r\\n1 4\\r\\n', 'output': ['8']}, {'input': '2 3\\r\\n1 7\\r\\n1 2\\r\\n1 5\\r\\n', 'output': ['12']}, {'input': '4 1\\r\\n2 2\\r\\n', 'output': ['4']}, {'input': '4 2\\r\\n1 10\\r\\n4 4\\r\\n', 'output': ['22']}, {'input': '4 3\\r\\n1 4\\r\\n6 4\\r\\n1 7\\r\\n', 'output': ['19']}, {'input': '5 1\\r\\n10 5\\r\\n', 'output': ['25']}, {'input': '5 2\\r\\n3 9\\r\\n2 2\\r\\n', 'output': ['31']}, {'input': '5 5\\r\\n2 9\\r\\n3 1\\r\\n2 1\\r\\n1 8\\r\\n2 8\\r\\n', 'output': ['42']}, {'input': '5 10\\r\\n1 3\\r\\n1 2\\r\\n1 9\\r\\n1 10\\r\\n1 1\\r\\n1 5\\r\\n1 10\\r\\n1 2\\r\\n1 3\\r\\n1 7\\r\\n', 'output': ['41']}, {'input': '10 1\\r\\n9 4\\r\\n', 'output': ['36']}, {'input': '10 2\\r\\n14 3\\r\\n1 3\\r\\n', 'output': ['30']}, {'input': '10 7\\r\\n4 8\\r\\n1 10\\r\\n1 10\\r\\n1 2\\r\\n3 3\\r\\n1 3\\r\\n1 10\\r\\n', 'output': ['71']}, {'input': '10 10\\r\\n1 8\\r\\n2 10\\r\\n1 9\\r\\n1 1\\r\\n1 9\\r\\n1 6\\r\\n1 4\\r\\n2 5\\r\\n1 2\\r\\n1 4\\r\\n', 'output': ['70']}, {'input': '10 4\\r\\n1 5\\r\\n5 2\\r\\n1 9\\r\\n3 3\\r\\n', 'output': ['33']}, {'input': '100 5\\r\\n78 6\\r\\n29 10\\r\\n3 6\\r\\n7 3\\r\\n2 4\\r\\n', 'output': ['716']}, {'input': '1000 7\\r\\n102 10\\r\\n23 6\\r\\n79 4\\r\\n48 1\\r\\n34 10\\r\\n839 8\\r\\n38 4\\r\\n', 'output': ['8218']}, {'input': '10000 10\\r\\n336 2\\r\\n2782 5\\r\\n430 10\\r\\n1893 7\\r\\n3989 10\\r\\n2593 8\\r\\n165 6\\r\\n1029 2\\r\\n2097 4\\r\\n178 10\\r\\n', 'output': ['84715']}, {'input': '100000 3\\r\\n2975 2\\r\\n35046 4\\r\\n61979 9\\r\\n', 'output': ['703945']}, {'input': '1000000 4\\r\\n314183 9\\r\\n304213 4\\r\\n16864 5\\r\\n641358 9\\r\\n', 'output': ['8794569']}, {'input': '10000000 10\\r\\n360313 10\\r\\n416076 1\\r\\n435445 9\\r\\n940322 7\\r\\n1647581 7\\r\\n4356968 10\\r\\n3589256 2\\r\\n2967933 5\\r\\n2747504 7\\r\\n1151633 3\\r\\n', 'output': ['85022733']}, {'input': '100000000 7\\r\\n32844337 7\\r\\n11210848 7\\r\\n47655987 1\\r\\n33900472 4\\r\\n9174763 2\\r\\n32228738 10\\r\\n29947408 5\\r\\n', 'output': ['749254060']}, {'input': '200000000 10\\r\\n27953106 7\\r\\n43325979 4\\r\\n4709522 1\\r\\n10975786 4\\r\\n67786538 8\\r\\n48901838 7\\r\\n15606185 6\\r\\n2747583 1\\r\\n100000000 1\\r\\n633331 3\\r\\n', 'output': ['1332923354']}, {'input': '200000000 9\\r\\n17463897 9\\r\\n79520463 1\\r\\n162407 4\\r\\n41017993 8\\r\\n71054118 4\\r\\n9447587 2\\r\\n5298038 9\\r\\n3674560 7\\r\\n20539314 5\\r\\n', 'output': ['996523209']}, {'input': '200000000 8\\r\\n6312706 6\\r\\n2920548 2\\r\\n16843192 3\\r\\n1501141 2\\r\\n13394704 6\\r\\n10047725 10\\r\\n4547663 6\\r\\n54268518 6\\r\\n', 'output': ['630991750']}, {'input': '200000000 7\\r\\n25621043 2\\r\\n21865270 1\\r\\n28833034 1\\r\\n22185073 5\\r\\n100000000 2\\r\\n13891017 9\\r\\n61298710 8\\r\\n', 'output': ['931584598']}, {'input': '200000000 6\\r\\n7465600 6\\r\\n8453505 10\\r\\n4572014 8\\r\\n8899499 3\\r\\n86805622 10\\r\\n64439238 6\\r\\n', 'output': ['1447294907']}, {'input': '200000000 5\\r\\n44608415 6\\r\\n100000000 9\\r\\n51483223 9\\r\\n44136047 1\\r\\n52718517 1\\r\\n', 'output': ['1634907859']}, {'input': '200000000 4\\r\\n37758556 10\\r\\n100000000 6\\r\\n48268521 3\\r\\n20148178 10\\r\\n', 'output': ['1305347138']}, {'input': '200000000 3\\r\\n65170000 7\\r\\n20790088 1\\r\\n74616133 4\\r\\n', 'output': ['775444620']}, {'input': '200000000 2\\r\\n11823018 6\\r\\n100000000 9\\r\\n', 'output': ['970938108']}, {'input': '200000000 1\\r\\n100000000 6\\r\\n', 'output': ['600000000']}, {'input': '200000000 10\\r\\n12097724 9\\r\\n41745972 5\\r\\n26982098 9\\r\\n14916995 7\\r\\n21549986 7\\r\\n3786630 9\\r\\n8050858 7\\r\\n27994924 4\\r\\n18345001 5\\r\\n8435339 5\\r\\n', 'output': ['1152034197']}, {'input': '200000000 10\\r\\n55649 8\\r\\n10980981 9\\r\\n3192542 8\\r\\n94994808 4\\r\\n3626106 1\\r\\n100000000 6\\r\\n5260110 9\\r\\n4121453 2\\r\\n15125061 4\\r\\n669569 6\\r\\n', 'output': ['1095537357']}, {'input': '10 20\\r\\n1 7\\r\\n1 7\\r\\n1 8\\r\\n1 3\\r\\n1 10\\r\\n1 7\\r\\n1 7\\r\\n1 9\\r\\n1 3\\r\\n1 1\\r\\n1 2\\r\\n1 1\\r\\n1 3\\r\\n1 10\\r\\n1 9\\r\\n1 8\\r\\n1 8\\r\\n1 6\\r\\n1 7\\r\\n1 5\\r\\n', 'output': ['83']}, {'input': '10000000 20\\r\\n4594 7\\r\\n520836 8\\r\\n294766 6\\r\\n298672 4\\r\\n142253 6\\r\\n450626 1\\r\\n1920034 9\\r\\n58282 4\\r\\n1043204 1\\r\\n683045 1\\r\\n1491746 5\\r\\n58420 4\\r\\n451217 2\\r\\n129423 4\\r\\n246113 5\\r\\n190612 8\\r\\n912923 6\\r\\n473153 6\\r\\n783733 6\\r\\n282411 10\\r\\n', 'output': ['54980855']}, {'input': '200000000 20\\r\\n15450824 5\\r\\n839717 10\\r\\n260084 8\\r\\n1140850 8\\r\\n28744 6\\r\\n675318 3\\r\\n25161 2\\r\\n5487 3\\r\\n6537698 9\\r\\n100000000 5\\r\\n7646970 9\\r\\n16489 6\\r\\n24627 3\\r\\n1009409 5\\r\\n22455 1\\r\\n25488456 4\\r\\n484528 9\\r\\n32663641 3\\r\\n750968 4\\r\\n5152 6\\r\\n', 'output': ['939368573']}, {'input': '200000000 20\\r\\n16896 2\\r\\n113 3\\r\\n277 2\\r\\n299 7\\r\\n69383562 2\\r\\n3929 8\\r\\n499366 4\\r\\n771846 5\\r\\n9 4\\r\\n1278173 7\\r\\n90 2\\r\\n54 7\\r\\n72199858 10\\r\\n17214 5\\r\\n3 10\\r\\n1981618 3\\r\\n3728 2\\r\\n141 8\\r\\n2013578 9\\r\\n51829246 5\\r\\n', 'output': ['1158946383']}, {'input': '200000000 20\\r\\n983125 2\\r\\n7453215 9\\r\\n9193588 2\\r\\n11558049 7\\r\\n28666199 1\\r\\n34362244 1\\r\\n5241493 5\\r\\n15451270 4\\r\\n19945845 8\\r\\n6208681 3\\r\\n38300385 7\\r\\n6441209 8\\r\\n21046742 7\\r\\n577198 10\\r\\n3826434 8\\r\\n9764276 8\\r\\n6264675 7\\r\\n8567063 3\\r\\n3610303 4\\r\\n2908232 3\\r\\n', 'output': ['1131379312']}, {'input': '10 15\\r\\n1 6\\r\\n2 6\\r\\n3 4\\r\\n1 3\\r\\n1 2\\r\\n1 5\\r\\n1 6\\r\\n1 2\\r\\n2 9\\r\\n1 10\\r\\n1 3\\r\\n1 7\\r\\n1 8\\r\\n1 2\\r\\n2 9\\r\\n', 'output': ['79']}, {'input': '10000000 15\\r\\n111 5\\r\\n914124 3\\r\\n3 9\\r\\n177790 1\\r\\n2352 3\\r\\n32138 9\\r\\n104477 1\\r\\n1223 4\\r\\n18 6\\r\\n6655580 4\\r\\n57643 10\\r\\n94309 2\\r\\n37 1\\r\\n227002 10\\r\\n1733193 7\\r\\n', 'output': ['45116295']}, {'input': '200000000 15\\r\\n7069868 1\\r\\n5567826 8\\r\\n2310059 10\\r\\n13539782 7\\r\\n38420939 4\\r\\n29911411 8\\r\\n52256316 1\\r\\n12265839 9\\r\\n2074265 1\\r\\n24896428 9\\r\\n72470695 5\\r\\n3236301 1\\r\\n3890243 2\\r\\n65168965 8\\r\\n65724 6\\r\\n', 'output': ['1489289257']}, {'input': '200000000 15\\r\\n12044094 7\\r\\n2475138 10\\r\\n944451 7\\r\\n4854766 2\\r\\n3809145 10\\r\\n7727571 2\\r\\n43908937 6\\r\\n2745883 1\\r\\n427511 2\\r\\n100000000 5\\r\\n190914 6\\r\\n554889 3\\r\\n288798 4\\r\\n1848572 5\\r\\n893874 3\\r\\n', 'output': ['961871671']}, {'input': '200000000 15\\r\\n6334191 7\\r\\n1927941 4\\r\\n5175933 10\\r\\n468389 1\\r\\n433043 10\\r\\n6863198 5\\r\\n7480646 4\\r\\n14774279 10\\r\\n2921129 8\\r\\n18325627 7\\r\\n6973152 9\\r\\n8277324 9\\r\\n21522856 2\\r\\n2058070 1\\r\\n2444742 4\\r\\n', 'output': ['664376069']}]", "source_code": "import java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args) throws Exception {\n\t\t// TODO Auto-generated method stub\n\t\t// Your code here!\n\t\tFastScanner scanner = new FastScanner();\n\t\tint n = scanner.nextInt();\n\t\tint m = scanner.nextInt();\n\t\tint[] a = new int[m];\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++) {\n\t\t\ta[i] = scanner.nextInt();\n\t\t\tb[i] = scanner.nextInt();\n\t\t}\n\t\tint[] res = new int[n + 1];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n+1; i++) {\n\t\t\tfor(int j = 0; j < m; j++) {\n\t\t\t\tif(a[j] > max && i >= b[j]) {\n\t\t\t\t\tmax = a[j];\n\t\t\t\t\tres[i] = b[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tint cnt = n;\n\t\tfor(int i = n; i > 0; i--) {\n\t\t\tif(res[i]!= 0) {\n\t\t\t\tif(cnt >= res[i]) {\n\t\t\t\t\tans = ans + (res[i] * i);\n\t\t\t\t\tcnt = cnt - res[i];\n\t\t\t\t} else {\n\t\t\t\t\tans = ans + (cnt * i);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n\n\tprivate static class FastScanner {\n\t\tprivate final InputStream in = System.in;\n\t\tprivate final byte[] buffer = new byte[1024];\n\t\tprivate int ptr = 0;\n\t\tprivate int buflen = 0;\n\t\tprivate boolean hasNextByte() {\n\t\t\t\tif (ptr < buflen) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t}else{\n\t\t\t\t\t\tptr = 0;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tbuflen = in.read(buffer);\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (buflen <= 0) {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t}\n\t\tprivate int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n\t\tprivate static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n\t\tpublic boolean hasNext() { while(hasNextByte() &&!isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\n\t\tpublic String next() {\n\t\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\tint b = readByte();\n\t\t\t\twhile(isPrintableChar(b)) {\n\t\t\t\t\t\tsb.appendCodePoint(b);\n\t\t\t\t\t\tb = readByte();\n\t\t\t\t}\n\t\t\t\treturn sb.toString();\n\t\t}\n\t\tpublic long nextLong() {\n\t\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\t\tlong n = 0;\n\t\t\t\tboolean minus = false;\n\t\t\t\tint b = readByte();\n\t\t\t\tif (b == '-') {\n\t\t\t\t\t\tminus = true;\n\t\t\t\t\t\tb = readByte();\n\t\t\t\t}\n\t\t\t\tif (b < '0' || '9' < b) {\n\t\t\t\t\t\tthrow new NumberFormatException();\n\t\t\t\t}\n\t\t\t\twhile(true){\n\t\t"}
{"src_uid": "c052d85e402691b05e494b5283d62679", "id": 83, "lang_cluster": "java", "lang": "Java 11", "difficulty": 900, "testcases": "[{'input': '7 3\\r\\n5 10\\r\\n2 5\\r\\n3 6\\r\\n', 'output': ['62']}, {'input': '3 3\\r\\n1 3\\r\\n2 2\\r\\n3 1\\r\\n', 'output': ['7']}, {'input': '1 1\\r\\n1 2\\r\\n', 'output': ['2']}, {'input': '1 2\\r\\n1 9\\r\\n1 6\\r\\n', 'output': ['9']}, {'input': '1 10\\r\\n1 1\\r\\n1 9\\r\\n1 3\\r\\n1 9\\r\\n1 7\\r\\n1 10\\r\\n1 4\\r\\n1 7\\r\\n1 3\\r\\n1 1\\r\\n', 'output': ['10']}, {'input': '2 1\\r\\n2 1\\r\\n', 'output': ['2']}, {'input': '2 2\\r\\n2 4\\r\\n1 4\\r\\n', 'output': ['8']}, {'input': '2 3\\r\\n1 7\\r\\n1 2\\r\\n1 5\\r\\n', 'output': ['12']}, {'input': '4 1\\r\\n2 2\\r\\n', 'output': ['4']}, {'input': '4 2\\r\\n1 10\\r\\n4 4\\r\\n', 'output': ['22']}, {'input': '4 3\\r\\n1 4\\r\\n6 4\\r\\n1 7\\r\\n', 'output': ['19']}, {'input': '5 1\\r\\n10 5\\r\\n', 'output': ['25']}, {'input': '5 2\\r\\n3 9\\r\\n2 2\\r\\n', 'output': ['31']}, {'input': '5 5\\r\\n2 9\\r\\n3 1\\r\\n2 1\\r\\n1 8\\r\\n2 8\\r\\n', 'output': ['42']}, {'input': '5 10\\r\\n1 3\\r\\n1 2\\r\\n1 9\\r\\n1 10\\r\\n1 1\\r\\n1 5\\r\\n1 10\\r\\n1 2\\r\\n1 3\\r\\n1 7\\r\\n', 'output': ['41']}, {'input': '10 1\\r\\n9 4\\r\\n', 'output': ['36']}, {'input': '10 2\\r\\n14 3\\r\\n1 3\\r\\n', 'output': ['30']}, {'input': '10 7\\r\\n4 8\\r\\n1 10\\r\\n1 10\\r\\n1 2\\r\\n3 3\\r\\n1 3\\r\\n1 10\\r\\n', 'output': ['71']}, {'input': '10 10\\r\\n1 8\\r\\n2 10\\r\\n1 9\\r\\n1 1\\r\\n1 9\\r\\n1 6\\r\\n1 4\\r\\n2 5\\r\\n1 2\\r\\n1 4\\r\\n', 'output': ['70']}, {'input': '10 4\\r\\n1 5\\r\\n5 2\\r\\n1 9\\r\\n3 3\\r\\n', 'output': ['33']}, {'input': '100 5\\r\\n78 6\\r\\n29 10\\r\\n3 6\\r\\n7 3\\r\\n2 4\\r\\n', 'output': ['716']}, {'input': '1000 7\\r\\n102 10\\r\\n23 6\\r\\n79 4\\r\\n48 1\\r\\n34 10\\r\\n839 8\\r\\n38 4\\r\\n', 'output': ['8218']}, {'input': '10000 10\\r\\n336 2\\r\\n2782 5\\r\\n430 10\\r\\n1893 7\\r\\n3989 10\\r\\n2593 8\\r\\n165 6\\r\\n1029 2\\r\\n2097 4\\r\\n178 10\\r\\n', 'output': ['84715']}, {'input': '100000 3\\r\\n2975 2\\r\\n35046 4\\r\\n61979 9\\r\\n', 'output': ['703945']}, {'input': '1000000 4\\r\\n314183 9\\r\\n304213 4\\r\\n16864 5\\r\\n641358 9\\r\\n', 'output': ['8794569']}, {'input': '10000000 10\\r\\n360313 10\\r\\n416076 1\\r\\n435445 9\\r\\n940322 7\\r\\n1647581 7\\r\\n4356968 10\\r\\n3589256 2\\r\\n2967933 5\\r\\n2747504 7\\r\\n1151633 3\\r\\n', 'output': ['85022733']}, {'input': '100000000 7\\r\\n32844337 7\\r\\n11210848 7\\r\\n47655987 1\\r\\n33900472 4\\r\\n9174763 2\\r\\n32228738 10\\r\\n29947408 5\\r\\n', 'output': ['749254060']}, {'input': '200000000 10\\r\\n27953106 7\\r\\n43325979 4\\r\\n4709522 1\\r\\n10975786 4\\r\\n67786538 8\\r\\n48901838 7\\r\\n15606185 6\\r\\n2747583 1\\r\\n100000000 1\\r\\n633331 3\\r\\n', 'output': ['1332923354']}, {'input': '200000000 9\\r\\n17463897 9\\r\\n79520463 1\\r\\n162407 4\\r\\n41017993 8\\r\\n71054118 4\\r\\n9447587 2\\r\\n5298038 9\\r\\n3674560 7\\r\\n20539314 5\\r\\n', 'output': ['996523209']}, {'input': '200000000 8\\r\\n6312706 6\\r\\n2920548 2\\r\\n16843192 3\\r\\n1501141 2\\r\\n13394704 6\\r\\n10047725 10\\r\\n4547663 6\\r\\n54268518 6\\r\\n', 'output': ['630991750']}, {'input': '200000000 7\\r\\n25621043 2\\r\\n21865270 1\\r\\n28833034 1\\r\\n22185073 5\\r\\n100000000 2\\r\\n13891017 9\\r\\n61298710 8\\r\\n', 'output': ['931584598']}, {'input': '200000000 6\\r\\n7465600 6\\r\\n8453505 10\\r\\n4572014 8\\r\\n8899499 3\\r\\n86805622 10\\r\\n64439238 6\\r\\n', 'output': ['1447294907']}, {'input': '200000000 5\\r\\n44608415 6\\r\\n100000000 9\\r\\n51483223 9\\r\\n44136047 1\\r\\n52718517 1\\r\\n', 'output': ['1634907859']}, {'input': '200000000 4\\r\\n37758556 10\\r\\n100000000 6\\r\\n48268521 3\\r\\n20148178 10\\r\\n', 'output': ['1305347138']}, {'input': '200000000 3\\r\\n65170000 7\\r\\n20790088 1\\r\\n74616133 4\\r\\n', 'output': ['775444620']}, {'input': '200000000 2\\r\\n11823018 6\\r\\n100000000 9\\r\\n', 'output': ['970938108']}, {'input': '200000000 1\\r\\n100000000 6\\r\\n', 'output': ['600000000']}, {'input': '200000000 10\\r\\n12097724 9\\r\\n41745972 5\\r\\n26982098 9\\r\\n14916995 7\\r\\n21549986 7\\r\\n3786630 9\\r\\n8050858 7\\r\\n27994924 4\\r\\n18345001 5\\r\\n8435339 5\\r\\n', 'output': ['1152034197']}, {'input': '200000000 10\\r\\n55649 8\\r\\n10980981 9\\r\\n3192542 8\\r\\n94994808 4\\r\\n3626106 1\\r\\n100000000 6\\r\\n5260110 9\\r\\n4121453 2\\r\\n15125061 4\\r\\n669569 6\\r\\n', 'output': ['1095537357']}, {'input': '10 20\\r\\n1 7\\r\\n1 7\\r\\n1 8\\r\\n1 3\\r\\n1 10\\r\\n1 7\\r\\n1 7\\r\\n1 9\\r\\n1 3\\r\\n1 1\\r\\n1 2\\r\\n1 1\\r\\n1 3\\r\\n1 10\\r\\n1 9\\r\\n1 8\\r\\n1 8\\r\\n1 6\\r\\n1 7\\r\\n1 5\\r\\n', 'output': ['83']}, {'input': '10000000 20\\r\\n4594 7\\r\\n520836 8\\r\\n294766 6\\r\\n298672 4\\r\\n142253 6\\r\\n450626 1\\r\\n1920034 9\\r\\n58282 4\\r\\n1043204 1\\r\\n683045 1\\r\\n1491746 5\\r\\n58420 4\\r\\n451217 2\\r\\n129423 4\\r\\n246113 5\\r\\n190612 8\\r\\n912923 6\\r\\n473153 6\\r\\n783733 6\\r\\n282411 10\\r\\n', 'output': ['54980855']}, {'input': '200000000 20\\r\\n15450824 5\\r\\n839717 10\\r\\n260084 8\\r\\n1140850 8\\r\\n28744 6\\r\\n675318 3\\r\\n25161 2\\r\\n5487 3\\r\\n6537698 9\\r\\n100000000 5\\r\\n7646970 9\\r\\n16489 6\\r\\n24627 3\\r\\n1009409 5\\r\\n22455 1\\r\\n25488456 4\\r\\n484528 9\\r\\n32663641 3\\r\\n750968 4\\r\\n5152 6\\r\\n', 'output': ['939368573']}, {'input': '200000000 20\\r\\n16896 2\\r\\n113 3\\r\\n277 2\\r\\n299 7\\r\\n69383562 2\\r\\n3929 8\\r\\n499366 4\\r\\n771846 5\\r\\n9 4\\r\\n1278173 7\\r\\n90 2\\r\\n54 7\\r\\n72199858 10\\r\\n17214 5\\r\\n3 10\\r\\n1981618 3\\r\\n3728 2\\r\\n141 8\\r\\n2013578 9\\r\\n51829246 5\\r\\n', 'output': ['1158946383']}, {'input': '200000000 20\\r\\n983125 2\\r\\n7453215 9\\r\\n9193588 2\\r\\n11558049 7\\r\\n28666199 1\\r\\n34362244 1\\r\\n5241493 5\\r\\n15451270 4\\r\\n19945845 8\\r\\n6208681 3\\r\\n38300385 7\\r\\n6441209 8\\r\\n21046742 7\\r\\n577198 10\\r\\n3826434 8\\r\\n9764276 8\\r\\n6264675 7\\r\\n8567063 3\\r\\n3610303 4\\r\\n2908232 3\\r\\n', 'output': ['1131379312']}, {'input': '10 15\\r\\n1 6\\r\\n2 6\\r\\n3 4\\r\\n1 3\\r\\n1 2\\r\\n1 5\\r\\n1 6\\r\\n1 2\\r\\n2 9\\r\\n1 10\\r\\n1 3\\r\\n1 7\\r\\n1 8\\r\\n1 2\\r\\n2 9\\r\\n', 'output': ['79']}, {'input': '10000000 15\\r\\n111 5\\r\\n914124 3\\r\\n3 9\\r\\n177790 1\\r\\n2352 3\\r\\n32138 9\\r\\n104477 1\\r\\n1223 4\\r\\n18 6\\r\\n6655580 4\\r\\n57643 10\\r\\n94309 2\\r\\n37 1\\r\\n227002 10\\r\\n1733193 7\\r\\n', 'output': ['45116295']}, {'input': '200000000 15\\r\\n7069868 1\\r\\n5567826 8\\r\\n2310059 10\\r\\n13539782 7\\r\\n38420939 4\\r\\n29911411 8\\r\\n52256316 1\\r\\n12265839 9\\r\\n2074265 1\\r\\n24896428 9\\r\\n72470695 5\\r\\n3236301 1\\r\\n3890243 2\\r\\n65168965 8\\r\\n65724 6\\r\\n', 'output': ['1489289257']}, {'input': '200000000 15\\r\\n12044094 7\\r\\n2475138 10\\r\\n944451 7\\r\\n4854766 2\\r\\n3809145 10\\r\\n7727571 2\\r\\n43908937 6\\r\\n2745883 1\\r\\n427511 2\\r\\n100000000 5\\r\\n190914 6\\r\\n554889 3\\r\\n288798 4\\r\\n1848572 5\\r\\n893874 3\\r\\n', 'output': ['961871671']}, {'input': '200000000 15\\r\\n6334191 7\\r\\n1927941 4\\r\\n5175933 10\\r\\n468389 1\\r\\n433043 10\\r\\n6863198 5\\r\\n7480646 4\\r\\n14774279 10\\r\\n2921129 8\\r\\n18325627 7\\r\\n6973152 9\\r\\n8277324 9\\r\\n21522856 2\\r\\n2058070 1\\r\\n2444742 4\\r\\n', 'output': ['664376069']}]", "source_code": "import java.util.*;\n\npublic class JavaApplication8 {\n    \n    public static void main(String[] args) throws Exception {\n        \n        try(Scanner entrada = new Scanner(System.in)){\n            int N = entrada.nextInt();\n            int M = entrada.nextInt();\n            int cont = 0;\n            int maior = 0;\n            int[] A = new int [M];\n            int[] B = new int [M];\n            while(cont < M){\n                A[cont] = entrada.nextInt();\n                B[cont] = entrada.nextInt();\n                cont++;\n            }\n            \n            maior = B[0];\n            int indice = 0;\n            int num = 0;\n            while(N!= 0){\n                for(int i = 0; i < M; i++){\n                    if(B[i] == maior){\n                        num = A[i];\n                    }\n                }\n                if(num <= N){\n                    N = N - num;\n                    maior = B[indice];\n                    indice++;\n                    num = 0;\n                }else{\n                    num = 0;\n                    maior = B[indice];\n                    indice++;\n                }\n            }\n            System.out.println(A[indice-1]);\n            \n            \n        }\n    }\n}\n"}
{"src_uid": "c052d85e402691b05e494b5283d62679", "id": 83, "lang_cluster": "java", "lang": "Java 11", "difficulty": 900, "testcases": "[{'input': '7 3\\r\\n5 10\\r\\n2 5\\r\\n3 6\\r\\n', 'output': ['62']}, {'input': '3 3\\r\\n1 3\\r\\n2 2\\r\\n3 1\\r\\n', 'output': ['7']}, {'input': '1 1\\r\\n1 2\\r\\n', 'output': ['2']}, {'input': '1 2\\r\\n1 9\\r\\n1 6\\r\\n', 'output': ['9']}, {'input': '1 10\\r\\n1 1\\r\\n1 9\\r\\n1 3\\r\\n1 9\\r\\n1 7\\r\\n1 10\\r\\n1 4\\r\\n1 7\\r\\n1 3\\r\\n1 1\\r\\n', 'output': ['10']}, {'input': '2 1\\r\\n2 1\\r\\n', 'output': ['2']}, {'input': '2 2\\r\\n2 4\\r\\n1 4\\r\\n', 'output': ['8']}, {'input': '2 3\\r\\n1 7\\r\\n1 2\\r\\n1 5\\r\\n', 'output': ['12']}, {'input': '4 1\\r\\n2 2\\r\\n', 'output': ['4']}, {'input': '4 2\\r\\n1 10\\r\\n4 4\\r\\n', 'output': ['22']}, {'input': '4 3\\r\\n1 4\\r\\n6 4\\r\\n1 7\\r\\n', 'output': ['19']}, {'input': '5 1\\r\\n10 5\\r\\n', 'output': ['25']}, {'input': '5 2\\r\\n3 9\\r\\n2 2\\r\\n', 'output': ['31']}, {'input': '5 5\\r\\n2 9\\r\\n3 1\\r\\n2 1\\r\\n1 8\\r\\n2 8\\r\\n', 'output': ['42']}, {'input': '5 10\\r\\n1 3\\r\\n1 2\\r\\n1 9\\r\\n1 10\\r\\n1 1\\r\\n1 5\\r\\n1 10\\r\\n1 2\\r\\n1 3\\r\\n1 7\\r\\n', 'output': ['41']}, {'input': '10 1\\r\\n9 4\\r\\n', 'output': ['36']}, {'input': '10 2\\r\\n14 3\\r\\n1 3\\r\\n', 'output': ['30']}, {'input': '10 7\\r\\n4 8\\r\\n1 10\\r\\n1 10\\r\\n1 2\\r\\n3 3\\r\\n1 3\\r\\n1 10\\r\\n', 'output': ['71']}, {'input': '10 10\\r\\n1 8\\r\\n2 10\\r\\n1 9\\r\\n1 1\\r\\n1 9\\r\\n1 6\\r\\n1 4\\r\\n2 5\\r\\n1 2\\r\\n1 4\\r\\n', 'output': ['70']}, {'input': '10 4\\r\\n1 5\\r\\n5 2\\r\\n1 9\\r\\n3 3\\r\\n', 'output': ['33']}, {'input': '100 5\\r\\n78 6\\r\\n29 10\\r\\n3 6\\r\\n7 3\\r\\n2 4\\r\\n', 'output': ['716']}, {'input': '1000 7\\r\\n102 10\\r\\n23 6\\r\\n79 4\\r\\n48 1\\r\\n34 10\\r\\n839 8\\r\\n38 4\\r\\n', 'output': ['8218']}, {'input': '10000 10\\r\\n336 2\\r\\n2782 5\\r\\n430 10\\r\\n1893 7\\r\\n3989 10\\r\\n2593 8\\r\\n165 6\\r\\n1029 2\\r\\n2097 4\\r\\n178 10\\r\\n', 'output': ['84715']}, {'input': '100000 3\\r\\n2975 2\\r\\n35046 4\\r\\n61979 9\\r\\n', 'output': ['703945']}, {'input': '1000000 4\\r\\n314183 9\\r\\n304213 4\\r\\n16864 5\\r\\n641358 9\\r\\n', 'output': ['8794569']}, {'input': '10000000 10\\r\\n360313 10\\r\\n416076 1\\r\\n435445 9\\r\\n940322 7\\r\\n1647581 7\\r\\n4356968 10\\r\\n3589256 2\\r\\n2967933 5\\r\\n2747504 7\\r\\n1151633 3\\r\\n', 'output': ['85022733']}, {'input': '100000000 7\\r\\n32844337 7\\r\\n11210848 7\\r\\n47655987 1\\r\\n33900472 4\\r\\n9174763 2\\r\\n32228738 10\\r\\n29947408 5\\r\\n', 'output': ['749254060']}, {'input': '200000000 10\\r\\n27953106 7\\r\\n43325979 4\\r\\n4709522 1\\r\\n10975786 4\\r\\n67786538 8\\r\\n48901838 7\\r\\n15606185 6\\r\\n2747583 1\\r\\n100000000 1\\r\\n633331 3\\r\\n', 'output': ['1332923354']}, {'input': '200000000 9\\r\\n17463897 9\\r\\n79520463 1\\r\\n162407 4\\r\\n41017993 8\\r\\n71054118 4\\r\\n9447587 2\\r\\n5298038 9\\r\\n3674560 7\\r\\n20539314 5\\r\\n', 'output': ['996523209']}, {'input': '200000000 8\\r\\n6312706 6\\r\\n2920548 2\\r\\n16843192 3\\r\\n1501141 2\\r\\n13394704 6\\r\\n10047725 10\\r\\n4547663 6\\r\\n54268518 6\\r\\n', 'output': ['630991750']}, {'input': '200000000 7\\r\\n25621043 2\\r\\n21865270 1\\r\\n28833034 1\\r\\n22185073 5\\r\\n100000000 2\\r\\n13891017 9\\r\\n61298710 8\\r\\n', 'output': ['931584598']}, {'input': '200000000 6\\r\\n7465600 6\\r\\n8453505 10\\r\\n4572014 8\\r\\n8899499 3\\r\\n86805622 10\\r\\n64439238 6\\r\\n', 'output': ['1447294907']}, {'input': '200000000 5\\r\\n44608415 6\\r\\n100000000 9\\r\\n51483223 9\\r\\n44136047 1\\r\\n52718517 1\\r\\n', 'output': ['1634907859']}, {'input': '200000000 4\\r\\n37758556 10\\r\\n100000000 6\\r\\n48268521 3\\r\\n20148178 10\\r\\n', 'output': ['1305347138']}, {'input': '200000000 3\\r\\n65170000 7\\r\\n20790088 1\\r\\n74616133 4\\r\\n', 'output': ['775444620']}, {'input': '200000000 2\\r\\n11823018 6\\r\\n100000000 9\\r\\n', 'output': ['970938108']}, {'input': '200000000 1\\r\\n100000000 6\\r\\n', 'output': ['600000000']}, {'input': '200000000 10\\r\\n12097724 9\\r\\n41745972 5\\r\\n26982098 9\\r\\n14916995 7\\r\\n21549986 7\\r\\n3786630 9\\r\\n8050858 7\\r\\n27994924 4\\r\\n18345001 5\\r\\n8435339 5\\r\\n', 'output': ['1152034197']}, {'input': '200000000 10\\r\\n55649 8\\r\\n10980981 9\\r\\n3192542 8\\r\\n94994808 4\\r\\n3626106 1\\r\\n100000000 6\\r\\n5260110 9\\r\\n4121453 2\\r\\n15125061 4\\r\\n669569 6\\r\\n', 'output': ['1095537357']}, {'input': '10 20\\r\\n1 7\\r\\n1 7\\r\\n1 8\\r\\n1 3\\r\\n1 10\\r\\n1 7\\r\\n1 7\\r\\n1 9\\r\\n1 3\\r\\n1 1\\r\\n1 2\\r\\n1 1\\r\\n1 3\\r\\n1 10\\r\\n1 9\\r\\n1 8\\r\\n1 8\\r\\n1 6\\r\\n1 7\\r\\n1 5\\r\\n', 'output': ['83']}, {'input': '10000000 20\\r\\n4594 7\\r\\n520836 8\\r\\n294766 6\\r\\n298672 4\\r\\n142253 6\\r\\n450626 1\\r\\n1920034 9\\r\\n58282 4\\r\\n1043204 1\\r\\n683045 1\\r\\n1491746 5\\r\\n58420 4\\r\\n451217 2\\r\\n129423 4\\r\\n246113 5\\r\\n190612 8\\r\\n912923 6\\r\\n473153 6\\r\\n783733 6\\r\\n282411 10\\r\\n', 'output': ['54980855']}, {'input': '200000000 20\\r\\n15450824 5\\r\\n839717 10\\r\\n260084 8\\r\\n1140850 8\\r\\n28744 6\\r\\n675318 3\\r\\n25161 2\\r\\n5487 3\\r\\n6537698 9\\r\\n100000000 5\\r\\n7646970 9\\r\\n16489 6\\r\\n24627 3\\r\\n1009409 5\\r\\n22455 1\\r\\n25488456 4\\r\\n484528 9\\r\\n32663641 3\\r\\n750968 4\\r\\n5152 6\\r\\n', 'output': ['939368573']}, {'input': '200000000 20\\r\\n16896 2\\r\\n113 3\\r\\n277 2\\r\\n299 7\\r\\n69383562 2\\r\\n3929 8\\r\\n499366 4\\r\\n771846 5\\r\\n9 4\\r\\n1278173 7\\r\\n90 2\\r\\n54 7\\r\\n72199858 10\\r\\n17214 5\\r\\n3 10\\r\\n1981618 3\\r\\n3728 2\\r\\n141 8\\r\\n2013578 9\\r\\n51829246 5\\r\\n', 'output': ['1158946383']}, {'input': '200000000 20\\r\\n983125 2\\r\\n7453215 9\\r\\n9193588 2\\r\\n11558049 7\\r\\n28666199 1\\r\\n34362244 1\\r\\n5241493 5\\r\\n15451270 4\\r\\n19945845 8\\r\\n6208681 3\\r\\n38300385 7\\r\\n6441209 8\\r\\n21046742 7\\r\\n577198 10\\r\\n3826434 8\\r\\n9764276 8\\r\\n6264675 7\\r\\n8567063 3\\r\\n3610303 4\\r\\n2908232 3\\r\\n', 'output': ['1131379312']}, {'input': '10 15\\r\\n1 6\\r\\n2 6\\r\\n3 4\\r\\n1 3\\r\\n1 2\\r\\n1 5\\r\\n1 6\\r\\n1 2\\r\\n2 9\\r\\n1 10\\r\\n1 3\\r\\n1 7\\r\\n1 8\\r\\n1 2\\r\\n2 9\\r\\n', 'output': ['79']}, {'input': '10000000 15\\r\\n111 5\\r\\n914124 3\\r\\n3 9\\r\\n177790 1\\r\\n2352 3\\r\\n32138 9\\r\\n104477 1\\r\\n1223 4\\r\\n18 6\\r\\n6655580 4\\r\\n57643 10\\r\\n94309 2\\r\\n37 1\\r\\n227002 10\\r\\n1733193 7\\r\\n', 'output': ['45116295']}, {'input': '200000000 15\\r\\n7069868 1\\r\\n5567826 8\\r\\n2310059 10\\r\\n13539782 7\\r\\n38420939 4\\r\\n29911411 8\\r\\n52256316 1\\r\\n12265839 9\\r\\n2074265 1\\r\\n24896428 9\\r\\n72470695 5\\r\\n3236301 1\\r\\n3890243 2\\r\\n65168965 8\\r\\n65724 6\\r\\n', 'output': ['1489289257']}, {'input': '200000000 15\\r\\n12044094 7\\r\\n2475138 10\\r\\n944451 7\\r\\n4854766 2\\r\\n3809145 10\\r\\n7727571 2\\r\\n43908937 6\\r\\n2745883 1\\r\\n427511 2\\r\\n100000000 5\\r\\n190914 6\\r\\n554889 3\\r\\n288798 4\\r\\n1848572 5\\r\\n893874 3\\r\\n', 'output': ['961871671']}, {'input': '200000000 15\\r\\n6334191 7\\r\\n1927941 4\\r\\n5175933 10\\r\\n468389 1\\r\\n433043 10\\r\\n6863198 5\\r\\n7480646 4\\r\\n14774279 10\\r\\n2921129 8\\r\\n18325627 7\\r\\n6973152 9\\r\\n8277324 9\\r\\n21522856 2\\r\\n2058070 1\\r\\n2444742 4\\r\\n', 'output': ['664376069']}]", "source_code": "import java.io.InputStreamReader;\nimport static java.util.stream.Collectors.joining;\nimport static java.util.stream.Collectors.toList;\nimport static java.util.stream.Stream.of;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.IntStream;\n\n/**\n *\n * @author Amr_Naser\n */\npublic class HelloWorld {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        try(var br = new java.io.BufferedReader(new java.io.InputStreamReader(System.in))){\n            var line1 = br.readLine();\n            var parts = line1.split(\" \");\n            var n = Integer.valueOf(parts[0]);\n            var m = Integer.valueOf(parts[1]);\n            var matchboxes = new int[m][2];\n            for(var i = 0;i < m; i++){\n                matchboxes[i] = of(br.readLine().split(\" \")).mapToInt(Integer::valueOf).toArray();\n            }\n            var maxIndex = new int[m];\n            var max = 0;\n            var index = 0;\n            for(var j = 0; j < n; j++){\n                max = 0;\n                index = 0;\n                for(var k = 0;k < m;k++){\n                    if(matchboxes[k][1] > max){\n                        max = matchboxes[k][1];\n                        index = k;\n                    }\n                }\n                matchboxes[k][1] = 0;\n                maxIndex[j] = index;\n            }\n            for(var k = n - 1; k >= 0 ; k--){\n                if(matchboxes[maxIndex[k]][0] <= (n - k)){\n                    System.out.print(matchboxes[maxIndex[k]][1] + \" \");\n                }else{\n                    System.out.print((matchboxes[maxIndex[k]][0] - (n - k)) + \" \");\n                }\n            }\n        }\n    }\n}\n"}
{"src_uid": "c052d85e402691b05e494b5283d62679", "id": 83, "lang_cluster": "java", "lang": "Java 11", "difficulty": 900, "testcases": "[{'input': '7 3\\r\\n5 10\\r\\n2 5\\r\\n3 6\\r\\n', 'output': ['62']}, {'input': '3 3\\r\\n1 3\\r\\n2 2\\r\\n3 1\\r\\n', 'output': ['7']}, {'input': '1 1\\r\\n1 2\\r\\n', 'output': ['2']}, {'input': '1 2\\r\\n1 9\\r\\n1 6\\r\\n', 'output': ['9']}, {'input': '1 10\\r\\n1 1\\r\\n1 9\\r\\n1 3\\r\\n1 9\\r\\n1 7\\r\\n1 10\\r\\n1 4\\r\\n1 7\\r\\n1 3\\r\\n1 1\\r\\n', 'output': ['10']}, {'input': '2 1\\r\\n2 1\\r\\n', 'output': ['2']}, {'input': '2 2\\r\\n2 4\\r\\n1 4\\r\\n', 'output': ['8']}, {'input': '2 3\\r\\n1 7\\r\\n1 2\\r\\n1 5\\r\\n', 'output': ['12']}, {'input': '4 1\\r\\n2 2\\r\\n', 'output': ['4']}, {'input': '4 2\\r\\n1 10\\r\\n4 4\\r\\n', 'output': ['22']}, {'input': '4 3\\r\\n1 4\\r\\n6 4\\r\\n1 7\\r\\n', 'output': ['19']}, {'input': '5 1\\r\\n10 5\\r\\n', 'output': ['25']}, {'input': '5 2\\r\\n3 9\\r\\n2 2\\r\\n', 'output': ['31']}, {'input': '5 5\\r\\n2 9\\r\\n3 1\\r\\n2 1\\r\\n1 8\\r\\n2 8\\r\\n', 'output': ['42']}, {'input': '5 10\\r\\n1 3\\r\\n1 2\\r\\n1 9\\r\\n1 10\\r\\n1 1\\r\\n1 5\\r\\n1 10\\r\\n1 2\\r\\n1 3\\r\\n1 7\\r\\n', 'output': ['41']}, {'input': '10 1\\r\\n9 4\\r\\n', 'output': ['36']}, {'input': '10 2\\r\\n14 3\\r\\n1 3\\r\\n', 'output': ['30']}, {'input': '10 7\\r\\n4 8\\r\\n1 10\\r\\n1 10\\r\\n1 2\\r\\n3 3\\r\\n1 3\\r\\n1 10\\r\\n', 'output': ['71']}, {'input': '10 10\\r\\n1 8\\r\\n2 10\\r\\n1 9\\r\\n1 1\\r\\n1 9\\r\\n1 6\\r\\n1 4\\r\\n2 5\\r\\n1 2\\r\\n1 4\\r\\n', 'output': ['70']}, {'input': '10 4\\r\\n1 5\\r\\n5 2\\r\\n1 9\\r\\n3 3\\r\\n', 'output': ['33']}, {'input': '100 5\\r\\n78 6\\r\\n29 10\\r\\n3 6\\r\\n7 3\\r\\n2 4\\r\\n', 'output': ['716']}, {'input': '1000 7\\r\\n102 10\\r\\n23 6\\r\\n79 4\\r\\n48 1\\r\\n34 10\\r\\n839 8\\r\\n38 4\\r\\n', 'output': ['8218']}, {'input': '10000 10\\r\\n336 2\\r\\n2782 5\\r\\n430 10\\r\\n1893 7\\r\\n3989 10\\r\\n2593 8\\r\\n165 6\\r\\n1029 2\\r\\n2097 4\\r\\n178 10\\r\\n', 'output': ['84715']}, {'input': '100000 3\\r\\n2975 2\\r\\n35046 4\\r\\n61979 9\\r\\n', 'output': ['703945']}, {'input': '1000000 4\\r\\n314183 9\\r\\n304213 4\\r\\n16864 5\\r\\n641358 9\\r\\n', 'output': ['8794569']}, {'input': '10000000 10\\r\\n360313 10\\r\\n416076 1\\r\\n435445 9\\r\\n940322 7\\r\\n1647581 7\\r\\n4356968 10\\r\\n3589256 2\\r\\n2967933 5\\r\\n2747504 7\\r\\n1151633 3\\r\\n', 'output': ['85022733']}, {'input': '100000000 7\\r\\n32844337 7\\r\\n11210848 7\\r\\n47655987 1\\r\\n33900472 4\\r\\n9174763 2\\r\\n32228738 10\\r\\n29947408 5\\r\\n', 'output': ['749254060']}, {'input': '200000000 10\\r\\n27953106 7\\r\\n43325979 4\\r\\n4709522 1\\r\\n10975786 4\\r\\n67786538 8\\r\\n48901838 7\\r\\n15606185 6\\r\\n2747583 1\\r\\n100000000 1\\r\\n633331 3\\r\\n', 'output': ['1332923354']}, {'input': '200000000 9\\r\\n17463897 9\\r\\n79520463 1\\r\\n162407 4\\r\\n41017993 8\\r\\n71054118 4\\r\\n9447587 2\\r\\n5298038 9\\r\\n3674560 7\\r\\n20539314 5\\r\\n', 'output': ['996523209']}, {'input': '200000000 8\\r\\n6312706 6\\r\\n2920548 2\\r\\n16843192 3\\r\\n1501141 2\\r\\n13394704 6\\r\\n10047725 10\\r\\n4547663 6\\r\\n54268518 6\\r\\n', 'output': ['630991750']}, {'input': '200000000 7\\r\\n25621043 2\\r\\n21865270 1\\r\\n28833034 1\\r\\n22185073 5\\r\\n100000000 2\\r\\n13891017 9\\r\\n61298710 8\\r\\n', 'output': ['931584598']}, {'input': '200000000 6\\r\\n7465600 6\\r\\n8453505 10\\r\\n4572014 8\\r\\n8899499 3\\r\\n86805622 10\\r\\n64439238 6\\r\\n', 'output': ['1447294907']}, {'input': '200000000 5\\r\\n44608415 6\\r\\n100000000 9\\r\\n51483223 9\\r\\n44136047 1\\r\\n52718517 1\\r\\n', 'output': ['1634907859']}, {'input': '200000000 4\\r\\n37758556 10\\r\\n100000000 6\\r\\n48268521 3\\r\\n20148178 10\\r\\n', 'output': ['1305347138']}, {'input': '200000000 3\\r\\n65170000 7\\r\\n20790088 1\\r\\n74616133 4\\r\\n', 'output': ['775444620']}, {'input': '200000000 2\\r\\n11823018 6\\r\\n100000000 9\\r\\n', 'output': ['970938108']}, {'input': '200000000 1\\r\\n100000000 6\\r\\n', 'output': ['600000000']}, {'input': '200000000 10\\r\\n12097724 9\\r\\n41745972 5\\r\\n26982098 9\\r\\n14916995 7\\r\\n21549986 7\\r\\n3786630 9\\r\\n8050858 7\\r\\n27994924 4\\r\\n18345001 5\\r\\n8435339 5\\r\\n', 'output': ['1152034197']}, {'input': '200000000 10\\r\\n55649 8\\r\\n10980981 9\\r\\n3192542 8\\r\\n94994808 4\\r\\n3626106 1\\r\\n100000000 6\\r\\n5260110 9\\r\\n4121453 2\\r\\n15125061 4\\r\\n669569 6\\r\\n', 'output': ['1095537357']}, {'input': '10 20\\r\\n1 7\\r\\n1 7\\r\\n1 8\\r\\n1 3\\r\\n1 10\\r\\n1 7\\r\\n1 7\\r\\n1 9\\r\\n1 3\\r\\n1 1\\r\\n1 2\\r\\n1 1\\r\\n1 3\\r\\n1 10\\r\\n1 9\\r\\n1 8\\r\\n1 8\\r\\n1 6\\r\\n1 7\\r\\n1 5\\r\\n', 'output': ['83']}, {'input': '10000000 20\\r\\n4594 7\\r\\n520836 8\\r\\n294766 6\\r\\n298672 4\\r\\n142253 6\\r\\n450626 1\\r\\n1920034 9\\r\\n58282 4\\r\\n1043204 1\\r\\n683045 1\\r\\n1491746 5\\r\\n58420 4\\r\\n451217 2\\r\\n129423 4\\r\\n246113 5\\r\\n190612 8\\r\\n912923 6\\r\\n473153 6\\r\\n783733 6\\r\\n282411 10\\r\\n', 'output': ['54980855']}, {'input': '200000000 20\\r\\n15450824 5\\r\\n839717 10\\r\\n260084 8\\r\\n1140850 8\\r\\n28744 6\\r\\n675318 3\\r\\n25161 2\\r\\n5487 3\\r\\n6537698 9\\r\\n100000000 5\\r\\n7646970 9\\r\\n16489 6\\r\\n24627 3\\r\\n1009409 5\\r\\n22455 1\\r\\n25488456 4\\r\\n484528 9\\r\\n32663641 3\\r\\n750968 4\\r\\n5152 6\\r\\n', 'output': ['939368573']}, {'input': '200000000 20\\r\\n16896 2\\r\\n113 3\\r\\n277 2\\r\\n299 7\\r\\n69383562 2\\r\\n3929 8\\r\\n499366 4\\r\\n771846 5\\r\\n9 4\\r\\n1278173 7\\r\\n90 2\\r\\n54 7\\r\\n72199858 10\\r\\n17214 5\\r\\n3 10\\r\\n1981618 3\\r\\n3728 2\\r\\n141 8\\r\\n2013578 9\\r\\n51829246 5\\r\\n', 'output': ['1158946383']}, {'input': '200000000 20\\r\\n983125 2\\r\\n7453215 9\\r\\n9193588 2\\r\\n11558049 7\\r\\n28666199 1\\r\\n34362244 1\\r\\n5241493 5\\r\\n15451270 4\\r\\n19945845 8\\r\\n6208681 3\\r\\n38300385 7\\r\\n6441209 8\\r\\n21046742 7\\r\\n577198 10\\r\\n3826434 8\\r\\n9764276 8\\r\\n6264675 7\\r\\n8567063 3\\r\\n3610303 4\\r\\n2908232 3\\r\\n', 'output': ['1131379312']}, {'input': '10 15\\r\\n1 6\\r\\n2 6\\r\\n3 4\\r\\n1 3\\r\\n1 2\\r\\n1 5\\r\\n1 6\\r\\n1 2\\r\\n2 9\\r\\n1 10\\r\\n1 3\\r\\n1 7\\r\\n1 8\\r\\n1 2\\r\\n2 9\\r\\n', 'output': ['79']}, {'input': '10000000 15\\r\\n111 5\\r\\n914124 3\\r\\n3 9\\r\\n177790 1\\r\\n2352 3\\r\\n32138 9\\r\\n104477 1\\r\\n1223 4\\r\\n18 6\\r\\n6655580 4\\r\\n57643 10\\r\\n94309 2\\r\\n37 1\\r\\n227002 10\\r\\n1733193 7\\r\\n', 'output': ['45116295']}, {'input': '200000000 15\\r\\n7069868 1\\r\\n5567826 8\\r\\n2310059 10\\r\\n13539782 7\\r\\n38420939 4\\r\\n29911411 8\\r\\n52256316 1\\r\\n12265839 9\\r\\n2074265 1\\r\\n24896428 9\\r\\n72470695 5\\r\\n3236301 1\\r\\n3890243 2\\r\\n65168965 8\\r\\n65724 6\\r\\n', 'output': ['1489289257']}, {'input': '200000000 15\\r\\n12044094 7\\r\\n2475138 10\\r\\n944451 7\\r\\n4854766 2\\r\\n3809145 10\\r\\n7727571 2\\r\\n43908937 6\\r\\n2745883 1\\r\\n427511 2\\r\\n100000000 5\\r\\n190914 6\\r\\n554889 3\\r\\n288798 4\\r\\n1848572 5\\r\\n893874 3\\r\\n', 'output': ['961871671']}, {'input': '200000000 15\\r\\n6334191 7\\r\\n1927941 4\\r\\n5175933 10\\r\\n468389 1\\r\\n433043 10\\r\\n6863198 5\\r\\n7480646 4\\r\\n14774279 10\\r\\n2921129 8\\r\\n18325627 7\\r\\n6973152 9\\r\\n8277324 9\\r\\n21522856 2\\r\\n2058070 1\\r\\n2444742 4\\r\\n', 'output': ['664376069']}]", "source_code": "import java.util.*;\npublic class HelloWorld {\n\t\n    \n    \n\tpublic static void main(String []args){\n\t\tFastScanner scanner = new FastScanner();\n\t\tint n = scanner.nextInt(), m = scanner.nextInt();\n\t\tint arr[][] = new int[m][2];\n\t\tint box[][] = new int[m][2];\n\t\tfor(int i=0 ; i<m ; i++){\n\t\t\tfor(int j=0 ; j<2 ; j++){\n\t\t\t\tarr[i][j] = scanner.nextInt();\n\t\t\t}\n\t\t}\n\t\tfor(int i=0 ; i<m ; i++){\n\t\t\tbox[i][0] = arr[i][0];\n\t\t\tbox[i][1] = arr[i][1];\n\t\t}\n\t\tint max = Integer.MIN_VALUE;\n\t\tint matchboxes = 0;\n\t\tint matches = 0;\n\t\twhile( n > 0){\n\t\t\tmax = Integer.MIN_VALUE;\n\t\t\tfor(int i=0 ; i<m ; i++){\n\t\t\t\tif( box[i][0] > max){\n\t\t\t\t\tmax = box[i][0];\n\t\t\t\t\tmatches = box[i][1];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( n >= max){\n\t\t\t\tmatchboxes = matchboxes + max ;\n\t\t\t\tn = n - max;\n\t\t\t\tfor(int i=0 ; i<m ; i++){\n\t\t\t\t\tif( box[i][0] == max){\n\t\t\t\t\t\tbox[i][0] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmatchboxes = matchboxes + n ;\n\t\t\t\tn = 0;\n\t\t\t}\n\t\t\tmatches = matches - (matchboxes/n) ;\n\t\t\t\n\t\t}\n\t\tSystem.out.println(matches);\n\t}\n    private static interface FastScanner{\n\t\tString next() throws Exception ;\n\t\tdefault double nextDouble() throws Exception { return Double.parseDouble(next()) ; }\n\t\tdefault long nextLong() throws Exception { return Long.parseLong(next()) ; }\n\t\tdefault int nextInt() throws Exception { return Integer.parseInt(next()) ; }\n\t\tdefault int nextInt(int max) throws Exception { return Integer.parseInt(next()) > max? max : Integer.parseInt(next()); }\n\t\tdefault long nextLong(long max) throws Exception { return Long.parseLong(next()) > max? max : Long.parseLong(next()); }\n\t\tdefault double nextDouble(double max) throws Exception { return Double.parseDouble(next()) > max? max : Double.parseDouble(next()); }\n\t}\n    private static class Console implements FastScanner {\n        private final InputStream inStream = System.in;\n        private final InputStreamReader reader = new InputStreamReader(inStream);\n        private final BufferedReader buffer = new BufferedReader(reader);\n\n        private StringTokenizer st;\n\n        private void updateSt() throws Exception {\n            st = new StringTokenizer(buffer.readLine());\n        }\n\n        @Override\n        public void close() throws Exception {\n            reader.close();\n        }\n\n        @Override\n        public String next() throws Exception {\n            if (st == null ||!st.hasMoreTokens())\n                updateSt();\n            return st.nextToken();\n        }\n    }\n    private static class Scanner implements FastScanner {\n        private final StringTokenizer st;\n\n        private Scanner(String fileName) throws Exception {\n            File file = new File(fileName);\n            FileInputStream fin = new FileInputStream(file);\n            Scanner.this.st = new StringTokenizer(new InputStreamReader(fin));\n        }\n\n        @Override\n        public void close() throws Exception {\n            this.st.close();\n        }\n\n        @Override\n        public String next() throws Exception {\n            return st.nextToken();\n        }\n    }\n}\n"}
{"src_uid": "930be5ec102fbe062062aa23eac75187", "id": 84, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '4\\r\\n1 2 2 -4\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n1 2 3 1 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '1\\r\\n28\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2\\r\\n-28 12\\r\\n', 'output': ['12\\r\\n']}, {'input': '3\\r\\n-83 40 -80\\r\\n', 'output': ['-80\\r\\n']}, {'input': '8\\r\\n93 77 -92 26 21 -48 53 91\\r\\n', 'output': ['-48\\r\\n']}, {'input': '20\\r\\n-72 -9 -86 80 7 -10 40 -27 -94 92 96 56 28 -19 79 36 -3 -73 -63 -49\\r\\n', 'output': ['-86\\r\\n']}, {'input': '49\\r\\n-74 -100 -80 23 -8 -83 -41 -20 48 17 46 -73 -55 67 85 4 40 -60 -69 -75 56 -74 -42 93 74 -95 64 -46 97 -47 55 0 -78 -34 -31 40 -63 -49 -76 48 21 -1 -49 -29 -98 -11 76 26 94\\r\\n', 'output': ['-98\\r\\n']}, {'input': '88\\r\\n63 48 1 -53 -89 -49 64 -70 -49 71 -17 -16 76 81 -26 -50 67 -59 -56 97 2 100 14 18 -91 -80 42 92 -25 -88 59 8 -56 38 48 -71 -78 24 -14 48 -1 69 73 -76 54 16 -92 44 47 33 -34 -17 -81 21 -59 -61 53 26 10 -76 67 35 -29 70 65 -13 -29 81 80 32 74 -6 34 46 57 1 -45 -55 69 79 -58 11 -2 22 -18 -16 -89 -46\\r\\n', 'output': ['-91\\r\\n']}, {'input': '100\\r\\n34 32 88 20 76 53 -71 -39 -98 -10 57 37 63 -3 -54 -64 -78 -82 73 20 -30 -4 22 75 51 -64 -91 29 -52 -48 83 19 18 -47 46 57 -44 95 89 89 -30 84 -83 67 58 -99 -90 -53 92 -60 -5 -56 -61 27 68 -48 52 -95 64 -48 -30 -67 66 89 14 -33 -31 -91 39 7 -94 -54 92 -96 -99 -83 -16 91 -28 -66 81 44 14 -85 -21 18 40 16 -13 -82 -33 47 -10 -40 -19 10 25 60 -34 -89\\r\\n', 'output': ['-98\\r\\n']}, {'input': '2\\r\\n-1 -1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n-2 -2 -2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '100\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '100\\r\\n100 100 100 100 100 100 100 100 100 100 100 100 -100 100 100 100 100 100 100 100 100 100 100 100 -100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 -100 100 100 100 100 100 100 100 100 100 100 -100 100 100 100 100 -100 100 100 100 100 100 100 100 100 100 100 100\\r\\n', 'output': ['100\\r\\n']}, {'input': '10\\r\\n40 71 -85 -85 40 -85 -85 64 -85 47\\r\\n', 'output': ['40\\r\\n']}, {'input': '23\\r\\n-90 -90 -41 -64 -64 -90 -15 10 -43 -90 -64 -64 89 -64 36 47 38 -90 -64 -90 -90 68 -90\\r\\n', 'output': ['-64\\r\\n']}, {'input': '39\\r\\n-97 -93 -42 -93 -97 -93 56 -97 -97 -97 76 -33 -60 91 7 82 17 47 -97 -97 -93 73 -97 12 -97 -97 -97 -97 56 -92 -83 -93 -93 49 -93 -97 -97 -17 -93\\r\\n', 'output': ['-93\\r\\n']}, {'input': '51\\r\\n-21 6 -35 -98 -86 -98 -86 -43 -65 32 -98 -40 96 -98 -98 -98 -98 -86 -86 -98 56 -86 -98 -98 -30 -98 -86 -31 -98 -86 -86 -86 -86 -30 96 -86 -86 -86 -60 25 88 -86 -86 58 31 -47 57 -86 37 44 -83\\r\\n', 'output': ['-86\\r\\n']}, {'input': '66\\r\\n-14 -95 65 -95 -95 -97 -90 -71 -97 -97 70 -95 -95 -97 -95 -27 35 -87 -95 -5 -97 -97 87 34 -49 -95 -97 -95 -97 -95 -30 -95 -97 47 -95 -17 -97 -95 -97 -69 51 -97 -97 -95 -75 87 59 21 63 56 76 -91 98 -97 6 -97 -95 -95 -97 -73 11 -97 -35 -95 -95 -43\\r\\n', 'output': ['-95\\r\\n']}, {'input': '77\\r\\n-67 -93 -93 -92 97 29 93 -93 -93 -5 -93 -7 60 -92 -93 44 -84 68 -92 -93 69 -92 -37 56 43 -93 35 -92 -93 19 -79 18 -92 -93 -93 -37 -93 -47 -93 -92 -92 74 67 19 40 -92 -92 -92 -92 -93 -93 -41 -93 -92 -93 -93 -92 -93 51 -80 6 -42 -92 -92 -66 -12 -92 -92 -3 93 -92 -49 -93 40 62 -92 -92\\r\\n', 'output': ['-92\\r\\n']}, {'input': '89\\r\\n-98 40 16 -87 -98 63 -100 55 -96 -98 -21 -100 -93 26 -98 -98 -100 -89 -98 -5 -65 -28 -100 -6 -66 67 -100 -98 -98 10 -98 -98 -70 7 -98 2 -100 -100 -98 25 -100 -100 -98 23 -68 -100 -98 3 98 -100 -98 -98 -98 -98 -24 -100 -100 -9 -98 35 -100 99 -5 -98 -100 -100 37 -100 -84 57 -98 40 -47 -100 -1 -92 -76 -98 -98 -100 -100 -100 -63 30 21 -100 -100 -100 -12\\r\\n', 'output': ['-98\\r\\n']}, {'input': '99\\r\\n10 -84 -100 -100 73 -64 -100 -94 33 -100 -100 -100 -100 71 64 24 7 -100 -32 -100 -100 77 -100 62 -12 55 45 -100 -100 -80 -100 -100 -100 -100 -100 -100 -100 -100 -100 -39 -48 -100 -34 47 -100 -100 -100 -100 -100 -77 -100 -100 -100 -100 -100 -100 -52 40 -55 -100 -44 -100 72 33 70 -100 -100 -78 -100 -3 100 -77 22 -100 95 -30 -100 10 -69 -100 -100 -100 -100 52 -39 -100 -100 -100 7 -100 -98 -66 95 -17 -100 52 -100 68 -100\\r\\n', 'output': ['-98\\r\\n']}, {'input': '100\\r\\n-99 -98 -64 89 53 57 -99 29 -78 18 -3 -54 76 -98 -99 -98 37 -98 19 -47 89 73 -98 -91 -99 -99 -98 -48 -99 22 -99 -98 -99 -99 -98 -60 84 67 -99 -98 20 -98 88 -98 46 -98 -99 -98 -99 -71 -99 -98 -98 -39 83 95 -98 63 -98 -99 32 -98 -99 -64 57 -30 -53 -83 -4 -99 58 20 -98 -10 -99 -44 -99 -99 -99 -99 75 34 -98 -52 -98 -30 -98 -99 -98 -98 51 -99 -99 -99 -98 -99 -99 -82 -90 92\\r\\n', 'output': ['-98\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n1 3 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n2 1 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n2 3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n3 1 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n3 2 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '9\\r\\n99 99 99 99 100 100 100 100 100\\r\\n', 'output': ['100\\r\\n']}, {'input': '5\\r\\n-100 -100 -100 -100 -100\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Solution implements Runnable {\n    private void solve() throws IOException {\n        int n = reader.nextInt();\n        int arr[] = new int[n];\n        for (int i = 0 ; i < n ; i++)\n            arr[i] = reader.nextInt();\n\n        int val = 0 ;\n        for (int i = 0 ; i < n ; i++) {\n            for (int j = 0 ; j < i ; j++) {\n                if (arr[i] < arr[j]) {\n                    val = arr[i] ;\n                    arr[i] = arr[j];\n                    arr[j] = val ;\n                }\n            }\n        }\n\n        int count = 0 ;\n        val = 0 ;\n        for (int i = 1 ; i < n ; i++) {\n            if (arr[i-1]!= arr[i]) {\n                count ++ ;\n                val = arr[i] ;\n            }\n        }\n\n        if (count >= 2) {\n            writer.print(val + \"\\n\");\n        } else {\n            writer.print(\"NO\\n\");\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        try (Input reader = new StandardInput(); PrintWriter writer = new PrintWriter(System.out)) {\n            new Solution().run();\n        }\n    }\n\n    StandardInput reader;\n    PrintWriter writer;\n\n    @Override\n    public void run() {\n        try {\n            reader = new StandardInput();\n            writer = new PrintWriter(System.out);\n            solve();\n            reader.close();\n            writer.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    interface Input extends Closeable {\n        String next() throws IOException;\n        default int nextInt() throws IOException {\n            return Integer.parseInt(next());\n        }\n        default long nextLong() throws IOException {\n            return Long.parseLong(next());\n        }\n        default double nextDouble() throws IOException {\n            return Double.parseDouble(next());\n        }\n        default int[] readIntArray() throws IOException {\n            return readIntArray(nextInt());\n        }\n        default int[] readIntArray(int size) throws IOException {\n            int[] array = new int[size];\n            for (int i = 0 ; i < array.length ; i++)\n                array[i] = nextInt();\n            return array;\n        }\n        default long[] readLongArray(int size) throws IOException {\n            long[] array = new long[size];\n            for (int i = 0 ; i < array.length ; i++)\n                array[i] = nextLong();\n            return array;\n        }\n    }\n\n    private static class StandardInput implements Input {\n        private final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        private StringTokenizer tokenizer;\n\n        private StandardInput() {\n            try {\n                tokenizer = reader.skip(Integer.MAX_VALUE).tokenize();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        public void close() throws IOException {\n            reader.close();\n        }\n\n        @Override\n        public String next() throws IOException {\n            if (tokenizer == null)\n                throw new NoSuchElementException();\n            return tokenizer.nextToken();\n        }\n    }\n}\n"}
{"src_uid": "930be5ec102fbe062062aa23eac75187", "id": 84, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '4\\r\\n1 2 2 -4\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n1 2 3 1 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '1\\r\\n28\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2\\r\\n-28 12\\r\\n', 'output': ['12\\r\\n']}, {'input': '3\\r\\n-83 40 -80\\r\\n', 'output': ['-80\\r\\n']}, {'input': '8\\r\\n93 77 -92 26 21 -48 53 91\\r\\n', 'output': ['-48\\r\\n']}, {'input': '20\\r\\n-72 -9 -86 80 7 -10 40 -27 -94 92 96 56 28 -19 79 36 -3 -73 -63 -49\\r\\n', 'output': ['-86\\r\\n']}, {'input': '49\\r\\n-74 -100 -80 23 -8 -83 -41 -20 48 17 46 -73 -55 67 85 4 40 -60 -69 -75 56 -74 -42 93 74 -95 64 -46 97 -47 55 0 -78 -34 -31 40 -63 -49 -76 48 21 -1 -49 -29 -98 -11 76 26 94\\r\\n', 'output': ['-98\\r\\n']}, {'input': '88\\r\\n63 48 1 -53 -89 -49 64 -70 -49 71 -17 -16 76 81 -26 -50 67 -59 -56 97 2 100 14 18 -91 -80 42 92 -25 -88 59 8 -56 38 48 -71 -78 24 -14 48 -1 69 73 -76 54 16 -92 44 47 33 -34 -17 -81 21 -59 -61 53 26 10 -76 67 35 -29 70 65 -13 -29 81 80 32 74 -6 34 46 57 1 -45 -55 69 79 -58 11 -2 22 -18 -16 -89 -46\\r\\n', 'output': ['-91\\r\\n']}, {'input': '100\\r\\n34 32 88 20 76 53 -71 -39 -98 -10 57 37 63 -3 -54 -64 -78 -82 73 20 -30 -4 22 75 51 -64 -91 29 -52 -48 83 19 18 -47 46 57 -44 95 89 89 -30 84 -83 67 58 -99 -90 -53 92 -60 -5 -56 -61 27 68 -48 52 -95 64 -48 -30 -67 66 89 14 -33 -31 -91 39 7 -94 -54 92 -96 -99 -83 -16 91 -28 -66 81 44 14 -85 -21 18 40 16 -13 -82 -33 47 -10 -40 -19 10 25 60 -34 -89\\r\\n', 'output': ['-98\\r\\n']}, {'input': '2\\r\\n-1 -1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n-2 -2 -2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '100\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '100\\r\\n100 100 100 100 100 100 100 100 100 100 100 100 -100 100 100 100 100 100 100 100 100 100 100 100 -100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 -100 100 100 100 100 100 100 100 100 100 100 -100 100 100 100 100 -100 100 100 100 100 100 100 100 100 100 100 100\\r\\n', 'output': ['100\\r\\n']}, {'input': '10\\r\\n40 71 -85 -85 40 -85 -85 64 -85 47\\r\\n', 'output': ['40\\r\\n']}, {'input': '23\\r\\n-90 -90 -41 -64 -64 -90 -15 10 -43 -90 -64 -64 89 -64 36 47 38 -90 -64 -90 -90 68 -90\\r\\n', 'output': ['-64\\r\\n']}, {'input': '39\\r\\n-97 -93 -42 -93 -97 -93 56 -97 -97 -97 76 -33 -60 91 7 82 17 47 -97 -97 -93 73 -97 12 -97 -97 -97 -97 56 -92 -83 -93 -93 49 -93 -97 -97 -17 -93\\r\\n', 'output': ['-93\\r\\n']}, {'input': '51\\r\\n-21 6 -35 -98 -86 -98 -86 -43 -65 32 -98 -40 96 -98 -98 -98 -98 -86 -86 -98 56 -86 -98 -98 -30 -98 -86 -31 -98 -86 -86 -86 -86 -30 96 -86 -86 -86 -60 25 88 -86 -86 58 31 -47 57 -86 37 44 -83\\r\\n', 'output': ['-86\\r\\n']}, {'input': '66\\r\\n-14 -95 65 -95 -95 -97 -90 -71 -97 -97 70 -95 -95 -97 -95 -27 35 -87 -95 -5 -97 -97 87 34 -49 -95 -97 -95 -97 -95 -30 -95 -97 47 -95 -17 -97 -95 -97 -69 51 -97 -97 -95 -75 87 59 21 63 56 76 -91 98 -97 6 -97 -95 -95 -97 -73 11 -97 -35 -95 -95 -43\\r\\n', 'output': ['-95\\r\\n']}, {'input': '77\\r\\n-67 -93 -93 -92 97 29 93 -93 -93 -5 -93 -7 60 -92 -93 44 -84 68 -92 -93 69 -92 -37 56 43 -93 35 -92 -93 19 -79 18 -92 -93 -93 -37 -93 -47 -93 -92 -92 74 67 19 40 -92 -92 -92 -92 -93 -93 -41 -93 -92 -93 -93 -92 -93 51 -80 6 -42 -92 -92 -66 -12 -92 -92 -3 93 -92 -49 -93 40 62 -92 -92\\r\\n', 'output': ['-92\\r\\n']}, {'input': '89\\r\\n-98 40 16 -87 -98 63 -100 55 -96 -98 -21 -100 -93 26 -98 -98 -100 -89 -98 -5 -65 -28 -100 -6 -66 67 -100 -98 -98 10 -98 -98 -70 7 -98 2 -100 -100 -98 25 -100 -100 -98 23 -68 -100 -98 3 98 -100 -98 -98 -98 -98 -24 -100 -100 -9 -98 35 -100 99 -5 -98 -100 -100 37 -100 -84 57 -98 40 -47 -100 -1 -92 -76 -98 -98 -100 -100 -100 -63 30 21 -100 -100 -100 -12\\r\\n', 'output': ['-98\\r\\n']}, {'input': '99\\r\\n10 -84 -100 -100 73 -64 -100 -94 33 -100 -100 -100 -100 71 64 24 7 -100 -32 -100 -100 77 -100 62 -12 55 45 -100 -100 -80 -100 -100 -100 -100 -100 -100 -100 -100 -100 -39 -48 -100 -34 47 -100 -100 -100 -100 -100 -77 -100 -100 -100 -100 -100 -100 -52 40 -55 -100 -44 -100 72 33 70 -100 -100 -78 -100 -3 100 -77 22 -100 95 -30 -100 10 -69 -100 -100 -100 -100 52 -39 -100 -100 -100 7 -100 -98 -66 95 -17 -100 52 -100 68 -100\\r\\n', 'output': ['-98\\r\\n']}, {'input': '100\\r\\n-99 -98 -64 89 53 57 -99 29 -78 18 -3 -54 76 -98 -99 -98 37 -98 19 -47 89 73 -98 -91 -99 -99 -98 -48 -99 22 -99 -98 -99 -99 -98 -60 84 67 -99 -98 20 -98 88 -98 46 -98 -99 -98 -99 -71 -99 -98 -98 -39 83 95 -98 63 -98 -99 32 -98 -99 -64 57 -30 -53 -83 -4 -99 58 20 -98 -10 -99 -44 -99 -99 -99 -99 75 34 -98 -52 -98 -30 -98 -99 -98 -98 51 -99 -99 -99 -98 -99 -99 -82 -90 92\\r\\n', 'output': ['-98\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n1 3 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n2 1 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n2 3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n3 1 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n3 2 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '9\\r\\n99 99 99 99 100 100 100 100 100\\r\\n', 'output': ['100\\r\\n']}, {'input': '5\\r\\n-100 -100 -100 -100 -100\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.io.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tFastScanner scanner = new FastScanner();\n\t\tint N = scanner.nextInt();\n\t\tint[] A = new int[N];\n\t\tfor (int i = 0; i < N; ++i) {\n\t\t\tA[i] = scanner.nextInt();\n\t\t}\n\t\tint[] C = new int[N];\n\t\tArrays.fill(C, -1);\n\t\tint first = 0;\n\t\tfor (int i = 1; i < N; ++i) {\n\t\t\tif (A[i] < A[first]) {\n\t\t\t\tfirst = i;\n\t\t\t}\n\t\t\tif (C[A[i]] == -1 && i!= A[i]) {\n\t\t\t\tC[A[i]] = A[i];\n\t\t\t} else if (C[A[i]]!= -1 && A[i] < C[A[i]]) {\n\t\t\t\tC[A[i]] = A[i];\n\t\t\t} else {\n\t\t\t\tC[A[i]] = -1;\n\t\t\t}\n\t\t}\n\t\tif (C[A[first]]!= -1) {\n\t\t\tint second = C[A[first]];\n\t\t\tfor (int i = 0; i < N; ++i) {\n\t\t\t\tif (A[i] == second) {\n\t\t\t\t\tSystem.out.println(A[i + 1]);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tSystem.out.println(\"NO\");\n\t\t}\n\t}\n\t\n\tprivate static class FastScanner {\n\t\tprivate final InputStream in = System.in;\n\t\tprivate final DataInputStream din = new DataInputStream(in);\n\t\tprivate final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n\t\tprivate final OutputStreamWriter writer = new OutputStreamWriter(buffer);\n\t\tprivate final PrintWriter printWriter = new PrintWriter(writer);\n\t\tprivate StringTokenizer tokenizer;\n\t\t\n\t\tprivate void flush() {\n\t\t\tif (tokenizer!= null) {\n\t\t\t\ttokenizer.close();\n\t\t\t}\n\t\t\ttry {\n\t\t\t\twriter.flush();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic void close() {\n\t\t\tif (writer!= null) {\n\t\t\t\tflush();\n\t\t\t\ttry {\n\t\t\t\t\twriter.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (buffer!= null) {\n\t\t\t\ttry {\n\t\t\t\t\tbuffer.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic boolean hasNext() {\n\t\t\twhile (true) {\n\t\t\t\tif (tokenizer!= null && tokenizer.hasMoreTokens()) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else if (din.available() > 0) {\n\t\t\t\t\tbuffer.write(din.readByte());\n\t\t\t\t\tif (buffer.size() > 10000) {\n\t\t\t\t\t\tbuffer.write(32);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (buffer.size() == 0) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tflush();\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic String next() {\n\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\tif (tokenizer == null) tokenizer = new StringTokenizer(buffer.toString"}
{"src_uid": "930be5ec102fbe062062aa23eac75187", "id": 84, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '4\\r\\n1 2 2 -4\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n1 2 3 1 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '1\\r\\n28\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2\\r\\n-28 12\\r\\n', 'output': ['12\\r\\n']}, {'input': '3\\r\\n-83 40 -80\\r\\n', 'output': ['-80\\r\\n']}, {'input': '8\\r\\n93 77 -92 26 21 -48 53 91\\r\\n', 'output': ['-48\\r\\n']}, {'input': '20\\r\\n-72 -9 -86 80 7 -10 40 -27 -94 92 96 56 28 -19 79 36 -3 -73 -63 -49\\r\\n', 'output': ['-86\\r\\n']}, {'input': '49\\r\\n-74 -100 -80 23 -8 -83 -41 -20 48 17 46 -73 -55 67 85 4 40 -60 -69 -75 56 -74 -42 93 74 -95 64 -46 97 -47 55 0 -78 -34 -31 40 -63 -49 -76 48 21 -1 -49 -29 -98 -11 76 26 94\\r\\n', 'output': ['-98\\r\\n']}, {'input': '88\\r\\n63 48 1 -53 -89 -49 64 -70 -49 71 -17 -16 76 81 -26 -50 67 -59 -56 97 2 100 14 18 -91 -80 42 92 -25 -88 59 8 -56 38 48 -71 -78 24 -14 48 -1 69 73 -76 54 16 -92 44 47 33 -34 -17 -81 21 -59 -61 53 26 10 -76 67 35 -29 70 65 -13 -29 81 80 32 74 -6 34 46 57 1 -45 -55 69 79 -58 11 -2 22 -18 -16 -89 -46\\r\\n', 'output': ['-91\\r\\n']}, {'input': '100\\r\\n34 32 88 20 76 53 -71 -39 -98 -10 57 37 63 -3 -54 -64 -78 -82 73 20 -30 -4 22 75 51 -64 -91 29 -52 -48 83 19 18 -47 46 57 -44 95 89 89 -30 84 -83 67 58 -99 -90 -53 92 -60 -5 -56 -61 27 68 -48 52 -95 64 -48 -30 -67 66 89 14 -33 -31 -91 39 7 -94 -54 92 -96 -99 -83 -16 91 -28 -66 81 44 14 -85 -21 18 40 16 -13 -82 -33 47 -10 -40 -19 10 25 60 -34 -89\\r\\n', 'output': ['-98\\r\\n']}, {'input': '2\\r\\n-1 -1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n-2 -2 -2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '100\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '100\\r\\n100 100 100 100 100 100 100 100 100 100 100 100 -100 100 100 100 100 100 100 100 100 100 100 100 -100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 -100 100 100 100 100 100 100 100 100 100 100 -100 100 100 100 100 -100 100 100 100 100 100 100 100 100 100 100 100\\r\\n', 'output': ['100\\r\\n']}, {'input': '10\\r\\n40 71 -85 -85 40 -85 -85 64 -85 47\\r\\n', 'output': ['40\\r\\n']}, {'input': '23\\r\\n-90 -90 -41 -64 -64 -90 -15 10 -43 -90 -64 -64 89 -64 36 47 38 -90 -64 -90 -90 68 -90\\r\\n', 'output': ['-64\\r\\n']}, {'input': '39\\r\\n-97 -93 -42 -93 -97 -93 56 -97 -97 -97 76 -33 -60 91 7 82 17 47 -97 -97 -93 73 -97 12 -97 -97 -97 -97 56 -92 -83 -93 -93 49 -93 -97 -97 -17 -93\\r\\n', 'output': ['-93\\r\\n']}, {'input': '51\\r\\n-21 6 -35 -98 -86 -98 -86 -43 -65 32 -98 -40 96 -98 -98 -98 -98 -86 -86 -98 56 -86 -98 -98 -30 -98 -86 -31 -98 -86 -86 -86 -86 -30 96 -86 -86 -86 -60 25 88 -86 -86 58 31 -47 57 -86 37 44 -83\\r\\n', 'output': ['-86\\r\\n']}, {'input': '66\\r\\n-14 -95 65 -95 -95 -97 -90 -71 -97 -97 70 -95 -95 -97 -95 -27 35 -87 -95 -5 -97 -97 87 34 -49 -95 -97 -95 -97 -95 -30 -95 -97 47 -95 -17 -97 -95 -97 -69 51 -97 -97 -95 -75 87 59 21 63 56 76 -91 98 -97 6 -97 -95 -95 -97 -73 11 -97 -35 -95 -95 -43\\r\\n', 'output': ['-95\\r\\n']}, {'input': '77\\r\\n-67 -93 -93 -92 97 29 93 -93 -93 -5 -93 -7 60 -92 -93 44 -84 68 -92 -93 69 -92 -37 56 43 -93 35 -92 -93 19 -79 18 -92 -93 -93 -37 -93 -47 -93 -92 -92 74 67 19 40 -92 -92 -92 -92 -93 -93 -41 -93 -92 -93 -93 -92 -93 51 -80 6 -42 -92 -92 -66 -12 -92 -92 -3 93 -92 -49 -93 40 62 -92 -92\\r\\n', 'output': ['-92\\r\\n']}, {'input': '89\\r\\n-98 40 16 -87 -98 63 -100 55 -96 -98 -21 -100 -93 26 -98 -98 -100 -89 -98 -5 -65 -28 -100 -6 -66 67 -100 -98 -98 10 -98 -98 -70 7 -98 2 -100 -100 -98 25 -100 -100 -98 23 -68 -100 -98 3 98 -100 -98 -98 -98 -98 -24 -100 -100 -9 -98 35 -100 99 -5 -98 -100 -100 37 -100 -84 57 -98 40 -47 -100 -1 -92 -76 -98 -98 -100 -100 -100 -63 30 21 -100 -100 -100 -12\\r\\n', 'output': ['-98\\r\\n']}, {'input': '99\\r\\n10 -84 -100 -100 73 -64 -100 -94 33 -100 -100 -100 -100 71 64 24 7 -100 -32 -100 -100 77 -100 62 -12 55 45 -100 -100 -80 -100 -100 -100 -100 -100 -100 -100 -100 -100 -39 -48 -100 -34 47 -100 -100 -100 -100 -100 -77 -100 -100 -100 -100 -100 -100 -52 40 -55 -100 -44 -100 72 33 70 -100 -100 -78 -100 -3 100 -77 22 -100 95 -30 -100 10 -69 -100 -100 -100 -100 52 -39 -100 -100 -100 7 -100 -98 -66 95 -17 -100 52 -100 68 -100\\r\\n', 'output': ['-98\\r\\n']}, {'input': '100\\r\\n-99 -98 -64 89 53 57 -99 29 -78 18 -3 -54 76 -98 -99 -98 37 -98 19 -47 89 73 -98 -91 -99 -99 -98 -48 -99 22 -99 -98 -99 -99 -98 -60 84 67 -99 -98 20 -98 88 -98 46 -98 -99 -98 -99 -71 -99 -98 -98 -39 83 95 -98 63 -98 -99 32 -98 -99 -64 57 -30 -53 -83 -4 -99 58 20 -98 -10 -99 -44 -99 -99 -99 -99 75 34 -98 -52 -98 -30 -98 -99 -98 -98 51 -99 -99 -99 -98 -99 -99 -82 -90 92\\r\\n', 'output': ['-98\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n1 3 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n2 1 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n2 3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n3 1 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n3 2 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '9\\r\\n99 99 99 99 100 100 100 100 100\\r\\n', 'output': ['100\\r\\n']}, {'input': '5\\r\\n-100 -100 -100 -100 -100\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.io.*;\n\npublic class Main\n{\n    public static void main (String[] args) throws Exception\n    {\n        InputStream is = System.in;\n        InputStreamReader isr = new InputStreamReader(is);\n        BufferedReader br = new BufferedReader(isr);\n        int n = Integer.parseInt(br.readLine()), min, a, i, flag;\n        String str[] = br.readLine().split(\" \");\n        int count[][] = new int[n][n];\n        flag = 0;\n        for(i = 0 ; i < n ; i++)\n            count[i][i] = 1;\n        min = Integer.parseInt(str[0]);\n        for(i = 0 ; i < n ; i++)\n        {\n            a = Integer.parseInt(str[i]);\n            if(a == min)\n                continue;\n            if(a < min)\n                min = a;\n            else\n            {\n                count[i][i+1] = 1;\n                count[i+1][i] = 1;\n            }\n        }\n        for(i = 0 ; i < n-1 ; i++)\n        {\n            if(count[0][i] == 2)\n                flag++;\n            if(count[i][i+1] == 1)\n                break;\n        }\n        if(flag == 2)\n        {\n            System.out.print(str[i+1]);\n        }\n        else\n        {\n            System.out.print(\"NO\");\n        }\n    }\n}"}
{"src_uid": "930be5ec102fbe062062aa23eac75187", "id": 84, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '4\\r\\n1 2 2 -4\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n1 2 3 1 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '1\\r\\n28\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2\\r\\n-28 12\\r\\n', 'output': ['12\\r\\n']}, {'input': '3\\r\\n-83 40 -80\\r\\n', 'output': ['-80\\r\\n']}, {'input': '8\\r\\n93 77 -92 26 21 -48 53 91\\r\\n', 'output': ['-48\\r\\n']}, {'input': '20\\r\\n-72 -9 -86 80 7 -10 40 -27 -94 92 96 56 28 -19 79 36 -3 -73 -63 -49\\r\\n', 'output': ['-86\\r\\n']}, {'input': '49\\r\\n-74 -100 -80 23 -8 -83 -41 -20 48 17 46 -73 -55 67 85 4 40 -60 -69 -75 56 -74 -42 93 74 -95 64 -46 97 -47 55 0 -78 -34 -31 40 -63 -49 -76 48 21 -1 -49 -29 -98 -11 76 26 94\\r\\n', 'output': ['-98\\r\\n']}, {'input': '88\\r\\n63 48 1 -53 -89 -49 64 -70 -49 71 -17 -16 76 81 -26 -50 67 -59 -56 97 2 100 14 18 -91 -80 42 92 -25 -88 59 8 -56 38 48 -71 -78 24 -14 48 -1 69 73 -76 54 16 -92 44 47 33 -34 -17 -81 21 -59 -61 53 26 10 -76 67 35 -29 70 65 -13 -29 81 80 32 74 -6 34 46 57 1 -45 -55 69 79 -58 11 -2 22 -18 -16 -89 -46\\r\\n', 'output': ['-91\\r\\n']}, {'input': '100\\r\\n34 32 88 20 76 53 -71 -39 -98 -10 57 37 63 -3 -54 -64 -78 -82 73 20 -30 -4 22 75 51 -64 -91 29 -52 -48 83 19 18 -47 46 57 -44 95 89 89 -30 84 -83 67 58 -99 -90 -53 92 -60 -5 -56 -61 27 68 -48 52 -95 64 -48 -30 -67 66 89 14 -33 -31 -91 39 7 -94 -54 92 -96 -99 -83 -16 91 -28 -66 81 44 14 -85 -21 18 40 16 -13 -82 -33 47 -10 -40 -19 10 25 60 -34 -89\\r\\n', 'output': ['-98\\r\\n']}, {'input': '2\\r\\n-1 -1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n-2 -2 -2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '100\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '100\\r\\n100 100 100 100 100 100 100 100 100 100 100 100 -100 100 100 100 100 100 100 100 100 100 100 100 -100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 -100 100 100 100 100 100 100 100 100 100 100 -100 100 100 100 100 -100 100 100 100 100 100 100 100 100 100 100 100\\r\\n', 'output': ['100\\r\\n']}, {'input': '10\\r\\n40 71 -85 -85 40 -85 -85 64 -85 47\\r\\n', 'output': ['40\\r\\n']}, {'input': '23\\r\\n-90 -90 -41 -64 -64 -90 -15 10 -43 -90 -64 -64 89 -64 36 47 38 -90 -64 -90 -90 68 -90\\r\\n', 'output': ['-64\\r\\n']}, {'input': '39\\r\\n-97 -93 -42 -93 -97 -93 56 -97 -97 -97 76 -33 -60 91 7 82 17 47 -97 -97 -93 73 -97 12 -97 -97 -97 -97 56 -92 -83 -93 -93 49 -93 -97 -97 -17 -93\\r\\n', 'output': ['-93\\r\\n']}, {'input': '51\\r\\n-21 6 -35 -98 -86 -98 -86 -43 -65 32 -98 -40 96 -98 -98 -98 -98 -86 -86 -98 56 -86 -98 -98 -30 -98 -86 -31 -98 -86 -86 -86 -86 -30 96 -86 -86 -86 -60 25 88 -86 -86 58 31 -47 57 -86 37 44 -83\\r\\n', 'output': ['-86\\r\\n']}, {'input': '66\\r\\n-14 -95 65 -95 -95 -97 -90 -71 -97 -97 70 -95 -95 -97 -95 -27 35 -87 -95 -5 -97 -97 87 34 -49 -95 -97 -95 -97 -95 -30 -95 -97 47 -95 -17 -97 -95 -97 -69 51 -97 -97 -95 -75 87 59 21 63 56 76 -91 98 -97 6 -97 -95 -95 -97 -73 11 -97 -35 -95 -95 -43\\r\\n', 'output': ['-95\\r\\n']}, {'input': '77\\r\\n-67 -93 -93 -92 97 29 93 -93 -93 -5 -93 -7 60 -92 -93 44 -84 68 -92 -93 69 -92 -37 56 43 -93 35 -92 -93 19 -79 18 -92 -93 -93 -37 -93 -47 -93 -92 -92 74 67 19 40 -92 -92 -92 -92 -93 -93 -41 -93 -92 -93 -93 -92 -93 51 -80 6 -42 -92 -92 -66 -12 -92 -92 -3 93 -92 -49 -93 40 62 -92 -92\\r\\n', 'output': ['-92\\r\\n']}, {'input': '89\\r\\n-98 40 16 -87 -98 63 -100 55 -96 -98 -21 -100 -93 26 -98 -98 -100 -89 -98 -5 -65 -28 -100 -6 -66 67 -100 -98 -98 10 -98 -98 -70 7 -98 2 -100 -100 -98 25 -100 -100 -98 23 -68 -100 -98 3 98 -100 -98 -98 -98 -98 -24 -100 -100 -9 -98 35 -100 99 -5 -98 -100 -100 37 -100 -84 57 -98 40 -47 -100 -1 -92 -76 -98 -98 -100 -100 -100 -63 30 21 -100 -100 -100 -12\\r\\n', 'output': ['-98\\r\\n']}, {'input': '99\\r\\n10 -84 -100 -100 73 -64 -100 -94 33 -100 -100 -100 -100 71 64 24 7 -100 -32 -100 -100 77 -100 62 -12 55 45 -100 -100 -80 -100 -100 -100 -100 -100 -100 -100 -100 -100 -39 -48 -100 -34 47 -100 -100 -100 -100 -100 -77 -100 -100 -100 -100 -100 -100 -52 40 -55 -100 -44 -100 72 33 70 -100 -100 -78 -100 -3 100 -77 22 -100 95 -30 -100 10 -69 -100 -100 -100 -100 52 -39 -100 -100 -100 7 -100 -98 -66 95 -17 -100 52 -100 68 -100\\r\\n', 'output': ['-98\\r\\n']}, {'input': '100\\r\\n-99 -98 -64 89 53 57 -99 29 -78 18 -3 -54 76 -98 -99 -98 37 -98 19 -47 89 73 -98 -91 -99 -99 -98 -48 -99 22 -99 -98 -99 -99 -98 -60 84 67 -99 -98 20 -98 88 -98 46 -98 -99 -98 -99 -71 -99 -98 -98 -39 83 95 -98 63 -98 -99 32 -98 -99 -64 57 -30 -53 -83 -4 -99 58 20 -98 -10 -99 -44 -99 -99 -99 -99 75 34 -98 -52 -98 -30 -98 -99 -98 -98 51 -99 -99 -99 -98 -99 -99 -82 -90 92\\r\\n', 'output': ['-98\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n1 3 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n2 1 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n2 3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n3 1 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n3 2 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '9\\r\\n99 99 99 99 100 100 100 100 100\\r\\n', 'output': ['100\\r\\n']}, {'input': '5\\r\\n-100 -100 -100 -100 -100\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Main{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        \n        int n = Integer.parseInt(sc.next());\n        String[] input = sc.next().split(\" \");\n        int[] x = new int[input.length];\n        int[] cnt = new int[101];\n        \n        for(int i = 0 ; i < x.length ; i++)\n            x[i] = Integer.parseInt(input[i]);\n        \n        for(int i = 0 ; i < 101 ; i++){\n            for(int j = 0 ; j < x.length ; j++){\n                if(x[j] > 0)\n                    cnt[x[j]] += 1;\n            }\n        }\n        \n        int cnt2 = 0;\n        int sec = 0;\n        for(int i = 1 ; i <= 100 ; i++){\n            if(cnt[i] > 1){\n                cnt2++;\n                sec = i;\n            }\n        }\n        \n        if(cnt2 == 1){\n            for(int i = 1 ; i <= 100 ; i++){\n                if(cnt[i] > 0){\n                    sec = i;\n                    break;\n                }\n            }\n            System.out.println(sec);\n        }\n        \n        else if(cnt2 == 0){\n            System.out.println(\"NO\");\n        }\n        \n        else{\n            System.out.println(sec);\n        }\n    }\n}\n"}
{"src_uid": "930be5ec102fbe062062aa23eac75187", "id": 84, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '4\\r\\n1 2 2 -4\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n1 2 3 1 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '1\\r\\n28\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2\\r\\n-28 12\\r\\n', 'output': ['12\\r\\n']}, {'input': '3\\r\\n-83 40 -80\\r\\n', 'output': ['-80\\r\\n']}, {'input': '8\\r\\n93 77 -92 26 21 -48 53 91\\r\\n', 'output': ['-48\\r\\n']}, {'input': '20\\r\\n-72 -9 -86 80 7 -10 40 -27 -94 92 96 56 28 -19 79 36 -3 -73 -63 -49\\r\\n', 'output': ['-86\\r\\n']}, {'input': '49\\r\\n-74 -100 -80 23 -8 -83 -41 -20 48 17 46 -73 -55 67 85 4 40 -60 -69 -75 56 -74 -42 93 74 -95 64 -46 97 -47 55 0 -78 -34 -31 40 -63 -49 -76 48 21 -1 -49 -29 -98 -11 76 26 94\\r\\n', 'output': ['-98\\r\\n']}, {'input': '88\\r\\n63 48 1 -53 -89 -49 64 -70 -49 71 -17 -16 76 81 -26 -50 67 -59 -56 97 2 100 14 18 -91 -80 42 92 -25 -88 59 8 -56 38 48 -71 -78 24 -14 48 -1 69 73 -76 54 16 -92 44 47 33 -34 -17 -81 21 -59 -61 53 26 10 -76 67 35 -29 70 65 -13 -29 81 80 32 74 -6 34 46 57 1 -45 -55 69 79 -58 11 -2 22 -18 -16 -89 -46\\r\\n', 'output': ['-91\\r\\n']}, {'input': '100\\r\\n34 32 88 20 76 53 -71 -39 -98 -10 57 37 63 -3 -54 -64 -78 -82 73 20 -30 -4 22 75 51 -64 -91 29 -52 -48 83 19 18 -47 46 57 -44 95 89 89 -30 84 -83 67 58 -99 -90 -53 92 -60 -5 -56 -61 27 68 -48 52 -95 64 -48 -30 -67 66 89 14 -33 -31 -91 39 7 -94 -54 92 -96 -99 -83 -16 91 -28 -66 81 44 14 -85 -21 18 40 16 -13 -82 -33 47 -10 -40 -19 10 25 60 -34 -89\\r\\n', 'output': ['-98\\r\\n']}, {'input': '2\\r\\n-1 -1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n-2 -2 -2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '100\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '100\\r\\n100 100 100 100 100 100 100 100 100 100 100 100 -100 100 100 100 100 100 100 100 100 100 100 100 -100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 -100 100 100 100 100 100 100 100 100 100 100 -100 100 100 100 100 -100 100 100 100 100 100 100 100 100 100 100 100\\r\\n', 'output': ['100\\r\\n']}, {'input': '10\\r\\n40 71 -85 -85 40 -85 -85 64 -85 47\\r\\n', 'output': ['40\\r\\n']}, {'input': '23\\r\\n-90 -90 -41 -64 -64 -90 -15 10 -43 -90 -64 -64 89 -64 36 47 38 -90 -64 -90 -90 68 -90\\r\\n', 'output': ['-64\\r\\n']}, {'input': '39\\r\\n-97 -93 -42 -93 -97 -93 56 -97 -97 -97 76 -33 -60 91 7 82 17 47 -97 -97 -93 73 -97 12 -97 -97 -97 -97 56 -92 -83 -93 -93 49 -93 -97 -97 -17 -93\\r\\n', 'output': ['-93\\r\\n']}, {'input': '51\\r\\n-21 6 -35 -98 -86 -98 -86 -43 -65 32 -98 -40 96 -98 -98 -98 -98 -86 -86 -98 56 -86 -98 -98 -30 -98 -86 -31 -98 -86 -86 -86 -86 -30 96 -86 -86 -86 -60 25 88 -86 -86 58 31 -47 57 -86 37 44 -83\\r\\n', 'output': ['-86\\r\\n']}, {'input': '66\\r\\n-14 -95 65 -95 -95 -97 -90 -71 -97 -97 70 -95 -95 -97 -95 -27 35 -87 -95 -5 -97 -97 87 34 -49 -95 -97 -95 -97 -95 -30 -95 -97 47 -95 -17 -97 -95 -97 -69 51 -97 -97 -95 -75 87 59 21 63 56 76 -91 98 -97 6 -97 -95 -95 -97 -73 11 -97 -35 -95 -95 -43\\r\\n', 'output': ['-95\\r\\n']}, {'input': '77\\r\\n-67 -93 -93 -92 97 29 93 -93 -93 -5 -93 -7 60 -92 -93 44 -84 68 -92 -93 69 -92 -37 56 43 -93 35 -92 -93 19 -79 18 -92 -93 -93 -37 -93 -47 -93 -92 -92 74 67 19 40 -92 -92 -92 -92 -93 -93 -41 -93 -92 -93 -93 -92 -93 51 -80 6 -42 -92 -92 -66 -12 -92 -92 -3 93 -92 -49 -93 40 62 -92 -92\\r\\n', 'output': ['-92\\r\\n']}, {'input': '89\\r\\n-98 40 16 -87 -98 63 -100 55 -96 -98 -21 -100 -93 26 -98 -98 -100 -89 -98 -5 -65 -28 -100 -6 -66 67 -100 -98 -98 10 -98 -98 -70 7 -98 2 -100 -100 -98 25 -100 -100 -98 23 -68 -100 -98 3 98 -100 -98 -98 -98 -98 -24 -100 -100 -9 -98 35 -100 99 -5 -98 -100 -100 37 -100 -84 57 -98 40 -47 -100 -1 -92 -76 -98 -98 -100 -100 -100 -63 30 21 -100 -100 -100 -12\\r\\n', 'output': ['-98\\r\\n']}, {'input': '99\\r\\n10 -84 -100 -100 73 -64 -100 -94 33 -100 -100 -100 -100 71 64 24 7 -100 -32 -100 -100 77 -100 62 -12 55 45 -100 -100 -80 -100 -100 -100 -100 -100 -100 -100 -100 -100 -39 -48 -100 -34 47 -100 -100 -100 -100 -100 -77 -100 -100 -100 -100 -100 -100 -52 40 -55 -100 -44 -100 72 33 70 -100 -100 -78 -100 -3 100 -77 22 -100 95 -30 -100 10 -69 -100 -100 -100 -100 52 -39 -100 -100 -100 7 -100 -98 -66 95 -17 -100 52 -100 68 -100\\r\\n', 'output': ['-98\\r\\n']}, {'input': '100\\r\\n-99 -98 -64 89 53 57 -99 29 -78 18 -3 -54 76 -98 -99 -98 37 -98 19 -47 89 73 -98 -91 -99 -99 -98 -48 -99 22 -99 -98 -99 -99 -98 -60 84 67 -99 -98 20 -98 88 -98 46 -98 -99 -98 -99 -71 -99 -98 -98 -39 83 95 -98 63 -98 -99 32 -98 -99 -64 57 -30 -53 -83 -4 -99 58 20 -98 -10 -99 -44 -99 -99 -99 -99 75 34 -98 -52 -98 -30 -98 -99 -98 -98 51 -99 -99 -99 -98 -99 -99 -82 -90 92\\r\\n', 'output': ['-98\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n1 3 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n2 1 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n2 3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n3 1 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n3 2 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '9\\r\\n99 99 99 99 100 100 100 100 100\\r\\n', 'output': ['100\\r\\n']}, {'input': '5\\r\\n-100 -100 -100 -100 -100\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Try{\n\tstatic boolean isSecond(int[] data) {\n\t\tint second = data[0]+1;\n\t\tfor(int x : data){\n\t\t\tif(x>second){\n\t\t\t\tsecond = x;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(int x : data){\n\t\t\tif(x == second){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\tpublic static void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] data = new int[n];\n\t\tString[] input = in.next().split(\" \");\n\t\tint pos = 0;\n\t\tfor(int i=0; i<n; i++){\n\t\t\tdata[i] = Integer.valueOf(input[i]);\n\t\t}\n\t\tif(isSecond(data)){\n\t\t\tfor(int i=0; i<n; i++){\n\t\t\t\tif(data[i] > data[i+1]){\n\t\t\t\t\tpos = i;\n\t\t\t\t\ti = n;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(data[pos]);\n\t\t} else {\n\t\t\tSystem.out.println(\"NO\");\n\t\t}\n\t}\n}\n"}
{"src_uid": "685fe16c217b5b71eafdb4198822250e", "id": 85, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1300, "testcases": "[{'input': '2 0 0 1 0\\r\\n', 'output': ['1']}, {'input': '2 0 1 2 1\\r\\n', 'output': ['4']}, {'input': '100 0 0 100 100\\r\\n', 'output': ['200']}, {'input': '4 0 3 1 4\\r\\n', 'output': ['2']}, {'input': '10 8 10 10 0\\r\\n', 'output': ['12']}, {'input': '26 21 0 26 14\\r\\n', 'output': ['19']}, {'input': '15 0 1 11 0\\r\\n', 'output': ['12']}, {'input': '26 26 7 26 12\\r\\n', 'output': ['5']}, {'input': '6 6 0 2 6\\r\\n', 'output': ['10']}, {'input': '5 1 5 2 5\\r\\n', 'output': ['1']}, {'input': '99 12 0 35 99\\r\\n', 'output': ['146']}, {'input': '44 44 31 28 0\\r\\n', 'output': ['47']}, {'input': '42 42 36 5 0\\r\\n', 'output': ['73']}, {'input': '87 87 66 0 5\\r\\n', 'output': ['158']}, {'input': '85 0 32 0 31\\r\\n', 'output': ['1']}, {'input': '30 20 30 3 0\\r\\n', 'output': ['53']}, {'input': '5 4 0 5 1\\r\\n', 'output': ['2']}, {'input': '40 24 40 4 0\\r\\n', 'output': ['68']}, {'input': '11 0 2 11 4\\r\\n', 'output': ['17']}, {'input': '82 0 11 35 0\\r\\n', 'output': ['46']}, {'input': '32 19 32 0 1\\r\\n', 'output': ['50']}, {'input': '54 12 0 0 44\\r\\n', 'output': ['56']}, {'input': '75 42 75 28 0\\r\\n', 'output': ['145']}, {'input': '48 31 48 0 4\\r\\n', 'output': ['75']}, {'input': '69 4 69 69 59\\r\\n', 'output': ['75']}, {'input': '561 0 295 233 0\\r\\n', 'output': ['528']}, {'input': '341 158 0 0 190\\r\\n', 'output': ['348']}, {'input': '887 887 461 39 887\\r\\n', 'output': ['1274']}, {'input': '700 0 288 700 368\\r\\n', 'output': ['1356']}, {'input': '512 70 512 512 99\\r\\n', 'output': ['855']}, {'input': '826 188 826 592 0\\r\\n', 'output': ['1606']}, {'input': '953 0 773 0 903\\r\\n', 'output': ['130']}, {'input': '80 80 4 0 54\\r\\n', 'output': ['138']}, {'input': '208 73 0 208 123\\r\\n', 'output': ['258']}, {'input': '983 0 894 199 0\\r\\n', 'output': ['1093']}, {'input': '686 615 686 470 686\\r\\n', 'output': ['145']}, {'input': '869 869 833 0 578\\r\\n', 'output': ['1196']}, {'input': '169 0 94 0 132\\r\\n', 'output': ['38']}, {'input': '68 42 68 68 28\\r\\n', 'output': ['66']}, {'input': '967 967 607 279 0\\r\\n', 'output': ['1295']}, {'input': '489 489 139 455 489\\r\\n', 'output': ['384']}, {'input': '964 205 964 604 964\\r\\n', 'output': ['399']}, {'input': '86 0 34 86 21\\r\\n', 'output': ['141']}, {'input': '209 166 209 131 0\\r\\n', 'output': ['330']}, {'input': '684 684 113 314 684\\r\\n', 'output': ['941']}, {'input': '16 0 6 0 8\\r\\n', 'output': ['2']}, {'input': '862 154 862 297 862\\r\\n', 'output': ['143']}, {'input': '418 222 0 254 418\\r\\n', 'output': ['778']}, {'input': '571 504 571 143 571\\r\\n', 'output': ['361']}, {'input': '371 371 210 81 371\\r\\n', 'output': ['451']}, {'input': '1000 0 0 1000 1000\\r\\n', 'output': ['2000']}, {'input': '1000 564 0 436 1000\\r\\n', 'output': ['2000']}, {'input': '1000 0 573 12 1000\\r\\n', 'output': ['439']}, {'input': '1000 984 0 1000 999\\r\\n', 'output': ['1015']}, {'input': '100 10 0 10 0\\r\\n', 'output': ['0']}]", "source_code": "import java.util.Scanner;\n\npublic class Problem146 {\n\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint n = input.nextInt(), x1 = input.nextInt(), y1 = input.nextInt(), \n\t\t\t\tx2 = input.nextInt(), y2 = input.nextInt(),\n\t\t\t\tmin = 10000, m;\n\t\t\n\t\tif(n < min) min = n;\n\t\t\n\t\tif(y1!= 0 && x1!= 0 && x2!= n && y2!= n) {\n\t\t\tm = n-x1+x2;\n\t\t\tif(m < min) min = m;\n\t\t\tm = x1+n-x2;\n\t\t\tif(m < min) min = m;\n\t\t\tm = y1+n-y2;\n\t\t\tif(m < min) min = m;\n\t\t\tm = n-y1+y2;\n\t\t\tif(m < min) min = m;\n\t\t} else if(y1 == 0 && x1!= 0 && x2 == n) {\n\t\t\tm = x1;\n\t\t\tif(m < min) min = m;\n\t\t} else if(y1 == n && x1 == 0 && x2 == 0) {\n\t\t\tm = n-y2;\n\t\t\tif(m < min) min = m;\n\t\t} else if(y1 == n && x1 == n && x2 == n) {\n\t\t\tm = n-y2;\n\t\t\tif(m < min) min = m;\n\t\t} else if(y1 == 0 && x1 == 0 && x2 == 0 && y2 == 0) {\n\t\t\t// Do Nothing\n\t\t} else if(y1 == 0 && x1 == 0 && x2 == n && y2 == n) {\n\t\t\tm = n;\n\t\t\tif(m < min) min = m;\n\t\t} else if(y1 == 0 && x1 == n && x2 == n && y2 == 0) {\n\t\t\tm = n-x2;\n\t\t\tif(m < min) min = m;\n\t\t} else if(y1 == n && x1 == n && x2 == 0 && y2 == 0) {\n\t\t\tm = n-x1;\n\t\t\tif(m < min) min = m;\n\t\t} else if(y1 == 0 && x1 == n && x2 == 0 && y2 == n) {\n\t\t\tm = n-x1+n-y2;\n\t\t\tif(m < min) min = m;\n\t\t} else if(y1 == n && x1 == 0 && x2 == n && y2 == 0) {\n\t\t\tm = y2;\n\t\t\tif(m < min) min = m;\n\t\t} else if(y1 == 0 && x1 == n && x2 == 0 && y2 == 0) {\n\t\t\t// Do Nothing\n\t\t} else if(y1 == n && x1 == 0 && x2 == n && y2 == n) {\n\t\t\t// Do Nothing\n\t\t}\n\t\tSystem.out.print(min);\n\n\t}\n\n}\n"}
{"src_uid": "685fe16c217b5b71eafdb4198822250e", "id": 85, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1300, "testcases": "[{'input': '2 0 0 1 0\\r\\n', 'output': ['1']}, {'input': '2 0 1 2 1\\r\\n', 'output': ['4']}, {'input': '100 0 0 100 100\\r\\n', 'output': ['200']}, {'input': '4 0 3 1 4\\r\\n', 'output': ['2']}, {'input': '10 8 10 10 0\\r\\n', 'output': ['12']}, {'input': '26 21 0 26 14\\r\\n', 'output': ['19']}, {'input': '15 0 1 11 0\\r\\n', 'output': ['12']}, {'input': '26 26 7 26 12\\r\\n', 'output': ['5']}, {'input': '6 6 0 2 6\\r\\n', 'output': ['10']}, {'input': '5 1 5 2 5\\r\\n', 'output': ['1']}, {'input': '99 12 0 35 99\\r\\n', 'output': ['146']}, {'input': '44 44 31 28 0\\r\\n', 'output': ['47']}, {'input': '42 42 36 5 0\\r\\n', 'output': ['73']}, {'input': '87 87 66 0 5\\r\\n', 'output': ['158']}, {'input': '85 0 32 0 31\\r\\n', 'output': ['1']}, {'input': '30 20 30 3 0\\r\\n', 'output': ['53']}, {'input': '5 4 0 5 1\\r\\n', 'output': ['2']}, {'input': '40 24 40 4 0\\r\\n', 'output': ['68']}, {'input': '11 0 2 11 4\\r\\n', 'output': ['17']}, {'input': '82 0 11 35 0\\r\\n', 'output': ['46']}, {'input': '32 19 32 0 1\\r\\n', 'output': ['50']}, {'input': '54 12 0 0 44\\r\\n', 'output': ['56']}, {'input': '75 42 75 28 0\\r\\n', 'output': ['145']}, {'input': '48 31 48 0 4\\r\\n', 'output': ['75']}, {'input': '69 4 69 69 59\\r\\n', 'output': ['75']}, {'input': '561 0 295 233 0\\r\\n', 'output': ['528']}, {'input': '341 158 0 0 190\\r\\n', 'output': ['348']}, {'input': '887 887 461 39 887\\r\\n', 'output': ['1274']}, {'input': '700 0 288 700 368\\r\\n', 'output': ['1356']}, {'input': '512 70 512 512 99\\r\\n', 'output': ['855']}, {'input': '826 188 826 592 0\\r\\n', 'output': ['1606']}, {'input': '953 0 773 0 903\\r\\n', 'output': ['130']}, {'input': '80 80 4 0 54\\r\\n', 'output': ['138']}, {'input': '208 73 0 208 123\\r\\n', 'output': ['258']}, {'input': '983 0 894 199 0\\r\\n', 'output': ['1093']}, {'input': '686 615 686 470 686\\r\\n', 'output': ['145']}, {'input': '869 869 833 0 578\\r\\n', 'output': ['1196']}, {'input': '169 0 94 0 132\\r\\n', 'output': ['38']}, {'input': '68 42 68 68 28\\r\\n', 'output': ['66']}, {'input': '967 967 607 279 0\\r\\n', 'output': ['1295']}, {'input': '489 489 139 455 489\\r\\n', 'output': ['384']}, {'input': '964 205 964 604 964\\r\\n', 'output': ['399']}, {'input': '86 0 34 86 21\\r\\n', 'output': ['141']}, {'input': '209 166 209 131 0\\r\\n', 'output': ['330']}, {'input': '684 684 113 314 684\\r\\n', 'output': ['941']}, {'input': '16 0 6 0 8\\r\\n', 'output': ['2']}, {'input': '862 154 862 297 862\\r\\n', 'output': ['143']}, {'input': '418 222 0 254 418\\r\\n', 'output': ['778']}, {'input': '571 504 571 143 571\\r\\n', 'output': ['361']}, {'input': '371 371 210 81 371\\r\\n', 'output': ['451']}, {'input': '1000 0 0 1000 1000\\r\\n', 'output': ['2000']}, {'input': '1000 564 0 436 1000\\r\\n', 'output': ['2000']}, {'input': '1000 0 573 12 1000\\r\\n', 'output': ['439']}, {'input': '1000 984 0 1000 999\\r\\n', 'output': ['1015']}, {'input': '100 10 0 10 0\\r\\n', 'output': ['0']}]", "source_code": "import java.io.*;\n\npublic class Main{\n\tpublic static void main (String[] args){\n\t\tFastScanner scanner = new FastScanner();\n\t\tint n = scanner.nextInt(), x1 = scanner.nextInt(), y1 = scanner.nextInt(), x2 = scanner.nextInt(), y2 = scanner.nextInt();\n\t\tint ans = 1000;\n\t\t\n\t\tans = Math.min(ans, n + x1 - x2);\n\t\tans = Math.min(ans, n - x1 + x2);\n\t\tans = Math.min(ans, n + y1 - y2);\n\t\tans = Math.min(ans, n - y1 + y2);\n\t\t\n\t\tif(x1 == 0 && x2 == n){\n\t\t\tans = Math.min(ans, y1 + y2);\n\t\t}\n\t\tif(x1 == n && x2 == 0){\n\t\t\tans = Math.min(ans, n - y1 + n - y2);\n\t\t}\n\t\tif(y1 == 0 && y2 == n){\n\t\t\tans = Math.min(ans, n - x1 + x2);\n\t\t}\n\t\tif(y1 == n && y2 == 0){\n\t\t\tans = Math.min(ans, n - x1 + n - x2);\n\t\t}\n\t\t\n\t\tSystem.out.println(ans);\n\t}\n\t\n\tprivate static class FastScanner {\n\t\tprivate final InputStream in = System.in;\n\t\tprivate final byte[] buffer = new byte[1024];\n\t\tprivate int ptr = 0;\n\t\tprivate int buflen = 0;\n\t\tprivate boolean hasNextByte() {\n\t\t\t\tif (ptr < buflen) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\t\tptr = 0;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tbuflen = in.read(buffer);\n\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (buflen <= 0) {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t}\n\t\tprivate int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n\t\tprivate static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n\t\tpublic boolean hasNext() { while(hasNextByte() &&!isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\n\t\tpublic String next() {\n\t\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\tint b = readByte();\n\t\t\t\twhile(isPrintableChar(b)) {\n\t\t\t\t\t\tsb.appendCodePoint(b);\n\t\t\t\t\t\tb = readByte();\n\t\t\t\t}\n\t\t\t\treturn sb.toString();\n\t\t}\n\t\tpublic long nextLong() {\n\t\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\t\tlong n = 0;\n\t\t\t\tboolean minus = false;\n\t\t\t\tint b = readByte();\n\t\t\t\tif (b == '-') {\n\t\t\t\t\t\tminus = true;\n\t\t\t\t\t\tb = readByte();\n\t\t\t\t}\n\t\t\t\tif (b < '0' || '9' < b) {\n\t\t\t\t\t\tthrow new NumberFormatException();\n\t\t\t\t}\n\t\t\t\tn *= 10;\n\t\t\t\tn += b - '0';\n\t\t\t\tb = readByte();\n\t\t\t\twhile(true){\n\t\t\t\t\t\tif ('0' <= b && b <= '9') {\n\t\t\t\t\t\t\t\tn *= 10;\n\t\t\t\t\t\t\t\tn += b - '0';\n"}
{"src_uid": "685fe16c217b5b71eafdb4198822250e", "id": 85, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1300, "testcases": "[{'input': '2 0 0 1 0\\r\\n', 'output': ['1']}, {'input': '2 0 1 2 1\\r\\n', 'output': ['4']}, {'input': '100 0 0 100 100\\r\\n', 'output': ['200']}, {'input': '4 0 3 1 4\\r\\n', 'output': ['2']}, {'input': '10 8 10 10 0\\r\\n', 'output': ['12']}, {'input': '26 21 0 26 14\\r\\n', 'output': ['19']}, {'input': '15 0 1 11 0\\r\\n', 'output': ['12']}, {'input': '26 26 7 26 12\\r\\n', 'output': ['5']}, {'input': '6 6 0 2 6\\r\\n', 'output': ['10']}, {'input': '5 1 5 2 5\\r\\n', 'output': ['1']}, {'input': '99 12 0 35 99\\r\\n', 'output': ['146']}, {'input': '44 44 31 28 0\\r\\n', 'output': ['47']}, {'input': '42 42 36 5 0\\r\\n', 'output': ['73']}, {'input': '87 87 66 0 5\\r\\n', 'output': ['158']}, {'input': '85 0 32 0 31\\r\\n', 'output': ['1']}, {'input': '30 20 30 3 0\\r\\n', 'output': ['53']}, {'input': '5 4 0 5 1\\r\\n', 'output': ['2']}, {'input': '40 24 40 4 0\\r\\n', 'output': ['68']}, {'input': '11 0 2 11 4\\r\\n', 'output': ['17']}, {'input': '82 0 11 35 0\\r\\n', 'output': ['46']}, {'input': '32 19 32 0 1\\r\\n', 'output': ['50']}, {'input': '54 12 0 0 44\\r\\n', 'output': ['56']}, {'input': '75 42 75 28 0\\r\\n', 'output': ['145']}, {'input': '48 31 48 0 4\\r\\n', 'output': ['75']}, {'input': '69 4 69 69 59\\r\\n', 'output': ['75']}, {'input': '561 0 295 233 0\\r\\n', 'output': ['528']}, {'input': '341 158 0 0 190\\r\\n', 'output': ['348']}, {'input': '887 887 461 39 887\\r\\n', 'output': ['1274']}, {'input': '700 0 288 700 368\\r\\n', 'output': ['1356']}, {'input': '512 70 512 512 99\\r\\n', 'output': ['855']}, {'input': '826 188 826 592 0\\r\\n', 'output': ['1606']}, {'input': '953 0 773 0 903\\r\\n', 'output': ['130']}, {'input': '80 80 4 0 54\\r\\n', 'output': ['138']}, {'input': '208 73 0 208 123\\r\\n', 'output': ['258']}, {'input': '983 0 894 199 0\\r\\n', 'output': ['1093']}, {'input': '686 615 686 470 686\\r\\n', 'output': ['145']}, {'input': '869 869 833 0 578\\r\\n', 'output': ['1196']}, {'input': '169 0 94 0 132\\r\\n', 'output': ['38']}, {'input': '68 42 68 68 28\\r\\n', 'output': ['66']}, {'input': '967 967 607 279 0\\r\\n', 'output': ['1295']}, {'input': '489 489 139 455 489\\r\\n', 'output': ['384']}, {'input': '964 205 964 604 964\\r\\n', 'output': ['399']}, {'input': '86 0 34 86 21\\r\\n', 'output': ['141']}, {'input': '209 166 209 131 0\\r\\n', 'output': ['330']}, {'input': '684 684 113 314 684\\r\\n', 'output': ['941']}, {'input': '16 0 6 0 8\\r\\n', 'output': ['2']}, {'input': '862 154 862 297 862\\r\\n', 'output': ['143']}, {'input': '418 222 0 254 418\\r\\n', 'output': ['778']}, {'input': '571 504 571 143 571\\r\\n', 'output': ['361']}, {'input': '371 371 210 81 371\\r\\n', 'output': ['451']}, {'input': '1000 0 0 1000 1000\\r\\n', 'output': ['2000']}, {'input': '1000 564 0 436 1000\\r\\n', 'output': ['2000']}, {'input': '1000 0 573 12 1000\\r\\n', 'output': ['439']}, {'input': '1000 984 0 1000 999\\r\\n', 'output': ['1015']}, {'input': '100 10 0 10 0\\r\\n', 'output': ['0']}]", "source_code": "import java.util.*;\n\npublic class A8 {\n\tstatic class Main {\n\t\tstatic int n, x1, x2, y1, y2;\n\n\t\tpublic static void main(String[] args) {\n\t\t\tScanner sc = new Scanner(System.in);\n\n\t\t\tn = sc.nextInt();\n\t\t\tx1 = sc.nextInt();\n\t\t\ty1 = sc.nextInt();\n\t\t\tx2 = sc.nextInt();\n\t\t\ty2 = sc.nextInt();\n\n\t\t\tint min = Integer.MAX_VALUE;\n\t\t\tint x = 0;\n\t\t\tint y = 0;\n\n\t\t\tif (x1 == 0 && x2 == n) {\n\t\t\t\tmin = Math.min(min, y1 + n + y2);\n\t\t\t\tmin = Math.min(min, 3 * n - y1 + y2);\n\t\t\t} else if (x1 == n && x2 == 0) {\n\t\t\t\tmin = Math.min(min, y1 + n - y2);\n\t\t\t\tmin = Math.min(min, 3 * n - y2 + y1);\n\t\t\t} else if (y1 == 0 && y2 == n) {\n\t\t\t\tmin = Math.min(min, x1 + n + x2);\n\t\t\t\tmin = Math.min(min, 3 * n - x2 + x1);\n\t\t\t} else if (y1 == n && y2 == 0) {\n\t\t\t\tmin = Math.min(min, x1 - x2);\n\t\t\t\tmin = Math.min(min, 3 * n - x1 + x2);\n\t\t\t} else if (x1 == 0 && x2 == 0) {\n\t\t\t\tmin = Math.min(min, y2);\n\t\t\t} else if (x1 == n && x2 == n) {\n\t\t\t\tmin = Math.min(min, n - y1);\n\t\t\t} else if (x1 == 0 && x2 == n) {\n\t\t\t\tmin = Math.min(min, n - y2);\n\t\t\t} else if (x1 == n && x2 == 0) {\n\t\t\t\tmin = Math.min(min, y1);\n\t\t\t} else if (y1 == 0 && y2 == 0) {\n\t\t\t\tmin = Math.min(min, n - x2);\n\t\t\t} else if (y1 == n && y2 == n) {\n\t\t\t\tmin = Math.min(min, n - x1);\n\t\t\t} else if (y1 == 0 && y2 == n) {\n\t\t\t\tmin = Math.min(min, x2);\n\t\t\t} else if (y1 == n && y2 == 0) {\n\t\t\t\tmin = Math.min(min, x1);\n\t\t\t} else if (y1 == 0 && x2 == n) {\n\t\t\t\tmin = Math.min(min, n - x1 + y2);\n\t\t\t} else if (y2 == n && x1 == 0) {\n\t\t\t\tmin = Math.min(min, y1 + x2);\n\t\t\t} else if (y2 == 0 && x1 == n) {\n\t\t\t\tmin = Math.min(min, y1 + n - x2);\n\t\t\t} else if (y1 == n && x2 == 0) {\n\t\t\t\tmin = Math.min(min, n - x2 + y2);\n\t\t\t} else if (y2 == 0 && x1 == 0) {\n\t\t\t\tmin = Math.min(min, y2 + x2);\n\t\t\t} else if (y1 == 0 && x2 == 0) {\n\t\t\t\tmin = Math.min(min, y1 + x2);\n\t\t\t} else if (y2 == n && x1 == n) {\n\t\t\t\tmin = Math.min(min, n - x1 + y1);\n\t\t\t} else if (y1 == n && x2 == n) {\n\t\t\t\tmin = Math.min"}
{"src_uid": "685fe16c217b5b71eafdb4198822250e", "id": 85, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1300, "testcases": "[{'input': '2 0 0 1 0\\r\\n', 'output': ['1']}, {'input': '2 0 1 2 1\\r\\n', 'output': ['4']}, {'input': '100 0 0 100 100\\r\\n', 'output': ['200']}, {'input': '4 0 3 1 4\\r\\n', 'output': ['2']}, {'input': '10 8 10 10 0\\r\\n', 'output': ['12']}, {'input': '26 21 0 26 14\\r\\n', 'output': ['19']}, {'input': '15 0 1 11 0\\r\\n', 'output': ['12']}, {'input': '26 26 7 26 12\\r\\n', 'output': ['5']}, {'input': '6 6 0 2 6\\r\\n', 'output': ['10']}, {'input': '5 1 5 2 5\\r\\n', 'output': ['1']}, {'input': '99 12 0 35 99\\r\\n', 'output': ['146']}, {'input': '44 44 31 28 0\\r\\n', 'output': ['47']}, {'input': '42 42 36 5 0\\r\\n', 'output': ['73']}, {'input': '87 87 66 0 5\\r\\n', 'output': ['158']}, {'input': '85 0 32 0 31\\r\\n', 'output': ['1']}, {'input': '30 20 30 3 0\\r\\n', 'output': ['53']}, {'input': '5 4 0 5 1\\r\\n', 'output': ['2']}, {'input': '40 24 40 4 0\\r\\n', 'output': ['68']}, {'input': '11 0 2 11 4\\r\\n', 'output': ['17']}, {'input': '82 0 11 35 0\\r\\n', 'output': ['46']}, {'input': '32 19 32 0 1\\r\\n', 'output': ['50']}, {'input': '54 12 0 0 44\\r\\n', 'output': ['56']}, {'input': '75 42 75 28 0\\r\\n', 'output': ['145']}, {'input': '48 31 48 0 4\\r\\n', 'output': ['75']}, {'input': '69 4 69 69 59\\r\\n', 'output': ['75']}, {'input': '561 0 295 233 0\\r\\n', 'output': ['528']}, {'input': '341 158 0 0 190\\r\\n', 'output': ['348']}, {'input': '887 887 461 39 887\\r\\n', 'output': ['1274']}, {'input': '700 0 288 700 368\\r\\n', 'output': ['1356']}, {'input': '512 70 512 512 99\\r\\n', 'output': ['855']}, {'input': '826 188 826 592 0\\r\\n', 'output': ['1606']}, {'input': '953 0 773 0 903\\r\\n', 'output': ['130']}, {'input': '80 80 4 0 54\\r\\n', 'output': ['138']}, {'input': '208 73 0 208 123\\r\\n', 'output': ['258']}, {'input': '983 0 894 199 0\\r\\n', 'output': ['1093']}, {'input': '686 615 686 470 686\\r\\n', 'output': ['145']}, {'input': '869 869 833 0 578\\r\\n', 'output': ['1196']}, {'input': '169 0 94 0 132\\r\\n', 'output': ['38']}, {'input': '68 42 68 68 28\\r\\n', 'output': ['66']}, {'input': '967 967 607 279 0\\r\\n', 'output': ['1295']}, {'input': '489 489 139 455 489\\r\\n', 'output': ['384']}, {'input': '964 205 964 604 964\\r\\n', 'output': ['399']}, {'input': '86 0 34 86 21\\r\\n', 'output': ['141']}, {'input': '209 166 209 131 0\\r\\n', 'output': ['330']}, {'input': '684 684 113 314 684\\r\\n', 'output': ['941']}, {'input': '16 0 6 0 8\\r\\n', 'output': ['2']}, {'input': '862 154 862 297 862\\r\\n', 'output': ['143']}, {'input': '418 222 0 254 418\\r\\n', 'output': ['778']}, {'input': '571 504 571 143 571\\r\\n', 'output': ['361']}, {'input': '371 371 210 81 371\\r\\n', 'output': ['451']}, {'input': '1000 0 0 1000 1000\\r\\n', 'output': ['2000']}, {'input': '1000 564 0 436 1000\\r\\n', 'output': ['2000']}, {'input': '1000 0 573 12 1000\\r\\n', 'output': ['439']}, {'input': '1000 984 0 1000 999\\r\\n', 'output': ['1015']}, {'input': '100 10 0 10 0\\r\\n', 'output': ['0']}]", "source_code": "import java.util.*;\n\npublic class Main {\n\n\tprivate static int n;\n\tprivate static int x1, x2;\n\tprivate static int y1, y2;\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tn = sc.nextInt();\n\t\tx1 = sc.nextInt();\n\t\ty1 = sc.nextInt();\n\t\tx2 = sc.nextInt();\n\t\ty2 = sc.nextInt();\n\t\tint ans = 10000;\n\t\tif (x1 == 0 && x2 == n) {\n\t\t\tans = Math.min(ans, y1+y2+n);\n\t\t\tans = Math.min(ans, 3*n-y1-y2);\n\t\t}\n\t\telse if (x1 == n && x2 == 0) {\n\t\t\tans = Math.min(ans, n-y1+y2);\n\t\t}\n\t\telse if (y1 == 0 && y2 == n) {\n\t\t\tans = Math.min(ans, n-x1+x2);\n\t\t}\n\t\telse if (y1 == n && y2 == 0) {\n\t\t\tans = Math.min(ans, x1+x2);\n\t\t}\n\t\telse if (x1 == 0 && x2 == 0) {\n\t\t\tans = Math.min(ans, n-y1+y2);\n\t\t}\n\t\telse if (x1 == n && x2 == n) {\n\t\t\tans = Math.min(ans, 3*n-y1-y2);\n\t\t}\n\t\telse if (y1 == 0 && y2 == 0) {\n\t\t\tans = Math.min(ans, n-x1+x2);\n\t\t}\n\t\telse if (y1 == n && y2 == n) {\n\t\t\tans = Math.min(ans, x1+x2);\n\t\t}\n\t\telse {\n\t\t\tans = Math.min(ans, n-x1+n-x2);\n\t\t\tans = Math.min(ans, x1+x2);\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}"}
{"src_uid": "685fe16c217b5b71eafdb4198822250e", "id": 85, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1300, "testcases": "[{'input': '2 0 0 1 0\\r\\n', 'output': ['1']}, {'input': '2 0 1 2 1\\r\\n', 'output': ['4']}, {'input': '100 0 0 100 100\\r\\n', 'output': ['200']}, {'input': '4 0 3 1 4\\r\\n', 'output': ['2']}, {'input': '10 8 10 10 0\\r\\n', 'output': ['12']}, {'input': '26 21 0 26 14\\r\\n', 'output': ['19']}, {'input': '15 0 1 11 0\\r\\n', 'output': ['12']}, {'input': '26 26 7 26 12\\r\\n', 'output': ['5']}, {'input': '6 6 0 2 6\\r\\n', 'output': ['10']}, {'input': '5 1 5 2 5\\r\\n', 'output': ['1']}, {'input': '99 12 0 35 99\\r\\n', 'output': ['146']}, {'input': '44 44 31 28 0\\r\\n', 'output': ['47']}, {'input': '42 42 36 5 0\\r\\n', 'output': ['73']}, {'input': '87 87 66 0 5\\r\\n', 'output': ['158']}, {'input': '85 0 32 0 31\\r\\n', 'output': ['1']}, {'input': '30 20 30 3 0\\r\\n', 'output': ['53']}, {'input': '5 4 0 5 1\\r\\n', 'output': ['2']}, {'input': '40 24 40 4 0\\r\\n', 'output': ['68']}, {'input': '11 0 2 11 4\\r\\n', 'output': ['17']}, {'input': '82 0 11 35 0\\r\\n', 'output': ['46']}, {'input': '32 19 32 0 1\\r\\n', 'output': ['50']}, {'input': '54 12 0 0 44\\r\\n', 'output': ['56']}, {'input': '75 42 75 28 0\\r\\n', 'output': ['145']}, {'input': '48 31 48 0 4\\r\\n', 'output': ['75']}, {'input': '69 4 69 69 59\\r\\n', 'output': ['75']}, {'input': '561 0 295 233 0\\r\\n', 'output': ['528']}, {'input': '341 158 0 0 190\\r\\n', 'output': ['348']}, {'input': '887 887 461 39 887\\r\\n', 'output': ['1274']}, {'input': '700 0 288 700 368\\r\\n', 'output': ['1356']}, {'input': '512 70 512 512 99\\r\\n', 'output': ['855']}, {'input': '826 188 826 592 0\\r\\n', 'output': ['1606']}, {'input': '953 0 773 0 903\\r\\n', 'output': ['130']}, {'input': '80 80 4 0 54\\r\\n', 'output': ['138']}, {'input': '208 73 0 208 123\\r\\n', 'output': ['258']}, {'input': '983 0 894 199 0\\r\\n', 'output': ['1093']}, {'input': '686 615 686 470 686\\r\\n', 'output': ['145']}, {'input': '869 869 833 0 578\\r\\n', 'output': ['1196']}, {'input': '169 0 94 0 132\\r\\n', 'output': ['38']}, {'input': '68 42 68 68 28\\r\\n', 'output': ['66']}, {'input': '967 967 607 279 0\\r\\n', 'output': ['1295']}, {'input': '489 489 139 455 489\\r\\n', 'output': ['384']}, {'input': '964 205 964 604 964\\r\\n', 'output': ['399']}, {'input': '86 0 34 86 21\\r\\n', 'output': ['141']}, {'input': '209 166 209 131 0\\r\\n', 'output': ['330']}, {'input': '684 684 113 314 684\\r\\n', 'output': ['941']}, {'input': '16 0 6 0 8\\r\\n', 'output': ['2']}, {'input': '862 154 862 297 862\\r\\n', 'output': ['143']}, {'input': '418 222 0 254 418\\r\\n', 'output': ['778']}, {'input': '571 504 571 143 571\\r\\n', 'output': ['361']}, {'input': '371 371 210 81 371\\r\\n', 'output': ['451']}, {'input': '1000 0 0 1000 1000\\r\\n', 'output': ['2000']}, {'input': '1000 564 0 436 1000\\r\\n', 'output': ['2000']}, {'input': '1000 0 573 12 1000\\r\\n', 'output': ['439']}, {'input': '1000 984 0 1000 999\\r\\n', 'output': ['1015']}, {'input': '100 10 0 10 0\\r\\n', 'output': ['0']}]", "source_code": "import java.util.*;\n\npublic class Solution{\n \t\n\tstatic Scanner scanner=new Scanner(System.in);\n\t\n\tpublic static void main(String [] args){\n\t\tint n=scanner.nextInt();\n\t\tint x1=scanner.nextInt(),y1=scanner.nextInt();\n\t\tint x2=scanner.nextInt(),y2=scanner.nextInt();\n\t\tint x1f=x1,x2f=x2;\n\t\tint y1f=y1,y2f=y2;\n\t\tint min=Integer.MAX_VALUE;\n\t\tfor(int i=0;i<2;i++){\n\t\t\tfor(int j=0;j<2;j++){\n\t\t\t\tint t=0;\n\t\t\t\tif(x1==x2 && x1==0)t+=n;\n\t\t\t\telse if(x1==x2 && x2==n)t+=(n*2);\n\t\t\t\telse if(x1!=x2 && (y1>y2 && x1>x2)){\n\t\t\t\t\tif(x1==0 && y2==0)t+=(y2f+x2f);\n\t\t\t\t\telse if(x1==0 && y2==n)t+=((n-y2f)+x2f);\n\t\t\t\t\telse if(x1==n && y2==n)t+=(n-y2f)+(n-x2f);\n\t\t\t\t\telse if(x1==n && y2==0)t+=((n*2)-y2f)+(n-x2f);\n\t\t\t\t\telse if(x1<x2 && y2<y1){\n\t\t\t\t\t\tt+=((y2f-y1f)+(x2f-x1f));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(x1!=x2 && (y1<y2 && x1<x2)){\n\t\t\t\t\tif(x1==0 && y2==n)t+=(y2f-y1f);\n\t\t\t\t\telse if(x1==n && y2==0)t+=((n*2)-y2f)+(n-x1f);\n\t\t\t\t\telse if(x1==0 && y2==0)t+=(n-x2f)+(n-y1f);\n\t\t\t\t\telse if(x1==n && y2==n)t+=((n-x2f)+(n-y1f));\n\t\t\t\t\telse if(x2<x1 && y1<y2){\n\t\t\t\t\t\tt+=((y1f-y2f)+(x1f-x2f));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(x1==x2 && x1!=0 && x1!=(n*2)){\n\t\t\t\t\tt=n;\n\t\t\t\t}\n\t\t\t\tif(t<min){\n\t\t\t\t\tmin=t;\n\t\t\t\t}\n\t\t\t}\n\t\t\tx2=x1;\n\t\t}\n\t\tSystem.out.print(min);\n\t}\n}"}
{"src_uid": "9a56288d8bd4e4e7ef3329e102f745a5", "id": 86, "lang_cluster": "java", "lang": "Java 11", "difficulty": 900, "testcases": "[{'input': '5 3\\r\\n-6 0 35 -2 4\\r\\n', 'output': ['8\\r\\n']}, {'input': '4 2\\r\\n7 0 0 -7\\r\\n', 'output': ['7\\r\\n']}, {'input': '6 6\\r\\n756 -611 251 -66 572 -818\\r\\n', 'output': ['1495\\r\\n']}, {'input': '5 5\\r\\n976 437 937 788 518\\r\\n', 'output': ['0\\r\\n']}, {'input': '5 3\\r\\n-2 -2 -2 -2 -2\\r\\n', 'output': ['6\\r\\n']}, {'input': '5 1\\r\\n998 997 985 937 998\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 2\\r\\n-742 -187\\r\\n', 'output': ['929\\r\\n']}, {'input': '3 3\\r\\n522 597 384\\r\\n', 'output': ['0\\r\\n']}, {'input': '4 2\\r\\n-215 -620 192 647\\r\\n', 'output': ['835\\r\\n']}, {'input': '10 6\\r\\n557 605 685 231 910 633 130 838 -564 -85\\r\\n', 'output': ['649\\r\\n']}, {'input': '20 14\\r\\n932 442 960 943 624 624 955 998 631 910 850 517 715 123 1000 155 -10 961 966 59\\r\\n', 'output': ['10\\r\\n']}, {'input': '30 5\\r\\n991 997 996 967 977 999 991 986 1000 965 984 997 998 1000 958 983 974 1000 991 999 1000 978 961 992 990 998 998 978 998 1000\\r\\n', 'output': ['0\\r\\n']}, {'input': '50 20\\r\\n-815 -947 -946 -993 -992 -846 -884 -954 -963 -733 -940 -746 -766 -930 -821 -937 -937 -999 -914 -938 -936 -975 -939 -981 -977 -952 -925 -901 -952 -978 -994 -957 -946 -896 -905 -836 -994 -951 -887 -939 -859 -953 -985 -988 -946 -829 -956 -842 -799 -886\\r\\n', 'output': ['19441\\r\\n']}, {'input': '88 64\\r\\n999 999 1000 1000 999 996 995 1000 1000 999 1000 997 998 1000 999 1000 997 1000 993 998 994 999 998 996 1000 997 1000 1000 1000 997 1000 998 997 1000 1000 998 1000 998 999 1000 996 999 999 999 996 995 999 1000 998 999 1000 999 999 1000 1000 1000 996 1000 1000 1000 997 1000 1000 997 999 1000 1000 1000 1000 1000 999 999 1000 1000 996 999 1000 1000 995 999 1000 996 1000 998 999 999 1000 999\\r\\n', 'output': ['0\\r\\n']}, {'input': '99 17\\r\\n-993 -994 -959 -989 -991 -995 -976 -997 -990 -1000 -996 -994 -999 -995 -1000 -983 -979 -1000 -989 -968 -994 -992 -962 -993 -999 -983 -991 -979 -995 -993 -973 -999 -995 -995 -999 -993 -995 -992 -947 -1000 -999 -998 -982 -988 -979 -993 -963 -988 -980 -990 -979 -976 -995 -999 -981 -988 -998 -999 -970 -1000 -983 -994 -943 -975 -998 -977 -973 -997 -959 -999 -983 -985 -950 -977 -977 -991 -998 -973 -987 -985 -985 -986 -984 -994 -978 -998 -989 -989 -988 -970 -985 -974 -997 -981 -962 -972 -995 -988 -993\\r\\n', 'output': ['16984\\r\\n']}, {'input': '100 37\\r\\n205 19 -501 404 912 -435 -322 -469 -655 880 -804 -470 793 312 -108 586 -642 -928 906 605 -353 -800 745 -440 -207 752 -50 -28 498 -800 -62 -195 602 -833 489 352 536 404 -775 23 145 -512 524 759 651 -461 -427 -557 684 -366 62 592 -563 -811 64 418 -881 -308 591 -318 -145 -261 -321 -216 -18 595 -202 960 -4 219 226 -238 -882 -963 425 970 -434 -160 243 -672 -4 873 8 -633 904 -298 -151 -377 -61 -72 -677 -66 197 -716 3 -870 -30 152 -469 981\\r\\n', 'output': ['21743\\r\\n']}, {'input': '100 99\\r\\n-931 -806 -830 -828 -916 -962 -660 -867 -952 -966 -820 -906 -724 -982 -680 -717 -488 -741 -897 -613 -986 -797 -964 -939 -808 -932 -810 -860 -641 -916 -858 -628 -821 -929 -917 -976 -664 -985 -778 -665 -624 -928 -940 -958 -884 -757 -878 -896 -634 -526 -514 -873 -990 -919 -988 -878 -650 -973 -774 -783 -733 -648 -756 -895 -833 -974 -832 -725 -841 -748 -806 -613 -924 -867 -881 -943 -864 -991 -809 -926 -777 -817 -998 -682 -910 -996 -241 -722 -964 -904 -821 -920 -835 -699 -805 -632 -779 -317 -915 -654\\r\\n', 'output': ['81283\\r\\n']}, {'input': '100 14\\r\\n995 994 745 684 510 737 984 690 979 977 542 933 871 603 758 653 962 997 747 974 773 766 975 770 527 960 841 989 963 865 974 967 950 984 757 685 986 809 982 959 931 880 978 867 805 562 970 900 834 782 616 885 910 608 974 918 576 700 871 980 656 941 978 759 767 840 573 859 841 928 693 853 716 927 976 851 962 962 627 797 707 873 869 988 993 533 665 887 962 880 929 980 877 887 572 790 721 883 848 782\\r\\n', 'output': ['0\\r\\n']}, {'input': '100 84\\r\\n768 946 998 752 931 912 826 1000 991 910 875 962 901 952 958 733 959 908 872 840 923 826 952 980 974 980 947 955 959 822 997 963 966 933 829 923 971 999 926 932 865 984 974 858 994 855 949 941 992 861 951 949 991 711 763 728 935 485 716 907 869 952 960 859 909 963 978 942 968 933 923 909 997 962 687 764 924 774 875 1000 961 951 987 974 848 921 966 859 995 997 974 931 886 941 974 986 906 978 998 823\\r\\n', 'output': ['0\\r\\n']}, {'input': '100 80\\r\\n-795 -994 -833 -930 -974 -980 -950 -940 -788 -927 -583 -956 -945 -949 -809 -974 -957 -736 -967 -908 -975 -961 -986 -983 -963 -771 -952 -847 -751 -741 -982 -959 -925 -931 -839 -937 -880 -914 -858 -998 -812 -911 -862 -965 -943 -984 -738 -920 -950 -998 -909 -998 -781 -901 -677 -940 -985 -951 -675 -952 -967 -949 -882 -641 -969 -937 -975 -993 -913 -941 -807 -851 -832 -960 -939 -943 -895 -929 -528 -880 -823 -930 -888 -862 -948 -966 -962 -857 -799 -969 -833 -998 -952 -878 -946 -971 -976 -974 -723 -992\\r\\n', 'output': ['75068\\r\\n']}, {'input': '1 1\\r\\n0\\r\\n', 'output': ['0\\r\\n']}, {'input': '1 1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '1 1\\r\\n555\\r\\n', 'output': ['0\\r\\n']}, {'input': '1 1\\r\\n-1\\r\\n', 'output': ['1\\r\\n']}, {'input': '1 1\\r\\n-24\\r\\n', 'output': ['24\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Trying11 {\n    \n\tpublic static void main (String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint m = in.nextInt(), n = in.nextInt(), temp[] = new int[n];\n\t\tfor(int i = 0; i < n; i++)\n\t\t\ttemp[i] = in.nextInt();\n\t\tint max = 0, max_ind = 0, ind[] = new int[n];\n\t\tfor(int i = 0; i < n; i++)\n\t\t{\n\t\t\tint index = i;\n\t\t\tfor(int j = 0; j < i; j++)\n\t\t\t{\n\t\t\t\tif(temp[j] < temp[index])\n\t\t\t\t\tindex = j;\n\t\t\t}\n\t\t\tind[i] = index;\n\t\t}\n\t\tfor(int i = 0; i < n; i++)\n\t\t{\n\t\t\tif(temp[i] < 0 && Math.abs(temp[i]) > max)\n\t\t\t{\n\t\t\t\tmax = Math.abs(temp[i]);\n\t\t\t\tmax_ind = i;\n\t\t\t}\n\t\t\tif(temp[i] >= 0 && Math.abs(temp[i]) > max)\n\t\t\t\tmax = Math.abs(temp[i]);\n\t\t}\n\t\tfor(int i = n-1; i >= 0; i--)\n\t\t{\n\t\t\tif(i!= max_ind && temp[i] <= 0 && Math.abs(temp[i]) > Math.abs(temp[max_ind]))\n\t\t\t{\n\t\t\t\tmax = Math.abs(temp[i]);\n\t\t\t\tmax_ind = i;\n\t\t\t}\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++)\n\t\t{\n\t\t\tif(i == max_ind)\n\t\t\t\tcount++;\n\t\t\tif(count == m)\n\t\t\t\tbreak;\n\t\t}\n\t\tSystem.out.println(count*(-1*temp[max_ind]));\n\t}\n\n}\n"}
{"src_uid": "9a56288d8bd4e4e7ef3329e102f745a5", "id": 86, "lang_cluster": "java", "lang": "Java 11", "difficulty": 900, "testcases": "[{'input': '5 3\\r\\n-6 0 35 -2 4\\r\\n', 'output': ['8\\r\\n']}, {'input': '4 2\\r\\n7 0 0 -7\\r\\n', 'output': ['7\\r\\n']}, {'input': '6 6\\r\\n756 -611 251 -66 572 -818\\r\\n', 'output': ['1495\\r\\n']}, {'input': '5 5\\r\\n976 437 937 788 518\\r\\n', 'output': ['0\\r\\n']}, {'input': '5 3\\r\\n-2 -2 -2 -2 -2\\r\\n', 'output': ['6\\r\\n']}, {'input': '5 1\\r\\n998 997 985 937 998\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 2\\r\\n-742 -187\\r\\n', 'output': ['929\\r\\n']}, {'input': '3 3\\r\\n522 597 384\\r\\n', 'output': ['0\\r\\n']}, {'input': '4 2\\r\\n-215 -620 192 647\\r\\n', 'output': ['835\\r\\n']}, {'input': '10 6\\r\\n557 605 685 231 910 633 130 838 -564 -85\\r\\n', 'output': ['649\\r\\n']}, {'input': '20 14\\r\\n932 442 960 943 624 624 955 998 631 910 850 517 715 123 1000 155 -10 961 966 59\\r\\n', 'output': ['10\\r\\n']}, {'input': '30 5\\r\\n991 997 996 967 977 999 991 986 1000 965 984 997 998 1000 958 983 974 1000 991 999 1000 978 961 992 990 998 998 978 998 1000\\r\\n', 'output': ['0\\r\\n']}, {'input': '50 20\\r\\n-815 -947 -946 -993 -992 -846 -884 -954 -963 -733 -940 -746 -766 -930 -821 -937 -937 -999 -914 -938 -936 -975 -939 -981 -977 -952 -925 -901 -952 -978 -994 -957 -946 -896 -905 -836 -994 -951 -887 -939 -859 -953 -985 -988 -946 -829 -956 -842 -799 -886\\r\\n', 'output': ['19441\\r\\n']}, {'input': '88 64\\r\\n999 999 1000 1000 999 996 995 1000 1000 999 1000 997 998 1000 999 1000 997 1000 993 998 994 999 998 996 1000 997 1000 1000 1000 997 1000 998 997 1000 1000 998 1000 998 999 1000 996 999 999 999 996 995 999 1000 998 999 1000 999 999 1000 1000 1000 996 1000 1000 1000 997 1000 1000 997 999 1000 1000 1000 1000 1000 999 999 1000 1000 996 999 1000 1000 995 999 1000 996 1000 998 999 999 1000 999\\r\\n', 'output': ['0\\r\\n']}, {'input': '99 17\\r\\n-993 -994 -959 -989 -991 -995 -976 -997 -990 -1000 -996 -994 -999 -995 -1000 -983 -979 -1000 -989 -968 -994 -992 -962 -993 -999 -983 -991 -979 -995 -993 -973 -999 -995 -995 -999 -993 -995 -992 -947 -1000 -999 -998 -982 -988 -979 -993 -963 -988 -980 -990 -979 -976 -995 -999 -981 -988 -998 -999 -970 -1000 -983 -994 -943 -975 -998 -977 -973 -997 -959 -999 -983 -985 -950 -977 -977 -991 -998 -973 -987 -985 -985 -986 -984 -994 -978 -998 -989 -989 -988 -970 -985 -974 -997 -981 -962 -972 -995 -988 -993\\r\\n', 'output': ['16984\\r\\n']}, {'input': '100 37\\r\\n205 19 -501 404 912 -435 -322 -469 -655 880 -804 -470 793 312 -108 586 -642 -928 906 605 -353 -800 745 -440 -207 752 -50 -28 498 -800 -62 -195 602 -833 489 352 536 404 -775 23 145 -512 524 759 651 -461 -427 -557 684 -366 62 592 -563 -811 64 418 -881 -308 591 -318 -145 -261 -321 -216 -18 595 -202 960 -4 219 226 -238 -882 -963 425 970 -434 -160 243 -672 -4 873 8 -633 904 -298 -151 -377 -61 -72 -677 -66 197 -716 3 -870 -30 152 -469 981\\r\\n', 'output': ['21743\\r\\n']}, {'input': '100 99\\r\\n-931 -806 -830 -828 -916 -962 -660 -867 -952 -966 -820 -906 -724 -982 -680 -717 -488 -741 -897 -613 -986 -797 -964 -939 -808 -932 -810 -860 -641 -916 -858 -628 -821 -929 -917 -976 -664 -985 -778 -665 -624 -928 -940 -958 -884 -757 -878 -896 -634 -526 -514 -873 -990 -919 -988 -878 -650 -973 -774 -783 -733 -648 -756 -895 -833 -974 -832 -725 -841 -748 -806 -613 -924 -867 -881 -943 -864 -991 -809 -926 -777 -817 -998 -682 -910 -996 -241 -722 -964 -904 -821 -920 -835 -699 -805 -632 -779 -317 -915 -654\\r\\n', 'output': ['81283\\r\\n']}, {'input': '100 14\\r\\n995 994 745 684 510 737 984 690 979 977 542 933 871 603 758 653 962 997 747 974 773 766 975 770 527 960 841 989 963 865 974 967 950 984 757 685 986 809 982 959 931 880 978 867 805 562 970 900 834 782 616 885 910 608 974 918 576 700 871 980 656 941 978 759 767 840 573 859 841 928 693 853 716 927 976 851 962 962 627 797 707 873 869 988 993 533 665 887 962 880 929 980 877 887 572 790 721 883 848 782\\r\\n', 'output': ['0\\r\\n']}, {'input': '100 84\\r\\n768 946 998 752 931 912 826 1000 991 910 875 962 901 952 958 733 959 908 872 840 923 826 952 980 974 980 947 955 959 822 997 963 966 933 829 923 971 999 926 932 865 984 974 858 994 855 949 941 992 861 951 949 991 711 763 728 935 485 716 907 869 952 960 859 909 963 978 942 968 933 923 909 997 962 687 764 924 774 875 1000 961 951 987 974 848 921 966 859 995 997 974 931 886 941 974 986 906 978 998 823\\r\\n', 'output': ['0\\r\\n']}, {'input': '100 80\\r\\n-795 -994 -833 -930 -974 -980 -950 -940 -788 -927 -583 -956 -945 -949 -809 -974 -957 -736 -967 -908 -975 -961 -986 -983 -963 -771 -952 -847 -751 -741 -982 -959 -925 -931 -839 -937 -880 -914 -858 -998 -812 -911 -862 -965 -943 -984 -738 -920 -950 -998 -909 -998 -781 -901 -677 -940 -985 -951 -675 -952 -967 -949 -882 -641 -969 -937 -975 -993 -913 -941 -807 -851 -832 -960 -939 -943 -895 -929 -528 -880 -823 -930 -888 -862 -948 -966 -962 -857 -799 -969 -833 -998 -952 -878 -946 -971 -976 -974 -723 -992\\r\\n', 'output': ['75068\\r\\n']}, {'input': '1 1\\r\\n0\\r\\n', 'output': ['0\\r\\n']}, {'input': '1 1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '1 1\\r\\n555\\r\\n', 'output': ['0\\r\\n']}, {'input': '1 1\\r\\n-1\\r\\n', 'output': ['1\\r\\n']}, {'input': '1 1\\r\\n-24\\r\\n', 'output': ['24\\r\\n']}]", "source_code": "import java.io.*;\nimport static java.util.Collections.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class test{\n \n \n \n \n \n \n \n \n\n\n \n    public static void main(String args[]) throws IOException {\n \n    InputStreamReader ipsr=new InputStreamReader(System.in);\n    BufferedReader br=new BufferedReader(ipsr);\n    String s[]=br.readLine().split(\" \");\n    int n=Integer.parseInt(s[0]),m=Integer.parseInt(s[1]);\n    int arr[]=new int[n];\n    s=br.readLine().split(\" \");\n    int max=-1000,maxx=0;\n    int c=0;\n    for(int i=0;i<n;i++){\n     \n      if(i%2==0){\n        arr[i]=Integer.parseInt(s[i]);\n      }\n      else{\n        arr[i]=Integer.parseInt(s[i])*(-1);\n      }\n      if(arr[i]>max){\n          max=arr[i];\n      }\n    }\n    for(int i=0;i<n;i++){\n      if(arr[i]<0){\n        c++;\n      }\n    }\n    maxx=max-c;\n    if(c<=m){\n      System.out.println(max);\n    }\n    else\n      System.out.println(maxx);\n    }\n}\n"}
{"src_uid": "9a56288d8bd4e4e7ef3329e102f745a5", "id": 86, "lang_cluster": "java", "lang": "Java 11", "difficulty": 900, "testcases": "[{'input': '5 3\\r\\n-6 0 35 -2 4\\r\\n', 'output': ['8\\r\\n']}, {'input': '4 2\\r\\n7 0 0 -7\\r\\n', 'output': ['7\\r\\n']}, {'input': '6 6\\r\\n756 -611 251 -66 572 -818\\r\\n', 'output': ['1495\\r\\n']}, {'input': '5 5\\r\\n976 437 937 788 518\\r\\n', 'output': ['0\\r\\n']}, {'input': '5 3\\r\\n-2 -2 -2 -2 -2\\r\\n', 'output': ['6\\r\\n']}, {'input': '5 1\\r\\n998 997 985 937 998\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 2\\r\\n-742 -187\\r\\n', 'output': ['929\\r\\n']}, {'input': '3 3\\r\\n522 597 384\\r\\n', 'output': ['0\\r\\n']}, {'input': '4 2\\r\\n-215 -620 192 647\\r\\n', 'output': ['835\\r\\n']}, {'input': '10 6\\r\\n557 605 685 231 910 633 130 838 -564 -85\\r\\n', 'output': ['649\\r\\n']}, {'input': '20 14\\r\\n932 442 960 943 624 624 955 998 631 910 850 517 715 123 1000 155 -10 961 966 59\\r\\n', 'output': ['10\\r\\n']}, {'input': '30 5\\r\\n991 997 996 967 977 999 991 986 1000 965 984 997 998 1000 958 983 974 1000 991 999 1000 978 961 992 990 998 998 978 998 1000\\r\\n', 'output': ['0\\r\\n']}, {'input': '50 20\\r\\n-815 -947 -946 -993 -992 -846 -884 -954 -963 -733 -940 -746 -766 -930 -821 -937 -937 -999 -914 -938 -936 -975 -939 -981 -977 -952 -925 -901 -952 -978 -994 -957 -946 -896 -905 -836 -994 -951 -887 -939 -859 -953 -985 -988 -946 -829 -956 -842 -799 -886\\r\\n', 'output': ['19441\\r\\n']}, {'input': '88 64\\r\\n999 999 1000 1000 999 996 995 1000 1000 999 1000 997 998 1000 999 1000 997 1000 993 998 994 999 998 996 1000 997 1000 1000 1000 997 1000 998 997 1000 1000 998 1000 998 999 1000 996 999 999 999 996 995 999 1000 998 999 1000 999 999 1000 1000 1000 996 1000 1000 1000 997 1000 1000 997 999 1000 1000 1000 1000 1000 999 999 1000 1000 996 999 1000 1000 995 999 1000 996 1000 998 999 999 1000 999\\r\\n', 'output': ['0\\r\\n']}, {'input': '99 17\\r\\n-993 -994 -959 -989 -991 -995 -976 -997 -990 -1000 -996 -994 -999 -995 -1000 -983 -979 -1000 -989 -968 -994 -992 -962 -993 -999 -983 -991 -979 -995 -993 -973 -999 -995 -995 -999 -993 -995 -992 -947 -1000 -999 -998 -982 -988 -979 -993 -963 -988 -980 -990 -979 -976 -995 -999 -981 -988 -998 -999 -970 -1000 -983 -994 -943 -975 -998 -977 -973 -997 -959 -999 -983 -985 -950 -977 -977 -991 -998 -973 -987 -985 -985 -986 -984 -994 -978 -998 -989 -989 -988 -970 -985 -974 -997 -981 -962 -972 -995 -988 -993\\r\\n', 'output': ['16984\\r\\n']}, {'input': '100 37\\r\\n205 19 -501 404 912 -435 -322 -469 -655 880 -804 -470 793 312 -108 586 -642 -928 906 605 -353 -800 745 -440 -207 752 -50 -28 498 -800 -62 -195 602 -833 489 352 536 404 -775 23 145 -512 524 759 651 -461 -427 -557 684 -366 62 592 -563 -811 64 418 -881 -308 591 -318 -145 -261 -321 -216 -18 595 -202 960 -4 219 226 -238 -882 -963 425 970 -434 -160 243 -672 -4 873 8 -633 904 -298 -151 -377 -61 -72 -677 -66 197 -716 3 -870 -30 152 -469 981\\r\\n', 'output': ['21743\\r\\n']}, {'input': '100 99\\r\\n-931 -806 -830 -828 -916 -962 -660 -867 -952 -966 -820 -906 -724 -982 -680 -717 -488 -741 -897 -613 -986 -797 -964 -939 -808 -932 -810 -860 -641 -916 -858 -628 -821 -929 -917 -976 -664 -985 -778 -665 -624 -928 -940 -958 -884 -757 -878 -896 -634 -526 -514 -873 -990 -919 -988 -878 -650 -973 -774 -783 -733 -648 -756 -895 -833 -974 -832 -725 -841 -748 -806 -613 -924 -867 -881 -943 -864 -991 -809 -926 -777 -817 -998 -682 -910 -996 -241 -722 -964 -904 -821 -920 -835 -699 -805 -632 -779 -317 -915 -654\\r\\n', 'output': ['81283\\r\\n']}, {'input': '100 14\\r\\n995 994 745 684 510 737 984 690 979 977 542 933 871 603 758 653 962 997 747 974 773 766 975 770 527 960 841 989 963 865 974 967 950 984 757 685 986 809 982 959 931 880 978 867 805 562 970 900 834 782 616 885 910 608 974 918 576 700 871 980 656 941 978 759 767 840 573 859 841 928 693 853 716 927 976 851 962 962 627 797 707 873 869 988 993 533 665 887 962 880 929 980 877 887 572 790 721 883 848 782\\r\\n', 'output': ['0\\r\\n']}, {'input': '100 84\\r\\n768 946 998 752 931 912 826 1000 991 910 875 962 901 952 958 733 959 908 872 840 923 826 952 980 974 980 947 955 959 822 997 963 966 933 829 923 971 999 926 932 865 984 974 858 994 855 949 941 992 861 951 949 991 711 763 728 935 485 716 907 869 952 960 859 909 963 978 942 968 933 923 909 997 962 687 764 924 774 875 1000 961 951 987 974 848 921 966 859 995 997 974 931 886 941 974 986 906 978 998 823\\r\\n', 'output': ['0\\r\\n']}, {'input': '100 80\\r\\n-795 -994 -833 -930 -974 -980 -950 -940 -788 -927 -583 -956 -945 -949 -809 -974 -957 -736 -967 -908 -975 -961 -986 -983 -963 -771 -952 -847 -751 -741 -982 -959 -925 -931 -839 -937 -880 -914 -858 -998 -812 -911 -862 -965 -943 -984 -738 -920 -950 -998 -909 -998 -781 -901 -677 -940 -985 -951 -675 -952 -967 -949 -882 -641 -969 -937 -975 -993 -913 -941 -807 -851 -832 -960 -939 -943 -895 -929 -528 -880 -823 -930 -888 -862 -948 -966 -962 -857 -799 -969 -833 -998 -952 -878 -946 -971 -976 -974 -723 -992\\r\\n', 'output': ['75068\\r\\n']}, {'input': '1 1\\r\\n0\\r\\n', 'output': ['0\\r\\n']}, {'input': '1 1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '1 1\\r\\n555\\r\\n', 'output': ['0\\r\\n']}, {'input': '1 1\\r\\n-1\\r\\n', 'output': ['1\\r\\n']}, {'input': '1 1\\r\\n-24\\r\\n', 'output': ['24\\r\\n']}]", "source_code": "/* package whatever; // don't place package name! */\n\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\n/* Name of the class has to be \"Main\" only if the class is public. */\npublic class Main\n{\n    public static void main (String[] args) throws java.lang.Exception\n    {\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n            String s[] = br.readLine().trim().split(\" \");\n            int n = Integer.parseInt(s[0]);\n            int m = Integer.parseInt(s[1]);\n            int max = Integer.MIN_VALUE;\n            int cost[] = new int[n];\n            s = br.readLine().trim().split(\" \");\n            for (int i = 0 ; i < n ; i++) {\n                cost[i] = Integer.parseInt(s[i]);\n                if (cost[i] > max) max = cost[i];\n            }\n            int price = 0;\n            for (int i = 0 ; i < n ; i++) {\n                if (cost[i] < 0) price++;\n                if (price == m) break;\n            }\n            System.out.print(max);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n"}
{"src_uid": "9a56288d8bd4e4e7ef3329e102f745a5", "id": 86, "lang_cluster": "java", "lang": "Java 11", "difficulty": 900, "testcases": "[{'input': '5 3\\r\\n-6 0 35 -2 4\\r\\n', 'output': ['8\\r\\n']}, {'input': '4 2\\r\\n7 0 0 -7\\r\\n', 'output': ['7\\r\\n']}, {'input': '6 6\\r\\n756 -611 251 -66 572 -818\\r\\n', 'output': ['1495\\r\\n']}, {'input': '5 5\\r\\n976 437 937 788 518\\r\\n', 'output': ['0\\r\\n']}, {'input': '5 3\\r\\n-2 -2 -2 -2 -2\\r\\n', 'output': ['6\\r\\n']}, {'input': '5 1\\r\\n998 997 985 937 998\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 2\\r\\n-742 -187\\r\\n', 'output': ['929\\r\\n']}, {'input': '3 3\\r\\n522 597 384\\r\\n', 'output': ['0\\r\\n']}, {'input': '4 2\\r\\n-215 -620 192 647\\r\\n', 'output': ['835\\r\\n']}, {'input': '10 6\\r\\n557 605 685 231 910 633 130 838 -564 -85\\r\\n', 'output': ['649\\r\\n']}, {'input': '20 14\\r\\n932 442 960 943 624 624 955 998 631 910 850 517 715 123 1000 155 -10 961 966 59\\r\\n', 'output': ['10\\r\\n']}, {'input': '30 5\\r\\n991 997 996 967 977 999 991 986 1000 965 984 997 998 1000 958 983 974 1000 991 999 1000 978 961 992 990 998 998 978 998 1000\\r\\n', 'output': ['0\\r\\n']}, {'input': '50 20\\r\\n-815 -947 -946 -993 -992 -846 -884 -954 -963 -733 -940 -746 -766 -930 -821 -937 -937 -999 -914 -938 -936 -975 -939 -981 -977 -952 -925 -901 -952 -978 -994 -957 -946 -896 -905 -836 -994 -951 -887 -939 -859 -953 -985 -988 -946 -829 -956 -842 -799 -886\\r\\n', 'output': ['19441\\r\\n']}, {'input': '88 64\\r\\n999 999 1000 1000 999 996 995 1000 1000 999 1000 997 998 1000 999 1000 997 1000 993 998 994 999 998 996 1000 997 1000 1000 1000 997 1000 998 997 1000 1000 998 1000 998 999 1000 996 999 999 999 996 995 999 1000 998 999 1000 999 999 1000 1000 1000 996 1000 1000 1000 997 1000 1000 997 999 1000 1000 1000 1000 1000 999 999 1000 1000 996 999 1000 1000 995 999 1000 996 1000 998 999 999 1000 999\\r\\n', 'output': ['0\\r\\n']}, {'input': '99 17\\r\\n-993 -994 -959 -989 -991 -995 -976 -997 -990 -1000 -996 -994 -999 -995 -1000 -983 -979 -1000 -989 -968 -994 -992 -962 -993 -999 -983 -991 -979 -995 -993 -973 -999 -995 -995 -999 -993 -995 -992 -947 -1000 -999 -998 -982 -988 -979 -993 -963 -988 -980 -990 -979 -976 -995 -999 -981 -988 -998 -999 -970 -1000 -983 -994 -943 -975 -998 -977 -973 -997 -959 -999 -983 -985 -950 -977 -977 -991 -998 -973 -987 -985 -985 -986 -984 -994 -978 -998 -989 -989 -988 -970 -985 -974 -997 -981 -962 -972 -995 -988 -993\\r\\n', 'output': ['16984\\r\\n']}, {'input': '100 37\\r\\n205 19 -501 404 912 -435 -322 -469 -655 880 -804 -470 793 312 -108 586 -642 -928 906 605 -353 -800 745 -440 -207 752 -50 -28 498 -800 -62 -195 602 -833 489 352 536 404 -775 23 145 -512 524 759 651 -461 -427 -557 684 -366 62 592 -563 -811 64 418 -881 -308 591 -318 -145 -261 -321 -216 -18 595 -202 960 -4 219 226 -238 -882 -963 425 970 -434 -160 243 -672 -4 873 8 -633 904 -298 -151 -377 -61 -72 -677 -66 197 -716 3 -870 -30 152 -469 981\\r\\n', 'output': ['21743\\r\\n']}, {'input': '100 99\\r\\n-931 -806 -830 -828 -916 -962 -660 -867 -952 -966 -820 -906 -724 -982 -680 -717 -488 -741 -897 -613 -986 -797 -964 -939 -808 -932 -810 -860 -641 -916 -858 -628 -821 -929 -917 -976 -664 -985 -778 -665 -624 -928 -940 -958 -884 -757 -878 -896 -634 -526 -514 -873 -990 -919 -988 -878 -650 -973 -774 -783 -733 -648 -756 -895 -833 -974 -832 -725 -841 -748 -806 -613 -924 -867 -881 -943 -864 -991 -809 -926 -777 -817 -998 -682 -910 -996 -241 -722 -964 -904 -821 -920 -835 -699 -805 -632 -779 -317 -915 -654\\r\\n', 'output': ['81283\\r\\n']}, {'input': '100 14\\r\\n995 994 745 684 510 737 984 690 979 977 542 933 871 603 758 653 962 997 747 974 773 766 975 770 527 960 841 989 963 865 974 967 950 984 757 685 986 809 982 959 931 880 978 867 805 562 970 900 834 782 616 885 910 608 974 918 576 700 871 980 656 941 978 759 767 840 573 859 841 928 693 853 716 927 976 851 962 962 627 797 707 873 869 988 993 533 665 887 962 880 929 980 877 887 572 790 721 883 848 782\\r\\n', 'output': ['0\\r\\n']}, {'input': '100 84\\r\\n768 946 998 752 931 912 826 1000 991 910 875 962 901 952 958 733 959 908 872 840 923 826 952 980 974 980 947 955 959 822 997 963 966 933 829 923 971 999 926 932 865 984 974 858 994 855 949 941 992 861 951 949 991 711 763 728 935 485 716 907 869 952 960 859 909 963 978 942 968 933 923 909 997 962 687 764 924 774 875 1000 961 951 987 974 848 921 966 859 995 997 974 931 886 941 974 986 906 978 998 823\\r\\n', 'output': ['0\\r\\n']}, {'input': '100 80\\r\\n-795 -994 -833 -930 -974 -980 -950 -940 -788 -927 -583 -956 -945 -949 -809 -974 -957 -736 -967 -908 -975 -961 -986 -983 -963 -771 -952 -847 -751 -741 -982 -959 -925 -931 -839 -937 -880 -914 -858 -998 -812 -911 -862 -965 -943 -984 -738 -920 -950 -998 -909 -998 -781 -901 -677 -940 -985 -951 -675 -952 -967 -949 -882 -641 -969 -937 -975 -993 -913 -941 -807 -851 -832 -960 -939 -943 -895 -929 -528 -880 -823 -930 -888 -862 -948 -966 -962 -857 -799 -969 -833 -998 -952 -878 -946 -971 -976 -974 -723 -992\\r\\n', 'output': ['75068\\r\\n']}, {'input': '1 1\\r\\n0\\r\\n', 'output': ['0\\r\\n']}, {'input': '1 1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '1 1\\r\\n555\\r\\n', 'output': ['0\\r\\n']}, {'input': '1 1\\r\\n-1\\r\\n', 'output': ['1\\r\\n']}, {'input': '1 1\\r\\n-24\\r\\n', 'output': ['24\\r\\n']}]", "source_code": "import java.io.DataInputStream;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.stream.Stream;\n\n/**\n *\n * @author Jithin\n */\npublic class Main {\n\n  \n\n    \n    public static void main(String[] args) throws NumberFormatException, IOException {\n        // TODO code application logic here\n        \n    //  InputStream is = System.in;\n        DataInputStream dis = new DataInputStream(System.in);\n        int n = Integer.parseInt(dis.readLine().split(\" \")[0]);\n        int m = Integer.parseInt(dis.readLine().split(\" \")[1]);\n        int[] a = new int[n];\n        String s = dis.readLine();\n        for(int i = 0 ; i < n ; i++){\n            a[i] = Integer.parseInt(s.split(\" \")[i]);\n        }\n        int index = 0 ;\n        int count = 0;\n        int ans = 0 ;\n        while(count!= m){\n            if(a[index] < 0){\n                ans += Math.abs(a[index++]);\n                count++;\n            }\n            index++;\n        }\n        System.out.println(ans);\n    }\n}"}
{"src_uid": "9a56288d8bd4e4e7ef3329e102f745a5", "id": 86, "lang_cluster": "java", "lang": "Java 11", "difficulty": 900, "testcases": "[{'input': '5 3\\r\\n-6 0 35 -2 4\\r\\n', 'output': ['8\\r\\n']}, {'input': '4 2\\r\\n7 0 0 -7\\r\\n', 'output': ['7\\r\\n']}, {'input': '6 6\\r\\n756 -611 251 -66 572 -818\\r\\n', 'output': ['1495\\r\\n']}, {'input': '5 5\\r\\n976 437 937 788 518\\r\\n', 'output': ['0\\r\\n']}, {'input': '5 3\\r\\n-2 -2 -2 -2 -2\\r\\n', 'output': ['6\\r\\n']}, {'input': '5 1\\r\\n998 997 985 937 998\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 2\\r\\n-742 -187\\r\\n', 'output': ['929\\r\\n']}, {'input': '3 3\\r\\n522 597 384\\r\\n', 'output': ['0\\r\\n']}, {'input': '4 2\\r\\n-215 -620 192 647\\r\\n', 'output': ['835\\r\\n']}, {'input': '10 6\\r\\n557 605 685 231 910 633 130 838 -564 -85\\r\\n', 'output': ['649\\r\\n']}, {'input': '20 14\\r\\n932 442 960 943 624 624 955 998 631 910 850 517 715 123 1000 155 -10 961 966 59\\r\\n', 'output': ['10\\r\\n']}, {'input': '30 5\\r\\n991 997 996 967 977 999 991 986 1000 965 984 997 998 1000 958 983 974 1000 991 999 1000 978 961 992 990 998 998 978 998 1000\\r\\n', 'output': ['0\\r\\n']}, {'input': '50 20\\r\\n-815 -947 -946 -993 -992 -846 -884 -954 -963 -733 -940 -746 -766 -930 -821 -937 -937 -999 -914 -938 -936 -975 -939 -981 -977 -952 -925 -901 -952 -978 -994 -957 -946 -896 -905 -836 -994 -951 -887 -939 -859 -953 -985 -988 -946 -829 -956 -842 -799 -886\\r\\n', 'output': ['19441\\r\\n']}, {'input': '88 64\\r\\n999 999 1000 1000 999 996 995 1000 1000 999 1000 997 998 1000 999 1000 997 1000 993 998 994 999 998 996 1000 997 1000 1000 1000 997 1000 998 997 1000 1000 998 1000 998 999 1000 996 999 999 999 996 995 999 1000 998 999 1000 999 999 1000 1000 1000 996 1000 1000 1000 997 1000 1000 997 999 1000 1000 1000 1000 1000 999 999 1000 1000 996 999 1000 1000 995 999 1000 996 1000 998 999 999 1000 999\\r\\n', 'output': ['0\\r\\n']}, {'input': '99 17\\r\\n-993 -994 -959 -989 -991 -995 -976 -997 -990 -1000 -996 -994 -999 -995 -1000 -983 -979 -1000 -989 -968 -994 -992 -962 -993 -999 -983 -991 -979 -995 -993 -973 -999 -995 -995 -999 -993 -995 -992 -947 -1000 -999 -998 -982 -988 -979 -993 -963 -988 -980 -990 -979 -976 -995 -999 -981 -988 -998 -999 -970 -1000 -983 -994 -943 -975 -998 -977 -973 -997 -959 -999 -983 -985 -950 -977 -977 -991 -998 -973 -987 -985 -985 -986 -984 -994 -978 -998 -989 -989 -988 -970 -985 -974 -997 -981 -962 -972 -995 -988 -993\\r\\n', 'output': ['16984\\r\\n']}, {'input': '100 37\\r\\n205 19 -501 404 912 -435 -322 -469 -655 880 -804 -470 793 312 -108 586 -642 -928 906 605 -353 -800 745 -440 -207 752 -50 -28 498 -800 -62 -195 602 -833 489 352 536 404 -775 23 145 -512 524 759 651 -461 -427 -557 684 -366 62 592 -563 -811 64 418 -881 -308 591 -318 -145 -261 -321 -216 -18 595 -202 960 -4 219 226 -238 -882 -963 425 970 -434 -160 243 -672 -4 873 8 -633 904 -298 -151 -377 -61 -72 -677 -66 197 -716 3 -870 -30 152 -469 981\\r\\n', 'output': ['21743\\r\\n']}, {'input': '100 99\\r\\n-931 -806 -830 -828 -916 -962 -660 -867 -952 -966 -820 -906 -724 -982 -680 -717 -488 -741 -897 -613 -986 -797 -964 -939 -808 -932 -810 -860 -641 -916 -858 -628 -821 -929 -917 -976 -664 -985 -778 -665 -624 -928 -940 -958 -884 -757 -878 -896 -634 -526 -514 -873 -990 -919 -988 -878 -650 -973 -774 -783 -733 -648 -756 -895 -833 -974 -832 -725 -841 -748 -806 -613 -924 -867 -881 -943 -864 -991 -809 -926 -777 -817 -998 -682 -910 -996 -241 -722 -964 -904 -821 -920 -835 -699 -805 -632 -779 -317 -915 -654\\r\\n', 'output': ['81283\\r\\n']}, {'input': '100 14\\r\\n995 994 745 684 510 737 984 690 979 977 542 933 871 603 758 653 962 997 747 974 773 766 975 770 527 960 841 989 963 865 974 967 950 984 757 685 986 809 982 959 931 880 978 867 805 562 970 900 834 782 616 885 910 608 974 918 576 700 871 980 656 941 978 759 767 840 573 859 841 928 693 853 716 927 976 851 962 962 627 797 707 873 869 988 993 533 665 887 962 880 929 980 877 887 572 790 721 883 848 782\\r\\n', 'output': ['0\\r\\n']}, {'input': '100 84\\r\\n768 946 998 752 931 912 826 1000 991 910 875 962 901 952 958 733 959 908 872 840 923 826 952 980 974 980 947 955 959 822 997 963 966 933 829 923 971 999 926 932 865 984 974 858 994 855 949 941 992 861 951 949 991 711 763 728 935 485 716 907 869 952 960 859 909 963 978 942 968 933 923 909 997 962 687 764 924 774 875 1000 961 951 987 974 848 921 966 859 995 997 974 931 886 941 974 986 906 978 998 823\\r\\n', 'output': ['0\\r\\n']}, {'input': '100 80\\r\\n-795 -994 -833 -930 -974 -980 -950 -940 -788 -927 -583 -956 -945 -949 -809 -974 -957 -736 -967 -908 -975 -961 -986 -983 -963 -771 -952 -847 -751 -741 -982 -959 -925 -931 -839 -937 -880 -914 -858 -998 -812 -911 -862 -965 -943 -984 -738 -920 -950 -998 -909 -998 -781 -901 -677 -940 -985 -951 -675 -952 -967 -949 -882 -641 -969 -937 -975 -993 -913 -941 -807 -851 -832 -960 -939 -943 -895 -929 -528 -880 -823 -930 -888 -862 -948 -966 -962 -857 -799 -969 -833 -998 -952 -878 -946 -971 -976 -974 -723 -992\\r\\n', 'output': ['75068\\r\\n']}, {'input': '1 1\\r\\n0\\r\\n', 'output': ['0\\r\\n']}, {'input': '1 1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '1 1\\r\\n555\\r\\n', 'output': ['0\\r\\n']}, {'input': '1 1\\r\\n-1\\r\\n', 'output': ['1\\r\\n']}, {'input': '1 1\\r\\n-24\\r\\n', 'output': ['24\\r\\n']}]", "source_code": "import java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\nimport static java.util.stream.Collectors.*;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class HelloWorld {\n\n  \n  \n    public static void main(String[] args) {\n       \n      // System.out.println(factorial(5));\n       \n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt(), m = sc.nextInt();\n        int[] prices = new int[n];\n        \n        Arrays.fill(prices,0);\n        \n        for(int i = 0 ; i < n ; i ++){\n            prices[i] = sc.nextInt();\n        }\n        \n        for(int i = 0 ; i < n ; ++i){\n            int min = findMin(prices);\n            if(prices[i] >= 0)\n                prices[i] = prices[i] + min;\n        }\n        \n        int sum = 0;\n        int count = 0;\n        for(int i = 0 ; i < n ; ++i){\n           if(prices[i] > 0){\n               ++count;\n               sum += prices[i]; \n           } \n        }\n       \n        int[] sarr = new int[count];\n        int index = 0;\n        \n        for(int j = 0 ; j < n ; ++j){\n            if(prices[j] > 0)\n                sarr[index++] = prices[j];\n        }\n        \n        Arrays.sort(sarr);\n        \n        int ans = 0;\n        for(int k = 0 ; k < m ; ++k)\n            ans += sarr[k];\n        \n        System.out.println(ans);\n        \n    }\n    \n    static int findMin(int[] a){\n        int min = a[0];\n        for(int i = 0 ; i < a.length ; ++i){\n            if(min > a[i])\n                min = a[i];\n        }\n        return min;\n    }\n\n}\n"}
{"src_uid": "69850c2af99d60711bcff5870575e15e", "id": 87, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '3\\r\\n5 6\\r\\n1 2\\r\\n', 'output': ['5\\r\\n']}, {'input': '3\\r\\n5 6\\r\\n1 3\\r\\n', 'output': ['11\\r\\n']}, {'input': '2\\r\\n55\\r\\n1 2\\r\\n', 'output': ['55\\r\\n']}, {'input': '3\\r\\n85 78\\r\\n1 3\\r\\n', 'output': ['163\\r\\n']}, {'input': '4\\r\\n63 4 49\\r\\n2 3\\r\\n', 'output': ['4\\r\\n']}, {'input': '5\\r\\n93 83 42 56\\r\\n2 5\\r\\n', 'output': ['181\\r\\n']}, {'input': '6\\r\\n22 9 87 89 57\\r\\n1 6\\r\\n', 'output': ['264\\r\\n']}, {'input': '7\\r\\n52 36 31 23 74 78\\r\\n2 7\\r\\n', 'output': ['242\\r\\n']}, {'input': '8\\r\\n82 14 24 5 91 49 94\\r\\n3 8\\r\\n', 'output': ['263\\r\\n']}, {'input': '9\\r\\n12 40 69 39 59 21 59 5\\r\\n4 6\\r\\n', 'output': ['98\\r\\n']}, {'input': '10\\r\\n95 81 32 59 71 30 50 61 100\\r\\n1 6\\r\\n', 'output': ['338\\r\\n']}, {'input': '15\\r\\n89 55 94 4 15 69 19 60 91 77 3 94 91 62\\r\\n3 14\\r\\n', 'output': ['617\\r\\n']}, {'input': '20\\r\\n91 1 41 51 95 67 92 35 23 70 44 91 57 50 21 8 9 71 40\\r\\n8 17\\r\\n', 'output': ['399\\r\\n']}, {'input': '25\\r\\n70 95 21 84 97 39 12 98 53 24 78 29 84 65 70 22 100 17 69 27 62 48 35 80\\r\\n8 23\\r\\n', 'output': ['846\\r\\n']}, {'input': '30\\r\\n35 69 50 44 19 56 86 56 98 24 21 2 61 24 85 30 2 22 57 35 59 84 12 77 92 53 50 92 9\\r\\n1 16\\r\\n', 'output': ['730\\r\\n']}, {'input': '35\\r\\n2 34 47 15 27 61 6 88 67 20 53 65 29 68 77 5 78 86 44 98 32 81 91 79 54 84 95 23 65 97 22 33 42 87\\r\\n8 35\\r\\n', 'output': ['1663\\r\\n']}, {'input': '40\\r\\n32 88 59 36 95 45 28 78 73 30 97 13 13 47 48 100 43 21 22 45 88 25 15 13 63 25 72 92 29 5 25 11 50 5 54 51 48 84 23\\r\\n7 26\\r\\n', 'output': ['862\\r\\n']}, {'input': '45\\r\\n83 74 73 95 10 31 100 26 29 15 80 100 22 70 31 88 9 56 19 70 2 62 48 30 27 47 52 50 94 44 21 94 23 85 15 3 95 72 43 62 94 89 68 88\\r\\n17 40\\r\\n', 'output': ['1061\\r\\n']}, {'input': '50\\r\\n28 8 16 29 19 82 70 51 96 84 74 72 17 69 12 21 37 21 39 3 18 66 19 49 86 96 94 93 2 90 96 84 59 88 58 15 61 33 55 22 35 54 51 29 64 68 29 38 40\\r\\n23 28\\r\\n', 'output': ['344\\r\\n']}, {'input': '60\\r\\n24 28 25 21 43 71 64 73 71 90 51 83 69 43 75 43 78 72 56 61 99 7 23 86 9 16 16 94 23 74 18 56 20 72 13 31 75 34 35 86 61 49 4 72 84 7 65 70 66 52 21 38 6 43 69 40 73 46 5\\r\\n28 60\\r\\n', 'output': ['1502\\r\\n']}, {'input': '70\\r\\n69 95 34 14 67 61 6 95 94 44 28 94 73 66 39 13 19 71 73 71 28 48 26 22 32 88 38 95 43 59 88 77 80 55 17 95 40 83 67 1 38 95 58 63 56 98 49 2 41 4 73 8 78 41 64 71 60 71 41 61 67 4 4 19 97 14 39 20 27\\r\\n9 41\\r\\n', 'output': ['1767\\r\\n']}, {'input': '80\\r\\n65 15 43 6 43 98 100 16 69 98 4 54 25 40 2 35 12 23 38 29 10 89 30 6 4 8 7 96 64 43 11 49 89 38 20 59 54 85 46 16 16 89 60 54 28 37 32 34 67 9 78 30 50 87 58 53 99 48 77 3 5 6 19 99 16 20 31 10 80 76 82 56 56 83 72 81 84 60 28\\r\\n18 24\\r\\n', 'output': ['219\\r\\n']}, {'input': '90\\r\\n61 35 100 99 67 87 42 90 44 4 81 65 29 63 66 56 53 22 55 87 39 30 34 42 27 80 29 97 85 28 81 22 50 22 24 75 67 86 78 79 94 35 13 97 48 76 68 66 94 13 82 1 22 85 5 36 86 73 65 97 43 56 35 26 87 25 74 47 81 67 73 75 99 75 53 38 70 21 66 78 38 17 57 40 93 57 68 55 1\\r\\n12 44\\r\\n', 'output': ['1713\\r\\n']}, {'input': '95\\r\\n37 74 53 96 65 84 65 72 95 45 6 77 91 35 58 50 51 51 97 30 51 20 79 81 92 10 89 34 40 76 71 54 26 34 73 72 72 28 53 19 95 64 97 10 44 15 12 38 5 63 96 95 86 8 36 96 45 53 81 5 18 18 47 97 65 9 33 53 41 86 37 53 5 40 15 76 83 45 33 18 26 5 19 90 46 40 100 42 10 90 13 81 40 53\\r\\n6 15\\r\\n', 'output': ['570\\r\\n']}, {'input': '96\\r\\n51 32 95 75 23 54 70 89 67 3 1 51 4 100 97 30 9 35 56 38 54 77 56 98 43 17 60 43 72 46 87 61 100 65 81 22 74 38 16 96 5 10 54 22 23 22 10 91 9 54 49 82 29 73 33 98 75 8 4 26 24 90 71 42 90 24 94 74 94 10 41 98 56 63 18 43 56 21 26 64 74 33 22 38 67 66 38 60 64 76 53 10 4 65 76\\r\\n21 26\\r\\n', 'output': ['328\\r\\n']}, {'input': '97\\r\\n18 90 84 7 33 24 75 55 86 10 96 72 16 64 37 9 19 71 62 97 5 34 85 15 46 72 82 51 52 16 55 68 27 97 42 72 76 97 32 73 14 56 11 86 2 81 59 95 60 93 1 22 71 37 77 100 6 16 78 47 78 62 94 86 16 91 56 46 47 35 93 44 7 86 70 10 29 45 67 62 71 61 74 39 36 92 24 26 65 14 93 92 15 28 79 59\\r\\n6 68\\r\\n', 'output': ['3385\\r\\n']}, {'input': '98\\r\\n32 47 26 86 43 42 79 72 6 68 40 46 29 80 24 89 29 7 21 56 8 92 13 33 50 79 5 7 84 85 24 23 1 80 51 21 26 55 96 51 24 2 68 98 81 88 57 100 64 84 54 10 14 2 74 1 89 71 1 20 84 85 17 31 42 58 69 67 48 60 97 90 58 10 21 29 2 21 60 61 68 89 77 39 57 18 61 44 67 100 33 74 27 40 83 29 6\\r\\n8 77\\r\\n', 'output': ['3319\\r\\n']}, {'input': '99\\r\\n46 5 16 66 53 12 84 89 26 27 35 68 41 44 63 17 88 43 80 15 59 1 42 50 53 34 75 16 16 55 92 30 28 11 12 71 27 65 11 28 86 47 24 10 60 47 7 53 16 75 6 49 56 66 70 3 20 78 75 41 38 57 89 23 16 74 30 39 1 32 49 84 9 33 25 95 75 45 54 59 17 17 29 40 79 96 47 11 69 86 73 56 91 4 87 47 31 24\\r\\n23 36\\r\\n', 'output': ['514\\r\\n']}, {'input': '100\\r\\n63 65 21 41 95 23 3 4 12 23 95 50 75 63 58 34 71 27 75 31 23 94 96 74 69 34 43 25 25 55 44 19 43 86 68 17 52 65 36 29 72 96 84 25 84 23 71 54 6 7 71 7 21 100 99 58 93 35 62 47 36 70 68 9 75 13 35 70 76 36 62 22 52 51 2 87 66 41 54 35 78 62 30 35 65 44 74 93 78 37 96 70 26 32 71 27 85 85 63\\r\\n43 92\\r\\n', 'output': ['2599\\r\\n']}, {'input': '51\\r\\n85 38 22 38 42 36 55 24 36 80 49 15 66 91 88 61 46 82 1 61 89 92 6 56 28 8 46 80 56 90 91 38 38 17 69 64 57 68 13 44 45 38 8 72 61 39 87 2 73 88\\r\\n15 27\\r\\n', 'output': ['618\\r\\n']}, {'input': '2\\r\\n3\\r\\n1 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\n6 8 22 22\\r\\n2 3\\r\\n', 'output': ['8\\r\\n']}, {'input': '6\\r\\n3 12 27 28 28\\r\\n3 4\\r\\n', 'output': ['27\\r\\n']}, {'input': '9\\r\\n1 2 2 2 2 3 3 5\\r\\n3 7\\r\\n', 'output': ['9\\r\\n']}, {'input': '10\\r\\n1 1 1 1 1 1 1 1 1\\r\\n6 8\\r\\n', 'output': ['2\\r\\n']}, {'input': '20\\r\\n1 1 1 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 3\\r\\n5 17\\r\\n', 'output': ['23\\r\\n']}, {'input': '25\\r\\n1 1 1 4 5 6 8 11 11 11 11 12 13 14 14 14 15 16 16 17 17 17 19 19\\r\\n4 8\\r\\n', 'output': ['23\\r\\n']}, {'input': '35\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\r\\n30 31\\r\\n', 'output': ['2\\r\\n']}, {'input': '45\\r\\n1 1 1 1 2 2 2 2 2 2 2 3 3 3 3 3 3 4 5 5 5 5 6 6 6 6 6 6 6 7 7 7 7 8 8 8 9 9 9 9 9 10 10 10\\r\\n42 45\\r\\n', 'output': ['30\\r\\n']}, {'input': '50\\r\\n1 8 8 13 14 15 15 16 19 21 22 24 26 31 32 37 45 47 47 47 50 50 51 54 55 56 58 61 61 61 63 63 64 66 66 67 67 70 71 80 83 84 85 92 92 94 95 95 100\\r\\n4 17\\r\\n', 'output': ['285\\r\\n']}, {'input': '60\\r\\n1 2 4 4 4 6 6 8 9 10 10 13 14 18 20 20 21 22 23 23 26 29 30 32 33 34 35 38 40 42 44 44 46 48 52 54 56 56 60 60 66 67 68 68 69 73 73 74 80 80 81 81 82 84 86 86 87 89 89\\r\\n56 58\\r\\n', 'output': ['173\\r\\n']}, {'input': '70\\r\\n1 2 3 3 4 5 5 7 7 7 8 8 8 8 9 9 10 12 12 12 12 13 16 16 16 16 16 16 17 17 18 18 20 20 21 23 24 25 25 26 29 29 29 29 31 32 32 34 35 36 36 37 37 38 39 39 40 40 40 40 41 41 42 43 44 44 44 45 45\\r\\n62 65\\r\\n', 'output': ['126\\r\\n']}, {'input': '80\\r\\n1 1 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 5 5 5 5 5 5 5 6 7 7 7 7 7 7 8 8 8 8 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12\\r\\n17 65\\r\\n', 'output': ['326\\r\\n']}, {'input': '90\\r\\n1 1 3 5 8 9 10 11 11 11 11 12 13 14 15 15 15 16 16 19 19 20 22 23 24 25 25 28 29 29 30 31 33 34 35 37 37 38 41 43 43 44 45 47 51 54 55 56 58 58 59 59 60 62 66 67 67 67 68 68 69 70 71 72 73 73 76 77 77 78 78 78 79 79 79 82 83 84 85 85 87 87 89 93 93 93 95 99 99\\r\\n28 48\\r\\n', 'output': ['784\\r\\n']}, {'input': '95\\r\\n2 2 3 3 4 6 6 7 7 7 9 10 12 12 12 12 13 14 15 16 17 18 20 20 20 20 21 21 21 21 22 22 22 22 22 23 23 23 25 26 26 27 27 27 28 29 29 30 30 31 32 33 34 36 37 37 38 39 39 39 42 43 43 43 45 47 48 50 50 51 52 53 54 54 54 55 55 55 58 59 60 61 61 61 61 62 62 63 64 65 66 67 67 67\\r\\n64 93\\r\\n', 'output': ['1636\\r\\n']}, {'input': '96\\r\\n1 1 2 3 3 5 8 9 9 10 10 10 11 11 11 11 11 12 13 13 13 14 15 15 16 16 17 17 17 17 18 18 20 20 20 21 21 21 23 24 24 25 25 26 27 27 27 27 29 29 29 30 30 30 32 32 32 32 32 32 33 33 34 34 34 35 35 35 36 36 37 37 37 38 39 40 41 41 41 41 42 42 43 43 45 45 45 46 46 47 47 49 50 52 52\\r\\n76 96\\r\\n', 'output': ['898\\r\\n']}, {'input': '98\\r\\n2 3 4 4 5 7 8 10 10 10 11 11 12 12 12 12 13 14 15 15 16 16 18 19 19 20 21 21 21 21 22 23 24 25 26 26 27 27 27 27 29 29 30 30 31 31 37 40 40 40 41 41 41 42 43 44 44 44 46 46 47 49 49 50 50 50 51 53 55 55 56 56 56 56 56 57 57 58 59 60 60 60 62 62 63 64 64 64 65 66 66 67 68 70 70 71 71\\r\\n8 90\\r\\n', 'output': ['3016\\r\\n']}, {'input': '99\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n66 95\\r\\n', 'output': ['29\\r\\n']}, {'input': '100\\r\\n1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 8 8 8 8 9 9 9 9 10 10 10 10 11 11 11 11 12 12 12 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 15 15 15 15 15 15 16 16 16 17 17\\r\\n39 52\\r\\n', 'output': ['82\\r\\n']}, {'input': '51\\r\\n5 7 9 16 19 25 26 29 29 30 31 32 32 41 43 44 47 49 50 50 51 52 54 55 56 63 64 66 67 70 74 74 77 78 79 80 80 85 86 87 89 89 90 92 93 94 94 95 95 97\\r\\n3 44\\r\\n', 'output': ['2268\\r\\n']}]", "source_code": "import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\n\npublic class Solution {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt(), a = in.nextInt(), b = in.nextInt();\n\t\tint arr[] = new int [n - 1];\n\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\tarr[i] = in.nextInt();\n\t\t}\n\t\tint res = 0;\n\t\tfor (int i = a ; i <= b; i++) {\n\t\t\tres += arr[i - 2];\n\t\t}\n\t\tSystem.out.println(res);\n\t}\n}"}
{"src_uid": "69850c2af99d60711bcff5870575e15e", "id": 87, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '3\\r\\n5 6\\r\\n1 2\\r\\n', 'output': ['5\\r\\n']}, {'input': '3\\r\\n5 6\\r\\n1 3\\r\\n', 'output': ['11\\r\\n']}, {'input': '2\\r\\n55\\r\\n1 2\\r\\n', 'output': ['55\\r\\n']}, {'input': '3\\r\\n85 78\\r\\n1 3\\r\\n', 'output': ['163\\r\\n']}, {'input': '4\\r\\n63 4 49\\r\\n2 3\\r\\n', 'output': ['4\\r\\n']}, {'input': '5\\r\\n93 83 42 56\\r\\n2 5\\r\\n', 'output': ['181\\r\\n']}, {'input': '6\\r\\n22 9 87 89 57\\r\\n1 6\\r\\n', 'output': ['264\\r\\n']}, {'input': '7\\r\\n52 36 31 23 74 78\\r\\n2 7\\r\\n', 'output': ['242\\r\\n']}, {'input': '8\\r\\n82 14 24 5 91 49 94\\r\\n3 8\\r\\n', 'output': ['263\\r\\n']}, {'input': '9\\r\\n12 40 69 39 59 21 59 5\\r\\n4 6\\r\\n', 'output': ['98\\r\\n']}, {'input': '10\\r\\n95 81 32 59 71 30 50 61 100\\r\\n1 6\\r\\n', 'output': ['338\\r\\n']}, {'input': '15\\r\\n89 55 94 4 15 69 19 60 91 77 3 94 91 62\\r\\n3 14\\r\\n', 'output': ['617\\r\\n']}, {'input': '20\\r\\n91 1 41 51 95 67 92 35 23 70 44 91 57 50 21 8 9 71 40\\r\\n8 17\\r\\n', 'output': ['399\\r\\n']}, {'input': '25\\r\\n70 95 21 84 97 39 12 98 53 24 78 29 84 65 70 22 100 17 69 27 62 48 35 80\\r\\n8 23\\r\\n', 'output': ['846\\r\\n']}, {'input': '30\\r\\n35 69 50 44 19 56 86 56 98 24 21 2 61 24 85 30 2 22 57 35 59 84 12 77 92 53 50 92 9\\r\\n1 16\\r\\n', 'output': ['730\\r\\n']}, {'input': '35\\r\\n2 34 47 15 27 61 6 88 67 20 53 65 29 68 77 5 78 86 44 98 32 81 91 79 54 84 95 23 65 97 22 33 42 87\\r\\n8 35\\r\\n', 'output': ['1663\\r\\n']}, {'input': '40\\r\\n32 88 59 36 95 45 28 78 73 30 97 13 13 47 48 100 43 21 22 45 88 25 15 13 63 25 72 92 29 5 25 11 50 5 54 51 48 84 23\\r\\n7 26\\r\\n', 'output': ['862\\r\\n']}, {'input': '45\\r\\n83 74 73 95 10 31 100 26 29 15 80 100 22 70 31 88 9 56 19 70 2 62 48 30 27 47 52 50 94 44 21 94 23 85 15 3 95 72 43 62 94 89 68 88\\r\\n17 40\\r\\n', 'output': ['1061\\r\\n']}, {'input': '50\\r\\n28 8 16 29 19 82 70 51 96 84 74 72 17 69 12 21 37 21 39 3 18 66 19 49 86 96 94 93 2 90 96 84 59 88 58 15 61 33 55 22 35 54 51 29 64 68 29 38 40\\r\\n23 28\\r\\n', 'output': ['344\\r\\n']}, {'input': '60\\r\\n24 28 25 21 43 71 64 73 71 90 51 83 69 43 75 43 78 72 56 61 99 7 23 86 9 16 16 94 23 74 18 56 20 72 13 31 75 34 35 86 61 49 4 72 84 7 65 70 66 52 21 38 6 43 69 40 73 46 5\\r\\n28 60\\r\\n', 'output': ['1502\\r\\n']}, {'input': '70\\r\\n69 95 34 14 67 61 6 95 94 44 28 94 73 66 39 13 19 71 73 71 28 48 26 22 32 88 38 95 43 59 88 77 80 55 17 95 40 83 67 1 38 95 58 63 56 98 49 2 41 4 73 8 78 41 64 71 60 71 41 61 67 4 4 19 97 14 39 20 27\\r\\n9 41\\r\\n', 'output': ['1767\\r\\n']}, {'input': '80\\r\\n65 15 43 6 43 98 100 16 69 98 4 54 25 40 2 35 12 23 38 29 10 89 30 6 4 8 7 96 64 43 11 49 89 38 20 59 54 85 46 16 16 89 60 54 28 37 32 34 67 9 78 30 50 87 58 53 99 48 77 3 5 6 19 99 16 20 31 10 80 76 82 56 56 83 72 81 84 60 28\\r\\n18 24\\r\\n', 'output': ['219\\r\\n']}, {'input': '90\\r\\n61 35 100 99 67 87 42 90 44 4 81 65 29 63 66 56 53 22 55 87 39 30 34 42 27 80 29 97 85 28 81 22 50 22 24 75 67 86 78 79 94 35 13 97 48 76 68 66 94 13 82 1 22 85 5 36 86 73 65 97 43 56 35 26 87 25 74 47 81 67 73 75 99 75 53 38 70 21 66 78 38 17 57 40 93 57 68 55 1\\r\\n12 44\\r\\n', 'output': ['1713\\r\\n']}, {'input': '95\\r\\n37 74 53 96 65 84 65 72 95 45 6 77 91 35 58 50 51 51 97 30 51 20 79 81 92 10 89 34 40 76 71 54 26 34 73 72 72 28 53 19 95 64 97 10 44 15 12 38 5 63 96 95 86 8 36 96 45 53 81 5 18 18 47 97 65 9 33 53 41 86 37 53 5 40 15 76 83 45 33 18 26 5 19 90 46 40 100 42 10 90 13 81 40 53\\r\\n6 15\\r\\n', 'output': ['570\\r\\n']}, {'input': '96\\r\\n51 32 95 75 23 54 70 89 67 3 1 51 4 100 97 30 9 35 56 38 54 77 56 98 43 17 60 43 72 46 87 61 100 65 81 22 74 38 16 96 5 10 54 22 23 22 10 91 9 54 49 82 29 73 33 98 75 8 4 26 24 90 71 42 90 24 94 74 94 10 41 98 56 63 18 43 56 21 26 64 74 33 22 38 67 66 38 60 64 76 53 10 4 65 76\\r\\n21 26\\r\\n', 'output': ['328\\r\\n']}, {'input': '97\\r\\n18 90 84 7 33 24 75 55 86 10 96 72 16 64 37 9 19 71 62 97 5 34 85 15 46 72 82 51 52 16 55 68 27 97 42 72 76 97 32 73 14 56 11 86 2 81 59 95 60 93 1 22 71 37 77 100 6 16 78 47 78 62 94 86 16 91 56 46 47 35 93 44 7 86 70 10 29 45 67 62 71 61 74 39 36 92 24 26 65 14 93 92 15 28 79 59\\r\\n6 68\\r\\n', 'output': ['3385\\r\\n']}, {'input': '98\\r\\n32 47 26 86 43 42 79 72 6 68 40 46 29 80 24 89 29 7 21 56 8 92 13 33 50 79 5 7 84 85 24 23 1 80 51 21 26 55 96 51 24 2 68 98 81 88 57 100 64 84 54 10 14 2 74 1 89 71 1 20 84 85 17 31 42 58 69 67 48 60 97 90 58 10 21 29 2 21 60 61 68 89 77 39 57 18 61 44 67 100 33 74 27 40 83 29 6\\r\\n8 77\\r\\n', 'output': ['3319\\r\\n']}, {'input': '99\\r\\n46 5 16 66 53 12 84 89 26 27 35 68 41 44 63 17 88 43 80 15 59 1 42 50 53 34 75 16 16 55 92 30 28 11 12 71 27 65 11 28 86 47 24 10 60 47 7 53 16 75 6 49 56 66 70 3 20 78 75 41 38 57 89 23 16 74 30 39 1 32 49 84 9 33 25 95 75 45 54 59 17 17 29 40 79 96 47 11 69 86 73 56 91 4 87 47 31 24\\r\\n23 36\\r\\n', 'output': ['514\\r\\n']}, {'input': '100\\r\\n63 65 21 41 95 23 3 4 12 23 95 50 75 63 58 34 71 27 75 31 23 94 96 74 69 34 43 25 25 55 44 19 43 86 68 17 52 65 36 29 72 96 84 25 84 23 71 54 6 7 71 7 21 100 99 58 93 35 62 47 36 70 68 9 75 13 35 70 76 36 62 22 52 51 2 87 66 41 54 35 78 62 30 35 65 44 74 93 78 37 96 70 26 32 71 27 85 85 63\\r\\n43 92\\r\\n', 'output': ['2599\\r\\n']}, {'input': '51\\r\\n85 38 22 38 42 36 55 24 36 80 49 15 66 91 88 61 46 82 1 61 89 92 6 56 28 8 46 80 56 90 91 38 38 17 69 64 57 68 13 44 45 38 8 72 61 39 87 2 73 88\\r\\n15 27\\r\\n', 'output': ['618\\r\\n']}, {'input': '2\\r\\n3\\r\\n1 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\n6 8 22 22\\r\\n2 3\\r\\n', 'output': ['8\\r\\n']}, {'input': '6\\r\\n3 12 27 28 28\\r\\n3 4\\r\\n', 'output': ['27\\r\\n']}, {'input': '9\\r\\n1 2 2 2 2 3 3 5\\r\\n3 7\\r\\n', 'output': ['9\\r\\n']}, {'input': '10\\r\\n1 1 1 1 1 1 1 1 1\\r\\n6 8\\r\\n', 'output': ['2\\r\\n']}, {'input': '20\\r\\n1 1 1 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 3\\r\\n5 17\\r\\n', 'output': ['23\\r\\n']}, {'input': '25\\r\\n1 1 1 4 5 6 8 11 11 11 11 12 13 14 14 14 15 16 16 17 17 17 19 19\\r\\n4 8\\r\\n', 'output': ['23\\r\\n']}, {'input': '35\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\r\\n30 31\\r\\n', 'output': ['2\\r\\n']}, {'input': '45\\r\\n1 1 1 1 2 2 2 2 2 2 2 3 3 3 3 3 3 4 5 5 5 5 6 6 6 6 6 6 6 7 7 7 7 8 8 8 9 9 9 9 9 10 10 10\\r\\n42 45\\r\\n', 'output': ['30\\r\\n']}, {'input': '50\\r\\n1 8 8 13 14 15 15 16 19 21 22 24 26 31 32 37 45 47 47 47 50 50 51 54 55 56 58 61 61 61 63 63 64 66 66 67 67 70 71 80 83 84 85 92 92 94 95 95 100\\r\\n4 17\\r\\n', 'output': ['285\\r\\n']}, {'input': '60\\r\\n1 2 4 4 4 6 6 8 9 10 10 13 14 18 20 20 21 22 23 23 26 29 30 32 33 34 35 38 40 42 44 44 46 48 52 54 56 56 60 60 66 67 68 68 69 73 73 74 80 80 81 81 82 84 86 86 87 89 89\\r\\n56 58\\r\\n', 'output': ['173\\r\\n']}, {'input': '70\\r\\n1 2 3 3 4 5 5 7 7 7 8 8 8 8 9 9 10 12 12 12 12 13 16 16 16 16 16 16 17 17 18 18 20 20 21 23 24 25 25 26 29 29 29 29 31 32 32 34 35 36 36 37 37 38 39 39 40 40 40 40 41 41 42 43 44 44 44 45 45\\r\\n62 65\\r\\n', 'output': ['126\\r\\n']}, {'input': '80\\r\\n1 1 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 5 5 5 5 5 5 5 6 7 7 7 7 7 7 8 8 8 8 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12\\r\\n17 65\\r\\n', 'output': ['326\\r\\n']}, {'input': '90\\r\\n1 1 3 5 8 9 10 11 11 11 11 12 13 14 15 15 15 16 16 19 19 20 22 23 24 25 25 28 29 29 30 31 33 34 35 37 37 38 41 43 43 44 45 47 51 54 55 56 58 58 59 59 60 62 66 67 67 67 68 68 69 70 71 72 73 73 76 77 77 78 78 78 79 79 79 82 83 84 85 85 87 87 89 93 93 93 95 99 99\\r\\n28 48\\r\\n', 'output': ['784\\r\\n']}, {'input': '95\\r\\n2 2 3 3 4 6 6 7 7 7 9 10 12 12 12 12 13 14 15 16 17 18 20 20 20 20 21 21 21 21 22 22 22 22 22 23 23 23 25 26 26 27 27 27 28 29 29 30 30 31 32 33 34 36 37 37 38 39 39 39 42 43 43 43 45 47 48 50 50 51 52 53 54 54 54 55 55 55 58 59 60 61 61 61 61 62 62 63 64 65 66 67 67 67\\r\\n64 93\\r\\n', 'output': ['1636\\r\\n']}, {'input': '96\\r\\n1 1 2 3 3 5 8 9 9 10 10 10 11 11 11 11 11 12 13 13 13 14 15 15 16 16 17 17 17 17 18 18 20 20 20 21 21 21 23 24 24 25 25 26 27 27 27 27 29 29 29 30 30 30 32 32 32 32 32 32 33 33 34 34 34 35 35 35 36 36 37 37 37 38 39 40 41 41 41 41 42 42 43 43 45 45 45 46 46 47 47 49 50 52 52\\r\\n76 96\\r\\n', 'output': ['898\\r\\n']}, {'input': '98\\r\\n2 3 4 4 5 7 8 10 10 10 11 11 12 12 12 12 13 14 15 15 16 16 18 19 19 20 21 21 21 21 22 23 24 25 26 26 27 27 27 27 29 29 30 30 31 31 37 40 40 40 41 41 41 42 43 44 44 44 46 46 47 49 49 50 50 50 51 53 55 55 56 56 56 56 56 57 57 58 59 60 60 60 62 62 63 64 64 64 65 66 66 67 68 70 70 71 71\\r\\n8 90\\r\\n', 'output': ['3016\\r\\n']}, {'input': '99\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n66 95\\r\\n', 'output': ['29\\r\\n']}, {'input': '100\\r\\n1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 8 8 8 8 9 9 9 9 10 10 10 10 11 11 11 11 12 12 12 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 15 15 15 15 15 15 16 16 16 17 17\\r\\n39 52\\r\\n', 'output': ['82\\r\\n']}, {'input': '51\\r\\n5 7 9 16 19 25 26 29 29 30 31 32 32 41 43 44 47 49 50 50 51 52 54 55 56 63 64 66 67 70 74 74 77 78 79 80 80 85 86 87 89 89 90 92 93 94 94 95 95 97\\r\\n3 44\\r\\n', 'output': ['2268\\r\\n']}]", "source_code": "import java.io.*;\n\npublic class Problem implements Runnable {\n\tprivate void solve() throws IOException {\n\t\tint n = readInt();\n\t\tint[] di = readIntArray(n - 1);\n\t\tint a = readInt(), b = readInt();\n\t\tint sum = 0;\n\t\tfor (int i = a; i < b; i++) {\n\t\t\tsum += di[i - 1];\n\t\t}\n\t\tprint((a < b? sum : -1));\n\t}\n\n\tpublic static void main(String[] args) throws IOException {\n\t\ttry (Input reader = new StandardInput(); PrintWriter writer = new PrintWriter(System.out)) {\n\t\t\tnew Problem().run();\n\t\t}\n\t}\n\n\tStandardInput reader;\n\tPrintWriter writer;\n\n\t@Override\n\tpublic void run() {\n\t\ttry {\n\t\t\treader = new StandardInput();\n\t\t\twriter = new PrintWriter(System.out);\n\t\t\tsolve();\n\t\t\treader.close();\n\t\t\twriter.close();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tinterface Input extends Closeable {\n\t\tString next() throws IOException;\n\n\t\tdefault int readInt() throws IOException {\n\t\t\treturn Integer.parseInt(next());\n\t\t}\n\n\t\tdefault long readLong() throws IOException {\n\t\t\treturn Long.parseLong(next());\n\t\t}\n\n\t\tdefault double readDouble() throws IOException {\n\t\t\treturn Double.parseDouble(next());\n\t\t}\n\n\t\tdefault int[] readIntArray() throws IOException {\n\t\t\treturn readIntArray(readInt());\n\t\t}\n\n\t\tdefault int[] readIntArray(int size) throws IOException {\n\t\t\tint[] array = new int[size];\n\t\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\t\tarray[i] = readInt();\n\t\t\t}\n\t\t\treturn array;\n\t\t}\n\n\t\tdefault long[] readLongArray(int size) throws IOException {\n\t\t\tlong[] array = new long[size];\n\t\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\t\tarray[i] = readLong();\n\t\t\t}\n\t\t\treturn array;\n\t\t}\n\t}\n\n\tprivate interface StandardInput implements Input {\n\t\tdefault StandardInput init() throws IOException {\n\t\t\treturn this;\n\t\t}\n\n\t\tdefault void close() {\n\t\t\tStandardInput.super.close();\n\t\t}\n\n\t\tdefault void print(boolean t) {\n\t\t\tStandardInput.super.print((t? 1 : 0));\n\t\t}\n\n\t\tdefault void print(int t) {\n\t\t\tStandardInput.super.print(t);\n\t\t}\n\n\t\tdefault void print(long t) {\n\t\t\tStandardInput.super.print(t);\n\t\t}\n\n\t\tdefault void print(double t) {\n\t\t\tStandardInput.super.print(t);\n\t\t}\n\n\t\tdefault void print(char[] t) {\n\t\t\tStandardInput.super.print(t);\n\t\t}\n\n\t\tdefault void print(String t) {\n\t\t\tStandardInput.super.print(t);\n\t\t}\n\n\t\tdefault void print(boolean[] t) {\n\t\t\tStandardInput.super.print(t);\n\t\t}\n\n\t\tdefault void print(int[] t) {\n\t\t\tStandardInput.super.print(t);\n\t\t}\n\n\t\tdefault void print(long[] t) {\n\t\t\tStandardInput.super.print(t);\n\t\t}\n\n\t\tdefault void print(double[] t) {\n\t\t\tStandardInput.super.print(t);\n\t\t}\n\t}\n\n\tprivate class StandardInput extends StringReader implements StandardInput {\n\t\tprivate StandardInput init() throws IOException {\n\t\t\treturn StandardInput.super.init();\n\t\t}\n\t}\n}\n"}
{"src_uid": "69850c2af99d60711bcff5870575e15e", "id": 87, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '3\\r\\n5 6\\r\\n1 2\\r\\n', 'output': ['5\\r\\n']}, {'input': '3\\r\\n5 6\\r\\n1 3\\r\\n', 'output': ['11\\r\\n']}, {'input': '2\\r\\n55\\r\\n1 2\\r\\n', 'output': ['55\\r\\n']}, {'input': '3\\r\\n85 78\\r\\n1 3\\r\\n', 'output': ['163\\r\\n']}, {'input': '4\\r\\n63 4 49\\r\\n2 3\\r\\n', 'output': ['4\\r\\n']}, {'input': '5\\r\\n93 83 42 56\\r\\n2 5\\r\\n', 'output': ['181\\r\\n']}, {'input': '6\\r\\n22 9 87 89 57\\r\\n1 6\\r\\n', 'output': ['264\\r\\n']}, {'input': '7\\r\\n52 36 31 23 74 78\\r\\n2 7\\r\\n', 'output': ['242\\r\\n']}, {'input': '8\\r\\n82 14 24 5 91 49 94\\r\\n3 8\\r\\n', 'output': ['263\\r\\n']}, {'input': '9\\r\\n12 40 69 39 59 21 59 5\\r\\n4 6\\r\\n', 'output': ['98\\r\\n']}, {'input': '10\\r\\n95 81 32 59 71 30 50 61 100\\r\\n1 6\\r\\n', 'output': ['338\\r\\n']}, {'input': '15\\r\\n89 55 94 4 15 69 19 60 91 77 3 94 91 62\\r\\n3 14\\r\\n', 'output': ['617\\r\\n']}, {'input': '20\\r\\n91 1 41 51 95 67 92 35 23 70 44 91 57 50 21 8 9 71 40\\r\\n8 17\\r\\n', 'output': ['399\\r\\n']}, {'input': '25\\r\\n70 95 21 84 97 39 12 98 53 24 78 29 84 65 70 22 100 17 69 27 62 48 35 80\\r\\n8 23\\r\\n', 'output': ['846\\r\\n']}, {'input': '30\\r\\n35 69 50 44 19 56 86 56 98 24 21 2 61 24 85 30 2 22 57 35 59 84 12 77 92 53 50 92 9\\r\\n1 16\\r\\n', 'output': ['730\\r\\n']}, {'input': '35\\r\\n2 34 47 15 27 61 6 88 67 20 53 65 29 68 77 5 78 86 44 98 32 81 91 79 54 84 95 23 65 97 22 33 42 87\\r\\n8 35\\r\\n', 'output': ['1663\\r\\n']}, {'input': '40\\r\\n32 88 59 36 95 45 28 78 73 30 97 13 13 47 48 100 43 21 22 45 88 25 15 13 63 25 72 92 29 5 25 11 50 5 54 51 48 84 23\\r\\n7 26\\r\\n', 'output': ['862\\r\\n']}, {'input': '45\\r\\n83 74 73 95 10 31 100 26 29 15 80 100 22 70 31 88 9 56 19 70 2 62 48 30 27 47 52 50 94 44 21 94 23 85 15 3 95 72 43 62 94 89 68 88\\r\\n17 40\\r\\n', 'output': ['1061\\r\\n']}, {'input': '50\\r\\n28 8 16 29 19 82 70 51 96 84 74 72 17 69 12 21 37 21 39 3 18 66 19 49 86 96 94 93 2 90 96 84 59 88 58 15 61 33 55 22 35 54 51 29 64 68 29 38 40\\r\\n23 28\\r\\n', 'output': ['344\\r\\n']}, {'input': '60\\r\\n24 28 25 21 43 71 64 73 71 90 51 83 69 43 75 43 78 72 56 61 99 7 23 86 9 16 16 94 23 74 18 56 20 72 13 31 75 34 35 86 61 49 4 72 84 7 65 70 66 52 21 38 6 43 69 40 73 46 5\\r\\n28 60\\r\\n', 'output': ['1502\\r\\n']}, {'input': '70\\r\\n69 95 34 14 67 61 6 95 94 44 28 94 73 66 39 13 19 71 73 71 28 48 26 22 32 88 38 95 43 59 88 77 80 55 17 95 40 83 67 1 38 95 58 63 56 98 49 2 41 4 73 8 78 41 64 71 60 71 41 61 67 4 4 19 97 14 39 20 27\\r\\n9 41\\r\\n', 'output': ['1767\\r\\n']}, {'input': '80\\r\\n65 15 43 6 43 98 100 16 69 98 4 54 25 40 2 35 12 23 38 29 10 89 30 6 4 8 7 96 64 43 11 49 89 38 20 59 54 85 46 16 16 89 60 54 28 37 32 34 67 9 78 30 50 87 58 53 99 48 77 3 5 6 19 99 16 20 31 10 80 76 82 56 56 83 72 81 84 60 28\\r\\n18 24\\r\\n', 'output': ['219\\r\\n']}, {'input': '90\\r\\n61 35 100 99 67 87 42 90 44 4 81 65 29 63 66 56 53 22 55 87 39 30 34 42 27 80 29 97 85 28 81 22 50 22 24 75 67 86 78 79 94 35 13 97 48 76 68 66 94 13 82 1 22 85 5 36 86 73 65 97 43 56 35 26 87 25 74 47 81 67 73 75 99 75 53 38 70 21 66 78 38 17 57 40 93 57 68 55 1\\r\\n12 44\\r\\n', 'output': ['1713\\r\\n']}, {'input': '95\\r\\n37 74 53 96 65 84 65 72 95 45 6 77 91 35 58 50 51 51 97 30 51 20 79 81 92 10 89 34 40 76 71 54 26 34 73 72 72 28 53 19 95 64 97 10 44 15 12 38 5 63 96 95 86 8 36 96 45 53 81 5 18 18 47 97 65 9 33 53 41 86 37 53 5 40 15 76 83 45 33 18 26 5 19 90 46 40 100 42 10 90 13 81 40 53\\r\\n6 15\\r\\n', 'output': ['570\\r\\n']}, {'input': '96\\r\\n51 32 95 75 23 54 70 89 67 3 1 51 4 100 97 30 9 35 56 38 54 77 56 98 43 17 60 43 72 46 87 61 100 65 81 22 74 38 16 96 5 10 54 22 23 22 10 91 9 54 49 82 29 73 33 98 75 8 4 26 24 90 71 42 90 24 94 74 94 10 41 98 56 63 18 43 56 21 26 64 74 33 22 38 67 66 38 60 64 76 53 10 4 65 76\\r\\n21 26\\r\\n', 'output': ['328\\r\\n']}, {'input': '97\\r\\n18 90 84 7 33 24 75 55 86 10 96 72 16 64 37 9 19 71 62 97 5 34 85 15 46 72 82 51 52 16 55 68 27 97 42 72 76 97 32 73 14 56 11 86 2 81 59 95 60 93 1 22 71 37 77 100 6 16 78 47 78 62 94 86 16 91 56 46 47 35 93 44 7 86 70 10 29 45 67 62 71 61 74 39 36 92 24 26 65 14 93 92 15 28 79 59\\r\\n6 68\\r\\n', 'output': ['3385\\r\\n']}, {'input': '98\\r\\n32 47 26 86 43 42 79 72 6 68 40 46 29 80 24 89 29 7 21 56 8 92 13 33 50 79 5 7 84 85 24 23 1 80 51 21 26 55 96 51 24 2 68 98 81 88 57 100 64 84 54 10 14 2 74 1 89 71 1 20 84 85 17 31 42 58 69 67 48 60 97 90 58 10 21 29 2 21 60 61 68 89 77 39 57 18 61 44 67 100 33 74 27 40 83 29 6\\r\\n8 77\\r\\n', 'output': ['3319\\r\\n']}, {'input': '99\\r\\n46 5 16 66 53 12 84 89 26 27 35 68 41 44 63 17 88 43 80 15 59 1 42 50 53 34 75 16 16 55 92 30 28 11 12 71 27 65 11 28 86 47 24 10 60 47 7 53 16 75 6 49 56 66 70 3 20 78 75 41 38 57 89 23 16 74 30 39 1 32 49 84 9 33 25 95 75 45 54 59 17 17 29 40 79 96 47 11 69 86 73 56 91 4 87 47 31 24\\r\\n23 36\\r\\n', 'output': ['514\\r\\n']}, {'input': '100\\r\\n63 65 21 41 95 23 3 4 12 23 95 50 75 63 58 34 71 27 75 31 23 94 96 74 69 34 43 25 25 55 44 19 43 86 68 17 52 65 36 29 72 96 84 25 84 23 71 54 6 7 71 7 21 100 99 58 93 35 62 47 36 70 68 9 75 13 35 70 76 36 62 22 52 51 2 87 66 41 54 35 78 62 30 35 65 44 74 93 78 37 96 70 26 32 71 27 85 85 63\\r\\n43 92\\r\\n', 'output': ['2599\\r\\n']}, {'input': '51\\r\\n85 38 22 38 42 36 55 24 36 80 49 15 66 91 88 61 46 82 1 61 89 92 6 56 28 8 46 80 56 90 91 38 38 17 69 64 57 68 13 44 45 38 8 72 61 39 87 2 73 88\\r\\n15 27\\r\\n', 'output': ['618\\r\\n']}, {'input': '2\\r\\n3\\r\\n1 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\n6 8 22 22\\r\\n2 3\\r\\n', 'output': ['8\\r\\n']}, {'input': '6\\r\\n3 12 27 28 28\\r\\n3 4\\r\\n', 'output': ['27\\r\\n']}, {'input': '9\\r\\n1 2 2 2 2 3 3 5\\r\\n3 7\\r\\n', 'output': ['9\\r\\n']}, {'input': '10\\r\\n1 1 1 1 1 1 1 1 1\\r\\n6 8\\r\\n', 'output': ['2\\r\\n']}, {'input': '20\\r\\n1 1 1 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 3\\r\\n5 17\\r\\n', 'output': ['23\\r\\n']}, {'input': '25\\r\\n1 1 1 4 5 6 8 11 11 11 11 12 13 14 14 14 15 16 16 17 17 17 19 19\\r\\n4 8\\r\\n', 'output': ['23\\r\\n']}, {'input': '35\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\r\\n30 31\\r\\n', 'output': ['2\\r\\n']}, {'input': '45\\r\\n1 1 1 1 2 2 2 2 2 2 2 3 3 3 3 3 3 4 5 5 5 5 6 6 6 6 6 6 6 7 7 7 7 8 8 8 9 9 9 9 9 10 10 10\\r\\n42 45\\r\\n', 'output': ['30\\r\\n']}, {'input': '50\\r\\n1 8 8 13 14 15 15 16 19 21 22 24 26 31 32 37 45 47 47 47 50 50 51 54 55 56 58 61 61 61 63 63 64 66 66 67 67 70 71 80 83 84 85 92 92 94 95 95 100\\r\\n4 17\\r\\n', 'output': ['285\\r\\n']}, {'input': '60\\r\\n1 2 4 4 4 6 6 8 9 10 10 13 14 18 20 20 21 22 23 23 26 29 30 32 33 34 35 38 40 42 44 44 46 48 52 54 56 56 60 60 66 67 68 68 69 73 73 74 80 80 81 81 82 84 86 86 87 89 89\\r\\n56 58\\r\\n', 'output': ['173\\r\\n']}, {'input': '70\\r\\n1 2 3 3 4 5 5 7 7 7 8 8 8 8 9 9 10 12 12 12 12 13 16 16 16 16 16 16 17 17 18 18 20 20 21 23 24 25 25 26 29 29 29 29 31 32 32 34 35 36 36 37 37 38 39 39 40 40 40 40 41 41 42 43 44 44 44 45 45\\r\\n62 65\\r\\n', 'output': ['126\\r\\n']}, {'input': '80\\r\\n1 1 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 5 5 5 5 5 5 5 6 7 7 7 7 7 7 8 8 8 8 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12\\r\\n17 65\\r\\n', 'output': ['326\\r\\n']}, {'input': '90\\r\\n1 1 3 5 8 9 10 11 11 11 11 12 13 14 15 15 15 16 16 19 19 20 22 23 24 25 25 28 29 29 30 31 33 34 35 37 37 38 41 43 43 44 45 47 51 54 55 56 58 58 59 59 60 62 66 67 67 67 68 68 69 70 71 72 73 73 76 77 77 78 78 78 79 79 79 82 83 84 85 85 87 87 89 93 93 93 95 99 99\\r\\n28 48\\r\\n', 'output': ['784\\r\\n']}, {'input': '95\\r\\n2 2 3 3 4 6 6 7 7 7 9 10 12 12 12 12 13 14 15 16 17 18 20 20 20 20 21 21 21 21 22 22 22 22 22 23 23 23 25 26 26 27 27 27 28 29 29 30 30 31 32 33 34 36 37 37 38 39 39 39 42 43 43 43 45 47 48 50 50 51 52 53 54 54 54 55 55 55 58 59 60 61 61 61 61 62 62 63 64 65 66 67 67 67\\r\\n64 93\\r\\n', 'output': ['1636\\r\\n']}, {'input': '96\\r\\n1 1 2 3 3 5 8 9 9 10 10 10 11 11 11 11 11 12 13 13 13 14 15 15 16 16 17 17 17 17 18 18 20 20 20 21 21 21 23 24 24 25 25 26 27 27 27 27 29 29 29 30 30 30 32 32 32 32 32 32 33 33 34 34 34 35 35 35 36 36 37 37 37 38 39 40 41 41 41 41 42 42 43 43 45 45 45 46 46 47 47 49 50 52 52\\r\\n76 96\\r\\n', 'output': ['898\\r\\n']}, {'input': '98\\r\\n2 3 4 4 5 7 8 10 10 10 11 11 12 12 12 12 13 14 15 15 16 16 18 19 19 20 21 21 21 21 22 23 24 25 26 26 27 27 27 27 29 29 30 30 31 31 37 40 40 40 41 41 41 42 43 44 44 44 46 46 47 49 49 50 50 50 51 53 55 55 56 56 56 56 56 57 57 58 59 60 60 60 62 62 63 64 64 64 65 66 66 67 68 70 70 71 71\\r\\n8 90\\r\\n', 'output': ['3016\\r\\n']}, {'input': '99\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n66 95\\r\\n', 'output': ['29\\r\\n']}, {'input': '100\\r\\n1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 8 8 8 8 9 9 9 9 10 10 10 10 11 11 11 11 12 12 12 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 15 15 15 15 15 15 16 16 16 17 17\\r\\n39 52\\r\\n', 'output': ['82\\r\\n']}, {'input': '51\\r\\n5 7 9 16 19 25 26 29 29 30 31 32 32 41 43 44 47 49 50 50 51 52 54 55 56 63 64 66 67 70 74 74 77 78 79 80 80 85 86 87 89 89 90 92 93 94 94 95 95 97\\r\\n3 44\\r\\n', 'output': ['2268\\r\\n']}]", "source_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class Tes4 {\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int[] d = new int[n - 1];\n        for(int i = 0; i < n - 1; i++) {\n            d[i] = scanner.nextInt();\n        }\n        \n        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n        int sum = 0;\n        \n        for(int i = a; i < b; i++) {\n            sum += d[i - 1];\n        }\n        \n        System.out.println(sum);\n        \n    }\n}"}
{"src_uid": "69850c2af99d60711bcff5870575e15e", "id": 87, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '3\\r\\n5 6\\r\\n1 2\\r\\n', 'output': ['5\\r\\n']}, {'input': '3\\r\\n5 6\\r\\n1 3\\r\\n', 'output': ['11\\r\\n']}, {'input': '2\\r\\n55\\r\\n1 2\\r\\n', 'output': ['55\\r\\n']}, {'input': '3\\r\\n85 78\\r\\n1 3\\r\\n', 'output': ['163\\r\\n']}, {'input': '4\\r\\n63 4 49\\r\\n2 3\\r\\n', 'output': ['4\\r\\n']}, {'input': '5\\r\\n93 83 42 56\\r\\n2 5\\r\\n', 'output': ['181\\r\\n']}, {'input': '6\\r\\n22 9 87 89 57\\r\\n1 6\\r\\n', 'output': ['264\\r\\n']}, {'input': '7\\r\\n52 36 31 23 74 78\\r\\n2 7\\r\\n', 'output': ['242\\r\\n']}, {'input': '8\\r\\n82 14 24 5 91 49 94\\r\\n3 8\\r\\n', 'output': ['263\\r\\n']}, {'input': '9\\r\\n12 40 69 39 59 21 59 5\\r\\n4 6\\r\\n', 'output': ['98\\r\\n']}, {'input': '10\\r\\n95 81 32 59 71 30 50 61 100\\r\\n1 6\\r\\n', 'output': ['338\\r\\n']}, {'input': '15\\r\\n89 55 94 4 15 69 19 60 91 77 3 94 91 62\\r\\n3 14\\r\\n', 'output': ['617\\r\\n']}, {'input': '20\\r\\n91 1 41 51 95 67 92 35 23 70 44 91 57 50 21 8 9 71 40\\r\\n8 17\\r\\n', 'output': ['399\\r\\n']}, {'input': '25\\r\\n70 95 21 84 97 39 12 98 53 24 78 29 84 65 70 22 100 17 69 27 62 48 35 80\\r\\n8 23\\r\\n', 'output': ['846\\r\\n']}, {'input': '30\\r\\n35 69 50 44 19 56 86 56 98 24 21 2 61 24 85 30 2 22 57 35 59 84 12 77 92 53 50 92 9\\r\\n1 16\\r\\n', 'output': ['730\\r\\n']}, {'input': '35\\r\\n2 34 47 15 27 61 6 88 67 20 53 65 29 68 77 5 78 86 44 98 32 81 91 79 54 84 95 23 65 97 22 33 42 87\\r\\n8 35\\r\\n', 'output': ['1663\\r\\n']}, {'input': '40\\r\\n32 88 59 36 95 45 28 78 73 30 97 13 13 47 48 100 43 21 22 45 88 25 15 13 63 25 72 92 29 5 25 11 50 5 54 51 48 84 23\\r\\n7 26\\r\\n', 'output': ['862\\r\\n']}, {'input': '45\\r\\n83 74 73 95 10 31 100 26 29 15 80 100 22 70 31 88 9 56 19 70 2 62 48 30 27 47 52 50 94 44 21 94 23 85 15 3 95 72 43 62 94 89 68 88\\r\\n17 40\\r\\n', 'output': ['1061\\r\\n']}, {'input': '50\\r\\n28 8 16 29 19 82 70 51 96 84 74 72 17 69 12 21 37 21 39 3 18 66 19 49 86 96 94 93 2 90 96 84 59 88 58 15 61 33 55 22 35 54 51 29 64 68 29 38 40\\r\\n23 28\\r\\n', 'output': ['344\\r\\n']}, {'input': '60\\r\\n24 28 25 21 43 71 64 73 71 90 51 83 69 43 75 43 78 72 56 61 99 7 23 86 9 16 16 94 23 74 18 56 20 72 13 31 75 34 35 86 61 49 4 72 84 7 65 70 66 52 21 38 6 43 69 40 73 46 5\\r\\n28 60\\r\\n', 'output': ['1502\\r\\n']}, {'input': '70\\r\\n69 95 34 14 67 61 6 95 94 44 28 94 73 66 39 13 19 71 73 71 28 48 26 22 32 88 38 95 43 59 88 77 80 55 17 95 40 83 67 1 38 95 58 63 56 98 49 2 41 4 73 8 78 41 64 71 60 71 41 61 67 4 4 19 97 14 39 20 27\\r\\n9 41\\r\\n', 'output': ['1767\\r\\n']}, {'input': '80\\r\\n65 15 43 6 43 98 100 16 69 98 4 54 25 40 2 35 12 23 38 29 10 89 30 6 4 8 7 96 64 43 11 49 89 38 20 59 54 85 46 16 16 89 60 54 28 37 32 34 67 9 78 30 50 87 58 53 99 48 77 3 5 6 19 99 16 20 31 10 80 76 82 56 56 83 72 81 84 60 28\\r\\n18 24\\r\\n', 'output': ['219\\r\\n']}, {'input': '90\\r\\n61 35 100 99 67 87 42 90 44 4 81 65 29 63 66 56 53 22 55 87 39 30 34 42 27 80 29 97 85 28 81 22 50 22 24 75 67 86 78 79 94 35 13 97 48 76 68 66 94 13 82 1 22 85 5 36 86 73 65 97 43 56 35 26 87 25 74 47 81 67 73 75 99 75 53 38 70 21 66 78 38 17 57 40 93 57 68 55 1\\r\\n12 44\\r\\n', 'output': ['1713\\r\\n']}, {'input': '95\\r\\n37 74 53 96 65 84 65 72 95 45 6 77 91 35 58 50 51 51 97 30 51 20 79 81 92 10 89 34 40 76 71 54 26 34 73 72 72 28 53 19 95 64 97 10 44 15 12 38 5 63 96 95 86 8 36 96 45 53 81 5 18 18 47 97 65 9 33 53 41 86 37 53 5 40 15 76 83 45 33 18 26 5 19 90 46 40 100 42 10 90 13 81 40 53\\r\\n6 15\\r\\n', 'output': ['570\\r\\n']}, {'input': '96\\r\\n51 32 95 75 23 54 70 89 67 3 1 51 4 100 97 30 9 35 56 38 54 77 56 98 43 17 60 43 72 46 87 61 100 65 81 22 74 38 16 96 5 10 54 22 23 22 10 91 9 54 49 82 29 73 33 98 75 8 4 26 24 90 71 42 90 24 94 74 94 10 41 98 56 63 18 43 56 21 26 64 74 33 22 38 67 66 38 60 64 76 53 10 4 65 76\\r\\n21 26\\r\\n', 'output': ['328\\r\\n']}, {'input': '97\\r\\n18 90 84 7 33 24 75 55 86 10 96 72 16 64 37 9 19 71 62 97 5 34 85 15 46 72 82 51 52 16 55 68 27 97 42 72 76 97 32 73 14 56 11 86 2 81 59 95 60 93 1 22 71 37 77 100 6 16 78 47 78 62 94 86 16 91 56 46 47 35 93 44 7 86 70 10 29 45 67 62 71 61 74 39 36 92 24 26 65 14 93 92 15 28 79 59\\r\\n6 68\\r\\n', 'output': ['3385\\r\\n']}, {'input': '98\\r\\n32 47 26 86 43 42 79 72 6 68 40 46 29 80 24 89 29 7 21 56 8 92 13 33 50 79 5 7 84 85 24 23 1 80 51 21 26 55 96 51 24 2 68 98 81 88 57 100 64 84 54 10 14 2 74 1 89 71 1 20 84 85 17 31 42 58 69 67 48 60 97 90 58 10 21 29 2 21 60 61 68 89 77 39 57 18 61 44 67 100 33 74 27 40 83 29 6\\r\\n8 77\\r\\n', 'output': ['3319\\r\\n']}, {'input': '99\\r\\n46 5 16 66 53 12 84 89 26 27 35 68 41 44 63 17 88 43 80 15 59 1 42 50 53 34 75 16 16 55 92 30 28 11 12 71 27 65 11 28 86 47 24 10 60 47 7 53 16 75 6 49 56 66 70 3 20 78 75 41 38 57 89 23 16 74 30 39 1 32 49 84 9 33 25 95 75 45 54 59 17 17 29 40 79 96 47 11 69 86 73 56 91 4 87 47 31 24\\r\\n23 36\\r\\n', 'output': ['514\\r\\n']}, {'input': '100\\r\\n63 65 21 41 95 23 3 4 12 23 95 50 75 63 58 34 71 27 75 31 23 94 96 74 69 34 43 25 25 55 44 19 43 86 68 17 52 65 36 29 72 96 84 25 84 23 71 54 6 7 71 7 21 100 99 58 93 35 62 47 36 70 68 9 75 13 35 70 76 36 62 22 52 51 2 87 66 41 54 35 78 62 30 35 65 44 74 93 78 37 96 70 26 32 71 27 85 85 63\\r\\n43 92\\r\\n', 'output': ['2599\\r\\n']}, {'input': '51\\r\\n85 38 22 38 42 36 55 24 36 80 49 15 66 91 88 61 46 82 1 61 89 92 6 56 28 8 46 80 56 90 91 38 38 17 69 64 57 68 13 44 45 38 8 72 61 39 87 2 73 88\\r\\n15 27\\r\\n', 'output': ['618\\r\\n']}, {'input': '2\\r\\n3\\r\\n1 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\n6 8 22 22\\r\\n2 3\\r\\n', 'output': ['8\\r\\n']}, {'input': '6\\r\\n3 12 27 28 28\\r\\n3 4\\r\\n', 'output': ['27\\r\\n']}, {'input': '9\\r\\n1 2 2 2 2 3 3 5\\r\\n3 7\\r\\n', 'output': ['9\\r\\n']}, {'input': '10\\r\\n1 1 1 1 1 1 1 1 1\\r\\n6 8\\r\\n', 'output': ['2\\r\\n']}, {'input': '20\\r\\n1 1 1 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 3\\r\\n5 17\\r\\n', 'output': ['23\\r\\n']}, {'input': '25\\r\\n1 1 1 4 5 6 8 11 11 11 11 12 13 14 14 14 15 16 16 17 17 17 19 19\\r\\n4 8\\r\\n', 'output': ['23\\r\\n']}, {'input': '35\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\r\\n30 31\\r\\n', 'output': ['2\\r\\n']}, {'input': '45\\r\\n1 1 1 1 2 2 2 2 2 2 2 3 3 3 3 3 3 4 5 5 5 5 6 6 6 6 6 6 6 7 7 7 7 8 8 8 9 9 9 9 9 10 10 10\\r\\n42 45\\r\\n', 'output': ['30\\r\\n']}, {'input': '50\\r\\n1 8 8 13 14 15 15 16 19 21 22 24 26 31 32 37 45 47 47 47 50 50 51 54 55 56 58 61 61 61 63 63 64 66 66 67 67 70 71 80 83 84 85 92 92 94 95 95 100\\r\\n4 17\\r\\n', 'output': ['285\\r\\n']}, {'input': '60\\r\\n1 2 4 4 4 6 6 8 9 10 10 13 14 18 20 20 21 22 23 23 26 29 30 32 33 34 35 38 40 42 44 44 46 48 52 54 56 56 60 60 66 67 68 68 69 73 73 74 80 80 81 81 82 84 86 86 87 89 89\\r\\n56 58\\r\\n', 'output': ['173\\r\\n']}, {'input': '70\\r\\n1 2 3 3 4 5 5 7 7 7 8 8 8 8 9 9 10 12 12 12 12 13 16 16 16 16 16 16 17 17 18 18 20 20 21 23 24 25 25 26 29 29 29 29 31 32 32 34 35 36 36 37 37 38 39 39 40 40 40 40 41 41 42 43 44 44 44 45 45\\r\\n62 65\\r\\n', 'output': ['126\\r\\n']}, {'input': '80\\r\\n1 1 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 5 5 5 5 5 5 5 6 7 7 7 7 7 7 8 8 8 8 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12\\r\\n17 65\\r\\n', 'output': ['326\\r\\n']}, {'input': '90\\r\\n1 1 3 5 8 9 10 11 11 11 11 12 13 14 15 15 15 16 16 19 19 20 22 23 24 25 25 28 29 29 30 31 33 34 35 37 37 38 41 43 43 44 45 47 51 54 55 56 58 58 59 59 60 62 66 67 67 67 68 68 69 70 71 72 73 73 76 77 77 78 78 78 79 79 79 82 83 84 85 85 87 87 89 93 93 93 95 99 99\\r\\n28 48\\r\\n', 'output': ['784\\r\\n']}, {'input': '95\\r\\n2 2 3 3 4 6 6 7 7 7 9 10 12 12 12 12 13 14 15 16 17 18 20 20 20 20 21 21 21 21 22 22 22 22 22 23 23 23 25 26 26 27 27 27 28 29 29 30 30 31 32 33 34 36 37 37 38 39 39 39 42 43 43 43 45 47 48 50 50 51 52 53 54 54 54 55 55 55 58 59 60 61 61 61 61 62 62 63 64 65 66 67 67 67\\r\\n64 93\\r\\n', 'output': ['1636\\r\\n']}, {'input': '96\\r\\n1 1 2 3 3 5 8 9 9 10 10 10 11 11 11 11 11 12 13 13 13 14 15 15 16 16 17 17 17 17 18 18 20 20 20 21 21 21 23 24 24 25 25 26 27 27 27 27 29 29 29 30 30 30 32 32 32 32 32 32 33 33 34 34 34 35 35 35 36 36 37 37 37 38 39 40 41 41 41 41 42 42 43 43 45 45 45 46 46 47 47 49 50 52 52\\r\\n76 96\\r\\n', 'output': ['898\\r\\n']}, {'input': '98\\r\\n2 3 4 4 5 7 8 10 10 10 11 11 12 12 12 12 13 14 15 15 16 16 18 19 19 20 21 21 21 21 22 23 24 25 26 26 27 27 27 27 29 29 30 30 31 31 37 40 40 40 41 41 41 42 43 44 44 44 46 46 47 49 49 50 50 50 51 53 55 55 56 56 56 56 56 57 57 58 59 60 60 60 62 62 63 64 64 64 65 66 66 67 68 70 70 71 71\\r\\n8 90\\r\\n', 'output': ['3016\\r\\n']}, {'input': '99\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n66 95\\r\\n', 'output': ['29\\r\\n']}, {'input': '100\\r\\n1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 8 8 8 8 9 9 9 9 10 10 10 10 11 11 11 11 12 12 12 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 15 15 15 15 15 15 16 16 16 17 17\\r\\n39 52\\r\\n', 'output': ['82\\r\\n']}, {'input': '51\\r\\n5 7 9 16 19 25 26 29 29 30 31 32 32 41 43 44 47 49 50 50 51 52 54 55 56 63 64 66 67 70 74 74 77 78 79 80 80 85 86 87 89 89 90 92 93 94 94 95 95 97\\r\\n3 44\\r\\n', 'output': ['2268\\r\\n']}]", "source_code": "import java.util.*;\nimport java.io.*;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport static java.util.Collections.reverseOrder;\nimport static java.util.Collections.reverseOrder;\nimport static java.util.Collections.reverseOrder;\n\npublic class Main{\n    static class Reader {\n        static final int BUFFER_SIZE = 1 << 16;\n        static final char[] buffer = new char[BUFFER_SIZE];\n        static int ptr = 0;\n        static int buflen = 0;\n        static boolean hasNextByte() {\n            if (ptr < buflen) {\n                return true;\n            }else{\n                ptr = 0;\n                try {\n                    buflen = reader.read(buffer);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                if (buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        static boolean hasNext() {while(hasNextByte() &&!isPrintableChar(buffer[ptr])) ptr++;return hasNextByte();}\n        static boolean isPrintableChar(int c) {if(33 <= c && c <= 126) return true;return false;}\n        static boolean isPrintableChar() {if(isPrintableChar(buffer[ptr])) return true;return false;}\n        static boolean isLowerCase(int c) {if(97 <= c && c <= 122) return true;return false;}\n        static boolean isLowerCase() {if(isLowerCase(buffer[ptr])) return true;return false;}\n        static int nextInt() {\n            int n = 0;\n            while(!isPrintableChar()){hasNextByte();}\n            if(buffer[ptr] == '-') {\n                hasNextByte();\n                if(!isPrintableChar()) throw new NumberFormatException();\n                while(isLowerCase()){n *= 10;n += buffer[ptr] - '0';hasNextByte();}\n                return -n;\n            }\n            while(isLowerCase()){n *= 10;n += buffer[ptr] - '0';hasNextByte();}\n            return n;\n        }\n        static long nextLong() {\n            long n = 0;\n            boolean minus = false;\n            if(hasNextByte() && buffer[ptr] == '-') {\n                minus = true;\n                hasNextByte();\n            }\n            if(!isPrintableChar()) throw new NumberFormatException();\n            while(isLowerCase()){n *= 10;n += buffer[ptr] - '0';hasNextByte();}\n            if(minus){return -n;}\n            return n;\n        }\n        static double nextDouble() {\n            double n = 0;\n            boolean minus = false;\n            if(hasNextByte() && buffer[ptr] == '-') {\n                minus = true;\n                hasNextByte();\n            }\n            if(!isPrintableChar()) throw new NumberFormatException();\n            while(isPrintableChar()){n *= 10;n += buffer[ptr] - '0';hasNextByte();}\n            if(buffer[ptr] == '.') {\n                hasNextByte();\n                if(!isPrintableChar()) throw new NumberFormatException();\n                while(isPrintableChar()){n *= 10;n += buffer[ptr] - '0';hasNextByte();}\n            }\n            if(minus){return -n;}\n            return n;\n        }\n        static long skipLong() {\n            long n = 0;\n            while(isPrintableChar()){n *= 10;n += buffer[ptr] - '0';hasNextByte();}\n            if(buffer[ptr] == '.') {\n                hasNextByte();\n                if(!isPrintableChar()) throw new NumberFormatException();\n                while(isPrintableChar()){n *= 10;n += buffer[ptr] - '0';hasNextByte();}\n            }\n            return n;\n        }\n        static void close() {\n            try {\n                reader.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    }\n    public static void main"}
{"src_uid": "69850c2af99d60711bcff5870575e15e", "id": 87, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '3\\r\\n5 6\\r\\n1 2\\r\\n', 'output': ['5\\r\\n']}, {'input': '3\\r\\n5 6\\r\\n1 3\\r\\n', 'output': ['11\\r\\n']}, {'input': '2\\r\\n55\\r\\n1 2\\r\\n', 'output': ['55\\r\\n']}, {'input': '3\\r\\n85 78\\r\\n1 3\\r\\n', 'output': ['163\\r\\n']}, {'input': '4\\r\\n63 4 49\\r\\n2 3\\r\\n', 'output': ['4\\r\\n']}, {'input': '5\\r\\n93 83 42 56\\r\\n2 5\\r\\n', 'output': ['181\\r\\n']}, {'input': '6\\r\\n22 9 87 89 57\\r\\n1 6\\r\\n', 'output': ['264\\r\\n']}, {'input': '7\\r\\n52 36 31 23 74 78\\r\\n2 7\\r\\n', 'output': ['242\\r\\n']}, {'input': '8\\r\\n82 14 24 5 91 49 94\\r\\n3 8\\r\\n', 'output': ['263\\r\\n']}, {'input': '9\\r\\n12 40 69 39 59 21 59 5\\r\\n4 6\\r\\n', 'output': ['98\\r\\n']}, {'input': '10\\r\\n95 81 32 59 71 30 50 61 100\\r\\n1 6\\r\\n', 'output': ['338\\r\\n']}, {'input': '15\\r\\n89 55 94 4 15 69 19 60 91 77 3 94 91 62\\r\\n3 14\\r\\n', 'output': ['617\\r\\n']}, {'input': '20\\r\\n91 1 41 51 95 67 92 35 23 70 44 91 57 50 21 8 9 71 40\\r\\n8 17\\r\\n', 'output': ['399\\r\\n']}, {'input': '25\\r\\n70 95 21 84 97 39 12 98 53 24 78 29 84 65 70 22 100 17 69 27 62 48 35 80\\r\\n8 23\\r\\n', 'output': ['846\\r\\n']}, {'input': '30\\r\\n35 69 50 44 19 56 86 56 98 24 21 2 61 24 85 30 2 22 57 35 59 84 12 77 92 53 50 92 9\\r\\n1 16\\r\\n', 'output': ['730\\r\\n']}, {'input': '35\\r\\n2 34 47 15 27 61 6 88 67 20 53 65 29 68 77 5 78 86 44 98 32 81 91 79 54 84 95 23 65 97 22 33 42 87\\r\\n8 35\\r\\n', 'output': ['1663\\r\\n']}, {'input': '40\\r\\n32 88 59 36 95 45 28 78 73 30 97 13 13 47 48 100 43 21 22 45 88 25 15 13 63 25 72 92 29 5 25 11 50 5 54 51 48 84 23\\r\\n7 26\\r\\n', 'output': ['862\\r\\n']}, {'input': '45\\r\\n83 74 73 95 10 31 100 26 29 15 80 100 22 70 31 88 9 56 19 70 2 62 48 30 27 47 52 50 94 44 21 94 23 85 15 3 95 72 43 62 94 89 68 88\\r\\n17 40\\r\\n', 'output': ['1061\\r\\n']}, {'input': '50\\r\\n28 8 16 29 19 82 70 51 96 84 74 72 17 69 12 21 37 21 39 3 18 66 19 49 86 96 94 93 2 90 96 84 59 88 58 15 61 33 55 22 35 54 51 29 64 68 29 38 40\\r\\n23 28\\r\\n', 'output': ['344\\r\\n']}, {'input': '60\\r\\n24 28 25 21 43 71 64 73 71 90 51 83 69 43 75 43 78 72 56 61 99 7 23 86 9 16 16 94 23 74 18 56 20 72 13 31 75 34 35 86 61 49 4 72 84 7 65 70 66 52 21 38 6 43 69 40 73 46 5\\r\\n28 60\\r\\n', 'output': ['1502\\r\\n']}, {'input': '70\\r\\n69 95 34 14 67 61 6 95 94 44 28 94 73 66 39 13 19 71 73 71 28 48 26 22 32 88 38 95 43 59 88 77 80 55 17 95 40 83 67 1 38 95 58 63 56 98 49 2 41 4 73 8 78 41 64 71 60 71 41 61 67 4 4 19 97 14 39 20 27\\r\\n9 41\\r\\n', 'output': ['1767\\r\\n']}, {'input': '80\\r\\n65 15 43 6 43 98 100 16 69 98 4 54 25 40 2 35 12 23 38 29 10 89 30 6 4 8 7 96 64 43 11 49 89 38 20 59 54 85 46 16 16 89 60 54 28 37 32 34 67 9 78 30 50 87 58 53 99 48 77 3 5 6 19 99 16 20 31 10 80 76 82 56 56 83 72 81 84 60 28\\r\\n18 24\\r\\n', 'output': ['219\\r\\n']}, {'input': '90\\r\\n61 35 100 99 67 87 42 90 44 4 81 65 29 63 66 56 53 22 55 87 39 30 34 42 27 80 29 97 85 28 81 22 50 22 24 75 67 86 78 79 94 35 13 97 48 76 68 66 94 13 82 1 22 85 5 36 86 73 65 97 43 56 35 26 87 25 74 47 81 67 73 75 99 75 53 38 70 21 66 78 38 17 57 40 93 57 68 55 1\\r\\n12 44\\r\\n', 'output': ['1713\\r\\n']}, {'input': '95\\r\\n37 74 53 96 65 84 65 72 95 45 6 77 91 35 58 50 51 51 97 30 51 20 79 81 92 10 89 34 40 76 71 54 26 34 73 72 72 28 53 19 95 64 97 10 44 15 12 38 5 63 96 95 86 8 36 96 45 53 81 5 18 18 47 97 65 9 33 53 41 86 37 53 5 40 15 76 83 45 33 18 26 5 19 90 46 40 100 42 10 90 13 81 40 53\\r\\n6 15\\r\\n', 'output': ['570\\r\\n']}, {'input': '96\\r\\n51 32 95 75 23 54 70 89 67 3 1 51 4 100 97 30 9 35 56 38 54 77 56 98 43 17 60 43 72 46 87 61 100 65 81 22 74 38 16 96 5 10 54 22 23 22 10 91 9 54 49 82 29 73 33 98 75 8 4 26 24 90 71 42 90 24 94 74 94 10 41 98 56 63 18 43 56 21 26 64 74 33 22 38 67 66 38 60 64 76 53 10 4 65 76\\r\\n21 26\\r\\n', 'output': ['328\\r\\n']}, {'input': '97\\r\\n18 90 84 7 33 24 75 55 86 10 96 72 16 64 37 9 19 71 62 97 5 34 85 15 46 72 82 51 52 16 55 68 27 97 42 72 76 97 32 73 14 56 11 86 2 81 59 95 60 93 1 22 71 37 77 100 6 16 78 47 78 62 94 86 16 91 56 46 47 35 93 44 7 86 70 10 29 45 67 62 71 61 74 39 36 92 24 26 65 14 93 92 15 28 79 59\\r\\n6 68\\r\\n', 'output': ['3385\\r\\n']}, {'input': '98\\r\\n32 47 26 86 43 42 79 72 6 68 40 46 29 80 24 89 29 7 21 56 8 92 13 33 50 79 5 7 84 85 24 23 1 80 51 21 26 55 96 51 24 2 68 98 81 88 57 100 64 84 54 10 14 2 74 1 89 71 1 20 84 85 17 31 42 58 69 67 48 60 97 90 58 10 21 29 2 21 60 61 68 89 77 39 57 18 61 44 67 100 33 74 27 40 83 29 6\\r\\n8 77\\r\\n', 'output': ['3319\\r\\n']}, {'input': '99\\r\\n46 5 16 66 53 12 84 89 26 27 35 68 41 44 63 17 88 43 80 15 59 1 42 50 53 34 75 16 16 55 92 30 28 11 12 71 27 65 11 28 86 47 24 10 60 47 7 53 16 75 6 49 56 66 70 3 20 78 75 41 38 57 89 23 16 74 30 39 1 32 49 84 9 33 25 95 75 45 54 59 17 17 29 40 79 96 47 11 69 86 73 56 91 4 87 47 31 24\\r\\n23 36\\r\\n', 'output': ['514\\r\\n']}, {'input': '100\\r\\n63 65 21 41 95 23 3 4 12 23 95 50 75 63 58 34 71 27 75 31 23 94 96 74 69 34 43 25 25 55 44 19 43 86 68 17 52 65 36 29 72 96 84 25 84 23 71 54 6 7 71 7 21 100 99 58 93 35 62 47 36 70 68 9 75 13 35 70 76 36 62 22 52 51 2 87 66 41 54 35 78 62 30 35 65 44 74 93 78 37 96 70 26 32 71 27 85 85 63\\r\\n43 92\\r\\n', 'output': ['2599\\r\\n']}, {'input': '51\\r\\n85 38 22 38 42 36 55 24 36 80 49 15 66 91 88 61 46 82 1 61 89 92 6 56 28 8 46 80 56 90 91 38 38 17 69 64 57 68 13 44 45 38 8 72 61 39 87 2 73 88\\r\\n15 27\\r\\n', 'output': ['618\\r\\n']}, {'input': '2\\r\\n3\\r\\n1 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\n6 8 22 22\\r\\n2 3\\r\\n', 'output': ['8\\r\\n']}, {'input': '6\\r\\n3 12 27 28 28\\r\\n3 4\\r\\n', 'output': ['27\\r\\n']}, {'input': '9\\r\\n1 2 2 2 2 3 3 5\\r\\n3 7\\r\\n', 'output': ['9\\r\\n']}, {'input': '10\\r\\n1 1 1 1 1 1 1 1 1\\r\\n6 8\\r\\n', 'output': ['2\\r\\n']}, {'input': '20\\r\\n1 1 1 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 3\\r\\n5 17\\r\\n', 'output': ['23\\r\\n']}, {'input': '25\\r\\n1 1 1 4 5 6 8 11 11 11 11 12 13 14 14 14 15 16 16 17 17 17 19 19\\r\\n4 8\\r\\n', 'output': ['23\\r\\n']}, {'input': '35\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\r\\n30 31\\r\\n', 'output': ['2\\r\\n']}, {'input': '45\\r\\n1 1 1 1 2 2 2 2 2 2 2 3 3 3 3 3 3 4 5 5 5 5 6 6 6 6 6 6 6 7 7 7 7 8 8 8 9 9 9 9 9 10 10 10\\r\\n42 45\\r\\n', 'output': ['30\\r\\n']}, {'input': '50\\r\\n1 8 8 13 14 15 15 16 19 21 22 24 26 31 32 37 45 47 47 47 50 50 51 54 55 56 58 61 61 61 63 63 64 66 66 67 67 70 71 80 83 84 85 92 92 94 95 95 100\\r\\n4 17\\r\\n', 'output': ['285\\r\\n']}, {'input': '60\\r\\n1 2 4 4 4 6 6 8 9 10 10 13 14 18 20 20 21 22 23 23 26 29 30 32 33 34 35 38 40 42 44 44 46 48 52 54 56 56 60 60 66 67 68 68 69 73 73 74 80 80 81 81 82 84 86 86 87 89 89\\r\\n56 58\\r\\n', 'output': ['173\\r\\n']}, {'input': '70\\r\\n1 2 3 3 4 5 5 7 7 7 8 8 8 8 9 9 10 12 12 12 12 13 16 16 16 16 16 16 17 17 18 18 20 20 21 23 24 25 25 26 29 29 29 29 31 32 32 34 35 36 36 37 37 38 39 39 40 40 40 40 41 41 42 43 44 44 44 45 45\\r\\n62 65\\r\\n', 'output': ['126\\r\\n']}, {'input': '80\\r\\n1 1 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 5 5 5 5 5 5 5 6 7 7 7 7 7 7 8 8 8 8 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12\\r\\n17 65\\r\\n', 'output': ['326\\r\\n']}, {'input': '90\\r\\n1 1 3 5 8 9 10 11 11 11 11 12 13 14 15 15 15 16 16 19 19 20 22 23 24 25 25 28 29 29 30 31 33 34 35 37 37 38 41 43 43 44 45 47 51 54 55 56 58 58 59 59 60 62 66 67 67 67 68 68 69 70 71 72 73 73 76 77 77 78 78 78 79 79 79 82 83 84 85 85 87 87 89 93 93 93 95 99 99\\r\\n28 48\\r\\n', 'output': ['784\\r\\n']}, {'input': '95\\r\\n2 2 3 3 4 6 6 7 7 7 9 10 12 12 12 12 13 14 15 16 17 18 20 20 20 20 21 21 21 21 22 22 22 22 22 23 23 23 25 26 26 27 27 27 28 29 29 30 30 31 32 33 34 36 37 37 38 39 39 39 42 43 43 43 45 47 48 50 50 51 52 53 54 54 54 55 55 55 58 59 60 61 61 61 61 62 62 63 64 65 66 67 67 67\\r\\n64 93\\r\\n', 'output': ['1636\\r\\n']}, {'input': '96\\r\\n1 1 2 3 3 5 8 9 9 10 10 10 11 11 11 11 11 12 13 13 13 14 15 15 16 16 17 17 17 17 18 18 20 20 20 21 21 21 23 24 24 25 25 26 27 27 27 27 29 29 29 30 30 30 32 32 32 32 32 32 33 33 34 34 34 35 35 35 36 36 37 37 37 38 39 40 41 41 41 41 42 42 43 43 45 45 45 46 46 47 47 49 50 52 52\\r\\n76 96\\r\\n', 'output': ['898\\r\\n']}, {'input': '98\\r\\n2 3 4 4 5 7 8 10 10 10 11 11 12 12 12 12 13 14 15 15 16 16 18 19 19 20 21 21 21 21 22 23 24 25 26 26 27 27 27 27 29 29 30 30 31 31 37 40 40 40 41 41 41 42 43 44 44 44 46 46 47 49 49 50 50 50 51 53 55 55 56 56 56 56 56 57 57 58 59 60 60 60 62 62 63 64 64 64 65 66 66 67 68 70 70 71 71\\r\\n8 90\\r\\n', 'output': ['3016\\r\\n']}, {'input': '99\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n66 95\\r\\n', 'output': ['29\\r\\n']}, {'input': '100\\r\\n1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 8 8 8 8 9 9 9 9 10 10 10 10 11 11 11 11 12 12 12 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 15 15 15 15 15 15 16 16 16 17 17\\r\\n39 52\\r\\n', 'output': ['82\\r\\n']}, {'input': '51\\r\\n5 7 9 16 19 25 26 29 29 30 31 32 32 41 43 44 47 49 50 50 51 52 54 55 56 63 64 66 67 70 74 74 77 78 79 80 80 85 86 87 89 89 90 92 93 94 94 95 95 97\\r\\n3 44\\r\\n', 'output': ['2268\\r\\n']}]", "source_code": "import java.util.*;\npublic class java1 {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int d[] = new int[n-1];\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        int years=0;\n        for(int i=0; i<(n-1);i++){\n            d[i]=sc.nextInt();\n        }\n        for(int i = a-1;i<b;i++){\n             years=years+d[i];\n        }\n        System.out.println(years);\n    }\n}"}
{"src_uid": "b1ef19d7027dc82d76859d64a6f43439", "id": 88, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1100, "testcases": "[{'input': 'Instead of dogging Your footsteps it disappears but you dont notice anything\\r\\nwhere is your dog\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'Instead of dogging Your footsteps it disappears but you dont notice anything\\r\\nYour dog is upstears\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'Instead of dogging your footsteps it disappears but you dont notice anything\\r\\nYour dog is upstears\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'abcdefg hijk\\r\\nk j i h g f e d c b a\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'HpOKgo\\r\\neAtAVB\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'GRZGc\\r\\nLPzD\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'GtPXu\\r\\nd\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'FVF\\r\\nr \\r\\n', 'output': ['NO\\r\\n']}, {'input': 'HpOKgo\\r\\nogK\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'GRZGc\\r\\nZG\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'HpOKgoueAtAVBdGffvQheJDejNDHhhwyKJisugiRAH OseK yUwqPPNuThUxTfthqIUeb wS jChGOdFDarNrKRT  MlwKecxWNoKEeD BbiHAruE XMlvKYVsJGPP\\r\\nAHN  XvoaNwV  AVBKwKjr u      U K wKE D K   Jy KiHsR h d W  Js IHyMPK Br iSqe  E fDA   g H\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'GRZGcsLPzDrCSXhhNTaibJqVphhjbcPoZhCDUlzAbDnRWjHvxLKtpGiFWiGbfeDxBwCrdJmJGCGv GebAOinUsFrlqKTILOmxrFjSpEoVGoTdSSstJWVgMLKMPettxHASaQZNdOIObcTxtF qTHWBdNIKwj\\r\\nWqrxze Ji x q aT GllLrRV jMpGiMDTwwS JDsPGpAZKACmsFCOS CD Sj  bCDgKF  jJxa RddtLFAi VGLHH SecObzG q  hPF \\r\\n', 'output': ['YES\\r\\n']}, {'input': 'GtPXuwdAxNhODQbjRslDDKciOALJrCifTjDQurQEBeFUUSZWwCZQPdYwZkYbrduMijFjgodAOrKIuUKwSXageZuOWMIhAMexyLRzFuzuXqBDTEaWMzVdbzhxDGSJC SsIYuYILwpiwwcObEHWpFvHeBkWYNitqYrxqgHReHcKnHbtjcWZuaxPBVPb\\r\\nTQIKyqFaewOkY lZUOOuxEw EwuKcArxRQGFYkvVWIAe SuanPeHuDjquurJu aSxwgOSw jYMwjxItNUUArQjO BIujAhSwttLWp\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'FVFSr unvtXbpKWF vPaAgNaoTqklzVqiGYcUcBIcattzBrRuNSnKUtmdGKbjcE\\r\\nUzrU K  an GFGR        Wc zt iBa     P c    T K v p     V In   b           B   c\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'lSwjnYLYtDNIZjxHiTawdh ntSzggZogcIZTuiTMWVgwyloMtEhqkrOxgIcFvwvsboXUPILPIymFAEXnhApewJXJNtFyZ\\r\\nAoxe  jWZ u  yImg  o AZ FNI w lpj  tNhT g y  ZYcb rc J    w Dlv\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'kvlekcdJqODUKdsJlXkRaileTmdGwUHWWgvgUokQxRzzbpFnswvNKiDnjfOFGvFcnaaiRnBGQmqoPxDHepgYasLhzjDgmvaFfVNEcSPVQCJKAbSyTGpXsAjIHr\\r\\nGjzUllNaGGKXUdYmDFpqFAKIwvTpjmqnyswWRTnxlBnavAGvavxJemrjvRJc\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'kWbvhgvvoYOhwXmgTwOSCDXrtFHhqwvMlCvsuuAUXMmWaYXiqHplFZZemhgkTuvsUtIaUxtyYauBIpjdbyYxjZ ZkaBPzwqPfqF kCqGRmXvWuabnQognnkvdNDtRUsSUvSzgBuxCMBWJifbxWegsknp\\r\\nBsH   bWHJD n Ca T xq  PRCv  tatn Wjy sm  I q s WCjFqdWe  t W XUs  Do  eb Pfh ii  hTbF  O Fll\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'OTmLdkMhmDEOMQMiW ZpzEIjyElHFrNCfFQDp SZyoZaEIUIpyCHfwOUqiSkKtFHggrTBGkqfOxkChPztmPrsHoxVwAdrxbZLKxPXHlMnrkgMgiaHFopiFFiUEtKwCjpJtwdwkbJCgA bxeDIscFdmHQJLAMNhWlrZisQrHQpvbALWTwpf jnx\\r\\nDbZwrQbydCdkJMCrftiwtPFfpMiwwrfIrKidEChKECxQUBVUEfFirbGWiLkFQkdJiFtkrtkbIAEXCEDkwLpK\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'NwcGaIeSkOva\\r\\naIa\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'gSrAcVYgAdbdayzbKGhIzLDjyznLRIJH KyvilAaEddmgkBPCNzpmPNeGEbmmpAyHvUSoPvnaORrPUuafpReEGoDOQsAYnUHYfBqhdcopQfxJuGXgKnbdVMQNhJYkyjiJDKlShqBTtnnDQQzEijOMcYRGMgPGVhfIReYennKBLwDTVvcHMIHMgVpJkvzTrezxqS\\r\\nHJerIVvRyfrPgAQMTI AqGNO mQDfDwQHKgeeYmuRmozKHILvehMPOJNMRtPTAfvKvsoGKi xHEeKqDAYmQJPUXRJbIbHrgVOMGMTdvYiLui\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'ReB hksbHqQXxUgpvoNK bFqmNVCEiOyKdKcAJQRkpeohpfuqZabvrLfmpZOMcfyFBJGZwVMxiUPP pbZZtJjxhEwvrAba\\r\\nJTCpQnIViIGIdQtLnmkVzmcbBZR CoxAdTtWSYpbOglDFifqIVQ vfGKGtLpxpJHiHSWCMeRcrVOXBGBhoEnVhNTPWGTOErNtSvokcGdgZXbgTEtISUyTwaXUEIlJMmutsdCbiyrPZPJyRdOjnSuAGttLy\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'hrLzRegCuDGxTrhDgVvM KowwyYuXGzIpcXdSMgeQVfVOtJZdkhNYSegwFWWoPqcZoeapbQnyCtojgkcyezUNHGGIZrhzsKrvvcrtokIdcnqXXkCNKjrOjrnEAKBNxyDdiMVeyLvXxUYMZQRFdlcdlcxzKTeYzBlmpNiwWbNAAhWkMoGpRxkCuyqkzXdKWwGH\\r\\nJESKDOfnFdxPvUOCkrgSBEPQHJtJHzuNGstRbTCcchRWJvCcveSEAtwtOmZZiW\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'yDBxCtUygQwWqONxQCcuAvVCkMGlqgC zvkfEkwqbhMCQxnkwQIUhucCbVUyOBUcXvTNEGriTBwMDMfdsPZgWRgIUDqM\\r\\neptVnORTTyixxmWIBpSTEwOXqGZllBgSxPenYCDlFwckJlWsoVwWLAIbPOmFqcKcTcoQqahetl KLfVSyaLVebzsGwPSVbtQAeUdZAaJtfxlCEvvaRhLlVvRJhKat IaB awdqcDlrrhTbRxjEbzGwcdmdavkhcjHjzmwbxAgw\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'jlMwnnotSdlQMluKWkJwAeCetcqbIEnKeNyLWoKCGONDRBQOjbkGpUvDlmSFUJ bWhohqmmIUWTlDsvelUArAcZJBipMDwUvRfBsYzMdQnPDPAuBaeJmAxVKwUMJrwMDxNtlrtAowVWqWiwFGtmquZAcrpFsLHCrvMSMMlvQUqypAihQWrFMNoaqfs IBg\\r\\nNzeWQ bafrmDsYlpNHSGTBBgPl WIcuNhyNaNOEFvL\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'zyWvXBcUZqGqjHwZHQryBtFliLYnweXAoMKNpLaunaOlzaauWmLtywsEvWPiwxJapocAFRMjrqWJXYqfKEbBKnzLO\\r\\npsbi bsXpSeJaCkIuPWfSRADXdIClxcDCowwJzGCDTyAl\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'kKhuIwRPLCwPFfcnsyCfBdnsraGeOCcLTfXuGjqFSGPSAeDZJSS bXKFanNqWjpFnvRpWxHJspvisDlADJBioxXNbVoXeUedoPcNEpUyEeYxdJXhGzFAmpAiHotSVwbZQsuWjIVhVaEGgqbZHIoDpiEmjTtFylCwCkWWzUOoUfOHxEZvDwNpXhBWamHn\\r\\nK VpJjGhNbwCRhcfmNGVjewBFpEmPlIKeTuWiukDtEWpjgqciqglkyNfWrBLbGAKvlNWxaUelJmSlSoakSpRzePvJsshOsTYrMPXdxKpaShjyVIXGhRIAdtiGpNwtiRmGTBZhkJqIMdxMHX RMxCMYcWjcjhtCHyFnCvjjezGbkRDRiVxkbh\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'AXssNpFKyQmJcBdBdfkhhMUzfqJVgcLBddkwtnFSzSRUCjiDcdtmkzIGkCKSxWUEGhmHmciktJyGMkgCductyHx\\r\\nI nYhmJfPnvoKUiXYUBIPIcxNYTtvwPUoXERZvY ahlDpQFNMmVZqEBiYqYlHNqcpSCmhFczBlOAhsYFeqMGfqL EJsDNOgwoJfBzqijKOFcYQ\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'lkhrzDZmkdbjzYKPNMRkiwCFoZsMzBQMnxxdKKVJezSBjnLjPpUYtabcPTIaDJeDEobbWHdKOdVfMQwDXzDDcSrwVenDEYpMqfiOQ xSsqApWnAMoyhQXCKFzHvvzvUvkWwmwZrvZz\\r\\nsUzGspYpRFsHRbRgTQuCBgnFgPkisTUfFNwyEEWWRiweWWgjRkVQxgTwxOzdsOwfrGIH O gCXpzvHzfItuEHaihmugEyymSJIogYwX qAwcwIItidfnzZDhZgQHi eRjMAeVkJHceDZuJkmxGowOsmcGYYvk Ajtgi TxwihvjLViNZjvscTWvsaQUelTSivLShhEl\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'BRsVjyNhrqRHVwrJzuzRigEhdpbDmaACSPfed\\r\\nlWqKTjlrqOCUbgBBZdZDGCeQJDXawPnnDkQdZDgwrEQk\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'KRmINuyBYPwiTsdlyiNVuylToysJKmOpcLovAtwGPqrgFJQNAYvuAiyQRkeFMECVZvkDEmTauXlyjAaYRnTJXORMZRnTakBaUzSelMilejySDIZjQjzcOIrwXdvDvpeRIkoBgreyFXIyyIZutjiEBtwrmzQtPVUhvvdEtDMbXjBpoPVjGdM EXTAK JbCnw\\r\\nXZZqlJvzKKtvdNlzFPDTYxidqlsgufVzyEmO FZuLQ vVQsJESNviUCovCK NwwlbxsmPtOJNmAonCqrOZ bZ LVKAsQGmoLnYjeekvEIECFk\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Solution {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        char[] letter = sc.nextLine().toCharArray();\n        char[] target = sc.nextLine().toCharArray();\n        \n        int count = 0;\n        boolean found = false;\n        for (int i = 0; i < target.length; i++) {\n            if (target[i] =='')\n                continue;\n            else {\n                found = false;\n                for (int j = 0; j < letter.length; j++) {\n                    if (letter[j] == target[i]) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    count = 1;\n                    break;\n                }\n            }\n        }\n        if (count == 1)\n            System.out.println(\"NO\");\n        else \n            System.out.println(\"YES\");\n    }\n}"}
{"src_uid": "b1ef19d7027dc82d76859d64a6f43439", "id": 88, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1100, "testcases": "[{'input': 'Instead of dogging Your footsteps it disappears but you dont notice anything\\r\\nwhere is your dog\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'Instead of dogging Your footsteps it disappears but you dont notice anything\\r\\nYour dog is upstears\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'Instead of dogging your footsteps it disappears but you dont notice anything\\r\\nYour dog is upstears\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'abcdefg hijk\\r\\nk j i h g f e d c b a\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'HpOKgo\\r\\neAtAVB\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'GRZGc\\r\\nLPzD\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'GtPXu\\r\\nd\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'FVF\\r\\nr \\r\\n', 'output': ['NO\\r\\n']}, {'input': 'HpOKgo\\r\\nogK\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'GRZGc\\r\\nZG\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'HpOKgoueAtAVBdGffvQheJDejNDHhhwyKJisugiRAH OseK yUwqPPNuThUxTfthqIUeb wS jChGOdFDarNrKRT  MlwKecxWNoKEeD BbiHAruE XMlvKYVsJGPP\\r\\nAHN  XvoaNwV  AVBKwKjr u      U K wKE D K   Jy KiHsR h d W  Js IHyMPK Br iSqe  E fDA   g H\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'GRZGcsLPzDrCSXhhNTaibJqVphhjbcPoZhCDUlzAbDnRWjHvxLKtpGiFWiGbfeDxBwCrdJmJGCGv GebAOinUsFrlqKTILOmxrFjSpEoVGoTdSSstJWVgMLKMPettxHASaQZNdOIObcTxtF qTHWBdNIKwj\\r\\nWqrxze Ji x q aT GllLrRV jMpGiMDTwwS JDsPGpAZKACmsFCOS CD Sj  bCDgKF  jJxa RddtLFAi VGLHH SecObzG q  hPF \\r\\n', 'output': ['YES\\r\\n']}, {'input': 'GtPXuwdAxNhODQbjRslDDKciOALJrCifTjDQurQEBeFUUSZWwCZQPdYwZkYbrduMijFjgodAOrKIuUKwSXageZuOWMIhAMexyLRzFuzuXqBDTEaWMzVdbzhxDGSJC SsIYuYILwpiwwcObEHWpFvHeBkWYNitqYrxqgHReHcKnHbtjcWZuaxPBVPb\\r\\nTQIKyqFaewOkY lZUOOuxEw EwuKcArxRQGFYkvVWIAe SuanPeHuDjquurJu aSxwgOSw jYMwjxItNUUArQjO BIujAhSwttLWp\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'FVFSr unvtXbpKWF vPaAgNaoTqklzVqiGYcUcBIcattzBrRuNSnKUtmdGKbjcE\\r\\nUzrU K  an GFGR        Wc zt iBa     P c    T K v p     V In   b           B   c\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'lSwjnYLYtDNIZjxHiTawdh ntSzggZogcIZTuiTMWVgwyloMtEhqkrOxgIcFvwvsboXUPILPIymFAEXnhApewJXJNtFyZ\\r\\nAoxe  jWZ u  yImg  o AZ FNI w lpj  tNhT g y  ZYcb rc J    w Dlv\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'kvlekcdJqODUKdsJlXkRaileTmdGwUHWWgvgUokQxRzzbpFnswvNKiDnjfOFGvFcnaaiRnBGQmqoPxDHepgYasLhzjDgmvaFfVNEcSPVQCJKAbSyTGpXsAjIHr\\r\\nGjzUllNaGGKXUdYmDFpqFAKIwvTpjmqnyswWRTnxlBnavAGvavxJemrjvRJc\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'kWbvhgvvoYOhwXmgTwOSCDXrtFHhqwvMlCvsuuAUXMmWaYXiqHplFZZemhgkTuvsUtIaUxtyYauBIpjdbyYxjZ ZkaBPzwqPfqF kCqGRmXvWuabnQognnkvdNDtRUsSUvSzgBuxCMBWJifbxWegsknp\\r\\nBsH   bWHJD n Ca T xq  PRCv  tatn Wjy sm  I q s WCjFqdWe  t W XUs  Do  eb Pfh ii  hTbF  O Fll\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'OTmLdkMhmDEOMQMiW ZpzEIjyElHFrNCfFQDp SZyoZaEIUIpyCHfwOUqiSkKtFHggrTBGkqfOxkChPztmPrsHoxVwAdrxbZLKxPXHlMnrkgMgiaHFopiFFiUEtKwCjpJtwdwkbJCgA bxeDIscFdmHQJLAMNhWlrZisQrHQpvbALWTwpf jnx\\r\\nDbZwrQbydCdkJMCrftiwtPFfpMiwwrfIrKidEChKECxQUBVUEfFirbGWiLkFQkdJiFtkrtkbIAEXCEDkwLpK\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'NwcGaIeSkOva\\r\\naIa\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'gSrAcVYgAdbdayzbKGhIzLDjyznLRIJH KyvilAaEddmgkBPCNzpmPNeGEbmmpAyHvUSoPvnaORrPUuafpReEGoDOQsAYnUHYfBqhdcopQfxJuGXgKnbdVMQNhJYkyjiJDKlShqBTtnnDQQzEijOMcYRGMgPGVhfIReYennKBLwDTVvcHMIHMgVpJkvzTrezxqS\\r\\nHJerIVvRyfrPgAQMTI AqGNO mQDfDwQHKgeeYmuRmozKHILvehMPOJNMRtPTAfvKvsoGKi xHEeKqDAYmQJPUXRJbIbHrgVOMGMTdvYiLui\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'ReB hksbHqQXxUgpvoNK bFqmNVCEiOyKdKcAJQRkpeohpfuqZabvrLfmpZOMcfyFBJGZwVMxiUPP pbZZtJjxhEwvrAba\\r\\nJTCpQnIViIGIdQtLnmkVzmcbBZR CoxAdTtWSYpbOglDFifqIVQ vfGKGtLpxpJHiHSWCMeRcrVOXBGBhoEnVhNTPWGTOErNtSvokcGdgZXbgTEtISUyTwaXUEIlJMmutsdCbiyrPZPJyRdOjnSuAGttLy\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'hrLzRegCuDGxTrhDgVvM KowwyYuXGzIpcXdSMgeQVfVOtJZdkhNYSegwFWWoPqcZoeapbQnyCtojgkcyezUNHGGIZrhzsKrvvcrtokIdcnqXXkCNKjrOjrnEAKBNxyDdiMVeyLvXxUYMZQRFdlcdlcxzKTeYzBlmpNiwWbNAAhWkMoGpRxkCuyqkzXdKWwGH\\r\\nJESKDOfnFdxPvUOCkrgSBEPQHJtJHzuNGstRbTCcchRWJvCcveSEAtwtOmZZiW\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'yDBxCtUygQwWqONxQCcuAvVCkMGlqgC zvkfEkwqbhMCQxnkwQIUhucCbVUyOBUcXvTNEGriTBwMDMfdsPZgWRgIUDqM\\r\\neptVnORTTyixxmWIBpSTEwOXqGZllBgSxPenYCDlFwckJlWsoVwWLAIbPOmFqcKcTcoQqahetl KLfVSyaLVebzsGwPSVbtQAeUdZAaJtfxlCEvvaRhLlVvRJhKat IaB awdqcDlrrhTbRxjEbzGwcdmdavkhcjHjzmwbxAgw\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'jlMwnnotSdlQMluKWkJwAeCetcqbIEnKeNyLWoKCGONDRBQOjbkGpUvDlmSFUJ bWhohqmmIUWTlDsvelUArAcZJBipMDwUvRfBsYzMdQnPDPAuBaeJmAxVKwUMJrwMDxNtlrtAowVWqWiwFGtmquZAcrpFsLHCrvMSMMlvQUqypAihQWrFMNoaqfs IBg\\r\\nNzeWQ bafrmDsYlpNHSGTBBgPl WIcuNhyNaNOEFvL\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'zyWvXBcUZqGqjHwZHQryBtFliLYnweXAoMKNpLaunaOlzaauWmLtywsEvWPiwxJapocAFRMjrqWJXYqfKEbBKnzLO\\r\\npsbi bsXpSeJaCkIuPWfSRADXdIClxcDCowwJzGCDTyAl\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'kKhuIwRPLCwPFfcnsyCfBdnsraGeOCcLTfXuGjqFSGPSAeDZJSS bXKFanNqWjpFnvRpWxHJspvisDlADJBioxXNbVoXeUedoPcNEpUyEeYxdJXhGzFAmpAiHotSVwbZQsuWjIVhVaEGgqbZHIoDpiEmjTtFylCwCkWWzUOoUfOHxEZvDwNpXhBWamHn\\r\\nK VpJjGhNbwCRhcfmNGVjewBFpEmPlIKeTuWiukDtEWpjgqciqglkyNfWrBLbGAKvlNWxaUelJmSlSoakSpRzePvJsshOsTYrMPXdxKpaShjyVIXGhRIAdtiGpNwtiRmGTBZhkJqIMdxMHX RMxCMYcWjcjhtCHyFnCvjjezGbkRDRiVxkbh\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'AXssNpFKyQmJcBdBdfkhhMUzfqJVgcLBddkwtnFSzSRUCjiDcdtmkzIGkCKSxWUEGhmHmciktJyGMkgCductyHx\\r\\nI nYhmJfPnvoKUiXYUBIPIcxNYTtvwPUoXERZvY ahlDpQFNMmVZqEBiYqYlHNqcpSCmhFczBlOAhsYFeqMGfqL EJsDNOgwoJfBzqijKOFcYQ\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'lkhrzDZmkdbjzYKPNMRkiwCFoZsMzBQMnxxdKKVJezSBjnLjPpUYtabcPTIaDJeDEobbWHdKOdVfMQwDXzDDcSrwVenDEYpMqfiOQ xSsqApWnAMoyhQXCKFzHvvzvUvkWwmwZrvZz\\r\\nsUzGspYpRFsHRbRgTQuCBgnFgPkisTUfFNwyEEWWRiweWWgjRkVQxgTwxOzdsOwfrGIH O gCXpzvHzfItuEHaihmugEyymSJIogYwX qAwcwIItidfnzZDhZgQHi eRjMAeVkJHceDZuJkmxGowOsmcGYYvk Ajtgi TxwihvjLViNZjvscTWvsaQUelTSivLShhEl\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'BRsVjyNhrqRHVwrJzuzRigEhdpbDmaACSPfed\\r\\nlWqKTjlrqOCUbgBBZdZDGCeQJDXawPnnDkQdZDgwrEQk\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'KRmINuyBYPwiTsdlyiNVuylToysJKmOpcLovAtwGPqrgFJQNAYvuAiyQRkeFMECVZvkDEmTauXlyjAaYRnTJXORMZRnTakBaUzSelMilejySDIZjQjzcOIrwXdvDvpeRIkoBgreyFXIyyIZutjiEBtwrmzQtPVUhvvdEtDMbXjBpoPVjGdM EXTAK JbCnw\\r\\nXZZqlJvzKKtvdNlzFPDTYxidqlsgufVzyEmO FZuLQ vVQsJESNviUCovCK NwwlbxsmPtOJNmAonCqrOZ bZ LVKAsQGmoLnYjeekvEIECFk\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Letter {\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tString heading = input.nextLine();\n\t\tString text = input.nextLine();\n\t\tint count = 0;\n\t\tint spacecount = 0;\n\t\tint index = 0;\n\t\tint spaceindex = 0;\n\t\tboolean flag = true;\n\t\tboolean flag2 = true;\n\t\twhile (flag2) {\n\t\t\tspaceindex = text.indexOf(' ', spaceindex + 1);\n\t\t\tif (spaceindex!= -1)\n\t\t\t\tspacecount++;\n\t\t\telse\n\t\t\t\tflag2 = false;\n\t\t}\n\t\twhile (flag) {\n\t\t\tindex = text.indexOf(heading.charAt(count), index + 1);\n\t\t\tif (index!= -1)\n\t\t\t\tcount++;\n\t\t\telse\n\t\t\t\tflag = false;\n\t\t}\n\t\tif (count == heading.length() - spacecount) {\n\t\t\tfor (int i = 0; i < text.length(); i++) {\n\t\t\t\tif (text.charAt(i) =='')\n\t\t\t\t\tspacecount--;\n\t\t\t\telse if (text.charAt(i) == heading.charAt(index)) {\n\t\t\t\t\tif (index == 0) {\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\twhile (flag) {\n\t\t\t\t\t\t\tindex = text.indexOf(heading.charAt(count), index + 1);\n\t\t\t\t\t\t\tif (index!= -1)\n\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tflag = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (text.charAt(i - 1) =='') {\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\twhile (flag) {\n\t\t\t\t\t\t\tindex = text.indexOf(heading.charAt(count), index + 1);\n\t\t\t\t\t\t\tif (index!= -1)\n\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tflag = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count == heading.length() - spacecount)\n\t\t\t\tSystem.out.println(\"YES\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"NO\");\n\t\t} else\n\t\t\tSystem.out.println(\"NO\");\n\n\t}\n}\n"}
{"src_uid": "b1ef19d7027dc82d76859d64a6f43439", "id": 88, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1100, "testcases": "[{'input': 'Instead of dogging Your footsteps it disappears but you dont notice anything\\r\\nwhere is your dog\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'Instead of dogging Your footsteps it disappears but you dont notice anything\\r\\nYour dog is upstears\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'Instead of dogging your footsteps it disappears but you dont notice anything\\r\\nYour dog is upstears\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'abcdefg hijk\\r\\nk j i h g f e d c b a\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'HpOKgo\\r\\neAtAVB\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'GRZGc\\r\\nLPzD\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'GtPXu\\r\\nd\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'FVF\\r\\nr \\r\\n', 'output': ['NO\\r\\n']}, {'input': 'HpOKgo\\r\\nogK\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'GRZGc\\r\\nZG\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'HpOKgoueAtAVBdGffvQheJDejNDHhhwyKJisugiRAH OseK yUwqPPNuThUxTfthqIUeb wS jChGOdFDarNrKRT  MlwKecxWNoKEeD BbiHAruE XMlvKYVsJGPP\\r\\nAHN  XvoaNwV  AVBKwKjr u      U K wKE D K   Jy KiHsR h d W  Js IHyMPK Br iSqe  E fDA   g H\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'GRZGcsLPzDrCSXhhNTaibJqVphhjbcPoZhCDUlzAbDnRWjHvxLKtpGiFWiGbfeDxBwCrdJmJGCGv GebAOinUsFrlqKTILOmxrFjSpEoVGoTdSSstJWVgMLKMPettxHASaQZNdOIObcTxtF qTHWBdNIKwj\\r\\nWqrxze Ji x q aT GllLrRV jMpGiMDTwwS JDsPGpAZKACmsFCOS CD Sj  bCDgKF  jJxa RddtLFAi VGLHH SecObzG q  hPF \\r\\n', 'output': ['YES\\r\\n']}, {'input': 'GtPXuwdAxNhODQbjRslDDKciOALJrCifTjDQurQEBeFUUSZWwCZQPdYwZkYbrduMijFjgodAOrKIuUKwSXageZuOWMIhAMexyLRzFuzuXqBDTEaWMzVdbzhxDGSJC SsIYuYILwpiwwcObEHWpFvHeBkWYNitqYrxqgHReHcKnHbtjcWZuaxPBVPb\\r\\nTQIKyqFaewOkY lZUOOuxEw EwuKcArxRQGFYkvVWIAe SuanPeHuDjquurJu aSxwgOSw jYMwjxItNUUArQjO BIujAhSwttLWp\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'FVFSr unvtXbpKWF vPaAgNaoTqklzVqiGYcUcBIcattzBrRuNSnKUtmdGKbjcE\\r\\nUzrU K  an GFGR        Wc zt iBa     P c    T K v p     V In   b           B   c\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'lSwjnYLYtDNIZjxHiTawdh ntSzggZogcIZTuiTMWVgwyloMtEhqkrOxgIcFvwvsboXUPILPIymFAEXnhApewJXJNtFyZ\\r\\nAoxe  jWZ u  yImg  o AZ FNI w lpj  tNhT g y  ZYcb rc J    w Dlv\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'kvlekcdJqODUKdsJlXkRaileTmdGwUHWWgvgUokQxRzzbpFnswvNKiDnjfOFGvFcnaaiRnBGQmqoPxDHepgYasLhzjDgmvaFfVNEcSPVQCJKAbSyTGpXsAjIHr\\r\\nGjzUllNaGGKXUdYmDFpqFAKIwvTpjmqnyswWRTnxlBnavAGvavxJemrjvRJc\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'kWbvhgvvoYOhwXmgTwOSCDXrtFHhqwvMlCvsuuAUXMmWaYXiqHplFZZemhgkTuvsUtIaUxtyYauBIpjdbyYxjZ ZkaBPzwqPfqF kCqGRmXvWuabnQognnkvdNDtRUsSUvSzgBuxCMBWJifbxWegsknp\\r\\nBsH   bWHJD n Ca T xq  PRCv  tatn Wjy sm  I q s WCjFqdWe  t W XUs  Do  eb Pfh ii  hTbF  O Fll\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'OTmLdkMhmDEOMQMiW ZpzEIjyElHFrNCfFQDp SZyoZaEIUIpyCHfwOUqiSkKtFHggrTBGkqfOxkChPztmPrsHoxVwAdrxbZLKxPXHlMnrkgMgiaHFopiFFiUEtKwCjpJtwdwkbJCgA bxeDIscFdmHQJLAMNhWlrZisQrHQpvbALWTwpf jnx\\r\\nDbZwrQbydCdkJMCrftiwtPFfpMiwwrfIrKidEChKECxQUBVUEfFirbGWiLkFQkdJiFtkrtkbIAEXCEDkwLpK\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'NwcGaIeSkOva\\r\\naIa\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'gSrAcVYgAdbdayzbKGhIzLDjyznLRIJH KyvilAaEddmgkBPCNzpmPNeGEbmmpAyHvUSoPvnaORrPUuafpReEGoDOQsAYnUHYfBqhdcopQfxJuGXgKnbdVMQNhJYkyjiJDKlShqBTtnnDQQzEijOMcYRGMgPGVhfIReYennKBLwDTVvcHMIHMgVpJkvzTrezxqS\\r\\nHJerIVvRyfrPgAQMTI AqGNO mQDfDwQHKgeeYmuRmozKHILvehMPOJNMRtPTAfvKvsoGKi xHEeKqDAYmQJPUXRJbIbHrgVOMGMTdvYiLui\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'ReB hksbHqQXxUgpvoNK bFqmNVCEiOyKdKcAJQRkpeohpfuqZabvrLfmpZOMcfyFBJGZwVMxiUPP pbZZtJjxhEwvrAba\\r\\nJTCpQnIViIGIdQtLnmkVzmcbBZR CoxAdTtWSYpbOglDFifqIVQ vfGKGtLpxpJHiHSWCMeRcrVOXBGBhoEnVhNTPWGTOErNtSvokcGdgZXbgTEtISUyTwaXUEIlJMmutsdCbiyrPZPJyRdOjnSuAGttLy\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'hrLzRegCuDGxTrhDgVvM KowwyYuXGzIpcXdSMgeQVfVOtJZdkhNYSegwFWWoPqcZoeapbQnyCtojgkcyezUNHGGIZrhzsKrvvcrtokIdcnqXXkCNKjrOjrnEAKBNxyDdiMVeyLvXxUYMZQRFdlcdlcxzKTeYzBlmpNiwWbNAAhWkMoGpRxkCuyqkzXdKWwGH\\r\\nJESKDOfnFdxPvUOCkrgSBEPQHJtJHzuNGstRbTCcchRWJvCcveSEAtwtOmZZiW\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'yDBxCtUygQwWqONxQCcuAvVCkMGlqgC zvkfEkwqbhMCQxnkwQIUhucCbVUyOBUcXvTNEGriTBwMDMfdsPZgWRgIUDqM\\r\\neptVnORTTyixxmWIBpSTEwOXqGZllBgSxPenYCDlFwckJlWsoVwWLAIbPOmFqcKcTcoQqahetl KLfVSyaLVebzsGwPSVbtQAeUdZAaJtfxlCEvvaRhLlVvRJhKat IaB awdqcDlrrhTbRxjEbzGwcdmdavkhcjHjzmwbxAgw\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'jlMwnnotSdlQMluKWkJwAeCetcqbIEnKeNyLWoKCGONDRBQOjbkGpUvDlmSFUJ bWhohqmmIUWTlDsvelUArAcZJBipMDwUvRfBsYzMdQnPDPAuBaeJmAxVKwUMJrwMDxNtlrtAowVWqWiwFGtmquZAcrpFsLHCrvMSMMlvQUqypAihQWrFMNoaqfs IBg\\r\\nNzeWQ bafrmDsYlpNHSGTBBgPl WIcuNhyNaNOEFvL\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'zyWvXBcUZqGqjHwZHQryBtFliLYnweXAoMKNpLaunaOlzaauWmLtywsEvWPiwxJapocAFRMjrqWJXYqfKEbBKnzLO\\r\\npsbi bsXpSeJaCkIuPWfSRADXdIClxcDCowwJzGCDTyAl\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'kKhuIwRPLCwPFfcnsyCfBdnsraGeOCcLTfXuGjqFSGPSAeDZJSS bXKFanNqWjpFnvRpWxHJspvisDlADJBioxXNbVoXeUedoPcNEpUyEeYxdJXhGzFAmpAiHotSVwbZQsuWjIVhVaEGgqbZHIoDpiEmjTtFylCwCkWWzUOoUfOHxEZvDwNpXhBWamHn\\r\\nK VpJjGhNbwCRhcfmNGVjewBFpEmPlIKeTuWiukDtEWpjgqciqglkyNfWrBLbGAKvlNWxaUelJmSlSoakSpRzePvJsshOsTYrMPXdxKpaShjyVIXGhRIAdtiGpNwtiRmGTBZhkJqIMdxMHX RMxCMYcWjcjhtCHyFnCvjjezGbkRDRiVxkbh\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'AXssNpFKyQmJcBdBdfkhhMUzfqJVgcLBddkwtnFSzSRUCjiDcdtmkzIGkCKSxWUEGhmHmciktJyGMkgCductyHx\\r\\nI nYhmJfPnvoKUiXYUBIPIcxNYTtvwPUoXERZvY ahlDpQFNMmVZqEBiYqYlHNqcpSCmhFczBlOAhsYFeqMGfqL EJsDNOgwoJfBzqijKOFcYQ\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'lkhrzDZmkdbjzYKPNMRkiwCFoZsMzBQMnxxdKKVJezSBjnLjPpUYtabcPTIaDJeDEobbWHdKOdVfMQwDXzDDcSrwVenDEYpMqfiOQ xSsqApWnAMoyhQXCKFzHvvzvUvkWwmwZrvZz\\r\\nsUzGspYpRFsHRbRgTQuCBgnFgPkisTUfFNwyEEWWRiweWWgjRkVQxgTwxOzdsOwfrGIH O gCXpzvHzfItuEHaihmugEyymSJIogYwX qAwcwIItidfnzZDhZgQHi eRjMAeVkJHceDZuJkmxGowOsmcGYYvk Ajtgi TxwihvjLViNZjvscTWvsaQUelTSivLShhEl\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'BRsVjyNhrqRHVwrJzuzRigEhdpbDmaACSPfed\\r\\nlWqKTjlrqOCUbgBBZdZDGCeQJDXawPnnDkQdZDgwrEQk\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'KRmINuyBYPwiTsdlyiNVuylToysJKmOpcLovAtwGPqrgFJQNAYvuAiyQRkeFMECVZvkDEmTauXlyjAaYRnTJXORMZRnTakBaUzSelMilejySDIZjQjzcOIrwXdvDvpeRIkoBgreyFXIyyIZutjiEBtwrmzQtPVUhvvdEtDMbXjBpoPVjGdM EXTAK JbCnw\\r\\nXZZqlJvzKKtvdNlzFPDTYxidqlsgufVzyEmO FZuLQ vVQsJESNviUCovCK NwwlbxsmPtOJNmAonCqrOZ bZ LVKAsQGmoLnYjeekvEIECFk\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.io.*;\n\npublic class Main {\n \tprivate final InputStream inputStream;\n\tprivate final OutputStream outputStream;\n\tprivate final InputReader reader;\n\tprivate final PrintWriter writer;\n\t\n\tpublic Main(InputStream stream, OutputStream output) {\n\t\tthis.inputStream = stream;\n\t\tthis.outputStream = output;\n\t\treader = new InputReader(stream);\n\t\twriter = new PrintWriter(output);\n\t}\n\n\tpublic static void main(String[] args) throws IOException {\n\t\ttry (InputStream inputStream = System.in; OutputStream outputStream = System.out) {\n\t\t\tnew Main(inputStream, outputStream).solve();\n\t\t}\n\t}\n\n\tprivate void solve() throws IOException {\n\t\tString s = reader.nextLine();\n\t\tString t = reader.nextLine();\n\t\tfor(char ch : t.toCharArray()){\n\t\t\tif(ch =='')\n\t\t\t\tcontinue;\n\t\t\tint index = s.indexOf(ch);\n\t\t\tif(index == -1 || s.charAt(index) =='')\n\t\t\t\tbreak;\n\t\t\ts = s.substring(index+1);\n\t\t}\n\t\twriter.print((t.equals(s)? \"YES\" : \"NO\"));\n\t\twriter.close();\n\t}\n\n\tprivate static class InputReader {\n\t\tprivate final InputStreamReader streamReader = new InputStreamReader(inputStream);\n\t\tprivate final BufferedReader reader = new BufferedReader(streamReader);\n\t\tprivate StringTokenizer tokenizer;\n\n\t\tprivate InputReader(InputStream stream) {\n\t\t\tthis.inputStream = stream;\n\t\t}\n\n\t\tpublic String next() {\n\t\t\twhile ((tokenizer == null) || (!tokenizer.hasMoreTokens())) {\n\t\t\t\ttry {\n\t\t\t\t\ttokenizer = new StringTokenizer(reader.readLine());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tokenizer.nextToken();\n\t\t}\n\n\t\tpublic int nextInt() {\n\t\t\treturn Integer.parseInt(next());\n\t\t}\n\n\t\tpublic long nextLong() {\n\t\t\treturn Long.parseLong(next());\n\t\t}\n\n\t\tpublic int[] readIntArray() throws IOException {\n\t\t\treturn readIntArray(next());\n\t\t}\n\n\t\tpublic int[] readIntArray(String token) throws IOException {\n\t\t\treturn readIntArray(token, true);\n\t\t}\n\n\t\tpublic int[] readIntArray(boolean skipSpace) throws IOException {\n\t\t\treturn readIntArray(next(), skipSpace);\n\t\t}\n\n\t\tpublic int[] readIntArray(String token, boolean skipSpace) throws IOException {\n\t\t\tint size = token.length();\n\t\t\tint start = 0, end;\n\t\t\tboolean tokenStarted = true;\n\t\t\tint[] array = new int[size];\n\t\t\tfor (int i = 0; i < size; i++) {\n\t\t\t\tif (skipSpace && (token.charAt(i) =='')) {\n\t\t\t\t\ttokenStarted = false;\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (!tokenStarted) {\n\t\t\t\t\tarray[start] = Integer.parseInt(token.charAt(i) + \"\");\n\t\t\t\t\ttokenStarted = true;\n\t\t\t\t\tstart++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (token.charAt(i) =='') {\n\t\t\t\t\tarray[start] = Integer.parseInt(token.charAt(i - 1) + \"\");\n\t\t\t\t\tstart++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn array;\n\t\t}\n\n\t\tpublic boolean hasNextToken() {\n\t\t\treturn (tokenizer!= null && tokenizer.hasMoreTokens());\n\t\t}\n\t\tpublic void close() throws IOException {\n\t\t\treader.close();\n\t\t\tstreamReader.close();\n\t\t}\n\t}\n}"}
{"src_uid": "b1ef19d7027dc82d76859d64a6f43439", "id": 88, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1100, "testcases": "[{'input': 'Instead of dogging Your footsteps it disappears but you dont notice anything\\r\\nwhere is your dog\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'Instead of dogging Your footsteps it disappears but you dont notice anything\\r\\nYour dog is upstears\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'Instead of dogging your footsteps it disappears but you dont notice anything\\r\\nYour dog is upstears\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'abcdefg hijk\\r\\nk j i h g f e d c b a\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'HpOKgo\\r\\neAtAVB\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'GRZGc\\r\\nLPzD\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'GtPXu\\r\\nd\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'FVF\\r\\nr \\r\\n', 'output': ['NO\\r\\n']}, {'input': 'HpOKgo\\r\\nogK\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'GRZGc\\r\\nZG\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'HpOKgoueAtAVBdGffvQheJDejNDHhhwyKJisugiRAH OseK yUwqPPNuThUxTfthqIUeb wS jChGOdFDarNrKRT  MlwKecxWNoKEeD BbiHAruE XMlvKYVsJGPP\\r\\nAHN  XvoaNwV  AVBKwKjr u      U K wKE D K   Jy KiHsR h d W  Js IHyMPK Br iSqe  E fDA   g H\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'GRZGcsLPzDrCSXhhNTaibJqVphhjbcPoZhCDUlzAbDnRWjHvxLKtpGiFWiGbfeDxBwCrdJmJGCGv GebAOinUsFrlqKTILOmxrFjSpEoVGoTdSSstJWVgMLKMPettxHASaQZNdOIObcTxtF qTHWBdNIKwj\\r\\nWqrxze Ji x q aT GllLrRV jMpGiMDTwwS JDsPGpAZKACmsFCOS CD Sj  bCDgKF  jJxa RddtLFAi VGLHH SecObzG q  hPF \\r\\n', 'output': ['YES\\r\\n']}, {'input': 'GtPXuwdAxNhODQbjRslDDKciOALJrCifTjDQurQEBeFUUSZWwCZQPdYwZkYbrduMijFjgodAOrKIuUKwSXageZuOWMIhAMexyLRzFuzuXqBDTEaWMzVdbzhxDGSJC SsIYuYILwpiwwcObEHWpFvHeBkWYNitqYrxqgHReHcKnHbtjcWZuaxPBVPb\\r\\nTQIKyqFaewOkY lZUOOuxEw EwuKcArxRQGFYkvVWIAe SuanPeHuDjquurJu aSxwgOSw jYMwjxItNUUArQjO BIujAhSwttLWp\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'FVFSr unvtXbpKWF vPaAgNaoTqklzVqiGYcUcBIcattzBrRuNSnKUtmdGKbjcE\\r\\nUzrU K  an GFGR        Wc zt iBa     P c    T K v p     V In   b           B   c\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'lSwjnYLYtDNIZjxHiTawdh ntSzggZogcIZTuiTMWVgwyloMtEhqkrOxgIcFvwvsboXUPILPIymFAEXnhApewJXJNtFyZ\\r\\nAoxe  jWZ u  yImg  o AZ FNI w lpj  tNhT g y  ZYcb rc J    w Dlv\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'kvlekcdJqODUKdsJlXkRaileTmdGwUHWWgvgUokQxRzzbpFnswvNKiDnjfOFGvFcnaaiRnBGQmqoPxDHepgYasLhzjDgmvaFfVNEcSPVQCJKAbSyTGpXsAjIHr\\r\\nGjzUllNaGGKXUdYmDFpqFAKIwvTpjmqnyswWRTnxlBnavAGvavxJemrjvRJc\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'kWbvhgvvoYOhwXmgTwOSCDXrtFHhqwvMlCvsuuAUXMmWaYXiqHplFZZemhgkTuvsUtIaUxtyYauBIpjdbyYxjZ ZkaBPzwqPfqF kCqGRmXvWuabnQognnkvdNDtRUsSUvSzgBuxCMBWJifbxWegsknp\\r\\nBsH   bWHJD n Ca T xq  PRCv  tatn Wjy sm  I q s WCjFqdWe  t W XUs  Do  eb Pfh ii  hTbF  O Fll\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'OTmLdkMhmDEOMQMiW ZpzEIjyElHFrNCfFQDp SZyoZaEIUIpyCHfwOUqiSkKtFHggrTBGkqfOxkChPztmPrsHoxVwAdrxbZLKxPXHlMnrkgMgiaHFopiFFiUEtKwCjpJtwdwkbJCgA bxeDIscFdmHQJLAMNhWlrZisQrHQpvbALWTwpf jnx\\r\\nDbZwrQbydCdkJMCrftiwtPFfpMiwwrfIrKidEChKECxQUBVUEfFirbGWiLkFQkdJiFtkrtkbIAEXCEDkwLpK\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'NwcGaIeSkOva\\r\\naIa\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'gSrAcVYgAdbdayzbKGhIzLDjyznLRIJH KyvilAaEddmgkBPCNzpmPNeGEbmmpAyHvUSoPvnaORrPUuafpReEGoDOQsAYnUHYfBqhdcopQfxJuGXgKnbdVMQNhJYkyjiJDKlShqBTtnnDQQzEijOMcYRGMgPGVhfIReYennKBLwDTVvcHMIHMgVpJkvzTrezxqS\\r\\nHJerIVvRyfrPgAQMTI AqGNO mQDfDwQHKgeeYmuRmozKHILvehMPOJNMRtPTAfvKvsoGKi xHEeKqDAYmQJPUXRJbIbHrgVOMGMTdvYiLui\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'ReB hksbHqQXxUgpvoNK bFqmNVCEiOyKdKcAJQRkpeohpfuqZabvrLfmpZOMcfyFBJGZwVMxiUPP pbZZtJjxhEwvrAba\\r\\nJTCpQnIViIGIdQtLnmkVzmcbBZR CoxAdTtWSYpbOglDFifqIVQ vfGKGtLpxpJHiHSWCMeRcrVOXBGBhoEnVhNTPWGTOErNtSvokcGdgZXbgTEtISUyTwaXUEIlJMmutsdCbiyrPZPJyRdOjnSuAGttLy\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'hrLzRegCuDGxTrhDgVvM KowwyYuXGzIpcXdSMgeQVfVOtJZdkhNYSegwFWWoPqcZoeapbQnyCtojgkcyezUNHGGIZrhzsKrvvcrtokIdcnqXXkCNKjrOjrnEAKBNxyDdiMVeyLvXxUYMZQRFdlcdlcxzKTeYzBlmpNiwWbNAAhWkMoGpRxkCuyqkzXdKWwGH\\r\\nJESKDOfnFdxPvUOCkrgSBEPQHJtJHzuNGstRbTCcchRWJvCcveSEAtwtOmZZiW\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'yDBxCtUygQwWqONxQCcuAvVCkMGlqgC zvkfEkwqbhMCQxnkwQIUhucCbVUyOBUcXvTNEGriTBwMDMfdsPZgWRgIUDqM\\r\\neptVnORTTyixxmWIBpSTEwOXqGZllBgSxPenYCDlFwckJlWsoVwWLAIbPOmFqcKcTcoQqahetl KLfVSyaLVebzsGwPSVbtQAeUdZAaJtfxlCEvvaRhLlVvRJhKat IaB awdqcDlrrhTbRxjEbzGwcdmdavkhcjHjzmwbxAgw\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'jlMwnnotSdlQMluKWkJwAeCetcqbIEnKeNyLWoKCGONDRBQOjbkGpUvDlmSFUJ bWhohqmmIUWTlDsvelUArAcZJBipMDwUvRfBsYzMdQnPDPAuBaeJmAxVKwUMJrwMDxNtlrtAowVWqWiwFGtmquZAcrpFsLHCrvMSMMlvQUqypAihQWrFMNoaqfs IBg\\r\\nNzeWQ bafrmDsYlpNHSGTBBgPl WIcuNhyNaNOEFvL\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'zyWvXBcUZqGqjHwZHQryBtFliLYnweXAoMKNpLaunaOlzaauWmLtywsEvWPiwxJapocAFRMjrqWJXYqfKEbBKnzLO\\r\\npsbi bsXpSeJaCkIuPWfSRADXdIClxcDCowwJzGCDTyAl\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'kKhuIwRPLCwPFfcnsyCfBdnsraGeOCcLTfXuGjqFSGPSAeDZJSS bXKFanNqWjpFnvRpWxHJspvisDlADJBioxXNbVoXeUedoPcNEpUyEeYxdJXhGzFAmpAiHotSVwbZQsuWjIVhVaEGgqbZHIoDpiEmjTtFylCwCkWWzUOoUfOHxEZvDwNpXhBWamHn\\r\\nK VpJjGhNbwCRhcfmNGVjewBFpEmPlIKeTuWiukDtEWpjgqciqglkyNfWrBLbGAKvlNWxaUelJmSlSoakSpRzePvJsshOsTYrMPXdxKpaShjyVIXGhRIAdtiGpNwtiRmGTBZhkJqIMdxMHX RMxCMYcWjcjhtCHyFnCvjjezGbkRDRiVxkbh\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'AXssNpFKyQmJcBdBdfkhhMUzfqJVgcLBddkwtnFSzSRUCjiDcdtmkzIGkCKSxWUEGhmHmciktJyGMkgCductyHx\\r\\nI nYhmJfPnvoKUiXYUBIPIcxNYTtvwPUoXERZvY ahlDpQFNMmVZqEBiYqYlHNqcpSCmhFczBlOAhsYFeqMGfqL EJsDNOgwoJfBzqijKOFcYQ\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'lkhrzDZmkdbjzYKPNMRkiwCFoZsMzBQMnxxdKKVJezSBjnLjPpUYtabcPTIaDJeDEobbWHdKOdVfMQwDXzDDcSrwVenDEYpMqfiOQ xSsqApWnAMoyhQXCKFzHvvzvUvkWwmwZrvZz\\r\\nsUzGspYpRFsHRbRgTQuCBgnFgPkisTUfFNwyEEWWRiweWWgjRkVQxgTwxOzdsOwfrGIH O gCXpzvHzfItuEHaihmugEyymSJIogYwX qAwcwIItidfnzZDhZgQHi eRjMAeVkJHceDZuJkmxGowOsmcGYYvk Ajtgi TxwihvjLViNZjvscTWvsaQUelTSivLShhEl\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'BRsVjyNhrqRHVwrJzuzRigEhdpbDmaACSPfed\\r\\nlWqKTjlrqOCUbgBBZdZDGCeQJDXawPnnDkQdZDgwrEQk\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'KRmINuyBYPwiTsdlyiNVuylToysJKmOpcLovAtwGPqrgFJQNAYvuAiyQRkeFMECVZvkDEmTauXlyjAaYRnTJXORMZRnTakBaUzSelMilejySDIZjQjzcOIrwXdvDvpeRIkoBgreyFXIyyIZutjiEBtwrmzQtPVUhvvdEtDMbXjBpoPVjGdM EXTAK JbCnw\\r\\nXZZqlJvzKKtvdNlzFPDTYxidqlsgufVzyEmO FZuLQ vVQsJESNviUCovCK NwwlbxsmPtOJNmAonCqrOZ bZ LVKAsQGmoLnYjeekvEIECFk\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.util.Scanner;\n\npublic class Solution {\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n\n    String s1 = scanner.nextLine();\n    String s2 = scanner.nextLine();\n    String result = \"NO\";\n    char[] c1 = s1.toCharArray();\n    char[] c2 = s2.toCharArray();\n    boolean flag = true;\n    for (int i = 0; i < c2.length; ++i) {\n      if (c2[i]!='') {\n        if (c1[0] =='') {\n          flag = false;\n          break;\n        }\n        int idx = -1;\n        for (int j = 0; j < c1.length; ++j) {\n          if (c1[j] == c2[i]) {\n            idx = j;\n          }\n        }\n        if (idx!= -1) {\n          int count = 0;\n          for (int j = idx; j < c1.length; ++j) {\n            if (c1[j]!= c2[i]) {\n              count++;\n            }\n          }\n          if (count >= c2.length) {\n            flag = true;\n            result = \"YES\";\n            break;\n          }\n        }\n      }\n    }\n    System.out.println(result);\n  }\n}\n"}
{"src_uid": "b1ef19d7027dc82d76859d64a6f43439", "id": 88, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1100, "testcases": "[{'input': 'Instead of dogging Your footsteps it disappears but you dont notice anything\\r\\nwhere is your dog\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'Instead of dogging Your footsteps it disappears but you dont notice anything\\r\\nYour dog is upstears\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'Instead of dogging your footsteps it disappears but you dont notice anything\\r\\nYour dog is upstears\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'abcdefg hijk\\r\\nk j i h g f e d c b a\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'HpOKgo\\r\\neAtAVB\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'GRZGc\\r\\nLPzD\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'GtPXu\\r\\nd\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'FVF\\r\\nr \\r\\n', 'output': ['NO\\r\\n']}, {'input': 'HpOKgo\\r\\nogK\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'GRZGc\\r\\nZG\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'HpOKgoueAtAVBdGffvQheJDejNDHhhwyKJisugiRAH OseK yUwqPPNuThUxTfthqIUeb wS jChGOdFDarNrKRT  MlwKecxWNoKEeD BbiHAruE XMlvKYVsJGPP\\r\\nAHN  XvoaNwV  AVBKwKjr u      U K wKE D K   Jy KiHsR h d W  Js IHyMPK Br iSqe  E fDA   g H\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'GRZGcsLPzDrCSXhhNTaibJqVphhjbcPoZhCDUlzAbDnRWjHvxLKtpGiFWiGbfeDxBwCrdJmJGCGv GebAOinUsFrlqKTILOmxrFjSpEoVGoTdSSstJWVgMLKMPettxHASaQZNdOIObcTxtF qTHWBdNIKwj\\r\\nWqrxze Ji x q aT GllLrRV jMpGiMDTwwS JDsPGpAZKACmsFCOS CD Sj  bCDgKF  jJxa RddtLFAi VGLHH SecObzG q  hPF \\r\\n', 'output': ['YES\\r\\n']}, {'input': 'GtPXuwdAxNhODQbjRslDDKciOALJrCifTjDQurQEBeFUUSZWwCZQPdYwZkYbrduMijFjgodAOrKIuUKwSXageZuOWMIhAMexyLRzFuzuXqBDTEaWMzVdbzhxDGSJC SsIYuYILwpiwwcObEHWpFvHeBkWYNitqYrxqgHReHcKnHbtjcWZuaxPBVPb\\r\\nTQIKyqFaewOkY lZUOOuxEw EwuKcArxRQGFYkvVWIAe SuanPeHuDjquurJu aSxwgOSw jYMwjxItNUUArQjO BIujAhSwttLWp\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'FVFSr unvtXbpKWF vPaAgNaoTqklzVqiGYcUcBIcattzBrRuNSnKUtmdGKbjcE\\r\\nUzrU K  an GFGR        Wc zt iBa     P c    T K v p     V In   b           B   c\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'lSwjnYLYtDNIZjxHiTawdh ntSzggZogcIZTuiTMWVgwyloMtEhqkrOxgIcFvwvsboXUPILPIymFAEXnhApewJXJNtFyZ\\r\\nAoxe  jWZ u  yImg  o AZ FNI w lpj  tNhT g y  ZYcb rc J    w Dlv\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'kvlekcdJqODUKdsJlXkRaileTmdGwUHWWgvgUokQxRzzbpFnswvNKiDnjfOFGvFcnaaiRnBGQmqoPxDHepgYasLhzjDgmvaFfVNEcSPVQCJKAbSyTGpXsAjIHr\\r\\nGjzUllNaGGKXUdYmDFpqFAKIwvTpjmqnyswWRTnxlBnavAGvavxJemrjvRJc\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'kWbvhgvvoYOhwXmgTwOSCDXrtFHhqwvMlCvsuuAUXMmWaYXiqHplFZZemhgkTuvsUtIaUxtyYauBIpjdbyYxjZ ZkaBPzwqPfqF kCqGRmXvWuabnQognnkvdNDtRUsSUvSzgBuxCMBWJifbxWegsknp\\r\\nBsH   bWHJD n Ca T xq  PRCv  tatn Wjy sm  I q s WCjFqdWe  t W XUs  Do  eb Pfh ii  hTbF  O Fll\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'OTmLdkMhmDEOMQMiW ZpzEIjyElHFrNCfFQDp SZyoZaEIUIpyCHfwOUqiSkKtFHggrTBGkqfOxkChPztmPrsHoxVwAdrxbZLKxPXHlMnrkgMgiaHFopiFFiUEtKwCjpJtwdwkbJCgA bxeDIscFdmHQJLAMNhWlrZisQrHQpvbALWTwpf jnx\\r\\nDbZwrQbydCdkJMCrftiwtPFfpMiwwrfIrKidEChKECxQUBVUEfFirbGWiLkFQkdJiFtkrtkbIAEXCEDkwLpK\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'NwcGaIeSkOva\\r\\naIa\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'gSrAcVYgAdbdayzbKGhIzLDjyznLRIJH KyvilAaEddmgkBPCNzpmPNeGEbmmpAyHvUSoPvnaORrPUuafpReEGoDOQsAYnUHYfBqhdcopQfxJuGXgKnbdVMQNhJYkyjiJDKlShqBTtnnDQQzEijOMcYRGMgPGVhfIReYennKBLwDTVvcHMIHMgVpJkvzTrezxqS\\r\\nHJerIVvRyfrPgAQMTI AqGNO mQDfDwQHKgeeYmuRmozKHILvehMPOJNMRtPTAfvKvsoGKi xHEeKqDAYmQJPUXRJbIbHrgVOMGMTdvYiLui\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'ReB hksbHqQXxUgpvoNK bFqmNVCEiOyKdKcAJQRkpeohpfuqZabvrLfmpZOMcfyFBJGZwVMxiUPP pbZZtJjxhEwvrAba\\r\\nJTCpQnIViIGIdQtLnmkVzmcbBZR CoxAdTtWSYpbOglDFifqIVQ vfGKGtLpxpJHiHSWCMeRcrVOXBGBhoEnVhNTPWGTOErNtSvokcGdgZXbgTEtISUyTwaXUEIlJMmutsdCbiyrPZPJyRdOjnSuAGttLy\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'hrLzRegCuDGxTrhDgVvM KowwyYuXGzIpcXdSMgeQVfVOtJZdkhNYSegwFWWoPqcZoeapbQnyCtojgkcyezUNHGGIZrhzsKrvvcrtokIdcnqXXkCNKjrOjrnEAKBNxyDdiMVeyLvXxUYMZQRFdlcdlcxzKTeYzBlmpNiwWbNAAhWkMoGpRxkCuyqkzXdKWwGH\\r\\nJESKDOfnFdxPvUOCkrgSBEPQHJtJHzuNGstRbTCcchRWJvCcveSEAtwtOmZZiW\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'yDBxCtUygQwWqONxQCcuAvVCkMGlqgC zvkfEkwqbhMCQxnkwQIUhucCbVUyOBUcXvTNEGriTBwMDMfdsPZgWRgIUDqM\\r\\neptVnORTTyixxmWIBpSTEwOXqGZllBgSxPenYCDlFwckJlWsoVwWLAIbPOmFqcKcTcoQqahetl KLfVSyaLVebzsGwPSVbtQAeUdZAaJtfxlCEvvaRhLlVvRJhKat IaB awdqcDlrrhTbRxjEbzGwcdmdavkhcjHjzmwbxAgw\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'jlMwnnotSdlQMluKWkJwAeCetcqbIEnKeNyLWoKCGONDRBQOjbkGpUvDlmSFUJ bWhohqmmIUWTlDsvelUArAcZJBipMDwUvRfBsYzMdQnPDPAuBaeJmAxVKwUMJrwMDxNtlrtAowVWqWiwFGtmquZAcrpFsLHCrvMSMMlvQUqypAihQWrFMNoaqfs IBg\\r\\nNzeWQ bafrmDsYlpNHSGTBBgPl WIcuNhyNaNOEFvL\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'zyWvXBcUZqGqjHwZHQryBtFliLYnweXAoMKNpLaunaOlzaauWmLtywsEvWPiwxJapocAFRMjrqWJXYqfKEbBKnzLO\\r\\npsbi bsXpSeJaCkIuPWfSRADXdIClxcDCowwJzGCDTyAl\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'kKhuIwRPLCwPFfcnsyCfBdnsraGeOCcLTfXuGjqFSGPSAeDZJSS bXKFanNqWjpFnvRpWxHJspvisDlADJBioxXNbVoXeUedoPcNEpUyEeYxdJXhGzFAmpAiHotSVwbZQsuWjIVhVaEGgqbZHIoDpiEmjTtFylCwCkWWzUOoUfOHxEZvDwNpXhBWamHn\\r\\nK VpJjGhNbwCRhcfmNGVjewBFpEmPlIKeTuWiukDtEWpjgqciqglkyNfWrBLbGAKvlNWxaUelJmSlSoakSpRzePvJsshOsTYrMPXdxKpaShjyVIXGhRIAdtiGpNwtiRmGTBZhkJqIMdxMHX RMxCMYcWjcjhtCHyFnCvjjezGbkRDRiVxkbh\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'AXssNpFKyQmJcBdBdfkhhMUzfqJVgcLBddkwtnFSzSRUCjiDcdtmkzIGkCKSxWUEGhmHmciktJyGMkgCductyHx\\r\\nI nYhmJfPnvoKUiXYUBIPIcxNYTtvwPUoXERZvY ahlDpQFNMmVZqEBiYqYlHNqcpSCmhFczBlOAhsYFeqMGfqL EJsDNOgwoJfBzqijKOFcYQ\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'lkhrzDZmkdbjzYKPNMRkiwCFoZsMzBQMnxxdKKVJezSBjnLjPpUYtabcPTIaDJeDEobbWHdKOdVfMQwDXzDDcSrwVenDEYpMqfiOQ xSsqApWnAMoyhQXCKFzHvvzvUvkWwmwZrvZz\\r\\nsUzGspYpRFsHRbRgTQuCBgnFgPkisTUfFNwyEEWWRiweWWgjRkVQxgTwxOzdsOwfrGIH O gCXpzvHzfItuEHaihmugEyymSJIogYwX qAwcwIItidfnzZDhZgQHi eRjMAeVkJHceDZuJkmxGowOsmcGYYvk Ajtgi TxwihvjLViNZjvscTWvsaQUelTSivLShhEl\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'BRsVjyNhrqRHVwrJzuzRigEhdpbDmaACSPfed\\r\\nlWqKTjlrqOCUbgBBZdZDGCeQJDXawPnnDkQdZDgwrEQk\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'KRmINuyBYPwiTsdlyiNVuylToysJKmOpcLovAtwGPqrgFJQNAYvuAiyQRkeFMECVZvkDEmTauXlyjAaYRnTJXORMZRnTakBaUzSelMilejySDIZjQjzcOIrwXdvDvpeRIkoBgreyFXIyyIZutjiEBtwrmzQtPVUhvvdEtDMbXjBpoPVjGdM EXTAK JbCnw\\r\\nXZZqlJvzKKtvdNlzFPDTYxidqlsgufVzyEmO FZuLQ vVQsJESNviUCovCK NwwlbxsmPtOJNmAonCqrOZ bZ LVKAsQGmoLnYjeekvEIECFk\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Letter{\n  public static void main(String[] args)\n  {\n    Scanner in = new Scanner(System.in);\n    String s1 = in.nextLine();\n    String s2 = in.nextLine();\n    \n    int i;\n    int c=0;\n    int flag=0;\n    String ans = \"NO\";\n    for(i=0;i<s1.length();i++){\n    \tif(s1.charAt(i)==s2.charAt(c)){\n    \t\tc++;\n    \t\tif(c==s2.length()){\n    \t\t\tflag=1;\n    \t\t\tans=\"YES\";\n    \t\t}\n    \t}\n    }\n    System.out.println(ans);\n    \n  }\n}"}
{"src_uid": "7170c40405cf7a5e0f2bd15e4c7d189d", "id": 89, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '10\\r\\n', 'output': ['2 4 7 1 6 2 9 7 6\\r\\n']}, {'input': '3\\r\\n', 'output': ['2 1\\r\\n']}, {'input': '4\\r\\n', 'output': ['2 4 3\\r\\n']}, {'input': '5\\r\\n', 'output': ['2 4 2 1\\r\\n']}, {'input': '6\\r\\n', 'output': ['2 4 1 5 4\\r\\n']}, {'input': '7\\r\\n', 'output': ['2 4 7 4 2 1\\r\\n']}, {'input': '8\\r\\n', 'output': ['2 4 7 3 8 6 5\\r\\n']}, {'input': '9\\r\\n', 'output': ['2 4 7 2 7 4 2 1\\r\\n']}, {'input': '2\\r\\n', 'output': ['2\\r\\n']}, {'input': '11\\r\\n', 'output': ['2 4 7 11 5 11 7 4 2 1\\r\\n']}, {'input': '12\\r\\n', 'output': ['2 4 7 11 4 10 5 1 10 8 7\\r\\n']}, {'input': '13\\r\\n', 'output': ['2 4 7 11 3 9 3 11 7 4 2 1\\r\\n']}, {'input': '20\\r\\n', 'output': ['2 4 7 11 16 2 9 17 6 16 7 19 12 6 1 17 14 12 11\\r\\n']}, {'input': '25\\r\\n', 'output': ['2 4 7 11 16 22 4 12 21 6 17 4 17 6 21 12 4 22 16 11 7 4 2 1\\r\\n']}, {'input': '30\\r\\n', 'output': ['2 4 7 11 16 22 29 7 16 26 7 19 2 16 1 17 4 22 11 1 22 14 7 1 26 22 19 17 16\\r\\n']}, {'input': '35\\r\\n', 'output': ['2 4 7 11 16 22 29 2 11 21 32 9 22 1 16 32 14 32 16 1 22 9 32 21 11 2 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '40\\r\\n', 'output': ['2 4 7 11 16 22 29 37 6 16 27 39 12 26 1 17 34 12 31 11 32 14 37 21 6 32 19 7 36 26 17 9 2 36 31 27 24 22 21\\r\\n']}, {'input': '45\\r\\n', 'output': ['2 4 7 11 16 22 29 37 1 11 22 34 2 16 31 2 19 37 11 31 7 29 7 31 11 37 19 2 31 16 2 34 22 11 1 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '50\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 6 17 29 42 6 21 37 4 22 41 11 32 4 27 1 26 2 29 7 36 16 47 29 12 46 31 17 4 42 31 21 12 4 47 41 36 32 29 27 26\\r\\n']}, {'input': '55\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 1 12 24 37 51 11 27 44 7 26 46 12 34 2 26 51 22 49 22 51 26 2 34 12 46 26 7 44 27 11 51 37 24 12 1 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '60\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 7 19 32 46 1 17 34 52 11 31 52 14 37 1 26 52 19 47 16 46 17 49 22 56 31 7 44 22 1 41 22 4 47 31 16 2 49 37 26 16 7 59 52 46 41 37 34 32 31\\r\\n']}, {'input': '65\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 2 14 27 41 56 7 24 42 61 16 37 59 17 41 1 27 54 17 46 11 42 9 42 11 46 17 54 27 1 41 17 59 37 16 61 42 24 7 56 41 27 14 2 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '70\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 9 22 36 51 67 14 32 51 1 22 44 67 21 46 2 29 57 16 46 7 39 2 36 1 37 4 42 11 51 22 64 37 11 56 32 9 57 36 16 67 49 32 16 1 57 44 32 21 11 2 64 57 51 46 42 39 37 36\\r\\n']}, {'input': '75\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 4 17 31 46 62 4 22 41 61 7 29 52 1 26 52 4 32 61 16 47 4 37 71 31 67 29 67 31 71 37 4 47 16 61 32 4 52 26 1 52 29 7 61 41 22 4 62 46 31 17 4 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '80\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 12 26 41 57 74 12 31 51 72 14 37 61 6 32 59 7 36 66 17 49 2 36 71 27 64 22 61 21 62 24 67 31 76 42 9 57 26 76 47 19 72 46 21 77 54 32 11 71 52 34 17 1 66 52 39 27 16 6 77 69 62 56 51 47 44 42 41\\r\\n']}, {'input': '85\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 7 21 36 52 69 2 21 41 62 84 22 46 71 12 39 67 11 41 72 19 52 1 36 72 24 62 16 56 12 54 12 56 16 62 24 72 36 1 52 19 72 41 11 67 39 12 71 46 22 84 62 41 21 2 69 52 36 21 7 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '90\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 2 16 31 47 64 82 11 31 52 74 7 31 56 82 19 47 76 16 47 79 22 56 1 37 74 22 61 11 52 4 47 1 46 2 49 7 56 16 67 29 82 46 11 67 34 2 61 31 2 64 37 11 76 52 29 7 76 56 37 19 2 76 61 47 34 22 11 1 82 74 67 61 56 52 49 47 46\\r\\n']}, {'input': '95\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 11 26 42 59 77 1 21 42 64 87 16 41 67 94 27 56 86 22 54 87 26 61 2 39 77 21 61 7 49 92 41 86 37 84 37 86 41 92 49 7 61 21 77 39 2 61 26 87 54 22 86 56 27 94 67 41 16 87 64 42 21 1 77 59 42 26 11 92 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '96\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 10 25 41 58 76 95 19 40 62 85 13 38 64 91 23 52 82 17 49 82 20 55 91 32 70 13 53 94 40 83 31 76 26 73 25 74 28 79 35 88 46 5 61 22 80 43 7 68 34 1 65 34 4 71 43 16 86 61 37 14 88 67 47 28 10 89 73 58 44 31 19 8 94 85 77 70 64 59 55 52 50 49\\r\\n']}, {'input': '97\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 9 24 40 57 75 94 17 38 60 83 10 35 61 88 19 48 78 12 44 77 14 49 85 25 63 5 45 86 31 74 21 66 15 62 13 62 15 66 21 74 31 86 45 5 63 25 85 49 14 77 44 12 78 48 19 88 61 35 10 83 60 38 17 94 75 57 40 24 9 92 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '98\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 8 23 39 56 74 93 15 36 58 81 7 32 58 85 15 44 74 7 39 72 8 43 79 18 56 95 37 78 22 65 11 56 4 51 1 50 2 53 7 60 16 71 29 86 46 7 67 30 92 57 23 88 56 25 93 64 36 9 81 56 32 9 85 64 44 25 7 88 72 57 43 30 18 7 95 86 78 71 65 60 56 53 51 50\\r\\n']}, {'input': '99\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 7 22 38 55 73 92 13 34 56 79 4 29 55 82 11 40 70 2 34 67 2 37 73 11 49 88 29 70 13 56 1 46 92 40 88 38 88 40 92 46 1 56 13 70 29 88 49 11 73 37 2 67 34 2 70 40 11 82 55 29 4 79 56 34 13 92 73 55 38 22 7 92 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '100\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 6 21 37 54 72 91 11 32 54 77 1 26 52 79 7 36 66 97 29 62 96 31 67 4 42 81 21 62 4 47 91 36 82 29 77 26 76 27 79 32 86 41 97 54 12 71 31 92 54 17 81 46 12 79 47 16 86 57 29 2 76 51 27 4 82 61 41 22 4 87 71 56 42 29 17 6 96 87 79 72 66 61 57 54 52 51\\r\\n']}]", "source_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Solution {\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint a = 1;\n\t\t\n\t\tfor(int i = 0; i < n - 1; i++) {\n\t\t\ta += in.nextInt();\n\t\t\ta %= n;\n\t\t\tSystem.out.print((a == 0? n : a) + \" \");\n\t\t}\n\t}\n}\n"}
{"src_uid": "7170c40405cf7a5e0f2bd15e4c7d189d", "id": 89, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '10\\r\\n', 'output': ['2 4 7 1 6 2 9 7 6\\r\\n']}, {'input': '3\\r\\n', 'output': ['2 1\\r\\n']}, {'input': '4\\r\\n', 'output': ['2 4 3\\r\\n']}, {'input': '5\\r\\n', 'output': ['2 4 2 1\\r\\n']}, {'input': '6\\r\\n', 'output': ['2 4 1 5 4\\r\\n']}, {'input': '7\\r\\n', 'output': ['2 4 7 4 2 1\\r\\n']}, {'input': '8\\r\\n', 'output': ['2 4 7 3 8 6 5\\r\\n']}, {'input': '9\\r\\n', 'output': ['2 4 7 2 7 4 2 1\\r\\n']}, {'input': '2\\r\\n', 'output': ['2\\r\\n']}, {'input': '11\\r\\n', 'output': ['2 4 7 11 5 11 7 4 2 1\\r\\n']}, {'input': '12\\r\\n', 'output': ['2 4 7 11 4 10 5 1 10 8 7\\r\\n']}, {'input': '13\\r\\n', 'output': ['2 4 7 11 3 9 3 11 7 4 2 1\\r\\n']}, {'input': '20\\r\\n', 'output': ['2 4 7 11 16 2 9 17 6 16 7 19 12 6 1 17 14 12 11\\r\\n']}, {'input': '25\\r\\n', 'output': ['2 4 7 11 16 22 4 12 21 6 17 4 17 6 21 12 4 22 16 11 7 4 2 1\\r\\n']}, {'input': '30\\r\\n', 'output': ['2 4 7 11 16 22 29 7 16 26 7 19 2 16 1 17 4 22 11 1 22 14 7 1 26 22 19 17 16\\r\\n']}, {'input': '35\\r\\n', 'output': ['2 4 7 11 16 22 29 2 11 21 32 9 22 1 16 32 14 32 16 1 22 9 32 21 11 2 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '40\\r\\n', 'output': ['2 4 7 11 16 22 29 37 6 16 27 39 12 26 1 17 34 12 31 11 32 14 37 21 6 32 19 7 36 26 17 9 2 36 31 27 24 22 21\\r\\n']}, {'input': '45\\r\\n', 'output': ['2 4 7 11 16 22 29 37 1 11 22 34 2 16 31 2 19 37 11 31 7 29 7 31 11 37 19 2 31 16 2 34 22 11 1 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '50\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 6 17 29 42 6 21 37 4 22 41 11 32 4 27 1 26 2 29 7 36 16 47 29 12 46 31 17 4 42 31 21 12 4 47 41 36 32 29 27 26\\r\\n']}, {'input': '55\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 1 12 24 37 51 11 27 44 7 26 46 12 34 2 26 51 22 49 22 51 26 2 34 12 46 26 7 44 27 11 51 37 24 12 1 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '60\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 7 19 32 46 1 17 34 52 11 31 52 14 37 1 26 52 19 47 16 46 17 49 22 56 31 7 44 22 1 41 22 4 47 31 16 2 49 37 26 16 7 59 52 46 41 37 34 32 31\\r\\n']}, {'input': '65\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 2 14 27 41 56 7 24 42 61 16 37 59 17 41 1 27 54 17 46 11 42 9 42 11 46 17 54 27 1 41 17 59 37 16 61 42 24 7 56 41 27 14 2 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '70\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 9 22 36 51 67 14 32 51 1 22 44 67 21 46 2 29 57 16 46 7 39 2 36 1 37 4 42 11 51 22 64 37 11 56 32 9 57 36 16 67 49 32 16 1 57 44 32 21 11 2 64 57 51 46 42 39 37 36\\r\\n']}, {'input': '75\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 4 17 31 46 62 4 22 41 61 7 29 52 1 26 52 4 32 61 16 47 4 37 71 31 67 29 67 31 71 37 4 47 16 61 32 4 52 26 1 52 29 7 61 41 22 4 62 46 31 17 4 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '80\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 12 26 41 57 74 12 31 51 72 14 37 61 6 32 59 7 36 66 17 49 2 36 71 27 64 22 61 21 62 24 67 31 76 42 9 57 26 76 47 19 72 46 21 77 54 32 11 71 52 34 17 1 66 52 39 27 16 6 77 69 62 56 51 47 44 42 41\\r\\n']}, {'input': '85\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 7 21 36 52 69 2 21 41 62 84 22 46 71 12 39 67 11 41 72 19 52 1 36 72 24 62 16 56 12 54 12 56 16 62 24 72 36 1 52 19 72 41 11 67 39 12 71 46 22 84 62 41 21 2 69 52 36 21 7 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '90\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 2 16 31 47 64 82 11 31 52 74 7 31 56 82 19 47 76 16 47 79 22 56 1 37 74 22 61 11 52 4 47 1 46 2 49 7 56 16 67 29 82 46 11 67 34 2 61 31 2 64 37 11 76 52 29 7 76 56 37 19 2 76 61 47 34 22 11 1 82 74 67 61 56 52 49 47 46\\r\\n']}, {'input': '95\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 11 26 42 59 77 1 21 42 64 87 16 41 67 94 27 56 86 22 54 87 26 61 2 39 77 21 61 7 49 92 41 86 37 84 37 86 41 92 49 7 61 21 77 39 2 61 26 87 54 22 86 56 27 94 67 41 16 87 64 42 21 1 77 59 42 26 11 92 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '96\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 10 25 41 58 76 95 19 40 62 85 13 38 64 91 23 52 82 17 49 82 20 55 91 32 70 13 53 94 40 83 31 76 26 73 25 74 28 79 35 88 46 5 61 22 80 43 7 68 34 1 65 34 4 71 43 16 86 61 37 14 88 67 47 28 10 89 73 58 44 31 19 8 94 85 77 70 64 59 55 52 50 49\\r\\n']}, {'input': '97\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 9 24 40 57 75 94 17 38 60 83 10 35 61 88 19 48 78 12 44 77 14 49 85 25 63 5 45 86 31 74 21 66 15 62 13 62 15 66 21 74 31 86 45 5 63 25 85 49 14 77 44 12 78 48 19 88 61 35 10 83 60 38 17 94 75 57 40 24 9 92 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '98\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 8 23 39 56 74 93 15 36 58 81 7 32 58 85 15 44 74 7 39 72 8 43 79 18 56 95 37 78 22 65 11 56 4 51 1 50 2 53 7 60 16 71 29 86 46 7 67 30 92 57 23 88 56 25 93 64 36 9 81 56 32 9 85 64 44 25 7 88 72 57 43 30 18 7 95 86 78 71 65 60 56 53 51 50\\r\\n']}, {'input': '99\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 7 22 38 55 73 92 13 34 56 79 4 29 55 82 11 40 70 2 34 67 2 37 73 11 49 88 29 70 13 56 1 46 92 40 88 38 88 40 92 46 1 56 13 70 29 88 49 11 73 37 2 67 34 2 70 40 11 82 55 29 4 79 56 34 13 92 73 55 38 22 7 92 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '100\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 6 21 37 54 72 91 11 32 54 77 1 26 52 79 7 36 66 97 29 62 96 31 67 4 42 81 21 62 4 47 91 36 82 29 77 26 76 27 79 32 86 41 97 54 12 71 31 92 54 17 81 46 12 79 47 16 86 57 29 2 76 51 27 4 82 61 41 22 4 87 71 56 42 29 17 6 96 87 79 72 66 61 57 54 52 51\\r\\n']}]", "source_code": "import java.io.*;\npublic class Solution{\n\tpublic static void main(String[] args) throws IOException{\n\t\tInputStreamReader isr= new InputStreamReader(System.in);\n\t\tBufferedReader br = new BufferedReader(isr);\n\t\tString n = br.readLine();\n\t\tint count = 0;\n\t\tint x = 1;\n\t\tint ball = 1;\n\t\twhile(count<n-1){\n\t\t\tx+=count;\n\t\t\tx%=n;\n\t\t\tSystem.out.print((x==0?n:x)+\" \");\n\t\t\tcount++;\n\t\t\t//x = ball;\n\t\t\t//ball = (x+k)%n;\n\t\t}\n\t\t//br.close();\n\t}\n\n}"}
{"src_uid": "7170c40405cf7a5e0f2bd15e4c7d189d", "id": 89, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '10\\r\\n', 'output': ['2 4 7 1 6 2 9 7 6\\r\\n']}, {'input': '3\\r\\n', 'output': ['2 1\\r\\n']}, {'input': '4\\r\\n', 'output': ['2 4 3\\r\\n']}, {'input': '5\\r\\n', 'output': ['2 4 2 1\\r\\n']}, {'input': '6\\r\\n', 'output': ['2 4 1 5 4\\r\\n']}, {'input': '7\\r\\n', 'output': ['2 4 7 4 2 1\\r\\n']}, {'input': '8\\r\\n', 'output': ['2 4 7 3 8 6 5\\r\\n']}, {'input': '9\\r\\n', 'output': ['2 4 7 2 7 4 2 1\\r\\n']}, {'input': '2\\r\\n', 'output': ['2\\r\\n']}, {'input': '11\\r\\n', 'output': ['2 4 7 11 5 11 7 4 2 1\\r\\n']}, {'input': '12\\r\\n', 'output': ['2 4 7 11 4 10 5 1 10 8 7\\r\\n']}, {'input': '13\\r\\n', 'output': ['2 4 7 11 3 9 3 11 7 4 2 1\\r\\n']}, {'input': '20\\r\\n', 'output': ['2 4 7 11 16 2 9 17 6 16 7 19 12 6 1 17 14 12 11\\r\\n']}, {'input': '25\\r\\n', 'output': ['2 4 7 11 16 22 4 12 21 6 17 4 17 6 21 12 4 22 16 11 7 4 2 1\\r\\n']}, {'input': '30\\r\\n', 'output': ['2 4 7 11 16 22 29 7 16 26 7 19 2 16 1 17 4 22 11 1 22 14 7 1 26 22 19 17 16\\r\\n']}, {'input': '35\\r\\n', 'output': ['2 4 7 11 16 22 29 2 11 21 32 9 22 1 16 32 14 32 16 1 22 9 32 21 11 2 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '40\\r\\n', 'output': ['2 4 7 11 16 22 29 37 6 16 27 39 12 26 1 17 34 12 31 11 32 14 37 21 6 32 19 7 36 26 17 9 2 36 31 27 24 22 21\\r\\n']}, {'input': '45\\r\\n', 'output': ['2 4 7 11 16 22 29 37 1 11 22 34 2 16 31 2 19 37 11 31 7 29 7 31 11 37 19 2 31 16 2 34 22 11 1 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '50\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 6 17 29 42 6 21 37 4 22 41 11 32 4 27 1 26 2 29 7 36 16 47 29 12 46 31 17 4 42 31 21 12 4 47 41 36 32 29 27 26\\r\\n']}, {'input': '55\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 1 12 24 37 51 11 27 44 7 26 46 12 34 2 26 51 22 49 22 51 26 2 34 12 46 26 7 44 27 11 51 37 24 12 1 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '60\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 7 19 32 46 1 17 34 52 11 31 52 14 37 1 26 52 19 47 16 46 17 49 22 56 31 7 44 22 1 41 22 4 47 31 16 2 49 37 26 16 7 59 52 46 41 37 34 32 31\\r\\n']}, {'input': '65\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 2 14 27 41 56 7 24 42 61 16 37 59 17 41 1 27 54 17 46 11 42 9 42 11 46 17 54 27 1 41 17 59 37 16 61 42 24 7 56 41 27 14 2 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '70\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 9 22 36 51 67 14 32 51 1 22 44 67 21 46 2 29 57 16 46 7 39 2 36 1 37 4 42 11 51 22 64 37 11 56 32 9 57 36 16 67 49 32 16 1 57 44 32 21 11 2 64 57 51 46 42 39 37 36\\r\\n']}, {'input': '75\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 4 17 31 46 62 4 22 41 61 7 29 52 1 26 52 4 32 61 16 47 4 37 71 31 67 29 67 31 71 37 4 47 16 61 32 4 52 26 1 52 29 7 61 41 22 4 62 46 31 17 4 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '80\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 12 26 41 57 74 12 31 51 72 14 37 61 6 32 59 7 36 66 17 49 2 36 71 27 64 22 61 21 62 24 67 31 76 42 9 57 26 76 47 19 72 46 21 77 54 32 11 71 52 34 17 1 66 52 39 27 16 6 77 69 62 56 51 47 44 42 41\\r\\n']}, {'input': '85\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 7 21 36 52 69 2 21 41 62 84 22 46 71 12 39 67 11 41 72 19 52 1 36 72 24 62 16 56 12 54 12 56 16 62 24 72 36 1 52 19 72 41 11 67 39 12 71 46 22 84 62 41 21 2 69 52 36 21 7 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '90\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 2 16 31 47 64 82 11 31 52 74 7 31 56 82 19 47 76 16 47 79 22 56 1 37 74 22 61 11 52 4 47 1 46 2 49 7 56 16 67 29 82 46 11 67 34 2 61 31 2 64 37 11 76 52 29 7 76 56 37 19 2 76 61 47 34 22 11 1 82 74 67 61 56 52 49 47 46\\r\\n']}, {'input': '95\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 11 26 42 59 77 1 21 42 64 87 16 41 67 94 27 56 86 22 54 87 26 61 2 39 77 21 61 7 49 92 41 86 37 84 37 86 41 92 49 7 61 21 77 39 2 61 26 87 54 22 86 56 27 94 67 41 16 87 64 42 21 1 77 59 42 26 11 92 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '96\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 10 25 41 58 76 95 19 40 62 85 13 38 64 91 23 52 82 17 49 82 20 55 91 32 70 13 53 94 40 83 31 76 26 73 25 74 28 79 35 88 46 5 61 22 80 43 7 68 34 1 65 34 4 71 43 16 86 61 37 14 88 67 47 28 10 89 73 58 44 31 19 8 94 85 77 70 64 59 55 52 50 49\\r\\n']}, {'input': '97\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 9 24 40 57 75 94 17 38 60 83 10 35 61 88 19 48 78 12 44 77 14 49 85 25 63 5 45 86 31 74 21 66 15 62 13 62 15 66 21 74 31 86 45 5 63 25 85 49 14 77 44 12 78 48 19 88 61 35 10 83 60 38 17 94 75 57 40 24 9 92 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '98\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 8 23 39 56 74 93 15 36 58 81 7 32 58 85 15 44 74 7 39 72 8 43 79 18 56 95 37 78 22 65 11 56 4 51 1 50 2 53 7 60 16 71 29 86 46 7 67 30 92 57 23 88 56 25 93 64 36 9 81 56 32 9 85 64 44 25 7 88 72 57 43 30 18 7 95 86 78 71 65 60 56 53 51 50\\r\\n']}, {'input': '99\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 7 22 38 55 73 92 13 34 56 79 4 29 55 82 11 40 70 2 34 67 2 37 73 11 49 88 29 70 13 56 1 46 92 40 88 38 88 40 92 46 1 56 13 70 29 88 49 11 73 37 2 67 34 2 70 40 11 82 55 29 4 79 56 34 13 92 73 55 38 22 7 92 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '100\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 6 21 37 54 72 91 11 32 54 77 1 26 52 79 7 36 66 97 29 62 96 31 67 4 42 81 21 62 4 47 91 36 82 29 77 26 76 27 79 32 86 41 97 54 12 71 31 92 54 17 81 46 12 79 47 16 86 57 29 2 76 51 27 4 82 61 41 22 4 87 71 56 42 29 17 6 96 87 79 72 66 61 57 54 52 51\\r\\n']}]", "source_code": "import java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\n\n\npublic class Solution {\n\n\t\n\tpublic static void main(String[] args) throws IOException {\n\t\tScanner in;\n\t\tif (args.length > 0) {\n\t\t\tin = new Scanner(new FileReader(\"input.txt\"));\n\t\t}\n\t\telse {\n\t\t\tin = new Scanner(System.in);\n\t\t}\n\t\tint n = in.nextInt();\n\t\tint x = 1;\n\t\tfor (int i = 1; i < n ; i++) {\n\t\t\tx = (x+i)%n;\n\t\t\tSystem.out.print((x==0?n:x) + \" \");\n\t\t}\n\t\tin.close();\n\t}\n}\n"}
{"src_uid": "7170c40405cf7a5e0f2bd15e4c7d189d", "id": 89, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '10\\r\\n', 'output': ['2 4 7 1 6 2 9 7 6\\r\\n']}, {'input': '3\\r\\n', 'output': ['2 1\\r\\n']}, {'input': '4\\r\\n', 'output': ['2 4 3\\r\\n']}, {'input': '5\\r\\n', 'output': ['2 4 2 1\\r\\n']}, {'input': '6\\r\\n', 'output': ['2 4 1 5 4\\r\\n']}, {'input': '7\\r\\n', 'output': ['2 4 7 4 2 1\\r\\n']}, {'input': '8\\r\\n', 'output': ['2 4 7 3 8 6 5\\r\\n']}, {'input': '9\\r\\n', 'output': ['2 4 7 2 7 4 2 1\\r\\n']}, {'input': '2\\r\\n', 'output': ['2\\r\\n']}, {'input': '11\\r\\n', 'output': ['2 4 7 11 5 11 7 4 2 1\\r\\n']}, {'input': '12\\r\\n', 'output': ['2 4 7 11 4 10 5 1 10 8 7\\r\\n']}, {'input': '13\\r\\n', 'output': ['2 4 7 11 3 9 3 11 7 4 2 1\\r\\n']}, {'input': '20\\r\\n', 'output': ['2 4 7 11 16 2 9 17 6 16 7 19 12 6 1 17 14 12 11\\r\\n']}, {'input': '25\\r\\n', 'output': ['2 4 7 11 16 22 4 12 21 6 17 4 17 6 21 12 4 22 16 11 7 4 2 1\\r\\n']}, {'input': '30\\r\\n', 'output': ['2 4 7 11 16 22 29 7 16 26 7 19 2 16 1 17 4 22 11 1 22 14 7 1 26 22 19 17 16\\r\\n']}, {'input': '35\\r\\n', 'output': ['2 4 7 11 16 22 29 2 11 21 32 9 22 1 16 32 14 32 16 1 22 9 32 21 11 2 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '40\\r\\n', 'output': ['2 4 7 11 16 22 29 37 6 16 27 39 12 26 1 17 34 12 31 11 32 14 37 21 6 32 19 7 36 26 17 9 2 36 31 27 24 22 21\\r\\n']}, {'input': '45\\r\\n', 'output': ['2 4 7 11 16 22 29 37 1 11 22 34 2 16 31 2 19 37 11 31 7 29 7 31 11 37 19 2 31 16 2 34 22 11 1 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '50\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 6 17 29 42 6 21 37 4 22 41 11 32 4 27 1 26 2 29 7 36 16 47 29 12 46 31 17 4 42 31 21 12 4 47 41 36 32 29 27 26\\r\\n']}, {'input': '55\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 1 12 24 37 51 11 27 44 7 26 46 12 34 2 26 51 22 49 22 51 26 2 34 12 46 26 7 44 27 11 51 37 24 12 1 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '60\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 7 19 32 46 1 17 34 52 11 31 52 14 37 1 26 52 19 47 16 46 17 49 22 56 31 7 44 22 1 41 22 4 47 31 16 2 49 37 26 16 7 59 52 46 41 37 34 32 31\\r\\n']}, {'input': '65\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 2 14 27 41 56 7 24 42 61 16 37 59 17 41 1 27 54 17 46 11 42 9 42 11 46 17 54 27 1 41 17 59 37 16 61 42 24 7 56 41 27 14 2 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '70\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 9 22 36 51 67 14 32 51 1 22 44 67 21 46 2 29 57 16 46 7 39 2 36 1 37 4 42 11 51 22 64 37 11 56 32 9 57 36 16 67 49 32 16 1 57 44 32 21 11 2 64 57 51 46 42 39 37 36\\r\\n']}, {'input': '75\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 4 17 31 46 62 4 22 41 61 7 29 52 1 26 52 4 32 61 16 47 4 37 71 31 67 29 67 31 71 37 4 47 16 61 32 4 52 26 1 52 29 7 61 41 22 4 62 46 31 17 4 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '80\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 12 26 41 57 74 12 31 51 72 14 37 61 6 32 59 7 36 66 17 49 2 36 71 27 64 22 61 21 62 24 67 31 76 42 9 57 26 76 47 19 72 46 21 77 54 32 11 71 52 34 17 1 66 52 39 27 16 6 77 69 62 56 51 47 44 42 41\\r\\n']}, {'input': '85\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 7 21 36 52 69 2 21 41 62 84 22 46 71 12 39 67 11 41 72 19 52 1 36 72 24 62 16 56 12 54 12 56 16 62 24 72 36 1 52 19 72 41 11 67 39 12 71 46 22 84 62 41 21 2 69 52 36 21 7 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '90\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 2 16 31 47 64 82 11 31 52 74 7 31 56 82 19 47 76 16 47 79 22 56 1 37 74 22 61 11 52 4 47 1 46 2 49 7 56 16 67 29 82 46 11 67 34 2 61 31 2 64 37 11 76 52 29 7 76 56 37 19 2 76 61 47 34 22 11 1 82 74 67 61 56 52 49 47 46\\r\\n']}, {'input': '95\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 11 26 42 59 77 1 21 42 64 87 16 41 67 94 27 56 86 22 54 87 26 61 2 39 77 21 61 7 49 92 41 86 37 84 37 86 41 92 49 7 61 21 77 39 2 61 26 87 54 22 86 56 27 94 67 41 16 87 64 42 21 1 77 59 42 26 11 92 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '96\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 10 25 41 58 76 95 19 40 62 85 13 38 64 91 23 52 82 17 49 82 20 55 91 32 70 13 53 94 40 83 31 76 26 73 25 74 28 79 35 88 46 5 61 22 80 43 7 68 34 1 65 34 4 71 43 16 86 61 37 14 88 67 47 28 10 89 73 58 44 31 19 8 94 85 77 70 64 59 55 52 50 49\\r\\n']}, {'input': '97\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 9 24 40 57 75 94 17 38 60 83 10 35 61 88 19 48 78 12 44 77 14 49 85 25 63 5 45 86 31 74 21 66 15 62 13 62 15 66 21 74 31 86 45 5 63 25 85 49 14 77 44 12 78 48 19 88 61 35 10 83 60 38 17 94 75 57 40 24 9 92 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '98\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 8 23 39 56 74 93 15 36 58 81 7 32 58 85 15 44 74 7 39 72 8 43 79 18 56 95 37 78 22 65 11 56 4 51 1 50 2 53 7 60 16 71 29 86 46 7 67 30 92 57 23 88 56 25 93 64 36 9 81 56 32 9 85 64 44 25 7 88 72 57 43 30 18 7 95 86 78 71 65 60 56 53 51 50\\r\\n']}, {'input': '99\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 7 22 38 55 73 92 13 34 56 79 4 29 55 82 11 40 70 2 34 67 2 37 73 11 49 88 29 70 13 56 1 46 92 40 88 38 88 40 92 46 1 56 13 70 29 88 49 11 73 37 2 67 34 2 70 40 11 82 55 29 4 79 56 34 13 92 73 55 38 22 7 92 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '100\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 6 21 37 54 72 91 11 32 54 77 1 26 52 79 7 36 66 97 29 62 96 31 67 4 42 81 21 62 4 47 91 36 82 29 77 26 76 27 79 32 86 41 97 54 12 71 31 92 54 17 81 46 12 79 47 16 86 57 29 2 76 51 27 4 82 61 41 22 4 87 71 56 42 29 17 6 96 87 79 72 66 61 57 54 52 51\\r\\n']}]", "source_code": "import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class Solution {\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt(), x = 1, c = 0, pos = 0;\n        while (c++!= n - 1) {\n        \tpos = (pos + x++) % n;\n        \tSystem.out.print((pos == 0? n : pos) + \" \");\n        }\n    }\n}\n"}
{"src_uid": "7170c40405cf7a5e0f2bd15e4c7d189d", "id": 89, "lang_cluster": "java", "lang": "Java 11", "difficulty": 800, "testcases": "[{'input': '10\\r\\n', 'output': ['2 4 7 1 6 2 9 7 6\\r\\n']}, {'input': '3\\r\\n', 'output': ['2 1\\r\\n']}, {'input': '4\\r\\n', 'output': ['2 4 3\\r\\n']}, {'input': '5\\r\\n', 'output': ['2 4 2 1\\r\\n']}, {'input': '6\\r\\n', 'output': ['2 4 1 5 4\\r\\n']}, {'input': '7\\r\\n', 'output': ['2 4 7 4 2 1\\r\\n']}, {'input': '8\\r\\n', 'output': ['2 4 7 3 8 6 5\\r\\n']}, {'input': '9\\r\\n', 'output': ['2 4 7 2 7 4 2 1\\r\\n']}, {'input': '2\\r\\n', 'output': ['2\\r\\n']}, {'input': '11\\r\\n', 'output': ['2 4 7 11 5 11 7 4 2 1\\r\\n']}, {'input': '12\\r\\n', 'output': ['2 4 7 11 4 10 5 1 10 8 7\\r\\n']}, {'input': '13\\r\\n', 'output': ['2 4 7 11 3 9 3 11 7 4 2 1\\r\\n']}, {'input': '20\\r\\n', 'output': ['2 4 7 11 16 2 9 17 6 16 7 19 12 6 1 17 14 12 11\\r\\n']}, {'input': '25\\r\\n', 'output': ['2 4 7 11 16 22 4 12 21 6 17 4 17 6 21 12 4 22 16 11 7 4 2 1\\r\\n']}, {'input': '30\\r\\n', 'output': ['2 4 7 11 16 22 29 7 16 26 7 19 2 16 1 17 4 22 11 1 22 14 7 1 26 22 19 17 16\\r\\n']}, {'input': '35\\r\\n', 'output': ['2 4 7 11 16 22 29 2 11 21 32 9 22 1 16 32 14 32 16 1 22 9 32 21 11 2 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '40\\r\\n', 'output': ['2 4 7 11 16 22 29 37 6 16 27 39 12 26 1 17 34 12 31 11 32 14 37 21 6 32 19 7 36 26 17 9 2 36 31 27 24 22 21\\r\\n']}, {'input': '45\\r\\n', 'output': ['2 4 7 11 16 22 29 37 1 11 22 34 2 16 31 2 19 37 11 31 7 29 7 31 11 37 19 2 31 16 2 34 22 11 1 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '50\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 6 17 29 42 6 21 37 4 22 41 11 32 4 27 1 26 2 29 7 36 16 47 29 12 46 31 17 4 42 31 21 12 4 47 41 36 32 29 27 26\\r\\n']}, {'input': '55\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 1 12 24 37 51 11 27 44 7 26 46 12 34 2 26 51 22 49 22 51 26 2 34 12 46 26 7 44 27 11 51 37 24 12 1 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '60\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 7 19 32 46 1 17 34 52 11 31 52 14 37 1 26 52 19 47 16 46 17 49 22 56 31 7 44 22 1 41 22 4 47 31 16 2 49 37 26 16 7 59 52 46 41 37 34 32 31\\r\\n']}, {'input': '65\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 2 14 27 41 56 7 24 42 61 16 37 59 17 41 1 27 54 17 46 11 42 9 42 11 46 17 54 27 1 41 17 59 37 16 61 42 24 7 56 41 27 14 2 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '70\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 9 22 36 51 67 14 32 51 1 22 44 67 21 46 2 29 57 16 46 7 39 2 36 1 37 4 42 11 51 22 64 37 11 56 32 9 57 36 16 67 49 32 16 1 57 44 32 21 11 2 64 57 51 46 42 39 37 36\\r\\n']}, {'input': '75\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 4 17 31 46 62 4 22 41 61 7 29 52 1 26 52 4 32 61 16 47 4 37 71 31 67 29 67 31 71 37 4 47 16 61 32 4 52 26 1 52 29 7 61 41 22 4 62 46 31 17 4 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '80\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 12 26 41 57 74 12 31 51 72 14 37 61 6 32 59 7 36 66 17 49 2 36 71 27 64 22 61 21 62 24 67 31 76 42 9 57 26 76 47 19 72 46 21 77 54 32 11 71 52 34 17 1 66 52 39 27 16 6 77 69 62 56 51 47 44 42 41\\r\\n']}, {'input': '85\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 7 21 36 52 69 2 21 41 62 84 22 46 71 12 39 67 11 41 72 19 52 1 36 72 24 62 16 56 12 54 12 56 16 62 24 72 36 1 52 19 72 41 11 67 39 12 71 46 22 84 62 41 21 2 69 52 36 21 7 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '90\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 2 16 31 47 64 82 11 31 52 74 7 31 56 82 19 47 76 16 47 79 22 56 1 37 74 22 61 11 52 4 47 1 46 2 49 7 56 16 67 29 82 46 11 67 34 2 61 31 2 64 37 11 76 52 29 7 76 56 37 19 2 76 61 47 34 22 11 1 82 74 67 61 56 52 49 47 46\\r\\n']}, {'input': '95\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 11 26 42 59 77 1 21 42 64 87 16 41 67 94 27 56 86 22 54 87 26 61 2 39 77 21 61 7 49 92 41 86 37 84 37 86 41 92 49 7 61 21 77 39 2 61 26 87 54 22 86 56 27 94 67 41 16 87 64 42 21 1 77 59 42 26 11 92 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '96\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 10 25 41 58 76 95 19 40 62 85 13 38 64 91 23 52 82 17 49 82 20 55 91 32 70 13 53 94 40 83 31 76 26 73 25 74 28 79 35 88 46 5 61 22 80 43 7 68 34 1 65 34 4 71 43 16 86 61 37 14 88 67 47 28 10 89 73 58 44 31 19 8 94 85 77 70 64 59 55 52 50 49\\r\\n']}, {'input': '97\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 9 24 40 57 75 94 17 38 60 83 10 35 61 88 19 48 78 12 44 77 14 49 85 25 63 5 45 86 31 74 21 66 15 62 13 62 15 66 21 74 31 86 45 5 63 25 85 49 14 77 44 12 78 48 19 88 61 35 10 83 60 38 17 94 75 57 40 24 9 92 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '98\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 8 23 39 56 74 93 15 36 58 81 7 32 58 85 15 44 74 7 39 72 8 43 79 18 56 95 37 78 22 65 11 56 4 51 1 50 2 53 7 60 16 71 29 86 46 7 67 30 92 57 23 88 56 25 93 64 36 9 81 56 32 9 85 64 44 25 7 88 72 57 43 30 18 7 95 86 78 71 65 60 56 53 51 50\\r\\n']}, {'input': '99\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 7 22 38 55 73 92 13 34 56 79 4 29 55 82 11 40 70 2 34 67 2 37 73 11 49 88 29 70 13 56 1 46 92 40 88 38 88 40 92 46 1 56 13 70 29 88 49 11 73 37 2 67 34 2 70 40 11 82 55 29 4 79 56 34 13 92 73 55 38 22 7 92 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '100\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 6 21 37 54 72 91 11 32 54 77 1 26 52 79 7 36 66 97 29 62 96 31 67 4 42 81 21 62 4 47 91 36 82 29 77 26 76 27 79 32 86 41 97 54 12 71 31 92 54 17 81 46 12 79 47 16 86 57 29 2 76 51 27 4 82 61 41 22 4 87 71 56 42 29 17 6 96 87 79 72 66 61 57 54 52 51\\r\\n']}]", "source_code": "import java.util.Arrays;\nimport java.util.HashMap;\nimport static java.util.Map.entry;\nimport java.util.Scanner;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class A9 {\n    \n    static Scanner in = new Scanner(System.in);\n    \n    public static void main(String[] args){\n        int n = in.nextInt();\n        \n        int j = 1;\n        int curr = 1;\n        while(j < n){\n            int add = (int)(Math.pow(2, j) -1);\n            \n            if((n-curr) < add){\n                int r = (int)(Math.pow(2, j) - (n-curr));\n                curr += r;\n                System.out.print((curr) + \" \");\n            }\n            else{\n                curr += add;\n                System.out.print((curr) + \" \");\n            }\n            \n            j++;\n        }\n        \n        \n    }\n}\n"}
{"src_uid": "b9dacff0cab78595296d697d22dce5d9", "id": 90, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1000, "testcases": "[{'input': '5\\r\\nPetr 3 1 490 920 1000 1200 0\\r\\ntourist 2 0 490 950 1100 1400 0\\r\\nEgor 7 0 480 900 950 0 1000\\r\\nc00lH4x0R 0 10 150 0 0 0 0\\r\\nsome_participant 2 1 450 720 900 0 0\\r\\n', 'output': ['tourist']}, {'input': '1\\r\\nA 0 0 200 0 0 0 0\\r\\n', 'output': ['A']}, {'input': '2\\r\\n12345678901234567890 1 0 200 0 0 0 0\\r\\n_ 1 0 201 0 0 0 0\\r\\n', 'output': ['_']}, {'input': '5\\r\\nAb 0 0 481 900 1200 1600 2000\\r\\nCd 0 0 480 899 1200 1600 2000\\r\\nEf 0 0 480 900 1200 1600 2000\\r\\ngH 0 0 480 900 1200 1599 2000\\r\\nij 0 0 480 900 1199 1600 2001\\r\\n', 'output': ['Ab']}, {'input': '4\\r\\nF1 0 0 150 0 0 0 0\\r\\nF2 0 1 0 0 0 0 0\\r\\nF3 0 2 0 0 0 0 0\\r\\nF4 0 3 0 0 0 0 0\\r\\n', 'output': ['F1']}, {'input': '2\\r\\nA87h 5 0 199 0 0 0 0\\r\\nBcfg 7 0 0 0 0 0 0\\r\\n', 'output': ['Bcfg']}, {'input': '10\\r\\nKh 40 26 0 0 0 0 1243\\r\\nn 46 50 500 0 910 1912 0\\r\\nU 18 1 182 0 457 0 0\\r\\nFth6A0uT6i 38 30 0 787 0 1121 0\\r\\nC5l 24 38 0 689 1082 0 0\\r\\nN 47 25 0 0 1065 0 1538\\r\\nznyL 9 24 0 315 0 0 0\\r\\nJ0kU 27 47 445 0 0 0 0\\r\\nlT0rwiD2pg 46 13 0 818 0 0 0\\r\\nuJzr 29 14 0 0 0 0 2387\\r\\n', 'output': ['N']}, {'input': '2\\r\\nminus_one 0 4 199 0 0 0 0\\r\\nminus_two 0 4 198 0 0 0 0\\r\\n', 'output': ['minus_one']}, {'input': '10\\r\\nW22kb1L1 0 39 0 465 0 1961 865\\r\\n1MCXiVYmu5ys0afl 0 38 0 0 0 1982 1241\\r\\nCxg706kUJtQ 0 23 211 0 0 1785 1056\\r\\nmzEY 0 16 0 0 0 1988 1404\\r\\nv8JUjmam5SFP 0 48 0 788 1199 1426 0\\r\\n7giq 0 21 0 780 1437 1363 1930\\r\\nsXsUGbAulj6Lbiq 0 32 205 0 0 603 0\\r\\nRepIrY1Er4PgK 0 13 381 872 927 1488 0\\r\\nleKBdKHLnLFz 0 29 220 0 0 1006 889\\r\\nD 0 26 497 0 0 0 1815\\r\\n', 'output': ['7giq']}, {'input': '1\\r\\nZ 0 0 0 0 0 0 0\\r\\n', 'output': ['Z']}, {'input': '3\\r\\nAbcd 0 4 189 0 0 0 0\\r\\nDefg 0 5 248 0 0 0 0\\r\\nGhh 1 3 0 0 0 0 0\\r\\n', 'output': ['Defg']}, {'input': '3\\r\\ndf 0 6 0 0 0 0 0\\r\\njnm 1 8 300 0 0 0 0\\r\\n_ub_ 3 20 300 310 0 0 0\\r\\n', 'output': ['jnm']}, {'input': '1\\r\\njhgcyt 0 50 0 0 0 0 0\\r\\n', 'output': ['jhgcyt']}, {'input': '2\\r\\njhv 0 50 500 1000 1500 2000 2500\\r\\nPetr 2 1 489 910 1100 1300 1000\\r\\n', 'output': ['jhv']}, {'input': '3\\r\\nufu 0 50 0 0 0 0 0\\r\\nhzEr65f 1 50 0 0 0 0 0\\r\\nytdttjfhfd 0 50 150 0 0 0 0\\r\\n', 'output': ['ytdttjfhfd']}, {'input': '5\\r\\nufuf 0 50 0 0 0 0 0\\r\\nyfycy 50 0 500 1000 1500 2000 2500\\r\\n__u77 6 7 490 999 1456 1976 1356\\r\\n0 1 2 0 0 0 0 2452\\r\\ngu7fF 50 0 500 1000 1500 2000 2499\\r\\n', 'output': ['yfycy']}, {'input': '2\\r\\nhfy 0 50 0 0 0 0 2500\\r\\nugug 0 50 0 0 0 0 2499\\r\\n', 'output': ['hfy']}, {'input': '8\\r\\nA 0 0 0 0 0 0 0\\r\\nb 0 0 0 0 0 0 0\\r\\nc 0 0 0 0 0 0 0\\r\\nD 0 0 0 0 0 0 0\\r\\nE 1 0 0 0 0 0 0\\r\\nF 0 0 0 0 0 0 0\\r\\ng 0 0 0 0 0 0 0\\r\\nH 0 0 0 0 0 0 0\\r\\n', 'output': ['E']}, {'input': '2\\r\\nyyyc 50 50 0 0 0 0 0\\r\\nydd 0 0 0 0 0 0 2499\\r\\n', 'output': ['yyyc']}, {'input': '2\\r\\ntom 0 2 0 0 0 0 0\\r\\nmac 0 1 0 0 0 0 0\\r\\n', 'output': ['mac']}, {'input': '1\\r\\ncool 0 10 0 0 0 0 0\\r\\n', 'output': ['cool']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Solution {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tReader.init(System.in);\n\t\tint n = Reader.nextInt();\n\t\tint max = Integer.MIN_VALUE;\n\t\tString handle = \"\";\n\t\tfor(int i = 0 ; i < n ; i++){\n\t\t\tString name = Reader.next();\n\t\t\tint plus = Reader.nextInt(),minus = Reader.nextInt(),a = Reader.nextInt(),b = Reader.nextInt(),c = Reader.nextInt(),d = Reader.nextInt(),e = Reader.nextInt();\n\t\t\tint total = plus*100 - minus*50 + a + b + c + d + e;\n\t\t\tif(total > max){\n\t\t\t\tmax = total;\n\t\t\t\thandle = name;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(handle);\n\t}\n\t\n\tstatic class Reader{\n\t\tstatic BufferedReader reader;\n\t\tstatic StringTokenizer tokenizer;\n\t\tstatic int t;\n\t\tstatic int c = 0;\n\t\t\n\t\t//call this method to initialize reader for InputStream\n\t\tstatic void init(InputStream input) {\n\t\t\treader = new BufferedReader(\n\t\t\t        new InputStreamReader(input));\n\t\t\ttokenizer = new StringTokenizer(\"\");\n\t\t}\n\t\t//get next word\n\t\tstatic String next() throws IOException{\n\t\t\twhile(tokenizer.hasMoreTokens()){\n\t\t\t\tc++;\n\t\t\t\tt = tokenizer.nextToken().trim();\n\t\t\t}\n\t\t\treturn t;\n\t\t}\n\t\t//get next int \n\t\tstatic int nextInt() throws IOException {\n\t\t\treturn Integer.parseInt(next());\n\t\t}\n\t}\n}"}
{"src_uid": "b9dacff0cab78595296d697d22dce5d9", "id": 90, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1000, "testcases": "[{'input': '5\\r\\nPetr 3 1 490 920 1000 1200 0\\r\\ntourist 2 0 490 950 1100 1400 0\\r\\nEgor 7 0 480 900 950 0 1000\\r\\nc00lH4x0R 0 10 150 0 0 0 0\\r\\nsome_participant 2 1 450 720 900 0 0\\r\\n', 'output': ['tourist']}, {'input': '1\\r\\nA 0 0 200 0 0 0 0\\r\\n', 'output': ['A']}, {'input': '2\\r\\n12345678901234567890 1 0 200 0 0 0 0\\r\\n_ 1 0 201 0 0 0 0\\r\\n', 'output': ['_']}, {'input': '5\\r\\nAb 0 0 481 900 1200 1600 2000\\r\\nCd 0 0 480 899 1200 1600 2000\\r\\nEf 0 0 480 900 1200 1600 2000\\r\\ngH 0 0 480 900 1200 1599 2000\\r\\nij 0 0 480 900 1199 1600 2001\\r\\n', 'output': ['Ab']}, {'input': '4\\r\\nF1 0 0 150 0 0 0 0\\r\\nF2 0 1 0 0 0 0 0\\r\\nF3 0 2 0 0 0 0 0\\r\\nF4 0 3 0 0 0 0 0\\r\\n', 'output': ['F1']}, {'input': '2\\r\\nA87h 5 0 199 0 0 0 0\\r\\nBcfg 7 0 0 0 0 0 0\\r\\n', 'output': ['Bcfg']}, {'input': '10\\r\\nKh 40 26 0 0 0 0 1243\\r\\nn 46 50 500 0 910 1912 0\\r\\nU 18 1 182 0 457 0 0\\r\\nFth6A0uT6i 38 30 0 787 0 1121 0\\r\\nC5l 24 38 0 689 1082 0 0\\r\\nN 47 25 0 0 1065 0 1538\\r\\nznyL 9 24 0 315 0 0 0\\r\\nJ0kU 27 47 445 0 0 0 0\\r\\nlT0rwiD2pg 46 13 0 818 0 0 0\\r\\nuJzr 29 14 0 0 0 0 2387\\r\\n', 'output': ['N']}, {'input': '2\\r\\nminus_one 0 4 199 0 0 0 0\\r\\nminus_two 0 4 198 0 0 0 0\\r\\n', 'output': ['minus_one']}, {'input': '10\\r\\nW22kb1L1 0 39 0 465 0 1961 865\\r\\n1MCXiVYmu5ys0afl 0 38 0 0 0 1982 1241\\r\\nCxg706kUJtQ 0 23 211 0 0 1785 1056\\r\\nmzEY 0 16 0 0 0 1988 1404\\r\\nv8JUjmam5SFP 0 48 0 788 1199 1426 0\\r\\n7giq 0 21 0 780 1437 1363 1930\\r\\nsXsUGbAulj6Lbiq 0 32 205 0 0 603 0\\r\\nRepIrY1Er4PgK 0 13 381 872 927 1488 0\\r\\nleKBdKHLnLFz 0 29 220 0 0 1006 889\\r\\nD 0 26 497 0 0 0 1815\\r\\n', 'output': ['7giq']}, {'input': '1\\r\\nZ 0 0 0 0 0 0 0\\r\\n', 'output': ['Z']}, {'input': '3\\r\\nAbcd 0 4 189 0 0 0 0\\r\\nDefg 0 5 248 0 0 0 0\\r\\nGhh 1 3 0 0 0 0 0\\r\\n', 'output': ['Defg']}, {'input': '3\\r\\ndf 0 6 0 0 0 0 0\\r\\njnm 1 8 300 0 0 0 0\\r\\n_ub_ 3 20 300 310 0 0 0\\r\\n', 'output': ['jnm']}, {'input': '1\\r\\njhgcyt 0 50 0 0 0 0 0\\r\\n', 'output': ['jhgcyt']}, {'input': '2\\r\\njhv 0 50 500 1000 1500 2000 2500\\r\\nPetr 2 1 489 910 1100 1300 1000\\r\\n', 'output': ['jhv']}, {'input': '3\\r\\nufu 0 50 0 0 0 0 0\\r\\nhzEr65f 1 50 0 0 0 0 0\\r\\nytdttjfhfd 0 50 150 0 0 0 0\\r\\n', 'output': ['ytdttjfhfd']}, {'input': '5\\r\\nufuf 0 50 0 0 0 0 0\\r\\nyfycy 50 0 500 1000 1500 2000 2500\\r\\n__u77 6 7 490 999 1456 1976 1356\\r\\n0 1 2 0 0 0 0 2452\\r\\ngu7fF 50 0 500 1000 1500 2000 2499\\r\\n', 'output': ['yfycy']}, {'input': '2\\r\\nhfy 0 50 0 0 0 0 2500\\r\\nugug 0 50 0 0 0 0 2499\\r\\n', 'output': ['hfy']}, {'input': '8\\r\\nA 0 0 0 0 0 0 0\\r\\nb 0 0 0 0 0 0 0\\r\\nc 0 0 0 0 0 0 0\\r\\nD 0 0 0 0 0 0 0\\r\\nE 1 0 0 0 0 0 0\\r\\nF 0 0 0 0 0 0 0\\r\\ng 0 0 0 0 0 0 0\\r\\nH 0 0 0 0 0 0 0\\r\\n', 'output': ['E']}, {'input': '2\\r\\nyyyc 50 50 0 0 0 0 0\\r\\nydd 0 0 0 0 0 0 2499\\r\\n', 'output': ['yyyc']}, {'input': '2\\r\\ntom 0 2 0 0 0 0 0\\r\\nmac 0 1 0 0 0 0 0\\r\\n', 'output': ['mac']}, {'input': '1\\r\\ncool 0 10 0 0 0 0 0\\r\\n', 'output': ['cool']}]", "source_code": "import java.util.*;\nimport static java.util.Collections.*;\nimport java.io.*;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.sql.*;\n\npublic class Solution {\n    public static void main(String[] args){\n        try(final InputStream input = System.in;\n            final Reader reader = new Reader(input)){\n            final int n = Integer.parseInt(reader.next());\n            int[] score = new int[n];\n            String[][] data = new String[n][9];\n            for(int i=0; i<n; i++){\n                data[i] = reader.next().split(\" \");\n                score[i] = Integer.parseInt(data[i][7]);\n            }\n\n            String best = data[0][0];\n            int maxScore = score[0];\n            for(int i=1; i<n; i++){\n                if(score[i]>maxScore){\n                    maxScore = score[i];\n                    best = data[i][0];\n                }\n            }\n\n            System.out.println(best);\n        } catch(Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    static class Reader {\n        final private int BUFFER_SIZE = 1 << 16;\n        private final DataInputStream din = new DataInputStream(System.in);\n        private final byte[] buffer = new byte[BUFFER_SIZE];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n            if (ptr < buflen) {\n                return true;\n            }else{\n                ptr = 0;\n                try {\n                    buflen = din.read(buffer);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                if(buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        private int readByte() {\n            if(hasNextByte()) return buffer[ptr++];\n            else return -1;\n        }\n        private static boolean isPrintableChar(int c) {\n            return 33 <= c && c <= 126;\n        }\n        public boolean hasNext() {\n            while(hasNextByte() &&!isPrintableChar(buffer[ptr])) {\n                ptr++;\n            }\n            return hasNextByte();\n        }\n        public String next() {\n            if(hasNext()){\n                final StringBuilder sb = new StringBuilder();\n                int b = readByte();\n                while(isPrintableChar(b)) {\n                    sb.appendCodePoint(b);\n                    b = readByte();\n                }\n                return sb.toString();\n            }else{\n                return null;\n            }\n        }\n    }\n\n    private static String readLine() {\n        final Reader reader = new Reader();\n        final String res = reader.next();\n        reader.close();\n        return res;\n    }\n\n    private static long readLong() {\n        final Reader reader = new Reader();\n        final long res = Long.parseLong(reader.next());\n        reader.close();\n        return res;\n    }\n\n    private static int readInt() {\n        final Reader reader = new Reader();\n        final int res = Integer.parseInt(reader.next());\n        reader.close();\n        return res;\n    }\n\n    private static double readDouble() {\n        final Reader reader = new Reader();\n        final double res = Double.parseDouble(reader.next());\n        reader.close();\n        return res;\n    }\n\n    private static boolean readBoolean() {\n        final Reader reader = new Reader();\n        final boolean res = Boolean.parseBoolean(reader.next());\n        reader.close();\n        return res;\n    }\n}"}
{"src_uid": "b9dacff0cab78595296d697d22dce5d9", "id": 90, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1000, "testcases": "[{'input': '5\\r\\nPetr 3 1 490 920 1000 1200 0\\r\\ntourist 2 0 490 950 1100 1400 0\\r\\nEgor 7 0 480 900 950 0 1000\\r\\nc00lH4x0R 0 10 150 0 0 0 0\\r\\nsome_participant 2 1 450 720 900 0 0\\r\\n', 'output': ['tourist']}, {'input': '1\\r\\nA 0 0 200 0 0 0 0\\r\\n', 'output': ['A']}, {'input': '2\\r\\n12345678901234567890 1 0 200 0 0 0 0\\r\\n_ 1 0 201 0 0 0 0\\r\\n', 'output': ['_']}, {'input': '5\\r\\nAb 0 0 481 900 1200 1600 2000\\r\\nCd 0 0 480 899 1200 1600 2000\\r\\nEf 0 0 480 900 1200 1600 2000\\r\\ngH 0 0 480 900 1200 1599 2000\\r\\nij 0 0 480 900 1199 1600 2001\\r\\n', 'output': ['Ab']}, {'input': '4\\r\\nF1 0 0 150 0 0 0 0\\r\\nF2 0 1 0 0 0 0 0\\r\\nF3 0 2 0 0 0 0 0\\r\\nF4 0 3 0 0 0 0 0\\r\\n', 'output': ['F1']}, {'input': '2\\r\\nA87h 5 0 199 0 0 0 0\\r\\nBcfg 7 0 0 0 0 0 0\\r\\n', 'output': ['Bcfg']}, {'input': '10\\r\\nKh 40 26 0 0 0 0 1243\\r\\nn 46 50 500 0 910 1912 0\\r\\nU 18 1 182 0 457 0 0\\r\\nFth6A0uT6i 38 30 0 787 0 1121 0\\r\\nC5l 24 38 0 689 1082 0 0\\r\\nN 47 25 0 0 1065 0 1538\\r\\nznyL 9 24 0 315 0 0 0\\r\\nJ0kU 27 47 445 0 0 0 0\\r\\nlT0rwiD2pg 46 13 0 818 0 0 0\\r\\nuJzr 29 14 0 0 0 0 2387\\r\\n', 'output': ['N']}, {'input': '2\\r\\nminus_one 0 4 199 0 0 0 0\\r\\nminus_two 0 4 198 0 0 0 0\\r\\n', 'output': ['minus_one']}, {'input': '10\\r\\nW22kb1L1 0 39 0 465 0 1961 865\\r\\n1MCXiVYmu5ys0afl 0 38 0 0 0 1982 1241\\r\\nCxg706kUJtQ 0 23 211 0 0 1785 1056\\r\\nmzEY 0 16 0 0 0 1988 1404\\r\\nv8JUjmam5SFP 0 48 0 788 1199 1426 0\\r\\n7giq 0 21 0 780 1437 1363 1930\\r\\nsXsUGbAulj6Lbiq 0 32 205 0 0 603 0\\r\\nRepIrY1Er4PgK 0 13 381 872 927 1488 0\\r\\nleKBdKHLnLFz 0 29 220 0 0 1006 889\\r\\nD 0 26 497 0 0 0 1815\\r\\n', 'output': ['7giq']}, {'input': '1\\r\\nZ 0 0 0 0 0 0 0\\r\\n', 'output': ['Z']}, {'input': '3\\r\\nAbcd 0 4 189 0 0 0 0\\r\\nDefg 0 5 248 0 0 0 0\\r\\nGhh 1 3 0 0 0 0 0\\r\\n', 'output': ['Defg']}, {'input': '3\\r\\ndf 0 6 0 0 0 0 0\\r\\njnm 1 8 300 0 0 0 0\\r\\n_ub_ 3 20 300 310 0 0 0\\r\\n', 'output': ['jnm']}, {'input': '1\\r\\njhgcyt 0 50 0 0 0 0 0\\r\\n', 'output': ['jhgcyt']}, {'input': '2\\r\\njhv 0 50 500 1000 1500 2000 2500\\r\\nPetr 2 1 489 910 1100 1300 1000\\r\\n', 'output': ['jhv']}, {'input': '3\\r\\nufu 0 50 0 0 0 0 0\\r\\nhzEr65f 1 50 0 0 0 0 0\\r\\nytdttjfhfd 0 50 150 0 0 0 0\\r\\n', 'output': ['ytdttjfhfd']}, {'input': '5\\r\\nufuf 0 50 0 0 0 0 0\\r\\nyfycy 50 0 500 1000 1500 2000 2500\\r\\n__u77 6 7 490 999 1456 1976 1356\\r\\n0 1 2 0 0 0 0 2452\\r\\ngu7fF 50 0 500 1000 1500 2000 2499\\r\\n', 'output': ['yfycy']}, {'input': '2\\r\\nhfy 0 50 0 0 0 0 2500\\r\\nugug 0 50 0 0 0 0 2499\\r\\n', 'output': ['hfy']}, {'input': '8\\r\\nA 0 0 0 0 0 0 0\\r\\nb 0 0 0 0 0 0 0\\r\\nc 0 0 0 0 0 0 0\\r\\nD 0 0 0 0 0 0 0\\r\\nE 1 0 0 0 0 0 0\\r\\nF 0 0 0 0 0 0 0\\r\\ng 0 0 0 0 0 0 0\\r\\nH 0 0 0 0 0 0 0\\r\\n', 'output': ['E']}, {'input': '2\\r\\nyyyc 50 50 0 0 0 0 0\\r\\nydd 0 0 0 0 0 0 2499\\r\\n', 'output': ['yyyc']}, {'input': '2\\r\\ntom 0 2 0 0 0 0 0\\r\\nmac 0 1 0 0 0 0 0\\r\\n', 'output': ['mac']}, {'input': '1\\r\\ncool 0 10 0 0 0 0 0\\r\\n', 'output': ['cool']}]", "source_code": "import java.util.*;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint max = 0,index = 0;\n\t\tString handles [] = new String[n];\n\t\tint a[][] = new int [n][7];\n\t\tfor(int i = 0 ; i < n ; i++) {\n\t\t\thandles[i] = sc.next();\n\t\t\tfor(int j = 1 ; j < 7 ; j++)\n\t\t\t\ta[i][j - 1] = sc.nextInt();\n\t\t}\n\t\tfor(int i = 0 ; i < n ; i++) {\n\t\t\tfor(int j = 0 ; j < 7 ; j++)\n\t\t\t\ta[i][j] += a[i][j - 1];\n\t\t}\n\t\tfor(int i = 0 ; i < n ; i++) {\n\t\t\tif(a[i][7] > max) {\n\t\t\t\tmax = a[i][7];\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(handles[index]);\n\t}\n}\n"}
{"src_uid": "b9dacff0cab78595296d697d22dce5d9", "id": 90, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1000, "testcases": "[{'input': '5\\r\\nPetr 3 1 490 920 1000 1200 0\\r\\ntourist 2 0 490 950 1100 1400 0\\r\\nEgor 7 0 480 900 950 0 1000\\r\\nc00lH4x0R 0 10 150 0 0 0 0\\r\\nsome_participant 2 1 450 720 900 0 0\\r\\n', 'output': ['tourist']}, {'input': '1\\r\\nA 0 0 200 0 0 0 0\\r\\n', 'output': ['A']}, {'input': '2\\r\\n12345678901234567890 1 0 200 0 0 0 0\\r\\n_ 1 0 201 0 0 0 0\\r\\n', 'output': ['_']}, {'input': '5\\r\\nAb 0 0 481 900 1200 1600 2000\\r\\nCd 0 0 480 899 1200 1600 2000\\r\\nEf 0 0 480 900 1200 1600 2000\\r\\ngH 0 0 480 900 1200 1599 2000\\r\\nij 0 0 480 900 1199 1600 2001\\r\\n', 'output': ['Ab']}, {'input': '4\\r\\nF1 0 0 150 0 0 0 0\\r\\nF2 0 1 0 0 0 0 0\\r\\nF3 0 2 0 0 0 0 0\\r\\nF4 0 3 0 0 0 0 0\\r\\n', 'output': ['F1']}, {'input': '2\\r\\nA87h 5 0 199 0 0 0 0\\r\\nBcfg 7 0 0 0 0 0 0\\r\\n', 'output': ['Bcfg']}, {'input': '10\\r\\nKh 40 26 0 0 0 0 1243\\r\\nn 46 50 500 0 910 1912 0\\r\\nU 18 1 182 0 457 0 0\\r\\nFth6A0uT6i 38 30 0 787 0 1121 0\\r\\nC5l 24 38 0 689 1082 0 0\\r\\nN 47 25 0 0 1065 0 1538\\r\\nznyL 9 24 0 315 0 0 0\\r\\nJ0kU 27 47 445 0 0 0 0\\r\\nlT0rwiD2pg 46 13 0 818 0 0 0\\r\\nuJzr 29 14 0 0 0 0 2387\\r\\n', 'output': ['N']}, {'input': '2\\r\\nminus_one 0 4 199 0 0 0 0\\r\\nminus_two 0 4 198 0 0 0 0\\r\\n', 'output': ['minus_one']}, {'input': '10\\r\\nW22kb1L1 0 39 0 465 0 1961 865\\r\\n1MCXiVYmu5ys0afl 0 38 0 0 0 1982 1241\\r\\nCxg706kUJtQ 0 23 211 0 0 1785 1056\\r\\nmzEY 0 16 0 0 0 1988 1404\\r\\nv8JUjmam5SFP 0 48 0 788 1199 1426 0\\r\\n7giq 0 21 0 780 1437 1363 1930\\r\\nsXsUGbAulj6Lbiq 0 32 205 0 0 603 0\\r\\nRepIrY1Er4PgK 0 13 381 872 927 1488 0\\r\\nleKBdKHLnLFz 0 29 220 0 0 1006 889\\r\\nD 0 26 497 0 0 0 1815\\r\\n', 'output': ['7giq']}, {'input': '1\\r\\nZ 0 0 0 0 0 0 0\\r\\n', 'output': ['Z']}, {'input': '3\\r\\nAbcd 0 4 189 0 0 0 0\\r\\nDefg 0 5 248 0 0 0 0\\r\\nGhh 1 3 0 0 0 0 0\\r\\n', 'output': ['Defg']}, {'input': '3\\r\\ndf 0 6 0 0 0 0 0\\r\\njnm 1 8 300 0 0 0 0\\r\\n_ub_ 3 20 300 310 0 0 0\\r\\n', 'output': ['jnm']}, {'input': '1\\r\\njhgcyt 0 50 0 0 0 0 0\\r\\n', 'output': ['jhgcyt']}, {'input': '2\\r\\njhv 0 50 500 1000 1500 2000 2500\\r\\nPetr 2 1 489 910 1100 1300 1000\\r\\n', 'output': ['jhv']}, {'input': '3\\r\\nufu 0 50 0 0 0 0 0\\r\\nhzEr65f 1 50 0 0 0 0 0\\r\\nytdttjfhfd 0 50 150 0 0 0 0\\r\\n', 'output': ['ytdttjfhfd']}, {'input': '5\\r\\nufuf 0 50 0 0 0 0 0\\r\\nyfycy 50 0 500 1000 1500 2000 2500\\r\\n__u77 6 7 490 999 1456 1976 1356\\r\\n0 1 2 0 0 0 0 2452\\r\\ngu7fF 50 0 500 1000 1500 2000 2499\\r\\n', 'output': ['yfycy']}, {'input': '2\\r\\nhfy 0 50 0 0 0 0 2500\\r\\nugug 0 50 0 0 0 0 2499\\r\\n', 'output': ['hfy']}, {'input': '8\\r\\nA 0 0 0 0 0 0 0\\r\\nb 0 0 0 0 0 0 0\\r\\nc 0 0 0 0 0 0 0\\r\\nD 0 0 0 0 0 0 0\\r\\nE 1 0 0 0 0 0 0\\r\\nF 0 0 0 0 0 0 0\\r\\ng 0 0 0 0 0 0 0\\r\\nH 0 0 0 0 0 0 0\\r\\n', 'output': ['E']}, {'input': '2\\r\\nyyyc 50 50 0 0 0 0 0\\r\\nydd 0 0 0 0 0 0 2499\\r\\n', 'output': ['yyyc']}, {'input': '2\\r\\ntom 0 2 0 0 0 0 0\\r\\nmac 0 1 0 0 0 0 0\\r\\n', 'output': ['mac']}, {'input': '1\\r\\ncool 0 10 0 0 0 0 0\\r\\n', 'output': ['cool']}]", "source_code": "import java.util.*;\n\npublic class cf {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] nums = new int[n];\n\t\tString[] names = new String[n];\n\t\tString[] handles = new String[n];\n\t\tint max = 0;\n\t\tint ind = 0;\n\t\t\n\t\tfor(int i=0;i<n;i++){\n\t\t\tnames[i] = in.next();\n\t\t\tnums[i] = 0;\n\t\t\thandles[i] = names[i] + \" 0\";\n\t\t\tfor(int j=1;j<6;j++){\n\t\t\t\tnums[i] += (j%2==0? 1 : -1)*in.nextInt();\n\t\t\t}\n\t\t\tnums[i] += in.nextInt()*100;\n\t\t\tmax = (nums[i] > max? nums[i] : max);\n\t\t\tind = (nums[i] == max? i : ind);\n\t\t\t\n\t\t\thandles[i] += \" \" + nums[i];\n\t\t}\n\t\t\n\t\tSystem.out.println(names[ind]);\n\t}\n}"}
{"src_uid": "b9dacff0cab78595296d697d22dce5d9", "id": 90, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1000, "testcases": "[{'input': '5\\r\\nPetr 3 1 490 920 1000 1200 0\\r\\ntourist 2 0 490 950 1100 1400 0\\r\\nEgor 7 0 480 900 950 0 1000\\r\\nc00lH4x0R 0 10 150 0 0 0 0\\r\\nsome_participant 2 1 450 720 900 0 0\\r\\n', 'output': ['tourist']}, {'input': '1\\r\\nA 0 0 200 0 0 0 0\\r\\n', 'output': ['A']}, {'input': '2\\r\\n12345678901234567890 1 0 200 0 0 0 0\\r\\n_ 1 0 201 0 0 0 0\\r\\n', 'output': ['_']}, {'input': '5\\r\\nAb 0 0 481 900 1200 1600 2000\\r\\nCd 0 0 480 899 1200 1600 2000\\r\\nEf 0 0 480 900 1200 1600 2000\\r\\ngH 0 0 480 900 1200 1599 2000\\r\\nij 0 0 480 900 1199 1600 2001\\r\\n', 'output': ['Ab']}, {'input': '4\\r\\nF1 0 0 150 0 0 0 0\\r\\nF2 0 1 0 0 0 0 0\\r\\nF3 0 2 0 0 0 0 0\\r\\nF4 0 3 0 0 0 0 0\\r\\n', 'output': ['F1']}, {'input': '2\\r\\nA87h 5 0 199 0 0 0 0\\r\\nBcfg 7 0 0 0 0 0 0\\r\\n', 'output': ['Bcfg']}, {'input': '10\\r\\nKh 40 26 0 0 0 0 1243\\r\\nn 46 50 500 0 910 1912 0\\r\\nU 18 1 182 0 457 0 0\\r\\nFth6A0uT6i 38 30 0 787 0 1121 0\\r\\nC5l 24 38 0 689 1082 0 0\\r\\nN 47 25 0 0 1065 0 1538\\r\\nznyL 9 24 0 315 0 0 0\\r\\nJ0kU 27 47 445 0 0 0 0\\r\\nlT0rwiD2pg 46 13 0 818 0 0 0\\r\\nuJzr 29 14 0 0 0 0 2387\\r\\n', 'output': ['N']}, {'input': '2\\r\\nminus_one 0 4 199 0 0 0 0\\r\\nminus_two 0 4 198 0 0 0 0\\r\\n', 'output': ['minus_one']}, {'input': '10\\r\\nW22kb1L1 0 39 0 465 0 1961 865\\r\\n1MCXiVYmu5ys0afl 0 38 0 0 0 1982 1241\\r\\nCxg706kUJtQ 0 23 211 0 0 1785 1056\\r\\nmzEY 0 16 0 0 0 1988 1404\\r\\nv8JUjmam5SFP 0 48 0 788 1199 1426 0\\r\\n7giq 0 21 0 780 1437 1363 1930\\r\\nsXsUGbAulj6Lbiq 0 32 205 0 0 603 0\\r\\nRepIrY1Er4PgK 0 13 381 872 927 1488 0\\r\\nleKBdKHLnLFz 0 29 220 0 0 1006 889\\r\\nD 0 26 497 0 0 0 1815\\r\\n', 'output': ['7giq']}, {'input': '1\\r\\nZ 0 0 0 0 0 0 0\\r\\n', 'output': ['Z']}, {'input': '3\\r\\nAbcd 0 4 189 0 0 0 0\\r\\nDefg 0 5 248 0 0 0 0\\r\\nGhh 1 3 0 0 0 0 0\\r\\n', 'output': ['Defg']}, {'input': '3\\r\\ndf 0 6 0 0 0 0 0\\r\\njnm 1 8 300 0 0 0 0\\r\\n_ub_ 3 20 300 310 0 0 0\\r\\n', 'output': ['jnm']}, {'input': '1\\r\\njhgcyt 0 50 0 0 0 0 0\\r\\n', 'output': ['jhgcyt']}, {'input': '2\\r\\njhv 0 50 500 1000 1500 2000 2500\\r\\nPetr 2 1 489 910 1100 1300 1000\\r\\n', 'output': ['jhv']}, {'input': '3\\r\\nufu 0 50 0 0 0 0 0\\r\\nhzEr65f 1 50 0 0 0 0 0\\r\\nytdttjfhfd 0 50 150 0 0 0 0\\r\\n', 'output': ['ytdttjfhfd']}, {'input': '5\\r\\nufuf 0 50 0 0 0 0 0\\r\\nyfycy 50 0 500 1000 1500 2000 2500\\r\\n__u77 6 7 490 999 1456 1976 1356\\r\\n0 1 2 0 0 0 0 2452\\r\\ngu7fF 50 0 500 1000 1500 2000 2499\\r\\n', 'output': ['yfycy']}, {'input': '2\\r\\nhfy 0 50 0 0 0 0 2500\\r\\nugug 0 50 0 0 0 0 2499\\r\\n', 'output': ['hfy']}, {'input': '8\\r\\nA 0 0 0 0 0 0 0\\r\\nb 0 0 0 0 0 0 0\\r\\nc 0 0 0 0 0 0 0\\r\\nD 0 0 0 0 0 0 0\\r\\nE 1 0 0 0 0 0 0\\r\\nF 0 0 0 0 0 0 0\\r\\ng 0 0 0 0 0 0 0\\r\\nH 0 0 0 0 0 0 0\\r\\n', 'output': ['E']}, {'input': '2\\r\\nyyyc 50 50 0 0 0 0 0\\r\\nydd 0 0 0 0 0 0 2499\\r\\n', 'output': ['yyyc']}, {'input': '2\\r\\ntom 0 2 0 0 0 0 0\\r\\nmac 0 1 0 0 0 0 0\\r\\n', 'output': ['mac']}, {'input': '1\\r\\ncool 0 10 0 0 0 0 0\\r\\n', 'output': ['cool']}]", "source_code": "import java.util.*;\npublic class JavaApplication9\n{\n    static Scanner in = new Scanner(System.in);\n\n    public static void main(String[] args) \n    {\n        int n = in.nextInt();\n        String[] handles = new String[n];\n        int[] earn = new int[n];\n        int temp = 0;\n        for(int i = 0 ; i < n ; i++ )\n        {\n            handles[i] = in.next();\n            handles[i] = handles[i] + \" \" + in.nextInt() + \" \" + in.nextInt() ;\n            handles[i] = handles[i] + \" \" + in.nextInt() + \" \" + in.nextInt() + \" \" + in.nextInt() ;\n            handles[i] = handles[i] + \" \" + in.nextInt() ;\n            temp = 0 ;\n            for( int j = 1 ; j < 6 ; j++ )\n                temp = temp + (in.nextInt() - in.nextInt());\n            earn[i] = temp ;\n        }\n        String max = handles[0];\n        for( int i = 1 ; i < n ; i++ )\n            if( earn[i] > earn[in.nextInt()] )\n                max = handles[i];\n        System.out.print(max);\n    }\n}\n"}
{"src_uid": "40002052843ca0357dbd3158b16d59f4", "id": 91, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2700, "testcases": "[{'input': '3\\r\\n2 1 4\\r\\n', 'output': ['5']}, {'input': '4\\r\\n3 1 4 4\\r\\n', 'output': ['6']}, {'input': '4\\r\\n3 1 4 1\\r\\n', 'output': ['6']}, {'input': '5\\r\\n3 1 4 1 5\\r\\n', 'output': ['11']}, {'input': '11\\r\\n5000 5000 5000 5000 5000 5000 0 1 0 1 0\\r\\n', 'output': ['77835']}, {'input': '1\\r\\n0\\r\\n', 'output': ['0']}, {'input': '1\\r\\n1\\r\\n', 'output': ['0']}, {'input': '4\\r\\n0 1 1 0\\r\\n', 'output': ['0']}, {'input': '17\\r\\n1 9 2 8 4 5 7 3 8 4 6 2 8 4 1 0 5\\r\\n', 'output': ['87']}, {'input': '4\\r\\n57 918 827 953\\r\\n', 'output': ['7835']}, {'input': '51\\r\\n17 26 14 0 41 18 40 14 29 25 5 23 46 20 8 14 12 27 8 38 9 42 17 16 31 2 5 45 16 35 37 1 46 27 27 16 20 38 11 48 11 3 23 40 10 46 31 47 32 49 17\\r\\n', 'output': ['2366']}, {'input': '95\\r\\n28 12 46 4 24 37 23 19 7 22 29 34 10 10 9 11 9 17 26 23 8 42 12 31 33 39 25 17 1 41 30 21 11 26 14 43 19 24 32 14 3 42 29 47 40 16 27 43 33 28 6 25 40 4 0 21 5 36 2 3 35 38 49 41 32 34 0 27 30 44 45 18 2 6 1 50 13 22 20 20 7 5 16 18 13 15 15 36 39 37 31 35 48 38 8\\r\\n', 'output': ['4286']}, {'input': '49\\r\\n27 12 48 48 9 10 29 50 48 48 48 48 11 14 18 27 48 48 48 48 1 48 33 48 27 48 48 48 12 16 48 48 22 48 48 36 31 32 31 48 50 43 20 48 48 48 48 48 16\\r\\n', 'output': ['3484']}, {'input': '17\\r\\n12 12 5 1 3 12 4 2 12 12 12 12 6 12 7 12 0\\r\\n', 'output': ['179']}, {'input': '70\\r\\n50 0 50 0 0 0 0 0 0 50 50 50 50 0 50 50 0 50 50 0 0 0 50 50 0 0 50 0 50 0 50 0 0 50 0 0 0 0 50 50 50 50 0 0 0 0 0 0 0 0 50 0 50 50 0 50 0 0 0 0 50 0 50 0 0 50 0 50 0 0\\r\\n', 'output': ['3024']}, {'input': '295060\\r\\n38 23 17 20 28 38 38 28 32 7 20 0 14 31 41 16 46 39 41 8 40 14 33 36 11 2 40 8 19 36 13 29 4 22 4 12 17 38 50 35 10 40 21 7 21 2 27 34 30 40 22 37 20 5 12 42 33 16 22 45 14 26 16 27 7 24 48 1 15 40 0 27 47 25 29 42 23 23 16 17 20 1 6 38 12 0 19 34 20 43 44 8 47 23 17 5 38 40 43 46 12 29 41 10 2 4 23 22 24 45 42 39 11 19 0 4 7 1 0 13 42 3 42 49 43 39 22 36 47 17 0 35 39 15 42 16 6 20 17 43 17 4 4 30 14 45 3 7 47 12 10 41 16 45 11 5 13 37 49 36 44 24 38 3 48 26 5 10 26 32 4 35 13 40 9 42 42 40 36 22 ...', 'output': ['14408680']}, {'input': '68484\\r\\n45 1 16 1 50 16 29 39 50 46 28 5 11 28 19 5 41 23 15 30 20 7 18 6 30 27 35 31 33 13 3 1 12 11 46 28 42 17 13 5 43 36 21 45 1 38 39 36 29 10 42 6 26 37 26 3 36 0 45 27 2 9 42 33 45 39 21 19 48 14 10 14 20 12 47 38 29 32 37 17 50 10 29 6 5 48 37 48 24 26 36 7 4 26 12 42 40 35 32 22 17 35 9 47 11 13 10 10 4 13 32 23 30 26 22 20 20 0 49 38 33 16 46 50 21 40 2 15 13 26 16 3 22 47 37 35 23 34 22 40 22 12 42 13 39 25 46 25 47 12 1 43 25 1 32 25 26 18 8 50 27 45 45 9 42 25 12 27 48 6 15 2 14 41 3 7 6 0 29 2...', 'output': ['3345881']}, {'input': '1000000\\r\\n3722 452 4276 30 137 3139 4268 4696 1846 2667 4961 3074 4236 4685 4087 2731 3444 4322 4932 2801 3270 3 1629 4477 3073 4958 3274 760 978 4270 3836 1343 4543 1770 2995 2073 3085 1190 4630 635 3582 1483 1953 990 4430 1546 1787 916 3572 2781 189 1832 2275 3122 714 931 4259 2670 241 3550 387 1032 3317 3802 1423 160 1717 1783 3911 4966 1947 4002 1905 2708 3798 4609 2264 399 4637 705 19 1194 1688 1682 1543 3335 521 4343 3036 3527 398 3205 444 1392 1226 3770 3775 4669 3394 3907 3857 4711 3696 2203 395 222...', 'output': ['7607420444']}, {'input': '1000000\\r\\n522 4027 3242 3953 143 2524 1807 4590 574 4082 4545 59 1875 3013 2181 906 2440 892 727 1900 57 480 1275 1115 4406 2958 4632 3920 1901 1611 1826 3199 2393 1268 1140 1549 3367 3625 4123 4996 4480 3553 1483 1236 3965 4973 4534 4546 2637 1999 1073 929 4043 1343 1310 850 188 1005 4228 2198 388 1001 2549 4137 212 3001 3231 1987 3806 2926 4746 355 1552 431 635 3372 1820 396 1425 3998 1362 3213 2589 4102 2081 761 438 409 902 4512 1274 520 1789 3499 414 2074 542 1784 1706 2436 199 1508 4900 1968 527 1815 3...', 'output': ['7605550222']}, {'input': '1000000\\r\\n2976 2807 1350 3599 2725 1350 2266 3745 1350 1350 1607 4715 1803 1350 1350 2355 1350 1350 1350 1350 1350 1350 3814 1008 2634 4272 153 1350 2335 1350 1350 2952 2395 1187 2912 1392 1350 208 1350 1350 2711 1350 4116 195 130 3661 2624 1350 1350 3561 1350 1350 1350 1350 1350 1350 1350 3830 4407 1056 1350 1350 3003 1212 1350 2702 1469 1483 1025 3345 1350 4493 1350 1350 1350 3324 1350 1350 1693 2153 1350 4035 1772 1350 1350 1350 1350 1469 2034 3780 1920 1050 1350 1350 1350 1921 4707 3667 1350 1350 1887 1...', 'output': ['5780430738']}, {'input': '1000000\\r\\n935 1374 1374 1834 1431 4393 1520 1678 1374 917 4059 1374 1374 1374 4957 1374 808 1374 1374 1374 1374 122 1374 1374 1374 3800 396 1374 1374 1374 1374 878 1374 648 1374 1374 1374 1374 2763 845 1374 1374 1374 1122 1374 1374 1374 1374 1374 1374 1374 1374 4696 1915 3392 1374 3781 1374 3861 4681 1864 1374 1374 2556 1978 1374 4166 1374 4140 1374 1374 4675 1436 1374 3101 1374 1374 83 1374 1374 4251 143 1374 4060 2303 1374 341 1374 1374 1374 1374 1374 269 1374 4575 1925 1374 1374 1374 3286 1374 3996 1374 ...', 'output': ['5811523118']}, {'input': '1000000\\r\\noutput': ['1950296028']}, {'input': '1000000\\r\\n5000 0 5000 0 0 0 0 0 5000 0 0 5000 0 5000 0 0 0 5000 0 0 0 0 0 0 0 0 5000 0 0 5000 0 0 0 0 0 5000 0 0 5000 0 0 0 0 5000 5000 5000 0 0 5000 0 0 0 5000 5000 0 0 0 5000 5000 0 0 0 0 0 5000 0 5000 0 0 0 0 0 5000 5000 0 5000 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 5000 0 0 0 0 5000 0 0 0 0 0 5000 5000 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 5000 5000 0 0 0 0 0 5000 5000 5000 5000 0 0 0 0 0 0 0 5000 5000 0 0 0 0 0 0 5000 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 5000 0 0 0 0 5000 5000 0 5000 ...', 'output': ['3888512064']}, {'input': '1000000\\r\\noutput': ['7779561549']}, {'input': '1000000\\r\\noutput': ['3888449796']}, {'input': '1000000\\r\\noutput': ['1947260463']}, {'input': '1000000\\r\\noutput': ['0']}, {'input': '13\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 50\\r\\n', 'output': ['108']}, {'input': '45\\r\\n50 0 0 0 0 0 0 0 0 50 0 0 50 0 0 50 50 0 0 0 0 0 50 0 0 0 0 0 50 50 0 0 0 0 50 0 50 0 50 0 0 0 0 0 50\\r\\n', 'output': ['1296']}, {'input': '24\\r\\n50 0 50 50 50 0 50 50 0 50 50 50 50 50 0 50 50 0 50 50 50 50 50 50\\r\\n', 'output': ['540']}, {'input': '68\\r\\n50 50 50 50 50 50 50 50 0 0 50 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 50 50 50 50 0 50 50 0 0 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50\\r\\n', 'output': ['864']}, {'input': '75\\r\\n2597 1818 260 4655 4175 2874 2987 4569 2029 4314 444 2276 4937 1209 1797 4965 3526 275 3535 2198 4402 2144 1369 13 4453 1655 4456 711 3563 1650 3997 885 782 147 2426 974 2917 2100 4549 2465 3015 3485 3238 4086 171 3934 1903 133 2278 2573 688 551 872 459 2044 1401 2429 4933 3747 587 2781 4173 4651 4012 1407 2352 1461 566 2062 4599 1430 2269 3914 1820 4728\\r\\n', 'output': ['565559']}, {'input': '29\\r\\n8 27 14 21 6 20 2 11 3 19 10 16 0 25 18 4 23 17 15 26 28 1 13 5 9 22 12 7 24\\r\\n', 'output': ['692']}, {'input': '87\\r\\n1120 1120 1120 872 1120 731 3583 2815 4019 1291 4568 973 1120 1705 1120 822 203 1120 1120 1120 1120 4196 3166 4589 3030 1120 1120 1120 711 1120 500 1120 1120 3551 1120 1120 1120 1700 1120 1120 2319 4554 1120 1312 1120 1120 4176 1120 1120 3661 1120 1120 1120 1120 142 63 4125 1120 4698 3469 1829 567 1120 1120 1083 486 1120 1120 1120 1120 3763 1120 247 4496 454 1120 1120 1532 1120 4142 352 1120 359 2880 1120 1120 4494\\r\\n', 'output': ['438276']}, {'input': '27\\r\\n9 1144 1144 2 8 1144 12 0 1144 1144 7 3 1144 1144 11 10 1 1144 1144 5 1144 4 1144 1144 1144 1144 6\\r\\n', 'output': ['43222']}, {'input': '27\\r\\n0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 5000 0 0 0 5000\\r\\n', 'output': ['62268']}, {'input': '59\\r\\n0 0 0 5000 0 0 0 5000 5000 0 5000 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 5000 0 5000 0 5000 0 0 5000 0 5000 0 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 5000 0 0 0 5000\\r\\n', 'output': ['233505']}, {'input': '80\\r\\n0 0 0 0 5000 0 0 5000 5000 5000 0 5000 0 5000 5000 0 0 0 0 5000 5000 0 0 5000 0 5000 5000 5000 0 5000 0 5000 5000 5000 0 0 5000 0 0 5000 5000 0 0 5000 0 5000 5000 5000 0 0 5000 5000 5000 0 0 5000 0 0 5000 0 5000 5000 0 5000 0 5000 0 5000 0 5000 0 0 0 0 5000 5000 5000 0 0 0\\r\\n', 'output': ['591546']}, {'input': '20\\r\\n0 5000 5000 5000 5000 5000 0 5000 5000 0 5000 5000 5000 0 5000 5000 5000 5000 0 5000\\r\\n', 'output': ['77835']}, {'input': '78\\r\\n0 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 0 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 0 5000 0 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 0 0 0 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 5000 5000 0 5000\\r\\n', 'output': ['249072']}, {'input': '3241\\r\\n20 31 49 20 24 6 33 50 24 30 6 50 45 34 43 40 35 10 27 4 43 19 42 16 20 49 20 32 18 41 36 32 26 37 9 21 29 16 22 27 9 48 47 29 30 15 43 24 26 20 3 11 4 35 12 42 48 11 44 46 31 44 20 47 0 7 7 18 47 3 18 8 4 9 2 48 28 22 32 4 24 37 32 26 49 12 4 10 44 50 41 23 5 26 1 5 34 4 1 13 39 26 24 25 25 9 37 5 22 15 12 49 48 2 28 37 42 44 45 30 4 41 43 7 44 39 9 21 47 41 7 17 18 14 19 13 35 8 36 39 1 18 47 25 48 22 44 41 12 17 5 5 44 48 9 4 49 37 34 9 13 37 21 40 45 13 3 32 22 12 25 48 24 6 28 9 41 2 45 28 31 9 ...', 'output': ['160831']}, {'input': '3569\\r\\n11 34 14 46 1 12 5 13 5 46 35 8 36 28 7 16 16 47 29 45 27 36 47 22 2 33 5 38 23 34 24 48 15 27 20 14 31 8 18 15 44 10 47 28 17 36 34 48 10 48 29 35 31 15 19 17 26 42 15 45 21 16 9 31 30 32 50 12 48 37 46 2 10 32 36 8 38 25 20 3 26 7 35 33 38 6 16 30 42 38 47 16 20 23 36 30 20 24 38 5 1 16 40 31 14 6 10 27 2 4 32 1 12 6 43 43 34 32 19 9 47 34 22 37 9 50 33 18 45 42 20 19 49 20 49 25 3 41 36 46 41 21 21 26 43 50 37 23 11 34 32 3 32 42 35 6 18 45 47 16 19 33 2 34 35 44 11 47 13 24 10 31 13 37 48 42 22 3...', 'output': ['174332']}, {'input': '5489\\r\\n2 18 8 33 36 26 20 18 26 0 26 42 26 5 10 26 26 26 26 2 26 0 28 26 26 26 26 26 28 30 25 24 26 2 26 26 39 26 26 26 26 31 26 26 26 46 26 5 26 26 45 16 26 7 26 26 26 26 49 26 26 1 0 8 26 19 3 18 8 38 26 14 40 31 44 26 26 26 26 26 30 42 26 10 26 18 29 32 8 29 3 26 26 26 6 26 26 6 26 26 26 34 26 26 4 10 0 47 49 26 26 26 1 18 29 12 23 2 39 50 4 17 26 29 8 26 13 35 26 16 42 30 26 26 46 6 42 26 26 26 5 24 26 26 46 29 26 35 26 26 26 23 26 26 26 26 26 26 26 26 26 26 26 26 50 33 26 31 26 26 47 26 26 26 26 6 26 2...', 'output': ['260842']}, {'input': '5817\\r\\n41 18 41 41 25 41 41 39 1 6 41 40 41 41 41 41 0 41 41 41 41 17 41 41 41 39 41 12 41 0 41 36 40 41 41 41 41 11 41 27 13 41 29 41 22 41 41 33 14 19 18 41 41 32 41 5 41 2 34 13 47 41 41 41 41 45 18 41 43 42 41 12 9 41 41 41 35 10 41 41 41 41 44 41 41 30 41 7 25 41 46 42 41 12 41 41 48 13 23 41 17 41 44 41 1 41 24 3 41 41 41 26 41 41 6 7 41 0 10 2 16 29 41 34 41 39 36 41 3 41 41 36 2 24 35 38 36 37 41 41 38 8 42 36 0 35 37 2 41 28 41 38 36 13 41 41 16 41 31 43 1 38 19 23 41 41 41 17 9 41 25 41 45 19 10 4...', 'output': ['377254']}, {'input': '2871\\r\\noutput': ['37260']}, {'input': '2543\\r\\n0 0 0 0 50 50 0 0 0 0 0 0 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50 0 0 0 0 50 0 0 0 50 0 0 0 0 0 0 0 0 50 0 0 0 0 0 0 50 0 50 0 0 50 0 50 50 0 0 0 0 0 0 50 50 0 0 0 50 50 0 50 0 0 0 50 50 0 0 0 0 50 0 0 0 0 0 0 0 0 50 0 0 0 50 0 50 0 0 50 0 50 0 0 0 50 0 0 50 50 0 0 0 0 50 0 0 50 0 0 0 0 0 50 0 50 0 0 0 0 0 0 0 0 0 0 50 50 50 0 0 0 0 0 0 0 0 0 50 0 0 0 0 0 50 0 0 0 0 0 0 50 50 0 0 50 0 0 50 0 0 0 0 0 0 0 0 0 50 50 0 0 0 0 50 0 0 50 0 0 50 50 0 0 0 50 50 0 0 50 0 0 0 0 0 0 0 0 0 50 0 50 0 0 0 0 0 0 0 0 0 0 0...', 'output': ['66744']}, {'input': '6658\\r\\n50 50 50 0 0 50 0 0 50 0 0 50 50 0 50 50 0 0 50 50 0 50 50 50 50 0 50 0 0 50 50 0 50 0 0 0 0 0 50 0 0 0 50 0 50 50 50 50 0 50 0 50 50 50 50 50 50 50 0 0 50 0 0 50 0 50 0 0 50 50 50 0 0 0 0 0 50 0 0 0 50 0 0 0 50 0 50 0 50 50 50 50 0 0 50 50 0 50 50 0 0 0 50 50 0 0 50 50 0 0 0 50 0 0 50 50 50 50 50 0 0 0 0 50 50 50 50 0 0 0 0 0 0 0 50 0 50 50 50 0 0 0 50 0 50 50 50 50 50 0 0 50 50 0 0 0 0 50 0 50 0 50 50 0 0 0 50 50 0 50 50 50 0 50 0 0 0 0 0 50 50 50 0 50 0 0 0 0 0 0 50 50 0 0 50 50 0 50 50 0 50 50 0 ...', 'output': ['357156']}, {'input': '7782\\r\\n50 50 0 0 0 50 50 50 50 50 50 50 0 50 50 0 50 50 50 50 50 50 0 50 50 50 0 50 50 0 0 50 50 0 0 50 50 50 50 50 0 50 50 0 50 50 50 50 50 50 50 0 50 50 50 0 0 50 50 0 50 0 50 0 0 50 50 0 50 0 50 50 50 0 50 50 50 50 50 50 0 50 50 50 0 50 0 50 50 0 0 50 50 0 0 50 50 50 50 50 0 50 50 50 0 0 50 50 50 0 50 0 50 0 0 50 0 50 50 50 50 50 50 50 50 50 50 50 50 50 50 0 50 0 50 50 50 0 50 50 50 50 0 50 0 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 0 0 0 50 0 0 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 ...', 'output': ['202284']}, {'input': '8110\\r\\noutput': ['109080']}, {'input': '4463\\r\\n2612 1495 2859 1941 1446 2716 4690 4357 2841 4862 2243 3269 4454 995 3373 2249 4637 3365 2276 1330 3211 572 826 4368 2894 905 137 718 2081 3137 3718 4107 3420 1398 193 1255 504 325 879 3991 3579 4223 315 1854 418 1143 1822 4198 2589 1918 4633 1210 86 52 336 3709 2138 838 3815 866 595 3296 4810 699 234 2559 4523 349 3190 1770 267 987 489 2936 4000 907 4032 1122 293 1486 3054 4489 412 4844 3924 1750 1249 300 1593 2535 1028 1469 4747 4522 3000 1326 4214 2544 789 3632 2556 4190 2426 1185 2402 1880 3382 7...', 'output': ['33446396']}, {'input': '5587\\r\\n2623 467 1074 276 33 2358 829 2301 820 160 398 3363 4748 2942 4704 2516 1274 4663 634 4071 4825 143 2912 2888 2968 3925 3589 3793 3172 3541 3494 75 4914 342 2901 1959 45 4692 3580 1458 4080 3297 1947 2236 127 3280 3318 4024 1199 2520 4506 3727 4205 2762 4291 235 3535 2536 2526 2609 4920 2257 3986 2082 1471 2106 311 4015 3822 455 3335 2263 616 1187 464 390 1366 3124 4893 1719 4779 1197 2097 3292 1653 33 504 1596 1158 3852 3262 4875 428 854 1140 2848 3166 2498 1219 3806 556 4607 3368 421 1312 4387 4448...', 'output': ['38501618']}, {'input': '5915\\r\\n3291 884 4366 156 3584 3291 2124 2353 3291 3291 123 3989 805 3291 3291 3160 1562 3291 793 2707 3291 3291 3291 1504 3291 3291 891 3291 3291 3291 582 3291 3291 3291 3291 2333 715 4753 3291 3291 4111 4457 4577 3793 3291 3291 3291 1652 1916 3291 3882 251 912 4595 577 1650 3291 3291 3291 143 3506 1658 1944 3291 3291 3673 3291 3291 3291 646 3575 4523 3291 434 3291 1526 3291 3291 3853 4708 2083 3291 3291 2560 2032 825 3291 1770 3291 3291 2960 3291 1517 795 3291 3235 3601 2124 1798 3291 3291 1093 3291 3291 3...', 'output': ['51854645']}, {'input': '7039\\r\\n1790 834 1882 1790 1790 2803 2541 1790 3268 24 922 1790 1790 1790 2078 1790 939 1790 2717 1790 2404 1790 1790 1790 1480 1867 2257 3412 1790 1812 1790 1790 1790 3469 1790 2214 679 1919 3173 468 1790 1790 1790 2321 3045 1790 1790 1790 1329 1790 1790 1790 1790 1730 541 3140 1790 264 1604 2703 1790 1790 1790 2166 1790 1790 1790 1790 1790 949 1790 3427 1217 519 1790 1916 2692 1790 1199 2023 3315 1790 2503 1790 302 1790 1790 1790 1790 1790 2009 1790 1203 3040 1790 2836 1869 1790 1790 2613 1790 1790 2898 15...', 'output': ['37192065']}, {'input': '7716\\r\\n0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 5000 0 5000 0 0 5000 0 0 0 0 0 0 5000 5000 5000 0 0 0 5000 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 5000 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 0 5000 0 0 0 0 5000 5000 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 5000 0 0 0 5000 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...', 'output': ['15317928']}, {'input': '6592\\r\\n0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 5000 0 0 0 5000 5000 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 5000 0 0 0 5000 0 0 0 0 0 5000 5000 0 0 0 0 5000 0 0 5000 5000 0 0 5000 0 5000 0 0 0 5000 0 5000 0 0 0 0 0 5000 0 5000 0 0 5000 5000 0 0 0 0 0 0 0 0 5000 5000 5000 0 0 0 0 0 5000 0 0 0 0 5000 0 0 5000 0 0 0 5000 0 0 5000 5000 0 5000 0 0 0 0 5000 0 0 5000 0 0 0 0 5000 0 0 0 0 0 5000 5000 0 0 5000 0 0 0 5000 0 5000 0 0 5000 0 0 0 0 0 0 5000 0 0 0 5000 0 5000 5000 0 5000 5000 0 0 0 0 5000...', 'output': ['26993178']}, {'input': '6927\\r\\noutput': ['53675016']}, {'input': '8051\\r\\noutput': ['31865649']}, {'input': '8379\\r\\noutput': ['16516587']}, {'input': '831909\\r\\n17 49 28 4 26 17 17 17 34 17 3 18 17 0 28 17 17 45 17 17 17 7 13 17 17 17 17 17 17 17 17 17 19 0 17 43 17 17 17 17 43 17 17 17 17 6 36 17 27 19 47 17 44 0 17 17 20 24 17 17 17 32 15 17 17 25 30 17 17 17 18 3 47 17 17 45 17 17 20 40 3 17 29 17 17 17 17 40 17 17 17 17 31 17 4 47 24 17 19 17 39 17 37 17 47 13 17 3 17 17 20 17 17 48 17 49 34 18 17 13 20 30 19 17 17 17 17 17 12 47 22 42 29 17 20 17 17 17 32 7 7 17 17 17 17 17 46 32 20 17 5 17 17 50 17 17 38 21 17 36 37 18 17 38 17 11 9 8 17 17 48 29 25 ...', 'output': ['31683596']}, {'input': '258037\\r\\n33 8 33 0 33 33 33 48 33 16 40 33 38 23 33 33 33 33 33 4 46 33 17 17 33 6 33 27 33 19 5 33 10 33 27 33 48 12 33 33 33 20 23 33 33 28 11 33 33 33 28 33 50 33 33 33 33 5 33 33 33 33 35 47 33 33 33 3 13 11 33 17 33 33 33 38 33 33 44 3 33 33 33 31 33 33 33 33 33 33 18 8 29 10 33 33 33 33 15 1 37 7 7 33 17 5 33 31 38 33 27 44 17 38 33 33 49 33 33 2 33 33 30 33 31 13 39 46 33 18 28 41 42 33 14 33 33 33 10 8 33 33 33 33 33 33 33 46 33 33 33 25 34 22 33 39 33 30 24 33 33 1 33 44 15 15 33 41 20 33 45 33 27 ...', 'output': ['14441842']}, {'input': '328921\\r\\noutput': ['4404996']}, {'input': '555497\\r\\noutput': ['14931972']}, {'input': '207904\\r\\n50 50 50 0 0 50 0 50 50 50 0 50 50 50 0 50 50 50 50 0 50 0 0 0 50 0 0 0 50 0 0 50 0 50 0 0 0 50 50 0 50 50 50 0 50 0 0 0 0 50 0 50 50 0 50 0 0 0 50 50 50 50 50 50 50 50 50 0 0 50 50 0 50 50 50 50 0 0 0 0 0 50 50 50 0 0 50 0 50 0 50 0 0 0 50 0 50 0 0 50 0 50 50 50 50 50 0 0 50 0 50 0 0 50 50 0 50 0 50 0 0 0 50 0 0 50 0 0 0 0 0 50 0 50 0 50 0 50 0 0 50 50 50 50 50 0 0 0 50 0 50 50 50 50 50 0 50 50 0 0 50 0 50 0 0 0 50 0 50 50 50 0 0 50 0 50 50 50 0 0 0 0 50 50 0 0 50 50 50 50 50 50 50 0 0 0 50 50 50 ...', 'output': ['11221740']}, {'input': '971328\\r\\n50 0 0 0 50 50 0 50 50 50 50 50 50 50 0 50 50 50 50 0 50 50 50 0 50 50 50 50 0 50 50 50 50 0 50 50 50 50 50 50 50 50 0 0 50 50 0 50 50 50 0 0 0 50 50 50 50 50 0 0 50 50 0 0 50 50 0 50 50 50 0 0 50 50 50 0 50 0 50 0 50 50 0 50 0 50 0 50 50 0 50 50 50 50 0 50 50 50 50 50 50 50 50 0 50 50 50 0 0 50 50 0 0 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 0 50 50 50 0 50 0 50 0 0 50 0 50 50 0 0 50 50 50 50 50 50 50 0 50 0 50 50 0 0 0 0 50 50 0 50 50 0 50 50 50 50 50 50 50 50 ...', 'output': ['26290440']}, {'input': '744752\\r\\noutput': ['10077264']}, {'input': '973217\\r\\n2233 4962 2835 1271 712 2124 3765 510 914 3364 2648 3399 744 3777 1516 739 3844 3879 261 863 2101 791 2276 1691 2145 1603 819 2340 415 3123 3260 1225 4746 4672 937 742 3927 25 2177 640 72 245 4053 3213 1322 3725 2842 883 216 4345 815 1534 633 4222 1677 2151 949 2691 2931 1897 1678 2599 4295 953 656 2864 2956 4134 4556 2839 3201 878 4447 270 1517 647 4010 3382 683 660 1393 785 3285 1115 1057 3672 3462 1434 882 122 505 3504 1946 1152 2997 3360 605 966 4034 4790 1344 1579 4482 2472 4484 3325 2852 543 ...', 'output': ['7404434821']}, {'input': '103937\\r\\n1662 2609 1161 2445 296 1285 3447 58 3521 1582 3524 1259 2360 3741 3130 4570 2215 3091 2032 3518 2969 3181 1414 1632 2101 4556 3642 1734 1388 4300 1631 182 1633 3970 1837 3967 1914 3162 915 2404 1208 4583 4334 279 747 2251 4671 4416 4752 3641 3811 1089 3213 740 1502 3880 2044 2766 777 3050 2475 4741 1121 2863 1065 4146 4872 2094 139 755 2780 4115 3442 2104 4030 1891 3037 2769 739 2274 3313 3098 2415 3909 4771 2761 1623 4084 3038 3130 4758 2667 3792 247 8 2846 3218 3485 3149 3845 470 4108 1031 484 3...', 'output': ['783928844']}, {'input': '520065\\r\\n756 4889 1279 756 756 756 756 4981 756 756 3514 3153 756 1559 563 3198 756 1696 756 1161 756 756 4853 1600 2623 3399 756 756 2736 756 756 756 756 756 4089 756 756 1407 3919 1546 1651 756 2430 756 756 756 756 756 756 4836 4582 1305 1304 763 756 4644 4890 756 3162 2611 3242 4455 1792 1882 756 2208 2014 4995 756 2947 2876 4738 756 756 1113 756 891 756 756 756 265 3619 756 756 756 4725 756 756 756 774 4476 4539 214 756 756 125 2452 3861 2363 2240 3842 756 4106 756 1183 756 756 756 756 756 1798 1694 793...', 'output': ['2532637708']}, {'input': '293489\\r\\n1084 4053 780 780 950 694 780 3823 780 780 2601 780 780 1469 3089 780 780 780 780 4707 780 2191 3268 2411 2892 171 3953 4307 340 1869 780 780 4373 4183 3523 780 2859 1053 780 1433 780 780 780 780 780 320 780 780 780 780 1948 2097 780 4234 780 780 780 4624 3124 780 780 3087 780 335 4642 780 780 2633 780 1447 780 780 4153 4532 780 780 3217 780 2340 2143 4089 2517 2085 780 2774 4590 3449 780 780 780 780 3715 4933 1026 2606 780 780 780 927 1997 3757 3730 780 780 780 780 780 4839 1369 780 602 780 1430 2...', 'output': ['1431772162']}, {'input': '546122\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 5000 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 5000 5000 5000 5000 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0...', 'output': ['1063817646']}, {'input': '772698\\r\\n0 5000 0 5000 0 0 0 0 0 5000 5000 0 0 0 0 5000 0 5000 0 0 0 5000 0 0 0 0 0 0 5000 5000 0 0 0 0 0 5000 0 0 0 0 0 5000 5000 0 5000 0 5000 0 0 0 0 5000 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 0 0 5000 0 5000 5000 0 0 0 5000 0 0 0 5000 0 5000 5000 0 0 0 5000 0 0 0 5000 0 0 5000 0 0 0 0 0 0 5000 0 5000 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 5000 5000 0 0 0 0 5000 0 0 0 5000 0 0 0 0 0 5000 0 0 5000 5000 0 5000 0 0 0 0 5000 0...', 'output': ['3012463572']}, {'input': '331312\\r\\noutput': ['2575933758']}, {'input': '104736\\r\\noutput': ['409458801']}, {'input': '868160\\r\\n5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 0 0 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 0 5000 0 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 0 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 500...', 'output': ['1683384246']}, {'input': '652655\\r\\n3334 3647 3955 1615 3535 4170 4440 916 3449 2474 1705 3926 4990 3602 1931 3593 1063 1637 3035 3592 4867 1381 2636 4148 2037 3053 2672 4117 3999 3410 3987 3809 1214 2506 4227 1035 3947 2980 4434 4606 1941 506 2430 4660 4704 2335 3672 659 3575 4897 2110 3191 1255 4677 4945 1118 1910 2386 928 630 4433 1229 3359 4875 1579 912 3160 2739 967 2438 4642 2192 4582 4089 4592 4265 2103 1404 4987 2649 601 4729 1050 1838 3316 964 4887 3663 1072 1898 921 2139 1880 4576 4828 3720 4421 1337 2919 4725 573 4563 714 ...', 'output': ['5470312646']}, {'input': '426079\\r\\n2838 696 521 2882 1816 4549 1788 4865 847 828 3444 3010 3490 4211 1926 2653 1094 2830 1268 3453 4906 532 2632 1988 2018 3161 2738 4149 3293 3844 3397 4545 2797 920 2672 2489 3556 1906 4249 662 2529 3906 1460 2151 1230 2527 1916 1727 1206 1011 1446 2586 4323 999 3917 3068 2849 2543 4319 3752 3258 2376 3342 4053 1804 1481 4853 2579 1163 2305 1735 4229 4686 2331 1992 3311 3851 1731 2098 2361 4830 941 3025 1566 3201 1692 2927 1751 4691 1394 3965 3014 1311 3986 1112 1710 3773 555 2357 2535 1687 1859 276...', 'output': ['3563797440']}, {'input': '199503\\r\\n819 819 4407 819 2634 1942 1127 819 1841 2488 819 819 774 4506 4800 1081 599 3091 819 819 4720 3629 819 819 2127 819 1115 819 819 819 819 819 819 819 2505 4087 2733 819 819 819 4835 2398 819 1588 819 2857 3465 819 4081 4347 3965 3529 2022 819 819 2856 819 819 1121 1828 819 819 2151 1524 2595 819 819 819 3629 3952 819 819 819 819 855 819 819 819 4197 819 2830 1026 2311 2606 819 819 4789 1104 2866 819 819 4562 2823 819 819 819 4389 819 3175 819 1115 819 819 819 819 819 3432 3480 819 3975 2524 3140 81...', 'output': ['1068954149']}, {'input': '615631\\r\\n3009 3663 3663 3663 2397 2553 3747 2143 2156 2962 3663 3826 4164 3663 3663 1309 1934 3663 4312 1760 1737 4296 3663 4739 3663 3663 3663 3663 4846 3663 3663 3663 986 2467 3663 3663 3663 3663 3663 2818 3663 3663 3663 3663 3663 3372 3663 3663 3663 4656 3663 3663 4912 3720 3663 3663 3663 4085 3663 3663 3663 4188 1082 4132 4775 1118 3663 3561 1043 3663 2132 4242 4604 3663 3663 3663 3663 3663 3663 3476 3663 2419 3349 3663 3663 3663 1120 3663 3663 3663 3663 2097 3663 4132 3663 4381 4692 3349 3663 3663 2768...', 'output': ['6032856551']}, {'input': '201235\\r\\noutput': ['422388015']}, {'input': '427811\\r\\noutput': ['1809031255']}, {'input': '462860\\r\\noutput': ['3916819805']}, {'input': '236284\\r\\noutput': ['1003533735']}, {'input': '999708\\r\\noutput': ['2120768420']}, {'input': '1000000\\r\\n48 8 20 45 21 24 8 0 42 18 16 5 49 40 18 22 40 43 41 47 30 15 17 36 25 9 24 29 8 33 29 41 22 5 15 40 21 18 13 49 39 4 38 3 24 36 27 39 9 5 0 38 40 16 42 27 24 10 12 50 41 19 3 19 34 12 42 18 2 7 17 22 11 20 25 48 18 16 25 49 19 34 21 37 4 46 16 21 9 22 1 48 28 27 36 3 49 41 43 48 36 39 8 14 38 0 18 11 37 31 23 12 14 16 38 41 47 14 45 29 34 44 32 13 17 26 44 12 46 50 37 39 40 49 30 11 22 43 19 50 32 27 30 20 28 10 24 2 17 34 12 37 36 29 26 37 21 48 4 11 31 7 30 46 15 6 0 44 47 40 24 10 33 48 33 48 ...', 'output': ['48889749']}, {'input': '1000000\\r\\n14 46 0 25 40 23 14 44 34 31 11 45 22 44 30 13 12 10 5 13 50 46 12 44 18 45 16 11 34 6 37 3 46 18 18 42 42 5 39 24 4 7 35 2 24 24 48 7 44 30 41 44 26 38 41 13 20 23 41 40 48 41 24 2 2 45 47 32 17 44 8 47 46 3 31 2 12 6 34 38 49 41 35 9 40 5 46 24 4 5 30 18 21 15 29 32 49 50 8 40 44 34 24 32 36 34 32 14 18 22 29 4 4 11 31 0 25 28 47 27 17 15 32 9 5 19 45 36 33 44 47 14 18 42 33 40 19 5 25 26 32 6 0 27 37 15 25 49 49 2 35 50 2 13 45 31 15 18 22 28 36 32 5 39 44 41 17 38 1 25 18 17 48 40 3 3 31 29 19...', 'output': ['48862349']}, {'input': '1000000\\r\\n2 27 42 2 2 2 2 4 17 47 2 45 17 2 2 2 2 14 2 42 2 5 15 37 4 5 37 40 2 2 14 17 48 2 2 2 2 37 2 2 46 8 2 45 24 47 29 35 2 2 15 2 2 12 2 34 2 2 43 2 2 23 19 49 2 42 2 3 2 2 2 2 0 5 2 2 2 37 2 2 2 2 3 2 29 2 36 22 50 2 2 43 2 2 2 34 14 1 10 2 19 33 40 3 2 50 21 41 35 13 0 18 18 2 2 2 2 29 21 2 7 2 2 36 8 2 2 2 38 21 30 30 12 2 38 41 2 42 2 16 2 2 43 38 2 42 2 2 2 14 2 2 2 8 15 2 2 5 31 49 41 2 2 29 2 2 2 32 14 2 18 2 2 23 2 2 2 2 2 41 32 2 2 29 2 2 2 21 2 2 2 2 2 24 25 13 2 2 32 2 17 2 2 11 2 21 2 29 ...', 'output': ['24924286']}, {'input': '1000000\\r\\n32 18 30 28 18 36 18 16 18 8 19 18 43 18 18 18 18 18 46 16 18 15 18 4 31 20 26 6 18 14 18 0 18 14 18 17 38 5 30 41 50 18 47 31 18 1 18 18 18 7 18 19 18 12 2 8 26 18 18 18 0 18 17 18 18 18 36 18 44 18 18 18 18 18 18 45 18 43 18 28 37 18 18 18 18 18 5 18 24 18 18 18 18 5 15 19 18 49 18 3 18 18 47 39 18 19 18 2 18 18 32 18 48 31 18 18 12 18 14 28 5 10 5 18 18 46 18 18 18 42 18 9 18 3 18 18 18 7 35 16 18 18 18 18 10 18 18 39 18 41 33 30 10 18 24 18 34 32 18 15 3 15 18 18 1 34 22 18 41 17 18 10 18 18 1...', 'output': ['39529186']}, {'input': '1000000\\r\\noutput': ['13477752']}, {'input': '1000000\\r\\noutput': ['26977860']}, {'input': '1000000\\r\\n50 50 50 50 50 50 0 50 0 0 0 0 0 0 0 0 50 50 50 0 0 0 50 0 0 0 0 50 0 0 50 50 50 50 50 50 0 0 50 50 0 0 0 50 0 0 0 0 50 50 0 0 50 50 50 50 50 0 0 0 0 0 50 50 0 50 0 50 0 50 0 50 0 50 0 0 0 50 0 50 0 0 50 0 50 0 0 50 0 50 0 0 50 50 0 50 0 0 50 0 0 0 0 0 50 0 50 50 0 0 0 0 0 0 0 50 0 0 0 0 0 0 50 50 0 50 0 50 50 0 0 50 50 50 50 50 0 50 0 50 50 50 0 0 0 50 0 0 0 50 50 0 0 50 0 50 50 0 0 0 50 50 0 0 0 50 50 50 0 50 50 0 50 0 0 50 50 50 50 50 50 50 0 50 0 50 50 0 50 50 0 50 50 50 50 50 50 50 0 0 50 0 5...', 'output': ['53993952']}, {'input': '1000000\\r\\noutput': ['26987364']}, {'input': '1000000\\r\\noutput': ['13460904']}, {'input': '1000000\\r\\n4928 5000 4744 3545 3738 2132 1318 4951 2071 1952 2436 3340 2119 2695 4938 4493 4798 575 4969 3520 2191 2873 1960 4032 3857 4548 2212 3864 2948 3089 4829 1148 1656 4725 1963 2766 1319 1971 2937 2979 3194 1866 4461 1519 3195 704 2802 4208 4242 937 1797 2331 3923 801 1677 1718 3754 770 1402 1801 3480 1839 3134 1069 4671 4776 3159 1728 2554 2091 751 626 2234 1416 640 610 1634 4110 4476 1075 2240 3216 3739 4099 4694 925 2824 3432 4434 4320 3411 4658 1378 2193 4301 2762 3768 3874 3815 3882 2439 2911 45...', 'output': ['8384253798']}, {'input': '1000000\\r\\n4637 1302 2880 1973 4301 4845 2403 2820 3359 1121 1066 3885 1101 1911 2875 865 3402 3883 1943 2415 4562 693 1895 2528 2203 2858 3316 3183 3462 3194 1180 667 3088 1856 2257 684 4941 599 1784 4124 2997 729 4662 2207 1177 4995 2535 1128 2688 4949 989 2888 3918 2059 2028 1444 2432 4254 2685 1889 2049 2391 2534 2133 3021 3290 4710 3200 1581 1147 4271 2676 2283 598 1333 1733 3408 1993 2692 2252 4442 1469 3112 960 2265 1455 4820 2984 4120 4641 1432 3231 3896 960 1817 1911 3379 1879 1417 2363 4263 1442 30...', 'output': ['8374983176']}, {'input': '1000000\\r\\n1616 3742 1616 1616 1616 1616 1787 4057 1616 710 4642 3132 1616 1616 1280 1616 3392 1680 1616 1202 2794 1616 714 1036 1616 666 1616 1616 2066 1616 4643 1616 1616 2370 1393 4716 1616 1616 4295 960 2721 3010 1616 1616 1616 3783 1616 3737 2293 1921 2932 3666 4864 1616 1616 3161 1933 1616 2214 4578 1616 1616 2040 2520 1616 1616 4641 1616 1150 1616 1616 896 3297 1616 1616 1185 4532 1616 2888 1616 1616 1616 1246 1616 1616 1616 1616 4534 1616 1616 1753 1174 1616 940 1616 1616 1616 1616 3180 1616 737 2174...', 'output': ['6573578424']}, {'input': '1000000\\r\\n2691 1471 1769 1769 1769 2426 1769 1769 1769 1603 1769 1769 1769 1769 510 1567 1524 1666 1769 1769 1153 1769 1769 1769 2414 1769 1074 1769 3210 2644 1201 3796 1766 1769 1644 577 1769 1918 1855 1769 3024 1769 1769 2995 1769 1769 4565 1769 3576 864 1769 1769 3337 1769 1769 1945 4876 2367 704 1769 1769 3704 1769 3168 1769 2401 1769 2844 1769 4175 2420 4683 1769 1769 1769 3560 1769 1769 1769 1769 1769 2808 1769 4057 4544 1769 1769 2697 2150 1737 2724 1769 3524 1769 1769 3502 1769 1769 1769 1769 1620 2...', 'output': ['6808525559']}, {'input': '1000000\\r\\noutput': ['2113787080']}, {'input': '1000000\\r\\noutput': ['4241621565']}, {'input': '1000000\\r\\noutput': ['8464722245']}, {'input': '1000000\\r\\noutput': ['4229505890']}, {'input': '1000000\\r\\noutput': ['2122852655']}, {'input': '1000000\\r\\n3491 3862 4899 1602 3307 2481 2146 1000 2479 2072 1534 2587 3924 4181 4835 2449 1976 4441 2217 3227 3297 2989 1754 1498 3742 1437 3766 3234 1072 3972 2514 1055 3883 4655 3452 1827 1874 1349 3202 2450 2946 3550 3879 3214 3123 2445 3893 1771 4218 3032 1325 4404 1421 1531 3754 1412 3178 4801 3290 4438 3677 4018 3175 1981 3353 3939 1512 3645 3759 3630 3769 3848 2031 1011 1771 1278 3021 2768 4761 1697 3561 4706 1464 3090 4827 1058 1120 3602 1808 2849 2244 4170 1928 3584 4395 2628 3674 1812 4074 1723 35...', 'output': ['8999391475']}, {'input': '1000000\\r\\n4525 1819 4273 3463 1648 2372 4978 2585 2374 2402 3570 2924 1135 1647 4411 924 1539 2671 1396 1592 2253 3152 2052 4858 4538 2952 1123 1441 2052 2404 2073 4052 4954 1331 4834 2353 1980 3243 4991 1389 2920 2050 1337 3188 2953 2753 2451 2119 3315 2174 3910 3759 3410 4935 2996 1728 1229 1070 1719 3715 2233 1699 3794 1656 4410 4356 3740 4240 4249 3772 2740 3670 3711 4863 1584 4255 1217 3831 4379 2230 2132 1625 3418 1469 4672 4632 1416 979 1173 3364 1419 1460 3118 3410 1250 1531 4916 3057 4448 4483 3900...', 'output': ['9003221879']}, {'input': '1000000\\r\\n1442 3254 3079 1274 4816 1653 3079 3079 3079 1396 4595 2894 3079 3079 1060 3079 4646 3079 3079 3567 3079 3079 3079 1111 2788 3079 913 3020 1455 3026 3079 3079 4799 3079 1018 3079 3079 3079 3079 2703 4596 3079 3079 3079 3079 3790 4649 3079 3079 3803 1425 3079 1956 3886 3861 3663 3079 3121 2774 2577 4524 3079 3079 1760 3079 3079 3545 3079 3079 3079 1009 3079 3775 4972 4066 3079 1602 3079 1288 3079 3079 3079 3079 3079 3079 1482 3079 3079 3079 3079 3079 2153 3079 1233 4758 1729 3079 1361 2370 3522 119...', 'output': ['9192195816']}, {'input': '1000000\\r\\n3085 4754 3064 4924 4924 3593 3916 3300 4924 2820 3819 4924 2825 2127 4924 3321 3323 4924 2612 4924 4924 4924 4924 4924 2572 4357 4924 4924 1690 4012 3790 4924 4924 4924 4924 2601 1049 4032 3940 4651 3530 4924 2765 2847 3710 2400 3405 2217 4924 4924 4546 1228 4924 4924 2806 4900 1510 4924 4924 4924 4924 3746 2527 4475 3412 4924 4924 4133 4924 4924 4924 3474 4924 4924 1006 4924 4924 1683 2651 2822 2382 2521 3814 4924 2554 4924 4215 3787 4685 2481 3981 4924 4924 3234 4112 4924 1758 4924 4924 4924 37...', 'output': ['12154389312']}, {'input': '4\\r\\n13 14 15 16\\r\\n', 'output': ['76']}, {'input': '3\\r\\n1 5 6\\r\\n', 'output': ['10']}, {'input': '3\\r\\n15 13 2\\r\\n', 'output': ['42']}, {'input': '3\\r\\n1 8 9\\r\\n', 'output': ['20']}, {'input': '3\\r\\n2 5 6\\r\\n', 'output': ['11']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class test{\n  static class Reader {\n      final private int BUFFER_SIZE = 1 << 16;\n      private DataInputStream din;\n      private byte[] buffer;\n      private int bufferPointer, bytesRead;\n\n      public Reader() {\n        din = new DataInputStream(System.in);\n        buffer = new byte[BUFFER_SIZE];\n        bufferPointer = bytesRead = 0;\n      }\n\n      public Reader(String file_name) throws IOException {\n        din = new DataInputStream(new FileInputStream(file_name));\n        buffer = new byte[BUFFER_SIZE];\n        bufferPointer = bytesRead = 0;\n      }\n\n      public String readLine() throws IOException {\n        String ret = \"\";\n        byte b = 0;\n        while (b!= '\\n') {\n          b = readByte();\n          if (b!= '\\n') {\n            ret += (char) b;\n          }\n        }\n        return ret;\n      }\n\n      public int readInt() throws IOException {\n        int ret = 0;\n        byte b = readByte();\n        boolean minus = false;\n        if (b == '-') {\n          minus = true;\n          b = readByte();\n        }\n        if (b < '0' || '9' < b) {\n          throw new NumberFormatException();\n        }\n        do {\n          ret *= 10;\n          ret += b - '0';\n        }  while ((b = readByte()) >= '0' && b <= '9');\n        if (minus) {\n          return -ret;\n        }\n        return ret;\n      }\n\n      public long readLong() throws IOException {\n        long ret = 0;\n        byte b = readByte();\n        boolean minus = false;\n        if (b == '-') {\n          minus = true;\n          b = readByte();\n        }\n        if (b < '0' || '9' < b) {\n          throw new NumberFormatException();\n        }\n        do {\n          ret *= 10;\n          ret += b - '0';\n        }\n        while ((b = readByte()) >= '0' && b <= '9');\n        if (minus) {\n          return -ret;\n        }\n        return ret;\n      }\n\n      public int nextInt() throws IOException {\n        int ret = 0;\n        byte b = readByte();\n        boolean minus = false;\n        if (b == '-') {\n          minus = true;\n          b = readByte();\n        }\n        if (b < '0' || '9' < b) {\n          throw new NumberFormatException();\n        }\n        do {\n          ret *= 10;\n          ret += b - '0';\n        }  while ((b = readByte()) >= '0' && b <= '9');\n        if (minus) {\n          return -ret;\n        }\n        return ret;\n      }\n\n      private void fillBuffer() throws IOException {\n        bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);\n        if (bytesRead == -1) {\n          buffer[0] = -1;\n        }\n      }\n\n      private byte readByte() throws IOException {\n        if (bufferPointer == bytesRead) {\n          fillBuffer();\n        }\n        return buffer[bufferPointer++];\n      }\n\n      public void close() throws IOException {\n        if (din == null) {\n          return;\n        }\n        din.close();\n      }\n  }\n\n  public static void main (String[] args) throws IOException {\n    int i, j, k, sum, x, y, z, n, a = 1, t = 1, l, min, max, pos, m, p, count;\n    double d;\n    String s = \"\", s1 = \"\";\n    Reader st = new Reader();\n    int N = st.nextInt();\n    int P[] = new int[N];\n    for (i = 0 ; i < N ; i++) {\n      P[i] = st.nextInt();\n    }\n    int ans[][] = new int [N][1000001];\n    for (i = 0 ; i < N ; i++) {\n      int x1"}
{"src_uid": "40002052843ca0357dbd3158b16d59f4", "id": 91, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2700, "testcases": "[{'input': '3\\r\\n2 1 4\\r\\n', 'output': ['5']}, {'input': '4\\r\\n3 1 4 4\\r\\n', 'output': ['6']}, {'input': '4\\r\\n3 1 4 1\\r\\n', 'output': ['6']}, {'input': '5\\r\\n3 1 4 1 5\\r\\n', 'output': ['11']}, {'input': '11\\r\\n5000 5000 5000 5000 5000 5000 0 1 0 1 0\\r\\n', 'output': ['77835']}, {'input': '1\\r\\n0\\r\\n', 'output': ['0']}, {'input': '1\\r\\n1\\r\\n', 'output': ['0']}, {'input': '4\\r\\n0 1 1 0\\r\\n', 'output': ['0']}, {'input': '17\\r\\n1 9 2 8 4 5 7 3 8 4 6 2 8 4 1 0 5\\r\\n', 'output': ['87']}, {'input': '4\\r\\n57 918 827 953\\r\\n', 'output': ['7835']}, {'input': '51\\r\\n17 26 14 0 41 18 40 14 29 25 5 23 46 20 8 14 12 27 8 38 9 42 17 16 31 2 5 45 16 35 37 1 46 27 27 16 20 38 11 48 11 3 23 40 10 46 31 47 32 49 17\\r\\n', 'output': ['2366']}, {'input': '95\\r\\n28 12 46 4 24 37 23 19 7 22 29 34 10 10 9 11 9 17 26 23 8 42 12 31 33 39 25 17 1 41 30 21 11 26 14 43 19 24 32 14 3 42 29 47 40 16 27 43 33 28 6 25 40 4 0 21 5 36 2 3 35 38 49 41 32 34 0 27 30 44 45 18 2 6 1 50 13 22 20 20 7 5 16 18 13 15 15 36 39 37 31 35 48 38 8\\r\\n', 'output': ['4286']}, {'input': '49\\r\\n27 12 48 48 9 10 29 50 48 48 48 48 11 14 18 27 48 48 48 48 1 48 33 48 27 48 48 48 12 16 48 48 22 48 48 36 31 32 31 48 50 43 20 48 48 48 48 48 16\\r\\n', 'output': ['3484']}, {'input': '17\\r\\n12 12 5 1 3 12 4 2 12 12 12 12 6 12 7 12 0\\r\\n', 'output': ['179']}, {'input': '70\\r\\n50 0 50 0 0 0 0 0 0 50 50 50 50 0 50 50 0 50 50 0 0 0 50 50 0 0 50 0 50 0 50 0 0 50 0 0 0 0 50 50 50 50 0 0 0 0 0 0 0 0 50 0 50 50 0 50 0 0 0 0 50 0 50 0 0 50 0 50 0 0\\r\\n', 'output': ['3024']}, {'input': '295060\\r\\n38 23 17 20 28 38 38 28 32 7 20 0 14 31 41 16 46 39 41 8 40 14 33 36 11 2 40 8 19 36 13 29 4 22 4 12 17 38 50 35 10 40 21 7 21 2 27 34 30 40 22 37 20 5 12 42 33 16 22 45 14 26 16 27 7 24 48 1 15 40 0 27 47 25 29 42 23 23 16 17 20 1 6 38 12 0 19 34 20 43 44 8 47 23 17 5 38 40 43 46 12 29 41 10 2 4 23 22 24 45 42 39 11 19 0 4 7 1 0 13 42 3 42 49 43 39 22 36 47 17 0 35 39 15 42 16 6 20 17 43 17 4 4 30 14 45 3 7 47 12 10 41 16 45 11 5 13 37 49 36 44 24 38 3 48 26 5 10 26 32 4 35 13 40 9 42 42 40 36 22 ...', 'output': ['14408680']}, {'input': '68484\\r\\n45 1 16 1 50 16 29 39 50 46 28 5 11 28 19 5 41 23 15 30 20 7 18 6 30 27 35 31 33 13 3 1 12 11 46 28 42 17 13 5 43 36 21 45 1 38 39 36 29 10 42 6 26 37 26 3 36 0 45 27 2 9 42 33 45 39 21 19 48 14 10 14 20 12 47 38 29 32 37 17 50 10 29 6 5 48 37 48 24 26 36 7 4 26 12 42 40 35 32 22 17 35 9 47 11 13 10 10 4 13 32 23 30 26 22 20 20 0 49 38 33 16 46 50 21 40 2 15 13 26 16 3 22 47 37 35 23 34 22 40 22 12 42 13 39 25 46 25 47 12 1 43 25 1 32 25 26 18 8 50 27 45 45 9 42 25 12 27 48 6 15 2 14 41 3 7 6 0 29 2...', 'output': ['3345881']}, {'input': '1000000\\r\\n3722 452 4276 30 137 3139 4268 4696 1846 2667 4961 3074 4236 4685 4087 2731 3444 4322 4932 2801 3270 3 1629 4477 3073 4958 3274 760 978 4270 3836 1343 4543 1770 2995 2073 3085 1190 4630 635 3582 1483 1953 990 4430 1546 1787 916 3572 2781 189 1832 2275 3122 714 931 4259 2670 241 3550 387 1032 3317 3802 1423 160 1717 1783 3911 4966 1947 4002 1905 2708 3798 4609 2264 399 4637 705 19 1194 1688 1682 1543 3335 521 4343 3036 3527 398 3205 444 1392 1226 3770 3775 4669 3394 3907 3857 4711 3696 2203 395 222...', 'output': ['7607420444']}, {'input': '1000000\\r\\n522 4027 3242 3953 143 2524 1807 4590 574 4082 4545 59 1875 3013 2181 906 2440 892 727 1900 57 480 1275 1115 4406 2958 4632 3920 1901 1611 1826 3199 2393 1268 1140 1549 3367 3625 4123 4996 4480 3553 1483 1236 3965 4973 4534 4546 2637 1999 1073 929 4043 1343 1310 850 188 1005 4228 2198 388 1001 2549 4137 212 3001 3231 1987 3806 2926 4746 355 1552 431 635 3372 1820 396 1425 3998 1362 3213 2589 4102 2081 761 438 409 902 4512 1274 520 1789 3499 414 2074 542 1784 1706 2436 199 1508 4900 1968 527 1815 3...', 'output': ['7605550222']}, {'input': '1000000\\r\\n2976 2807 1350 3599 2725 1350 2266 3745 1350 1350 1607 4715 1803 1350 1350 2355 1350 1350 1350 1350 1350 1350 3814 1008 2634 4272 153 1350 2335 1350 1350 2952 2395 1187 2912 1392 1350 208 1350 1350 2711 1350 4116 195 130 3661 2624 1350 1350 3561 1350 1350 1350 1350 1350 1350 1350 3830 4407 1056 1350 1350 3003 1212 1350 2702 1469 1483 1025 3345 1350 4493 1350 1350 1350 3324 1350 1350 1693 2153 1350 4035 1772 1350 1350 1350 1350 1469 2034 3780 1920 1050 1350 1350 1350 1921 4707 3667 1350 1350 1887 1...', 'output': ['5780430738']}, {'input': '1000000\\r\\n935 1374 1374 1834 1431 4393 1520 1678 1374 917 4059 1374 1374 1374 4957 1374 808 1374 1374 1374 1374 122 1374 1374 1374 3800 396 1374 1374 1374 1374 878 1374 648 1374 1374 1374 1374 2763 845 1374 1374 1374 1122 1374 1374 1374 1374 1374 1374 1374 1374 4696 1915 3392 1374 3781 1374 3861 4681 1864 1374 1374 2556 1978 1374 4166 1374 4140 1374 1374 4675 1436 1374 3101 1374 1374 83 1374 1374 4251 143 1374 4060 2303 1374 341 1374 1374 1374 1374 1374 269 1374 4575 1925 1374 1374 1374 3286 1374 3996 1374 ...', 'output': ['5811523118']}, {'input': '1000000\\r\\noutput': ['1950296028']}, {'input': '1000000\\r\\n5000 0 5000 0 0 0 0 0 5000 0 0 5000 0 5000 0 0 0 5000 0 0 0 0 0 0 0 0 5000 0 0 5000 0 0 0 0 0 5000 0 0 5000 0 0 0 0 5000 5000 5000 0 0 5000 0 0 0 5000 5000 0 0 0 5000 5000 0 0 0 0 0 5000 0 5000 0 0 0 0 0 5000 5000 0 5000 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 5000 0 0 0 0 5000 0 0 0 0 0 5000 5000 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 5000 5000 0 0 0 0 0 5000 5000 5000 5000 0 0 0 0 0 0 0 5000 5000 0 0 0 0 0 0 5000 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 5000 0 0 0 0 5000 5000 0 5000 ...', 'output': ['3888512064']}, {'input': '1000000\\r\\noutput': ['7779561549']}, {'input': '1000000\\r\\noutput': ['3888449796']}, {'input': '1000000\\r\\noutput': ['1947260463']}, {'input': '1000000\\r\\noutput': ['0']}, {'input': '13\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 50\\r\\n', 'output': ['108']}, {'input': '45\\r\\n50 0 0 0 0 0 0 0 0 50 0 0 50 0 0 50 50 0 0 0 0 0 50 0 0 0 0 0 50 50 0 0 0 0 50 0 50 0 50 0 0 0 0 0 50\\r\\n', 'output': ['1296']}, {'input': '24\\r\\n50 0 50 50 50 0 50 50 0 50 50 50 50 50 0 50 50 0 50 50 50 50 50 50\\r\\n', 'output': ['540']}, {'input': '68\\r\\n50 50 50 50 50 50 50 50 0 0 50 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 50 50 50 50 0 50 50 0 0 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50\\r\\n', 'output': ['864']}, {'input': '75\\r\\n2597 1818 260 4655 4175 2874 2987 4569 2029 4314 444 2276 4937 1209 1797 4965 3526 275 3535 2198 4402 2144 1369 13 4453 1655 4456 711 3563 1650 3997 885 782 147 2426 974 2917 2100 4549 2465 3015 3485 3238 4086 171 3934 1903 133 2278 2573 688 551 872 459 2044 1401 2429 4933 3747 587 2781 4173 4651 4012 1407 2352 1461 566 2062 4599 1430 2269 3914 1820 4728\\r\\n', 'output': ['565559']}, {'input': '29\\r\\n8 27 14 21 6 20 2 11 3 19 10 16 0 25 18 4 23 17 15 26 28 1 13 5 9 22 12 7 24\\r\\n', 'output': ['692']}, {'input': '87\\r\\n1120 1120 1120 872 1120 731 3583 2815 4019 1291 4568 973 1120 1705 1120 822 203 1120 1120 1120 1120 4196 3166 4589 3030 1120 1120 1120 711 1120 500 1120 1120 3551 1120 1120 1120 1700 1120 1120 2319 4554 1120 1312 1120 1120 4176 1120 1120 3661 1120 1120 1120 1120 142 63 4125 1120 4698 3469 1829 567 1120 1120 1083 486 1120 1120 1120 1120 3763 1120 247 4496 454 1120 1120 1532 1120 4142 352 1120 359 2880 1120 1120 4494\\r\\n', 'output': ['438276']}, {'input': '27\\r\\n9 1144 1144 2 8 1144 12 0 1144 1144 7 3 1144 1144 11 10 1 1144 1144 5 1144 4 1144 1144 1144 1144 6\\r\\n', 'output': ['43222']}, {'input': '27\\r\\n0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 5000 0 0 0 5000\\r\\n', 'output': ['62268']}, {'input': '59\\r\\n0 0 0 5000 0 0 0 5000 5000 0 5000 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 5000 0 5000 0 5000 0 0 5000 0 5000 0 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 5000 0 0 0 5000\\r\\n', 'output': ['233505']}, {'input': '80\\r\\n0 0 0 0 5000 0 0 5000 5000 5000 0 5000 0 5000 5000 0 0 0 0 5000 5000 0 0 5000 0 5000 5000 5000 0 5000 0 5000 5000 5000 0 0 5000 0 0 5000 5000 0 0 5000 0 5000 5000 5000 0 0 5000 5000 5000 0 0 5000 0 0 5000 0 5000 5000 0 5000 0 5000 0 5000 0 5000 0 0 0 0 5000 5000 5000 0 0 0\\r\\n', 'output': ['591546']}, {'input': '20\\r\\n0 5000 5000 5000 5000 5000 0 5000 5000 0 5000 5000 5000 0 5000 5000 5000 5000 0 5000\\r\\n', 'output': ['77835']}, {'input': '78\\r\\n0 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 0 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 0 5000 0 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 0 0 0 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 5000 5000 0 5000\\r\\n', 'output': ['249072']}, {'input': '3241\\r\\n20 31 49 20 24 6 33 50 24 30 6 50 45 34 43 40 35 10 27 4 43 19 42 16 20 49 20 32 18 41 36 32 26 37 9 21 29 16 22 27 9 48 47 29 30 15 43 24 26 20 3 11 4 35 12 42 48 11 44 46 31 44 20 47 0 7 7 18 47 3 18 8 4 9 2 48 28 22 32 4 24 37 32 26 49 12 4 10 44 50 41 23 5 26 1 5 34 4 1 13 39 26 24 25 25 9 37 5 22 15 12 49 48 2 28 37 42 44 45 30 4 41 43 7 44 39 9 21 47 41 7 17 18 14 19 13 35 8 36 39 1 18 47 25 48 22 44 41 12 17 5 5 44 48 9 4 49 37 34 9 13 37 21 40 45 13 3 32 22 12 25 48 24 6 28 9 41 2 45 28 31 9 ...', 'output': ['160831']}, {'input': '3569\\r\\n11 34 14 46 1 12 5 13 5 46 35 8 36 28 7 16 16 47 29 45 27 36 47 22 2 33 5 38 23 34 24 48 15 27 20 14 31 8 18 15 44 10 47 28 17 36 34 48 10 48 29 35 31 15 19 17 26 42 15 45 21 16 9 31 30 32 50 12 48 37 46 2 10 32 36 8 38 25 20 3 26 7 35 33 38 6 16 30 42 38 47 16 20 23 36 30 20 24 38 5 1 16 40 31 14 6 10 27 2 4 32 1 12 6 43 43 34 32 19 9 47 34 22 37 9 50 33 18 45 42 20 19 49 20 49 25 3 41 36 46 41 21 21 26 43 50 37 23 11 34 32 3 32 42 35 6 18 45 47 16 19 33 2 34 35 44 11 47 13 24 10 31 13 37 48 42 22 3...', 'output': ['174332']}, {'input': '5489\\r\\n2 18 8 33 36 26 20 18 26 0 26 42 26 5 10 26 26 26 26 2 26 0 28 26 26 26 26 26 28 30 25 24 26 2 26 26 39 26 26 26 26 31 26 26 26 46 26 5 26 26 45 16 26 7 26 26 26 26 49 26 26 1 0 8 26 19 3 18 8 38 26 14 40 31 44 26 26 26 26 26 30 42 26 10 26 18 29 32 8 29 3 26 26 26 6 26 26 6 26 26 26 34 26 26 4 10 0 47 49 26 26 26 1 18 29 12 23 2 39 50 4 17 26 29 8 26 13 35 26 16 42 30 26 26 46 6 42 26 26 26 5 24 26 26 46 29 26 35 26 26 26 23 26 26 26 26 26 26 26 26 26 26 26 26 50 33 26 31 26 26 47 26 26 26 26 6 26 2...', 'output': ['260842']}, {'input': '5817\\r\\n41 18 41 41 25 41 41 39 1 6 41 40 41 41 41 41 0 41 41 41 41 17 41 41 41 39 41 12 41 0 41 36 40 41 41 41 41 11 41 27 13 41 29 41 22 41 41 33 14 19 18 41 41 32 41 5 41 2 34 13 47 41 41 41 41 45 18 41 43 42 41 12 9 41 41 41 35 10 41 41 41 41 44 41 41 30 41 7 25 41 46 42 41 12 41 41 48 13 23 41 17 41 44 41 1 41 24 3 41 41 41 26 41 41 6 7 41 0 10 2 16 29 41 34 41 39 36 41 3 41 41 36 2 24 35 38 36 37 41 41 38 8 42 36 0 35 37 2 41 28 41 38 36 13 41 41 16 41 31 43 1 38 19 23 41 41 41 17 9 41 25 41 45 19 10 4...', 'output': ['377254']}, {'input': '2871\\r\\noutput': ['37260']}, {'input': '2543\\r\\n0 0 0 0 50 50 0 0 0 0 0 0 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50 0 0 0 0 50 0 0 0 50 0 0 0 0 0 0 0 0 50 0 0 0 0 0 0 50 0 50 0 0 50 0 50 50 0 0 0 0 0 0 50 50 0 0 0 50 50 0 50 0 0 0 50 50 0 0 0 0 50 0 0 0 0 0 0 0 0 50 0 0 0 50 0 50 0 0 50 0 50 0 0 0 50 0 0 50 50 0 0 0 0 50 0 0 50 0 0 0 0 0 50 0 50 0 0 0 0 0 0 0 0 0 0 50 50 50 0 0 0 0 0 0 0 0 0 50 0 0 0 0 0 50 0 0 0 0 0 0 50 50 0 0 50 0 0 50 0 0 0 0 0 0 0 0 0 50 50 0 0 0 0 50 0 0 50 0 0 50 50 0 0 0 50 50 0 0 50 0 0 0 0 0 0 0 0 0 50 0 50 0 0 0 0 0 0 0 0 0 0 0...', 'output': ['66744']}, {'input': '6658\\r\\n50 50 50 0 0 50 0 0 50 0 0 50 50 0 50 50 0 0 50 50 0 50 50 50 50 0 50 0 0 50 50 0 50 0 0 0 0 0 50 0 0 0 50 0 50 50 50 50 0 50 0 50 50 50 50 50 50 50 0 0 50 0 0 50 0 50 0 0 50 50 50 0 0 0 0 0 50 0 0 0 50 0 0 0 50 0 50 0 50 50 50 50 0 0 50 50 0 50 50 0 0 0 50 50 0 0 50 50 0 0 0 50 0 0 50 50 50 50 50 0 0 0 0 50 50 50 50 0 0 0 0 0 0 0 50 0 50 50 50 0 0 0 50 0 50 50 50 50 50 0 0 50 50 0 0 0 0 50 0 50 0 50 50 0 0 0 50 50 0 50 50 50 0 50 0 0 0 0 0 50 50 50 0 50 0 0 0 0 0 0 50 50 0 0 50 50 0 50 50 0 50 50 0 ...', 'output': ['357156']}, {'input': '7782\\r\\n50 50 0 0 0 50 50 50 50 50 50 50 0 50 50 0 50 50 50 50 50 50 0 50 50 50 0 50 50 0 0 50 50 0 0 50 50 50 50 50 0 50 50 0 50 50 50 50 50 50 50 0 50 50 50 0 0 50 50 0 50 0 50 0 0 50 50 0 50 0 50 50 50 0 50 50 50 50 50 50 0 50 50 50 0 50 0 50 50 0 0 50 50 0 0 50 50 50 50 50 0 50 50 50 0 0 50 50 50 0 50 0 50 0 0 50 0 50 50 50 50 50 50 50 50 50 50 50 50 50 50 0 50 0 50 50 50 0 50 50 50 50 0 50 0 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 0 0 0 50 0 0 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 ...', 'output': ['202284']}, {'input': '8110\\r\\noutput': ['109080']}, {'input': '4463\\r\\n2612 1495 2859 1941 1446 2716 4690 4357 2841 4862 2243 3269 4454 995 3373 2249 4637 3365 2276 1330 3211 572 826 4368 2894 905 137 718 2081 3137 3718 4107 3420 1398 193 1255 504 325 879 3991 3579 4223 315 1854 418 1143 1822 4198 2589 1918 4633 1210 86 52 336 3709 2138 838 3815 866 595 3296 4810 699 234 2559 4523 349 3190 1770 267 987 489 2936 4000 907 4032 1122 293 1486 3054 4489 412 4844 3924 1750 1249 300 1593 2535 1028 1469 4747 4522 3000 1326 4214 2544 789 3632 2556 4190 2426 1185 2402 1880 3382 7...', 'output': ['33446396']}, {'input': '5587\\r\\n2623 467 1074 276 33 2358 829 2301 820 160 398 3363 4748 2942 4704 2516 1274 4663 634 4071 4825 143 2912 2888 2968 3925 3589 3793 3172 3541 3494 75 4914 342 2901 1959 45 4692 3580 1458 4080 3297 1947 2236 127 3280 3318 4024 1199 2520 4506 3727 4205 2762 4291 235 3535 2536 2526 2609 4920 2257 3986 2082 1471 2106 311 4015 3822 455 3335 2263 616 1187 464 390 1366 3124 4893 1719 4779 1197 2097 3292 1653 33 504 1596 1158 3852 3262 4875 428 854 1140 2848 3166 2498 1219 3806 556 4607 3368 421 1312 4387 4448...', 'output': ['38501618']}, {'input': '5915\\r\\n3291 884 4366 156 3584 3291 2124 2353 3291 3291 123 3989 805 3291 3291 3160 1562 3291 793 2707 3291 3291 3291 1504 3291 3291 891 3291 3291 3291 582 3291 3291 3291 3291 2333 715 4753 3291 3291 4111 4457 4577 3793 3291 3291 3291 1652 1916 3291 3882 251 912 4595 577 1650 3291 3291 3291 143 3506 1658 1944 3291 3291 3673 3291 3291 3291 646 3575 4523 3291 434 3291 1526 3291 3291 3853 4708 2083 3291 3291 2560 2032 825 3291 1770 3291 3291 2960 3291 1517 795 3291 3235 3601 2124 1798 3291 3291 1093 3291 3291 3...', 'output': ['51854645']}, {'input': '7039\\r\\n1790 834 1882 1790 1790 2803 2541 1790 3268 24 922 1790 1790 1790 2078 1790 939 1790 2717 1790 2404 1790 1790 1790 1480 1867 2257 3412 1790 1812 1790 1790 1790 3469 1790 2214 679 1919 3173 468 1790 1790 1790 2321 3045 1790 1790 1790 1329 1790 1790 1790 1790 1730 541 3140 1790 264 1604 2703 1790 1790 1790 2166 1790 1790 1790 1790 1790 949 1790 3427 1217 519 1790 1916 2692 1790 1199 2023 3315 1790 2503 1790 302 1790 1790 1790 1790 1790 2009 1790 1203 3040 1790 2836 1869 1790 1790 2613 1790 1790 2898 15...', 'output': ['37192065']}, {'input': '7716\\r\\n0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 5000 0 5000 0 0 5000 0 0 0 0 0 0 5000 5000 5000 0 0 0 5000 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 5000 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 0 5000 0 0 0 0 5000 5000 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 5000 0 0 0 5000 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...', 'output': ['15317928']}, {'input': '6592\\r\\n0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 5000 0 0 0 5000 5000 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 5000 0 0 0 5000 0 0 0 0 0 5000 5000 0 0 0 0 5000 0 0 5000 5000 0 0 5000 0 5000 0 0 0 5000 0 5000 0 0 0 0 0 5000 0 5000 0 0 5000 5000 0 0 0 0 0 0 0 0 5000 5000 5000 0 0 0 0 0 5000 0 0 0 0 5000 0 0 5000 0 0 0 5000 0 0 5000 5000 0 5000 0 0 0 0 5000 0 0 5000 0 0 0 0 5000 0 0 0 0 0 5000 5000 0 0 5000 0 0 0 5000 0 5000 0 0 5000 0 0 0 0 0 0 5000 0 0 0 5000 0 5000 5000 0 5000 5000 0 0 0 0 5000...', 'output': ['26993178']}, {'input': '6927\\r\\noutput': ['53675016']}, {'input': '8051\\r\\n5000 5000 5000 0 5000 5000 5000 5000 0 5000 5000 0 5000 0 5000 0 5000 5000 5000 0 5000 0 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 0 5000 0 5000 5000 5000 5000 5000 5000 0 0 5000 5000 0 5000 5000 0 5000 0 5000 5000 5000 0 5000 5000 5000 5000 0 5000 5000 0 5000 0 5000 5000 5000 0 0 5000 5000 5000 5000 5000 5000 5000 0 5000 0 5000 5000 0 0 0 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 0 5000 ...', 'output': ['31865649']}, {'input': '8379\\r\\noutput': ['16516587']}, {'input': '831909\\r\\n17 49 28 4 26 17 17 17 34 17 3 18 17 0 28 17 17 45 17 17 17 7 13 17 17 17 17 17 17 17 17 17 19 0 17 43 17 17 17 17 43 17 17 17 17 6 36 17 27 19 47 17 44 0 17 17 20 24 17 17 17 32 15 17 17 25 30 17 17 17 18 3 47 17 17 45 17 17 20 40 3 17 29 17 17 17 17 40 17 17 17 17 31 17 4 47 24 17 19 17 39 17 37 17 47 13 17 3 17 17 20 17 17 48 17 49 34 18 17 13 20 30 19 17 17 17 17 17 12 47 22 42 29 17 20 17 17 17 32 7 7 17 17 17 17 17 46 32 20 17 5 17 17 50 17 17 38 21 17 36 37 18 17 38 17 11 9 8 17 17 48 29 25 ...', 'output': ['31683596']}, {'input': '258037\\r\\n33 8 33 0 33 33 33 48 33 16 40 33 38 23 33 33 33 33 33 4 46 33 17 17 33 6 33 27 33 19 5 33 10 33 27 33 48 12 33 33 33 20 23 33 33 28 11 33 33 33 28 33 50 33 33 33 33 5 33 33 33 33 35 47 33 33 33 3 13 11 33 17 33 33 33 38 33 33 44 3 33 33 33 31 33 33 33 33 33 33 18 8 29 10 33 33 33 33 15 1 37 7 7 33 17 5 33 31 38 33 27 44 17 38 33 33 49 33 33 2 33 33 30 33 31 13 39 46 33 18 28 41 42 33 14 33 33 33 10 8 33 33 33 33 33 33 33 46 33 33 33 25 34 22 33 39 33 30 24 33 33 1 33 44 15 15 33 41 20 33 45 33 27 ...', 'output': ['14441842']}, {'input': '328921\\r\\noutput': ['4404996']}, {'input': '555497\\r\\noutput': ['14931972']}, {'input': '207904\\r\\n50 50 50 0 0 50 0 50 50 50 0 50 50 50 0 50 50 50 50 0 50 0 0 0 50 0 0 0 50 0 0 50 0 50 0 0 0 50 50 0 50 50 50 0 50 0 0 0 0 50 0 50 50 0 50 0 0 0 50 50 50 50 50 50 50 50 50 0 0 50 50 0 50 50 50 50 0 0 0 0 0 50 50 50 0 0 50 0 50 0 50 0 0 0 50 0 50 0 0 50 0 50 50 50 50 50 0 0 50 0 50 0 0 50 50 0 50 0 50 0 0 0 50 0 0 50 0 0 0 0 0 50 0 50 0 50 0 50 0 0 50 50 50 50 50 0 0 0 50 0 50 50 50 50 50 0 50 50 0 0 50 0 50 0 0 0 50 0 50 50 50 0 0 50 0 50 50 50 0 0 0 0 50 50 0 0 50 50 50 50 50 50 50 0 0 0 50 50 50 ...', 'output': ['11221740']}, {'input': '971328\\r\\n50 0 0 0 50 50 0 50 50 50 50 50 50 50 0 50 50 50 50 0 50 50 50 0 50 50 50 50 0 50 50 50 50 0 50 50 50 50 50 50 50 50 0 0 50 50 0 50 50 50 0 0 0 50 50 50 50 50 0 0 50 50 0 0 50 50 0 50 50 50 0 0 50 50 50 0 50 0 50 0 50 50 0 50 0 50 0 50 50 0 50 50 50 50 0 50 50 50 50 50 50 50 50 0 50 50 50 0 0 50 50 0 0 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 0 50 50 50 0 50 0 50 0 0 50 0 50 50 0 0 50 50 50 50 50 50 50 0 50 0 50 50 0 0 0 0 50 50 0 50 50 0 50 50 50 50 50 50 50 50 ...', 'output': ['26290440']}, {'input': '744752\\r\\noutput': ['10077264']}, {'input': '973217\\r\\n2233 4962 2835 1271 712 2124 3765 510 914 3364 2648 3399 744 3777 1516 739 3844 3879 261 863 2101 791 2276 1691 2145 1603 819 2340 415 3123 3260 1225 4746 4672 937 742 3927 25 2177 640 72 245 4053 3213 1322 3725 2842 883 216 4345 815 1534 633 4222 1677 2151 949 2691 2931 1897 1678 2599 4295 953 656 2864 2956 4134 4556 2839 3201 878 4447 270 1517 647 4010 3382 683 660 1393 785 3285 1115 1057 3672 3462 1434 882 122 505 3504 1946 1152 2997 3360 605 966 4034 4790 1344 1579 4482 2472 4484 3325 2852 543 ...', 'output': ['7404434821']}, {'input': '103937\\r\\n1662 2609 1161 2445 296 1285 3447 58 3521 1582 3524 1259 2360 3741 3130 4570 2215 3091 2032 3518 2969 3181 1414 1632 2101 4556 3642 1734 1388 4300 1631 182 1633 3970 1837 3967 1914 3162 915 2404 1208 4583 4334 279 747 2251 4671 4416 4752 3641 3811 1089 3213 740 1502 3880 2044 2766 777 3050 2475 4741 1121 2863 1065 4146 4872 2094 139 755 2780 4115 3442 2104 4030 1891 3037 2769 739 2274 3313 3098 2415 3909 4771 2761 1623 4084 3038 3130 4758 2667 3792 247 8 2846 3218 3485 3149 3845 470 4108 1031 484 3...', 'output': ['783928844']}, {'input': '520065\\r\\n756 4889 1279 756 756 756 756 4981 756 756 3514 3153 756 1559 563 3198 756 1696 756 1161 756 756 4853 1600 2623 3399 756 756 2736 756 756 756 756 756 4089 756 756 1407 3919 1546 1651 756 2430 756 756 756 756 756 756 4836 4582 1305 1304 763 756 4644 4890 756 3162 2611 3242 4455 1792 1882 756 2208 2014 4995 756 2947 2876 4738 756 756 1113 756 891 756 756 756 265 3619 756 756 756 4725 756 756 756 774 4476 4539 214 756 756 125 2452 3861 2363 2240 3842 756 4106 756 1183 756 756 756 756 756 1798 1694 793...', 'output': ['2532637708']}, {'input': '293489\\r\\n1084 4053 780 780 950 694 780 3823 780 780 2601 780 780 1469 3089 780 780 780 780 4707 780 2191 3268 2411 2892 171 3953 4307 340 1869 780 780 4373 4183 3523 780 2859 1053 780 1433 780 780 780 780 780 320 780 780 780 780 1948 2097 780 4234 780 780 780 4624 3124 780 780 3087 780 335 4642 780 780 2633 780 1447 780 780 4153 4532 780 780 3217 780 2340 2143 4089 2517 2085 780 2774 4590 3449 780 780 780 780 3715 4933 1026 2606 780 780 780 927 1997 3757 3730 780 780 780 780 780 4839 1369 780 602 780 1430 2...', 'output': ['1431772162']}, {'input': '546122\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 5000 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 5000 5000 5000 5000 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0...', 'output': ['1063817646']}, {'input': '772698\\r\\n0 5000 0 5000 0 0 0 0 0 5000 5000 0 0 0 0 5000 0 5000 0 0 0 5000 0 0 0 0 0 0 5000 5000 0 0 0 0 0 5000 0 0 0 0 0 5000 5000 0 5000 0 5000 0 0 0 0 5000 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 0 0 5000 0 5000 5000 0 0 0 5000 0 0 0 5000 0 5000 5000 0 0 0 5000 0 0 0 5000 0 0 5000 0 0 0 0 0 0 5000 0 5000 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 5000 5000 0 0 0 0 5000 0 0 0 5000 0 0 0 0 0 5000 0 0 5000 5000 0 5000 0 0 0 0 5000 0...', 'output': ['3012463572']}, {'input': '331312\\r\\n0 5000 0 5000 5000 5000 0 5000 5000 0 5000 5000 5000 0 0 0 0 0 5000 0 0 0 0 0 5000 5000 5000 5000 0 5000 0 5000 5000 0 5000 5000 5000 5000 0 0 5000 0 0 5000 0 5000 5000 0 0 0 5000 0 0 5000 0 5000 5000 0 0 0 5000 0 5000 5000 5000 0 0 5000 0 0 5000 5000 5000 5000 5000 0 5000 0 0 5000 0 5000 0 0 0 5000 5000 0 0 0 5000 5000 0 0 5000 0 5000 0 5000 0 0 0 0 0 5000 5000 5000 5000 0 5000 5000 0 0 5000 5000 0 0 5000 0 0 5000 0 0 5000 5000 5000 5000 5000 5000 0 0 5000 0 5000 0 0 0 0 0 0 5000 0 5000 5000 0 500...', 'output': ['2575933758']}, {'input': '104736\\r\\noutput': ['409458801']}, {'input': '868160\\r\\noutput': ['1683384246']}, {'input': '652655\\r\\n3334 3647 3955 1615 3535 4170 4440 916 3449 2474 1705 3926 4990 3602 1931 3593 1063 1637 3035 3592 4867 1381 2636 4148 2037 3053 2672 4117 3999 3410 3987 3809 1214 2506 4227 1035 3947 2980 4434 4606 1941 506 2430 4660 4704 2335 3672 659 3575 4897 2110 3191 1255 4677 4945 1118 1910 2386 928 630 4433 1229 3359 4875 1579 912 3160 2739 967 2438 4642 2192 4582 4089 4592 4265 2103 1404 4987 2649 601 4729 1050 1838 3316 964 4887 3663 1072 1898 921 2139 1880 4576 4828 3720 4421 1337 2919 4725 573 4563 714 ...', 'output': ['5470312646']}, {'input': '426079\\r\\n2838 696 521 2882 1816 4549 1788 4865 847 828 3444 3010 3490 4211 1926 2653 1094 2830 1268 3453 4906 532 2632 1988 2018 3161 2738 4149 3293 3844 3397 4545 2797 920 2672 2489 3556 1906 4249 662 2529 3906 1460 2151 1230 2527 1916 1727 1206 1011 1446 2586 4323 999 3917 3068 2849 2543 4319 3752 3258 2376 3342 4053 1804 1481 4853 2579 1163 2305 1735 4229 4686 2331 1992 3311 3851 1731 2098 2361 4830 941 3025 1566 3201 1692 2927 1751 4691 1394 3965 3014 1311 3986 1112 1710 3773 555 2357 2535 1687 1859 276...', 'output': ['3563797440']}, {'input': '199503\\r\\n819 819 4407 819 2634 1942 1127 819 1841 2488 819 819 774 4506 4800 1081 599 3091 819 819 4720 3629 819 819 2127 819 1115 819 819 819 819 819 819 819 2505 4087 2733 819 819 819 4835 2398 819 1588 819 2857 3465 819 4081 4347 3965 3529 2022 819 819 2856 819 819 1121 1828 819 819 2151 1524 2595 819 819 819 3629 3952 819 819 819 819 855 819 819 819 4197 819 2830 1026 2311 2606 819 819 4789 1104 2866 819 819 4562 2823 819 819 819 4389 819 3175 819 1115 819 819 819 819 819 3432 3480 819 3975 2524 3140 81...', 'output': ['1068954149']}, {'input': '615631\\r\\n3009 3663 3663 3663 2397 2553 3747 2143 2156 2962 3663 3826 4164 3663 3663 1309 1934 3663 4312 1760 1737 4296 3663 4739 3663 3663 3663 3663 4846 3663 3663 3663 986 2467 3663 3663 3663 3663 3663 2818 3663 3663 3663 3663 3663 3372 3663 3663 3663 4656 3663 3663 4912 3720 3663 3663 3663 4085 3663 3663 3663 4188 1082 4132 4775 1118 3663 3561 1043 3663 2132 4242 4604 3663 3663 3663 3663 3663 3663 3476 3663 2419 3349 3663 3663 3663 1120 3663 3663 3663 3663 2097 3663 4132 3663 4381 4692 3349 3663 3663 2768...', 'output': ['6032856551']}, {'input': '201235\\r\\n501 501 501 501 5000 501 501 501 501 5000 5000 501 501 501 501 501 5000 501 501 501 501 501 501 5000 501 5000 501 501 501 5000 501 501 501 501 501 5000 5000 501 501 501 501 501 501 501 501 501 501 501 501 5000 501 501 501 5000 5000 501 5000 501 5000 5000 501 501 501 501 501 5000 501 501 501 5000 501 501 501 5000 501 501 501 501 501 501 501 501 501 5000 501 501 501 501 501 5000 501 501 501 5000 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 5000 501 501 501 501 501 501 501 5...', 'output': ['422388015']}, {'input': '427811\\r\\n501 5000 501 501 501 501 501 5000 501 5000 501 501 501 501 5000 501 501 5000 501 501 501 5000 501 501 5000 501 5000 501 501 501 501 5000 501 501 501 501 5000 501 501 5000 501 501 501 501 5000 5000 5000 501 501 501 501 501 501 501 501 501 501 5000 501 501 5000 501 501 5000 501 5000 501 5000 501 5000 501 501 5000 501 501 501 5000 501 501 5000 501 5000 501 501 501 5000 5000 5000 501 501 501 5000 5000 5000 5000 501 501 501 501 501 501 5000 5000 501 501 501 5000 501 501 501 5000 501 501 501 5000 501 500...', 'output': ['1809031255']}, {'input': '462860\\r\\noutput': ['3916819805']}, {'input': '236284\\r\\noutput': ['1003533735']}, {'input': '999708\\r\\noutput': ['2120768420']}, {'input': '1000000\\r\\n48 8 20 45 21 24 8 0 42 18 16 5 49 40 18 22 40 43 41 47 30 15 17 36 25 9 24 29 8 33 29 41 22 5 15 40 21 18 13 49 39 4 38 3 24 36 27 39 9 5 0 38 40 16 42 27 24 10 12 50 41 19 3 19 34 12 42 18 2 7 17 22 11 20 25 48 18 16 25 49 19 34 21 37 4 46 16 21 9 22 1 48 28 27 36 3 49 41 43 48 36 39 8 14 38 0 18 11 37 31 23 12 14 16 38 41 47 14 45 29 34 44 32 13 17 26 44 12 46 50 37 39 40 49 30 11 22 43 19 50 32 27 30 20 28 10 24 2 17 34 12 37 36 29 26 37 21 48 4 11 31 7 30 46 15 6 0 44 47 40 24 10 33 48 33 48 ...', 'output': ['48889749']}, {'input': '1000000\\r\\n14 46 0 25 40 23 14 44 34 31 11 45 22 44 30 13 12 10 5 13 50 46 12 44 18 45 16 11 34 6 37 3 46 18 18 42 42 5 39 24 4 7 35 2 24 24 48 7 44 30 41 44 26 38 41 13 20 23 41 40 48 41 24 2 2 45 47 32 17 44 8 47 46 3 31 2 12 6 34 38 49 41 35 9 40 5 46 24 4 5 30 18 21 15 29 32 49 50 8 40 44 34 24 32 36 34 32 14 18 22 29 4 4 11 31 0 25 28 47 27 17 15 32 9 5 19 45 36 33 44 47 14 18 42 33 40 19 5 25 26 32 6 0 27 37 15 25 49 49 2 35 50 2 13 45 31 15 18 22 28 36 32 5 39 44 41 17 38 1 25 18 17 48 40 3 3 31 29 19...', 'output': ['48862349']}, {'input': '1000000\\r\\n2 27 42 2 2 2 2 4 17 47 2 45 17 2 2 2 2 14 2 42 2 5 15 37 4 5 37 40 2 2 14 17 48 2 2 2 2 37 2 2 46 8 2 45 24 47 29 35 2 2 15 2 2 12 2 34 2 2 43 2 2 23 19 49 2 42 2 3 2 2 2 2 0 5 2 2 2 37 2 2 2 2 3 2 29 2 36 22 50 2 2 43 2 2 2 34 14 1 10 2 19 33 40 3 2 50 21 41 35 13 0 18 18 2 2 2 2 29 21 2 7 2 2 36 8 2 2 2 38 21 30 30 12 2 38 41 2 42 2 16 2 2 43 38 2 42 2 2 2 14 2 2 2 8 15 2 2 5 31 49 41 2 2 29 2 2 2 32 14 2 18 2 2 23 2 2 2 2 2 41 32 2 2 29 2 2 2 21 2 2 2 2 2 24 25 13 2 2 32 2 17 2 2 11 2 21 2 29 ...', 'output': ['24924286']}, {'input': '1000000\\r\\n32 18 30 28 18 36 18 16 18 8 19 18 43 18 18 18 18 18 46 16 18 15 18 4 31 20 26 6 18 14 18 0 18 14 18 17 38 5 30 41 50 18 47 31 18 1 18 18 18 7 18 19 18 12 2 8 26 18 18 18 0 18 17 18 18 18 36 18 44 18 18 18 18 18 18 45 18 43 18 28 37 18 18 18 18 18 5 18 24 18 18 18 18 5 15 19 18 49 18 3 18 18 47 39 18 19 18 2 18 18 32 18 48 31 18 18 12 18 14 28 5 10 5 18 18 46 18 18 18 42 18 9 18 3 18 18 18 7 35 16 18 18 18 18 10 18 18 39 18 41 33 30 10 18 24 18 34 32 18 15 3 15 18 18 1 34 22 18 41 17 18 10 18 18 1...', 'output': ['39529186']}, {'input': '1000000\\r\\noutput': ['13477752']}, {'input': '1000000\\r\\n0 50 0 0 50 0 50 0 0 50 0 0 50 0 0 50 50 0 50 0 0 0 50 50 0 0 50 50 50 0 0 0 0 0 0 0 0 0 0 50 0 50 0 50 0 0 0 0 50 0 0 50 50 0 0 0 0 0 0 50 50 0 50 0 0 0 0 0 0 50 0 0 0 0 0 0 0 50 0 0 0 0 0 0 0 0 0 50 0 50 0 50 0 0 0 0 0 50 0 0 0 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50 0 50 0 50 50 0 0 0 0 50 50 0 0 0 0 50 0 0 0 0 0 0 0 0 0 0 0 0 0 50 0 0 0 0 0 0 50 0 0 0 50 50 0 0 50 0 50 0 0 0 0 0 50 0 0 0 0 0 0 50 0 0 50 50 0 0 50 0 0 0 0 0 50 0 0 50 0 50 50 0 0 0 50 50 50 0 50 50 0 0 50 0 0 0 50 0 0 50 0 0 0 0 0...', 'output': ['26977860']}, {'input': '1000000\\r\\n50 50 50 50 50 50 0 50 0 0 0 0 0 0 0 0 50 50 50 0 0 0 50 0 0 0 0 50 0 0 50 50 50 50 50 50 0 0 50 50 0 0 0 50 0 0 0 0 50 50 0 0 50 50 50 50 50 0 0 0 0 0 50 50 0 50 0 50 0 50 0 50 0 50 0 0 0 50 0 50 0 0 50 0 50 0 0 50 0 50 0 0 50 50 0 50 0 0 50 0 0 0 0 0 50 0 50 50 0 0 0 0 0 0 0 50 0 0 0 0 0 0 50 50 0 50 0 50 50 0 0 50 50 50 50 50 0 50 0 50 50 50 0 0 0 50 0 0 0 50 50 0 0 50 0 50 50 0 0 0 50 50 0 0 0 50 50 50 0 50 50 0 50 0 0 50 50 50 50 50 50 50 0 50 0 50 50 0 50 50 0 50 50 50 50 50 50 50 0 0 50 0 5...', 'output': ['53993952']}, {'input': '1000000\\r\\noutput': ['26987364']}, {'input': '1000000\\r\\noutput': ['13460904']}, {'input': '1000000\\r\\n4928 5000 4744 3545 3738 2132 1318 4951 2071 1952 2436 3340 2119 2695 4938 4493 4798 575 4969 3520 2191 2873 1960 4032 3857 4548 2212 3864 2948 3089 4829 1148 1656 4725 1963 2766 1319 1971 2937 2979 3194 1866 4461 1519 3195 704 2802 4208 4242 937 1797 2331 3923 801 1677 1718 3754 770 1402 1801 3480 1839 3134 1069 4671 4776 3159 1728 2554 2091 751 626 2234 1416 640 610 1634 4110 4476 1075 2240 3216 3739 4099 4694 925 2824 3432 4434 4320 3411 4658 1378 2193 4301 2762 3768 3874 3815 3882 2439 2911 45...', 'output': ['8384253798']}, {'input': '1000000\\r\\n4637 1302 2880 1973 4301 4845 2403 2820 3359 1121 1066 3885 1101 1911 2875 865 3402 3883 1943 2415 4562 693 1895 2528 2203 2858 3316 3183 3462 3194 1180 667 3088 1856 2257 684 4941 599 1784 4124 2997 729 4662 2207 1177 4995 2535 1128 2688 4949 989 2888 3918 2059 2028 1444 2432 4254 2685 1889 2049 2391 2534 2133 3021 3290 4710 3200 1581 1147 4271 2676 2283 598 1333 1733 3408 1993 2692 2252 4442 1469 3112 960 2265 1455 4820 2984 4120 4641 1432 3231 3896 960 1817 1911 3379 1879 1417 2363 4263 1442 30...', 'output': ['8374983176']}, {'input': '1000000\\r\\n1616 3742 1616 1616 1616 1616 1787 4057 1616 710 4642 3132 1616 1616 1280 1616 3392 1680 1616 1202 2794 1616 714 1036 1616 666 1616 1616 2066 1616 4643 1616 1616 2370 1393 4716 1616 1616 4295 960 2721 3010 1616 1616 1616 3783 1616 3737 2293 1921 2932 3666 4864 1616 1616 3161 1933 1616 2214 4578 1616 1616 2040 2520 1616 1616 4641 1616 1150 1616 1616 896 3297 1616 1616 1185 4532 1616 2888 1616 1616 1616 1246 1616 1616 1616 1616 4534 1616 1616 1753 1174 1616 940 1616 1616 1616 1616 3180 1616 737 2174...', 'output': ['6573578424']}, {'input': '1000000\\r\\n2691 1471 1769 1769 1769 2426 1769 1769 1769 1603 1769 1769 1769 1769 510 1567 1524 1666 1769 1769 1153 1769 1769 1769 2414 1769 1074 1769 3210 2644 1201 3796 1766 1769 1644 577 1769 1918 1855 1769 3024 1769 1769 2995 1769 1769 4565 1769 3576 864 1769 1769 3337 1769 1769 1945 4876 2367 704 1769 1769 3704 1769 3168 1769 2401 1769 2844 1769 4175 2420 4683 1769 1769 1769 3560 1769 1769 1769 1769 1769 2808 1769 4057 4544 1769 1769 2697 2150 1737 2724 1769 3524 1769 1769 3502 1769 1769 1769 1769 1620 2...', 'output': ['6808525559']}, {'input': '1000000\\r\\noutput': ['2113787080']}, {'input': '1000000\\r\\noutput': ['4241621565']}, {'input': '1000000\\r\\noutput': ['8464722245']}, {'input': '1000000\\r\\noutput': ['4229505890']}, {'input': '1000000\\r\\noutput': ['2122852655']}, {'input': '1000000\\r\\n3491 3862 4899 1602 3307 2481 2146 1000 2479 2072 1534 2587 3924 4181 4835 2449 1976 4441 2217 3227 3297 2989 1754 1498 3742 1437 3766 3234 1072 3972 2514 1055 3883 4655 3452 1827 1874 1349 3202 2450 2946 3550 3879 3214 3123 2445 3893 1771 4218 3032 1325 4404 1421 1531 3754 1412 3178 4801 3290 4438 3677 4018 3175 1981 3353 3939 1512 3645 3759 3630 3769 3848 2031 1011 1771 1278 3021 2768 4761 1697 3561 4706 1464 3090 4827 1058 1120 3602 1808 2849 2244 4170 1928 3584 4395 2628 3674 1812 4074 1723 35...', 'output': ['8999391475']}, {'input': '1000000\\r\\n4525 1819 4273 3463 1648 2372 4978 2585 2374 2402 3570 2924 1135 1647 4411 924 1539 2671 1396 1592 2253 3152 2052 4858 4538 2952 1123 1441 2052 2404 2073 4052 4954 1331 4834 2353 1980 3243 4991 1389 2920 2050 1337 3188 2953 2753 2451 2119 3315 2174 3910 3759 3410 4935 2996 1728 1229 1070 1719 3715 2233 1699 3794 1656 4410 4356 3740 4240 4249 3772 2740 3670 3711 4863 1584 4255 1217 3831 4379 2230 2132 1625 3418 1469 4672 4632 1416 979 1173 3364 1419 1460 3118 3410 1250 1531 4916 3057 4448 4483 3900...', 'output': ['9003221879']}, {'input': '1000000\\r\\n1442 3254 3079 1274 4816 1653 3079 3079 3079 1396 4595 2894 3079 3079 1060 3079 4646 3079 3079 3567 3079 3079 3079 1111 2788 3079 913 3020 1455 3026 3079 3079 4799 3079 1018 3079 3079 3079 3079 2703 4596 3079 3079 3079 3079 3790 4649 3079 3079 3803 1425 3079 1956 3886 3861 3663 3079 3121 2774 2577 4524 3079 3079 1760 3079 3079 3545 3079 3079 3079 1009 3079 3775 4972 4066 3079 1602 3079 1288 3079 3079 3079 3079 3079 3079 1482 3079 3079 3079 3079 3079 2153 3079 1233 4758 1729 3079 1361 2370 3522 119...', 'output': ['9192195816']}, {'input': '1000000\\r\\n3085 4754 3064 4924 4924 3593 3916 3300 4924 2820 3819 4924 2825 2127 4924 3321 3323 4924 2612 4924 4924 4924 4924 4924 2572 4357 4924 4924 1690 4012 3790 4924 4924 4924 4924 2601 1049 4032 3940 4651 3530 4924 2765 2847 3710 2400 3405 2217 4924 4924 4546 1228 4924 4924 2806 4900 1510 4924 4924 4924 4924 3746 2527 4475 3412 4924 4924 4133 4924 4924 4924 3474 4924 4924 1006 4924 4924 1683 2651 2822 2382 2521 3814 4924 2554 4924 4215 3787 4685 2481 3981 4924 4924 3234 4112 4924 1758 4924 4924 4924 37...', 'output': ['12154389312']}, {'input': '4\\r\\n13 14 15 16\\r\\n', 'output': ['76']}, {'input': '3\\r\\n1 5 6\\r\\n', 'output': ['10']}, {'input': '3\\r\\n15 13 2\\r\\n', 'output': ['42']}, {'input': '3\\r\\n1 8 9\\r\\n', 'output': ['20']}, {'input': '3\\r\\n2 5 6\\r\\n', 'output': ['11']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main (String[] args) throws IOException{\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader inputReader = new InputReader(inputStream);\n        OutputWriter outputWriter = new OutputWriter(outputStream);\n        Task task = new Task();\n        task.solve();\n        outputWriter.close();\n    }\n\n    private static class Task{\n        int n;\n        int min = 1;\n        int max = 1_000_000;\n        int cnt = 0;\n        int[] dp = new int[1_000_001];\n        int[] k = new int[1_000_001];\n        int[] c = new int[1_000_001];\n        int result = 0;\n        boolean[] isprime = new boolean[1_000_001];\n\n        public void solve() throws IOException{\n            dp[min] = 1;\n            isprime[1] = false;\n            for(int i = 2; i <= 1_000_000; i++){\n                isprime[i] = true;\n            }\n            for(int i = 2; i <= 1_000_000 / 2; i++){\n                for(int j = 2; j * i <= 1_000_000; j++){\n                    isprime[i * j] = false;\n                }\n            }\n            for(int i = 3; i <= 1_000_000; i++){\n                if(isprime[i]){\n                    k[i] = 0;\n                    for(int j = i - 1; j > 0; j--){\n                        if(i % j == 0){\n                            k[i]++;\n                            i /= j;\n                        }\n                    }\n                    k[i]++;\n                }\n                k[i] += k[i-1];\n            }\n            n = inputReader.nextInt();\n            for(int i = 0; i < n; i++){\n                cnt = inputReader.nextInt();\n                dp[max] += cnt;\n            }\n            for(int i = 1; i <= 1_000_000; i++){\n                if(dp[i] < dp[min]) min = i;\n            }\n            result = 0;\n            while(max >= min){\n                result += dp[max];\n                max--;\n            }\n            outputWriter.append(result);\n        }\n\n    }\n\n    private static class InputReader{\n        final private InputStream in = System.in;\n        private byte[] buffer = new byte[1024];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() throws IOException {\n            if (ptr < buflen){\n                return true;\n            }else{\n                ptr = 0;\n                try {\n                    buflen = in.read(buffer);\n                } catch (IOException e){\n                    e.printStackTrace();\n                }\n                if (buflen <= 0){\n                    return false;\n                }\n            }\n            return true;\n        }\n        private int readByte() throws IOException { if (hasNextByte()) return buffer[ptr++]; else throw new IOException(); }\n        private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n        private boolean hasNext() throws IOException { while(hasNextByte() &&!isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\n        private boolean hasNextInt() throws IOException { if (!hasNext()) return false; int b = readByte(); while(isPrintableChar(b) && b >= '0' && b <= '9') b = readByte(); if (!isPrintableChar(b)) return true; ptr--; return false;}\n        private int nextInt() throws IOException { if (!hasNextInt()) throw new NumberFormatException(); int sgn = 1; long res = 0; int b = readByte(); if (b == '-') {sgn = -"}
{"src_uid": "40002052843ca0357dbd3158b16d59f4", "id": 91, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2700, "testcases": "[{'input': '3\\r\\n2 1 4\\r\\n', 'output': ['5']}, {'input': '4\\r\\n3 1 4 4\\r\\n', 'output': ['6']}, {'input': '4\\r\\n3 1 4 1\\r\\n', 'output': ['6']}, {'input': '5\\r\\n3 1 4 1 5\\r\\n', 'output': ['11']}, {'input': '11\\r\\n5000 5000 5000 5000 5000 5000 0 1 0 1 0\\r\\n', 'output': ['77835']}, {'input': '1\\r\\n0\\r\\n', 'output': ['0']}, {'input': '1\\r\\n1\\r\\n', 'output': ['0']}, {'input': '4\\r\\n0 1 1 0\\r\\n', 'output': ['0']}, {'input': '17\\r\\n1 9 2 8 4 5 7 3 8 4 6 2 8 4 1 0 5\\r\\n', 'output': ['87']}, {'input': '4\\r\\n57 918 827 953\\r\\n', 'output': ['7835']}, {'input': '51\\r\\n17 26 14 0 41 18 40 14 29 25 5 23 46 20 8 14 12 27 8 38 9 42 17 16 31 2 5 45 16 35 37 1 46 27 27 16 20 38 11 48 11 3 23 40 10 46 31 47 32 49 17\\r\\n', 'output': ['2366']}, {'input': '95\\r\\n28 12 46 4 24 37 23 19 7 22 29 34 10 10 9 11 9 17 26 23 8 42 12 31 33 39 25 17 1 41 30 21 11 26 14 43 19 24 32 14 3 42 29 47 40 16 27 43 33 28 6 25 40 4 0 21 5 36 2 3 35 38 49 41 32 34 0 27 30 44 45 18 2 6 1 50 13 22 20 20 7 5 16 18 13 15 15 36 39 37 31 35 48 38 8\\r\\n', 'output': ['4286']}, {'input': '49\\r\\n27 12 48 48 9 10 29 50 48 48 48 48 11 14 18 27 48 48 48 48 1 48 33 48 27 48 48 48 12 16 48 48 22 48 48 36 31 32 31 48 50 43 20 48 48 48 48 48 16\\r\\n', 'output': ['3484']}, {'input': '17\\r\\n12 12 5 1 3 12 4 2 12 12 12 12 6 12 7 12 0\\r\\n', 'output': ['179']}, {'input': '70\\r\\n50 0 50 0 0 0 0 0 0 50 50 50 50 0 50 50 0 50 50 0 0 0 50 50 0 0 50 0 50 0 50 0 0 50 0 0 0 0 50 50 50 50 0 0 0 0 0 0 0 0 50 0 50 50 0 50 0 0 0 0 50 0 50 0 0 50 0 50 0 0\\r\\n', 'output': ['3024']}, {'input': '295060\\r\\n38 23 17 20 28 38 38 28 32 7 20 0 14 31 41 16 46 39 41 8 40 14 33 36 11 2 40 8 19 36 13 29 4 22 4 12 17 38 50 35 10 40 21 7 21 2 27 34 30 40 22 37 20 5 12 42 33 16 22 45 14 26 16 27 7 24 48 1 15 40 0 27 47 25 29 42 23 23 16 17 20 1 6 38 12 0 19 34 20 43 44 8 47 23 17 5 38 40 43 46 12 29 41 10 2 4 23 22 24 45 42 39 11 19 0 4 7 1 0 13 42 3 42 49 43 39 22 36 47 17 0 35 39 15 42 16 6 20 17 43 17 4 4 30 14 45 3 7 47 12 10 41 16 45 11 5 13 37 49 36 44 24 38 3 48 26 5 10 26 32 4 35 13 40 9 42 42 40 36 22 ...', 'output': ['14408680']}, {'input': '68484\\r\\n45 1 16 1 50 16 29 39 50 46 28 5 11 28 19 5 41 23 15 30 20 7 18 6 30 27 35 31 33 13 3 1 12 11 46 28 42 17 13 5 43 36 21 45 1 38 39 36 29 10 42 6 26 37 26 3 36 0 45 27 2 9 42 33 45 39 21 19 48 14 10 14 20 12 47 38 29 32 37 17 50 10 29 6 5 48 37 48 24 26 36 7 4 26 12 42 40 35 32 22 17 35 9 47 11 13 10 10 4 13 32 23 30 26 22 20 20 0 49 38 33 16 46 50 21 40 2 15 13 26 16 3 22 47 37 35 23 34 22 40 22 12 42 13 39 25 46 25 47 12 1 43 25 1 32 25 26 18 8 50 27 45 45 9 42 25 12 27 48 6 15 2 14 41 3 7 6 0 29 2...', 'output': ['3345881']}, {'input': '1000000\\r\\n3722 452 4276 30 137 3139 4268 4696 1846 2667 4961 3074 4236 4685 4087 2731 3444 4322 4932 2801 3270 3 1629 4477 3073 4958 3274 760 978 4270 3836 1343 4543 1770 2995 2073 3085 1190 4630 635 3582 1483 1953 990 4430 1546 1787 916 3572 2781 189 1832 2275 3122 714 931 4259 2670 241 3550 387 1032 3317 3802 1423 160 1717 1783 3911 4966 1947 4002 1905 2708 3798 4609 2264 399 4637 705 19 1194 1688 1682 1543 3335 521 4343 3036 3527 398 3205 444 1392 1226 3770 3775 4669 3394 3907 3857 4711 3696 2203 395 222...', 'output': ['7607420444']}, {'input': '1000000\\r\\n522 4027 3242 3953 143 2524 1807 4590 574 4082 4545 59 1875 3013 2181 906 2440 892 727 1900 57 480 1275 1115 4406 2958 4632 3920 1901 1611 1826 3199 2393 1268 1140 1549 3367 3625 4123 4996 4480 3553 1483 1236 3965 4973 4534 4546 2637 1999 1073 929 4043 1343 1310 850 188 1005 4228 2198 388 1001 2549 4137 212 3001 3231 1987 3806 2926 4746 355 1552 431 635 3372 1820 396 1425 3998 1362 3213 2589 4102 2081 761 438 409 902 4512 1274 520 1789 3499 414 2074 542 1784 1706 2436 199 1508 4900 1968 527 1815 3...', 'output': ['7605550222']}, {'input': '1000000\\r\\n2976 2807 1350 3599 2725 1350 2266 3745 1350 1350 1607 4715 1803 1350 1350 2355 1350 1350 1350 1350 1350 1350 3814 1008 2634 4272 153 1350 2335 1350 1350 2952 2395 1187 2912 1392 1350 208 1350 1350 2711 1350 4116 195 130 3661 2624 1350 1350 3561 1350 1350 1350 1350 1350 1350 1350 3830 4407 1056 1350 1350 3003 1212 1350 2702 1469 1483 1025 3345 1350 4493 1350 1350 1350 3324 1350 1350 1693 2153 1350 4035 1772 1350 1350 1350 1350 1469 2034 3780 1920 1050 1350 1350 1350 1921 4707 3667 1350 1350 1887 1...', 'output': ['5780430738']}, {'input': '1000000\\r\\n935 1374 1374 1834 1431 4393 1520 1678 1374 917 4059 1374 1374 1374 4957 1374 808 1374 1374 1374 1374 122 1374 1374 1374 3800 396 1374 1374 1374 1374 878 1374 648 1374 1374 1374 1374 2763 845 1374 1374 1374 1122 1374 1374 1374 1374 1374 1374 1374 1374 4696 1915 3392 1374 3781 1374 3861 4681 1864 1374 1374 2556 1978 1374 4166 1374 4140 1374 1374 4675 1436 1374 3101 1374 1374 83 1374 1374 4251 143 1374 4060 2303 1374 341 1374 1374 1374 1374 1374 269 1374 4575 1925 1374 1374 1374 3286 1374 3996 1374 ...', 'output': ['5811523118']}, {'input': '1000000\\r\\n0 0 0 0 0 0 0 0 0 0 5000 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 5000 0 0 0 0 0 0 0 0 0 0 5000 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 5000 5000 0 0 5000 0 5000 0 0 5000 0 0 0 0 5000 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 5000 0 0 0 0 0 0 0 0 0 0 0 5000 5000 0 0 0 0 0 5000 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 5000 0 0 0 0 0 0 0 5000 0 0...', 'output': ['1950296028']}, {'input': '1000000\\r\\n5000 0 5000 0 0 0 0 0 5000 0 0 5000 0 5000 0 0 0 5000 0 0 0 0 0 0 0 0 5000 0 0 5000 0 0 0 0 0 5000 0 0 5000 0 0 0 0 5000 5000 5000 0 0 5000 0 0 0 5000 5000 0 0 0 5000 5000 0 0 0 0 0 5000 0 5000 0 0 0 0 0 5000 5000 0 5000 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 5000 0 0 0 0 5000 0 0 0 0 0 5000 5000 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 5000 5000 0 0 0 0 0 5000 5000 5000 5000 0 0 0 0 0 0 0 5000 5000 0 0 0 0 0 0 5000 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 5000 0 0 0 0 5000 5000 0 5000 ...', 'output': ['3888512064']}, {'input': '1000000\\r\\noutput': ['7779561549']}, {'input': '1000000\\r\\n5000 5000 5000 0 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 0 0 0 5000 0 5000 5000 0 5000 5000 5000 5000 5000 0 0 5000 0 5000 5000 0 0 5000 5000 0 0 0 5000 5000 0 0 5000 5000 0 5000 5000 0 5000 5000 0 5000 5000 0 5000 0 5000 5000 0 5000 5000 5000 0 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 0 5000 5000 0 5000 5000 0 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 0 5000 0 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 5000 0 0 5000 ...', 'output': ['3888449796']}, {'input': '1000000\\r\\noutput': ['1947260463']}, {'input': '1000000\\r\\noutput': ['0']}, {'input': '13\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 50\\r\\n', 'output': ['108']}, {'input': '45\\r\\n50 0 0 0 0 0 0 0 0 50 0 0 50 0 0 50 50 0 0 0 0 0 50 0 0 0 0 0 50 50 0 0 0 0 50 0 50 0 50 0 0 0 0 0 50\\r\\n', 'output': ['1296']}, {'input': '24\\r\\n50 0 50 50 50 0 50 50 0 50 50 50 50 50 0 50 50 0 50 50 50 50 50 50\\r\\n', 'output': ['540']}, {'input': '68\\r\\n50 50 50 50 50 50 50 50 0 0 50 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 50 50 50 50 0 50 50 0 0 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50\\r\\n', 'output': ['864']}, {'input': '75\\r\\n2597 1818 260 4655 4175 2874 2987 4569 2029 4314 444 2276 4937 1209 1797 4965 3526 275 3535 2198 4402 2144 1369 13 4453 1655 4456 711 3563 1650 3997 885 782 147 2426 974 2917 2100 4549 2465 3015 3485 3238 4086 171 3934 1903 133 2278 2573 688 551 872 459 2044 1401 2429 4933 3747 587 2781 4173 4651 4012 1407 2352 1461 566 2062 4599 1430 2269 3914 1820 4728\\r\\n', 'output': ['565559']}, {'input': '29\\r\\n8 27 14 21 6 20 2 11 3 19 10 16 0 25 18 4 23 17 15 26 28 1 13 5 9 22 12 7 24\\r\\n', 'output': ['692']}, {'input': '87\\r\\n1120 1120 1120 872 1120 731 3583 2815 4019 1291 4568 973 1120 1705 1120 822 203 1120 1120 1120 1120 4196 3166 4589 3030 1120 1120 1120 711 1120 500 1120 1120 3551 1120 1120 1120 1700 1120 1120 2319 4554 1120 1312 1120 1120 4176 1120 1120 3661 1120 1120 1120 1120 142 63 4125 1120 4698 3469 1829 567 1120 1120 1083 486 1120 1120 1120 1120 3763 1120 247 4496 454 1120 1120 1532 1120 4142 352 1120 359 2880 1120 1120 4494\\r\\n', 'output': ['438276']}, {'input': '27\\r\\n9 1144 1144 2 8 1144 12 0 1144 1144 7 3 1144 1144 11 10 1 1144 1144 5 1144 4 1144 1144 1144 1144 6\\r\\n', 'output': ['43222']}, {'input': '27\\r\\n0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 5000 0 0 0 5000\\r\\n', 'output': ['62268']}, {'input': '59\\r\\n0 0 0 5000 0 0 0 5000 5000 0 5000 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 5000 0 5000 0 5000 0 0 5000 0 5000 0 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 5000 0 0 0 5000\\r\\n', 'output': ['233505']}, {'input': '80\\r\\n0 0 0 0 5000 0 0 5000 5000 5000 0 5000 0 5000 5000 0 0 0 0 5000 5000 0 0 5000 0 5000 5000 5000 0 5000 0 5000 5000 5000 0 0 5000 0 0 5000 5000 0 0 5000 0 5000 5000 5000 0 0 5000 5000 5000 0 0 5000 0 0 5000 0 5000 5000 0 5000 0 5000 0 5000 0 5000 0 0 0 0 5000 5000 5000 0 0 0\\r\\n', 'output': ['591546']}, {'input': '20\\r\\n0 5000 5000 5000 5000 5000 0 5000 5000 0 5000 5000 5000 0 5000 5000 5000 5000 0 5000\\r\\n', 'output': ['77835']}, {'input': '78\\r\\n0 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 0 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 0 5000 0 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 0 0 0 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 5000 5000 0 5000\\r\\n', 'output': ['249072']}, {'input': '3241\\r\\n20 31 49 20 24 6 33 50 24 30 6 50 45 34 43 40 35 10 27 4 43 19 42 16 20 49 20 32 18 41 36 32 26 37 9 21 29 16 22 27 9 48 47 29 30 15 43 24 26 20 3 11 4 35 12 42 48 11 44 46 31 44 20 47 0 7 7 18 47 3 18 8 4 9 2 48 28 22 32 4 24 37 32 26 49 12 4 10 44 50 41 23 5 26 1 5 34 4 1 13 39 26 24 25 25 9 37 5 22 15 12 49 48 2 28 37 42 44 45 30 4 41 43 7 44 39 9 21 47 41 7 17 18 14 19 13 35 8 36 39 1 18 47 25 48 22 44 41 12 17 5 5 44 48 9 4 49 37 34 9 13 37 21 40 45 13 3 32 22 12 25 48 24 6 28 9 41 2 45 28 31 9 ...', 'output': ['160831']}, {'input': '3569\\r\\n11 34 14 46 1 12 5 13 5 46 35 8 36 28 7 16 16 47 29 45 27 36 47 22 2 33 5 38 23 34 24 48 15 27 20 14 31 8 18 15 44 10 47 28 17 36 34 48 10 48 29 35 31 15 19 17 26 42 15 45 21 16 9 31 30 32 50 12 48 37 46 2 10 32 36 8 38 25 20 3 26 7 35 33 38 6 16 30 42 38 47 16 20 23 36 30 20 24 38 5 1 16 40 31 14 6 10 27 2 4 32 1 12 6 43 43 34 32 19 9 47 34 22 37 9 50 33 18 45 42 20 19 49 20 49 25 3 41 36 46 41 21 21 26 43 50 37 23 11 34 32 3 32 42 35 6 18 45 47 16 19 33 2 34 35 44 11 47 13 24 10 31 13 37 48 42 22 3...', 'output': ['174332']}, {'input': '5489\\r\\n2 18 8 33 36 26 20 18 26 0 26 42 26 5 10 26 26 26 26 2 26 0 28 26 26 26 26 26 28 30 25 24 26 2 26 26 39 26 26 26 26 31 26 26 26 46 26 5 26 26 45 16 26 7 26 26 26 26 49 26 26 1 0 8 26 19 3 18 8 38 26 14 40 31 44 26 26 26 26 26 30 42 26 10 26 18 29 32 8 29 3 26 26 26 6 26 26 6 26 26 26 34 26 26 4 10 0 47 49 26 26 26 1 18 29 12 23 2 39 50 4 17 26 29 8 26 13 35 26 16 42 30 26 26 46 6 42 26 26 26 5 24 26 26 46 29 26 35 26 26 26 23 26 26 26 26 26 26 26 26 26 26 26 26 50 33 26 31 26 26 47 26 26 26 26 6 26 2...', 'output': ['260842']}, {'input': '5817\\r\\n41 18 41 41 25 41 41 39 1 6 41 40 41 41 41 41 0 41 41 41 41 17 41 41 41 39 41 12 41 0 41 36 40 41 41 41 41 11 41 27 13 41 29 41 22 41 41 33 14 19 18 41 41 32 41 5 41 2 34 13 47 41 41 41 41 45 18 41 43 42 41 12 9 41 41 41 35 10 41 41 41 41 44 41 41 30 41 7 25 41 46 42 41 12 41 41 48 13 23 41 17 41 44 41 1 41 24 3 41 41 41 26 41 41 6 7 41 0 10 2 16 29 41 34 41 39 36 41 3 41 41 36 2 24 35 38 36 37 41 41 38 8 42 36 0 35 37 2 41 28 41 38 36 13 41 41 16 41 31 43 1 38 19 23 41 41 41 17 9 41 25 41 45 19 10 4...', 'output': ['377254']}, {'input': '2871\\r\\noutput': ['37260']}, {'input': '2543\\r\\n0 0 0 0 50 50 0 0 0 0 0 0 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50 0 0 0 0 50 0 0 0 50 0 0 0 0 0 0 0 0 50 0 0 0 0 0 0 50 0 50 0 0 50 0 50 50 0 0 0 0 0 0 50 50 0 0 0 50 50 0 50 0 0 0 50 50 0 0 0 0 50 0 0 0 0 0 0 0 0 50 0 0 0 50 0 50 0 0 50 0 50 0 0 0 50 0 0 50 50 0 0 0 0 50 0 0 50 0 0 0 0 0 50 0 50 0 0 0 0 0 0 0 0 0 0 50 50 50 0 0 0 0 0 0 0 0 0 50 0 0 0 0 0 50 0 0 0 0 0 0 50 50 0 0 50 0 0 50 0 0 0 0 0 0 0 0 0 50 50 0 0 0 0 50 0 0 50 0 0 50 50 0 0 0 50 50 0 0 50 0 0 0 0 0 0 0 0 0 50 0 50 0 0 0 0 0 0 0 0 0 0 0...', 'output': ['66744']}, {'input': '6658\\r\\n50 50 50 0 0 50 0 0 50 0 0 50 50 0 50 50 0 0 50 50 0 50 50 50 50 0 50 0 0 50 50 0 50 0 0 0 0 0 50 0 0 0 50 0 50 50 50 50 0 50 0 50 50 50 50 50 50 50 0 0 50 0 0 50 0 50 0 0 50 50 50 0 0 0 0 0 50 0 0 0 50 0 0 0 50 0 50 0 50 50 50 50 0 0 50 50 0 50 50 0 0 0 50 50 0 0 50 50 0 0 0 50 0 0 50 50 50 50 50 0 0 0 0 50 50 50 50 0 0 0 0 0 0 0 50 0 50 50 50 0 0 0 50 0 50 50 50 50 50 0 0 50 50 0 0 0 0 50 0 50 0 50 50 0 0 0 50 50 0 50 50 50 0 50 0 0 0 0 0 50 50 50 0 50 0 0 0 0 0 0 50 50 0 0 50 50 0 50 50 0 50 50 0 ...', 'output': ['357156']}, {'input': '7782\\r\\n50 50 0 0 0 50 50 50 50 50 50 50 0 50 50 0 50 50 50 50 50 50 0 50 50 50 0 50 50 0 0 50 50 0 0 50 50 50 50 50 0 50 50 0 50 50 50 50 50 50 50 0 50 50 50 0 0 50 50 0 50 0 50 0 0 50 50 0 50 0 50 50 50 0 50 50 50 50 50 50 0 50 50 50 0 50 0 50 50 0 0 50 50 0 0 50 50 50 50 50 0 50 50 50 0 0 50 50 50 0 50 0 50 0 0 50 0 50 50 50 50 50 50 50 50 50 50 50 50 50 50 0 50 0 50 50 50 0 50 50 50 50 0 50 0 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 0 0 0 50 0 0 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 ...', 'output': ['202284']}, {'input': '8110\\r\\noutput': ['109080']}, {'input': '4463\\r\\n2612 1495 2859 1941 1446 2716 4690 4357 2841 4862 2243 3269 4454 995 3373 2249 4637 3365 2276 1330 3211 572 826 4368 2894 905 137 718 2081 3137 3718 4107 3420 1398 193 1255 504 325 879 3991 3579 4223 315 1854 418 1143 1822 4198 2589 1918 4633 1210 86 52 336 3709 2138 838 3815 866 595 3296 4810 699 234 2559 4523 349 3190 1770 267 987 489 2936 4000 907 4032 1122 293 1486 3054 4489 412 4844 3924 1750 1249 300 1593 2535 1028 1469 4747 4522 3000 1326 4214 2544 789 3632 2556 4190 2426 1185 2402 1880 3382 7...', 'output': ['33446396']}, {'input': '5587\\r\\n2623 467 1074 276 33 2358 829 2301 820 160 398 3363 4748 2942 4704 2516 1274 4663 634 4071 4825 143 2912 2888 2968 3925 3589 3793 3172 3541 3494 75 4914 342 2901 1959 45 4692 3580 1458 4080 3297 1947 2236 127 3280 3318 4024 1199 2520 4506 3727 4205 2762 4291 235 3535 2536 2526 2609 4920 2257 3986 2082 1471 2106 311 4015 3822 455 3335 2263 616 1187 464 390 1366 3124 4893 1719 4779 1197 2097 3292 1653 33 504 1596 1158 3852 3262 4875 428 854 1140 2848 3166 2498 1219 3806 556 4607 3368 421 1312 4387 4448...', 'output': ['38501618']}, {'input': '5915\\r\\n3291 884 4366 156 3584 3291 2124 2353 3291 3291 123 3989 805 3291 3291 3160 1562 3291 793 2707 3291 3291 3291 1504 3291 3291 891 3291 3291 3291 582 3291 3291 3291 3291 2333 715 4753 3291 3291 4111 4457 4577 3793 3291 3291 3291 1652 1916 3291 3882 251 912 4595 577 1650 3291 3291 3291 143 3506 1658 1944 3291 3291 3673 3291 3291 3291 646 3575 4523 3291 434 3291 1526 3291 3291 3853 4708 2083 3291 3291 2560 2032 825 3291 1770 3291 3291 2960 3291 1517 795 3291 3235 3601 2124 1798 3291 3291 1093 3291 3291 3...', 'output': ['51854645']}, {'input': '7039\\r\\n1790 834 1882 1790 1790 2803 2541 1790 3268 24 922 1790 1790 1790 2078 1790 939 1790 2717 1790 2404 1790 1790 1790 1480 1867 2257 3412 1790 1812 1790 1790 1790 3469 1790 2214 679 1919 3173 468 1790 1790 1790 2321 3045 1790 1790 1790 1329 1790 1790 1790 1790 1730 541 3140 1790 264 1604 2703 1790 1790 1790 2166 1790 1790 1790 1790 1790 949 1790 3427 1217 519 1790 1916 2692 1790 1199 2023 3315 1790 2503 1790 302 1790 1790 1790 1790 1790 2009 1790 1203 3040 1790 2836 1869 1790 1790 2613 1790 1790 2898 15...', 'output': ['37192065']}, {'input': '7716\\r\\n0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 5000 0 5000 0 0 5000 0 0 0 0 0 0 5000 5000 5000 0 0 0 5000 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 5000 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 0 5000 0 0 0 0 5000 5000 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 5000 0 0 0 5000 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...', 'output': ['15317928']}, {'input': '6592\\r\\n0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 5000 0 0 0 5000 5000 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 5000 0 0 0 5000 0 0 0 0 0 5000 5000 0 0 0 0 5000 0 0 5000 5000 0 0 5000 0 5000 0 0 0 5000 0 5000 0 0 0 0 0 5000 0 5000 0 0 5000 5000 0 0 0 0 0 0 0 0 5000 5000 5000 0 0 0 0 0 5000 0 0 0 0 5000 0 0 5000 0 0 0 5000 0 0 5000 5000 0 5000 0 0 0 0 5000 0 0 5000 0 0 0 0 5000 0 0 0 0 0 5000 5000 0 0 5000 0 0 0 5000 0 5000 0 0 5000 0 0 0 0 0 0 5000 0 0 0 5000 0 5000 5000 0 5000 5000 0 0 0 0 5000...', 'output': ['26993178']}, {'input': '6927\\r\\noutput': ['53675016']}, {'input': '8051\\r\\noutput': ['31865649']}, {'input': '8379\\r\\noutput': ['16516587']}, {'input': '831909\\r\\n17 49 28 4 26 17 17 17 34 17 3 18 17 0 28 17 17 45 17 17 17 7 13 17 17 17 17 17 17 17 17 17 19 0 17 43 17 17 17 17 43 17 17 17 17 6 36 17 27 19 47 17 44 0 17 17 20 24 17 17 17 32 15 17 17 25 30 17 17 17 18 3 47 17 17 45 17 17 20 40 3 17 29 17 17 17 17 40 17 17 17 17 31 17 4 47 24 17 19 17 39 17 37 17 47 13 17 3 17 17 20 17 17 48 17 49 34 18 17 13 20 30 19 17 17 17 17 17 12 47 22 42 29 17 20 17 17 17 32 7 7 17 17 17 17 17 46 32 20 17 5 17 17 50 17 17 38 21 17 36 37 18 17 38 17 11 9 8 17 17 48 29 25 ...', 'output': ['31683596']}, {'input': '258037\\r\\n33 8 33 0 33 33 33 48 33 16 40 33 38 23 33 33 33 33 33 4 46 33 17 17 33 6 33 27 33 19 5 33 10 33 27 33 48 12 33 33 33 20 23 33 33 28 11 33 33 33 28 33 50 33 33 33 33 5 33 33 33 33 35 47 33 33 33 3 13 11 33 17 33 33 33 38 33 33 44 3 33 33 33 31 33 33 33 33 33 33 18 8 29 10 33 33 33 33 15 1 37 7 7 33 17 5 33 31 38 33 27 44 17 38 33 33 49 33 33 2 33 33 30 33 31 13 39 46 33 18 28 41 42 33 14 33 33 33 10 8 33 33 33 33 33 33 33 46 33 33 33 25 34 22 33 39 33 30 24 33 33 1 33 44 15 15 33 41 20 33 45 33 27 ...', 'output': ['14441842']}, {'input': '328921\\r\\noutput': ['4404996']}, {'input': '555497\\r\\noutput': ['14931972']}, {'input': '207904\\r\\n50 50 50 0 0 50 0 50 50 50 0 50 50 50 0 50 50 50 50 0 50 0 0 0 50 0 0 0 50 0 0 50 0 50 0 0 0 50 50 0 50 50 50 0 50 0 0 0 0 50 0 50 50 0 50 0 0 0 50 50 50 50 50 50 50 50 50 0 0 50 50 0 50 50 50 50 0 0 0 0 0 50 50 50 0 0 50 0 50 0 50 0 0 0 50 0 50 0 0 50 0 50 50 50 50 50 0 0 50 0 50 0 0 50 50 0 50 0 50 0 0 0 50 0 0 50 0 0 0 0 0 50 0 50 0 50 0 50 0 0 50 50 50 50 50 0 0 0 50 0 50 50 50 50 50 0 50 50 0 0 50 0 50 0 0 0 50 0 50 50 50 0 0 50 0 50 50 50 0 0 0 0 50 50 0 0 50 50 50 50 50 50 50 0 0 0 50 50 50 ...', 'output': ['11221740']}, {'input': '971328\\r\\n50 0 0 0 50 50 0 50 50 50 50 50 50 50 0 50 50 50 50 0 50 50 50 0 50 50 50 50 0 50 50 50 50 0 50 50 50 50 50 50 50 50 0 0 50 50 0 50 50 50 0 0 0 50 50 50 50 50 0 0 50 50 0 0 50 50 0 50 50 50 0 0 50 50 50 0 50 0 50 0 50 50 0 50 0 50 0 50 50 0 50 50 50 50 0 50 50 50 50 50 50 50 50 0 50 50 50 0 0 50 50 0 0 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 0 50 50 50 0 50 0 50 0 0 50 0 50 50 0 0 50 50 50 50 50 50 50 0 50 0 50 50 0 0 0 0 50 50 0 50 50 0 50 50 50 50 50 50 50 50 ...', 'output': ['26290440']}, {'input': '744752\\r\\noutput': ['10077264']}, {'input': '973217\\r\\n2233 4962 2835 1271 712 2124 3765 510 914 3364 2648 3399 744 3777 1516 739 3844 3879 261 863 2101 791 2276 1691 2145 1603 819 2340 415 3123 3260 1225 4746 4672 937 742 3927 25 2177 640 72 245 4053 3213 1322 3725 2842 883 216 4345 815 1534 633 4222 1677 2151 949 2691 2931 1897 1678 2599 4295 953 656 2864 2956 4134 4556 2839 3201 878 4447 270 1517 647 4010 3382 683 660 1393 785 3285 1115 1057 3672 3462 1434 882 122 505 3504 1946 1152 2997 3360 605 966 4034 4790 1344 1579 4482 2472 4484 3325 2852 543 ...', 'output': ['7404434821']}, {'input': '103937\\r\\n1662 2609 1161 2445 296 1285 3447 58 3521 1582 3524 1259 2360 3741 3130 4570 2215 3091 2032 3518 2969 3181 1414 1632 2101 4556 3642 1734 1388 4300 1631 182 1633 3970 1837 3967 1914 3162 915 2404 1208 4583 4334 279 747 2251 4671 4416 4752 3641 3811 1089 3213 740 1502 3880 2044 2766 777 3050 2475 4741 1121 2863 1065 4146 4872 2094 139 755 2780 4115 3442 2104 4030 1891 3037 2769 739 2274 3313 3098 2415 3909 4771 2761 1623 4084 3038 3130 4758 2667 3792 247 8 2846 3218 3485 3149 3845 470 4108 1031 484 3...', 'output': ['783928844']}, {'input': '520065\\r\\n756 4889 1279 756 756 756 756 4981 756 756 3514 3153 756 1559 563 3198 756 1696 756 1161 756 756 4853 1600 2623 3399 756 756 2736 756 756 756 756 756 4089 756 756 1407 3919 1546 1651 756 2430 756 756 756 756 756 756 4836 4582 1305 1304 763 756 4644 4890 756 3162 2611 3242 4455 1792 1882 756 2208 2014 4995 756 2947 2876 4738 756 756 1113 756 891 756 756 756 265 3619 756 756 756 4725 756 756 756 774 4476 4539 214 756 756 125 2452 3861 2363 2240 3842 756 4106 756 1183 756 756 756 756 756 1798 1694 793...', 'output': ['2532637708']}, {'input': '293489\\r\\n1084 4053 780 780 950 694 780 3823 780 780 2601 780 780 1469 3089 780 780 780 780 4707 780 2191 3268 2411 2892 171 3953 4307 340 1869 780 780 4373 4183 3523 780 2859 1053 780 1433 780 780 780 780 780 320 780 780 780 780 1948 2097 780 4234 780 780 780 4624 3124 780 780 3087 780 335 4642 780 780 2633 780 1447 780 780 4153 4532 780 780 3217 780 2340 2143 4089 2517 2085 780 2774 4590 3449 780 780 780 780 3715 4933 1026 2606 780 780 780 927 1997 3757 3730 780 780 780 780 780 4839 1369 780 602 780 1430 2...', 'output': ['1431772162']}, {'input': '546122\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 5000 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 5000 5000 5000 5000 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0...', 'output': ['1063817646']}, {'input': '772698\\r\\n0 5000 0 5000 0 0 0 0 0 5000 5000 0 0 0 0 5000 0 5000 0 0 0 5000 0 0 0 0 0 0 5000 5000 0 0 0 0 0 5000 0 0 0 0 0 5000 5000 0 5000 0 5000 0 0 0 0 5000 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 0 0 5000 0 5000 5000 0 0 0 5000 0 0 0 5000 0 5000 5000 0 0 0 5000 0 0 0 5000 0 0 5000 0 0 0 0 0 0 5000 0 5000 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 5000 5000 0 0 0 0 5000 0 0 0 5000 0 0 0 0 0 5000 0 0 5000 5000 0 5000 0 0 0 0 5000 0...', 'output': ['3012463572']}, {'input': '331312\\r\\noutput': ['2575933758']}, {'input': '104736\\r\\noutput': ['409458801']}, {'input': '868160\\r\\noutput': ['1683384246']}, {'input': '652655\\r\\n3334 3647 3955 1615 3535 4170 4440 916 3449 2474 1705 3926 4990 3602 1931 3593 1063 1637 3035 3592 4867 1381 2636 4148 2037 3053 2672 4117 3999 3410 3987 3809 1214 2506 4227 1035 3947 2980 4434 4606 1941 506 2430 4660 4704 2335 3672 659 3575 4897 2110 3191 1255 4677 4945 1118 1910 2386 928 630 4433 1229 3359 4875 1579 912 3160 2739 967 2438 4642 2192 4582 4089 4592 4265 2103 1404 4987 2649 601 4729 1050 1838 3316 964 4887 3663 1072 1898 921 2139 1880 4576 4828 3720 4421 1337 2919 4725 573 4563 714 ...', 'output': ['5470312646']}, {'input': '426079\\r\\n2838 696 521 2882 1816 4549 1788 4865 847 828 3444 3010 3490 4211 1926 2653 1094 2830 1268 3453 4906 532 2632 1988 2018 3161 2738 4149 3293 3844 3397 4545 2797 920 2672 2489 3556 1906 4249 662 2529 3906 1460 2151 1230 2527 1916 1727 1206 1011 1446 2586 4323 999 3917 3068 2849 2543 4319 3752 3258 2376 3342 4053 1804 1481 4853 2579 1163 2305 1735 4229 4686 2331 1992 3311 3851 1731 2098 2361 4830 941 3025 1566 3201 1692 2927 1751 4691 1394 3965 3014 1311 3986 1112 1710 3773 555 2357 2535 1687 1859 276...', 'output': ['3563797440']}, {'input': '199503\\r\\n819 819 4407 819 2634 1942 1127 819 1841 2488 819 819 774 4506 4800 1081 599 3091 819 819 4720 3629 819 819 2127 819 1115 819 819 819 819 819 819 819 2505 4087 2733 819 819 819 4835 2398 819 1588 819 2857 3465 819 4081 4347 3965 3529 2022 819 819 2856 819 819 1121 1828 819 819 2151 1524 2595 819 819 819 3629 3952 819 819 819 819 855 819 819 819 4197 819 2830 1026 2311 2606 819 819 4789 1104 2866 819 819 4562 2823 819 819 819 4389 819 3175 819 1115 819 819 819 819 819 3432 3480 819 3975 2524 3140 81...', 'output': ['1068954149']}, {'input': '615631\\r\\n3009 3663 3663 3663 2397 2553 3747 2143 2156 2962 3663 3826 4164 3663 3663 1309 1934 3663 4312 1760 1737 4296 3663 4739 3663 3663 3663 3663 4846 3663 3663 3663 986 2467 3663 3663 3663 3663 3663 2818 3663 3663 3663 3663 3663 3372 3663 3663 3663 4656 3663 3663 4912 3720 3663 3663 3663 4085 3663 3663 3663 4188 1082 4132 4775 1118 3663 3561 1043 3663 2132 4242 4604 3663 3663 3663 3663 3663 3663 3476 3663 2419 3349 3663 3663 3663 1120 3663 3663 3663 3663 2097 3663 4132 3663 4381 4692 3349 3663 3663 2768...', 'output': ['6032856551']}, {'input': '201235\\r\\noutput': ['422388015']}, {'input': '427811\\r\\noutput': ['1809031255']}, {'input': '462860\\r\\noutput': ['3916819805']}, {'input': '236284\\r\\noutput': ['1003533735']}, {'input': '999708\\r\\noutput': ['2120768420']}, {'input': '1000000\\r\\n48 8 20 45 21 24 8 0 42 18 16 5 49 40 18 22 40 43 41 47 30 15 17 36 25 9 24 29 8 33 29 41 22 5 15 40 21 18 13 49 39 4 38 3 24 36 27 39 9 5 0 38 40 16 42 27 24 10 12 50 41 19 3 19 34 12 42 18 2 7 17 22 11 20 25 48 18 16 25 49 19 34 21 37 4 46 16 21 9 22 1 48 28 27 36 3 49 41 43 48 36 39 8 14 38 0 18 11 37 31 23 12 14 16 38 41 47 14 45 29 34 44 32 13 17 26 44 12 46 50 37 39 40 49 30 11 22 43 19 50 32 27 30 20 28 10 24 2 17 34 12 37 36 29 26 37 21 48 4 11 31 7 30 46 15 6 0 44 47 40 24 10 33 48 33 48 ...', 'output': ['48889749']}, {'input': '1000000\\r\\n14 46 0 25 40 23 14 44 34 31 11 45 22 44 30 13 12 10 5 13 50 46 12 44 18 45 16 11 34 6 37 3 46 18 18 42 42 5 39 24 4 7 35 2 24 24 48 7 44 30 41 44 26 38 41 13 20 23 41 40 48 41 24 2 2 45 47 32 17 44 8 47 46 3 31 2 12 6 34 38 49 41 35 9 40 5 46 24 4 5 30 18 21 15 29 32 49 50 8 40 44 34 24 32 36 34 32 14 18 22 29 4 4 11 31 0 25 28 47 27 17 15 32 9 5 19 45 36 33 44 47 14 18 42 33 40 19 5 25 26 32 6 0 27 37 15 25 49 49 2 35 50 2 13 45 31 15 18 22 28 36 32 5 39 44 41 17 38 1 25 18 17 48 40 3 3 31 29 19...', 'output': ['48862349']}, {'input': '1000000\\r\\n2 27 42 2 2 2 2 4 17 47 2 45 17 2 2 2 2 14 2 42 2 5 15 37 4 5 37 40 2 2 14 17 48 2 2 2 2 37 2 2 46 8 2 45 24 47 29 35 2 2 15 2 2 12 2 34 2 2 43 2 2 23 19 49 2 42 2 3 2 2 2 2 0 5 2 2 2 37 2 2 2 2 3 2 29 2 36 22 50 2 2 43 2 2 2 34 14 1 10 2 19 33 40 3 2 50 21 41 35 13 0 18 18 2 2 2 2 29 21 2 7 2 2 36 8 2 2 2 38 21 30 30 12 2 38 41 2 42 2 16 2 2 43 38 2 42 2 2 2 14 2 2 2 8 15 2 2 5 31 49 41 2 2 29 2 2 2 32 14 2 18 2 2 23 2 2 2 2 2 41 32 2 2 29 2 2 2 21 2 2 2 2 2 24 25 13 2 2 32 2 17 2 2 11 2 21 2 29 ...', 'output': ['24924286']}, {'input': '1000000\\r\\n32 18 30 28 18 36 18 16 18 8 19 18 43 18 18 18 18 18 46 16 18 15 18 4 31 20 26 6 18 14 18 0 18 14 18 17 38 5 30 41 50 18 47 31 18 1 18 18 18 7 18 19 18 12 2 8 26 18 18 18 0 18 17 18 18 18 36 18 44 18 18 18 18 18 18 45 18 43 18 28 37 18 18 18 18 18 5 18 24 18 18 18 18 5 15 19 18 49 18 3 18 18 47 39 18 19 18 2 18 18 32 18 48 31 18 18 12 18 14 28 5 10 5 18 18 46 18 18 18 42 18 9 18 3 18 18 18 7 35 16 18 18 18 18 10 18 18 39 18 41 33 30 10 18 24 18 34 32 18 15 3 15 18 18 1 34 22 18 41 17 18 10 18 18 1...', 'output': ['39529186']}, {'input': '1000000\\r\\noutput': ['13477752']}, {'input': '1000000\\r\\noutput': ['26977860']}, {'input': '1000000\\r\\n50 50 50 50 50 50 0 50 0 0 0 0 0 0 0 0 50 50 50 0 0 0 50 0 0 0 0 50 0 0 50 50 50 50 50 50 0 0 50 50 0 0 0 50 0 0 0 0 50 50 0 0 50 50 50 50 50 0 0 0 0 0 50 50 0 50 0 50 0 50 0 50 0 50 0 0 0 50 0 50 0 0 50 0 50 0 0 50 0 50 0 0 50 50 0 50 0 0 50 0 0 0 0 0 50 0 50 50 0 0 0 0 0 0 0 50 0 0 0 0 0 0 50 50 0 50 0 50 50 0 0 50 50 50 50 50 0 50 0 50 50 50 0 0 0 50 0 0 0 50 50 0 0 50 0 50 50 0 0 0 50 50 0 0 0 50 50 50 0 50 50 0 50 0 0 50 50 50 50 50 50 50 0 50 0 50 50 0 50 50 0 50 50 50 50 50 50 50 0 0 50 0 5...', 'output': ['53993952']}, {'input': '1000000\\r\\n50 50 0 50 50 50 50 0 50 50 0 50 50 50 0 0 0 50 50 0 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 0 50 0 0 50 50 50 50 0 50 50 50 50 50 50 50 50 50 50 50 0 0 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 0 0 50 50 50 50 50 50 50 0 50 50 50 0 50 50 50 50 0 50 0 50 50 50 50 50 50 50 0 50 0 50 0 0 0 50 50 0 50 0 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 0 50 50 50 50 50 50 50 50 0 50 50 50 50 0 0 50 50 50 0 50 50 50 50 0 50 50 50 0 0 50 50 50 50 50 5...', 'output': ['26987364']}, {'input': '1000000\\r\\n50 50 50 50 0 50 50 50 0 50 50 50 0 50 50 50 50 50 50 50 0 50 50 50 0 50 50 50 50 50 50 50 50 50 50 50 50 50 0 0 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50 0 50 0 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 0 50 0 0 50 50 0 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 0 50 0 50 50 50 0 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 0 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 ...', 'output': ['13460904']}, {'input': '1000000\\r\\n4928 5000 4744 3545 3738 2132 1318 4951 2071 1952 2436 3340 2119 2695 4938 4493 4798 575 4969 3520 2191 2873 1960 4032 3857 4548 2212 3864 2948 3089 4829 1148 1656 4725 1963 2766 1319 1971 2937 2979 3194 1866 4461 1519 3195 704 2802 4208 4242 937 1797 2331 3923 801 1677 1718 3754 770 1402 1801 3480 1839 3134 1069 4671 4776 3159 1728 2554 2091 751 626 2234 1416 640 610 1634 4110 4476 1075 2240 3216 3739 4099 4694 925 2824 3432 4434 4320 3411 4658 1378 2193 4301 2762 3768 3874 3815 3882 2439 2911 45...', 'output': ['8384253798']}, {'input': '1000000\\r\\n4637 1302 2880 1973 4301 4845 2403 2820 3359 1121 1066 3885 1101 1911 2875 865 3402 3883 1943 2415 4562 693 1895 2528 2203 2858 3316 3183 3462 3194 1180 667 3088 1856 2257 684 4941 599 1784 4124 2997 729 4662 2207 1177 4995 2535 1128 2688 4949 989 2888 3918 2059 2028 1444 2432 4254 2685 1889 2049 2391 2534 2133 3021 3290 4710 3200 1581 1147 4271 2676 2283 598 1333 1733 3408 1993 2692 2252 4442 1469 3112 960 2265 1455 4820 2984 4120 4641 1432 3231 3896 960 1817 1911 3379 1879 1417 2363 4263 1442 30...', 'output': ['8374983176']}, {'input': '1000000\\r\\n1616 3742 1616 1616 1616 1616 1787 4057 1616 710 4642 3132 1616 1616 1280 1616 3392 1680 1616 1202 2794 1616 714 1036 1616 666 1616 1616 2066 1616 4643 1616 1616 2370 1393 4716 1616 1616 4295 960 2721 3010 1616 1616 1616 3783 1616 3737 2293 1921 2932 3666 4864 1616 1616 3161 1933 1616 2214 4578 1616 1616 2040 2520 1616 1616 4641 1616 1150 1616 1616 896 3297 1616 1616 1185 4532 1616 2888 1616 1616 1616 1246 1616 1616 1616 1616 4534 1616 1616 1753 1174 1616 940 1616 1616 1616 1616 3180 1616 737 2174...', 'output': ['6573578424']}, {'input': '1000000\\r\\n2691 1471 1769 1769 1769 2426 1769 1769 1769 1603 1769 1769 1769 1769 510 1567 1524 1666 1769 1769 1153 1769 1769 1769 2414 1769 1074 1769 3210 2644 1201 3796 1766 1769 1644 577 1769 1918 1855 1769 3024 1769 1769 2995 1769 1769 4565 1769 3576 864 1769 1769 3337 1769 1769 1945 4876 2367 704 1769 1769 3704 1769 3168 1769 2401 1769 2844 1769 4175 2420 4683 1769 1769 1769 3560 1769 1769 1769 1769 1769 2808 1769 4057 4544 1769 1769 2697 2150 1737 2724 1769 3524 1769 1769 3502 1769 1769 1769 1769 1620 2...', 'output': ['6808525559']}, {'input': '1000000\\r\\n501 501 5000 501 501 501 501 5000 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 5000 501 501 501 501 501 501 501 501 501 5000 501 501 501 501 501 501 501 501 501 501 501 501 5000 501 501 501 501 501 5000 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 5000 501 501 501 501 501 501 501 501 501 501 501 501 5000 501 5000 501 501 5000 501 501 5000 501 501 501 501 501 501 501 501 501 501...', 'output': ['2113787080']}, {'input': '1000000\\r\\n501 5000 5000 501 501 501 5000 501 5000 501 501 501 501 5000 501 501 5000 501 501 5000 501 501 501 501 501 501 501 5000 501 501 501 5000 501 5000 5000 501 501 501 501 501 5000 5000 501 501 501 501 501 501 501 501 501 501 5000 5000 501 501 5000 5000 501 5000 5000 501 501 5000 501 501 501 501 501 501 5000 501 501 5000 501 501 501 501 501 501 501 501 501 501 501 501 501 5000 501 501 5000 501 501 5000 501 5000 501 501 5000 501 5000 501 501 5000 501 501 501 501 501 501 5000 5000 501 501 501 5000 501 50...', 'output': ['4241621565']}, {'input': '1000000\\r\\noutput': ['8464722245']}, {'input': '1000000\\r\\noutput': ['4229505890']}, {'input': '1000000\\r\\noutput': ['2122852655']}, {'input': '1000000\\r\\n3491 3862 4899 1602 3307 2481 2146 1000 2479 2072 1534 2587 3924 4181 4835 2449 1976 4441 2217 3227 3297 2989 1754 1498 3742 1437 3766 3234 1072 3972 2514 1055 3883 4655 3452 1827 1874 1349 3202 2450 2946 3550 3879 3214 3123 2445 3893 1771 4218 3032 1325 4404 1421 1531 3754 1412 3178 4801 3290 4438 3677 4018 3175 1981 3353 3939 1512 3645 3759 3630 3769 3848 2031 1011 1771 1278 3021 2768 4761 1697 3561 4706 1464 3090 4827 1058 1120 3602 1808 2849 2244 4170 1928 3584 4395 2628 3674 1812 4074 1723 35...', 'output': ['8999391475']}, {'input': '1000000\\r\\n4525 1819 4273 3463 1648 2372 4978 2585 2374 2402 3570 2924 1135 1647 4411 924 1539 2671 1396 1592 2253 3152 2052 4858 4538 2952 1123 1441 2052 2404 2073 4052 4954 1331 4834 2353 1980 3243 4991 1389 2920 2050 1337 3188 2953 2753 2451 2119 3315 2174 3910 3759 3410 4935 2996 1728 1229 1070 1719 3715 2233 1699 3794 1656 4410 4356 3740 4240 4249 3772 2740 3670 3711 4863 1584 4255 1217 3831 4379 2230 2132 1625 3418 1469 4672 4632 1416 979 1173 3364 1419 1460 3118 3410 1250 1531 4916 3057 4448 4483 3900...', 'output': ['9003221879']}, {'input': '1000000\\r\\n1442 3254 3079 1274 4816 1653 3079 3079 3079 1396 4595 2894 3079 3079 1060 3079 4646 3079 3079 3567 3079 3079 3079 1111 2788 3079 913 3020 1455 3026 3079 3079 4799 3079 1018 3079 3079 3079 3079 2703 4596 3079 3079 3079 3079 3790 4649 3079 3079 3803 1425 3079 1956 3886 3861 3663 3079 3121 2774 2577 4524 3079 3079 1760 3079 3079 3545 3079 3079 3079 1009 3079 3775 4972 4066 3079 1602 3079 1288 3079 3079 3079 3079 3079 3079 1482 3079 3079 3079 3079 3079 2153 3079 1233 4758 1729 3079 1361 2370 3522 119...', 'output': ['9192195816']}, {'input': '1000000\\r\\n3085 4754 3064 4924 4924 3593 3916 3300 4924 2820 3819 4924 2825 2127 4924 3321 3323 4924 2612 4924 4924 4924 4924 4924 2572 4357 4924 4924 1690 4012 3790 4924 4924 4924 4924 2601 1049 4032 3940 4651 3530 4924 2765 2847 3710 2400 3405 2217 4924 4924 4546 1228 4924 4924 2806 4900 1510 4924 4924 4924 4924 3746 2527 4475 3412 4924 4924 4133 4924 4924 4924 3474 4924 4924 1006 4924 4924 1683 2651 2822 2382 2521 3814 4924 2554 4924 4215 3787 4685 2481 3981 4924 4924 3234 4112 4924 1758 4924 4924 4924 37...', 'output': ['12154389312']}, {'input': '4\\r\\n13 14 15 16\\r\\n', 'output': ['76']}, {'input': '3\\r\\n1 5 6\\r\\n', 'output': ['10']}, {'input': '3\\r\\n15 13 2\\r\\n', 'output': ['42']}, {'input': '3\\r\\n1 8 9\\r\\n', 'output': ['20']}, {'input': '3\\r\\n2 5 6\\r\\n', 'output': ['11']}]", "source_code": "import java.io.*;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        InputStream stdin = System.in;\n        OutputStream stdout = System.out;\n        InputStreamReader stdinReader = new InputStreamReader(stdin);\n        BufferedReader reader = new BufferedReader(stdinReader);\n        PrintWriter printWriter = new PrintWriter(stdout);\n        int n = Integer.parseInt(reader.readLine());\n        String[] s = reader.readLine().split(\" \");\n        int p = 1;\n        int min = Integer.MAX_VALUE;\n        int count = 0;\n        int temp = 0;\n        while(true){\n            for(int i = 1 ; i <= n ; i++) {\n                if(s[i-1].equals(p +\"\")) {\n                    temp++;\n                }\n            }\n            if(count == n || n == 0) break;\n            if(min > temp) {\n                min = temp;\n                count++;\n                p++;\n                temp = 0;\n            }\n            else {\n                p++;\n                temp = 0;\n            }\n        }\n        printWriter.print(min * count);\n        printWriter.close();\n    }\n}"}
{"src_uid": "40002052843ca0357dbd3158b16d59f4", "id": 91, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2700, "testcases": "[{'input': '3\\r\\n2 1 4\\r\\n', 'output': ['5']}, {'input': '4\\r\\n3 1 4 4\\r\\n', 'output': ['6']}, {'input': '4\\r\\n3 1 4 1\\r\\n', 'output': ['6']}, {'input': '5\\r\\n3 1 4 1 5\\r\\n', 'output': ['11']}, {'input': '11\\r\\n5000 5000 5000 5000 5000 5000 0 1 0 1 0\\r\\n', 'output': ['77835']}, {'input': '1\\r\\n0\\r\\n', 'output': ['0']}, {'input': '1\\r\\n1\\r\\n', 'output': ['0']}, {'input': '4\\r\\n0 1 1 0\\r\\n', 'output': ['0']}, {'input': '17\\r\\n1 9 2 8 4 5 7 3 8 4 6 2 8 4 1 0 5\\r\\n', 'output': ['87']}, {'input': '4\\r\\n57 918 827 953\\r\\n', 'output': ['7835']}, {'input': '51\\r\\n17 26 14 0 41 18 40 14 29 25 5 23 46 20 8 14 12 27 8 38 9 42 17 16 31 2 5 45 16 35 37 1 46 27 27 16 20 38 11 48 11 3 23 40 10 46 31 47 32 49 17\\r\\n', 'output': ['2366']}, {'input': '95\\r\\n28 12 46 4 24 37 23 19 7 22 29 34 10 10 9 11 9 17 26 23 8 42 12 31 33 39 25 17 1 41 30 21 11 26 14 43 19 24 32 14 3 42 29 47 40 16 27 43 33 28 6 25 40 4 0 21 5 36 2 3 35 38 49 41 32 34 0 27 30 44 45 18 2 6 1 50 13 22 20 20 7 5 16 18 13 15 15 36 39 37 31 35 48 38 8\\r\\n', 'output': ['4286']}, {'input': '49\\r\\n27 12 48 48 9 10 29 50 48 48 48 48 11 14 18 27 48 48 48 48 1 48 33 48 27 48 48 48 12 16 48 48 22 48 48 36 31 32 31 48 50 43 20 48 48 48 48 48 16\\r\\n', 'output': ['3484']}, {'input': '17\\r\\n12 12 5 1 3 12 4 2 12 12 12 12 6 12 7 12 0\\r\\n', 'output': ['179']}, {'input': '70\\r\\n50 0 50 0 0 0 0 0 0 50 50 50 50 0 50 50 0 50 50 0 0 0 50 50 0 0 50 0 50 0 50 0 0 50 0 0 0 0 50 50 50 50 0 0 0 0 0 0 0 0 50 0 50 50 0 50 0 0 0 0 50 0 50 0 0 50 0 50 0 0\\r\\n', 'output': ['3024']}, {'input': '295060\\r\\n38 23 17 20 28 38 38 28 32 7 20 0 14 31 41 16 46 39 41 8 40 14 33 36 11 2 40 8 19 36 13 29 4 22 4 12 17 38 50 35 10 40 21 7 21 2 27 34 30 40 22 37 20 5 12 42 33 16 22 45 14 26 16 27 7 24 48 1 15 40 0 27 47 25 29 42 23 23 16 17 20 1 6 38 12 0 19 34 20 43 44 8 47 23 17 5 38 40 43 46 12 29 41 10 2 4 23 22 24 45 42 39 11 19 0 4 7 1 0 13 42 3 42 49 43 39 22 36 47 17 0 35 39 15 42 16 6 20 17 43 17 4 4 30 14 45 3 7 47 12 10 41 16 45 11 5 13 37 49 36 44 24 38 3 48 26 5 10 26 32 4 35 13 40 9 42 42 40 36 22 ...', 'output': ['14408680']}, {'input': '68484\\r\\n45 1 16 1 50 16 29 39 50 46 28 5 11 28 19 5 41 23 15 30 20 7 18 6 30 27 35 31 33 13 3 1 12 11 46 28 42 17 13 5 43 36 21 45 1 38 39 36 29 10 42 6 26 37 26 3 36 0 45 27 2 9 42 33 45 39 21 19 48 14 10 14 20 12 47 38 29 32 37 17 50 10 29 6 5 48 37 48 24 26 36 7 4 26 12 42 40 35 32 22 17 35 9 47 11 13 10 10 4 13 32 23 30 26 22 20 20 0 49 38 33 16 46 50 21 40 2 15 13 26 16 3 22 47 37 35 23 34 22 40 22 12 42 13 39 25 46 25 47 12 1 43 25 1 32 25 26 18 8 50 27 45 45 9 42 25 12 27 48 6 15 2 14 41 3 7 6 0 29 2...', 'output': ['3345881']}, {'input': '1000000\\r\\n3722 452 4276 30 137 3139 4268 4696 1846 2667 4961 3074 4236 4685 4087 2731 3444 4322 4932 2801 3270 3 1629 4477 3073 4958 3274 760 978 4270 3836 1343 4543 1770 2995 2073 3085 1190 4630 635 3582 1483 1953 990 4430 1546 1787 916 3572 2781 189 1832 2275 3122 714 931 4259 2670 241 3550 387 1032 3317 3802 1423 160 1717 1783 3911 4966 1947 4002 1905 2708 3798 4609 2264 399 4637 705 19 1194 1688 1682 1543 3335 521 4343 3036 3527 398 3205 444 1392 1226 3770 3775 4669 3394 3907 3857 4711 3696 2203 395 222...', 'output': ['7607420444']}, {'input': '1000000\\r\\n522 4027 3242 3953 143 2524 1807 4590 574 4082 4545 59 1875 3013 2181 906 2440 892 727 1900 57 480 1275 1115 4406 2958 4632 3920 1901 1611 1826 3199 2393 1268 1140 1549 3367 3625 4123 4996 4480 3553 1483 1236 3965 4973 4534 4546 2637 1999 1073 929 4043 1343 1310 850 188 1005 4228 2198 388 1001 2549 4137 212 3001 3231 1987 3806 2926 4746 355 1552 431 635 3372 1820 396 1425 3998 1362 3213 2589 4102 2081 761 438 409 902 4512 1274 520 1789 3499 414 2074 542 1784 1706 2436 199 1508 4900 1968 527 1815 3...', 'output': ['7605550222']}, {'input': '1000000\\r\\n2976 2807 1350 3599 2725 1350 2266 3745 1350 1350 1607 4715 1803 1350 1350 2355 1350 1350 1350 1350 1350 1350 3814 1008 2634 4272 153 1350 2335 1350 1350 2952 2395 1187 2912 1392 1350 208 1350 1350 2711 1350 4116 195 130 3661 2624 1350 1350 3561 1350 1350 1350 1350 1350 1350 1350 3830 4407 1056 1350 1350 3003 1212 1350 2702 1469 1483 1025 3345 1350 4493 1350 1350 1350 3324 1350 1350 1693 2153 1350 4035 1772 1350 1350 1350 1350 1469 2034 3780 1920 1050 1350 1350 1350 1921 4707 3667 1350 1350 1887 1...', 'output': ['5780430738']}, {'input': '1000000\\r\\n935 1374 1374 1834 1431 4393 1520 1678 1374 917 4059 1374 1374 1374 4957 1374 808 1374 1374 1374 1374 122 1374 1374 1374 3800 396 1374 1374 1374 1374 878 1374 648 1374 1374 1374 1374 2763 845 1374 1374 1374 1122 1374 1374 1374 1374 1374 1374 1374 1374 4696 1915 3392 1374 3781 1374 3861 4681 1864 1374 1374 2556 1978 1374 4166 1374 4140 1374 1374 4675 1436 1374 3101 1374 1374 83 1374 1374 4251 143 1374 4060 2303 1374 341 1374 1374 1374 1374 1374 269 1374 4575 1925 1374 1374 1374 3286 1374 3996 1374 ...', 'output': ['5811523118']}, {'input': '1000000\\r\\n0 0 0 0 0 0 0 0 0 0 5000 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 5000 0 0 0 0 0 0 0 0 0 0 5000 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 5000 5000 0 0 5000 0 5000 0 0 5000 0 0 0 0 5000 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 5000 0 0 0 0 0 0 0 0 0 0 0 5000 5000 0 0 0 0 0 5000 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 5000 0 0 0 0 0 0 0 5000 0 0...', 'output': ['1950296028']}, {'input': '1000000\\r\\n5000 0 5000 0 0 0 0 0 5000 0 0 5000 0 5000 0 0 0 5000 0 0 0 0 0 0 0 0 5000 0 0 5000 0 0 0 0 0 5000 0 0 5000 0 0 0 0 5000 5000 5000 0 0 5000 0 0 0 5000 5000 0 0 0 5000 5000 0 0 0 0 0 5000 0 5000 0 0 0 0 0 5000 5000 0 5000 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 5000 0 0 0 0 5000 0 0 0 0 0 5000 5000 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 5000 5000 0 0 0 0 0 5000 5000 5000 5000 0 0 0 0 0 0 0 5000 5000 0 0 0 0 0 0 5000 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 5000 0 0 0 0 5000 5000 0 5000 ...', 'output': ['3888512064']}, {'input': '1000000\\r\\noutput': ['7779561549']}, {'input': '1000000\\r\\n5000 5000 5000 0 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 0 0 0 5000 0 5000 5000 0 5000 5000 5000 5000 5000 0 0 5000 0 5000 5000 0 0 5000 5000 0 0 0 5000 5000 0 0 5000 5000 0 5000 5000 0 5000 5000 0 5000 5000 0 5000 0 5000 5000 0 5000 5000 5000 0 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 0 5000 5000 0 5000 5000 0 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 0 5000 0 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 5000 0 0 5000 ...', 'output': ['3888449796']}, {'input': '1000000\\r\\noutput': ['1947260463']}, {'input': '1000000\\r\\noutput': ['0']}, {'input': '13\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 50\\r\\n', 'output': ['108']}, {'input': '45\\r\\n50 0 0 0 0 0 0 0 0 50 0 0 50 0 0 50 50 0 0 0 0 0 50 0 0 0 0 0 50 50 0 0 0 0 50 0 50 0 50 0 0 0 0 0 50\\r\\n', 'output': ['1296']}, {'input': '24\\r\\n50 0 50 50 50 0 50 50 0 50 50 50 50 50 0 50 50 0 50 50 50 50 50 50\\r\\n', 'output': ['540']}, {'input': '68\\r\\n50 50 50 50 50 50 50 50 0 0 50 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 50 50 50 50 0 50 50 0 0 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50\\r\\n', 'output': ['864']}, {'input': '75\\r\\n2597 1818 260 4655 4175 2874 2987 4569 2029 4314 444 2276 4937 1209 1797 4965 3526 275 3535 2198 4402 2144 1369 13 4453 1655 4456 711 3563 1650 3997 885 782 147 2426 974 2917 2100 4549 2465 3015 3485 3238 4086 171 3934 1903 133 2278 2573 688 551 872 459 2044 1401 2429 4933 3747 587 2781 4173 4651 4012 1407 2352 1461 566 2062 4599 1430 2269 3914 1820 4728\\r\\n', 'output': ['565559']}, {'input': '29\\r\\n8 27 14 21 6 20 2 11 3 19 10 16 0 25 18 4 23 17 15 26 28 1 13 5 9 22 12 7 24\\r\\n', 'output': ['692']}, {'input': '87\\r\\n1120 1120 1120 872 1120 731 3583 2815 4019 1291 4568 973 1120 1705 1120 822 203 1120 1120 1120 1120 4196 3166 4589 3030 1120 1120 1120 711 1120 500 1120 1120 3551 1120 1120 1120 1700 1120 1120 2319 4554 1120 1312 1120 1120 4176 1120 1120 3661 1120 1120 1120 1120 142 63 4125 1120 4698 3469 1829 567 1120 1120 1083 486 1120 1120 1120 1120 3763 1120 247 4496 454 1120 1120 1532 1120 4142 352 1120 359 2880 1120 1120 4494\\r\\n', 'output': ['438276']}, {'input': '27\\r\\n9 1144 1144 2 8 1144 12 0 1144 1144 7 3 1144 1144 11 10 1 1144 1144 5 1144 4 1144 1144 1144 1144 6\\r\\n', 'output': ['43222']}, {'input': '27\\r\\n0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 5000 0 0 0 5000\\r\\n', 'output': ['62268']}, {'input': '59\\r\\n0 0 0 5000 0 0 0 5000 5000 0 5000 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 5000 0 5000 0 5000 0 0 5000 0 5000 0 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 5000 0 0 0 5000\\r\\n', 'output': ['233505']}, {'input': '80\\r\\n0 0 0 0 5000 0 0 5000 5000 5000 0 5000 0 5000 5000 0 0 0 0 5000 5000 0 0 5000 0 5000 5000 5000 0 5000 0 5000 5000 5000 0 0 5000 0 0 5000 5000 0 0 5000 0 5000 5000 5000 0 0 5000 5000 5000 0 0 5000 0 0 5000 0 5000 5000 0 5000 0 5000 0 5000 0 5000 0 0 0 0 5000 5000 5000 0 0 0\\r\\n', 'output': ['591546']}, {'input': '20\\r\\n0 5000 5000 5000 5000 5000 0 5000 5000 0 5000 5000 5000 0 5000 5000 5000 5000 0 5000\\r\\n', 'output': ['77835']}, {'input': '78\\r\\n0 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 0 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 0 5000 0 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 0 0 0 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 5000 5000 0 5000\\r\\n', 'output': ['249072']}, {'input': '3241\\r\\n20 31 49 20 24 6 33 50 24 30 6 50 45 34 43 40 35 10 27 4 43 19 42 16 20 49 20 32 18 41 36 32 26 37 9 21 29 16 22 27 9 48 47 29 30 15 43 24 26 20 3 11 4 35 12 42 48 11 44 46 31 44 20 47 0 7 7 18 47 3 18 8 4 9 2 48 28 22 32 4 24 37 32 26 49 12 4 10 44 50 41 23 5 26 1 5 34 4 1 13 39 26 24 25 25 9 37 5 22 15 12 49 48 2 28 37 42 44 45 30 4 41 43 7 44 39 9 21 47 41 7 17 18 14 19 13 35 8 36 39 1 18 47 25 48 22 44 41 12 17 5 5 44 48 9 4 49 37 34 9 13 37 21 40 45 13 3 32 22 12 25 48 24 6 28 9 41 2 45 28 31 9 ...', 'output': ['160831']}, {'input': '3569\\r\\n11 34 14 46 1 12 5 13 5 46 35 8 36 28 7 16 16 47 29 45 27 36 47 22 2 33 5 38 23 34 24 48 15 27 20 14 31 8 18 15 44 10 47 28 17 36 34 48 10 48 29 35 31 15 19 17 26 42 15 45 21 16 9 31 30 32 50 12 48 37 46 2 10 32 36 8 38 25 20 3 26 7 35 33 38 6 16 30 42 38 47 16 20 23 36 30 20 24 38 5 1 16 40 31 14 6 10 27 2 4 32 1 12 6 43 43 34 32 19 9 47 34 22 37 9 50 33 18 45 42 20 19 49 20 49 25 3 41 36 46 41 21 21 26 43 50 37 23 11 34 32 3 32 42 35 6 18 45 47 16 19 33 2 34 35 44 11 47 13 24 10 31 13 37 48 42 22 3...', 'output': ['174332']}, {'input': '5489\\r\\n2 18 8 33 36 26 20 18 26 0 26 42 26 5 10 26 26 26 26 2 26 0 28 26 26 26 26 26 28 30 25 24 26 2 26 26 39 26 26 26 26 31 26 26 26 46 26 5 26 26 45 16 26 7 26 26 26 26 49 26 26 1 0 8 26 19 3 18 8 38 26 14 40 31 44 26 26 26 26 26 30 42 26 10 26 18 29 32 8 29 3 26 26 26 6 26 26 6 26 26 26 34 26 26 4 10 0 47 49 26 26 26 1 18 29 12 23 2 39 50 4 17 26 29 8 26 13 35 26 16 42 30 26 26 46 6 42 26 26 26 5 24 26 26 46 29 26 35 26 26 26 23 26 26 26 26 26 26 26 26 26 26 26 26 50 33 26 31 26 26 47 26 26 26 26 6 26 2...', 'output': ['260842']}, {'input': '5817\\r\\n41 18 41 41 25 41 41 39 1 6 41 40 41 41 41 41 0 41 41 41 41 17 41 41 41 39 41 12 41 0 41 36 40 41 41 41 41 11 41 27 13 41 29 41 22 41 41 33 14 19 18 41 41 32 41 5 41 2 34 13 47 41 41 41 41 45 18 41 43 42 41 12 9 41 41 41 35 10 41 41 41 41 44 41 41 30 41 7 25 41 46 42 41 12 41 41 48 13 23 41 17 41 44 41 1 41 24 3 41 41 41 26 41 41 6 7 41 0 10 2 16 29 41 34 41 39 36 41 3 41 41 36 2 24 35 38 36 37 41 41 38 8 42 36 0 35 37 2 41 28 41 38 36 13 41 41 16 41 31 43 1 38 19 23 41 41 41 17 9 41 25 41 45 19 10 4...', 'output': ['377254']}, {'input': '2871\\r\\noutput': ['37260']}, {'input': '2543\\r\\n0 0 0 0 50 50 0 0 0 0 0 0 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50 0 0 0 0 50 0 0 0 50 0 0 0 0 0 0 0 0 50 0 0 0 0 0 0 50 0 50 0 0 50 0 50 50 0 0 0 0 0 0 50 50 0 0 0 50 50 0 50 0 0 0 50 50 0 0 0 0 50 0 0 0 0 0 0 0 0 50 0 0 0 50 0 50 0 0 50 0 50 0 0 0 50 0 0 50 50 0 0 0 0 50 0 0 50 0 0 0 0 0 50 0 50 0 0 0 0 0 0 0 0 0 0 50 50 50 0 0 0 0 0 0 0 0 0 50 0 0 0 0 0 50 0 0 0 0 0 0 50 50 0 0 50 0 0 50 0 0 0 0 0 0 0 0 0 50 50 0 0 0 0 50 0 0 50 0 0 50 50 0 0 0 50 50 0 0 50 0 0 0 0 0 0 0 0 0 50 0 50 0 0 0 0 0 0 0 0 0 0 0...', 'output': ['66744']}, {'input': '6658\\r\\n50 50 50 0 0 50 0 0 50 0 0 50 50 0 50 50 0 0 50 50 0 50 50 50 50 0 50 0 0 50 50 0 50 0 0 0 0 0 50 0 0 0 50 0 50 50 50 50 0 50 0 50 50 50 50 50 50 50 0 0 50 0 0 50 0 50 0 0 50 50 50 0 0 0 0 0 50 0 0 0 50 0 0 0 50 0 50 0 50 50 50 50 0 0 50 50 0 50 50 0 0 0 50 50 0 0 50 50 0 0 0 50 0 0 50 50 50 50 50 0 0 0 0 50 50 50 50 0 0 0 0 0 0 0 50 0 50 50 50 0 0 0 50 0 50 50 50 50 50 0 0 50 50 0 0 0 0 50 0 50 0 50 50 0 0 0 50 50 0 50 50 50 0 50 0 0 0 0 0 50 50 50 0 50 0 0 0 0 0 0 50 50 0 0 50 50 0 50 50 0 50 50 0 ...', 'output': ['357156']}, {'input': '7782\\r\\n50 50 0 0 0 50 50 50 50 50 50 50 0 50 50 0 50 50 50 50 50 50 0 50 50 50 0 50 50 0 0 50 50 0 0 50 50 50 50 50 0 50 50 0 50 50 50 50 50 50 50 0 50 50 50 0 0 50 50 0 50 0 50 0 0 50 50 0 50 0 50 50 50 0 50 50 50 50 50 50 0 50 50 50 0 50 0 50 50 0 0 50 50 0 0 50 50 50 50 50 0 50 50 50 0 0 50 50 50 0 50 0 50 0 0 50 0 50 50 50 50 50 50 50 50 50 50 50 50 50 50 0 50 0 50 50 50 0 50 50 50 50 0 50 0 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 0 0 0 50 0 0 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 ...', 'output': ['202284']}, {'input': '8110\\r\\noutput': ['109080']}, {'input': '4463\\r\\n2612 1495 2859 1941 1446 2716 4690 4357 2841 4862 2243 3269 4454 995 3373 2249 4637 3365 2276 1330 3211 572 826 4368 2894 905 137 718 2081 3137 3718 4107 3420 1398 193 1255 504 325 879 3991 3579 4223 315 1854 418 1143 1822 4198 2589 1918 4633 1210 86 52 336 3709 2138 838 3815 866 595 3296 4810 699 234 2559 4523 349 3190 1770 267 987 489 2936 4000 907 4032 1122 293 1486 3054 4489 412 4844 3924 1750 1249 300 1593 2535 1028 1469 4747 4522 3000 1326 4214 2544 789 3632 2556 4190 2426 1185 2402 1880 3382 7...', 'output': ['33446396']}, {'input': '5587\\r\\n2623 467 1074 276 33 2358 829 2301 820 160 398 3363 4748 2942 4704 2516 1274 4663 634 4071 4825 143 2912 2888 2968 3925 3589 3793 3172 3541 3494 75 4914 342 2901 1959 45 4692 3580 1458 4080 3297 1947 2236 127 3280 3318 4024 1199 2520 4506 3727 4205 2762 4291 235 3535 2536 2526 2609 4920 2257 3986 2082 1471 2106 311 4015 3822 455 3335 2263 616 1187 464 390 1366 3124 4893 1719 4779 1197 2097 3292 1653 33 504 1596 1158 3852 3262 4875 428 854 1140 2848 3166 2498 1219 3806 556 4607 3368 421 1312 4387 4448...', 'output': ['38501618']}, {'input': '5915\\r\\n3291 884 4366 156 3584 3291 2124 2353 3291 3291 123 3989 805 3291 3291 3160 1562 3291 793 2707 3291 3291 3291 1504 3291 3291 891 3291 3291 3291 582 3291 3291 3291 3291 2333 715 4753 3291 3291 4111 4457 4577 3793 3291 3291 3291 1652 1916 3291 3882 251 912 4595 577 1650 3291 3291 3291 143 3506 1658 1944 3291 3291 3673 3291 3291 3291 646 3575 4523 3291 434 3291 1526 3291 3291 3853 4708 2083 3291 3291 2560 2032 825 3291 1770 3291 3291 2960 3291 1517 795 3291 3235 3601 2124 1798 3291 3291 1093 3291 3291 3...', 'output': ['51854645']}, {'input': '7039\\r\\n1790 834 1882 1790 1790 2803 2541 1790 3268 24 922 1790 1790 1790 2078 1790 939 1790 2717 1790 2404 1790 1790 1790 1480 1867 2257 3412 1790 1812 1790 1790 1790 3469 1790 2214 679 1919 3173 468 1790 1790 1790 2321 3045 1790 1790 1790 1329 1790 1790 1790 1790 1730 541 3140 1790 264 1604 2703 1790 1790 1790 2166 1790 1790 1790 1790 1790 949 1790 3427 1217 519 1790 1916 2692 1790 1199 2023 3315 1790 2503 1790 302 1790 1790 1790 1790 1790 2009 1790 1203 3040 1790 2836 1869 1790 1790 2613 1790 1790 2898 15...', 'output': ['37192065']}, {'input': '7716\\r\\n0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 5000 0 5000 0 0 5000 0 0 0 0 0 0 5000 5000 5000 0 0 0 5000 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 5000 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 0 5000 0 0 0 0 5000 5000 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 5000 0 0 0 5000 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...', 'output': ['15317928']}, {'input': '6592\\r\\n0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 5000 0 0 0 5000 5000 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 5000 0 0 0 5000 0 0 0 0 0 5000 5000 0 0 0 0 5000 0 0 5000 5000 0 0 5000 0 5000 0 0 0 5000 0 5000 0 0 0 0 0 5000 0 5000 0 0 5000 5000 0 0 0 0 0 0 0 0 5000 5000 5000 0 0 0 0 0 5000 0 0 0 0 5000 0 0 5000 0 0 0 5000 0 0 5000 5000 0 5000 0 0 0 0 5000 0 0 5000 0 0 0 0 5000 0 0 0 0 0 5000 5000 0 0 5000 0 0 0 5000 0 5000 0 0 5000 0 0 0 0 0 0 5000 0 0 0 5000 0 5000 5000 0 5000 5000 0 0 0 0 5000...', 'output': ['26993178']}, {'input': '6927\\r\\noutput': ['53675016']}, {'input': '8051\\r\\noutput': ['31865649']}, {'input': '8379\\r\\noutput': ['16516587']}, {'input': '831909\\r\\n17 49 28 4 26 17 17 17 34 17 3 18 17 0 28 17 17 45 17 17 17 7 13 17 17 17 17 17 17 17 17 17 19 0 17 43 17 17 17 17 43 17 17 17 17 6 36 17 27 19 47 17 44 0 17 17 20 24 17 17 17 32 15 17 17 25 30 17 17 17 18 3 47 17 17 45 17 17 20 40 3 17 29 17 17 17 17 40 17 17 17 17 31 17 4 47 24 17 19 17 39 17 37 17 47 13 17 3 17 17 20 17 17 48 17 49 34 18 17 13 20 30 19 17 17 17 17 17 12 47 22 42 29 17 20 17 17 17 32 7 7 17 17 17 17 17 46 32 20 17 5 17 17 50 17 17 38 21 17 36 37 18 17 38 17 11 9 8 17 17 48 29 25 ...', 'output': ['31683596']}, {'input': '258037\\r\\n33 8 33 0 33 33 33 48 33 16 40 33 38 23 33 33 33 33 33 4 46 33 17 17 33 6 33 27 33 19 5 33 10 33 27 33 48 12 33 33 33 20 23 33 33 28 11 33 33 33 28 33 50 33 33 33 33 5 33 33 33 33 35 47 33 33 33 3 13 11 33 17 33 33 33 38 33 33 44 3 33 33 33 31 33 33 33 33 33 33 18 8 29 10 33 33 33 33 15 1 37 7 7 33 17 5 33 31 38 33 27 44 17 38 33 33 49 33 33 2 33 33 30 33 31 13 39 46 33 18 28 41 42 33 14 33 33 33 10 8 33 33 33 33 33 33 33 46 33 33 33 25 34 22 33 39 33 30 24 33 33 1 33 44 15 15 33 41 20 33 45 33 27 ...', 'output': ['14441842']}, {'input': '328921\\r\\noutput': ['4404996']}, {'input': '555497\\r\\noutput': ['14931972']}, {'input': '207904\\r\\n50 50 50 0 0 50 0 50 50 50 0 50 50 50 0 50 50 50 50 0 50 0 0 0 50 0 0 0 50 0 0 50 0 50 0 0 0 50 50 0 50 50 50 0 50 0 0 0 0 50 0 50 50 0 50 0 0 0 50 50 50 50 50 50 50 50 50 0 0 50 50 0 50 50 50 50 0 0 0 0 0 50 50 50 0 0 50 0 50 0 50 0 0 0 50 0 50 0 0 50 0 50 50 50 50 50 0 0 50 0 50 0 0 50 50 0 50 0 50 0 0 0 50 0 0 50 0 0 0 0 0 50 0 50 0 50 0 50 0 0 50 50 50 50 50 0 0 0 50 0 50 50 50 50 50 0 50 50 0 0 50 0 50 0 0 0 50 0 50 50 50 0 0 50 0 50 50 50 0 0 0 0 50 50 0 0 50 50 50 50 50 50 50 0 0 0 50 50 50 ...', 'output': ['11221740']}, {'input': '971328\\r\\n50 0 0 0 50 50 0 50 50 50 50 50 50 50 0 50 50 50 50 0 50 50 50 0 50 50 50 50 0 50 50 50 50 0 50 50 50 50 50 50 50 50 0 0 50 50 0 50 50 50 0 0 0 50 50 50 50 50 0 0 50 50 0 0 50 50 0 50 50 50 0 0 50 50 50 0 50 0 50 0 50 50 0 50 0 50 0 50 50 0 50 50 50 50 0 50 50 50 50 50 50 50 50 0 50 50 50 0 0 50 50 0 0 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 0 50 50 50 0 50 0 50 0 0 50 0 50 50 0 0 50 50 50 50 50 50 50 0 50 0 50 50 0 0 0 0 50 50 0 50 50 0 50 50 50 50 50 50 50 50 ...', 'output': ['26290440']}, {'input': '744752\\r\\noutput': ['10077264']}, {'input': '973217\\r\\n2233 4962 2835 1271 712 2124 3765 510 914 3364 2648 3399 744 3777 1516 739 3844 3879 261 863 2101 791 2276 1691 2145 1603 819 2340 415 3123 3260 1225 4746 4672 937 742 3927 25 2177 640 72 245 4053 3213 1322 3725 2842 883 216 4345 815 1534 633 4222 1677 2151 949 2691 2931 1897 1678 2599 4295 953 656 2864 2956 4134 4556 2839 3201 878 4447 270 1517 647 4010 3382 683 660 1393 785 3285 1115 1057 3672 3462 1434 882 122 505 3504 1946 1152 2997 3360 605 966 4034 4790 1344 1579 4482 2472 4484 3325 2852 543 ...', 'output': ['7404434821']}, {'input': '103937\\r\\n1662 2609 1161 2445 296 1285 3447 58 3521 1582 3524 1259 2360 3741 3130 4570 2215 3091 2032 3518 2969 3181 1414 1632 2101 4556 3642 1734 1388 4300 1631 182 1633 3970 1837 3967 1914 3162 915 2404 1208 4583 4334 279 747 2251 4671 4416 4752 3641 3811 1089 3213 740 1502 3880 2044 2766 777 3050 2475 4741 1121 2863 1065 4146 4872 2094 139 755 2780 4115 3442 2104 4030 1891 3037 2769 739 2274 3313 3098 2415 3909 4771 2761 1623 4084 3038 3130 4758 2667 3792 247 8 2846 3218 3485 3149 3845 470 4108 1031 484 3...', 'output': ['783928844']}, {'input': '520065\\r\\n756 4889 1279 756 756 756 756 4981 756 756 3514 3153 756 1559 563 3198 756 1696 756 1161 756 756 4853 1600 2623 3399 756 756 2736 756 756 756 756 756 4089 756 756 1407 3919 1546 1651 756 2430 756 756 756 756 756 756 4836 4582 1305 1304 763 756 4644 4890 756 3162 2611 3242 4455 1792 1882 756 2208 2014 4995 756 2947 2876 4738 756 756 1113 756 891 756 756 756 265 3619 756 756 756 4725 756 756 756 774 4476 4539 214 756 756 125 2452 3861 2363 2240 3842 756 4106 756 1183 756 756 756 756 756 1798 1694 793...', 'output': ['2532637708']}, {'input': '293489\\r\\n1084 4053 780 780 950 694 780 3823 780 780 2601 780 780 1469 3089 780 780 780 780 4707 780 2191 3268 2411 2892 171 3953 4307 340 1869 780 780 4373 4183 3523 780 2859 1053 780 1433 780 780 780 780 780 320 780 780 780 780 1948 2097 780 4234 780 780 780 4624 3124 780 780 3087 780 335 4642 780 780 2633 780 1447 780 780 4153 4532 780 780 3217 780 2340 2143 4089 2517 2085 780 2774 4590 3449 780 780 780 780 3715 4933 1026 2606 780 780 780 927 1997 3757 3730 780 780 780 780 780 4839 1369 780 602 780 1430 2...', 'output': ['1431772162']}, {'input': '546122\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 5000 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 5000 5000 5000 5000 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0...', 'output': ['1063817646']}, {'input': '772698\\r\\n0 5000 0 5000 0 0 0 0 0 5000 5000 0 0 0 0 5000 0 5000 0 0 0 5000 0 0 0 0 0 0 5000 5000 0 0 0 0 0 5000 0 0 0 0 0 5000 5000 0 5000 0 5000 0 0 0 0 5000 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 0 0 5000 0 5000 5000 0 0 0 5000 0 0 0 5000 0 5000 5000 0 0 0 5000 0 0 0 5000 0 0 5000 0 0 0 0 0 0 5000 0 5000 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 5000 5000 0 0 0 0 5000 0 0 0 5000 0 0 0 0 0 5000 0 0 5000 5000 0 5000 0 0 0 0 5000 0...', 'output': ['3012463572']}, {'input': '331312\\r\\noutput': ['2575933758']}, {'input': '104736\\r\\noutput': ['409458801']}, {'input': '868160\\r\\noutput': ['1683384246']}, {'input': '652655\\r\\n3334 3647 3955 1615 3535 4170 4440 916 3449 2474 1705 3926 4990 3602 1931 3593 1063 1637 3035 3592 4867 1381 2636 4148 2037 3053 2672 4117 3999 3410 3987 3809 1214 2506 4227 1035 3947 2980 4434 4606 1941 506 2430 4660 4704 2335 3672 659 3575 4897 2110 3191 1255 4677 4945 1118 1910 2386 928 630 4433 1229 3359 4875 1579 912 3160 2739 967 2438 4642 2192 4582 4089 4592 4265 2103 1404 4987 2649 601 4729 1050 1838 3316 964 4887 3663 1072 1898 921 2139 1880 4576 4828 3720 4421 1337 2919 4725 573 4563 714 ...', 'output': ['5470312646']}, {'input': '426079\\r\\n2838 696 521 2882 1816 4549 1788 4865 847 828 3444 3010 3490 4211 1926 2653 1094 2830 1268 3453 4906 532 2632 1988 2018 3161 2738 4149 3293 3844 3397 4545 2797 920 2672 2489 3556 1906 4249 662 2529 3906 1460 2151 1230 2527 1916 1727 1206 1011 1446 2586 4323 999 3917 3068 2849 2543 4319 3752 3258 2376 3342 4053 1804 1481 4853 2579 1163 2305 1735 4229 4686 2331 1992 3311 3851 1731 2098 2361 4830 941 3025 1566 3201 1692 2927 1751 4691 1394 3965 3014 1311 3986 1112 1710 3773 555 2357 2535 1687 1859 276...', 'output': ['3563797440']}, {'input': '199503\\r\\n819 819 4407 819 2634 1942 1127 819 1841 2488 819 819 774 4506 4800 1081 599 3091 819 819 4720 3629 819 819 2127 819 1115 819 819 819 819 819 819 819 2505 4087 2733 819 819 819 4835 2398 819 1588 819 2857 3465 819 4081 4347 3965 3529 2022 819 819 2856 819 819 1121 1828 819 819 2151 1524 2595 819 819 819 3629 3952 819 819 819 819 855 819 819 819 4197 819 2830 1026 2311 2606 819 819 4789 1104 2866 819 819 4562 2823 819 819 819 4389 819 3175 819 1115 819 819 819 819 819 3432 3480 819 3975 2524 3140 81...', 'output': ['1068954149']}, {'input': '615631\\r\\n3009 3663 3663 3663 2397 2553 3747 2143 2156 2962 3663 3826 4164 3663 3663 1309 1934 3663 4312 1760 1737 4296 3663 4739 3663 3663 3663 3663 4846 3663 3663 3663 986 2467 3663 3663 3663 3663 3663 2818 3663 3663 3663 3663 3663 3372 3663 3663 3663 4656 3663 3663 4912 3720 3663 3663 3663 4085 3663 3663 3663 4188 1082 4132 4775 1118 3663 3561 1043 3663 2132 4242 4604 3663 3663 3663 3663 3663 3663 3476 3663 2419 3349 3663 3663 3663 1120 3663 3663 3663 3663 2097 3663 4132 3663 4381 4692 3349 3663 3663 2768...', 'output': ['6032856551']}, {'input': '201235\\r\\noutput': ['422388015']}, {'input': '427811\\r\\noutput': ['1809031255']}, {'input': '462860\\r\\noutput': ['3916819805']}, {'input': '236284\\r\\noutput': ['1003533735']}, {'input': '999708\\r\\noutput': ['2120768420']}, {'input': '1000000\\r\\n48 8 20 45 21 24 8 0 42 18 16 5 49 40 18 22 40 43 41 47 30 15 17 36 25 9 24 29 8 33 29 41 22 5 15 40 21 18 13 49 39 4 38 3 24 36 27 39 9 5 0 38 40 16 42 27 24 10 12 50 41 19 3 19 34 12 42 18 2 7 17 22 11 20 25 48 18 16 25 49 19 34 21 37 4 46 16 21 9 22 1 48 28 27 36 3 49 41 43 48 36 39 8 14 38 0 18 11 37 31 23 12 14 16 38 41 47 14 45 29 34 44 32 13 17 26 44 12 46 50 37 39 40 49 30 11 22 43 19 50 32 27 30 20 28 10 24 2 17 34 12 37 36 29 26 37 21 48 4 11 31 7 30 46 15 6 0 44 47 40 24 10 33 48 33 48 ...', 'output': ['48889749']}, {'input': '1000000\\r\\n14 46 0 25 40 23 14 44 34 31 11 45 22 44 30 13 12 10 5 13 50 46 12 44 18 45 16 11 34 6 37 3 46 18 18 42 42 5 39 24 4 7 35 2 24 24 48 7 44 30 41 44 26 38 41 13 20 23 41 40 48 41 24 2 2 45 47 32 17 44 8 47 46 3 31 2 12 6 34 38 49 41 35 9 40 5 46 24 4 5 30 18 21 15 29 32 49 50 8 40 44 34 24 32 36 34 32 14 18 22 29 4 4 11 31 0 25 28 47 27 17 15 32 9 5 19 45 36 33 44 47 14 18 42 33 40 19 5 25 26 32 6 0 27 37 15 25 49 49 2 35 50 2 13 45 31 15 18 22 28 36 32 5 39 44 41 17 38 1 25 18 17 48 40 3 3 31 29 19...', 'output': ['48862349']}, {'input': '1000000\\r\\n2 27 42 2 2 2 2 4 17 47 2 45 17 2 2 2 2 14 2 42 2 5 15 37 4 5 37 40 2 2 14 17 48 2 2 2 2 37 2 2 46 8 2 45 24 47 29 35 2 2 15 2 2 12 2 34 2 2 43 2 2 23 19 49 2 42 2 3 2 2 2 2 0 5 2 2 2 37 2 2 2 2 3 2 29 2 36 22 50 2 2 43 2 2 2 34 14 1 10 2 19 33 40 3 2 50 21 41 35 13 0 18 18 2 2 2 2 29 21 2 7 2 2 36 8 2 2 2 38 21 30 30 12 2 38 41 2 42 2 16 2 2 43 38 2 42 2 2 2 14 2 2 2 8 15 2 2 5 31 49 41 2 2 29 2 2 2 32 14 2 18 2 2 23 2 2 2 2 2 41 32 2 2 29 2 2 2 21 2 2 2 2 2 24 25 13 2 2 32 2 17 2 2 11 2 21 2 29 ...', 'output': ['24924286']}, {'input': '1000000\\r\\n32 18 30 28 18 36 18 16 18 8 19 18 43 18 18 18 18 18 46 16 18 15 18 4 31 20 26 6 18 14 18 0 18 14 18 17 38 5 30 41 50 18 47 31 18 1 18 18 18 7 18 19 18 12 2 8 26 18 18 18 0 18 17 18 18 18 36 18 44 18 18 18 18 18 18 45 18 43 18 28 37 18 18 18 18 18 5 18 24 18 18 18 18 5 15 19 18 49 18 3 18 18 47 39 18 19 18 2 18 18 32 18 48 31 18 18 12 18 14 28 5 10 5 18 18 46 18 18 18 42 18 9 18 3 18 18 18 7 35 16 18 18 18 18 10 18 18 39 18 41 33 30 10 18 24 18 34 32 18 15 3 15 18 18 1 34 22 18 41 17 18 10 18 18 1...', 'output': ['39529186']}, {'input': '1000000\\r\\noutput': ['13477752']}, {'input': '1000000\\r\\noutput': ['26977860']}, {'input': '1000000\\r\\n50 50 50 50 50 50 0 50 0 0 0 0 0 0 0 0 50 50 50 0 0 0 50 0 0 0 0 50 0 0 50 50 50 50 50 50 0 0 50 50 0 0 0 50 0 0 0 0 50 50 0 0 50 50 50 50 50 0 0 0 0 0 50 50 0 50 0 50 0 50 0 50 0 50 0 0 0 50 0 50 0 0 50 0 50 0 0 50 0 50 0 0 50 50 0 50 0 0 50 0 0 0 0 0 50 0 50 50 0 0 0 0 0 0 0 50 0 0 0 0 0 0 50 50 0 50 0 50 50 0 0 50 50 50 50 50 0 50 0 50 50 50 0 0 0 50 0 0 0 50 50 0 0 50 0 50 50 0 0 0 50 50 0 0 0 50 50 50 0 50 50 0 50 0 0 50 50 50 50 50 50 50 0 50 0 50 50 0 50 50 0 50 50 50 50 50 50 50 0 0 50 0 5...', 'output': ['53993952']}, {'input': '1000000\\r\\noutput': ['26987364']}, {'input': '1000000\\r\\noutput': ['13460904']}, {'input': '1000000\\r\\n4928 5000 4744 3545 3738 2132 1318 4951 2071 1952 2436 3340 2119 2695 4938 4493 4798 575 4969 3520 2191 2873 1960 4032 3857 4548 2212 3864 2948 3089 4829 1148 1656 4725 1963 2766 1319 1971 2937 2979 3194 1866 4461 1519 3195 704 2802 4208 4242 937 1797 2331 3923 801 1677 1718 3754 770 1402 1801 3480 1839 3134 1069 4671 4776 3159 1728 2554 2091 751 626 2234 1416 640 610 1634 4110 4476 1075 2240 3216 3739 4099 4694 925 2824 3432 4434 4320 3411 4658 1378 2193 4301 2762 3768 3874 3815 3882 2439 2911 45...', 'output': ['8384253798']}, {'input': '1000000\\r\\n4637 1302 2880 1973 4301 4845 2403 2820 3359 1121 1066 3885 1101 1911 2875 865 3402 3883 1943 2415 4562 693 1895 2528 2203 2858 3316 3183 3462 3194 1180 667 3088 1856 2257 684 4941 599 1784 4124 2997 729 4662 2207 1177 4995 2535 1128 2688 4949 989 2888 3918 2059 2028 1444 2432 4254 2685 1889 2049 2391 2534 2133 3021 3290 4710 3200 1581 1147 4271 2676 2283 598 1333 1733 3408 1993 2692 2252 4442 1469 3112 960 2265 1455 4820 2984 4120 4641 1432 3231 3896 960 1817 1911 3379 1879 1417 2363 4263 1442 30...', 'output': ['8374983176']}, {'input': '1000000\\r\\n1616 3742 1616 1616 1616 1616 1787 4057 1616 710 4642 3132 1616 1616 1280 1616 3392 1680 1616 1202 2794 1616 714 1036 1616 666 1616 1616 2066 1616 4643 1616 1616 2370 1393 4716 1616 1616 4295 960 2721 3010 1616 1616 1616 3783 1616 3737 2293 1921 2932 3666 4864 1616 1616 3161 1933 1616 2214 4578 1616 1616 2040 2520 1616 1616 4641 1616 1150 1616 1616 896 3297 1616 1616 1185 4532 1616 2888 1616 1616 1616 1246 1616 1616 1616 1616 4534 1616 1616 1753 1174 1616 940 1616 1616 1616 1616 3180 1616 737 2174...', 'output': ['6573578424']}, {'input': '1000000\\r\\n2691 1471 1769 1769 1769 2426 1769 1769 1769 1603 1769 1769 1769 1769 510 1567 1524 1666 1769 1769 1153 1769 1769 1769 2414 1769 1074 1769 3210 2644 1201 3796 1766 1769 1644 577 1769 1918 1855 1769 3024 1769 1769 2995 1769 1769 4565 1769 3576 864 1769 1769 3337 1769 1769 1945 4876 2367 704 1769 1769 3704 1769 3168 1769 2401 1769 2844 1769 4175 2420 4683 1769 1769 1769 3560 1769 1769 1769 1769 1769 2808 1769 4057 4544 1769 1769 2697 2150 1737 2724 1769 3524 1769 1769 3502 1769 1769 1769 1769 1620 2...', 'output': ['6808525559']}, {'input': '1000000\\r\\n501 501 5000 501 501 501 501 5000 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 5000 501 501 501 501 501 501 501 501 501 5000 501 501 501 501 501 501 501 501 501 501 501 501 5000 501 501 501 501 501 5000 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 5000 501 501 501 501 501 501 501 501 501 501 501 501 5000 501 5000 501 501 5000 501 501 5000 501 501 501 501 501 501 501 501 501 501...', 'output': ['2113787080']}, {'input': '1000000\\r\\noutput': ['4241621565']}, {'input': '1000000\\r\\noutput': ['8464722245']}, {'input': '1000000\\r\\noutput': ['4229505890']}, {'input': '1000000\\r\\n501 501 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 501 5000 5000 5000 5000 5000 5000 5000 5000 5000 501 5000 5000 5000 501 5000 5000 5000 5000 501 5000 5000 501 5000 5000 5000 5000 501 5000 5000 5000 5000 501 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 501 5000 5000 5000 501 5000 500...', 'output': ['2122852655']}, {'input': '1000000\\r\\n3491 3862 4899 1602 3307 2481 2146 1000 2479 2072 1534 2587 3924 4181 4835 2449 1976 4441 2217 3227 3297 2989 1754 1498 3742 1437 3766 3234 1072 3972 2514 1055 3883 4655 3452 1827 1874 1349 3202 2450 2946 3550 3879 3214 3123 2445 3893 1771 4218 3032 1325 4404 1421 1531 3754 1412 3178 4801 3290 4438 3677 4018 3175 1981 3353 3939 1512 3645 3759 3630 3769 3848 2031 1011 1771 1278 3021 2768 4761 1697 3561 4706 1464 3090 4827 1058 1120 3602 1808 2849 2244 4170 1928 3584 4395 2628 3674 1812 4074 1723 35...', 'output': ['8999391475']}, {'input': '1000000\\r\\n4525 1819 4273 3463 1648 2372 4978 2585 2374 2402 3570 2924 1135 1647 4411 924 1539 2671 1396 1592 2253 3152 2052 4858 4538 2952 1123 1441 2052 2404 2073 4052 4954 1331 4834 2353 1980 3243 4991 1389 2920 2050 1337 3188 2953 2753 2451 2119 3315 2174 3910 3759 3410 4935 2996 1728 1229 1070 1719 3715 2233 1699 3794 1656 4410 4356 3740 4240 4249 3772 2740 3670 3711 4863 1584 4255 1217 3831 4379 2230 2132 1625 3418 1469 4672 4632 1416 979 1173 3364 1419 1460 3118 3410 1250 1531 4916 3057 4448 4483 3900...', 'output': ['9003221879']}, {'input': '1000000\\r\\n1442 3254 3079 1274 4816 1653 3079 3079 3079 1396 4595 2894 3079 3079 1060 3079 4646 3079 3079 3567 3079 3079 3079 1111 2788 3079 913 3020 1455 3026 3079 3079 4799 3079 1018 3079 3079 3079 3079 2703 4596 3079 3079 3079 3079 3790 4649 3079 3079 3803 1425 3079 1956 3886 3861 3663 3079 3121 2774 2577 4524 3079 3079 1760 3079 3079 3545 3079 3079 3079 1009 3079 3775 4972 4066 3079 1602 3079 1288 3079 3079 3079 3079 3079 3079 1482 3079 3079 3079 3079 3079 2153 3079 1233 4758 1729 3079 1361 2370 3522 119...', 'output': ['9192195816']}, {'input': '1000000\\r\\n3085 4754 3064 4924 4924 3593 3916 3300 4924 2820 3819 4924 2825 2127 4924 3321 3323 4924 2612 4924 4924 4924 4924 4924 2572 4357 4924 4924 1690 4012 3790 4924 4924 4924 4924 2601 1049 4032 3940 4651 3530 4924 2765 2847 3710 2400 3405 2217 4924 4924 4546 1228 4924 4924 2806 4900 1510 4924 4924 4924 4924 3746 2527 4475 3412 4924 4924 4133 4924 4924 4924 3474 4924 4924 1006 4924 4924 1683 2651 2822 2382 2521 3814 4924 2554 4924 4215 3787 4685 2481 3981 4924 4924 3234 4112 4924 1758 4924 4924 4924 37...', 'output': ['12154389312']}, {'input': '4\\r\\n13 14 15 16\\r\\n', 'output': ['76']}, {'input': '3\\r\\n1 5 6\\r\\n', 'output': ['10']}, {'input': '3\\r\\n15 13 2\\r\\n', 'output': ['42']}, {'input': '3\\r\\n1 8 9\\r\\n', 'output': ['20']}, {'input': '3\\r\\n2 5 6\\r\\n', 'output': ['11']}]", "source_code": "import java.io.*;\nimport static java.util.Arrays.asList;\nimport static java.util.Collections.reverseOrder;\nimport static java.util.Collections.reverseOrder;\nimport static java.util.Collections.reverseOrder;\nimport static java.util.Collections.reverseOrder;\nimport java.util.*;\nimport java.util.ArrayList;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\npublic class A {\n\n\t// static java.util.Collections.reverseOrder();\n\tstatic final int INF = 1 << 28;\n\t// static final double EPS = 1e-8;\n\t// static int MOD = 1000000007;\n\t// static double PI = 3.1415926535897932384626433832795;\n\tstatic FastScanner fs;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\t// Locale.setDefault(new Locale(\"rus\"));\n\t\tfs = new FastScanner();\n\t\t// long start = System.currentTimeMillis();\n\t\tint N = fs.nextInt(), min = Integer.MAX_VALUE, max = Integer.MIN_VALUE, P = 0;\n\t\tint[] nodes = new int[N], fact = new int[N];\n\t\tfor (int i = 0; i < N; i++)\n\t\t\tnodes[i] = fs.nextInt(), fact[i] = (int)fact(nodes[i]);\n\t\tP = (int)fact(1);\n\t\tfor (int i = 2; i < 24; i++) {\n\t\t\tP = (int)fact(P);\n\t\t\tfor (int j = 0; j < N; j++) {\n\t\t\t\tif (nodes[j] % i == 0) {\n\t\t\t\t\tmin = Math.min(min, P - fact[j]);\n\t\t\t\t\tmax = Math.max(max, P + fact[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint ans = 1 << 30;\n\t\tfor (int i = 24; i <= max; i++) {\n\t\t\tans = Math.min(ans, min + i - P);\n\t\t\tans = Math.min(ans, max - i + P);\n\t\t}\n\t\tSystem.out.println(ans);\n\n\t}\n\n\tstatic long fact(long n) {\n\t\tif (n == 1)\n\t\t\treturn 1;\n\t\treturn n * fact(n - 1);\n\t}\n\n\tprivate static class FastScanner {\n\t\tprivate final InputStream in = System.in;\n\t\tprivate final byte[] buffer = new byte[1024];\n\t\tprivate int ptr = 0;\n\t\tprivate int buflen = 0;\n\t\tprivate boolean hasNextByte() {\n\t\t\t\tif (ptr < buflen) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t}else{\n\t\t\t\t\t\tptr = 0;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tbuflen = in.read(buffer);\n\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (buflen <= 0) {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t}\n\t\tprivate int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n\t\tprivate static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n\t\tpublic boolean hasNext() { while(hasNextByte() &&!isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\n\t\tpublic String next() {\n\t\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\tint b = readByte();\n\t\t\t\twhile(isPrintableChar(b)) {\n\t"}
{"src_uid": "40002052843ca0357dbd3158b16d59f4", "id": 91, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2700, "testcases": "[{'input': '3\\r\\n2 1 4\\r\\n', 'output': ['5']}, {'input': '4\\r\\n3 1 4 4\\r\\n', 'output': ['6']}, {'input': '4\\r\\n3 1 4 1\\r\\n', 'output': ['6']}, {'input': '5\\r\\n3 1 4 1 5\\r\\n', 'output': ['11']}, {'input': '11\\r\\n5000 5000 5000 5000 5000 5000 0 1 0 1 0\\r\\n', 'output': ['77835']}, {'input': '1\\r\\n0\\r\\n', 'output': ['0']}, {'input': '1\\r\\n1\\r\\n', 'output': ['0']}, {'input': '4\\r\\n0 1 1 0\\r\\n', 'output': ['0']}, {'input': '17\\r\\n1 9 2 8 4 5 7 3 8 4 6 2 8 4 1 0 5\\r\\n', 'output': ['87']}, {'input': '4\\r\\n57 918 827 953\\r\\n', 'output': ['7835']}, {'input': '51\\r\\n17 26 14 0 41 18 40 14 29 25 5 23 46 20 8 14 12 27 8 38 9 42 17 16 31 2 5 45 16 35 37 1 46 27 27 16 20 38 11 48 11 3 23 40 10 46 31 47 32 49 17\\r\\n', 'output': ['2366']}, {'input': '95\\r\\n28 12 46 4 24 37 23 19 7 22 29 34 10 10 9 11 9 17 26 23 8 42 12 31 33 39 25 17 1 41 30 21 11 26 14 43 19 24 32 14 3 42 29 47 40 16 27 43 33 28 6 25 40 4 0 21 5 36 2 3 35 38 49 41 32 34 0 27 30 44 45 18 2 6 1 50 13 22 20 20 7 5 16 18 13 15 15 36 39 37 31 35 48 38 8\\r\\n', 'output': ['4286']}, {'input': '49\\r\\n27 12 48 48 9 10 29 50 48 48 48 48 11 14 18 27 48 48 48 48 1 48 33 48 27 48 48 48 12 16 48 48 22 48 48 36 31 32 31 48 50 43 20 48 48 48 48 48 16\\r\\n', 'output': ['3484']}, {'input': '17\\r\\n12 12 5 1 3 12 4 2 12 12 12 12 6 12 7 12 0\\r\\n', 'output': ['179']}, {'input': '70\\r\\n50 0 50 0 0 0 0 0 0 50 50 50 50 0 50 50 0 50 50 0 0 0 50 50 0 0 50 0 50 0 50 0 0 50 0 0 0 0 50 50 50 50 0 0 0 0 0 0 0 0 50 0 50 50 0 50 0 0 0 0 50 0 50 0 0 50 0 50 0 0\\r\\n', 'output': ['3024']}, {'input': '295060\\r\\n38 23 17 20 28 38 38 28 32 7 20 0 14 31 41 16 46 39 41 8 40 14 33 36 11 2 40 8 19 36 13 29 4 22 4 12 17 38 50 35 10 40 21 7 21 2 27 34 30 40 22 37 20 5 12 42 33 16 22 45 14 26 16 27 7 24 48 1 15 40 0 27 47 25 29 42 23 23 16 17 20 1 6 38 12 0 19 34 20 43 44 8 47 23 17 5 38 40 43 46 12 29 41 10 2 4 23 22 24 45 42 39 11 19 0 4 7 1 0 13 42 3 42 49 43 39 22 36 47 17 0 35 39 15 42 16 6 20 17 43 17 4 4 30 14 45 3 7 47 12 10 41 16 45 11 5 13 37 49 36 44 24 38 3 48 26 5 10 26 32 4 35 13 40 9 42 42 40 36 22 ...', 'output': ['14408680']}, {'input': '68484\\r\\n45 1 16 1 50 16 29 39 50 46 28 5 11 28 19 5 41 23 15 30 20 7 18 6 30 27 35 31 33 13 3 1 12 11 46 28 42 17 13 5 43 36 21 45 1 38 39 36 29 10 42 6 26 37 26 3 36 0 45 27 2 9 42 33 45 39 21 19 48 14 10 14 20 12 47 38 29 32 37 17 50 10 29 6 5 48 37 48 24 26 36 7 4 26 12 42 40 35 32 22 17 35 9 47 11 13 10 10 4 13 32 23 30 26 22 20 20 0 49 38 33 16 46 50 21 40 2 15 13 26 16 3 22 47 37 35 23 34 22 40 22 12 42 13 39 25 46 25 47 12 1 43 25 1 32 25 26 18 8 50 27 45 45 9 42 25 12 27 48 6 15 2 14 41 3 7 6 0 29 2...', 'output': ['3345881']}, {'input': '1000000\\r\\n3722 452 4276 30 137 3139 4268 4696 1846 2667 4961 3074 4236 4685 4087 2731 3444 4322 4932 2801 3270 3 1629 4477 3073 4958 3274 760 978 4270 3836 1343 4543 1770 2995 2073 3085 1190 4630 635 3582 1483 1953 990 4430 1546 1787 916 3572 2781 189 1832 2275 3122 714 931 4259 2670 241 3550 387 1032 3317 3802 1423 160 1717 1783 3911 4966 1947 4002 1905 2708 3798 4609 2264 399 4637 705 19 1194 1688 1682 1543 3335 521 4343 3036 3527 398 3205 444 1392 1226 3770 3775 4669 3394 3907 3857 4711 3696 2203 395 222...', 'output': ['7607420444']}, {'input': '1000000\\r\\n522 4027 3242 3953 143 2524 1807 4590 574 4082 4545 59 1875 3013 2181 906 2440 892 727 1900 57 480 1275 1115 4406 2958 4632 3920 1901 1611 1826 3199 2393 1268 1140 1549 3367 3625 4123 4996 4480 3553 1483 1236 3965 4973 4534 4546 2637 1999 1073 929 4043 1343 1310 850 188 1005 4228 2198 388 1001 2549 4137 212 3001 3231 1987 3806 2926 4746 355 1552 431 635 3372 1820 396 1425 3998 1362 3213 2589 4102 2081 761 438 409 902 4512 1274 520 1789 3499 414 2074 542 1784 1706 2436 199 1508 4900 1968 527 1815 3...', 'output': ['7605550222']}, {'input': '1000000\\r\\n2976 2807 1350 3599 2725 1350 2266 3745 1350 1350 1607 4715 1803 1350 1350 2355 1350 1350 1350 1350 1350 1350 3814 1008 2634 4272 153 1350 2335 1350 1350 2952 2395 1187 2912 1392 1350 208 1350 1350 2711 1350 4116 195 130 3661 2624 1350 1350 3561 1350 1350 1350 1350 1350 1350 1350 3830 4407 1056 1350 1350 3003 1212 1350 2702 1469 1483 1025 3345 1350 4493 1350 1350 1350 3324 1350 1350 1693 2153 1350 4035 1772 1350 1350 1350 1350 1469 2034 3780 1920 1050 1350 1350 1350 1921 4707 3667 1350 1350 1887 1...', 'output': ['5780430738']}, {'input': '1000000\\r\\n935 1374 1374 1834 1431 4393 1520 1678 1374 917 4059 1374 1374 1374 4957 1374 808 1374 1374 1374 1374 122 1374 1374 1374 3800 396 1374 1374 1374 1374 878 1374 648 1374 1374 1374 1374 2763 845 1374 1374 1374 1122 1374 1374 1374 1374 1374 1374 1374 1374 4696 1915 3392 1374 3781 1374 3861 4681 1864 1374 1374 2556 1978 1374 4166 1374 4140 1374 1374 4675 1436 1374 3101 1374 1374 83 1374 1374 4251 143 1374 4060 2303 1374 341 1374 1374 1374 1374 1374 269 1374 4575 1925 1374 1374 1374 3286 1374 3996 1374 ...', 'output': ['5811523118']}, {'input': '1000000\\r\\noutput': ['1950296028']}, {'input': '1000000\\r\\n5000 0 5000 0 0 0 0 0 5000 0 0 5000 0 5000 0 0 0 5000 0 0 0 0 0 0 0 0 5000 0 0 5000 0 0 0 0 0 5000 0 0 5000 0 0 0 0 5000 5000 5000 0 0 5000 0 0 0 5000 5000 0 0 0 5000 5000 0 0 0 0 0 5000 0 5000 0 0 0 0 0 5000 5000 0 5000 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 5000 0 0 0 0 5000 0 0 0 0 0 5000 5000 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 5000 5000 0 0 0 0 0 5000 5000 5000 5000 0 0 0 0 0 0 0 5000 5000 0 0 0 0 0 0 5000 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 5000 0 0 0 0 5000 5000 0 5000 ...', 'output': ['3888512064']}, {'input': '1000000\\r\\noutput': ['7779561549']}, {'input': '1000000\\r\\n5000 5000 5000 0 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 0 0 0 5000 0 5000 5000 0 5000 5000 5000 5000 5000 0 0 5000 0 5000 5000 0 0 5000 5000 0 0 0 5000 5000 0 0 5000 5000 0 5000 5000 0 5000 5000 0 5000 5000 0 5000 0 5000 5000 0 5000 5000 5000 0 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 0 5000 5000 0 5000 5000 0 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 0 5000 0 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 5000 0 0 5000 ...', 'output': ['3888449796']}, {'input': '1000000\\r\\noutput': ['1947260463']}, {'input': '1000000\\r\\noutput': ['0']}, {'input': '13\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 50\\r\\n', 'output': ['108']}, {'input': '45\\r\\n50 0 0 0 0 0 0 0 0 50 0 0 50 0 0 50 50 0 0 0 0 0 50 0 0 0 0 0 50 50 0 0 0 0 50 0 50 0 50 0 0 0 0 0 50\\r\\n', 'output': ['1296']}, {'input': '24\\r\\n50 0 50 50 50 0 50 50 0 50 50 50 50 50 0 50 50 0 50 50 50 50 50 50\\r\\n', 'output': ['540']}, {'input': '68\\r\\n50 50 50 50 50 50 50 50 0 0 50 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 50 50 50 50 0 50 50 0 0 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50\\r\\n', 'output': ['864']}, {'input': '75\\r\\n2597 1818 260 4655 4175 2874 2987 4569 2029 4314 444 2276 4937 1209 1797 4965 3526 275 3535 2198 4402 2144 1369 13 4453 1655 4456 711 3563 1650 3997 885 782 147 2426 974 2917 2100 4549 2465 3015 3485 3238 4086 171 3934 1903 133 2278 2573 688 551 872 459 2044 1401 2429 4933 3747 587 2781 4173 4651 4012 1407 2352 1461 566 2062 4599 1430 2269 3914 1820 4728\\r\\n', 'output': ['565559']}, {'input': '29\\r\\n8 27 14 21 6 20 2 11 3 19 10 16 0 25 18 4 23 17 15 26 28 1 13 5 9 22 12 7 24\\r\\n', 'output': ['692']}, {'input': '87\\r\\n1120 1120 1120 872 1120 731 3583 2815 4019 1291 4568 973 1120 1705 1120 822 203 1120 1120 1120 1120 4196 3166 4589 3030 1120 1120 1120 711 1120 500 1120 1120 3551 1120 1120 1120 1700 1120 1120 2319 4554 1120 1312 1120 1120 4176 1120 1120 3661 1120 1120 1120 1120 142 63 4125 1120 4698 3469 1829 567 1120 1120 1083 486 1120 1120 1120 1120 3763 1120 247 4496 454 1120 1120 1532 1120 4142 352 1120 359 2880 1120 1120 4494\\r\\n', 'output': ['438276']}, {'input': '27\\r\\n9 1144 1144 2 8 1144 12 0 1144 1144 7 3 1144 1144 11 10 1 1144 1144 5 1144 4 1144 1144 1144 1144 6\\r\\n', 'output': ['43222']}, {'input': '27\\r\\n0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 5000 0 0 0 5000\\r\\n', 'output': ['62268']}, {'input': '59\\r\\n0 0 0 5000 0 0 0 5000 5000 0 5000 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 5000 0 5000 0 5000 0 0 5000 0 5000 0 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 5000 0 0 0 5000\\r\\n', 'output': ['233505']}, {'input': '80\\r\\n0 0 0 0 5000 0 0 5000 5000 5000 0 5000 0 5000 5000 0 0 0 0 5000 5000 0 0 5000 0 5000 5000 5000 0 5000 0 5000 5000 5000 0 0 5000 0 0 5000 5000 0 0 5000 0 5000 5000 5000 0 0 5000 5000 5000 0 0 5000 0 0 5000 0 5000 5000 0 5000 0 5000 0 5000 0 5000 0 0 0 0 5000 5000 5000 0 0 0\\r\\n', 'output': ['591546']}, {'input': '20\\r\\n0 5000 5000 5000 5000 5000 0 5000 5000 0 5000 5000 5000 0 5000 5000 5000 5000 0 5000\\r\\n', 'output': ['77835']}, {'input': '78\\r\\n0 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 0 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 0 5000 0 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 0 0 0 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 5000 5000 0 5000\\r\\n', 'output': ['249072']}, {'input': '3241\\r\\n20 31 49 20 24 6 33 50 24 30 6 50 45 34 43 40 35 10 27 4 43 19 42 16 20 49 20 32 18 41 36 32 26 37 9 21 29 16 22 27 9 48 47 29 30 15 43 24 26 20 3 11 4 35 12 42 48 11 44 46 31 44 20 47 0 7 7 18 47 3 18 8 4 9 2 48 28 22 32 4 24 37 32 26 49 12 4 10 44 50 41 23 5 26 1 5 34 4 1 13 39 26 24 25 25 9 37 5 22 15 12 49 48 2 28 37 42 44 45 30 4 41 43 7 44 39 9 21 47 41 7 17 18 14 19 13 35 8 36 39 1 18 47 25 48 22 44 41 12 17 5 5 44 48 9 4 49 37 34 9 13 37 21 40 45 13 3 32 22 12 25 48 24 6 28 9 41 2 45 28 31 9 ...', 'output': ['160831']}, {'input': '3569\\r\\n11 34 14 46 1 12 5 13 5 46 35 8 36 28 7 16 16 47 29 45 27 36 47 22 2 33 5 38 23 34 24 48 15 27 20 14 31 8 18 15 44 10 47 28 17 36 34 48 10 48 29 35 31 15 19 17 26 42 15 45 21 16 9 31 30 32 50 12 48 37 46 2 10 32 36 8 38 25 20 3 26 7 35 33 38 6 16 30 42 38 47 16 20 23 36 30 20 24 38 5 1 16 40 31 14 6 10 27 2 4 32 1 12 6 43 43 34 32 19 9 47 34 22 37 9 50 33 18 45 42 20 19 49 20 49 25 3 41 36 46 41 21 21 26 43 50 37 23 11 34 32 3 32 42 35 6 18 45 47 16 19 33 2 34 35 44 11 47 13 24 10 31 13 37 48 42 22 3...', 'output': ['174332']}, {'input': '5489\\r\\n2 18 8 33 36 26 20 18 26 0 26 42 26 5 10 26 26 26 26 2 26 0 28 26 26 26 26 26 28 30 25 24 26 2 26 26 39 26 26 26 26 31 26 26 26 46 26 5 26 26 45 16 26 7 26 26 26 26 49 26 26 1 0 8 26 19 3 18 8 38 26 14 40 31 44 26 26 26 26 26 30 42 26 10 26 18 29 32 8 29 3 26 26 26 6 26 26 6 26 26 26 34 26 26 4 10 0 47 49 26 26 26 1 18 29 12 23 2 39 50 4 17 26 29 8 26 13 35 26 16 42 30 26 26 46 6 42 26 26 26 5 24 26 26 46 29 26 35 26 26 26 23 26 26 26 26 26 26 26 26 26 26 26 26 50 33 26 31 26 26 47 26 26 26 26 6 26 2...', 'output': ['260842']}, {'input': '5817\\r\\n41 18 41 41 25 41 41 39 1 6 41 40 41 41 41 41 0 41 41 41 41 17 41 41 41 39 41 12 41 0 41 36 40 41 41 41 41 11 41 27 13 41 29 41 22 41 41 33 14 19 18 41 41 32 41 5 41 2 34 13 47 41 41 41 41 45 18 41 43 42 41 12 9 41 41 41 35 10 41 41 41 41 44 41 41 30 41 7 25 41 46 42 41 12 41 41 48 13 23 41 17 41 44 41 1 41 24 3 41 41 41 26 41 41 6 7 41 0 10 2 16 29 41 34 41 39 36 41 3 41 41 36 2 24 35 38 36 37 41 41 38 8 42 36 0 35 37 2 41 28 41 38 36 13 41 41 16 41 31 43 1 38 19 23 41 41 41 17 9 41 25 41 45 19 10 4...', 'output': ['377254']}, {'input': '2871\\r\\noutput': ['37260']}, {'input': '2543\\r\\n0 0 0 0 50 50 0 0 0 0 0 0 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50 0 0 0 0 50 0 0 0 50 0 0 0 0 0 0 0 0 50 0 0 0 0 0 0 50 0 50 0 0 50 0 50 50 0 0 0 0 0 0 50 50 0 0 0 50 50 0 50 0 0 0 50 50 0 0 0 0 50 0 0 0 0 0 0 0 0 50 0 0 0 50 0 50 0 0 50 0 50 0 0 0 50 0 0 50 50 0 0 0 0 50 0 0 50 0 0 0 0 0 50 0 50 0 0 0 0 0 0 0 0 0 0 50 50 50 0 0 0 0 0 0 0 0 0 50 0 0 0 0 0 50 0 0 0 0 0 0 50 50 0 0 50 0 0 50 0 0 0 0 0 0 0 0 0 50 50 0 0 0 0 50 0 0 50 0 0 50 50 0 0 0 50 50 0 0 50 0 0 0 0 0 0 0 0 0 50 0 50 0 0 0 0 0 0 0 0 0 0 0...', 'output': ['66744']}, {'input': '6658\\r\\n50 50 50 0 0 50 0 0 50 0 0 50 50 0 50 50 0 0 50 50 0 50 50 50 50 0 50 0 0 50 50 0 50 0 0 0 0 0 50 0 0 0 50 0 50 50 50 50 0 50 0 50 50 50 50 50 50 50 0 0 50 0 0 50 0 50 0 0 50 50 50 0 0 0 0 0 50 0 0 0 50 0 0 0 50 0 50 0 50 50 50 50 0 0 50 50 0 50 50 0 0 0 50 50 0 0 50 50 0 0 0 50 0 0 50 50 50 50 50 0 0 0 0 50 50 50 50 0 0 0 0 0 0 0 50 0 50 50 50 0 0 0 50 0 50 50 50 50 50 0 0 50 50 0 0 0 0 50 0 50 0 50 50 0 0 0 50 50 0 50 50 50 0 50 0 0 0 0 0 50 50 50 0 50 0 0 0 0 0 0 50 50 0 0 50 50 0 50 50 0 50 50 0 ...', 'output': ['357156']}, {'input': '7782\\r\\n50 50 0 0 0 50 50 50 50 50 50 50 0 50 50 0 50 50 50 50 50 50 0 50 50 50 0 50 50 0 0 50 50 0 0 50 50 50 50 50 0 50 50 0 50 50 50 50 50 50 50 0 50 50 50 0 0 50 50 0 50 0 50 0 0 50 50 0 50 0 50 50 50 0 50 50 50 50 50 50 0 50 50 50 0 50 0 50 50 0 0 50 50 0 0 50 50 50 50 50 0 50 50 50 0 0 50 50 50 0 50 0 50 0 0 50 0 50 50 50 50 50 50 50 50 50 50 50 50 50 50 0 50 0 50 50 50 0 50 50 50 50 0 50 0 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 0 0 0 50 0 0 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 ...', 'output': ['202284']}, {'input': '8110\\r\\noutput': ['109080']}, {'input': '4463\\r\\n2612 1495 2859 1941 1446 2716 4690 4357 2841 4862 2243 3269 4454 995 3373 2249 4637 3365 2276 1330 3211 572 826 4368 2894 905 137 718 2081 3137 3718 4107 3420 1398 193 1255 504 325 879 3991 3579 4223 315 1854 418 1143 1822 4198 2589 1918 4633 1210 86 52 336 3709 2138 838 3815 866 595 3296 4810 699 234 2559 4523 349 3190 1770 267 987 489 2936 4000 907 4032 1122 293 1486 3054 4489 412 4844 3924 1750 1249 300 1593 2535 1028 1469 4747 4522 3000 1326 4214 2544 789 3632 2556 4190 2426 1185 2402 1880 3382 7...', 'output': ['33446396']}, {'input': '5587\\r\\n2623 467 1074 276 33 2358 829 2301 820 160 398 3363 4748 2942 4704 2516 1274 4663 634 4071 4825 143 2912 2888 2968 3925 3589 3793 3172 3541 3494 75 4914 342 2901 1959 45 4692 3580 1458 4080 3297 1947 2236 127 3280 3318 4024 1199 2520 4506 3727 4205 2762 4291 235 3535 2536 2526 2609 4920 2257 3986 2082 1471 2106 311 4015 3822 455 3335 2263 616 1187 464 390 1366 3124 4893 1719 4779 1197 2097 3292 1653 33 504 1596 1158 3852 3262 4875 428 854 1140 2848 3166 2498 1219 3806 556 4607 3368 421 1312 4387 4448...', 'output': ['38501618']}, {'input': '5915\\r\\n3291 884 4366 156 3584 3291 2124 2353 3291 3291 123 3989 805 3291 3291 3160 1562 3291 793 2707 3291 3291 3291 1504 3291 3291 891 3291 3291 3291 582 3291 3291 3291 3291 2333 715 4753 3291 3291 4111 4457 4577 3793 3291 3291 3291 1652 1916 3291 3882 251 912 4595 577 1650 3291 3291 3291 143 3506 1658 1944 3291 3291 3673 3291 3291 3291 646 3575 4523 3291 434 3291 1526 3291 3291 3853 4708 2083 3291 3291 2560 2032 825 3291 1770 3291 3291 2960 3291 1517 795 3291 3235 3601 2124 1798 3291 3291 1093 3291 3291 3...', 'output': ['51854645']}, {'input': '7039\\r\\n1790 834 1882 1790 1790 2803 2541 1790 3268 24 922 1790 1790 1790 2078 1790 939 1790 2717 1790 2404 1790 1790 1790 1480 1867 2257 3412 1790 1812 1790 1790 1790 3469 1790 2214 679 1919 3173 468 1790 1790 1790 2321 3045 1790 1790 1790 1329 1790 1790 1790 1790 1730 541 3140 1790 264 1604 2703 1790 1790 1790 2166 1790 1790 1790 1790 1790 949 1790 3427 1217 519 1790 1916 2692 1790 1199 2023 3315 1790 2503 1790 302 1790 1790 1790 1790 1790 2009 1790 1203 3040 1790 2836 1869 1790 1790 2613 1790 1790 2898 15...', 'output': ['37192065']}, {'input': '7716\\r\\n0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 5000 0 5000 0 0 5000 0 0 0 0 0 0 5000 5000 5000 0 0 0 5000 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 5000 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 0 5000 0 0 0 0 5000 5000 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 5000 0 0 0 5000 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...', 'output': ['15317928']}, {'input': '6592\\r\\n0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 5000 0 0 0 5000 5000 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 5000 0 0 0 5000 0 0 0 0 0 5000 5000 0 0 0 0 5000 0 0 5000 5000 0 0 5000 0 5000 0 0 0 5000 0 5000 0 0 0 0 0 5000 0 5000 0 0 5000 5000 0 0 0 0 0 0 0 0 5000 5000 5000 0 0 0 0 0 5000 0 0 0 0 5000 0 0 5000 0 0 0 5000 0 0 5000 5000 0 5000 0 0 0 0 5000 0 0 5000 0 0 0 0 5000 0 0 0 0 0 5000 5000 0 0 5000 0 0 0 5000 0 5000 0 0 5000 0 0 0 0 0 0 5000 0 0 0 5000 0 5000 5000 0 5000 5000 0 0 0 0 5000...', 'output': ['26993178']}, {'input': '6927\\r\\noutput': ['53675016']}, {'input': '8051\\r\\noutput': ['31865649']}, {'input': '8379\\r\\noutput': ['16516587']}, {'input': '831909\\r\\n17 49 28 4 26 17 17 17 34 17 3 18 17 0 28 17 17 45 17 17 17 7 13 17 17 17 17 17 17 17 17 17 19 0 17 43 17 17 17 17 43 17 17 17 17 6 36 17 27 19 47 17 44 0 17 17 20 24 17 17 17 32 15 17 17 25 30 17 17 17 18 3 47 17 17 45 17 17 20 40 3 17 29 17 17 17 17 40 17 17 17 17 31 17 4 47 24 17 19 17 39 17 37 17 47 13 17 3 17 17 20 17 17 48 17 49 34 18 17 13 20 30 19 17 17 17 17 17 12 47 22 42 29 17 20 17 17 17 32 7 7 17 17 17 17 17 46 32 20 17 5 17 17 50 17 17 38 21 17 36 37 18 17 38 17 11 9 8 17 17 48 29 25 ...', 'output': ['31683596']}, {'input': '258037\\r\\n33 8 33 0 33 33 33 48 33 16 40 33 38 23 33 33 33 33 33 4 46 33 17 17 33 6 33 27 33 19 5 33 10 33 27 33 48 12 33 33 33 20 23 33 33 28 11 33 33 33 28 33 50 33 33 33 33 5 33 33 33 33 35 47 33 33 33 3 13 11 33 17 33 33 33 38 33 33 44 3 33 33 33 31 33 33 33 33 33 33 18 8 29 10 33 33 33 33 15 1 37 7 7 33 17 5 33 31 38 33 27 44 17 38 33 33 49 33 33 2 33 33 30 33 31 13 39 46 33 18 28 41 42 33 14 33 33 33 10 8 33 33 33 33 33 33 33 46 33 33 33 25 34 22 33 39 33 30 24 33 33 1 33 44 15 15 33 41 20 33 45 33 27 ...', 'output': ['14441842']}, {'input': '328921\\r\\noutput': ['4404996']}, {'input': '555497\\r\\noutput': ['14931972']}, {'input': '207904\\r\\n50 50 50 0 0 50 0 50 50 50 0 50 50 50 0 50 50 50 50 0 50 0 0 0 50 0 0 0 50 0 0 50 0 50 0 0 0 50 50 0 50 50 50 0 50 0 0 0 0 50 0 50 50 0 50 0 0 0 50 50 50 50 50 50 50 50 50 0 0 50 50 0 50 50 50 50 0 0 0 0 0 50 50 50 0 0 50 0 50 0 50 0 0 0 50 0 50 0 0 50 0 50 50 50 50 50 0 0 50 0 50 0 0 50 50 0 50 0 50 0 0 0 50 0 0 50 0 0 0 0 0 50 0 50 0 50 0 50 0 0 50 50 50 50 50 0 0 0 50 0 50 50 50 50 50 0 50 50 0 0 50 0 50 0 0 0 50 0 50 50 50 0 0 50 0 50 50 50 0 0 0 0 50 50 0 0 50 50 50 50 50 50 50 0 0 0 50 50 50 ...', 'output': ['11221740']}, {'input': '971328\\r\\n50 0 0 0 50 50 0 50 50 50 50 50 50 50 0 50 50 50 50 0 50 50 50 0 50 50 50 50 0 50 50 50 50 0 50 50 50 50 50 50 50 50 0 0 50 50 0 50 50 50 0 0 0 50 50 50 50 50 0 0 50 50 0 0 50 50 0 50 50 50 0 0 50 50 50 0 50 0 50 0 50 50 0 50 0 50 0 50 50 0 50 50 50 50 0 50 50 50 50 50 50 50 50 0 50 50 50 0 0 50 50 0 0 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 0 50 50 50 0 50 0 50 0 0 50 0 50 50 0 0 50 50 50 50 50 50 50 0 50 0 50 50 0 0 0 0 50 50 0 50 50 0 50 50 50 50 50 50 50 50 ...', 'output': ['26290440']}, {'input': '744752\\r\\noutput': ['10077264']}, {'input': '973217\\r\\n2233 4962 2835 1271 712 2124 3765 510 914 3364 2648 3399 744 3777 1516 739 3844 3879 261 863 2101 791 2276 1691 2145 1603 819 2340 415 3123 3260 1225 4746 4672 937 742 3927 25 2177 640 72 245 4053 3213 1322 3725 2842 883 216 4345 815 1534 633 4222 1677 2151 949 2691 2931 1897 1678 2599 4295 953 656 2864 2956 4134 4556 2839 3201 878 4447 270 1517 647 4010 3382 683 660 1393 785 3285 1115 1057 3672 3462 1434 882 122 505 3504 1946 1152 2997 3360 605 966 4034 4790 1344 1579 4482 2472 4484 3325 2852 543 ...', 'output': ['7404434821']}, {'input': '103937\\r\\n1662 2609 1161 2445 296 1285 3447 58 3521 1582 3524 1259 2360 3741 3130 4570 2215 3091 2032 3518 2969 3181 1414 1632 2101 4556 3642 1734 1388 4300 1631 182 1633 3970 1837 3967 1914 3162 915 2404 1208 4583 4334 279 747 2251 4671 4416 4752 3641 3811 1089 3213 740 1502 3880 2044 2766 777 3050 2475 4741 1121 2863 1065 4146 4872 2094 139 755 2780 4115 3442 2104 4030 1891 3037 2769 739 2274 3313 3098 2415 3909 4771 2761 1623 4084 3038 3130 4758 2667 3792 247 8 2846 3218 3485 3149 3845 470 4108 1031 484 3...', 'output': ['783928844']}, {'input': '520065\\r\\n756 4889 1279 756 756 756 756 4981 756 756 3514 3153 756 1559 563 3198 756 1696 756 1161 756 756 4853 1600 2623 3399 756 756 2736 756 756 756 756 756 4089 756 756 1407 3919 1546 1651 756 2430 756 756 756 756 756 756 4836 4582 1305 1304 763 756 4644 4890 756 3162 2611 3242 4455 1792 1882 756 2208 2014 4995 756 2947 2876 4738 756 756 1113 756 891 756 756 756 265 3619 756 756 756 4725 756 756 756 774 4476 4539 214 756 756 125 2452 3861 2363 2240 3842 756 4106 756 1183 756 756 756 756 756 1798 1694 793...', 'output': ['2532637708']}, {'input': '293489\\r\\n1084 4053 780 780 950 694 780 3823 780 780 2601 780 780 1469 3089 780 780 780 780 4707 780 2191 3268 2411 2892 171 3953 4307 340 1869 780 780 4373 4183 3523 780 2859 1053 780 1433 780 780 780 780 780 320 780 780 780 780 1948 2097 780 4234 780 780 780 4624 3124 780 780 3087 780 335 4642 780 780 2633 780 1447 780 780 4153 4532 780 780 3217 780 2340 2143 4089 2517 2085 780 2774 4590 3449 780 780 780 780 3715 4933 1026 2606 780 780 780 927 1997 3757 3730 780 780 780 780 780 4839 1369 780 602 780 1430 2...', 'output': ['1431772162']}, {'input': '546122\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 5000 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 5000 5000 5000 5000 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0...', 'output': ['1063817646']}, {'input': '772698\\r\\n0 5000 0 5000 0 0 0 0 0 5000 5000 0 0 0 0 5000 0 5000 0 0 0 5000 0 0 0 0 0 0 5000 5000 0 0 0 0 0 5000 0 0 0 0 0 5000 5000 0 5000 0 5000 0 0 0 0 5000 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 5000 0 0 0 0 5000 0 5000 5000 0 0 0 5000 0 0 0 5000 0 5000 5000 0 0 0 5000 0 0 0 5000 0 0 5000 0 0 0 0 0 0 5000 0 5000 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 0 0 0 0 0 0 0 0 5000 0 5000 5000 0 0 0 0 5000 0 0 0 5000 0 0 0 0 0 5000 0 0 5000 5000 0 5000 0 0 0 0 5000 0...', 'output': ['3012463572']}, {'input': '331312\\r\\noutput': ['2575933758']}, {'input': '104736\\r\\noutput': ['409458801']}, {'input': '868160\\r\\noutput': ['1683384246']}, {'input': '652655\\r\\n3334 3647 3955 1615 3535 4170 4440 916 3449 2474 1705 3926 4990 3602 1931 3593 1063 1637 3035 3592 4867 1381 2636 4148 2037 3053 2672 4117 3999 3410 3987 3809 1214 2506 4227 1035 3947 2980 4434 4606 1941 506 2430 4660 4704 2335 3672 659 3575 4897 2110 3191 1255 4677 4945 1118 1910 2386 928 630 4433 1229 3359 4875 1579 912 3160 2739 967 2438 4642 2192 4582 4089 4592 4265 2103 1404 4987 2649 601 4729 1050 1838 3316 964 4887 3663 1072 1898 921 2139 1880 4576 4828 3720 4421 1337 2919 4725 573 4563 714 ...', 'output': ['5470312646']}, {'input': '426079\\r\\n2838 696 521 2882 1816 4549 1788 4865 847 828 3444 3010 3490 4211 1926 2653 1094 2830 1268 3453 4906 532 2632 1988 2018 3161 2738 4149 3293 3844 3397 4545 2797 920 2672 2489 3556 1906 4249 662 2529 3906 1460 2151 1230 2527 1916 1727 1206 1011 1446 2586 4323 999 3917 3068 2849 2543 4319 3752 3258 2376 3342 4053 1804 1481 4853 2579 1163 2305 1735 4229 4686 2331 1992 3311 3851 1731 2098 2361 4830 941 3025 1566 3201 1692 2927 1751 4691 1394 3965 3014 1311 3986 1112 1710 3773 555 2357 2535 1687 1859 276...', 'output': ['3563797440']}, {'input': '199503\\r\\n819 819 4407 819 2634 1942 1127 819 1841 2488 819 819 774 4506 4800 1081 599 3091 819 819 4720 3629 819 819 2127 819 1115 819 819 819 819 819 819 819 2505 4087 2733 819 819 819 4835 2398 819 1588 819 2857 3465 819 4081 4347 3965 3529 2022 819 819 2856 819 819 1121 1828 819 819 2151 1524 2595 819 819 819 3629 3952 819 819 819 819 855 819 819 819 4197 819 2830 1026 2311 2606 819 819 4789 1104 2866 819 819 4562 2823 819 819 819 4389 819 3175 819 1115 819 819 819 819 819 3432 3480 819 3975 2524 3140 81...', 'output': ['1068954149']}, {'input': '615631\\r\\n3009 3663 3663 3663 2397 2553 3747 2143 2156 2962 3663 3826 4164 3663 3663 1309 1934 3663 4312 1760 1737 4296 3663 4739 3663 3663 3663 3663 4846 3663 3663 3663 986 2467 3663 3663 3663 3663 3663 2818 3663 3663 3663 3663 3663 3372 3663 3663 3663 4656 3663 3663 4912 3720 3663 3663 3663 4085 3663 3663 3663 4188 1082 4132 4775 1118 3663 3561 1043 3663 2132 4242 4604 3663 3663 3663 3663 3663 3663 3476 3663 2419 3349 3663 3663 3663 1120 3663 3663 3663 3663 2097 3663 4132 3663 4381 4692 3349 3663 3663 2768...', 'output': ['6032856551']}, {'input': '201235\\r\\noutput': ['422388015']}, {'input': '427811\\r\\noutput': ['1809031255']}, {'input': '462860\\r\\noutput': ['3916819805']}, {'input': '236284\\r\\noutput': ['1003533735']}, {'input': '999708\\r\\n5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 501 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 501 5000 5000 5000 5000 5000 5000 501 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 501 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 501 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 500...', 'output': ['2120768420']}, {'input': '1000000\\r\\n48 8 20 45 21 24 8 0 42 18 16 5 49 40 18 22 40 43 41 47 30 15 17 36 25 9 24 29 8 33 29 41 22 5 15 40 21 18 13 49 39 4 38 3 24 36 27 39 9 5 0 38 40 16 42 27 24 10 12 50 41 19 3 19 34 12 42 18 2 7 17 22 11 20 25 48 18 16 25 49 19 34 21 37 4 46 16 21 9 22 1 48 28 27 36 3 49 41 43 48 36 39 8 14 38 0 18 11 37 31 23 12 14 16 38 41 47 14 45 29 34 44 32 13 17 26 44 12 46 50 37 39 40 49 30 11 22 43 19 50 32 27 30 20 28 10 24 2 17 34 12 37 36 29 26 37 21 48 4 11 31 7 30 46 15 6 0 44 47 40 24 10 33 48 33 48 ...', 'output': ['48889749']}, {'input': '1000000\\r\\n14 46 0 25 40 23 14 44 34 31 11 45 22 44 30 13 12 10 5 13 50 46 12 44 18 45 16 11 34 6 37 3 46 18 18 42 42 5 39 24 4 7 35 2 24 24 48 7 44 30 41 44 26 38 41 13 20 23 41 40 48 41 24 2 2 45 47 32 17 44 8 47 46 3 31 2 12 6 34 38 49 41 35 9 40 5 46 24 4 5 30 18 21 15 29 32 49 50 8 40 44 34 24 32 36 34 32 14 18 22 29 4 4 11 31 0 25 28 47 27 17 15 32 9 5 19 45 36 33 44 47 14 18 42 33 40 19 5 25 26 32 6 0 27 37 15 25 49 49 2 35 50 2 13 45 31 15 18 22 28 36 32 5 39 44 41 17 38 1 25 18 17 48 40 3 3 31 29 19...', 'output': ['48862349']}, {'input': '1000000\\r\\n2 27 42 2 2 2 2 4 17 47 2 45 17 2 2 2 2 14 2 42 2 5 15 37 4 5 37 40 2 2 14 17 48 2 2 2 2 37 2 2 46 8 2 45 24 47 29 35 2 2 15 2 2 12 2 34 2 2 43 2 2 23 19 49 2 42 2 3 2 2 2 2 0 5 2 2 2 37 2 2 2 2 3 2 29 2 36 22 50 2 2 43 2 2 2 34 14 1 10 2 19 33 40 3 2 50 21 41 35 13 0 18 18 2 2 2 2 29 21 2 7 2 2 36 8 2 2 2 38 21 30 30 12 2 38 41 2 42 2 16 2 2 43 38 2 42 2 2 2 14 2 2 2 8 15 2 2 5 31 49 41 2 2 29 2 2 2 32 14 2 18 2 2 23 2 2 2 2 2 41 32 2 2 29 2 2 2 21 2 2 2 2 2 24 25 13 2 2 32 2 17 2 2 11 2 21 2 29 ...', 'output': ['24924286']}, {'input': '1000000\\r\\n32 18 30 28 18 36 18 16 18 8 19 18 43 18 18 18 18 18 46 16 18 15 18 4 31 20 26 6 18 14 18 0 18 14 18 17 38 5 30 41 50 18 47 31 18 1 18 18 18 7 18 19 18 12 2 8 26 18 18 18 0 18 17 18 18 18 36 18 44 18 18 18 18 18 18 45 18 43 18 28 37 18 18 18 18 18 5 18 24 18 18 18 18 5 15 19 18 49 18 3 18 18 47 39 18 19 18 2 18 18 32 18 48 31 18 18 12 18 14 28 5 10 5 18 18 46 18 18 18 42 18 9 18 3 18 18 18 7 35 16 18 18 18 18 10 18 18 39 18 41 33 30 10 18 24 18 34 32 18 15 3 15 18 18 1 34 22 18 41 17 18 10 18 18 1...', 'output': ['39529186']}, {'input': '1000000\\r\\noutput': ['13477752']}, {'input': '1000000\\r\\noutput': ['26977860']}, {'input': '1000000\\r\\n50 50 50 50 50 50 0 50 0 0 0 0 0 0 0 0 50 50 50 0 0 0 50 0 0 0 0 50 0 0 50 50 50 50 50 50 0 0 50 50 0 0 0 50 0 0 0 0 50 50 0 0 50 50 50 50 50 0 0 0 0 0 50 50 0 50 0 50 0 50 0 50 0 50 0 0 0 50 0 50 0 0 50 0 50 0 0 50 0 50 0 0 50 50 0 50 0 0 50 0 0 0 0 0 50 0 50 50 0 0 0 0 0 0 0 50 0 0 0 0 0 0 50 50 0 50 0 50 50 0 0 50 50 50 50 50 0 50 0 50 50 50 0 0 0 50 0 0 0 50 50 0 0 50 0 50 50 0 0 0 50 50 0 0 0 50 50 50 0 50 50 0 50 0 0 50 50 50 50 50 50 50 0 50 0 50 50 0 50 50 0 50 50 50 50 50 50 50 0 0 50 0 5...', 'output': ['53993952']}, {'input': '1000000\\r\\noutput': ['26987364']}, {'input': '1000000\\r\\noutput': ['13460904']}, {'input': '1000000\\r\\n4928 5000 4744 3545 3738 2132 1318 4951 2071 1952 2436 3340 2119 2695 4938 4493 4798 575 4969 3520 2191 2873 1960 4032 3857 4548 2212 3864 2948 3089 4829 1148 1656 4725 1963 2766 1319 1971 2937 2979 3194 1866 4461 1519 3195 704 2802 4208 4242 937 1797 2331 3923 801 1677 1718 3754 770 1402 1801 3480 1839 3134 1069 4671 4776 3159 1728 2554 2091 751 626 2234 1416 640 610 1634 4110 4476 1075 2240 3216 3739 4099 4694 925 2824 3432 4434 4320 3411 4658 1378 2193 4301 2762 3768 3874 3815 3882 2439 2911 45...', 'output': ['8384253798']}, {'input': '1000000\\r\\n4637 1302 2880 1973 4301 4845 2403 2820 3359 1121 1066 3885 1101 1911 2875 865 3402 3883 1943 2415 4562 693 1895 2528 2203 2858 3316 3183 3462 3194 1180 667 3088 1856 2257 684 4941 599 1784 4124 2997 729 4662 2207 1177 4995 2535 1128 2688 4949 989 2888 3918 2059 2028 1444 2432 4254 2685 1889 2049 2391 2534 2133 3021 3290 4710 3200 1581 1147 4271 2676 2283 598 1333 1733 3408 1993 2692 2252 4442 1469 3112 960 2265 1455 4820 2984 4120 4641 1432 3231 3896 960 1817 1911 3379 1879 1417 2363 4263 1442 30...', 'output': ['8374983176']}, {'input': '1000000\\r\\n1616 3742 1616 1616 1616 1616 1787 4057 1616 710 4642 3132 1616 1616 1280 1616 3392 1680 1616 1202 2794 1616 714 1036 1616 666 1616 1616 2066 1616 4643 1616 1616 2370 1393 4716 1616 1616 4295 960 2721 3010 1616 1616 1616 3783 1616 3737 2293 1921 2932 3666 4864 1616 1616 3161 1933 1616 2214 4578 1616 1616 2040 2520 1616 1616 4641 1616 1150 1616 1616 896 3297 1616 1616 1185 4532 1616 2888 1616 1616 1616 1246 1616 1616 1616 1616 4534 1616 1616 1753 1174 1616 940 1616 1616 1616 1616 3180 1616 737 2174...', 'output': ['6573578424']}, {'input': '1000000\\r\\n2691 1471 1769 1769 1769 2426 1769 1769 1769 1603 1769 1769 1769 1769 510 1567 1524 1666 1769 1769 1153 1769 1769 1769 2414 1769 1074 1769 3210 2644 1201 3796 1766 1769 1644 577 1769 1918 1855 1769 3024 1769 1769 2995 1769 1769 4565 1769 3576 864 1769 1769 3337 1769 1769 1945 4876 2367 704 1769 1769 3704 1769 3168 1769 2401 1769 2844 1769 4175 2420 4683 1769 1769 1769 3560 1769 1769 1769 1769 1769 2808 1769 4057 4544 1769 1769 2697 2150 1737 2724 1769 3524 1769 1769 3502 1769 1769 1769 1769 1620 2...', 'output': ['6808525559']}, {'input': '1000000\\r\\noutput': ['2113787080']}, {'input': '1000000\\r\\noutput': ['4241621565']}, {'input': '1000000\\r\\noutput': ['8464722245']}, {'input': '1000000\\r\\n5000 5000 5000 5000 5000 501 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 501 5000 501 5000 5000 501 5000 5000 5000 5000 5000 5000 501 5000 5000 5000 501 5000 501 5000 501 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 501 5000 501 501 5000 5000 5000 5000 5000 5000 501 501 5000 5000 501 5000 5000 501 5000 501 501 501 5000 5000 501 5000 5000 5000 501 5000 5000 501 5000 5000 501 501 5000 5000 5000 5000 5000 5000 5000 501 501 501 501 5000 501 5000 ...', 'output': ['4229505890']}, {'input': '1000000\\r\\noutput': ['2122852655']}, {'input': '1000000\\r\\n3491 3862 4899 1602 3307 2481 2146 1000 2479 2072 1534 2587 3924 4181 4835 2449 1976 4441 2217 3227 3297 2989 1754 1498 3742 1437 3766 3234 1072 3972 2514 1055 3883 4655 3452 1827 1874 1349 3202 2450 2946 3550 3879 3214 3123 2445 3893 1771 4218 3032 1325 4404 1421 1531 3754 1412 3178 4801 3290 4438 3677 4018 3175 1981 3353 3939 1512 3645 3759 3630 3769 3848 2031 1011 1771 1278 3021 2768 4761 1697 3561 4706 1464 3090 4827 1058 1120 3602 1808 2849 2244 4170 1928 3584 4395 2628 3674 1812 4074 1723 35...', 'output': ['8999391475']}, {'input': '1000000\\r\\n4525 1819 4273 3463 1648 2372 4978 2585 2374 2402 3570 2924 1135 1647 4411 924 1539 2671 1396 1592 2253 3152 2052 4858 4538 2952 1123 1441 2052 2404 2073 4052 4954 1331 4834 2353 1980 3243 4991 1389 2920 2050 1337 3188 2953 2753 2451 2119 3315 2174 3910 3759 3410 4935 2996 1728 1229 1070 1719 3715 2233 1699 3794 1656 4410 4356 3740 4240 4249 3772 2740 3670 3711 4863 1584 4255 1217 3831 4379 2230 2132 1625 3418 1469 4672 4632 1416 979 1173 3364 1419 1460 3118 3410 1250 1531 4916 3057 4448 4483 3900...', 'output': ['9003221879']}, {'input': '1000000\\r\\n1442 3254 3079 1274 4816 1653 3079 3079 3079 1396 4595 2894 3079 3079 1060 3079 4646 3079 3079 3567 3079 3079 3079 1111 2788 3079 913 3020 1455 3026 3079 3079 4799 3079 1018 3079 3079 3079 3079 2703 4596 3079 3079 3079 3079 3790 4649 3079 3079 3803 1425 3079 1956 3886 3861 3663 3079 3121 2774 2577 4524 3079 3079 1760 3079 3079 3545 3079 3079 3079 1009 3079 3775 4972 4066 3079 1602 3079 1288 3079 3079 3079 3079 3079 3079 1482 3079 3079 3079 3079 3079 2153 3079 1233 4758 1729 3079 1361 2370 3522 119...', 'output': ['9192195816']}, {'input': '1000000\\r\\n3085 4754 3064 4924 4924 3593 3916 3300 4924 2820 3819 4924 2825 2127 4924 3321 3323 4924 2612 4924 4924 4924 4924 4924 2572 4357 4924 4924 1690 4012 3790 4924 4924 4924 4924 2601 1049 4032 3940 4651 3530 4924 2765 2847 3710 2400 3405 2217 4924 4924 4546 1228 4924 4924 2806 4900 1510 4924 4924 4924 4924 3746 2527 4475 3412 4924 4924 4133 4924 4924 4924 3474 4924 4924 1006 4924 4924 1683 2651 2822 2382 2521 3814 4924 2554 4924 4215 3787 4685 2481 3981 4924 4924 3234 4112 4924 1758 4924 4924 4924 37...', 'output': ['12154389312']}, {'input': '4\\r\\n13 14 15 16\\r\\n', 'output': ['76']}, {'input': '3\\r\\n1 5 6\\r\\n', 'output': ['10']}, {'input': '3\\r\\n15 13 2\\r\\n', 'output': ['42']}, {'input': '3\\r\\n1 8 9\\r\\n', 'output': ['20']}, {'input': '3\\r\\n2 5 6\\r\\n', 'output': ['11']}]", "source_code": "import java.io.*;\nimport java.util.*;\nimport java.math.BigInteger;\n\npublic class Main implements Runnable {\n    private void solve() throws IOException {\n        int n = nextInt();\n        int[] k = new int[n];\n        int max = 1;\n        for (int i = 0; i < n; i++) {\n            k[i] = nextInt();\n            max = Math.max(max, k[i]);\n        }\n        // 素因数分解を使って、素数約数を考える。\n        // 素数がある程度多ければ高速になる\n        int[] cnt = new int[max];\n        for (int i = 2; i <= max; i++) {\n            int num = i;\n            while (num!= 1) {\n                if (num % 2 == 0) {\n                    cnt[i] += 1;\n                    num /= 2;\n                } else {\n                    num = num * 3 + 1;\n                    cnt[i] += 1;\n                }\n            }\n            cnt[1] = cnt[i];\n        }\n\n        int ans = 1<<30;\n        for (int i = 2; i <= max; i++) {\n            int cost = 0;\n            for (int j = 0; j < n; j++) {\n                cost += cnt[k[j]%i];\n            }\n            ans = Math.min(ans, cost);\n        }\n        out.println(ans);\n    }\n\n    private int nextInt() throws IOException {\n        return Integer.parseInt(nextToken());\n    }\n\n    private long nextLong() throws IOException {\n        return Long.parseLong(nextToken());\n    }\n\n    private double nextDouble() throws IOException {\n        return Double.parseDouble(nextToken());\n    }\n\n    private String nextToken() throws IOException {\n        while (true) {\n            int c = in.read();\n            if (c == -1) throw new NoSuchElementException();\n            if (c == 13) continue;\n            if (c!= 32) {\n                StringBuffer sb = new StringBuffer();\n                sb.appendCodePoint(c);\n                c = in.read();\n                while (c!= 32 && c!= 10) {\n                    sb.appendCodePoint(c);\n                    c = in.read();\n                }\n                return sb.toString();\n            }\n        }\n    }\n\n    private static boolean isPrime(int n) {\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    private Reader in;\n    private PrintWriter out;\n\n    private static class Reader {\n        private final InputStream in = System.in;\n        private final byte[] buffer = new byte[1024];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n            if (ptr < buflen) {\n                return true;\n            } else {\n                ptr = 0;\n                try {\n                    buflen = in.read(buffer);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                if (buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n        private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n        private static boolean isChar(int c) { return 0 <= c && c <= 255;}\n        private static boolean isEol(int c) { return c == '\\r' || c == '\\n';}\n        private static boolean isSpaceChar(int c) { return c =='' || c == '\\n' || c == '\\r';}\n    }\n\n    public static void main(String[] args) throws IOException {\n        try (Input reader = new StandardInput()) {\n            new Main().run();\n        }\n    }\n\n   "}
{"src_uid": "8c2e0cd780cf9390e933e28e57643cba", "id": 92, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '4\\r\\n0 0\\r\\n1 1\\r\\n0 3\\r\\n1 2\\r\\n', 'output': ['14\\r\\n']}, {'input': '4\\r\\n0 0\\r\\n0 2\\r\\n0 4\\r\\n2 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '3\\r\\n-1 -1\\r\\n1 0\\r\\n3 1\\r\\n', 'output': ['0\\r\\n']}, {'input': '4\\r\\n-10000 -10000\\r\\n-10000 10000\\r\\n10000 -10000\\r\\n10000 10000\\r\\n', 'output': ['13\\r\\n']}, {'input': '4\\r\\n-10000 -10000\\r\\n-10000 -9999\\r\\n10000 10000\\r\\n9999 10000\\r\\n', 'output': ['14\\r\\n']}, {'input': '16\\r\\n0 0\\r\\n0 2\\r\\n0 4\\r\\n0 6\\r\\n2 0\\r\\n2 2\\r\\n2 4\\r\\n2 6\\r\\n4 0\\r\\n4 2\\r\\n4 4\\r\\n4 6\\r\\n6 0\\r\\n6 2\\r\\n6 4\\r\\n6 6\\r\\n', 'output': ['1783\\r\\n']}, {'input': '25\\r\\n-10000 -10000\\r\\n-10000 -5000\\r\\n-10000 0\\r\\n-10000 5000\\r\\n-10000 10000\\r\\n-5000 -10000\\r\\n-5000 -5000\\r\\n-5000 0\\r\\n-5000 5000\\r\\n-5000 10000\\r\\n0 -10000\\r\\n0 -5000\\r\\n0 0\\r\\n0 5000\\r\\n0 10000\\r\\n5000 -10000\\r\\n5000 -5000\\r\\n5000 0\\r\\n5000 5000\\r\\n5000 10000\\r\\n10000 -10000\\r\\n10000 -5000\\r\\n10000 0\\r\\n10000 5000\\r\\n10000 10000\\r\\n', 'output': ['9324\\r\\n']}, {'input': '2\\r\\n10000 10000\\r\\n-10000 -10000\\r\\n', 'output': ['0\\r\\n']}, {'input': '20\\r\\n-5118 -9140\\r\\n-5118 -7807\\r\\n-5118 -5328\\r\\n-5118 -3139\\r\\n-5118 -1442\\r\\n-5118 -1169\\r\\n-5118 -733\\r\\n-5118 3460\\r\\n-5118 8555\\r\\n-5118 9702\\r\\n-3971 -9140\\r\\n-3971 -7807\\r\\n-3971 -5328\\r\\n-3971 -3139\\r\\n-3971 -1442\\r\\n-3971 -1169\\r\\n-3971 -733\\r\\n-3971 3460\\r\\n-3971 8555\\r\\n-3971 9702\\r\\n', 'output': ['5105\\r\\n']}, {'input': '21\\r\\n-8207 -8742\\r\\n-8207 2162\\r\\n-8207 3741\\r\\n-6190 -8742\\r\\n-6190 2162\\r\\n-6190 3741\\r\\n-2214 -8742\\r\\n-2214 2162\\r\\n-2214 3741\\r\\n-1839 -8742\\r\\n-1839 2162\\r\\n-1839 3741\\r\\n207 -8742\\r\\n207 2162\\r\\n207 3741\\r\\n3032 -8742\\r\\n3032 2162\\r\\n3032 3741\\r\\n8740 -8742\\r\\n8740 2162\\r\\n8740 3741\\r\\n', 'output': ['9156\\r\\n']}, {'input': '20\\r\\n-7068 -9088\\r\\n-7068 -7174\\r\\n-7068 -6012\\r\\n-7068 -3037\\r\\n-7068 3299\\r\\n532 -9088\\r\\n532 -7174\\r\\n532 -6012\\r\\n532 -3037\\r\\n532 3299\\r\\n6883 -9088\\r\\n6883 -7174\\r\\n6883 -6012\\r\\n6883 -3037\\r\\n6883 3299\\r\\n8251 -9088\\r\\n8251 -7174\\r\\n8251 -6012\\r\\n8251 -3037\\r\\n8251 3299\\r\\n', 'output': ['8240\\r\\n']}, {'input': '25\\r\\n1964 -4517\\r\\n5939 -4080\\r\\n9503 -7541\\r\\n-5037 -6950\\r\\n-9914 5015\\r\\n-435 7555\\r\\n-9321 -2202\\r\\n-5036 4224\\r\\n4946 -6785\\r\\n-6824 -9830\\r\\n-9124 9117\\r\\n-8396 -2748\\r\\n9284 556\\r\\n-1672 -6681\\r\\n-8782 9912\\r\\n-8164 4679\\r\\n1804 -6201\\r\\n-1155 2405\\r\\n-858 4105\\r\\n419 -7325\\r\\n-8034 -3084\\r\\n-7823 -5829\\r\\n-5784 5391\\r\\n9515 5259\\r\\n-8078 752\\r\\n', 'output': ['44850\\r\\n']}, {'input': '25\\r\\n5061 -2382\\r\\n-4080 9503\\r\\n-4081 9503\\r\\n5061 -2381\\r\\n-6549 9641\\r\\n-8510 6047\\r\\n-8110 8720\\r\\n6829 -8424\\r\\n-1413 -5926\\r\\n2446 -3190\\r\\n5405 8413\\r\\n8272 6829\\r\\n3034 -3978\\r\\n-3403 3036\\r\\n1383 4041\\r\\n829 327\\r\\n-4079 9504\\r\\n9293 -5091\\r\\n486 -5050\\r\\n6384 3727\\r\\n4787 6634\\r\\n4492 1126\\r\\n-1288 -4938\\r\\n4345 8056\\r\\n-3402 3035\\r\\n', 'output': ['43365\\r\\n']}, {'input': '16\\r\\n297 3286\\r\\n-9374 4754\\r\\n7891 -4091\\r\\n6087 -1252\\r\\n3371 -858\\r\\n789 -9370\\r\\n7241 2950\\r\\n-7390 355\\r\\n-5536 -3119\\r\\n2413 -5560\\r\\n4673 7622\\r\\n5344 -9455\\r\\n1918 -8370\\r\\n-6034 -4144\\r\\n9018 -996\\r\\n-7542 -9138\\r\\n', 'output': ['7140\\r\\n']}, {'input': '16\\r\\n-7073 -2432\\r\\n4754 7891\\r\\n4753 7890\\r\\n4755 7892\\r\\n1033 -7465\\r\\n4487 -9951\\r\\n-4613 3633\\r\\n-6753 9089\\r\\n5853 -1919\\r\\n-236 5170\\r\\n4754 7889\\r\\n-9989 -3488\\r\\n-1390 5520\\r\\n3139 8543\\r\\n4754 7890\\r\\n7576 5150\\r\\n', 'output': ['6670\\r\\n']}, {'input': '12\\r\\n1804 -7018\\r\\n-3551 1915\\r\\n-8148 5497\\r\\n-3430 -2988\\r\\n377 -1656\\r\\n-3799 6338\\r\\n-4248 -8428\\r\\n7371 -5005\\r\\n1216 406\\r\\n-294 5589\\r\\n-6477 -8889\\r\\n-8919 3676\\r\\n', 'output': ['2145\\r\\n']}, {'input': '12\\r\\n-9440 -8967\\r\\n1915 -8148\\r\\n-7216 8361\\r\\n6338 -4248\\r\\n-1425 -2251\\r\\n1216 406\\r\\n-2676 8355\\r\\n-8889 -8919\\r\\n-1163 -4185\\r\\n5018 -7302\\r\\n-2724 3986\\r\\n-7890 1900\\r\\n', 'output': ['2016\\r\\n']}, {'input': '10\\r\\n3986 -4462\\r\\n-5492 -8077\\r\\n-5005 4012\\r\\n8092 5848\\r\\n5159 9077\\r\\n-9814 5652\\r\\n-2848 -6707\\r\\n-1528 8298\\r\\n9444 -4143\\r\\n-7928 1163\\r\\n', 'output': ['990\\r\\n']}, {'input': '10\\r\\n-5475 1753\\r\\n-8077 -5005\\r\\n7903 -131\\r\\n5159 9077\\r\\n5159 9076\\r\\n-6761 4557\\r\\n-9188 -9329\\r\\n-4591 617\\r\\n-9686 -6410\\r\\n648 -1608\\r\\n', 'output': ['990\\r\\n']}, {'input': '2\\r\\n6757 4799\\r\\n-1343 -7745\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n8303 2432\\r\\n-7745 -4751\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n-9129 -8491\\r\\n-9129 -1754\\r\\n-9129 -1316\\r\\n1679 -8491\\r\\n1679 -1754\\r\\n1679 -1316\\r\\n', 'output': ['51\\r\\n']}, {'input': '3\\r\\n-4928 7147\\r\\n3808 3567\\r\\n2434 8649\\r\\n', 'output': ['3\\r\\n']}, {'input': '3\\r\\n-1547 4830\\r\\n3567 2434\\r\\n1522 -4418\\r\\n', 'output': ['3\\r\\n']}, {'input': '9\\r\\n-8172 -8016\\r\\n-8172 -63\\r\\n-8172 9586\\r\\n-1609 -8016\\r\\n-1609 -63\\r\\n-1609 9586\\r\\n2972 -8016\\r\\n2972 -63\\r\\n2972 9586\\r\\n', 'output': ['270\\r\\n']}, {'input': '4\\r\\n5648 -804\\r\\n1518 -2267\\r\\n7358 -6618\\r\\n-4504 2047\\r\\n', 'output': ['15\\r\\n']}, {'input': '4\\r\\n-3955 7228\\r\\n-2267 7358\\r\\n-5256 -1266\\r\\n9674 -3048\\r\\n', 'output': ['15\\r\\n']}, {'input': '12\\r\\n796 -415\\r\\n796 169\\r\\n796 2695\\r\\n1979 -415\\r\\n1979 169\\r\\n1979 2695\\r\\n5371 -415\\r\\n5371 169\\r\\n5371 2695\\r\\n8366 -415\\r\\n8366 169\\r\\n8366 2695\\r\\n', 'output': ['894\\r\\n']}, {'input': '5\\r\\n-8893 8986\\r\\n-3629 9045\\r\\n-7719 -6470\\r\\n-258 4491\\r\\n-6902 -6866\\r\\n', 'output': ['45\\r\\n']}, {'input': '5\\r\\n8456 -2932\\r\\n9045 -7719\\r\\n-10000 6748\\r\\n9044 -7720\\r\\n-1125 -914\\r\\n', 'output': ['45\\r\\n']}, {'input': '15\\r\\n-7871 -4833\\r\\n-7871 -1936\\r\\n-7871 425\\r\\n-4790 -4833\\r\\n-4790 -1936\\r\\n-4790 425\\r\\n912 -4833\\r\\n912 -1936\\r\\n912 425\\r\\n4236 -4833\\r\\n4236 -1936\\r\\n4236 425\\r\\n8382 -4833\\r\\n8382 -1936\\r\\n8382 425\\r\\n', 'output': ['2265\\r\\n']}, {'input': '42\\r\\n-5391 -2932\\r\\n-5391 -2868\\r\\n-5391 1744\\r\\n-5391 2236\\r\\n-5391 4148\\r\\n-5391 5217\\r\\n-5391 6188\\r\\n-3584 -2932\\r\\n-3584 -2868\\r\\n-3584 1744\\r\\n-3584 2236\\r\\n-3584 4148\\r\\n-3584 5217\\r\\n-3584 6188\\r\\n-1657 -2932\\r\\n-1657 -2868\\r\\n-1657 1744\\r\\n-1657 2236\\r\\n-1657 4148\\r\\n-1657 5217\\r\\n-1657 6188\\r\\n3218 -2932\\r\\n3218 -2868\\r\\n3218 1744\\r\\n3218 2236\\r\\n3218 4148\\r\\n3218 5217\\r\\n3218 6188\\r\\n7582 -2932\\r\\n7582 -2868\\r\\n7582 1744\\r\\n7582 2236\\r\\n7582 4148\\r\\n7582 5217\\r\\n7582 6188\\r\\n8131 -2932\\r\\n8131 -2868\\r\\n8131 1744\\r\\n8131 2236\\r\\n8131 4148\\r\\n8131 5217\\r\\n8131 6188\\r\\n', 'output': ['206367\\r\\n']}]", "source_code": "import java.io.*;\nimport static java.util.Arrays.deepToString;\nimport static java.util.Arrays.toString;\nimport static java.util.Collections.reverseOrder;\nimport static java.util.Collections.reverseOrder;\nimport static java.util.Collections.reverseOrder;\nimport static java.util.Collections.reverseOrder;\nimport static java.util.stream.Collectors.toList;\n\nimport java.io.*;\nimport java.math.BigDecimal;\nimport java.util.*;\nimport java.math.BigInteger;\n\n\npublic class Main {\n    private static class Reader {\n        final private int BUFFER_SIZE = 1 << 16;\n        private final DataInputStream din = new DataInputStream(System.in);\n        private final byte[] buffer = new byte[BUFFER_SIZE];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n            if (ptr < buflen) {\n                return true;\n            } else {\n                ptr = 0;\n                try {\n                    buflen = din.read(buffer);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                if (buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n        private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n        public boolean hasNext() { while(hasNextByte() &&!isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\n        public String next() {\n            if (!hasNext()) throw new NoSuchElementException();\n            StringBuilder sb = new StringBuilder();\n            int b = readByte();\n            while(isPrintableChar(b)) {\n                sb.appendCodePoint(b);\n                b = readByte();\n            }\n            return sb.toString();\n        }\n        public long nextLong() {\n            if (!hasNext()) throw new NoSuchElementException();\n            long n = 0;\n            boolean minus = false;\n            int b = readByte();\n            if (b == '-') {\n                minus = true;\n                b = readByte();\n            }\n            if (b < '0' || '9' < b) {\n                throw new NumberFormatException();\n            }\n            while(true){\n                if ('0' <= b && b <= '9') {\n                    n *= 10;\n                    n += b - '0';\n                } else if (b == -1 ||!isPrintableChar(b)) {\n                    return minus? -n : n;\n                } else {\n                    throw new NumberFormatException();\n                }\n                b = readByte();\n            }\n        }\n        public int nextInt() {\n            long nl = nextLong();\n            if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) throw new NumberFormatException();\n            return (int) nl;\n        }\n        public double nextDouble() { return Double.parseDouble(next());}\n        public int[] readIntArray() { return readIntArray(nextInt());}\n        public int[] readIntArray(int size) { int[] array = new int[size]; for(int i=0; i<array.length; i++) array[i] = nextInt(); return array;}\n        public long[] readLongArray(int size) { long[] array = new long[size]; for(int i=0; i<array.length; i++) array[i] = nextLong(); return array;}\n    }\n\n    private static long gcd(long a, long b) { return b == 0? a : gcd(b, a%b);}\n\n    private static long lcm(long a, long b) { return a/gcd(a, b)*b;}\n\n    public static void main(String[] args) throws IOException {\n        try (Input reader = new StandardInput()) {\n            int n = reader.nextInt();\n            long[] x = new long[n], y = new long[n], result = new long[n];\n            for(int i=0; i<n; i++) {\n                x[i] = reader.nextLong();\n            }\n"}
{"src_uid": "8c2e0cd780cf9390e933e28e57643cba", "id": 92, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '4\\r\\n0 0\\r\\n1 1\\r\\n0 3\\r\\n1 2\\r\\n', 'output': ['14\\r\\n']}, {'input': '4\\r\\n0 0\\r\\n0 2\\r\\n0 4\\r\\n2 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '3\\r\\n-1 -1\\r\\n1 0\\r\\n3 1\\r\\n', 'output': ['0\\r\\n']}, {'input': '4\\r\\n-10000 -10000\\r\\n-10000 10000\\r\\n10000 -10000\\r\\n10000 10000\\r\\n', 'output': ['13\\r\\n']}, {'input': '4\\r\\n-10000 -10000\\r\\n-10000 -9999\\r\\n10000 10000\\r\\n9999 10000\\r\\n', 'output': ['14\\r\\n']}, {'input': '16\\r\\n0 0\\r\\n0 2\\r\\n0 4\\r\\n0 6\\r\\n2 0\\r\\n2 2\\r\\n2 4\\r\\n2 6\\r\\n4 0\\r\\n4 2\\r\\n4 4\\r\\n4 6\\r\\n6 0\\r\\n6 2\\r\\n6 4\\r\\n6 6\\r\\n', 'output': ['1783\\r\\n']}, {'input': '25\\r\\n-10000 -10000\\r\\n-10000 -5000\\r\\n-10000 0\\r\\n-10000 5000\\r\\n-10000 10000\\r\\n-5000 -10000\\r\\n-5000 -5000\\r\\n-5000 0\\r\\n-5000 5000\\r\\n-5000 10000\\r\\n0 -10000\\r\\n0 -5000\\r\\n0 0\\r\\n0 5000\\r\\n0 10000\\r\\n5000 -10000\\r\\n5000 -5000\\r\\n5000 0\\r\\n5000 5000\\r\\n5000 10000\\r\\n10000 -10000\\r\\n10000 -5000\\r\\n10000 0\\r\\n10000 5000\\r\\n10000 10000\\r\\n', 'output': ['9324\\r\\n']}, {'input': '2\\r\\n10000 10000\\r\\n-10000 -10000\\r\\n', 'output': ['0\\r\\n']}, {'input': '20\\r\\n-5118 -9140\\r\\n-5118 -7807\\r\\n-5118 -5328\\r\\n-5118 -3139\\r\\n-5118 -1442\\r\\n-5118 -1169\\r\\n-5118 -733\\r\\n-5118 3460\\r\\n-5118 8555\\r\\n-5118 9702\\r\\n-3971 -9140\\r\\n-3971 -7807\\r\\n-3971 -5328\\r\\n-3971 -3139\\r\\n-3971 -1442\\r\\n-3971 -1169\\r\\n-3971 -733\\r\\n-3971 3460\\r\\n-3971 8555\\r\\n-3971 9702\\r\\n', 'output': ['5105\\r\\n']}, {'input': '21\\r\\n-8207 -8742\\r\\n-8207 2162\\r\\n-8207 3741\\r\\n-6190 -8742\\r\\n-6190 2162\\r\\n-6190 3741\\r\\n-2214 -8742\\r\\n-2214 2162\\r\\n-2214 3741\\r\\n-1839 -8742\\r\\n-1839 2162\\r\\n-1839 3741\\r\\n207 -8742\\r\\n207 2162\\r\\n207 3741\\r\\n3032 -8742\\r\\n3032 2162\\r\\n3032 3741\\r\\n8740 -8742\\r\\n8740 2162\\r\\n8740 3741\\r\\n', 'output': ['9156\\r\\n']}, {'input': '20\\r\\n-7068 -9088\\r\\n-7068 -7174\\r\\n-7068 -6012\\r\\n-7068 -3037\\r\\n-7068 3299\\r\\n532 -9088\\r\\n532 -7174\\r\\n532 -6012\\r\\n532 -3037\\r\\n532 3299\\r\\n6883 -9088\\r\\n6883 -7174\\r\\n6883 -6012\\r\\n6883 -3037\\r\\n6883 3299\\r\\n8251 -9088\\r\\n8251 -7174\\r\\n8251 -6012\\r\\n8251 -3037\\r\\n8251 3299\\r\\n', 'output': ['8240\\r\\n']}, {'input': '25\\r\\n1964 -4517\\r\\n5939 -4080\\r\\n9503 -7541\\r\\n-5037 -6950\\r\\n-9914 5015\\r\\n-435 7555\\r\\n-9321 -2202\\r\\n-5036 4224\\r\\n4946 -6785\\r\\n-6824 -9830\\r\\n-9124 9117\\r\\n-8396 -2748\\r\\n9284 556\\r\\n-1672 -6681\\r\\n-8782 9912\\r\\n-8164 4679\\r\\n1804 -6201\\r\\n-1155 2405\\r\\n-858 4105\\r\\n419 -7325\\r\\n-8034 -3084\\r\\n-7823 -5829\\r\\n-5784 5391\\r\\n9515 5259\\r\\n-8078 752\\r\\n', 'output': ['44850\\r\\n']}, {'input': '25\\r\\n5061 -2382\\r\\n-4080 9503\\r\\n-4081 9503\\r\\n5061 -2381\\r\\n-6549 9641\\r\\n-8510 6047\\r\\n-8110 8720\\r\\n6829 -8424\\r\\n-1413 -5926\\r\\n2446 -3190\\r\\n5405 8413\\r\\n8272 6829\\r\\n3034 -3978\\r\\n-3403 3036\\r\\n1383 4041\\r\\n829 327\\r\\n-4079 9504\\r\\n9293 -5091\\r\\n486 -5050\\r\\n6384 3727\\r\\n4787 6634\\r\\n4492 1126\\r\\n-1288 -4938\\r\\n4345 8056\\r\\n-3402 3035\\r\\n', 'output': ['43365\\r\\n']}, {'input': '16\\r\\n297 3286\\r\\n-9374 4754\\r\\n7891 -4091\\r\\n6087 -1252\\r\\n3371 -858\\r\\n789 -9370\\r\\n7241 2950\\r\\n-7390 355\\r\\n-5536 -3119\\r\\n2413 -5560\\r\\n4673 7622\\r\\n5344 -9455\\r\\n1918 -8370\\r\\n-6034 -4144\\r\\n9018 -996\\r\\n-7542 -9138\\r\\n', 'output': ['7140\\r\\n']}, {'input': '16\\r\\n-7073 -2432\\r\\n4754 7891\\r\\n4753 7890\\r\\n4755 7892\\r\\n1033 -7465\\r\\n4487 -9951\\r\\n-4613 3633\\r\\n-6753 9089\\r\\n5853 -1919\\r\\n-236 5170\\r\\n4754 7889\\r\\n-9989 -3488\\r\\n-1390 5520\\r\\n3139 8543\\r\\n4754 7890\\r\\n7576 5150\\r\\n', 'output': ['6670\\r\\n']}, {'input': '12\\r\\n1804 -7018\\r\\n-3551 1915\\r\\n-8148 5497\\r\\n-3430 -2988\\r\\n377 -1656\\r\\n-3799 6338\\r\\n-4248 -8428\\r\\n7371 -5005\\r\\n1216 406\\r\\n-294 5589\\r\\n-6477 -8889\\r\\n-8919 3676\\r\\n', 'output': ['2145\\r\\n']}, {'input': '12\\r\\n-9440 -8967\\r\\n1915 -8148\\r\\n-7216 8361\\r\\n6338 -4248\\r\\n-1425 -2251\\r\\n1216 406\\r\\n-2676 8355\\r\\n-8889 -8919\\r\\n-1163 -4185\\r\\n5018 -7302\\r\\n-2724 3986\\r\\n-7890 1900\\r\\n', 'output': ['2016\\r\\n']}, {'input': '10\\r\\n3986 -4462\\r\\n-5492 -8077\\r\\n-5005 4012\\r\\n8092 5848\\r\\n5159 9077\\r\\n-9814 5652\\r\\n-2848 -6707\\r\\n-1528 8298\\r\\n9444 -4143\\r\\n-7928 1163\\r\\n', 'output': ['990\\r\\n']}, {'input': '10\\r\\n-5475 1753\\r\\n-8077 -5005\\r\\n7903 -131\\r\\n5159 9077\\r\\n5159 9076\\r\\n-6761 4557\\r\\n-9188 -9329\\r\\n-4591 617\\r\\n-9686 -6410\\r\\n648 -1608\\r\\n', 'output': ['990\\r\\n']}, {'input': '2\\r\\n6757 4799\\r\\n-1343 -7745\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n8303 2432\\r\\n-7745 -4751\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n-9129 -8491\\r\\n-9129 -1754\\r\\n-9129 -1316\\r\\n1679 -8491\\r\\n1679 -1754\\r\\n1679 -1316\\r\\n', 'output': ['51\\r\\n']}, {'input': '3\\r\\n-4928 7147\\r\\n3808 3567\\r\\n2434 8649\\r\\n', 'output': ['3\\r\\n']}, {'input': '3\\r\\n-1547 4830\\r\\n3567 2434\\r\\n1522 -4418\\r\\n', 'output': ['3\\r\\n']}, {'input': '9\\r\\n-8172 -8016\\r\\n-8172 -63\\r\\n-8172 9586\\r\\n-1609 -8016\\r\\n-1609 -63\\r\\n-1609 9586\\r\\n2972 -8016\\r\\n2972 -63\\r\\n2972 9586\\r\\n', 'output': ['270\\r\\n']}, {'input': '4\\r\\n5648 -804\\r\\n1518 -2267\\r\\n7358 -6618\\r\\n-4504 2047\\r\\n', 'output': ['15\\r\\n']}, {'input': '4\\r\\n-3955 7228\\r\\n-2267 7358\\r\\n-5256 -1266\\r\\n9674 -3048\\r\\n', 'output': ['15\\r\\n']}, {'input': '12\\r\\n796 -415\\r\\n796 169\\r\\n796 2695\\r\\n1979 -415\\r\\n1979 169\\r\\n1979 2695\\r\\n5371 -415\\r\\n5371 169\\r\\n5371 2695\\r\\n8366 -415\\r\\n8366 169\\r\\n8366 2695\\r\\n', 'output': ['894\\r\\n']}, {'input': '5\\r\\n-8893 8986\\r\\n-3629 9045\\r\\n-7719 -6470\\r\\n-258 4491\\r\\n-6902 -6866\\r\\n', 'output': ['45\\r\\n']}, {'input': '5\\r\\n8456 -2932\\r\\n9045 -7719\\r\\n-10000 6748\\r\\n9044 -7720\\r\\n-1125 -914\\r\\n', 'output': ['45\\r\\n']}, {'input': '15\\r\\n-7871 -4833\\r\\n-7871 -1936\\r\\n-7871 425\\r\\n-4790 -4833\\r\\n-4790 -1936\\r\\n-4790 425\\r\\n912 -4833\\r\\n912 -1936\\r\\n912 425\\r\\n4236 -4833\\r\\n4236 -1936\\r\\n4236 425\\r\\n8382 -4833\\r\\n8382 -1936\\r\\n8382 425\\r\\n', 'output': ['2265\\r\\n']}, {'input': '42\\r\\n-5391 -2932\\r\\n-5391 -2868\\r\\n-5391 1744\\r\\n-5391 2236\\r\\n-5391 4148\\r\\n-5391 5217\\r\\n-5391 6188\\r\\n-3584 -2932\\r\\n-3584 -2868\\r\\n-3584 1744\\r\\n-3584 2236\\r\\n-3584 4148\\r\\n-3584 5217\\r\\n-3584 6188\\r\\n-1657 -2932\\r\\n-1657 -2868\\r\\n-1657 1744\\r\\n-1657 2236\\r\\n-1657 4148\\r\\n-1657 5217\\r\\n-1657 6188\\r\\n3218 -2932\\r\\n3218 -2868\\r\\n3218 1744\\r\\n3218 2236\\r\\n3218 4148\\r\\n3218 5217\\r\\n3218 6188\\r\\n7582 -2932\\r\\n7582 -2868\\r\\n7582 1744\\r\\n7582 2236\\r\\n7582 4148\\r\\n7582 5217\\r\\n7582 6188\\r\\n8131 -2932\\r\\n8131 -2868\\r\\n8131 1744\\r\\n8131 2236\\r\\n8131 4148\\r\\n8131 5217\\r\\n8131 6188\\r\\n', 'output': ['206367\\r\\n']}]", "source_code": "import java.util.*;\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint N = input.nextInt(), count = 0;\n\t\tint[][] poles = new int [N][2];\n\t\t\n\t\tfor(int i = 0 ; i < N ; i++) {\n\t\t\tfor(int j = 0 ; j < 2 ; j++) {\n\t\t\t\tpoles[i][j] = input.nextInt();\n\t\t\t}\n\t\t}\n\t\tfor(int a = 0 ; a < N-1 ; a++) {\n\t\t\tfor(int b = a+1 ; b < N ; b++) {\n\t\t\t\tif(poles[a][0] == poles[b][0]) {\n\t\t\t\t\tfor(int c = 0 ; c < N ; c++) {\n\t\t\t\t\t\tif(c == a || c == b) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(poles[a][1] <= poles[c][1] && poles[b][1] >= poles[c][1] || \n\t\t\t\t\t\t\t\t\t poles[a][1] >= poles[c][1] && poles[b][1] <= poles[c][1]) {\n\t\t\t\t\t\t\t\tcount += 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if((poles[a][0] == poles[b][0] && poles[a][1] == poles[b][1]) ||\n\t\t\t\t\t\t(poles[a][1] == poles[b][0] && poles[a][0] == poles[b][1])) {\n\t\t\t\t\tcount--;\n\t\t\t\t}\n\t\t\t\telse if(poles[a][0] == poles[b][0]) {\n\t\t\t\t\tfor(int c = 0 ; c < N ; c++) {\n\t\t\t\t\t\tif(c == a || c == b) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(poles[a][1] <= poles[c][1] && poles[b][1] >= poles[c][1]) {\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(poles[a][1] == poles[b][1]) {\n\t\t\t\t\tfor(int c = 0 ; c < N ; c++) {\n\t\t\t\t\t\tif(c == a || c == b) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(poles[a][0] <= poles[c][0] && poles[b][0] >= poles[c][0]) {\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdouble a1 = poles[a][1] - poles[a][0], b1 = poles[b][1] - poles[b][0];\n\t\t\t\t\tfor(int c = 0 ; c < N ; c++) {\n\t\t\t\t\t\tif(c == a || c == b) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(poles[a][0] == poles[c][0] && poles[b][1] == poles[c][1] ||\n\t\t\t\t\t\t\t\tpoles[a][1] == poles[c][0] && poles[b][0] == poles[c][1]) {\n\t\t\t\t\t\t\t\tcount--;\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdouble c1 = poles[c][1] - poles[c]["}
{"src_uid": "8c2e0cd780cf9390e933e28e57643cba", "id": 92, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '4\\r\\n0 0\\r\\n1 1\\r\\n0 3\\r\\n1 2\\r\\n', 'output': ['14\\r\\n']}, {'input': '4\\r\\n0 0\\r\\n0 2\\r\\n0 4\\r\\n2 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '3\\r\\n-1 -1\\r\\n1 0\\r\\n3 1\\r\\n', 'output': ['0\\r\\n']}, {'input': '4\\r\\n-10000 -10000\\r\\n-10000 10000\\r\\n10000 -10000\\r\\n10000 10000\\r\\n', 'output': ['13\\r\\n']}, {'input': '4\\r\\n-10000 -10000\\r\\n-10000 -9999\\r\\n10000 10000\\r\\n9999 10000\\r\\n', 'output': ['14\\r\\n']}, {'input': '16\\r\\n0 0\\r\\n0 2\\r\\n0 4\\r\\n0 6\\r\\n2 0\\r\\n2 2\\r\\n2 4\\r\\n2 6\\r\\n4 0\\r\\n4 2\\r\\n4 4\\r\\n4 6\\r\\n6 0\\r\\n6 2\\r\\n6 4\\r\\n6 6\\r\\n', 'output': ['1783\\r\\n']}, {'input': '25\\r\\n-10000 -10000\\r\\n-10000 -5000\\r\\n-10000 0\\r\\n-10000 5000\\r\\n-10000 10000\\r\\n-5000 -10000\\r\\n-5000 -5000\\r\\n-5000 0\\r\\n-5000 5000\\r\\n-5000 10000\\r\\n0 -10000\\r\\n0 -5000\\r\\n0 0\\r\\n0 5000\\r\\n0 10000\\r\\n5000 -10000\\r\\n5000 -5000\\r\\n5000 0\\r\\n5000 5000\\r\\n5000 10000\\r\\n10000 -10000\\r\\n10000 -5000\\r\\n10000 0\\r\\n10000 5000\\r\\n10000 10000\\r\\n', 'output': ['9324\\r\\n']}, {'input': '2\\r\\n10000 10000\\r\\n-10000 -10000\\r\\n', 'output': ['0\\r\\n']}, {'input': '20\\r\\n-5118 -9140\\r\\n-5118 -7807\\r\\n-5118 -5328\\r\\n-5118 -3139\\r\\n-5118 -1442\\r\\n-5118 -1169\\r\\n-5118 -733\\r\\n-5118 3460\\r\\n-5118 8555\\r\\n-5118 9702\\r\\n-3971 -9140\\r\\n-3971 -7807\\r\\n-3971 -5328\\r\\n-3971 -3139\\r\\n-3971 -1442\\r\\n-3971 -1169\\r\\n-3971 -733\\r\\n-3971 3460\\r\\n-3971 8555\\r\\n-3971 9702\\r\\n', 'output': ['5105\\r\\n']}, {'input': '21\\r\\n-8207 -8742\\r\\n-8207 2162\\r\\n-8207 3741\\r\\n-6190 -8742\\r\\n-6190 2162\\r\\n-6190 3741\\r\\n-2214 -8742\\r\\n-2214 2162\\r\\n-2214 3741\\r\\n-1839 -8742\\r\\n-1839 2162\\r\\n-1839 3741\\r\\n207 -8742\\r\\n207 2162\\r\\n207 3741\\r\\n3032 -8742\\r\\n3032 2162\\r\\n3032 3741\\r\\n8740 -8742\\r\\n8740 2162\\r\\n8740 3741\\r\\n', 'output': ['9156\\r\\n']}, {'input': '20\\r\\n-7068 -9088\\r\\n-7068 -7174\\r\\n-7068 -6012\\r\\n-7068 -3037\\r\\n-7068 3299\\r\\n532 -9088\\r\\n532 -7174\\r\\n532 -6012\\r\\n532 -3037\\r\\n532 3299\\r\\n6883 -9088\\r\\n6883 -7174\\r\\n6883 -6012\\r\\n6883 -3037\\r\\n6883 3299\\r\\n8251 -9088\\r\\n8251 -7174\\r\\n8251 -6012\\r\\n8251 -3037\\r\\n8251 3299\\r\\n', 'output': ['8240\\r\\n']}, {'input': '25\\r\\n1964 -4517\\r\\n5939 -4080\\r\\n9503 -7541\\r\\n-5037 -6950\\r\\n-9914 5015\\r\\n-435 7555\\r\\n-9321 -2202\\r\\n-5036 4224\\r\\n4946 -6785\\r\\n-6824 -9830\\r\\n-9124 9117\\r\\n-8396 -2748\\r\\n9284 556\\r\\n-1672 -6681\\r\\n-8782 9912\\r\\n-8164 4679\\r\\n1804 -6201\\r\\n-1155 2405\\r\\n-858 4105\\r\\n419 -7325\\r\\n-8034 -3084\\r\\n-7823 -5829\\r\\n-5784 5391\\r\\n9515 5259\\r\\n-8078 752\\r\\n', 'output': ['44850\\r\\n']}, {'input': '25\\r\\n5061 -2382\\r\\n-4080 9503\\r\\n-4081 9503\\r\\n5061 -2381\\r\\n-6549 9641\\r\\n-8510 6047\\r\\n-8110 8720\\r\\n6829 -8424\\r\\n-1413 -5926\\r\\n2446 -3190\\r\\n5405 8413\\r\\n8272 6829\\r\\n3034 -3978\\r\\n-3403 3036\\r\\n1383 4041\\r\\n829 327\\r\\n-4079 9504\\r\\n9293 -5091\\r\\n486 -5050\\r\\n6384 3727\\r\\n4787 6634\\r\\n4492 1126\\r\\n-1288 -4938\\r\\n4345 8056\\r\\n-3402 3035\\r\\n', 'output': ['43365\\r\\n']}, {'input': '16\\r\\n297 3286\\r\\n-9374 4754\\r\\n7891 -4091\\r\\n6087 -1252\\r\\n3371 -858\\r\\n789 -9370\\r\\n7241 2950\\r\\n-7390 355\\r\\n-5536 -3119\\r\\n2413 -5560\\r\\n4673 7622\\r\\n5344 -9455\\r\\n1918 -8370\\r\\n-6034 -4144\\r\\n9018 -996\\r\\n-7542 -9138\\r\\n', 'output': ['7140\\r\\n']}, {'input': '16\\r\\n-7073 -2432\\r\\n4754 7891\\r\\n4753 7890\\r\\n4755 7892\\r\\n1033 -7465\\r\\n4487 -9951\\r\\n-4613 3633\\r\\n-6753 9089\\r\\n5853 -1919\\r\\n-236 5170\\r\\n4754 7889\\r\\n-9989 -3488\\r\\n-1390 5520\\r\\n3139 8543\\r\\n4754 7890\\r\\n7576 5150\\r\\n', 'output': ['6670\\r\\n']}, {'input': '12\\r\\n1804 -7018\\r\\n-3551 1915\\r\\n-8148 5497\\r\\n-3430 -2988\\r\\n377 -1656\\r\\n-3799 6338\\r\\n-4248 -8428\\r\\n7371 -5005\\r\\n1216 406\\r\\n-294 5589\\r\\n-6477 -8889\\r\\n-8919 3676\\r\\n', 'output': ['2145\\r\\n']}, {'input': '12\\r\\n-9440 -8967\\r\\n1915 -8148\\r\\n-7216 8361\\r\\n6338 -4248\\r\\n-1425 -2251\\r\\n1216 406\\r\\n-2676 8355\\r\\n-8889 -8919\\r\\n-1163 -4185\\r\\n5018 -7302\\r\\n-2724 3986\\r\\n-7890 1900\\r\\n', 'output': ['2016\\r\\n']}, {'input': '10\\r\\n3986 -4462\\r\\n-5492 -8077\\r\\n-5005 4012\\r\\n8092 5848\\r\\n5159 9077\\r\\n-9814 5652\\r\\n-2848 -6707\\r\\n-1528 8298\\r\\n9444 -4143\\r\\n-7928 1163\\r\\n', 'output': ['990\\r\\n']}, {'input': '10\\r\\n-5475 1753\\r\\n-8077 -5005\\r\\n7903 -131\\r\\n5159 9077\\r\\n5159 9076\\r\\n-6761 4557\\r\\n-9188 -9329\\r\\n-4591 617\\r\\n-9686 -6410\\r\\n648 -1608\\r\\n', 'output': ['990\\r\\n']}, {'input': '2\\r\\n6757 4799\\r\\n-1343 -7745\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n8303 2432\\r\\n-7745 -4751\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n-9129 -8491\\r\\n-9129 -1754\\r\\n-9129 -1316\\r\\n1679 -8491\\r\\n1679 -1754\\r\\n1679 -1316\\r\\n', 'output': ['51\\r\\n']}, {'input': '3\\r\\n-4928 7147\\r\\n3808 3567\\r\\n2434 8649\\r\\n', 'output': ['3\\r\\n']}, {'input': '3\\r\\n-1547 4830\\r\\n3567 2434\\r\\n1522 -4418\\r\\n', 'output': ['3\\r\\n']}, {'input': '9\\r\\n-8172 -8016\\r\\n-8172 -63\\r\\n-8172 9586\\r\\n-1609 -8016\\r\\n-1609 -63\\r\\n-1609 9586\\r\\n2972 -8016\\r\\n2972 -63\\r\\n2972 9586\\r\\n', 'output': ['270\\r\\n']}, {'input': '4\\r\\n5648 -804\\r\\n1518 -2267\\r\\n7358 -6618\\r\\n-4504 2047\\r\\n', 'output': ['15\\r\\n']}, {'input': '4\\r\\n-3955 7228\\r\\n-2267 7358\\r\\n-5256 -1266\\r\\n9674 -3048\\r\\n', 'output': ['15\\r\\n']}, {'input': '12\\r\\n796 -415\\r\\n796 169\\r\\n796 2695\\r\\n1979 -415\\r\\n1979 169\\r\\n1979 2695\\r\\n5371 -415\\r\\n5371 169\\r\\n5371 2695\\r\\n8366 -415\\r\\n8366 169\\r\\n8366 2695\\r\\n', 'output': ['894\\r\\n']}, {'input': '5\\r\\n-8893 8986\\r\\n-3629 9045\\r\\n-7719 -6470\\r\\n-258 4491\\r\\n-6902 -6866\\r\\n', 'output': ['45\\r\\n']}, {'input': '5\\r\\n8456 -2932\\r\\n9045 -7719\\r\\n-10000 6748\\r\\n9044 -7720\\r\\n-1125 -914\\r\\n', 'output': ['45\\r\\n']}, {'input': '15\\r\\n-7871 -4833\\r\\n-7871 -1936\\r\\n-7871 425\\r\\n-4790 -4833\\r\\n-4790 -1936\\r\\n-4790 425\\r\\n912 -4833\\r\\n912 -1936\\r\\n912 425\\r\\n4236 -4833\\r\\n4236 -1936\\r\\n4236 425\\r\\n8382 -4833\\r\\n8382 -1936\\r\\n8382 425\\r\\n', 'output': ['2265\\r\\n']}, {'input': '42\\r\\n-5391 -2932\\r\\n-5391 -2868\\r\\n-5391 1744\\r\\n-5391 2236\\r\\n-5391 4148\\r\\n-5391 5217\\r\\n-5391 6188\\r\\n-3584 -2932\\r\\n-3584 -2868\\r\\n-3584 1744\\r\\n-3584 2236\\r\\n-3584 4148\\r\\n-3584 5217\\r\\n-3584 6188\\r\\n-1657 -2932\\r\\n-1657 -2868\\r\\n-1657 1744\\r\\n-1657 2236\\r\\n-1657 4148\\r\\n-1657 5217\\r\\n-1657 6188\\r\\n3218 -2932\\r\\n3218 -2868\\r\\n3218 1744\\r\\n3218 2236\\r\\n3218 4148\\r\\n3218 5217\\r\\n3218 6188\\r\\n7582 -2932\\r\\n7582 -2868\\r\\n7582 1744\\r\\n7582 2236\\r\\n7582 4148\\r\\n7582 5217\\r\\n7582 6188\\r\\n8131 -2932\\r\\n8131 -2868\\r\\n8131 1744\\r\\n8131 2236\\r\\n8131 4148\\r\\n8131 5217\\r\\n8131 6188\\r\\n', 'output': ['206367\\r\\n']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\n\npublic class Main {\n  public static void main(String[] args) throws IOException {\n    \n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    InputReader input = new InputReader(inputStream);\n    PrintWriter out = new PrintWriter(outputStream);\n    Task solver = new Task();\n    solver.solve();\n    out.close();\n  }\n\n  private static class Task {\n    int n;\n    int [] x;\n    int [] y;\n    String [] ans = new String[30];\n    \n    void solve() throws IOException {\n      n = input.nextInt();\n      x = new int [n];\n      y = new int [n];\n      \n      for(int i = 0;i < n;++i){\n        x[i] = input.nextInt();\n        y[i] = input.nextInt();\n      }\n      \n      ans[1] = \"\";\n      for(int i = 1;i < n;++i){\n        ans[i + 1] = \"\";\n        for(int j = 0;j < i;++j){\n          if(x[i]!= x[j]){\n            ans[i + 1] += \"+\" + ((y[i] - y[j]) * (x[j] - x[i]));\n          }\n          else{\n            if(y[i] > y[j]){\n              ans[i + 1] += \"+\" + ((y[j] - y[i]) * (x[j] - x[i]));\n            }\n            else{\n              ans[i + 1] += \"-\" + ((y[i] - y[j]) * (x[j] - x[i]));\n            }\n          }\n        }\n      }\n      \n      for(int i = 2;i <= n;++i){\n        ans[i] = ans[i].replaceAll(\"[+-]0\", \"\");\n        ans[i] = ans[i].replaceAll(\"\\\\+\", \"\");\n        ans[i] = ans[i].replaceAll(\"-\", \"-\");\n      }\n      \n      int cnt = 0;\n      for(int i = 2;i <= n;++i){\n        if(ans[i].length()!= 0){\n          cnt++;\n        }\n      }\n      \n      out.print(cnt);\n    }\n    \n    private class Reader {\n      final private int BUFFER_SIZE = 1 << 16;\n      private DataInputStream din;\n      private byte[] buffer;\n      private int bufferPointer, bytesRead;\n      \n      public Reader() throws IOException {\n        din = new DataInputStream(System.in);\n        buffer = new byte[BUFFER_SIZE];\n        bufferPointer = bytesRead = 0;\n      }\n      \n      public Reader(String file_name) throws IOException {\n        din = new DataInputStream(new FileInputStream(file_name));\n        buffer = new byte[BUFFER_SIZE];\n        bufferPointer = bytesRead = 0;\n      }\n      \n      public String readLine() throws IOException {\n        byte[] buf = new byte[64]; // line length\n        int cnt = 0, c;\n        while ((c = read())!= -1) {\n          if (c == '\\n') {\n            return new String(buf, 0, cnt);\n          }\n          buf[cnt++] = (byte) c;\n        }\n        return new String(buf, 0, cnt);\n      }\n      \n      public int nextInt() throws IOException {\n        int ret = 0;\n        byte c = read();\n        while (c <='') {\n          c = read();\n        }\n        boolean neg = (c == '-');\n        if (neg) {\n          c = read();\n        }\n        do {\n          ret = ret * 10 + c - '0';\n        }  while ((c = read()) >= '0' && c <= '9');\n        if (neg) {\n          return -ret;\n        }\n        return ret;\n      }\n      \n      public long nextLong() throws IOException {\n        long ret = 0;\n        byte c = read();\n        while (c"}
{"src_uid": "8c2e0cd780cf9390e933e28e57643cba", "id": 92, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '4\\r\\n0 0\\r\\n1 1\\r\\n0 3\\r\\n1 2\\r\\n', 'output': ['14\\r\\n']}, {'input': '4\\r\\n0 0\\r\\n0 2\\r\\n0 4\\r\\n2 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '3\\r\\n-1 -1\\r\\n1 0\\r\\n3 1\\r\\n', 'output': ['0\\r\\n']}, {'input': '4\\r\\n-10000 -10000\\r\\n-10000 10000\\r\\n10000 -10000\\r\\n10000 10000\\r\\n', 'output': ['13\\r\\n']}, {'input': '4\\r\\n-10000 -10000\\r\\n-10000 -9999\\r\\n10000 10000\\r\\n9999 10000\\r\\n', 'output': ['14\\r\\n']}, {'input': '16\\r\\n0 0\\r\\n0 2\\r\\n0 4\\r\\n0 6\\r\\n2 0\\r\\n2 2\\r\\n2 4\\r\\n2 6\\r\\n4 0\\r\\n4 2\\r\\n4 4\\r\\n4 6\\r\\n6 0\\r\\n6 2\\r\\n6 4\\r\\n6 6\\r\\n', 'output': ['1783\\r\\n']}, {'input': '25\\r\\n-10000 -10000\\r\\n-10000 -5000\\r\\n-10000 0\\r\\n-10000 5000\\r\\n-10000 10000\\r\\n-5000 -10000\\r\\n-5000 -5000\\r\\n-5000 0\\r\\n-5000 5000\\r\\n-5000 10000\\r\\n0 -10000\\r\\n0 -5000\\r\\n0 0\\r\\n0 5000\\r\\n0 10000\\r\\n5000 -10000\\r\\n5000 -5000\\r\\n5000 0\\r\\n5000 5000\\r\\n5000 10000\\r\\n10000 -10000\\r\\n10000 -5000\\r\\n10000 0\\r\\n10000 5000\\r\\n10000 10000\\r\\n', 'output': ['9324\\r\\n']}, {'input': '2\\r\\n10000 10000\\r\\n-10000 -10000\\r\\n', 'output': ['0\\r\\n']}, {'input': '20\\r\\n-5118 -9140\\r\\n-5118 -7807\\r\\n-5118 -5328\\r\\n-5118 -3139\\r\\n-5118 -1442\\r\\n-5118 -1169\\r\\n-5118 -733\\r\\n-5118 3460\\r\\n-5118 8555\\r\\n-5118 9702\\r\\n-3971 -9140\\r\\n-3971 -7807\\r\\n-3971 -5328\\r\\n-3971 -3139\\r\\n-3971 -1442\\r\\n-3971 -1169\\r\\n-3971 -733\\r\\n-3971 3460\\r\\n-3971 8555\\r\\n-3971 9702\\r\\n', 'output': ['5105\\r\\n']}, {'input': '21\\r\\n-8207 -8742\\r\\n-8207 2162\\r\\n-8207 3741\\r\\n-6190 -8742\\r\\n-6190 2162\\r\\n-6190 3741\\r\\n-2214 -8742\\r\\n-2214 2162\\r\\n-2214 3741\\r\\n-1839 -8742\\r\\n-1839 2162\\r\\n-1839 3741\\r\\n207 -8742\\r\\n207 2162\\r\\n207 3741\\r\\n3032 -8742\\r\\n3032 2162\\r\\n3032 3741\\r\\n8740 -8742\\r\\n8740 2162\\r\\n8740 3741\\r\\n', 'output': ['9156\\r\\n']}, {'input': '20\\r\\n-7068 -9088\\r\\n-7068 -7174\\r\\n-7068 -6012\\r\\n-7068 -3037\\r\\n-7068 3299\\r\\n532 -9088\\r\\n532 -7174\\r\\n532 -6012\\r\\n532 -3037\\r\\n532 3299\\r\\n6883 -9088\\r\\n6883 -7174\\r\\n6883 -6012\\r\\n6883 -3037\\r\\n6883 3299\\r\\n8251 -9088\\r\\n8251 -7174\\r\\n8251 -6012\\r\\n8251 -3037\\r\\n8251 3299\\r\\n', 'output': ['8240\\r\\n']}, {'input': '25\\r\\n1964 -4517\\r\\n5939 -4080\\r\\n9503 -7541\\r\\n-5037 -6950\\r\\n-9914 5015\\r\\n-435 7555\\r\\n-9321 -2202\\r\\n-5036 4224\\r\\n4946 -6785\\r\\n-6824 -9830\\r\\n-9124 9117\\r\\n-8396 -2748\\r\\n9284 556\\r\\n-1672 -6681\\r\\n-8782 9912\\r\\n-8164 4679\\r\\n1804 -6201\\r\\n-1155 2405\\r\\n-858 4105\\r\\n419 -7325\\r\\n-8034 -3084\\r\\n-7823 -5829\\r\\n-5784 5391\\r\\n9515 5259\\r\\n-8078 752\\r\\n', 'output': ['44850\\r\\n']}, {'input': '25\\r\\n5061 -2382\\r\\n-4080 9503\\r\\n-4081 9503\\r\\n5061 -2381\\r\\n-6549 9641\\r\\n-8510 6047\\r\\n-8110 8720\\r\\n6829 -8424\\r\\n-1413 -5926\\r\\n2446 -3190\\r\\n5405 8413\\r\\n8272 6829\\r\\n3034 -3978\\r\\n-3403 3036\\r\\n1383 4041\\r\\n829 327\\r\\n-4079 9504\\r\\n9293 -5091\\r\\n486 -5050\\r\\n6384 3727\\r\\n4787 6634\\r\\n4492 1126\\r\\n-1288 -4938\\r\\n4345 8056\\r\\n-3402 3035\\r\\n', 'output': ['43365\\r\\n']}, {'input': '16\\r\\n297 3286\\r\\n-9374 4754\\r\\n7891 -4091\\r\\n6087 -1252\\r\\n3371 -858\\r\\n789 -9370\\r\\n7241 2950\\r\\n-7390 355\\r\\n-5536 -3119\\r\\n2413 -5560\\r\\n4673 7622\\r\\n5344 -9455\\r\\n1918 -8370\\r\\n-6034 -4144\\r\\n9018 -996\\r\\n-7542 -9138\\r\\n', 'output': ['7140\\r\\n']}, {'input': '16\\r\\n-7073 -2432\\r\\n4754 7891\\r\\n4753 7890\\r\\n4755 7892\\r\\n1033 -7465\\r\\n4487 -9951\\r\\n-4613 3633\\r\\n-6753 9089\\r\\n5853 -1919\\r\\n-236 5170\\r\\n4754 7889\\r\\n-9989 -3488\\r\\n-1390 5520\\r\\n3139 8543\\r\\n4754 7890\\r\\n7576 5150\\r\\n', 'output': ['6670\\r\\n']}, {'input': '12\\r\\n1804 -7018\\r\\n-3551 1915\\r\\n-8148 5497\\r\\n-3430 -2988\\r\\n377 -1656\\r\\n-3799 6338\\r\\n-4248 -8428\\r\\n7371 -5005\\r\\n1216 406\\r\\n-294 5589\\r\\n-6477 -8889\\r\\n-8919 3676\\r\\n', 'output': ['2145\\r\\n']}, {'input': '12\\r\\n-9440 -8967\\r\\n1915 -8148\\r\\n-7216 8361\\r\\n6338 -4248\\r\\n-1425 -2251\\r\\n1216 406\\r\\n-2676 8355\\r\\n-8889 -8919\\r\\n-1163 -4185\\r\\n5018 -7302\\r\\n-2724 3986\\r\\n-7890 1900\\r\\n', 'output': ['2016\\r\\n']}, {'input': '10\\r\\n3986 -4462\\r\\n-5492 -8077\\r\\n-5005 4012\\r\\n8092 5848\\r\\n5159 9077\\r\\n-9814 5652\\r\\n-2848 -6707\\r\\n-1528 8298\\r\\n9444 -4143\\r\\n-7928 1163\\r\\n', 'output': ['990\\r\\n']}, {'input': '10\\r\\n-5475 1753\\r\\n-8077 -5005\\r\\n7903 -131\\r\\n5159 9077\\r\\n5159 9076\\r\\n-6761 4557\\r\\n-9188 -9329\\r\\n-4591 617\\r\\n-9686 -6410\\r\\n648 -1608\\r\\n', 'output': ['990\\r\\n']}, {'input': '2\\r\\n6757 4799\\r\\n-1343 -7745\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n8303 2432\\r\\n-7745 -4751\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n-9129 -8491\\r\\n-9129 -1754\\r\\n-9129 -1316\\r\\n1679 -8491\\r\\n1679 -1754\\r\\n1679 -1316\\r\\n', 'output': ['51\\r\\n']}, {'input': '3\\r\\n-4928 7147\\r\\n3808 3567\\r\\n2434 8649\\r\\n', 'output': ['3\\r\\n']}, {'input': '3\\r\\n-1547 4830\\r\\n3567 2434\\r\\n1522 -4418\\r\\n', 'output': ['3\\r\\n']}, {'input': '9\\r\\n-8172 -8016\\r\\n-8172 -63\\r\\n-8172 9586\\r\\n-1609 -8016\\r\\n-1609 -63\\r\\n-1609 9586\\r\\n2972 -8016\\r\\n2972 -63\\r\\n2972 9586\\r\\n', 'output': ['270\\r\\n']}, {'input': '4\\r\\n5648 -804\\r\\n1518 -2267\\r\\n7358 -6618\\r\\n-4504 2047\\r\\n', 'output': ['15\\r\\n']}, {'input': '4\\r\\n-3955 7228\\r\\n-2267 7358\\r\\n-5256 -1266\\r\\n9674 -3048\\r\\n', 'output': ['15\\r\\n']}, {'input': '12\\r\\n796 -415\\r\\n796 169\\r\\n796 2695\\r\\n1979 -415\\r\\n1979 169\\r\\n1979 2695\\r\\n5371 -415\\r\\n5371 169\\r\\n5371 2695\\r\\n8366 -415\\r\\n8366 169\\r\\n8366 2695\\r\\n', 'output': ['894\\r\\n']}, {'input': '5\\r\\n-8893 8986\\r\\n-3629 9045\\r\\n-7719 -6470\\r\\n-258 4491\\r\\n-6902 -6866\\r\\n', 'output': ['45\\r\\n']}, {'input': '5\\r\\n8456 -2932\\r\\n9045 -7719\\r\\n-10000 6748\\r\\n9044 -7720\\r\\n-1125 -914\\r\\n', 'output': ['45\\r\\n']}, {'input': '15\\r\\n-7871 -4833\\r\\n-7871 -1936\\r\\n-7871 425\\r\\n-4790 -4833\\r\\n-4790 -1936\\r\\n-4790 425\\r\\n912 -4833\\r\\n912 -1936\\r\\n912 425\\r\\n4236 -4833\\r\\n4236 -1936\\r\\n4236 425\\r\\n8382 -4833\\r\\n8382 -1936\\r\\n8382 425\\r\\n', 'output': ['2265\\r\\n']}, {'input': '42\\r\\n-5391 -2932\\r\\n-5391 -2868\\r\\n-5391 1744\\r\\n-5391 2236\\r\\n-5391 4148\\r\\n-5391 5217\\r\\n-5391 6188\\r\\n-3584 -2932\\r\\n-3584 -2868\\r\\n-3584 1744\\r\\n-3584 2236\\r\\n-3584 4148\\r\\n-3584 5217\\r\\n-3584 6188\\r\\n-1657 -2932\\r\\n-1657 -2868\\r\\n-1657 1744\\r\\n-1657 2236\\r\\n-1657 4148\\r\\n-1657 5217\\r\\n-1657 6188\\r\\n3218 -2932\\r\\n3218 -2868\\r\\n3218 1744\\r\\n3218 2236\\r\\n3218 4148\\r\\n3218 5217\\r\\n3218 6188\\r\\n7582 -2932\\r\\n7582 -2868\\r\\n7582 1744\\r\\n7582 2236\\r\\n7582 4148\\r\\n7582 5217\\r\\n7582 6188\\r\\n8131 -2932\\r\\n8131 -2868\\r\\n8131 1744\\r\\n8131 2236\\r\\n8131 4148\\r\\n8131 5217\\r\\n8131 6188\\r\\n', 'output': ['206367\\r\\n']}]", "source_code": "import java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.BufferedReader;\nimport java.io.InputStream;\n\npublic class Solution {\n \n    static long nCr(int n, int r) {\n        long C[][] = new long [n+1][r+1];\n        int i, j;\n        int n1 = 0;\n        C[0][0] = 1;\n \n        for (i=1 ; i<=n ; i++ ) {\n            n1 = n-i;\n            for ( j=min(i, r) ; j>0 ; j-- ) {\n                C[i][j] = C[i-1][j-1] + C[n1][j];\n            }\n            C[i][0] = 1;\n        }\n        return C[n][r];\n    }\n\n    private static int min(int a, int b){\n        if(a<b){\n            return a;\n        }\n        return b;\n    }\n\n    public static void main(String[] args) throws IOException {\n        InputStream is = System.in;\n        System.setIn(new FileInputStream(\"res/input.txt\"));\n        InputStreamReader isr = new InputStreamReader(is);\n        BufferedReader reader = new BufferedReader(isr);\n        int n = Integer.parseInt(reader.readLine());\n        String line[];\n        int x[][] = new int[n][2];\n        long ans = 0;\n        int p = 0;\n        for(int q = 0 ; q < n ; q++){\n            line = reader.readLine().split(\" \");\n            for(int k = 0 ; k < 2 ; k++){\n                x[q][k] = Integer.parseInt(line[k]);\n            }\n        }\n        for(int i = 0 ; i < n ; i++){\n            for(int j = i + 1 ; j < n ; j++){\n                if(x[i][0]==x[j][0]){\n                    ans += nCr(n-2, 2);\n                }\n                else if(x[i][0]==x[j][1]){\n                    ans += nCr(n-2, 2);\n                }\n                else if(x[i][1]==x[j][0]){\n                    ans += nCr(n-2, 2);\n                }\n                else if(x[i][1]==x[j][1]){\n                    ans += nCr(n-2, 2);\n                }\n                else if((x[i][1] < x[j][0] && x[i][0] > x[j][1]) || (x[i][0] < x[j][0] && x[i][1] > x[j][1])){\n                    // do nothing\n                }\n                else if((x[j][1] < x[i][0] && x[j][0] > x[i][1]) || (x[j][0] < x[i][0] && x[j][1] > x[i][1])){\n                    // do nothing\n                }\n                else if(x[i][0] > x[j][0] && x[i][1] > x[j][1]){\n                    ans += 1;\n                }\n            }\n        }\n        System.out.println((long)ans*2);\n        reader.close();\n    }\n}"}
{"src_uid": "8c2e0cd780cf9390e933e28e57643cba", "id": 92, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '4\\r\\n0 0\\r\\n1 1\\r\\n0 3\\r\\n1 2\\r\\n', 'output': ['14\\r\\n']}, {'input': '4\\r\\n0 0\\r\\n0 2\\r\\n0 4\\r\\n2 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '3\\r\\n-1 -1\\r\\n1 0\\r\\n3 1\\r\\n', 'output': ['0\\r\\n']}, {'input': '4\\r\\n-10000 -10000\\r\\n-10000 10000\\r\\n10000 -10000\\r\\n10000 10000\\r\\n', 'output': ['13\\r\\n']}, {'input': '4\\r\\n-10000 -10000\\r\\n-10000 -9999\\r\\n10000 10000\\r\\n9999 10000\\r\\n', 'output': ['14\\r\\n']}, {'input': '16\\r\\n0 0\\r\\n0 2\\r\\n0 4\\r\\n0 6\\r\\n2 0\\r\\n2 2\\r\\n2 4\\r\\n2 6\\r\\n4 0\\r\\n4 2\\r\\n4 4\\r\\n4 6\\r\\n6 0\\r\\n6 2\\r\\n6 4\\r\\n6 6\\r\\n', 'output': ['1783\\r\\n']}, {'input': '25\\r\\n-10000 -10000\\r\\n-10000 -5000\\r\\n-10000 0\\r\\n-10000 5000\\r\\n-10000 10000\\r\\n-5000 -10000\\r\\n-5000 -5000\\r\\n-5000 0\\r\\n-5000 5000\\r\\n-5000 10000\\r\\n0 -10000\\r\\n0 -5000\\r\\n0 0\\r\\n0 5000\\r\\n0 10000\\r\\n5000 -10000\\r\\n5000 -5000\\r\\n5000 0\\r\\n5000 5000\\r\\n5000 10000\\r\\n10000 -10000\\r\\n10000 -5000\\r\\n10000 0\\r\\n10000 5000\\r\\n10000 10000\\r\\n', 'output': ['9324\\r\\n']}, {'input': '2\\r\\n10000 10000\\r\\n-10000 -10000\\r\\n', 'output': ['0\\r\\n']}, {'input': '20\\r\\n-5118 -9140\\r\\n-5118 -7807\\r\\n-5118 -5328\\r\\n-5118 -3139\\r\\n-5118 -1442\\r\\n-5118 -1169\\r\\n-5118 -733\\r\\n-5118 3460\\r\\n-5118 8555\\r\\n-5118 9702\\r\\n-3971 -9140\\r\\n-3971 -7807\\r\\n-3971 -5328\\r\\n-3971 -3139\\r\\n-3971 -1442\\r\\n-3971 -1169\\r\\n-3971 -733\\r\\n-3971 3460\\r\\n-3971 8555\\r\\n-3971 9702\\r\\n', 'output': ['5105\\r\\n']}, {'input': '21\\r\\n-8207 -8742\\r\\n-8207 2162\\r\\n-8207 3741\\r\\n-6190 -8742\\r\\n-6190 2162\\r\\n-6190 3741\\r\\n-2214 -8742\\r\\n-2214 2162\\r\\n-2214 3741\\r\\n-1839 -8742\\r\\n-1839 2162\\r\\n-1839 3741\\r\\n207 -8742\\r\\n207 2162\\r\\n207 3741\\r\\n3032 -8742\\r\\n3032 2162\\r\\n3032 3741\\r\\n8740 -8742\\r\\n8740 2162\\r\\n8740 3741\\r\\n', 'output': ['9156\\r\\n']}, {'input': '20\\r\\n-7068 -9088\\r\\n-7068 -7174\\r\\n-7068 -6012\\r\\n-7068 -3037\\r\\n-7068 3299\\r\\n532 -9088\\r\\n532 -7174\\r\\n532 -6012\\r\\n532 -3037\\r\\n532 3299\\r\\n6883 -9088\\r\\n6883 -7174\\r\\n6883 -6012\\r\\n6883 -3037\\r\\n6883 3299\\r\\n8251 -9088\\r\\n8251 -7174\\r\\n8251 -6012\\r\\n8251 -3037\\r\\n8251 3299\\r\\n', 'output': ['8240\\r\\n']}, {'input': '25\\r\\n1964 -4517\\r\\n5939 -4080\\r\\n9503 -7541\\r\\n-5037 -6950\\r\\n-9914 5015\\r\\n-435 7555\\r\\n-9321 -2202\\r\\n-5036 4224\\r\\n4946 -6785\\r\\n-6824 -9830\\r\\n-9124 9117\\r\\n-8396 -2748\\r\\n9284 556\\r\\n-1672 -6681\\r\\n-8782 9912\\r\\n-8164 4679\\r\\n1804 -6201\\r\\n-1155 2405\\r\\n-858 4105\\r\\n419 -7325\\r\\n-8034 -3084\\r\\n-7823 -5829\\r\\n-5784 5391\\r\\n9515 5259\\r\\n-8078 752\\r\\n', 'output': ['44850\\r\\n']}, {'input': '25\\r\\n5061 -2382\\r\\n-4080 9503\\r\\n-4081 9503\\r\\n5061 -2381\\r\\n-6549 9641\\r\\n-8510 6047\\r\\n-8110 8720\\r\\n6829 -8424\\r\\n-1413 -5926\\r\\n2446 -3190\\r\\n5405 8413\\r\\n8272 6829\\r\\n3034 -3978\\r\\n-3403 3036\\r\\n1383 4041\\r\\n829 327\\r\\n-4079 9504\\r\\n9293 -5091\\r\\n486 -5050\\r\\n6384 3727\\r\\n4787 6634\\r\\n4492 1126\\r\\n-1288 -4938\\r\\n4345 8056\\r\\n-3402 3035\\r\\n', 'output': ['43365\\r\\n']}, {'input': '16\\r\\n297 3286\\r\\n-9374 4754\\r\\n7891 -4091\\r\\n6087 -1252\\r\\n3371 -858\\r\\n789 -9370\\r\\n7241 2950\\r\\n-7390 355\\r\\n-5536 -3119\\r\\n2413 -5560\\r\\n4673 7622\\r\\n5344 -9455\\r\\n1918 -8370\\r\\n-6034 -4144\\r\\n9018 -996\\r\\n-7542 -9138\\r\\n', 'output': ['7140\\r\\n']}, {'input': '16\\r\\n-7073 -2432\\r\\n4754 7891\\r\\n4753 7890\\r\\n4755 7892\\r\\n1033 -7465\\r\\n4487 -9951\\r\\n-4613 3633\\r\\n-6753 9089\\r\\n5853 -1919\\r\\n-236 5170\\r\\n4754 7889\\r\\n-9989 -3488\\r\\n-1390 5520\\r\\n3139 8543\\r\\n4754 7890\\r\\n7576 5150\\r\\n', 'output': ['6670\\r\\n']}, {'input': '12\\r\\n1804 -7018\\r\\n-3551 1915\\r\\n-8148 5497\\r\\n-3430 -2988\\r\\n377 -1656\\r\\n-3799 6338\\r\\n-4248 -8428\\r\\n7371 -5005\\r\\n1216 406\\r\\n-294 5589\\r\\n-6477 -8889\\r\\n-8919 3676\\r\\n', 'output': ['2145\\r\\n']}, {'input': '12\\r\\n-9440 -8967\\r\\n1915 -8148\\r\\n-7216 8361\\r\\n6338 -4248\\r\\n-1425 -2251\\r\\n1216 406\\r\\n-2676 8355\\r\\n-8889 -8919\\r\\n-1163 -4185\\r\\n5018 -7302\\r\\n-2724 3986\\r\\n-7890 1900\\r\\n', 'output': ['2016\\r\\n']}, {'input': '10\\r\\n3986 -4462\\r\\n-5492 -8077\\r\\n-5005 4012\\r\\n8092 5848\\r\\n5159 9077\\r\\n-9814 5652\\r\\n-2848 -6707\\r\\n-1528 8298\\r\\n9444 -4143\\r\\n-7928 1163\\r\\n', 'output': ['990\\r\\n']}, {'input': '10\\r\\n-5475 1753\\r\\n-8077 -5005\\r\\n7903 -131\\r\\n5159 9077\\r\\n5159 9076\\r\\n-6761 4557\\r\\n-9188 -9329\\r\\n-4591 617\\r\\n-9686 -6410\\r\\n648 -1608\\r\\n', 'output': ['990\\r\\n']}, {'input': '2\\r\\n6757 4799\\r\\n-1343 -7745\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n8303 2432\\r\\n-7745 -4751\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n-9129 -8491\\r\\n-9129 -1754\\r\\n-9129 -1316\\r\\n1679 -8491\\r\\n1679 -1754\\r\\n1679 -1316\\r\\n', 'output': ['51\\r\\n']}, {'input': '3\\r\\n-4928 7147\\r\\n3808 3567\\r\\n2434 8649\\r\\n', 'output': ['3\\r\\n']}, {'input': '3\\r\\n-1547 4830\\r\\n3567 2434\\r\\n1522 -4418\\r\\n', 'output': ['3\\r\\n']}, {'input': '9\\r\\n-8172 -8016\\r\\n-8172 -63\\r\\n-8172 9586\\r\\n-1609 -8016\\r\\n-1609 -63\\r\\n-1609 9586\\r\\n2972 -8016\\r\\n2972 -63\\r\\n2972 9586\\r\\n', 'output': ['270\\r\\n']}, {'input': '4\\r\\n5648 -804\\r\\n1518 -2267\\r\\n7358 -6618\\r\\n-4504 2047\\r\\n', 'output': ['15\\r\\n']}, {'input': '4\\r\\n-3955 7228\\r\\n-2267 7358\\r\\n-5256 -1266\\r\\n9674 -3048\\r\\n', 'output': ['15\\r\\n']}, {'input': '12\\r\\n796 -415\\r\\n796 169\\r\\n796 2695\\r\\n1979 -415\\r\\n1979 169\\r\\n1979 2695\\r\\n5371 -415\\r\\n5371 169\\r\\n5371 2695\\r\\n8366 -415\\r\\n8366 169\\r\\n8366 2695\\r\\n', 'output': ['894\\r\\n']}, {'input': '5\\r\\n-8893 8986\\r\\n-3629 9045\\r\\n-7719 -6470\\r\\n-258 4491\\r\\n-6902 -6866\\r\\n', 'output': ['45\\r\\n']}, {'input': '5\\r\\n8456 -2932\\r\\n9045 -7719\\r\\n-10000 6748\\r\\n9044 -7720\\r\\n-1125 -914\\r\\n', 'output': ['45\\r\\n']}, {'input': '15\\r\\n-7871 -4833\\r\\n-7871 -1936\\r\\n-7871 425\\r\\n-4790 -4833\\r\\n-4790 -1936\\r\\n-4790 425\\r\\n912 -4833\\r\\n912 -1936\\r\\n912 425\\r\\n4236 -4833\\r\\n4236 -1936\\r\\n4236 425\\r\\n8382 -4833\\r\\n8382 -1936\\r\\n8382 425\\r\\n', 'output': ['2265\\r\\n']}, {'input': '42\\r\\n-5391 -2932\\r\\n-5391 -2868\\r\\n-5391 1744\\r\\n-5391 2236\\r\\n-5391 4148\\r\\n-5391 5217\\r\\n-5391 6188\\r\\n-3584 -2932\\r\\n-3584 -2868\\r\\n-3584 1744\\r\\n-3584 2236\\r\\n-3584 4148\\r\\n-3584 5217\\r\\n-3584 6188\\r\\n-1657 -2932\\r\\n-1657 -2868\\r\\n-1657 1744\\r\\n-1657 2236\\r\\n-1657 4148\\r\\n-1657 5217\\r\\n-1657 6188\\r\\n3218 -2932\\r\\n3218 -2868\\r\\n3218 1744\\r\\n3218 2236\\r\\n3218 4148\\r\\n3218 5217\\r\\n3218 6188\\r\\n7582 -2932\\r\\n7582 -2868\\r\\n7582 1744\\r\\n7582 2236\\r\\n7582 4148\\r\\n7582 5217\\r\\n7582 6188\\r\\n8131 -2932\\r\\n8131 -2868\\r\\n8131 1744\\r\\n8131 2236\\r\\n8131 4148\\r\\n8131 5217\\r\\n8131 6188\\r\\n', 'output': ['206367\\r\\n']}]", "source_code": "import java.util.*;\n\n/* 19:48 27/09/15 */\npublic class Cf561a extends PrintWriter {\n\tCf561a() { super(System.out); }\n\tScanner sc = new Scanner(System.in);\n\tpublic static void main(String[] $) {\n\t\tCf561a o = new Cf561a(); o.main(); o.flush();\n\t}\n\n\tstatic class Map implements Comparable<Map> {\n\t\tint x, y;\n\t\tMap(int x, int y) { this.x = x; this.y = y; }\n\t\tpublic int compareTo(Map o) {\n\t\t\tif (x == o.x) return y - o.y;\n\t\t\treturn x - o.x;\n\t\t}\n\t}\n\n\tvoid main() {\n\t\tint n = sc.nextInt(), ans = 0;\n\t\tMap[] a = new Map[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\ta[i] = new Map(sc.nextInt(), sc.nextInt());\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tfor (int j = i + 1; j < n; j++)\n\t\t\t\tif (a[i].y == a[j].y)\n\t\t\t\t\tfor (int k = j + 1; k < n; k++)\n\t\t\t\t\t\tif (a[j].x == a[k].x && a[i].x!= a[k].x) {\n\t\t\t\t\t\t\tans += 10000;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\telse if ((long)(a[i].x - a[j].x) * (a[i].y - a[j].y)\n\t\t\t\t\t\t* (a[j].x - a[k].x) * (a[j].y - a[k].y)\n\t\t\t\t\t\t* ((long)a[i].x * a[j].y - (long)a[j].x * a[i].y)\n\t\t\t\t\t\t== (long)(a[j].x - a[i].x) * (a[k].y - a[j].y)\n\t\t\t\t\t\t* (a[i].y - a[k].y) * (a[j].x - a[k].x))\n\t\t\t\t\tans++;\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tfor (int j = i + 1; j < n; j++)\n\t\t\t\tif (a[i].x == a[j].x && a[i].y!= a[j].y) ans++;\n\t\tprintln(ans);\n\t}\n}"}
{"src_uid": "bb4ecfaaccd538e23f883a18f9672af8", "id": 93, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2200, "testcases": "[{'input': '5\\r\\n2 1 1 2 5\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3\\r\\n4 5 3\\r\\n', 'output': ['YES\\r\\n']}, {'input': '2\\r\\n10 10\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10\\r\\n1 9 7 6 2 4 7 8 1 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '1\\r\\n2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3\\r\\n2 1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n1 2 2 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '5\\r\\n5 2 5 2 6\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n3 3 3 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n1 1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '5\\r\\n2 1 1 2 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '2\\r\\n99999999 99999998\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n1 1 2 1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n1 2 2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n1 2 2 2 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '6\\r\\n3 3 4 4 3 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n2 10 6 9 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7\\r\\n10 2 3 4 2 8 8\\r\\n', 'output': ['YES\\r\\n']}, {'input': '9\\r\\n2 5 1 9 6 5 7 3 1\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Solution implements Runnable {\n    private void solve() throws IOException {\n        int n = reader.nextInt(), x = reader.nextInt();\n        int max = x;\n        for(int i = 1; i < n; ++i) {\n            x = reader.nextInt();\n            if(x > max) max = x;\n        }\n        writer.println(max % 2 == 0? \"YES\" : \"NO\");\n    }\n\n    private void run() throws IOException {\n        solve();\n        reader.close();\n        writer.close();\n    }\n\n    private interface IntFunction<R> {\n        R apply(int n) throws IOException;\n    }\n\n    private interface LongFunction<R> {\n        R apply(long n) throws IOException;\n    }\n\n    private interface DoubleFunction<R> {\n        R apply(double n) throws IOException;\n    }\n\n    private interface MyFunction<T, R> {\n        R apply(T n) throws IOException;\n    }\n\n    private interface BinaryOperator<T> {\n        T apply(T a, T b) throws IOException;\n    }\n\n    private static int INTEGER_IMPOSSIBLE = Integer.MIN_VALUE;\n    private static long LONG_IMPOSSIBLE = Long.MIN_VALUE;\n    private static double DOUBLE_IMPOSSIBLE = Double.MIN_VALUE;\n\n    private Reader reader = new StandardCharsets.UTF_8.decoder(System.in).lines().map(String::trim).filter(s ->!s.isEmpty()).map(readerFunc);\n    private PrintWriter writer = new PrintWriter(System.out);\n\n    private static MyFunction<String, Integer> readerFunc = (str) -> Integer.parseInt(str);\n    private static MyFunction<String, Long> readerLongFunc = (str) -> Long.parseLong(str);\n    private static MyFunction<String, Double> readerDoubleFunc = (str) -> Double.parseDouble(str);\n    private static MyFunction<String, Character> readerCharacterFunc = (str) -> str.charAt(0);\n    private static MyFunction<String, Character> readerCharacterFunction = readerCharacterFunc;\n\n    public static <T> T[] generate(T[] array, int n, IntFunction<T> func) {\n        for(int i = 0; i < n; ++i) {\n            array[i] = func.apply(i);\n        }\n        return array;\n    }\n\n    public static <T> T[][] generate(T[][] array, int m, int n, IntFunction<T> func) {\n        for(int i = 0; i < m; ++i) {\n            array[i] = generate(array[i], n, func);\n        }\n        return array;\n    }\n\n    public static <T> ArrayList<T> generate(ArrayList<T> list, int n, IntFunction<T> func) {\n        for(int i = 0; i < n; ++i) {\n            list.add(func.apply(i));\n        }\n        return list;\n    }\n\n    public static <T> ArrayList<T>[] generate(ArrayList<T>[] list, int m, int n, IntFunction<T> func) {\n        for(int i = 0; i < m; ++i) {\n            list[i] = generate(list[i], n, func);\n        }\n        return list;\n    }\n\n    public static long multiply(long a, long b) { return Integer.toUnsignedLong(Integer.toUnsignedInt(a)) * Integer.toUnsignedLong(Integer.toUnsignedInt(b)); }\n    public static long add(long a, long b) { return Integer.toUnsignedLong(Integer.toUnsignedInt(a)) + Integer.toUnsignedLong(Integer.toUnsignedInt(b)); }\n\n    public static int multiply(int a, int b) { return Integer.toUnsignedInt(a) * Integer.toUnsignedInt(b); }\n    public static int add(int a, int b) { return Integer.toUnsignedInt(a) + Integer.toUnsignedInt(b); }\n\n    public static int compare(Comparable<?> a, Comparable<?> b) { return a == null"}
{"src_uid": "bb4ecfaaccd538e23f883a18f9672af8", "id": 93, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2200, "testcases": "[{'input': '5\\r\\n2 1 1 2 5\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3\\r\\n4 5 3\\r\\n', 'output': ['YES\\r\\n']}, {'input': '2\\r\\n10 10\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10\\r\\n1 9 7 6 2 4 7 8 1 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '1\\r\\n2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3\\r\\n2 1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n1 2 2 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '5\\r\\n5 2 5 2 6\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n3 3 3 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n1 1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '5\\r\\n2 1 1 2 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '2\\r\\n99999999 99999998\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n1 1 2 1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n1 2 2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n1 2 2 2 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '6\\r\\n3 3 4 4 3 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n2 10 6 9 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7\\r\\n10 2 3 4 2 8 8\\r\\n', 'output': ['YES\\r\\n']}, {'input': '9\\r\\n2 5 1 9 6 5 7 3 1\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.util.*;\n\n\n\npublic class Solution{\n    public static void main(String[] args){\n        //int n = Integer.parseInt(args[0]);\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt(), h, max = 0, index = 0, a, lasta = -1, ctr = 0;\n        int[] s = new int[n];\n        \n        for(int i = 0 ; i < n ; i++){\n            s[i] = sc.nextInt();\n        }\n        \n        \n        for(int i = 0 ; i < n ; i++){\n            index = i;\n            h = s[i];\n            \n            while(h > 1){\n                if(i+1 == n){\n                    break;\n                }\n                \n                if(s[i+1] == h-1){\n                    s[i] = s[i+1];\n                    s[i+1] = h;\n                    h = s[i];\n                    i++;\n                    ctr++;\n                }else if(s[i+1] > h){\n                    break;\n                }\n            }\n            if(ctr > 0){\n                ctr = 0;\n                i--;\n            }\n        }\n        \n        max = s[0];\n        for(int i = 1 ; i < n ; i++){\n            if(s[i] > max){\n                max = s[i];\n            }\n        }\n        \n        for(int i = 0 ; i < n ; i++){\n            if(s[i] > max){\n                System.out.print(\"NO\");\n                System.exit(0);\n            }\n            a = s[i];\n            ctr = 0;\n            \n            while(a < max){\n                if(i+1 == n){\n                    break;\n                }\n                \n                if(s[i+1] == a+1){\n                    s[i] = s[i+1];\n                    s[i+1] = a;\n                    a = s[i];\n                    ctr++;\n                    i++;\n                }else if(s[i+1] > a+1){\n                    break;\n                }\n            }\n            \n            if(ctr > 0){\n                ctr = 0;\n                i--;\n            }\n        }\n        \n        max = s[0];\n        lasta = s[0];\n        for(int i = 1 ; i < n ; i++){\n            if(s[i] > max){\n                System.out.print(\"NO\");\n                System.exit(0);\n            }\n            if(s[i]!= lasta){\n                max = s[i];\n            }\n            lasta = s[i];\n        }\n        \n        System.out.print(\"YES\");\n    }\n}"}
{"src_uid": "bb4ecfaaccd538e23f883a18f9672af8", "id": 93, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2200, "testcases": "[{'input': '5\\r\\n2 1 1 2 5\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3\\r\\n4 5 3\\r\\n', 'output': ['YES\\r\\n']}, {'input': '2\\r\\n10 10\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10\\r\\n1 9 7 6 2 4 7 8 1 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '1\\r\\n2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3\\r\\n2 1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n1 2 2 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '5\\r\\n5 2 5 2 6\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n3 3 3 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n1 1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '5\\r\\n2 1 1 2 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '2\\r\\n99999999 99999998\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n1 1 2 1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n1 2 2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n1 2 2 2 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '6\\r\\n3 3 4 4 3 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n2 10 6 9 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7\\r\\n10 2 3 4 2 8 8\\r\\n', 'output': ['YES\\r\\n']}, {'input': '9\\r\\n2 5 1 9 6 5 7 3 1\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.util.*;\n\n\npublic class Main {\n\n\tstatic class Reader {\n\t\tfinal private int BUFFER_SIZE = 1 << 16;\n\t\tprivate DataInputStream din;\n\t\tprivate byte[] buffer;\n\t\tprivate int bufferPointer, bytesRead;\n\n\t\tpublic Reader() {\n\t\t\tdin = new DataInputStream(System.in);\n\t\t\tbuffer = new byte[BUFFER_SIZE];\n\t\t\tbufferPointer = bytesRead = 0;\n\t\t}\n\n\t\tpublic Reader(String file_name) throws IOException {\n\t\t\tdin = new DataInputStream(new FileInputStream(file_name));\n\t\t\tbuffer = new byte[BUFFER_SIZE];\n\t\t\tbufferPointer = bytesRead = 0;\n\t\t}\n\n\t\tpublic String readLine() throws IOException {\n\t\t\tfinal StringBuffer sb = new StringBuffer();\n\t\t\tint b;\n\t\t\twhile ((b = readByte())!= -1 && b!= '\\n') {\n\t\t\t\tsb.appendCodePoint(b);\n\t\t\t}\n\t\t\treturn sb.toString();\n\t\t}\n\n\t\tpublic String readString() throws IOException {\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tint b = readByte();\n\t\t\twhile (b!= -1 &&!(b == 0 || b == 10)) {\n\t\t\t\tsb.appendCodePoint(b);\n\t\t\t\tb = readByte();\n\t\t\t}\n\t\t\treturn sb.toString();\n\t\t}\n\n\t\tpublic long nextLong() throws IOException {\n\t\t\tlong n = 0;\n\t\t\tboolean minus = false;\n\t\t\tint b = readByte();\n\t\t\tif (b == '-') {\n\t\t\t\tminus = true;\n\t\t\t\tb = readByte();\n\t\t\t}\n\t\t\tif (b < '0' || '9' < b) {\n\t\t\t\tthrow new NumberFormatException();\n\t\t\t}\n\t\t\twhile (true) {\n\t\t\t\tif ('0' <= b && b <= '9') {\n\t\t\t\t\tn *= 10;\n\t\t\t\t\tn += b - '0';\n\t\t\t\t} else if (b == -1 || b == 10 || b == 0) {\n\t\t\t\t\treturn minus? -n : n;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new NumberFormatException();\n\t\t\t\t}\n\t\t\t\tb = readByte();\n\t\t\t}\n\t\t}\n\n\t\tpublic int nextInt() throws IOException {\n\t\t\tint n = 0;\n\t\t\tboolean minus = false;\n\t\t\tint b = readByte();\n\t\t\tif (b == '-') {\n\t\t\t\tminus = true;\n\t\t\t\tb = readByte();\n\t\t\t}\n\t\t\tif (b < '0' || '9' < b) {\n\t\t\t\tthrow new NumberFormatException();\n\t\t\t}\n\t\t\twhile (true) {\n\t\t\t\tif ('0' <= b && b <= '9') {\n\t\t\t\t\tn *= 10;\n\t\t\t\t\tn += b - '0';\n\t\t\t\t} else if (b == -1 || b == 10 || b == 0) {\n\t\t\t\t\treturn minus? -n : n;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new NumberFormatException();\n\t\t\t\t}\n\t\t\t\tb = readByte();\n\t\t\t}\n\t\t}\n\n\t\tpublic int readByte() throws IOException {\n\t\t\tif (bufferPointer == bytesRead) {\n\t\t\t\tbufferPointer = 0;\n\t\t\t\tbytesRead = din.read(buffer, bufferPointer, BUFFER_SIZE);\n\t\t\t\tif (bytesRead <= 0) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn buffer[bufferPointer++];\n\t\t}\n\n\t\tpublic void close() throws IOException {\n\t\t\tif (din == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdin.close();\n\t\t}\n\n\t"}
{"src_uid": "bb4ecfaaccd538e23f883a18f9672af8", "id": 93, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2200, "testcases": "[{'input': '5\\r\\n2 1 1 2 5\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3\\r\\n4 5 3\\r\\n', 'output': ['YES\\r\\n']}, {'input': '2\\r\\n10 10\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10\\r\\n1 9 7 6 2 4 7 8 1 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '1\\r\\n2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3\\r\\n2 1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n1 2 2 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '5\\r\\n5 2 5 2 6\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n3 3 3 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n1 1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '5\\r\\n2 1 1 2 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '2\\r\\n99999999 99999998\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n1 1 2 1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n1 2 2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n1 2 2 2 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '6\\r\\n3 3 4 4 3 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n2 10 6 9 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7\\r\\n10 2 3 4 2 8 8\\r\\n', 'output': ['YES\\r\\n']}, {'input': '9\\r\\n2 5 1 9 6 5 7 3 1\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "/* package whatever; // don't place package name! */\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\n/* Name of the class has to be \"Main\" only if the class is public. */\npublic class Main\n{\n    static class Reader \n    { \n        final private int BUFFER_SIZE = 1 << 16; \n        private DataInputStream din; \n        private byte[] buffer; \n        private int bufferPointer, bytesRead; \n\n        public Reader() \n        { \n            din = new DataInputStream(System.in); \n            buffer = new byte[BUFFER_SIZE]; \n            bufferPointer = bytesRead = 0; \n        } \n\n        public Reader(String file_name) throws IOException \n        { \n            din = new DataInputStream(new FileInputStream(file_name)); \n            buffer = new byte[BUFFER_SIZE]; \n            bufferPointer = bytesRead = 0; \n        } \n\n        public String readLine() throws IOException \n        { \n            byte[] buf = new byte[64]; // line length \n            int cnt = 0, c; \n            while ((c = read())!= -1) \n            { \n                if (c == '\\n') \n                    break; \n                buf[cnt++] = (byte) c; \n            } \n            return new String(buf, 0, cnt); \n        } \n\n        public int nextInt() throws IOException \n        { \n            int ret = 0; \n            byte c = read(); \n            while (c <='') \n                c = read(); \n            boolean neg = (c == '-'); \n            if (neg) \n                c = read(); \n            do\n            { \n                ret = ret * 10 + c - '0'; \n            }  while ((c = read()) >= '0' && c <= '9'); \n            if (neg) \n                return -ret; \n            return ret; \n        } \n\n        public long nextLong() throws IOException \n        { \n            long ret = 0; \n            byte c = read(); \n            while (c <='') \n                c = read(); \n            boolean neg = (c == '-'); \n            if (neg) \n                c = read(); \n            do { \n                ret = ret * 10 + c - '0'; \n            } \n            while ((c = read()) >= '0' && c <= '9'); \n            if (neg) \n                return -ret; \n            return ret; \n        } \n\n        public double nextDouble() throws IOException \n        { \n            double ret = 0, div = 1; \n            byte c = read(); \n            while (c <='') \n                c = read(); \n            boolean neg = (c == '-'); \n            if (neg) \n                c = read(); \n\n            do { \n                ret = ret * 10 + c - '0'; \n            } \n            while ((c = read()) >= '0' && c <= '9'); \n\n            if (c == '.') \n            { \n                while ((c = read()) >= '0' && c <= '9') \n                { \n                    ret += (c - '0') / (div *= 10); \n                } \n            } \n\n            if (neg) \n                return -ret; \n            return ret; \n        } \n\n        private void fillBuffer() throws IOException \n        { \n            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE); \n            if (bytesRead == -1) \n                buffer[0] = -1; \n        } \n\n        private byte read() throws IOException \n        { \n            if (bufferPointer == bytesRead) \n                fillBuffer(); \n            return buffer[bufferPointer++]; \n        } \n\n        public void close() throws IOException \n        { \n            if (din == null) \n                return; \n            din.close(); \n        } \n    }\n\tpublic static void main (String[] args) throws IOException\n\t{\n\t\tReader st=new Reader();\n\t\t"}
{"src_uid": "bb4ecfaaccd538e23f883a18f9672af8", "id": 93, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2200, "testcases": "[{'input': '5\\r\\n2 1 1 2 5\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3\\r\\n4 5 3\\r\\n', 'output': ['YES\\r\\n']}, {'input': '2\\r\\n10 10\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10\\r\\n1 9 7 6 2 4 7 8 1 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '1\\r\\n2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3\\r\\n2 1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n1 2 2 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '5\\r\\n5 2 5 2 6\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n3 3 3 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n1 1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '5\\r\\n2 1 1 2 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '2\\r\\n99999999 99999998\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n1 1 2 1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n1 2 2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n1 2 2 2 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '6\\r\\n3 3 4 4 3 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n2 10 6 9 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7\\r\\n10 2 3 4 2 8 8\\r\\n', 'output': ['YES\\r\\n']}, {'input': '9\\r\\n2 5 1 9 6 5 7 3 1\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.util.ArrayList;\nimport static java.util.Arrays.*;\nimport static java.util.Collections.*;\nimport static java.util.Comparator.*;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport static java.util.Map.entry;\nimport static java.util.Objects.*;\nimport static java.util.Optional.*;\nimport static java.util.OptionalInt.*;\nimport static java.util.OptionalDouble.*;\nimport static java.util.OptionalLong.*;\nimport static java.util.Set.*;\nimport static java.util.Spliterator.*;\nimport static java.util.stream.Collectors.*;\nimport static java.util.stream.IntStream.*;\nimport static java.util.stream.LongStream.*;\nimport static java.util.stream.Stream.*;\nimport java.util.stream.Stream;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class HelloWorld {\n   \n    public static void main(String [] args) {\n        System.out.println(\"Hello World\");\n        int n = in.nextInt();\n        int a [] = new int[n];\n        int h = in.nextInt();\n        int max = h;\n        for(int i = 1 ; i < n ; i ++ ){\n            h = in.nextInt();\n            if(max < h) max = h;\n            a[i] = h;\n        }\n        boolean b = true;\n        for(int j = 0 ; j < n - 1 ; j ++){\n            if(a[j]!= a[j+1]) b = false;\n        }\n        if(max % 2 == 0 && b == true) System.out.println(\"YES\");\n        else System.out.println(\"NO\");\n    }\n    \n    private static final java.util.Scanner in = new java.util.Scanner(System.in);\n    \n}"}
{"src_uid": "e33b0a752dc1aba25da21e20435e3fe2", "id": 94, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2000, "testcases": "[{'input': '3 3\\r\\n010\\r\\n', 'output': ['1\\r\\n']}, {'input': '8 3\\r\\n01010110\\r\\n', 'output': ['3\\r\\n']}, {'input': '9 5\\r\\n001100110\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 2\\r\\n00\\r\\n', 'output': ['0\\r\\n']}, {'input': '3 2\\r\\n010\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 2\\r\\n000\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 3\\r\\n000\\r\\n', 'output': ['0\\r\\n']}, {'input': '4 2\\r\\n0000\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 2\\r\\n0100\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 2\\r\\n0010\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 2\\r\\n0110\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 3\\r\\n0000\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 3\\r\\n0010\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 3\\r\\n0100\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 3\\r\\n0110\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 4\\r\\n0000\\r\\n', 'output': ['0\\r\\n']}, {'input': '4 4\\r\\n0100\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 4\\r\\n0010\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 4\\r\\n0110\\r\\n', 'output': ['2\\r\\n']}, {'input': '10 3\\r\\n0111011010\\r\\n', 'output': ['4\\r\\n']}, {'input': '100 19\\r\\n0011011110011111111010111101101100101111111111011011111111110111101111101111111101111011111011101110\\r\\n', 'output': ['10\\r\\n']}, {'input': '10 3\\r\\n0111011010\\r\\n', 'output': ['4\\r\\n']}, {'input': '100 19\\r\\n0011011110011111111010111101101100101111111111011011111111110111101111101111111101111011111011101110\\r\\n', 'output': ['10\\r\\n']}, {'input': '10 6\\r\\n0000000000\\r\\n', 'output': ['1\\r\\n']}, {'input': '10 4\\r\\n0000001000\\r\\n', 'output': ['3\\r\\n']}, {'input': '10 6\\r\\n0000000000\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 21\\r\\n0110111011000010010101011101110101110111000111101011110100011011100011111101001010001111001111111000\\r\\n', 'output': ['7\\r\\n']}, {'input': '10 9\\r\\n0111011010\\r\\n', 'output': ['3\\r\\n']}, {'input': '100 89\\r\\n0011011110011111111010111101101100101111111111011011111111110111101111101111111101111011111011101110\\r\\n', 'output': ['10\\r\\n']}, {'input': '10 6\\r\\n0000000000\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 81\\r\\n0110111011000010010101011101110101110111000111101011110100011011100011111101001010001111001111111000\\r\\n', 'output': ['7\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Solution\n{\n\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String line = sc.nextLine();\n        String[] words = line.split(\" \");\n        int n = Integer.valueOf(words[0]);\n        int k = Integer.valueOf(words[1]);\n        String str = sc.next();\n\n        int max = 0;\n        int res = 0;\n        int max_j = 1;\n        int j = 1;\n        for(int i = 0; i < str.length(); i++){\n            if(str.charAt(i) == '0')\n                j++;\n            else {\n                j = 0;\n            }\n            if(max < j){\n                max = j;\n                max_j = i;\n            }\n        }\n\n\n        int i = 0;\n        int prev = 0;\n        while(i < n - 1){\n            if(str.charAt(i) == '0')\n                prev++;\n            else prev = 0;\n            if(prev >= k){\n                res = Math.max(res, n - i - 1);\n                prev -= k;\n                i = max_j;\n            }\n            else\n                i++;\n\n        }\n\n        System.out.println(res);\n    }\n}"}
{"src_uid": "e33b0a752dc1aba25da21e20435e3fe2", "id": 94, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2000, "testcases": "[{'input': '3 3\\r\\n010\\r\\n', 'output': ['1\\r\\n']}, {'input': '8 3\\r\\n01010110\\r\\n', 'output': ['3\\r\\n']}, {'input': '9 5\\r\\n001100110\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 2\\r\\n00\\r\\n', 'output': ['0\\r\\n']}, {'input': '3 2\\r\\n010\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 2\\r\\n000\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 3\\r\\n000\\r\\n', 'output': ['0\\r\\n']}, {'input': '4 2\\r\\n0000\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 2\\r\\n0100\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 2\\r\\n0010\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 2\\r\\n0110\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 3\\r\\n0000\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 3\\r\\n0010\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 3\\r\\n0100\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 3\\r\\n0110\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 4\\r\\n0000\\r\\n', 'output': ['0\\r\\n']}, {'input': '4 4\\r\\n0100\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 4\\r\\n0010\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 4\\r\\n0110\\r\\n', 'output': ['2\\r\\n']}, {'input': '10 3\\r\\n0111011010\\r\\n', 'output': ['4\\r\\n']}, {'input': '100 19\\r\\n0011011110011111111010111101101100101111111111011011111111110111101111101111111101111011111011101110\\r\\n', 'output': ['10\\r\\n']}, {'input': '10 3\\r\\n0111011010\\r\\n', 'output': ['4\\r\\n']}, {'input': '100 19\\r\\n0011011110011111111010111101101100101111111111011011111111110111101111101111111101111011111011101110\\r\\n', 'output': ['10\\r\\n']}, {'input': '10 6\\r\\n0000000000\\r\\n', 'output': ['1\\r\\n']}, {'input': '10 4\\r\\n0000001000\\r\\n', 'output': ['3\\r\\n']}, {'input': '10 6\\r\\n0000000000\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 21\\r\\n0110111011000010010101011101110101110111000111101011110100011011100011111101001010001111001111111000\\r\\n', 'output': ['7\\r\\n']}, {'input': '10 9\\r\\n0111011010\\r\\n', 'output': ['3\\r\\n']}, {'input': '100 89\\r\\n0011011110011111111010111101101100101111111111011011111111110111101111101111111101111011111011101110\\r\\n', 'output': ['10\\r\\n']}, {'input': '10 6\\r\\n0000000000\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 81\\r\\n0110111011000010010101011101110101110111000111101011110100011011100011111101001010001111001111111000\\r\\n', 'output': ['7\\r\\n']}]", "source_code": "\n\nimport java.util.*;\nimport java.math.*;\nimport java.io.*;\n\npublic class Main {\n    public static void main (String[] args) throws IOException {\n        //BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        Scanner reader = new Scanner(System.in);\n        int n = reader.nextInt(), k = reader.nextInt(), min = 1<<20;\n        String s = reader.next();\n        s = s.substring(1, s.length() - 1);\n        int[] count = new int[n];\n        for (int i = 0; i < n; i++) {\n            count[i] = (int)Math.floor(i * 1.0 / k);\n        }\n        for (int i = 0; i < n - 1; i++) {\n            int cur = count[i];\n            min = Math.min(min, s.charAt(i) == '1'? 1 : count[i + 1] - cur);\n        }\n        System.out.println(min);\n    }\n}"}
{"src_uid": "e33b0a752dc1aba25da21e20435e3fe2", "id": 94, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2000, "testcases": "[{'input': '3 3\\r\\n010\\r\\n', 'output': ['1\\r\\n']}, {'input': '8 3\\r\\n01010110\\r\\n', 'output': ['3\\r\\n']}, {'input': '9 5\\r\\n001100110\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 2\\r\\n00\\r\\n', 'output': ['0\\r\\n']}, {'input': '3 2\\r\\n010\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 2\\r\\n000\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 3\\r\\n000\\r\\n', 'output': ['0\\r\\n']}, {'input': '4 2\\r\\n0000\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 2\\r\\n0100\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 2\\r\\n0010\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 2\\r\\n0110\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 3\\r\\n0000\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 3\\r\\n0010\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 3\\r\\n0100\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 3\\r\\n0110\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 4\\r\\n0000\\r\\n', 'output': ['0\\r\\n']}, {'input': '4 4\\r\\n0100\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 4\\r\\n0010\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 4\\r\\n0110\\r\\n', 'output': ['2\\r\\n']}, {'input': '10 3\\r\\n0111011010\\r\\n', 'output': ['4\\r\\n']}, {'input': '100 19\\r\\n0011011110011111111010111101101100101111111111011011111111110111101111101111111101111011111011101110\\r\\n', 'output': ['10\\r\\n']}, {'input': '10 3\\r\\n0111011010\\r\\n', 'output': ['4\\r\\n']}, {'input': '100 19\\r\\n0011011110011111111010111101101100101111111111011011111111110111101111101111111101111011111011101110\\r\\n', 'output': ['10\\r\\n']}, {'input': '10 6\\r\\n0000000000\\r\\n', 'output': ['1\\r\\n']}, {'input': '10 4\\r\\n0000001000\\r\\n', 'output': ['3\\r\\n']}, {'input': '10 6\\r\\n0000000000\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 21\\r\\n0110111011000010010101011101110101110111000111101011110100011011100011111101001010001111001111111000\\r\\n', 'output': ['7\\r\\n']}, {'input': '10 9\\r\\n0111011010\\r\\n', 'output': ['3\\r\\n']}, {'input': '100 89\\r\\n0011011110011111111010111101101100101111111111011011111111110111101111101111111101111011111011101110\\r\\n', 'output': ['10\\r\\n']}, {'input': '10 6\\r\\n0000000000\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 81\\r\\n0110111011000010010101011101110101110111000111101011110100011011100011111101001010001111001111111000\\r\\n', 'output': ['7\\r\\n']}]", "source_code": "import java.util.Arrays;\nimport static java.util.Arrays.deepToString;\nimport static java.util.Arrays.deepHashCode;\nimport static java.util.Arrays.copyOf;\nimport java.io.*;\nimport java.util.*;\npublic class E {\n    static class InputReader {\n        public static void skip(Input input) throws IOException {\n            while (input.hasNextByte() && input.nextByte()!= -1)\n                ;\n        }\n\n        public static boolean hasNext(Input input) throws IOException {\n            return!input.isEmpty();\n        }\n\n        public static void close(Input input) throws IOException {\n            input.close();\n        }\n\n        private static byte[] readASCII(Input input, int n) throws IOException {\n            input.readNBytes(n);\n            return input.getBytes();\n        }\n\n        private static int readInt(Input input) throws IOException {\n            int byteN = 0;\n            int result = 0;\n            boolean minus = false;\n            if (input.nextByte() == '-') {\n                minus = true;\n                byteN++;\n            }\n            byte[] buf = readASCII(input, 9);\n            result = (int) buf[byteN++];\n            for (int b = 1; b < 9; b++) {\n                int digit = (int) buf[b];\n                if (digit < '0' || '9' < digit) {\n                    return Integer.MIN_VALUE;\n                }\n                int nextInt = result * 10 + digit - '0';\n                if (minus) {\n                    if (nextInt > result) {\n                        return Integer.MIN_VALUE;\n                    }\n                } else {\n                    if (nextInt < result) {\n                        return Integer.MIN_VALUE;\n                    }\n                }\n                result = nextInt;\n            }\n            return result;\n        }\n\n        private static long readLong(Input input) throws IOException {\n            long byteN = 0;\n            long result = 0;\n            boolean minus = false;\n            if (input.nextByte() == '-') {\n                minus = true;\n                byteN++;\n            }\n            byte[] buf = readASCII(input, 18);\n            result = (long) buf[byteN++];\n            for (int b = 1; b < 18; b++) {\n                int digit = (int) buf[b];\n                if (digit < '0' || '9' < digit) {\n                    return Long.MIN_VALUE;\n                }\n                long nextInt = result * 10 + digit - '0';\n                if (minus) {\n                    if (nextInt > result) {\n                        return Long.MIN_VALUE;\n                    }\n                } else {\n                    if (nextInt < result) {\n                        return Long.MIN_VALUE;\n                    }\n                }\n                result = nextInt;\n            }\n            return result;\n        }\n\n        private static long readLong(Input input, long min) throws IOException {\n            long byteN = 0;\n            long result = 0;\n            boolean minus = false;\n            if (input.nextByte() == '-') {\n                minus = true;\n                byteN++;\n            }\n            byte[] buf = readASCII(input, 18);\n            result = (long) buf[byteN++];\n            for (int b = 1; b < 18; b++) {\n                int digit = (int) buf[b];\n                if (digit < '0' || '9' < digit) {\n                    return Long.MIN_VALUE;\n                }\n                long nextInt = result * 10 + digit - '0';\n                if (minus) {\n                    if (nextInt > result) {\n                        return Long.MIN_VALUE;\n                    }\n                } else {\n                    if (nextInt < min) {\n                        return Long.MIN_VALUE;\n                    }\n                }\n                result = nextInt;\n            }\n            return result;\n        }\n\n        private static double readDouble(Input input) throws IOException {\n            return Double.parseDouble(readASCII(input, 25));\n        }\n\n        private static String readString(Input input) throws IOException {\n            return"}
{"src_uid": "e33b0a752dc1aba25da21e20435e3fe2", "id": 94, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2000, "testcases": "[{'input': '3 3\\r\\n010\\r\\n', 'output': ['1\\r\\n']}, {'input': '8 3\\r\\n01010110\\r\\n', 'output': ['3\\r\\n']}, {'input': '9 5\\r\\n001100110\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 2\\r\\n00\\r\\n', 'output': ['0\\r\\n']}, {'input': '3 2\\r\\n010\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 2\\r\\n000\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 3\\r\\n000\\r\\n', 'output': ['0\\r\\n']}, {'input': '4 2\\r\\n0000\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 2\\r\\n0100\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 2\\r\\n0010\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 2\\r\\n0110\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 3\\r\\n0000\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 3\\r\\n0010\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 3\\r\\n0100\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 3\\r\\n0110\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 4\\r\\n0000\\r\\n', 'output': ['0\\r\\n']}, {'input': '4 4\\r\\n0100\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 4\\r\\n0010\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 4\\r\\n0110\\r\\n', 'output': ['2\\r\\n']}, {'input': '10 3\\r\\n0111011010\\r\\n', 'output': ['4\\r\\n']}, {'input': '100 19\\r\\n0011011110011111111010111101101100101111111111011011111111110111101111101111111101111011111011101110\\r\\n', 'output': ['10\\r\\n']}, {'input': '10 3\\r\\n0111011010\\r\\n', 'output': ['4\\r\\n']}, {'input': '100 19\\r\\n0011011110011111111010111101101100101111111111011011111111110111101111101111111101111011111011101110\\r\\n', 'output': ['10\\r\\n']}, {'input': '10 6\\r\\n0000000000\\r\\n', 'output': ['1\\r\\n']}, {'input': '10 4\\r\\n0000001000\\r\\n', 'output': ['3\\r\\n']}, {'input': '10 6\\r\\n0000000000\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 21\\r\\n0110111011000010010101011101110101110111000111101011110100011011100011111101001010001111001111111000\\r\\n', 'output': ['7\\r\\n']}, {'input': '10 9\\r\\n0111011010\\r\\n', 'output': ['3\\r\\n']}, {'input': '100 89\\r\\n0011011110011111111010111101101100101111111111011011111111110111101111101111111101111011111011101110\\r\\n', 'output': ['10\\r\\n']}, {'input': '10 6\\r\\n0000000000\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 81\\r\\n0110111011000010010101011101110101110111000111101011110100011011100011111101001010001111001111111000\\r\\n', 'output': ['7\\r\\n']}]", "source_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint k = scan.nextInt();\n\t\tString s = scan.next();\n\t\tint min = 1000000;\n\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\tif (s.charAt(i) == '0' && s.charAt(i + 1) == '1') {\n\t\t\t\tmin = Math.min(min, n - 1 - i);\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tif (s.charAt(i - 1) == '1' && s.charAt(i) == '0') {\n\t\t\t\tmin = Math.min(min, i);\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= k - 2; i++) {\n\t\t\tif (s.charAt(i) == '0' && s.charAt(i - 1) == '1') {\n\t\t\t\tint min1 = Math.min(min, i - 1);\n\t\t\t\tint min2 = Math.min(min, n - 1 - i);\n\t\t\t\tint min3 = Math.min(min, n - 1 - (k - i));\n\t\t\t\tmin = min1 + min2 + min3;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(min);\n\t}\n}\n"}
{"src_uid": "e33b0a752dc1aba25da21e20435e3fe2", "id": 94, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2000, "testcases": "[{'input': '3 3\\r\\n010\\r\\n', 'output': ['1\\r\\n']}, {'input': '8 3\\r\\n01010110\\r\\n', 'output': ['3\\r\\n']}, {'input': '9 5\\r\\n001100110\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 2\\r\\n00\\r\\n', 'output': ['0\\r\\n']}, {'input': '3 2\\r\\n010\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 2\\r\\n000\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 3\\r\\n000\\r\\n', 'output': ['0\\r\\n']}, {'input': '4 2\\r\\n0000\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 2\\r\\n0100\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 2\\r\\n0010\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 2\\r\\n0110\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 3\\r\\n0000\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 3\\r\\n0010\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 3\\r\\n0100\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 3\\r\\n0110\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 4\\r\\n0000\\r\\n', 'output': ['0\\r\\n']}, {'input': '4 4\\r\\n0100\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 4\\r\\n0010\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 4\\r\\n0110\\r\\n', 'output': ['2\\r\\n']}, {'input': '10 3\\r\\n0111011010\\r\\n', 'output': ['4\\r\\n']}, {'input': '100 19\\r\\n0011011110011111111010111101101100101111111111011011111111110111101111101111111101111011111011101110\\r\\n', 'output': ['10\\r\\n']}, {'input': '10 3\\r\\n0111011010\\r\\n', 'output': ['4\\r\\n']}, {'input': '100 19\\r\\n0011011110011111111010111101101100101111111111011011111111110111101111101111111101111011111011101110\\r\\n', 'output': ['10\\r\\n']}, {'input': '10 6\\r\\n0000000000\\r\\n', 'output': ['1\\r\\n']}, {'input': '10 4\\r\\n0000001000\\r\\n', 'output': ['3\\r\\n']}, {'input': '10 6\\r\\n0000000000\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 21\\r\\n0110111011000010010101011101110101110111000111101011110100011011100011111101001010001111001111111000\\r\\n', 'output': ['7\\r\\n']}, {'input': '10 9\\r\\n0111011010\\r\\n', 'output': ['3\\r\\n']}, {'input': '100 89\\r\\n0011011110011111111010111101101100101111111111011011111111110111101111101111111101111011111011101110\\r\\n', 'output': ['10\\r\\n']}, {'input': '10 6\\r\\n0000000000\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 81\\r\\n0110111011000010010101011101110101110111000111101011110100011011100011111101001010001111001111111000\\r\\n', 'output': ['7\\r\\n']}]", "source_code": "import java.io.*;\n\n\npublic class ChocolateBars extends PrintWriter {\n    static ChocolateBars pw;\n    static InputStream is;\n    static InputStreamReader isr;\n    static BufferedReader br;\n    static StringTokenizer st;\n\n    //aashish gahoi\n    public static void main(String[] $) throws IOException {\n        is = System.in;\n        isr = new InputStreamReader(is);\n        br = new BufferedReader(isr);\n        st = new StringTokenizer(br.readLine());\n        int n = Integer.parseInt(st.nextToken()),\n            k = Integer.parseInt(st.nextToken()),\n            b, c = 0;\n        char[] bar = (br.readLine()+\"0\").toCharArray();\n        int min = 0;\n        for(int i = 0 ; i < k ; i ++){\n            b = i;\n            while(bar[++c]!= '1'){};\n            while(bar[++c] == '0'){};\n            while(bar[++c] == '1'){};\n            if(c - b > min){\n                min = c - b;\n            }\n        }\n        pw = new ChocolateBars();\n        pw.print(min);\n        pw.close();\n    }\n    ChocolateBars() throws IOException {\n        super(System.out);\n    }\n}"}
{"src_uid": "fbfc333ad4b0a750f654a00be84aea67", "id": 95, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '4 2\\r\\n1 3\\r\\n3 4\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 6\\r\\n1 2\\r\\n1 3\\r\\n1 4\\r\\n2 3\\r\\n2 4\\r\\n3 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 5\\r\\n4 2\\r\\n3 5\\r\\n4 5\\r\\n5 1\\r\\n1 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '5 4\\r\\n1 2\\r\\n3 2\\r\\n3 4\\r\\n5 4\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 1\\r\\n1 2\\r\\n', 'output': ['-1\\r\\n']}, {'input': '2 1\\r\\n1 2\\r\\n', 'output': ['-1\\r\\n']}, {'input': '2 0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '20 0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '381 0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 1\\r\\n1 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '3 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4 1\\r\\n1 4\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 5\\r\\n1 3\\r\\n2 1\\r\\n3 4\\r\\n4 2\\r\\n2 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '20 1\\r\\n20 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '21 1\\r\\n21 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '100 1\\r\\n100 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '400 1\\r\\n1 400\\r\\n', 'output': ['2\\r\\n']}, {'input': '5 5\\r\\n2 5\\r\\n1 2\\r\\n1 4\\r\\n1 3\\r\\n3 2\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class CF\n{\n \tstatic int n, m, c[], a[]; \n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tn = input.nextInt(); \n\t\tm = input.nextInt(); \n\t\tc = new int[n];\n\t\ta = new int[m + 2];\n\t\tint i, j, k, x, y; \n\t\tfor(i = 1; i <= m; i++){ \n\t\t\tx = input.nextInt();\n\t\t\ty = input.nextInt();\n\t\t\ta[x]++; a[y + n]++; c[x]++; c[y + n]++; \n\t\t}\n\t\ta[n + 1] = n - 1; \n\t\tfor(k = 2, j = 1; k <= n; k++, j++){ \n\t\t\tif(a[k] > 1){a[j] = 0; c[j] = 0;}\n\t\t\tif(a[k]!= 0){a[k + n] = a[k];}\n\t\t\tif(c[k]!= 0){a[j] = k;}\n\t\t}\n\t\tif(a[n + 1] > 1){\n\t\t\tint w = 0;\n\t\t\tfor(i = 2, j = n + 1; i <= n; i++, j++){\n\t\t\t\tif(a[i]!= a[i - 1]){w++;}\n\t\t\t\ta[j] = w; \n\t\t\t}\n\t\t}\n\t\tboolean ok = true;\n\t\tfor(i = 2, j = n + 1; i <= n; i++, j++){\n\t\t\tif(a[i] == 0){ok = false;}\n\t\t\tif(a[i]!= a[i - 1]){a[j] = i;}\n\t\t}\n\t\tif(!ok){System.out.print(-1); return;}\n\t\tfor(i = 2, j = n + 1; i <= n; i++, j++){\n\t\t\ta[j] = a[i];\n\t\t}\n\t\tint s = 0;\n\t\tfor(i = 1; i <= n - 1; i++){\n\t\t\tif(a[i]!= 0){s++;}\n\t\t\ta[i] = s; \n\t\t}\n\t\tSystem.out.print(a[n]);\n\t} \n}"}
{"src_uid": "fbfc333ad4b0a750f654a00be84aea67", "id": 95, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '4 2\\r\\n1 3\\r\\n3 4\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 6\\r\\n1 2\\r\\n1 3\\r\\n1 4\\r\\n2 3\\r\\n2 4\\r\\n3 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 5\\r\\n4 2\\r\\n3 5\\r\\n4 5\\r\\n5 1\\r\\n1 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '5 4\\r\\n1 2\\r\\n3 2\\r\\n3 4\\r\\n5 4\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 1\\r\\n1 2\\r\\n', 'output': ['-1\\r\\n']}, {'input': '2 1\\r\\n1 2\\r\\n', 'output': ['-1\\r\\n']}, {'input': '2 0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '20 0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '381 0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 1\\r\\n1 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '3 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4 1\\r\\n1 4\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 5\\r\\n1 3\\r\\n2 1\\r\\n3 4\\r\\n4 2\\r\\n2 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '20 1\\r\\n20 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '21 1\\r\\n21 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '100 1\\r\\n100 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '400 1\\r\\n1 400\\r\\n', 'output': ['2\\r\\n']}, {'input': '5 5\\r\\n2 5\\r\\n1 2\\r\\n1 4\\r\\n1 3\\r\\n3 2\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class HelloWorld {\n\n    static class Pair {\n        int x;\n        int y;\n\n        public Pair(int a, int b) {\n            x = a;\n            y = b;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int m = in.nextInt();\n        int[][] map = new int[n][n];\n\n        for (int i = 0; i < m; i++) {\n            int x = in.nextInt() - 1;\n            int y = in.nextInt() - 1;\n            map[x][y] = 1;\n            map[y][x] = 1;\n        }\n\n        int[] result = new int[2];\n        int flag = 0;\n        int x = 0;\n        int y = 0;\n        for (int i = 0; i < n; i++) {\n            x = 0;\n            y = 0;\n            for (int j = 0; j < n; j++) {\n                x += map[i][j];\n                y += map[j][i];\n            }\n            if (x == 0) {\n                flag = 1;\n                result[0] = i;\n            } else if (y == 0) {\n                flag = 2;\n                result[1] = i;\n            }\n        }\n\n        if (flag == 1) {\n            System.out.println(result[1]);\n        } else if (flag == 2) {\n            System.out.println(result[0]);\n        } else {\n            System.out.println(-1);\n        }\n    }\n}\n"}
{"src_uid": "fbfc333ad4b0a750f654a00be84aea67", "id": 95, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '4 2\\r\\n1 3\\r\\n3 4\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 6\\r\\n1 2\\r\\n1 3\\r\\n1 4\\r\\n2 3\\r\\n2 4\\r\\n3 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 5\\r\\n4 2\\r\\n3 5\\r\\n4 5\\r\\n5 1\\r\\n1 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '5 4\\r\\n1 2\\r\\n3 2\\r\\n3 4\\r\\n5 4\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 1\\r\\n1 2\\r\\n', 'output': ['-1\\r\\n']}, {'input': '2 1\\r\\n1 2\\r\\n', 'output': ['-1\\r\\n']}, {'input': '2 0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '20 0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '381 0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 1\\r\\n1 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '3 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4 1\\r\\n1 4\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 5\\r\\n1 3\\r\\n2 1\\r\\n3 4\\r\\n4 2\\r\\n2 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '20 1\\r\\n20 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '21 1\\r\\n21 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '100 1\\r\\n100 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '400 1\\r\\n1 400\\r\\n', 'output': ['2\\r\\n']}, {'input': '5 5\\r\\n2 5\\r\\n1 2\\r\\n1 4\\r\\n1 3\\r\\n3 2\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Solution {\n\tstatic Scanner sc = new Scanner(System.in);\n\tstatic boolean isIn(int n, int arr[]) {\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tif (arr[i] == n)\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tint[] town = new int[400], bus = new int[400];\n\t\tint n = sc.nextInt(), m = sc.nextInt(), train = 1, bus = 1;\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tint a = sc.nextInt(), b = sc.nextInt();\n\t\t\tif (a == 1) {\n\t\t\t\ttown[a] = b;\n\t\t\t} else if (b == n) {\n\t\t\t\ttown[b] = a;\n\t\t\t} else {\n\t\t\t\ttown[a] = n + 1;\n\t\t\t\ttown[b] = n + 1;\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tfor (int i = 2; i <= n; i++) {\n\t\t\tif (town[i]!= n + 1) {\n\t\t\t\tmax = Math.max(max, town[i]);\n\t\t\t}\n\t\t}\n\t\tif (max == 0) {\n\t\t\tSystem.out.println(-1);\n\t\t} else {\n\t\t\tfor (int i = 2; i <= n; i++) {\n\t\t\t\tif (town[i] == n + 1) {\n\t\t\t\t\tint temp = 0;\n\t\t\t\t\tfor (int j = i; j <= n; j += (i + 1)) {\n\t\t\t\t\t\tif (town[j] == n + 1) {\n\t\t\t\t\t\t\ttemp++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttemp /= i;\n\t\t\t\t\ttemp++;\n\t\t\t\t\tint min = max * 2;\n\t\t\t\t\tfor (int j = i; j <= n; j += (i + 1)) {\n\t\t\t\t\t\tif (town[j] == n + 1) {\n\t\t\t\t\t\t\tmin = Math.min(min, (town[(j + i) % n] + temp - 1));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(min);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"}
{"src_uid": "fbfc333ad4b0a750f654a00be84aea67", "id": 95, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '4 2\\r\\n1 3\\r\\n3 4\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 6\\r\\n1 2\\r\\n1 3\\r\\n1 4\\r\\n2 3\\r\\n2 4\\r\\n3 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 5\\r\\n4 2\\r\\n3 5\\r\\n4 5\\r\\n5 1\\r\\n1 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '5 4\\r\\n1 2\\r\\n3 2\\r\\n3 4\\r\\n5 4\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 1\\r\\n1 2\\r\\n', 'output': ['-1\\r\\n']}, {'input': '2 1\\r\\n1 2\\r\\n', 'output': ['-1\\r\\n']}, {'input': '2 0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '20 0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '381 0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 1\\r\\n1 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '3 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4 1\\r\\n1 4\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 5\\r\\n1 3\\r\\n2 1\\r\\n3 4\\r\\n4 2\\r\\n2 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '20 1\\r\\n20 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '21 1\\r\\n21 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '100 1\\r\\n100 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '400 1\\r\\n1 400\\r\\n', 'output': ['2\\r\\n']}, {'input': '5 5\\r\\n2 5\\r\\n1 2\\r\\n1 4\\r\\n1 3\\r\\n3 2\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Scanner;\n\n/**\n * @author Ahmet_Naser\n * \n * 45.593ms\n */\n\npublic class Sol {\n\n\tstatic int INF = 2 * 1000 * 1000;\n\tstatic int MAX = 2 * 1000;\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt(), m = in.nextInt();\n\t\tint[][] railways = new int[m][2];\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < 2; j++) {\n\t\t\t\trailways[i][j] = in.nextInt() - 1;\n\t\t\t}\n\t\t}\n\t\tint[] times = new int[2 * n - 2];\n\t\tArrays.fill(times, INF);\n\t\ttimes[0] = 0;\n\t\ttimes[1] = 0;\n\t\tfor (int k = 2; k < 2 * n - 2; k++) {\n\t\t\tfor (int i = 0; i < m; i++) {\n\t\t\t\ttimes[k] = Math.min(times[k], Math.max(times[railways[i][0]], times[railways[i][1]]) + 1);\n\t\t\t}\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\ttimes[k] = Math.min(times[k], times[k - n + i + 1] + 1);\n\t\t\t}\n\t\t}\n\t\tint result = INF;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tresult = Math.min(result, times[2 * n - 3 - i] + 1);\n\t\t}\n\t\tSystem.out.println((result == INF)? -1 : result);\n\t}\n}\n"}
{"src_uid": "fbfc333ad4b0a750f654a00be84aea67", "id": 95, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '4 2\\r\\n1 3\\r\\n3 4\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 6\\r\\n1 2\\r\\n1 3\\r\\n1 4\\r\\n2 3\\r\\n2 4\\r\\n3 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 5\\r\\n4 2\\r\\n3 5\\r\\n4 5\\r\\n5 1\\r\\n1 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '5 4\\r\\n1 2\\r\\n3 2\\r\\n3 4\\r\\n5 4\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 1\\r\\n1 2\\r\\n', 'output': ['-1\\r\\n']}, {'input': '2 1\\r\\n1 2\\r\\n', 'output': ['-1\\r\\n']}, {'input': '2 0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '20 0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '381 0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 0\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 1\\r\\n1 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '3 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4 1\\r\\n1 4\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 5\\r\\n1 3\\r\\n2 1\\r\\n3 4\\r\\n4 2\\r\\n2 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '20 1\\r\\n20 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '21 1\\r\\n21 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '100 1\\r\\n100 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '400 1\\r\\n1 400\\r\\n', 'output': ['2\\r\\n']}, {'input': '5 5\\r\\n2 5\\r\\n1 2\\r\\n1 4\\r\\n1 3\\r\\n3 2\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport static java.util.Collections.reverseOrder;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class HelloWorld {\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n\n        int n = scanner.nextInt();\n        int m = scanner.nextInt();\n\n        int trainTime = 1;\n        int busTime = 1;\n\n        int trainIndex = 1;\n        int busIndex = 1;\n\n        while (trainIndex <= n && busIndex <= n) {\n            trainTime = (trainTime + 1) % n;\n            trainIndex = (trainIndex + m) % n;\n\n            if (trainIndex == 0) {\n                trainTime = (trainTime + 1) % n;\n                trainIndex = 1;\n            }\n\n            busTime = (busTime + 1) % n;\n            busIndex = (busIndex + 1) % n;\n\n            if (busIndex == 0) {\n                busTime = (busTime + 1) % n;\n                busIndex = 1;\n            }\n\n            if (trainIndex == 0 && busIndex == 0) {\n                System.out.println(n);\n                return;\n            }\n        }\n\n        if (busIndex == 0) {\n            System.out.println(trainTime);\n        } else if (trainIndex == 0) {\n            System.out.println(busTime);\n        } else {\n            System.out.println(Math.max(trainTime, busTime));\n        }\n    }\n}\n"}
{"src_uid": "2468eead8acc5b8f5ddc51bfa2bd4fb7", "id": 96, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '4\\r\\n', 'output': ['28 41']}, {'input': '7\\r\\n', 'output': ['47 65']}, {'input': '12\\r\\n', 'output': ['48 105']}, {'input': '1\\r\\n', 'output': ['17 17']}, {'input': '6\\r\\n', 'output': ['34 57']}, {'input': '8\\r\\n', 'output': ['40 73']}, {'input': '9\\r\\n', 'output': ['41 81']}, {'input': '14\\r\\n', 'output': ['58 121']}, {'input': '15\\r\\n', 'output': ['55 129']}, {'input': '16\\r\\n', 'output': ['56 137']}, {'input': '18\\r\\n', 'output': ['57 153']}, {'input': '20\\r\\n', 'output': ['64 169']}, {'input': '299999771\\r\\n', 'output': ['1499998867 2399998177']}, {'input': '54\\r\\n', 'output': ['106 441']}, {'input': '96\\r\\n', 'output': ['144 777']}, {'input': '348\\r\\n', 'output': ['396 2793']}, {'input': '748\\r\\n', 'output': ['487 5993']}, {'input': '908\\r\\n', 'output': ['1840 7273']}, {'input': '1026\\r\\n', 'output': ['591 8217']}, {'input': '1985\\r\\n', 'output': ['3601 15889']}, {'input': '4472\\r\\n', 'output': ['1603 35785']}, {'input': '20845\\r\\n', 'output': ['8873 166769']}, {'input': '50480\\r\\n', 'output': ['17884 403849']}, {'input': '62497\\r\\n', 'output': ['312497 499985']}, {'input': '646055\\r\\n', 'output': ['140995 5168449']}, {'input': '790620\\r\\n', 'output': ['316416 6324969']}, {'input': '989903\\r\\n', 'output': ['1082167 7919233']}, {'input': '7033800\\r\\n', 'output': ['210976 56270409']}, {'input': '7661860\\r\\n', 'output': ['546725 61294889']}, {'input': '7834243\\r\\n', 'output': ['8302235 62673953']}, {'input': '45134118\\r\\n', 'output': ['19223945 361072953']}, {'input': '89054701\\r\\n', 'output': ['445273517 712437617']}, {'input': '99264891\\r\\n', 'output': ['15587889 794119137']}, {'input': '127039320\\r\\n', 'output': ['1209066 1016314569']}, {'input': '206898748\\r\\n', 'output': ['1683461 1655189993']}, {'input': '231136953\\r\\n', 'output': ['539319577 1849095633']}, {'input': '257259713\\r\\n', 'output': ['2122207 2058077713']}, {'input': '286736327\\r\\n', 'output': ['290355727 2293890625']}, {'input': '311933803\\r\\n', 'output': ['1559669027 2495470433']}, {'input': '332393619\\r\\n', 'output': ['10714371 2659148961']}, {'input': '422114561\\r\\n', 'output': ['78417139 3376916497']}, {'input': '453012754\\r\\n', 'output': ['2844347 3624102041']}, {'input': '470860680\\r\\n', 'output': ['129486993 3766885449']}, {'input': '509607936\\r\\n', 'output': ['3045276 4076863497']}, {'input': '534879507\\r\\n', 'output': ['253364145 4279036065']}, {'input': '535074941\\r\\n', 'output': ['647722381 4280599537']}, {'input': '536870912\\r\\n', 'output': ['3151876 4294967305']}, {'input': '573308928\\r\\n', 'output': ['3301020 4586471433']}, {'input': '603979776\\r\\n', 'output': ['3414276 4831838217']}, {'input': '605404800\\r\\n', 'output': ['3414952 4843238409']}, {'input': '615716902\\r\\n', 'output': ['10508698 4925735225']}, {'input': '628464178\\r\\n', 'output': ['3574502 5027713433']}, {'input': '631243141\\r\\n', 'output': ['634644469 5049945137']}, {'input': '644972544\\r\\n', 'output': ['3573148 5159780361']}, {'input': '659274082\\r\\n', 'output': ['1977822262 5274192665']}, {'input': '679477248\\r\\n', 'output': ['3693060 5435817993']}, {'input': '735134400\\r\\n', 'output': ['3886608 5881075209']}, {'input': '764411904\\r\\n', 'output': ['3988228 6115295241']}, {'input': '778377600\\r\\n', 'output': ['4036708 6227020809']}, {'input': '791683200\\r\\n', 'output': ['4082888 6333465609']}, {'input': '805306368\\r\\n', 'output': ['4201476 6442450953']}, {'input': '821620800\\r\\n', 'output': ['4185636 6572966409']}, {'input': '856079286\\r\\n', 'output': ['196667409 6848634297']}, {'input': '857656800\\r\\n', 'output': ['4307008 6861254409']}, {'input': '859963392\\r\\n', 'output': ['4320292 6879707145']}, {'input': '864864000\\r\\n', 'output': ['4331048 6918912009']}, {'input': '882161280\\r\\n', 'output': ['4388720 7057290249']}, {'input': '884822400\\r\\n', 'output': ['4396766 7078579209']}, {'input': '905969664\\r\\n', 'output': ['4529412 7247757321']}, {'input': '908107200\\r\\n', 'output': ['4474050 7264857609']}, {'input': '918918000\\r\\n', 'output': ['4511288 7351344009']}, {'input': '931170240\\r\\n', 'output': ['4548514 7449361929']}, {'input': '935625600\\r\\n', 'output': ['4563150 7485004809']}, {'input': '936354996\\r\\n', 'output': ['40069269 7490839977']}, {'input': '951350400\\r\\n', 'output': ['4614600 7610803209']}, {'input': '958557600\\r\\n', 'output': ['4637398 7668460809']}, {'input': '972972000\\r\\n', 'output': ['4685478 7783776009']}, {'input': '980179200\\r\\n', 'output': ['4707050 7841433609']}, {'input': '985944960\\r\\n', 'output': ['4725040 7887559689']}, {'input': '994593600\\r\\n', 'output': ['4752650 7956748809']}, {'input': '999893227\\r\\n', 'output': ['1000183267 7999145825']}, {'input': '999893387\\r\\n', 'output': ['1000724227 7999147105']}, {'input': '999905161\\r\\n', 'output': ['1000161721 7999241297']}, {'input': '999942949\\r\\n', 'output': ['1000368197 7999543601']}, {'input': '999996583\\r\\n', 'output': ['1022096687 7999972673']}, {'input': '999999797\\r\\n', 'output': ['4999998997 7999998385']}, {'input': '999999883\\r\\n', 'output': ['4999999427 7999999073']}, {'input': '999999893\\r\\n', 'output': ['4999999477 7999999153']}, {'input': '999999929\\r\\n', 'output': ['4999999657 7999999441']}, {'input': '999999937\\r\\n', 'output': ['4999999697 7999999505']}, {'input': '999999991\\r\\n', 'output': ['1059701759 7999999937']}, {'input': '999999992\\r\\n', 'output': ['129518035 7999999945']}, {'input': '999999993\\r\\n', 'output': ['490196227 7999999953']}, {'input': '999999994\\r\\n', 'output': ['928571477 7999999961']}, {'input': '999999995\\r\\n', 'output': ['4924975 7999999969']}, {'input': '999999996\\r\\n', 'output': ['1000000044 7999999977']}, {'input': '999999997\\r\\n', 'output': ['15309947 7999999985']}, {'input': '999999998\\r\\n', 'output': ['504345691 7999999993']}, {'input': '999999999\\r\\n', 'output': ['52392027 8000000001']}, {'input': '1000000000\\r\\n', 'output': ['4770064 8000000009']}]", "source_code": "import java.util.*;\nimport java.io.*;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\npublic class Solution {\n\n\tstatic class Reader {\n\t\tfinal private int BUFFER_SIZE = 1 << 16;\n\t\tprivate DataInputStream din;\n\t\tprivate byte[] buffer;\n\t\tprivate int bufferPointer, bytesRead;\n\n\t\tpublic Reader() {\n\t\t\tdin = new DataInputStream(System.in);\n\t\t\tbuffer = new byte[BUFFER_SIZE];\n\t\t\tbufferPointer = bytesRead = 0;\n\t\t}\n\n\t\tpublic Reader(String file_name) throws IOException {\n\t\t\tdin = new DataInputStream(new FileInputStream(file_name));\n\t\t\tbuffer = new byte[BUFFER_SIZE];\n\t\t\tbufferPointer = bytesRead = 0;\n\t\t}\n\n\t\tpublic String readLine() throws IOException {\n\t\t\tbyte[] buf = new byte[64]; // line length\n\t\t\tint cnt = 0, c;\n\t\t\twhile ((c = read())!= -1) {\n\t\t\t\tif (c == '\\n') {\n\t\t\t\t\treturn new String(buf, 0, cnt);\n\t\t\t\t}\n\t\t\t\tbuf[cnt++] = (byte) c;\n\t\t\t}\n\t\t\treturn new String(buf, 0, cnt);\n\t\t}\n\n\t\tpublic int nextInt() throws IOException {\n\t\t\tint ret = 0;\n\t\t\tbyte c = read();\n\t\t\tif (c == -1 ||!isNumber(c)) {\n\t\t\t\tthrow new NumberFormatException();\n\t\t\t}\n\t\t\tboolean neg = (c == '-');\n\t\t\tif (neg) c = read();\n\t\t\tdo {\n\t\t\t\tif (c < '0' || c > '9') throw new NumberFormatException();\n\t\t\t\tret *= 10;\n\t\t\t\tret += c - '0';\n\t\t\t}  while ((c = read())!= -1 && isNumber(c));\n\t\t\tif (neg) return -ret;\n\t\t\treturn ret;\n\t\t}\n\n\t\tpublic long nextLong() throws IOException {\n\t\t\tlong ret = 0;\n\t\t\tbyte c = read();\n\t\t\tif (c == -1 ||!isNumber(c)) {\n\t\t\t\tthrow new NumberFormatException();\n\t\t\t}\n\t\t\tboolean neg = (c == '-');\n\t\t\tif (neg) c = read();\n\t\t\tdo {\n\t\t\t\tif (c < '0' || c > '9') throw new NumberFormatException();\n\t\t\t\tret *= 10;\n\t\t\t\tret += c - '0';\n\t\t\t}\n\t\t\twhile ((c = read())!= -1 && isNumber(c));\n\t\t\tif (neg) return -ret;\n\t\t\treturn ret;\n\t\t}\n\n\t\tpublic double nextDouble() throws IOException {\n\t\t\tdouble ret = 0, div = 1;\n\t\t\tbyte c = read();\n\t\t\tif (c == -1 ||!isNumber(c)) {\n\t\t\t\tthrow new NumberFormatException();\n\t\t\t}\n\t\t\tboolean neg = (c == '-'), dec = false;\n\t\t\tif (neg) c = read();\n\t\t\tdo {\n\t\t\t\tif (c < '0' || c > '9') throw new NumberFormatException();\n\t\t\t\tret *= 10;\n\t\t\t\tret += c - '0';\n\t\t\t}\n\t\t\twhile ((c = read())!= -1 && isNumber(c));\n\t\t\tif (c == '.') {\n\t\t\t\tdec = true;\n\t\t\t\tc = read();\n\t\t\t}\n\t\t\tdouble exp = 10;\n\t\t\tif (c == 'e' || c == 'E') {\n\t\t\t\tint e = nextInt();\n\t\t\t\tif (e < 0) {\n\t\t\t\t\texp = 1/exp;\n\t\t\t\t\te = -e;\n\t\t\t\t}\n\t\t\t\tfor (int i = "}
{"src_uid": "2468eead8acc5b8f5ddc51bfa2bd4fb7", "id": 96, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '4\\r\\n', 'output': ['28 41']}, {'input': '7\\r\\n', 'output': ['47 65']}, {'input': '12\\r\\n', 'output': ['48 105']}, {'input': '1\\r\\n', 'output': ['17 17']}, {'input': '6\\r\\n', 'output': ['34 57']}, {'input': '8\\r\\n', 'output': ['40 73']}, {'input': '9\\r\\n', 'output': ['41 81']}, {'input': '14\\r\\n', 'output': ['58 121']}, {'input': '15\\r\\n', 'output': ['55 129']}, {'input': '16\\r\\n', 'output': ['56 137']}, {'input': '18\\r\\n', 'output': ['57 153']}, {'input': '20\\r\\n', 'output': ['64 169']}, {'input': '299999771\\r\\n', 'output': ['1499998867 2399998177']}, {'input': '54\\r\\n', 'output': ['106 441']}, {'input': '96\\r\\n', 'output': ['144 777']}, {'input': '348\\r\\n', 'output': ['396 2793']}, {'input': '748\\r\\n', 'output': ['487 5993']}, {'input': '908\\r\\n', 'output': ['1840 7273']}, {'input': '1026\\r\\n', 'output': ['591 8217']}, {'input': '1985\\r\\n', 'output': ['3601 15889']}, {'input': '4472\\r\\n', 'output': ['1603 35785']}, {'input': '20845\\r\\n', 'output': ['8873 166769']}, {'input': '50480\\r\\n', 'output': ['17884 403849']}, {'input': '62497\\r\\n', 'output': ['312497 499985']}, {'input': '646055\\r\\n', 'output': ['140995 5168449']}, {'input': '790620\\r\\n', 'output': ['316416 6324969']}, {'input': '989903\\r\\n', 'output': ['1082167 7919233']}, {'input': '7033800\\r\\n', 'output': ['210976 56270409']}, {'input': '7661860\\r\\n', 'output': ['546725 61294889']}, {'input': '7834243\\r\\n', 'output': ['8302235 62673953']}, {'input': '45134118\\r\\n', 'output': ['19223945 361072953']}, {'input': '89054701\\r\\n', 'output': ['445273517 712437617']}, {'input': '99264891\\r\\n', 'output': ['15587889 794119137']}, {'input': '127039320\\r\\n', 'output': ['1209066 1016314569']}, {'input': '206898748\\r\\n', 'output': ['1683461 1655189993']}, {'input': '231136953\\r\\n', 'output': ['539319577 1849095633']}, {'input': '257259713\\r\\n', 'output': ['2122207 2058077713']}, {'input': '286736327\\r\\n', 'output': ['290355727 2293890625']}, {'input': '311933803\\r\\n', 'output': ['1559669027 2495470433']}, {'input': '332393619\\r\\n', 'output': ['10714371 2659148961']}, {'input': '422114561\\r\\n', 'output': ['78417139 3376916497']}, {'input': '453012754\\r\\n', 'output': ['2844347 3624102041']}, {'input': '470860680\\r\\n', 'output': ['129486993 3766885449']}, {'input': '509607936\\r\\n', 'output': ['3045276 4076863497']}, {'input': '534879507\\r\\n', 'output': ['253364145 4279036065']}, {'input': '535074941\\r\\n', 'output': ['647722381 4280599537']}, {'input': '536870912\\r\\n', 'output': ['3151876 4294967305']}, {'input': '573308928\\r\\n', 'output': ['3301020 4586471433']}, {'input': '603979776\\r\\n', 'output': ['3414276 4831838217']}, {'input': '605404800\\r\\n', 'output': ['3414952 4843238409']}, {'input': '615716902\\r\\n', 'output': ['10508698 4925735225']}, {'input': '628464178\\r\\n', 'output': ['3574502 5027713433']}, {'input': '631243141\\r\\n', 'output': ['634644469 5049945137']}, {'input': '644972544\\r\\n', 'output': ['3573148 5159780361']}, {'input': '659274082\\r\\n', 'output': ['1977822262 5274192665']}, {'input': '679477248\\r\\n', 'output': ['3693060 5435817993']}, {'input': '735134400\\r\\n', 'output': ['3886608 5881075209']}, {'input': '764411904\\r\\n', 'output': ['3988228 6115295241']}, {'input': '778377600\\r\\n', 'output': ['4036708 6227020809']}, {'input': '791683200\\r\\n', 'output': ['4082888 6333465609']}, {'input': '805306368\\r\\n', 'output': ['4201476 6442450953']}, {'input': '821620800\\r\\n', 'output': ['4185636 6572966409']}, {'input': '856079286\\r\\n', 'output': ['196667409 6848634297']}, {'input': '857656800\\r\\n', 'output': ['4307008 6861254409']}, {'input': '859963392\\r\\n', 'output': ['4320292 6879707145']}, {'input': '864864000\\r\\n', 'output': ['4331048 6918912009']}, {'input': '882161280\\r\\n', 'output': ['4388720 7057290249']}, {'input': '884822400\\r\\n', 'output': ['4396766 7078579209']}, {'input': '905969664\\r\\n', 'output': ['4529412 7247757321']}, {'input': '908107200\\r\\n', 'output': ['4474050 7264857609']}, {'input': '918918000\\r\\n', 'output': ['4511288 7351344009']}, {'input': '931170240\\r\\n', 'output': ['4548514 7449361929']}, {'input': '935625600\\r\\n', 'output': ['4563150 7485004809']}, {'input': '936354996\\r\\n', 'output': ['40069269 7490839977']}, {'input': '951350400\\r\\n', 'output': ['4614600 7610803209']}, {'input': '958557600\\r\\n', 'output': ['4637398 7668460809']}, {'input': '972972000\\r\\n', 'output': ['4685478 7783776009']}, {'input': '980179200\\r\\n', 'output': ['4707050 7841433609']}, {'input': '985944960\\r\\n', 'output': ['4725040 7887559689']}, {'input': '994593600\\r\\n', 'output': ['4752650 7956748809']}, {'input': '999893227\\r\\n', 'output': ['1000183267 7999145825']}, {'input': '999893387\\r\\n', 'output': ['1000724227 7999147105']}, {'input': '999905161\\r\\n', 'output': ['1000161721 7999241297']}, {'input': '999942949\\r\\n', 'output': ['1000368197 7999543601']}, {'input': '999996583\\r\\n', 'output': ['1022096687 7999972673']}, {'input': '999999797\\r\\n', 'output': ['4999998997 7999998385']}, {'input': '999999883\\r\\n', 'output': ['4999999427 7999999073']}, {'input': '999999893\\r\\n', 'output': ['4999999477 7999999153']}, {'input': '999999929\\r\\n', 'output': ['4999999657 7999999441']}, {'input': '999999937\\r\\n', 'output': ['4999999697 7999999505']}, {'input': '999999991\\r\\n', 'output': ['1059701759 7999999937']}, {'input': '999999992\\r\\n', 'output': ['129518035 7999999945']}, {'input': '999999993\\r\\n', 'output': ['490196227 7999999953']}, {'input': '999999994\\r\\n', 'output': ['928571477 7999999961']}, {'input': '999999995\\r\\n', 'output': ['4924975 7999999969']}, {'input': '999999996\\r\\n', 'output': ['1000000044 7999999977']}, {'input': '999999997\\r\\n', 'output': ['15309947 7999999985']}, {'input': '999999998\\r\\n', 'output': ['504345691 7999999993']}, {'input': '999999999\\r\\n', 'output': ['52392027 8000000001']}, {'input': '1000000000\\r\\n', 'output': ['4770064 8000000009']}]", "source_code": "import java.io.BufferedInputStream;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport static java.util.Arrays.asList;\nimport static java.util.Collections.reverseOrder;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n\npublic class Hackerearth {\n    public static void main(String[] args) throws IOException {\n      \n     Scanner s=new Scanner(System.in);\n     long n=s.nextLong();\n     long a=n/1;\n     long b=n/2;\n     long c=n/4;\n     \n     while(a!=1)\n     {\n       if(n%a!=0)\n       {\n         a--;\n       }\n       else \n       {\n           break;\n       } \n     } \n     while(b!=1)\n     {\n       if(n%b!=0)\n       {\n         b--;\n       }\n       else \n       {\n           break;\n       } \n     } \n     while(c!=1)\n     {\n       if(n%c!=0)\n       {\n         c--;\n       }\n       else \n       {\n           break;\n       } \n     } \n     long stolen1=(a*b*c)-n;\n     stolen1+=n-(a*b)-(b*c)-(a*c);\n     stolen1+=n-(a*b)-(b*c);\n     stolen1+=n-(a*b);\n     long stolen2=((a-1)*b*c)-n;\n     stolen2+=(n-a*b)+(a*(b-2))+(b*c);\n     stolen2+=n-a*(b-2)-b*c;\n     stolen2+=n-a*(b-2);\n     System.out.println(stolen1+\" \"+stolen2);\n    }\n}\n"}
{"src_uid": "2468eead8acc5b8f5ddc51bfa2bd4fb7", "id": 96, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '4\\r\\n', 'output': ['28 41']}, {'input': '7\\r\\n', 'output': ['47 65']}, {'input': '12\\r\\n', 'output': ['48 105']}, {'input': '1\\r\\n', 'output': ['17 17']}, {'input': '6\\r\\n', 'output': ['34 57']}, {'input': '8\\r\\n', 'output': ['40 73']}, {'input': '9\\r\\n', 'output': ['41 81']}, {'input': '14\\r\\n', 'output': ['58 121']}, {'input': '15\\r\\n', 'output': ['55 129']}, {'input': '16\\r\\n', 'output': ['56 137']}, {'input': '18\\r\\n', 'output': ['57 153']}, {'input': '20\\r\\n', 'output': ['64 169']}, {'input': '299999771\\r\\n', 'output': ['1499998867 2399998177']}, {'input': '54\\r\\n', 'output': ['106 441']}, {'input': '96\\r\\n', 'output': ['144 777']}, {'input': '348\\r\\n', 'output': ['396 2793']}, {'input': '748\\r\\n', 'output': ['487 5993']}, {'input': '908\\r\\n', 'output': ['1840 7273']}, {'input': '1026\\r\\n', 'output': ['591 8217']}, {'input': '1985\\r\\n', 'output': ['3601 15889']}, {'input': '4472\\r\\n', 'output': ['1603 35785']}, {'input': '20845\\r\\n', 'output': ['8873 166769']}, {'input': '50480\\r\\n', 'output': ['17884 403849']}, {'input': '62497\\r\\n', 'output': ['312497 499985']}, {'input': '646055\\r\\n', 'output': ['140995 5168449']}, {'input': '790620\\r\\n', 'output': ['316416 6324969']}, {'input': '989903\\r\\n', 'output': ['1082167 7919233']}, {'input': '7033800\\r\\n', 'output': ['210976 56270409']}, {'input': '7661860\\r\\n', 'output': ['546725 61294889']}, {'input': '7834243\\r\\n', 'output': ['8302235 62673953']}, {'input': '45134118\\r\\n', 'output': ['19223945 361072953']}, {'input': '89054701\\r\\n', 'output': ['445273517 712437617']}, {'input': '99264891\\r\\n', 'output': ['15587889 794119137']}, {'input': '127039320\\r\\n', 'output': ['1209066 1016314569']}, {'input': '206898748\\r\\n', 'output': ['1683461 1655189993']}, {'input': '231136953\\r\\n', 'output': ['539319577 1849095633']}, {'input': '257259713\\r\\n', 'output': ['2122207 2058077713']}, {'input': '286736327\\r\\n', 'output': ['290355727 2293890625']}, {'input': '311933803\\r\\n', 'output': ['1559669027 2495470433']}, {'input': '332393619\\r\\n', 'output': ['10714371 2659148961']}, {'input': '422114561\\r\\n', 'output': ['78417139 3376916497']}, {'input': '453012754\\r\\n', 'output': ['2844347 3624102041']}, {'input': '470860680\\r\\n', 'output': ['129486993 3766885449']}, {'input': '509607936\\r\\n', 'output': ['3045276 4076863497']}, {'input': '534879507\\r\\n', 'output': ['253364145 4279036065']}, {'input': '535074941\\r\\n', 'output': ['647722381 4280599537']}, {'input': '536870912\\r\\n', 'output': ['3151876 4294967305']}, {'input': '573308928\\r\\n', 'output': ['3301020 4586471433']}, {'input': '603979776\\r\\n', 'output': ['3414276 4831838217']}, {'input': '605404800\\r\\n', 'output': ['3414952 4843238409']}, {'input': '615716902\\r\\n', 'output': ['10508698 4925735225']}, {'input': '628464178\\r\\n', 'output': ['3574502 5027713433']}, {'input': '631243141\\r\\n', 'output': ['634644469 5049945137']}, {'input': '644972544\\r\\n', 'output': ['3573148 5159780361']}, {'input': '659274082\\r\\n', 'output': ['1977822262 5274192665']}, {'input': '679477248\\r\\n', 'output': ['3693060 5435817993']}, {'input': '735134400\\r\\n', 'output': ['3886608 5881075209']}, {'input': '764411904\\r\\n', 'output': ['3988228 6115295241']}, {'input': '778377600\\r\\n', 'output': ['4036708 6227020809']}, {'input': '791683200\\r\\n', 'output': ['4082888 6333465609']}, {'input': '805306368\\r\\n', 'output': ['4201476 6442450953']}, {'input': '821620800\\r\\n', 'output': ['4185636 6572966409']}, {'input': '856079286\\r\\n', 'output': ['196667409 6848634297']}, {'input': '857656800\\r\\n', 'output': ['4307008 6861254409']}, {'input': '859963392\\r\\n', 'output': ['4320292 6879707145']}, {'input': '864864000\\r\\n', 'output': ['4331048 6918912009']}, {'input': '882161280\\r\\n', 'output': ['4388720 7057290249']}, {'input': '884822400\\r\\n', 'output': ['4396766 7078579209']}, {'input': '905969664\\r\\n', 'output': ['4529412 7247757321']}, {'input': '908107200\\r\\n', 'output': ['4474050 7264857609']}, {'input': '918918000\\r\\n', 'output': ['4511288 7351344009']}, {'input': '931170240\\r\\n', 'output': ['4548514 7449361929']}, {'input': '935625600\\r\\n', 'output': ['4563150 7485004809']}, {'input': '936354996\\r\\n', 'output': ['40069269 7490839977']}, {'input': '951350400\\r\\n', 'output': ['4614600 7610803209']}, {'input': '958557600\\r\\n', 'output': ['4637398 7668460809']}, {'input': '972972000\\r\\n', 'output': ['4685478 7783776009']}, {'input': '980179200\\r\\n', 'output': ['4707050 7841433609']}, {'input': '985944960\\r\\n', 'output': ['4725040 7887559689']}, {'input': '994593600\\r\\n', 'output': ['4752650 7956748809']}, {'input': '999893227\\r\\n', 'output': ['1000183267 7999145825']}, {'input': '999893387\\r\\n', 'output': ['1000724227 7999147105']}, {'input': '999905161\\r\\n', 'output': ['1000161721 7999241297']}, {'input': '999942949\\r\\n', 'output': ['1000368197 7999543601']}, {'input': '999996583\\r\\n', 'output': ['1022096687 7999972673']}, {'input': '999999797\\r\\n', 'output': ['4999998997 7999998385']}, {'input': '999999883\\r\\n', 'output': ['4999999427 7999999073']}, {'input': '999999893\\r\\n', 'output': ['4999999477 7999999153']}, {'input': '999999929\\r\\n', 'output': ['4999999657 7999999441']}, {'input': '999999937\\r\\n', 'output': ['4999999697 7999999505']}, {'input': '999999991\\r\\n', 'output': ['1059701759 7999999937']}, {'input': '999999992\\r\\n', 'output': ['129518035 7999999945']}, {'input': '999999993\\r\\n', 'output': ['490196227 7999999953']}, {'input': '999999994\\r\\n', 'output': ['928571477 7999999961']}, {'input': '999999995\\r\\n', 'output': ['4924975 7999999969']}, {'input': '999999996\\r\\n', 'output': ['1000000044 7999999977']}, {'input': '999999997\\r\\n', 'output': ['15309947 7999999985']}, {'input': '999999998\\r\\n', 'output': ['504345691 7999999993']}, {'input': '999999999\\r\\n', 'output': ['52392027 8000000001']}, {'input': '1000000000\\r\\n', 'output': ['4770064 8000000009']}]", "source_code": "import java.io.*;\n\npublic class Solution implements Runnable {\n    private void solve() throws IOException {\n        long n = nextInt();\n        long a = 1;\n        long b = 2;\n        long c = 2;\n        for (long v : new long[][] { { 1, 1, 1 }, { 1, 2, 2 }, { 2, 1, 2 },\n                { 2, 2, 1 }, { 3, 3, 2 }, { 3, 2, 3 }, { 2, 3, 3 } }) {\n            long m = n;\n            long p1 = 1, p2 = 1;\n            while (m >= 0 && (p1!= v[0] || p2!= v[1])) {\n                if (m > 0) {\n                    m -= v[0];\n                    p1 = v[0];\n                }\n                if (m > 0) {\n                    m -= v[1];\n                    p2 = v[1];\n                }\n            }\n            if (m == 0 && p1 == v[0] && p2 == v[1]) {\n                if (a * b * c > v[2]) {\n                    a = v[2];\n                    b = v[0];\n                    c = v[1];\n                } else if (a * b * c == v[2]) {\n                    b = b < v[0]? b : v[0];\n                    c = c < v[1]? c : v[1];\n                }\n            }\n        }\n        PrintWriter out = new PrintWriter(System.out);\n        out.printf(\"%d %d\\n\", a * b * c - n, a * b * c);\n        out.close();\n    }\n\n    private int nextInt() throws IOException {\n        return in.nextInt();\n    }\n\n    public static void main(String[] args) throws IOException {\n        try (Input in = new StandardInput()) {\n            new Solution().run();\n        }\n    }\n\n    interface Input extends Closeable {\n        String next() throws IOException;\n\n        default long nextLong() throws IOException {\n            return Long.parseLong(next());\n        }\n\n        default int nextInt() throws IOException {\n            return Integer.parseInt(next());\n        }\n\n        default short nextShort() throws IOException {\n            return Short.parseShort(next());\n        }\n\n        default double nextDouble() throws IOException {\n            return Double.parseDouble(next());\n        }\n\n        default int[] readIntArray() throws IOException {\n            return readIntArray(nextInt());\n        }\n\n        default int[] readIntArray(int size) throws IOException {\n            int[] array = new int[size];\n            for (int i = 0; i < array.length; i++) {\n                array[i] = nextInt();\n            }\n            return array;\n        }\n    }\n\n    private static class StandardInput implements Input {\n        private final StreamTokenizer in = new StreamTokenizer(new BufferedReader(\n                new InputStreamReader(System.in)));\n\n        @Override\n        public void close() throws IOException {\n        }\n\n        @Override\n        public String next() throws IOException {\n            in.nextToken();\n            return in.sval;\n        }\n    }\n\n    private static class FileInput implements Input {\n        private final FileReader in;\n\n        public FileInput(FileInput input) throws IOException {\n            this(input.in.getFile());\n        }\n\n        public FileInput(final String name) throws IOException {\n            in = new FileReader(name);\n        }\n\n        public FileInput(final File file) throws IOException {\n            in = new FileReader(file);\n        }\n\n        @Override\n        public void close() throws IOException {\n            in.close();\n        }\n\n        @Override\n        public String next() throws IOException {\n            in.nextToken();\n            return in.sval;\n        }\n    }\n\n    public interface Readable extends Closeable {\n        default String read() throws IOException {\n            return next();\n        }\n\n        default int readInt() throws IOException {\n            return nextInt();\n        }\n\n        default long readLong() throws IOException {\n            return nextLong();\n        }\n"}
{"src_uid": "2468eead8acc5b8f5ddc51bfa2bd4fb7", "id": 96, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '4\\r\\n', 'output': ['28 41']}, {'input': '7\\r\\n', 'output': ['47 65']}, {'input': '12\\r\\n', 'output': ['48 105']}, {'input': '1\\r\\n', 'output': ['17 17']}, {'input': '6\\r\\n', 'output': ['34 57']}, {'input': '8\\r\\n', 'output': ['40 73']}, {'input': '9\\r\\n', 'output': ['41 81']}, {'input': '14\\r\\n', 'output': ['58 121']}, {'input': '15\\r\\n', 'output': ['55 129']}, {'input': '16\\r\\n', 'output': ['56 137']}, {'input': '18\\r\\n', 'output': ['57 153']}, {'input': '20\\r\\n', 'output': ['64 169']}, {'input': '299999771\\r\\n', 'output': ['1499998867 2399998177']}, {'input': '54\\r\\n', 'output': ['106 441']}, {'input': '96\\r\\n', 'output': ['144 777']}, {'input': '348\\r\\n', 'output': ['396 2793']}, {'input': '748\\r\\n', 'output': ['487 5993']}, {'input': '908\\r\\n', 'output': ['1840 7273']}, {'input': '1026\\r\\n', 'output': ['591 8217']}, {'input': '1985\\r\\n', 'output': ['3601 15889']}, {'input': '4472\\r\\n', 'output': ['1603 35785']}, {'input': '20845\\r\\n', 'output': ['8873 166769']}, {'input': '50480\\r\\n', 'output': ['17884 403849']}, {'input': '62497\\r\\n', 'output': ['312497 499985']}, {'input': '646055\\r\\n', 'output': ['140995 5168449']}, {'input': '790620\\r\\n', 'output': ['316416 6324969']}, {'input': '989903\\r\\n', 'output': ['1082167 7919233']}, {'input': '7033800\\r\\n', 'output': ['210976 56270409']}, {'input': '7661860\\r\\n', 'output': ['546725 61294889']}, {'input': '7834243\\r\\n', 'output': ['8302235 62673953']}, {'input': '45134118\\r\\n', 'output': ['19223945 361072953']}, {'input': '89054701\\r\\n', 'output': ['445273517 712437617']}, {'input': '99264891\\r\\n', 'output': ['15587889 794119137']}, {'input': '127039320\\r\\n', 'output': ['1209066 1016314569']}, {'input': '206898748\\r\\n', 'output': ['1683461 1655189993']}, {'input': '231136953\\r\\n', 'output': ['539319577 1849095633']}, {'input': '257259713\\r\\n', 'output': ['2122207 2058077713']}, {'input': '286736327\\r\\n', 'output': ['290355727 2293890625']}, {'input': '311933803\\r\\n', 'output': ['1559669027 2495470433']}, {'input': '332393619\\r\\n', 'output': ['10714371 2659148961']}, {'input': '422114561\\r\\n', 'output': ['78417139 3376916497']}, {'input': '453012754\\r\\n', 'output': ['2844347 3624102041']}, {'input': '470860680\\r\\n', 'output': ['129486993 3766885449']}, {'input': '509607936\\r\\n', 'output': ['3045276 4076863497']}, {'input': '534879507\\r\\n', 'output': ['253364145 4279036065']}, {'input': '535074941\\r\\n', 'output': ['647722381 4280599537']}, {'input': '536870912\\r\\n', 'output': ['3151876 4294967305']}, {'input': '573308928\\r\\n', 'output': ['3301020 4586471433']}, {'input': '603979776\\r\\n', 'output': ['3414276 4831838217']}, {'input': '605404800\\r\\n', 'output': ['3414952 4843238409']}, {'input': '615716902\\r\\n', 'output': ['10508698 4925735225']}, {'input': '628464178\\r\\n', 'output': ['3574502 5027713433']}, {'input': '631243141\\r\\n', 'output': ['634644469 5049945137']}, {'input': '644972544\\r\\n', 'output': ['3573148 5159780361']}, {'input': '659274082\\r\\n', 'output': ['1977822262 5274192665']}, {'input': '679477248\\r\\n', 'output': ['3693060 5435817993']}, {'input': '735134400\\r\\n', 'output': ['3886608 5881075209']}, {'input': '764411904\\r\\n', 'output': ['3988228 6115295241']}, {'input': '778377600\\r\\n', 'output': ['4036708 6227020809']}, {'input': '791683200\\r\\n', 'output': ['4082888 6333465609']}, {'input': '805306368\\r\\n', 'output': ['4201476 6442450953']}, {'input': '821620800\\r\\n', 'output': ['4185636 6572966409']}, {'input': '856079286\\r\\n', 'output': ['196667409 6848634297']}, {'input': '857656800\\r\\n', 'output': ['4307008 6861254409']}, {'input': '859963392\\r\\n', 'output': ['4320292 6879707145']}, {'input': '864864000\\r\\n', 'output': ['4331048 6918912009']}, {'input': '882161280\\r\\n', 'output': ['4388720 7057290249']}, {'input': '884822400\\r\\n', 'output': ['4396766 7078579209']}, {'input': '905969664\\r\\n', 'output': ['4529412 7247757321']}, {'input': '908107200\\r\\n', 'output': ['4474050 7264857609']}, {'input': '918918000\\r\\n', 'output': ['4511288 7351344009']}, {'input': '931170240\\r\\n', 'output': ['4548514 7449361929']}, {'input': '935625600\\r\\n', 'output': ['4563150 7485004809']}, {'input': '936354996\\r\\n', 'output': ['40069269 7490839977']}, {'input': '951350400\\r\\n', 'output': ['4614600 7610803209']}, {'input': '958557600\\r\\n', 'output': ['4637398 7668460809']}, {'input': '972972000\\r\\n', 'output': ['4685478 7783776009']}, {'input': '980179200\\r\\n', 'output': ['4707050 7841433609']}, {'input': '985944960\\r\\n', 'output': ['4725040 7887559689']}, {'input': '994593600\\r\\n', 'output': ['4752650 7956748809']}, {'input': '999893227\\r\\n', 'output': ['1000183267 7999145825']}, {'input': '999893387\\r\\n', 'output': ['1000724227 7999147105']}, {'input': '999905161\\r\\n', 'output': ['1000161721 7999241297']}, {'input': '999942949\\r\\n', 'output': ['1000368197 7999543601']}, {'input': '999996583\\r\\n', 'output': ['1022096687 7999972673']}, {'input': '999999797\\r\\n', 'output': ['4999998997 7999998385']}, {'input': '999999883\\r\\n', 'output': ['4999999427 7999999073']}, {'input': '999999893\\r\\n', 'output': ['4999999477 7999999153']}, {'input': '999999929\\r\\n', 'output': ['4999999657 7999999441']}, {'input': '999999937\\r\\n', 'output': ['4999999697 7999999505']}, {'input': '999999991\\r\\n', 'output': ['1059701759 7999999937']}, {'input': '999999992\\r\\n', 'output': ['129518035 7999999945']}, {'input': '999999993\\r\\n', 'output': ['490196227 7999999953']}, {'input': '999999994\\r\\n', 'output': ['928571477 7999999961']}, {'input': '999999995\\r\\n', 'output': ['4924975 7999999969']}, {'input': '999999996\\r\\n', 'output': ['1000000044 7999999977']}, {'input': '999999997\\r\\n', 'output': ['15309947 7999999985']}, {'input': '999999998\\r\\n', 'output': ['504345691 7999999993']}, {'input': '999999999\\r\\n', 'output': ['52392027 8000000001']}, {'input': '1000000000\\r\\n', 'output': ['4770064 8000000009']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class test {\n    static class InputReader {\n        final InputStreamReader in;\n        final BufferedReader reader;\n        InputReader(InputStream in) {\n            in = new InputStreamReader(in);\n            reader = new BufferedReader(in);\n        }\n        StringTokenizer tokenizer;\n        String next() {\n            while ((tokenizer == null) || (!tokenizer.hasMoreTokens())) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            return tokenizer.nextToken();\n        }\n        int nextInt() {\n            return Integer.parseInt(next());\n        }\n        long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    static long lcm(long a, long b)\n    {\n        return (a / gcd(a,b) * b);\n    }\n    static long gcd(long a, long b)\n    {\n        if(b == 0) return a;\n        return gcd(b,a%b);\n    }\n    public static void main(String[] args) throws IOException {\n        InputReader input = new InputReader(System.in);\n        long n = input.nextLong();\n        long k = n/(2*3*2)-1;\n        long a = 2*3*2*k + 2*3*2*(k-1)+ 2*3*2*(k-2) + 2*3*2*(k-3);\n        long b = 2*3*2*k + 2*3*2*(k-1)+ 2*3*2*(k-2);\n        System.out.println(a+\" \"+b);\n    }\n}\n"}
{"src_uid": "2468eead8acc5b8f5ddc51bfa2bd4fb7", "id": 96, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '4\\r\\n', 'output': ['28 41']}, {'input': '7\\r\\n', 'output': ['47 65']}, {'input': '12\\r\\n', 'output': ['48 105']}, {'input': '1\\r\\n', 'output': ['17 17']}, {'input': '6\\r\\n', 'output': ['34 57']}, {'input': '8\\r\\n', 'output': ['40 73']}, {'input': '9\\r\\n', 'output': ['41 81']}, {'input': '14\\r\\n', 'output': ['58 121']}, {'input': '15\\r\\n', 'output': ['55 129']}, {'input': '16\\r\\n', 'output': ['56 137']}, {'input': '18\\r\\n', 'output': ['57 153']}, {'input': '20\\r\\n', 'output': ['64 169']}, {'input': '299999771\\r\\n', 'output': ['1499998867 2399998177']}, {'input': '54\\r\\n', 'output': ['106 441']}, {'input': '96\\r\\n', 'output': ['144 777']}, {'input': '348\\r\\n', 'output': ['396 2793']}, {'input': '748\\r\\n', 'output': ['487 5993']}, {'input': '908\\r\\n', 'output': ['1840 7273']}, {'input': '1026\\r\\n', 'output': ['591 8217']}, {'input': '1985\\r\\n', 'output': ['3601 15889']}, {'input': '4472\\r\\n', 'output': ['1603 35785']}, {'input': '20845\\r\\n', 'output': ['8873 166769']}, {'input': '50480\\r\\n', 'output': ['17884 403849']}, {'input': '62497\\r\\n', 'output': ['312497 499985']}, {'input': '646055\\r\\n', 'output': ['140995 5168449']}, {'input': '790620\\r\\n', 'output': ['316416 6324969']}, {'input': '989903\\r\\n', 'output': ['1082167 7919233']}, {'input': '7033800\\r\\n', 'output': ['210976 56270409']}, {'input': '7661860\\r\\n', 'output': ['546725 61294889']}, {'input': '7834243\\r\\n', 'output': ['8302235 62673953']}, {'input': '45134118\\r\\n', 'output': ['19223945 361072953']}, {'input': '89054701\\r\\n', 'output': ['445273517 712437617']}, {'input': '99264891\\r\\n', 'output': ['15587889 794119137']}, {'input': '127039320\\r\\n', 'output': ['1209066 1016314569']}, {'input': '206898748\\r\\n', 'output': ['1683461 1655189993']}, {'input': '231136953\\r\\n', 'output': ['539319577 1849095633']}, {'input': '257259713\\r\\n', 'output': ['2122207 2058077713']}, {'input': '286736327\\r\\n', 'output': ['290355727 2293890625']}, {'input': '311933803\\r\\n', 'output': ['1559669027 2495470433']}, {'input': '332393619\\r\\n', 'output': ['10714371 2659148961']}, {'input': '422114561\\r\\n', 'output': ['78417139 3376916497']}, {'input': '453012754\\r\\n', 'output': ['2844347 3624102041']}, {'input': '470860680\\r\\n', 'output': ['129486993 3766885449']}, {'input': '509607936\\r\\n', 'output': ['3045276 4076863497']}, {'input': '534879507\\r\\n', 'output': ['253364145 4279036065']}, {'input': '535074941\\r\\n', 'output': ['647722381 4280599537']}, {'input': '536870912\\r\\n', 'output': ['3151876 4294967305']}, {'input': '573308928\\r\\n', 'output': ['3301020 4586471433']}, {'input': '603979776\\r\\n', 'output': ['3414276 4831838217']}, {'input': '605404800\\r\\n', 'output': ['3414952 4843238409']}, {'input': '615716902\\r\\n', 'output': ['10508698 4925735225']}, {'input': '628464178\\r\\n', 'output': ['3574502 5027713433']}, {'input': '631243141\\r\\n', 'output': ['634644469 5049945137']}, {'input': '644972544\\r\\n', 'output': ['3573148 5159780361']}, {'input': '659274082\\r\\n', 'output': ['1977822262 5274192665']}, {'input': '679477248\\r\\n', 'output': ['3693060 5435817993']}, {'input': '735134400\\r\\n', 'output': ['3886608 5881075209']}, {'input': '764411904\\r\\n', 'output': ['3988228 6115295241']}, {'input': '778377600\\r\\n', 'output': ['4036708 6227020809']}, {'input': '791683200\\r\\n', 'output': ['4082888 6333465609']}, {'input': '805306368\\r\\n', 'output': ['4201476 6442450953']}, {'input': '821620800\\r\\n', 'output': ['4185636 6572966409']}, {'input': '856079286\\r\\n', 'output': ['196667409 6848634297']}, {'input': '857656800\\r\\n', 'output': ['4307008 6861254409']}, {'input': '859963392\\r\\n', 'output': ['4320292 6879707145']}, {'input': '864864000\\r\\n', 'output': ['4331048 6918912009']}, {'input': '882161280\\r\\n', 'output': ['4388720 7057290249']}, {'input': '884822400\\r\\n', 'output': ['4396766 7078579209']}, {'input': '905969664\\r\\n', 'output': ['4529412 7247757321']}, {'input': '908107200\\r\\n', 'output': ['4474050 7264857609']}, {'input': '918918000\\r\\n', 'output': ['4511288 7351344009']}, {'input': '931170240\\r\\n', 'output': ['4548514 7449361929']}, {'input': '935625600\\r\\n', 'output': ['4563150 7485004809']}, {'input': '936354996\\r\\n', 'output': ['40069269 7490839977']}, {'input': '951350400\\r\\n', 'output': ['4614600 7610803209']}, {'input': '958557600\\r\\n', 'output': ['4637398 7668460809']}, {'input': '972972000\\r\\n', 'output': ['4685478 7783776009']}, {'input': '980179200\\r\\n', 'output': ['4707050 7841433609']}, {'input': '985944960\\r\\n', 'output': ['4725040 7887559689']}, {'input': '994593600\\r\\n', 'output': ['4752650 7956748809']}, {'input': '999893227\\r\\n', 'output': ['1000183267 7999145825']}, {'input': '999893387\\r\\n', 'output': ['1000724227 7999147105']}, {'input': '999905161\\r\\n', 'output': ['1000161721 7999241297']}, {'input': '999942949\\r\\n', 'output': ['1000368197 7999543601']}, {'input': '999996583\\r\\n', 'output': ['1022096687 7999972673']}, {'input': '999999797\\r\\n', 'output': ['4999998997 7999998385']}, {'input': '999999883\\r\\n', 'output': ['4999999427 7999999073']}, {'input': '999999893\\r\\n', 'output': ['4999999477 7999999153']}, {'input': '999999929\\r\\n', 'output': ['4999999657 7999999441']}, {'input': '999999937\\r\\n', 'output': ['4999999697 7999999505']}, {'input': '999999991\\r\\n', 'output': ['1059701759 7999999937']}, {'input': '999999992\\r\\n', 'output': ['129518035 7999999945']}, {'input': '999999993\\r\\n', 'output': ['490196227 7999999953']}, {'input': '999999994\\r\\n', 'output': ['928571477 7999999961']}, {'input': '999999995\\r\\n', 'output': ['4924975 7999999969']}, {'input': '999999996\\r\\n', 'output': ['1000000044 7999999977']}, {'input': '999999997\\r\\n', 'output': ['15309947 7999999985']}, {'input': '999999998\\r\\n', 'output': ['504345691 7999999993']}, {'input': '999999999\\r\\n', 'output': ['52392027 8000000001']}, {'input': '1000000000\\r\\n', 'output': ['4770064 8000000009']}]", "source_code": "import java.util.Scanner;\n\npublic class Solution {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt(), m = 1;\n\t\tlong ans = 0;\n\t\tfor(int i = 2 ; i <= n ; i++)\n\t\t\tfor(int j = 2 ; j <= n - i ; j++){\n\t\t\t\tif(m == n) continue;\n\t\t\t\tfor(int k = 2 ; k <= n - i - j ; k++){\n\t\t\t\t\tif(n - i - j >= 3) {\n\t\t\t\t\t\tif(m!= n) {\n\t\t\t\t\t\t\tif((long)(i)*j*k == n) {\n\t\t\t\t\t\t\t\tm++;\n\t\t\t\t\t\t\t\tans += 2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if((long)(i)*j*k > n) {\n\t\t\t\t\t\t\t\tans += (long)(i)*j*k - n;\n\t\t\t\t\t\t\t\tm++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse ans += n - (long)(i)*j*k;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse ans += n - (long)(i)*j*k;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\tlong t = n*n - 2*n + 2;\n\t\tif(ans == 0) ans = t;\n\t\tSystem.out.print(t - ans + \" \");\n\t\tSystem.out.println(t);\n\t}\n}"}
{"src_uid": "c761bb69cf1b5a3dbe38d9f5c46e9007", "id": 97, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '1 1\\r\\n+1\\r\\n', 'output': ['Truth\\r\\n']}, {'input': '3 2\\r\\n-1\\r\\n-2\\r\\n-3\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\nNot defined\\r\\n']}, {'input': '4 1\\r\\n+2\\r\\n-3\\r\\n+4\\r\\n-1\\r\\n', 'output': ['Lie\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\n']}, {'input': '1 0\\r\\n-1\\r\\n', 'output': ['Lie\\r\\n']}, {'input': '2 2\\r\\n+1\\r\\n+1\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\n']}, {'input': '2 1\\r\\n+2\\r\\n+1\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\n']}, {'input': '2 0\\r\\n-2\\r\\n-2\\r\\n', 'output': ['Lie\\r\\nLie\\r\\n']}, {'input': '3 1\\r\\n+2\\r\\n+3\\r\\n+3\\r\\n', 'output': ['Truth\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '6 3\\r\\n+5\\r\\n+5\\r\\n+5\\r\\n+1\\r\\n+1\\r\\n+1\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\n']}, {'input': '4 3\\r\\n-4\\r\\n-3\\r\\n-1\\r\\n-3\\r\\n', 'output': ['Not defined\\r\\nTruth\\r\\nNot defined\\r\\nTruth\\r\\n']}, {'input': '10 4\\r\\n-8\\r\\n+1\\r\\n-6\\r\\n-10\\r\\n+5\\r\\n-6\\r\\n-8\\r\\n-8\\r\\n-4\\r\\n-8\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 5\\r\\n-4\\r\\n+4\\r\\n+4\\r\\n-9\\r\\n-9\\r\\n-4\\r\\n-4\\r\\n+2\\r\\n-9\\r\\n-4\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '7 2\\r\\n+5\\r\\n+5\\r\\n+5\\r\\n-2\\r\\n+1\\r\\n-5\\r\\n-6\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nLie\\r\\nTruth\\r\\nNot defined\\r\\n']}, {'input': '7 4\\r\\n+7\\r\\n-3\\r\\n-3\\r\\n-4\\r\\n+3\\r\\n+3\\r\\n+3\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\n']}, {'input': '6 3\\r\\n-6\\r\\n-1\\r\\n+5\\r\\n+1\\r\\n+6\\r\\n+1\\r\\n', 'output': ['Truth\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\n']}, {'input': '5 3\\r\\n-2\\r\\n+2\\r\\n+2\\r\\n-3\\r\\n+5\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\n']}, {'input': '3 0\\r\\n-2\\r\\n-2\\r\\n-2\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '5 3\\r\\n-1\\r\\n-1\\r\\n-4\\r\\n+1\\r\\n-4\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '9 6\\r\\n+2\\r\\n+7\\r\\n+7\\r\\n-1\\r\\n-4\\r\\n+7\\r\\n-7\\r\\n+7\\r\\n+5\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '43 18\\r\\n-14\\r\\n-28\\r\\n+16\\r\\n+10\\r\\n+25\\r\\n-30\\r\\n+25\\r\\n+30\\r\\n+25\\r\\n+25\\r\\n+25\\r\\n+25\\r\\n-25\\r\\n+22\\r\\n+3\\r\\n-17\\r\\n+16\\r\\n-25\\r\\n+10\\r\\n+14\\r\\n+41\\r\\n+25\\r\\n-25\\r\\n+33\\r\\n+24\\r\\n-23\\r\\n-25\\r\\n+25\\r\\n-22\\r\\n+29\\r\\n+28\\r\\n-25\\r\\n-25\\r\\n-29\\r\\n+11\\r\\n+26\\r\\n-25\\r\\n+25\\r\\n+10\\r\\n+1\\r\\n-20\\r\\n-17\\r\\n+23\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '28 12\\r\\n+10\\r\\n-7\\r\\n+17\\r\\n-20\\r\\n+7\\r\\n-7\\r\\n+13\\r\\n-21\\r\\n-7\\r\\n-7\\r\\n-18\\r\\n+7\\r\\n+7\\r\\n+3\\r\\n+6\\r\\n+14\\r\\n+7\\r\\n-24\\r\\n-21\\r\\n-7\\r\\n-7\\r\\n+4\\r\\n+7\\r\\n-7\\r\\n+21\\r\\n-7\\r\\n-26\\r\\n+7\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '17 9\\r\\n-6\\r\\n+16\\r\\n+5\\r\\n+16\\r\\n-17\\r\\n+17\\r\\n-11\\r\\n+5\\r\\n+14\\r\\n+5\\r\\n-8\\r\\n-5\\r\\n+6\\r\\n-2\\r\\n-11\\r\\n+4\\r\\n+17\\r\\n', 'output': ['Truth\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '14 3\\r\\n+14\\r\\n+12\\r\\n-9\\r\\n+9\\r\\n-9\\r\\n-9\\r\\n+8\\r\\n+9\\r\\n+2\\r\\n+1\\r\\n-13\\r\\n-9\\r\\n+13\\r\\n+3\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '10 4\\r\\n-9\\r\\n-8\\r\\n-5\\r\\n-9\\r\\n-7\\r\\n-9\\r\\n-9\\r\\n-9\\r\\n-4\\r\\n-9\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 5\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-5\\r\\n-1\\r\\n+10\\r\\n-3\\r\\n-10\\r\\n-9\\r\\n-10\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 4\\r\\n-3\\r\\n-3\\r\\n-3\\r\\n-3\\r\\n-3\\r\\n-2\\r\\n-2\\r\\n-6\\r\\n-7\\r\\n-3\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 6\\r\\n-9\\r\\n-7\\r\\n-5\\r\\n-5\\r\\n-4\\r\\n-2\\r\\n-8\\r\\n-5\\r\\n-5\\r\\n-9\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 4\\r\\n-8\\r\\n-2\\r\\n-8\\r\\n+1\\r\\n-4\\r\\n-8\\r\\n-2\\r\\n-8\\r\\n-8\\r\\n-1\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 2\\r\\n-8\\r\\n+10\\r\\n+1\\r\\n+8\\r\\n+4\\r\\n+8\\r\\n+6\\r\\n-8\\r\\n+10\\r\\n+1\\r\\n', 'output': ['Not defined\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '10 3\\r\\n+9\\r\\n+3\\r\\n+8\\r\\n+3\\r\\n+6\\r\\n-3\\r\\n+6\\r\\n+8\\r\\n+3\\r\\n+7\\r\\n', 'output': ['Lie\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\n']}, {'input': '10 8\\r\\n-2\\r\\n+9\\r\\n+9\\r\\n-4\\r\\n+9\\r\\n+9\\r\\n+4\\r\\n-9\\r\\n-3\\r\\n+9\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '10 7\\r\\n-4\\r\\n+6\\r\\n+4\\r\\n+9\\r\\n+6\\r\\n+6\\r\\n+6\\r\\n+6\\r\\n+6\\r\\n+2\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 4\\r\\n+3\\r\\n+5\\r\\n+6\\r\\n+10\\r\\n+5\\r\\n+5\\r\\n+6\\r\\n+8\\r\\n+5\\r\\n+6\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 7\\r\\n-6\\r\\n-10\\r\\n-3\\r\\n-1\\r\\n-3\\r\\n-7\\r\\n-2\\r\\n-7\\r\\n-7\\r\\n-3\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\n']}, {'input': '10 5\\r\\n-4\\r\\n-4\\r\\n-1\\r\\n-5\\r\\n-7\\r\\n-4\\r\\n-4\\r\\n-4\\r\\n-1\\r\\n-7\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '10 5\\r\\n-9\\r\\n-7\\r\\n-6\\r\\n-3\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-2\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 3\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-3\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-8\\r\\n-4\\r\\n-10\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 5\\r\\n-8\\r\\n-8\\r\\n-4\\r\\n-9\\r\\n-10\\r\\n-2\\r\\n-9\\r\\n-8\\r\\n-8\\r\\n-8\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '10 5\\r\\n+7\\r\\n+8\\r\\n+9\\r\\n+1\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+6\\r\\n+6\\r\\n+7\\r\\n', 'output': ['Truth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 5\\r\\n+2\\r\\n+2\\r\\n+2\\r\\n+2\\r\\n+9\\r\\n+10\\r\\n+8\\r\\n+7\\r\\n+4\\r\\n+2\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 9\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+5\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '10 3\\r\\n+10\\r\\n+2\\r\\n+10\\r\\n+9\\r\\n+1\\r\\n+9\\r\\n+4\\r\\n+9\\r\\n+3\\r\\n+2\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '10 6\\r\\n+10\\r\\n+10\\r\\n+10\\r\\n+3\\r\\n+10\\r\\n+10\\r\\n+6\\r\\n+6\\r\\n+10\\r\\n+8\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '3 2\\r\\n-1\\r\\n+2\\r\\n+3\\r\\n', 'output': ['Truth\\r\\nNot defined\\r\\nNot defined\\r\\n']}]", "source_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt(), m = in.nextInt();\n        String[] suspect = new String[n];\n        int[] person = new int[n];\n        int[] result = new int[n];\n        for (int i = 0; i < n; i++) {\n            suspect[i] = in.next();\n            if (suspect[i].charAt(0) == '+')\n                person[i] = Integer.valueOf(suspect[i].charAt(1));\n            else\n                person[i] = 0;\n            result[i] = 2;\n        }\n        int count = 0;\n        while (count < 2) {\n            int min = 9999999;\n            int index = -1;\n            for (int i = 0; i < n; i++) {\n                if (result[i] == 2) {\n                    if (person[i]!= 0 && person[person[i] - 1] == i + 1)\n                        min = 1;\n                    else if (person[i] == 0) {\n                        int j = 0;\n                        int counta = 0;\n                        while (j < n) {\n                            if (person[j] == i + 1) {\n                                counta++;\n                            }\n                            j++;\n                        }\n                        if (counta > (n - m))\n                            min = 1;\n                    }\n                    if (min == 1) {\n                        min = 9999999;\n                        index = i;\n                        count++;\n                    }\n                }\n            }\n            if (count == 2)\n                break;\n            else {\n                result[index] = 0;\n                for (int i = 0; i < n; i++) {\n                    if (result[i] == 2 && person[i] == index + 1)\n                        result[i] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (result[i] == 0)\n                System.out.println(\"Lie\");\n            else if (result[i] == 1)\n                System.out.println(\"Truth\");\n            else\n                System.out.println(\"Not defined\");\n        }\n    }\n}"}
{"src_uid": "c761bb69cf1b5a3dbe38d9f5c46e9007", "id": 97, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '1 1\\r\\n+1\\r\\n', 'output': ['Truth\\r\\n']}, {'input': '3 2\\r\\n-1\\r\\n-2\\r\\n-3\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\nNot defined\\r\\n']}, {'input': '4 1\\r\\n+2\\r\\n-3\\r\\n+4\\r\\n-1\\r\\n', 'output': ['Lie\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\n']}, {'input': '1 0\\r\\n-1\\r\\n', 'output': ['Lie\\r\\n']}, {'input': '2 2\\r\\n+1\\r\\n+1\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\n']}, {'input': '2 1\\r\\n+2\\r\\n+1\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\n']}, {'input': '2 0\\r\\n-2\\r\\n-2\\r\\n', 'output': ['Lie\\r\\nLie\\r\\n']}, {'input': '3 1\\r\\n+2\\r\\n+3\\r\\n+3\\r\\n', 'output': ['Truth\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '6 3\\r\\n+5\\r\\n+5\\r\\n+5\\r\\n+1\\r\\n+1\\r\\n+1\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\n']}, {'input': '4 3\\r\\n-4\\r\\n-3\\r\\n-1\\r\\n-3\\r\\n', 'output': ['Not defined\\r\\nTruth\\r\\nNot defined\\r\\nTruth\\r\\n']}, {'input': '10 4\\r\\n-8\\r\\n+1\\r\\n-6\\r\\n-10\\r\\n+5\\r\\n-6\\r\\n-8\\r\\n-8\\r\\n-4\\r\\n-8\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 5\\r\\n-4\\r\\n+4\\r\\n+4\\r\\n-9\\r\\n-9\\r\\n-4\\r\\n-4\\r\\n+2\\r\\n-9\\r\\n-4\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '7 2\\r\\n+5\\r\\n+5\\r\\n+5\\r\\n-2\\r\\n+1\\r\\n-5\\r\\n-6\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nLie\\r\\nTruth\\r\\nNot defined\\r\\n']}, {'input': '7 4\\r\\n+7\\r\\n-3\\r\\n-3\\r\\n-4\\r\\n+3\\r\\n+3\\r\\n+3\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\n']}, {'input': '6 3\\r\\n-6\\r\\n-1\\r\\n+5\\r\\n+1\\r\\n+6\\r\\n+1\\r\\n', 'output': ['Truth\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\n']}, {'input': '5 3\\r\\n-2\\r\\n+2\\r\\n+2\\r\\n-3\\r\\n+5\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\n']}, {'input': '3 0\\r\\n-2\\r\\n-2\\r\\n-2\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '5 3\\r\\n-1\\r\\n-1\\r\\n-4\\r\\n+1\\r\\n-4\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '9 6\\r\\n+2\\r\\n+7\\r\\n+7\\r\\n-1\\r\\n-4\\r\\n+7\\r\\n-7\\r\\n+7\\r\\n+5\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '43 18\\r\\n-14\\r\\n-28\\r\\n+16\\r\\n+10\\r\\n+25\\r\\n-30\\r\\n+25\\r\\n+30\\r\\n+25\\r\\n+25\\r\\n+25\\r\\n+25\\r\\n-25\\r\\n+22\\r\\n+3\\r\\n-17\\r\\n+16\\r\\n-25\\r\\n+10\\r\\n+14\\r\\n+41\\r\\n+25\\r\\n-25\\r\\n+33\\r\\n+24\\r\\n-23\\r\\n-25\\r\\n+25\\r\\n-22\\r\\n+29\\r\\n+28\\r\\n-25\\r\\n-25\\r\\n-29\\r\\n+11\\r\\n+26\\r\\n-25\\r\\n+25\\r\\n+10\\r\\n+1\\r\\n-20\\r\\n-17\\r\\n+23\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '28 12\\r\\n+10\\r\\n-7\\r\\n+17\\r\\n-20\\r\\n+7\\r\\n-7\\r\\n+13\\r\\n-21\\r\\n-7\\r\\n-7\\r\\n-18\\r\\n+7\\r\\n+7\\r\\n+3\\r\\n+6\\r\\n+14\\r\\n+7\\r\\n-24\\r\\n-21\\r\\n-7\\r\\n-7\\r\\n+4\\r\\n+7\\r\\n-7\\r\\n+21\\r\\n-7\\r\\n-26\\r\\n+7\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '17 9\\r\\n-6\\r\\n+16\\r\\n+5\\r\\n+16\\r\\n-17\\r\\n+17\\r\\n-11\\r\\n+5\\r\\n+14\\r\\n+5\\r\\n-8\\r\\n-5\\r\\n+6\\r\\n-2\\r\\n-11\\r\\n+4\\r\\n+17\\r\\n', 'output': ['Truth\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '14 3\\r\\n+14\\r\\n+12\\r\\n-9\\r\\n+9\\r\\n-9\\r\\n-9\\r\\n+8\\r\\n+9\\r\\n+2\\r\\n+1\\r\\n-13\\r\\n-9\\r\\n+13\\r\\n+3\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '10 4\\r\\n-9\\r\\n-8\\r\\n-5\\r\\n-9\\r\\n-7\\r\\n-9\\r\\n-9\\r\\n-9\\r\\n-4\\r\\n-9\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 5\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-5\\r\\n-1\\r\\n+10\\r\\n-3\\r\\n-10\\r\\n-9\\r\\n-10\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 4\\r\\n-3\\r\\n-3\\r\\n-3\\r\\n-3\\r\\n-3\\r\\n-2\\r\\n-2\\r\\n-6\\r\\n-7\\r\\n-3\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 6\\r\\n-9\\r\\n-7\\r\\n-5\\r\\n-5\\r\\n-4\\r\\n-2\\r\\n-8\\r\\n-5\\r\\n-5\\r\\n-9\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 4\\r\\n-8\\r\\n-2\\r\\n-8\\r\\n+1\\r\\n-4\\r\\n-8\\r\\n-2\\r\\n-8\\r\\n-8\\r\\n-1\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 2\\r\\n-8\\r\\n+10\\r\\n+1\\r\\n+8\\r\\n+4\\r\\n+8\\r\\n+6\\r\\n-8\\r\\n+10\\r\\n+1\\r\\n', 'output': ['Not defined\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '10 3\\r\\n+9\\r\\n+3\\r\\n+8\\r\\n+3\\r\\n+6\\r\\n-3\\r\\n+6\\r\\n+8\\r\\n+3\\r\\n+7\\r\\n', 'output': ['Lie\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\n']}, {'input': '10 8\\r\\n-2\\r\\n+9\\r\\n+9\\r\\n-4\\r\\n+9\\r\\n+9\\r\\n+4\\r\\n-9\\r\\n-3\\r\\n+9\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '10 7\\r\\n-4\\r\\n+6\\r\\n+4\\r\\n+9\\r\\n+6\\r\\n+6\\r\\n+6\\r\\n+6\\r\\n+6\\r\\n+2\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 4\\r\\n+3\\r\\n+5\\r\\n+6\\r\\n+10\\r\\n+5\\r\\n+5\\r\\n+6\\r\\n+8\\r\\n+5\\r\\n+6\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 7\\r\\n-6\\r\\n-10\\r\\n-3\\r\\n-1\\r\\n-3\\r\\n-7\\r\\n-2\\r\\n-7\\r\\n-7\\r\\n-3\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\n']}, {'input': '10 5\\r\\n-4\\r\\n-4\\r\\n-1\\r\\n-5\\r\\n-7\\r\\n-4\\r\\n-4\\r\\n-4\\r\\n-1\\r\\n-7\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '10 5\\r\\n-9\\r\\n-7\\r\\n-6\\r\\n-3\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-2\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 3\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-3\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-8\\r\\n-4\\r\\n-10\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 5\\r\\n-8\\r\\n-8\\r\\n-4\\r\\n-9\\r\\n-10\\r\\n-2\\r\\n-9\\r\\n-8\\r\\n-8\\r\\n-8\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '10 5\\r\\n+7\\r\\n+8\\r\\n+9\\r\\n+1\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+6\\r\\n+6\\r\\n+7\\r\\n', 'output': ['Truth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 5\\r\\n+2\\r\\n+2\\r\\n+2\\r\\n+2\\r\\n+9\\r\\n+10\\r\\n+8\\r\\n+7\\r\\n+4\\r\\n+2\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 9\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+5\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '10 3\\r\\n+10\\r\\n+2\\r\\n+10\\r\\n+9\\r\\n+1\\r\\n+9\\r\\n+4\\r\\n+9\\r\\n+3\\r\\n+2\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '10 6\\r\\n+10\\r\\n+10\\r\\n+10\\r\\n+3\\r\\n+10\\r\\n+10\\r\\n+6\\r\\n+6\\r\\n+10\\r\\n+8\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '3 2\\r\\n-1\\r\\n+2\\r\\n+3\\r\\n', 'output': ['Truth\\r\\nNot defined\\r\\nNot defined\\r\\n']}]", "source_code": "import java.util.Scanner;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class Sherlock {\n    static boolean[][] g;\n    static int n, m;\n    \n    static void solve()\n    {\n        int a, b;\n        for (int i = 0; i < n; ++i)\n            if (g[i][i])\n            {\n                System.out.print(\"Lie\\n\");\n                return;\n            }\n        \n        for (int i = 0; i < n; ++i)\n            if (g[i][n]!= g[n][i])\n            {\n                a = i;\n                b = n;\n                break;\n            }\n        \n        for (int i = 0; i < n; ++i)\n            if (i!= a && g[i][n]!= g[n][i])\n            {\n                b = i;\n                break;\n            }\n        \n        for (int i = 0; i < n; ++i)\n            if (g[a][i] == g[b][i])\n            {\n                System.out.print(\"Not defined\\n\");\n                return;\n            }\n        \n        System.out.print(g[a][b]? \"Lie\" : \"Truth\");\n        System.out.print(\"\\n\");\n        \n        for (int i = 0; i < n; ++i)\n            if (i!= a && i!= b)\n                System.out.print(g[i][i]? \"Truth\" : \"Lie\");\n            \n        System.out.print(\"\\n\");\n    }\n    \n    public static void main(String[] args) \n    {\n        Scanner sc = new Scanner(System.in);\n        n = sc.nextInt();\n        m = sc.nextInt();\n        \n        g = new boolean[n][n + 1];\n        \n        for (int i = 0; i < n; ++i)\n            for (int j = 0; j <= n; ++j)\n                g[i][j] = false;\n        \n        for (int i = 0; i < n; ++i)\n        {\n            String s = sc.next();\n            if (s.charAt(0) == '+')\n            {\n                int k = Integer.parseInt(s.charAt(1) + \"\");\n                g[i][k] = true;\n            }\n            else\n            {\n                int k = Integer.parseInt(s.charAt(2) + \"\");\n                g[i][k] = false;\n                g[i][n] ^= true;\n            }\n        }\n        \n        solve();\n    }\n}\n"}
{"src_uid": "c761bb69cf1b5a3dbe38d9f5c46e9007", "id": 97, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '1 1\\r\\n+1\\r\\n', 'output': ['Truth\\r\\n']}, {'input': '3 2\\r\\n-1\\r\\n-2\\r\\n-3\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\nNot defined\\r\\n']}, {'input': '4 1\\r\\n+2\\r\\n-3\\r\\n+4\\r\\n-1\\r\\n', 'output': ['Lie\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\n']}, {'input': '1 0\\r\\n-1\\r\\n', 'output': ['Lie\\r\\n']}, {'input': '2 2\\r\\n+1\\r\\n+1\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\n']}, {'input': '2 1\\r\\n+2\\r\\n+1\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\n']}, {'input': '2 0\\r\\n-2\\r\\n-2\\r\\n', 'output': ['Lie\\r\\nLie\\r\\n']}, {'input': '3 1\\r\\n+2\\r\\n+3\\r\\n+3\\r\\n', 'output': ['Truth\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '6 3\\r\\n+5\\r\\n+5\\r\\n+5\\r\\n+1\\r\\n+1\\r\\n+1\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\n']}, {'input': '4 3\\r\\n-4\\r\\n-3\\r\\n-1\\r\\n-3\\r\\n', 'output': ['Not defined\\r\\nTruth\\r\\nNot defined\\r\\nTruth\\r\\n']}, {'input': '10 4\\r\\n-8\\r\\n+1\\r\\n-6\\r\\n-10\\r\\n+5\\r\\n-6\\r\\n-8\\r\\n-8\\r\\n-4\\r\\n-8\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 5\\r\\n-4\\r\\n+4\\r\\n+4\\r\\n-9\\r\\n-9\\r\\n-4\\r\\n-4\\r\\n+2\\r\\n-9\\r\\n-4\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '7 2\\r\\n+5\\r\\n+5\\r\\n+5\\r\\n-2\\r\\n+1\\r\\n-5\\r\\n-6\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nLie\\r\\nTruth\\r\\nNot defined\\r\\n']}, {'input': '7 4\\r\\n+7\\r\\n-3\\r\\n-3\\r\\n-4\\r\\n+3\\r\\n+3\\r\\n+3\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\n']}, {'input': '6 3\\r\\n-6\\r\\n-1\\r\\n+5\\r\\n+1\\r\\n+6\\r\\n+1\\r\\n', 'output': ['Truth\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\n']}, {'input': '5 3\\r\\n-2\\r\\n+2\\r\\n+2\\r\\n-3\\r\\n+5\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\n']}, {'input': '3 0\\r\\n-2\\r\\n-2\\r\\n-2\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '5 3\\r\\n-1\\r\\n-1\\r\\n-4\\r\\n+1\\r\\n-4\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '9 6\\r\\n+2\\r\\n+7\\r\\n+7\\r\\n-1\\r\\n-4\\r\\n+7\\r\\n-7\\r\\n+7\\r\\n+5\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '43 18\\r\\n-14\\r\\n-28\\r\\n+16\\r\\n+10\\r\\n+25\\r\\n-30\\r\\n+25\\r\\n+30\\r\\n+25\\r\\n+25\\r\\n+25\\r\\n+25\\r\\n-25\\r\\n+22\\r\\n+3\\r\\n-17\\r\\n+16\\r\\n-25\\r\\n+10\\r\\n+14\\r\\n+41\\r\\n+25\\r\\n-25\\r\\n+33\\r\\n+24\\r\\n-23\\r\\n-25\\r\\n+25\\r\\n-22\\r\\n+29\\r\\n+28\\r\\n-25\\r\\n-25\\r\\n-29\\r\\n+11\\r\\n+26\\r\\n-25\\r\\n+25\\r\\n+10\\r\\n+1\\r\\n-20\\r\\n-17\\r\\n+23\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '28 12\\r\\n+10\\r\\n-7\\r\\n+17\\r\\n-20\\r\\n+7\\r\\n-7\\r\\n+13\\r\\n-21\\r\\n-7\\r\\n-7\\r\\n-18\\r\\n+7\\r\\n+7\\r\\n+3\\r\\n+6\\r\\n+14\\r\\n+7\\r\\n-24\\r\\n-21\\r\\n-7\\r\\n-7\\r\\n+4\\r\\n+7\\r\\n-7\\r\\n+21\\r\\n-7\\r\\n-26\\r\\n+7\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '17 9\\r\\n-6\\r\\n+16\\r\\n+5\\r\\n+16\\r\\n-17\\r\\n+17\\r\\n-11\\r\\n+5\\r\\n+14\\r\\n+5\\r\\n-8\\r\\n-5\\r\\n+6\\r\\n-2\\r\\n-11\\r\\n+4\\r\\n+17\\r\\n', 'output': ['Truth\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '14 3\\r\\n+14\\r\\n+12\\r\\n-9\\r\\n+9\\r\\n-9\\r\\n-9\\r\\n+8\\r\\n+9\\r\\n+2\\r\\n+1\\r\\n-13\\r\\n-9\\r\\n+13\\r\\n+3\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '10 4\\r\\n-9\\r\\n-8\\r\\n-5\\r\\n-9\\r\\n-7\\r\\n-9\\r\\n-9\\r\\n-9\\r\\n-4\\r\\n-9\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 5\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-5\\r\\n-1\\r\\n+10\\r\\n-3\\r\\n-10\\r\\n-9\\r\\n-10\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 4\\r\\n-3\\r\\n-3\\r\\n-3\\r\\n-3\\r\\n-3\\r\\n-2\\r\\n-2\\r\\n-6\\r\\n-7\\r\\n-3\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 6\\r\\n-9\\r\\n-7\\r\\n-5\\r\\n-5\\r\\n-4\\r\\n-2\\r\\n-8\\r\\n-5\\r\\n-5\\r\\n-9\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 4\\r\\n-8\\r\\n-2\\r\\n-8\\r\\n+1\\r\\n-4\\r\\n-8\\r\\n-2\\r\\n-8\\r\\n-8\\r\\n-1\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 2\\r\\n-8\\r\\n+10\\r\\n+1\\r\\n+8\\r\\n+4\\r\\n+8\\r\\n+6\\r\\n-8\\r\\n+10\\r\\n+1\\r\\n', 'output': ['Not defined\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '10 3\\r\\n+9\\r\\n+3\\r\\n+8\\r\\n+3\\r\\n+6\\r\\n-3\\r\\n+6\\r\\n+8\\r\\n+3\\r\\n+7\\r\\n', 'output': ['Lie\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\n']}, {'input': '10 8\\r\\n-2\\r\\n+9\\r\\n+9\\r\\n-4\\r\\n+9\\r\\n+9\\r\\n+4\\r\\n-9\\r\\n-3\\r\\n+9\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '10 7\\r\\n-4\\r\\n+6\\r\\n+4\\r\\n+9\\r\\n+6\\r\\n+6\\r\\n+6\\r\\n+6\\r\\n+6\\r\\n+2\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 4\\r\\n+3\\r\\n+5\\r\\n+6\\r\\n+10\\r\\n+5\\r\\n+5\\r\\n+6\\r\\n+8\\r\\n+5\\r\\n+6\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 7\\r\\n-6\\r\\n-10\\r\\n-3\\r\\n-1\\r\\n-3\\r\\n-7\\r\\n-2\\r\\n-7\\r\\n-7\\r\\n-3\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\n']}, {'input': '10 5\\r\\n-4\\r\\n-4\\r\\n-1\\r\\n-5\\r\\n-7\\r\\n-4\\r\\n-4\\r\\n-4\\r\\n-1\\r\\n-7\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '10 5\\r\\n-9\\r\\n-7\\r\\n-6\\r\\n-3\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-2\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 3\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-3\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-8\\r\\n-4\\r\\n-10\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 5\\r\\n-8\\r\\n-8\\r\\n-4\\r\\n-9\\r\\n-10\\r\\n-2\\r\\n-9\\r\\n-8\\r\\n-8\\r\\n-8\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '10 5\\r\\n+7\\r\\n+8\\r\\n+9\\r\\n+1\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+6\\r\\n+6\\r\\n+7\\r\\n', 'output': ['Truth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 5\\r\\n+2\\r\\n+2\\r\\n+2\\r\\n+2\\r\\n+9\\r\\n+10\\r\\n+8\\r\\n+7\\r\\n+4\\r\\n+2\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 9\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+5\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '10 3\\r\\n+10\\r\\n+2\\r\\n+10\\r\\n+9\\r\\n+1\\r\\n+9\\r\\n+4\\r\\n+9\\r\\n+3\\r\\n+2\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '10 6\\r\\n+10\\r\\n+10\\r\\n+10\\r\\n+3\\r\\n+10\\r\\n+10\\r\\n+6\\r\\n+6\\r\\n+10\\r\\n+8\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '3 2\\r\\n-1\\r\\n+2\\r\\n+3\\r\\n', 'output': ['Truth\\r\\nNot defined\\r\\nNot defined\\r\\n']}]", "source_code": "import java.io.File;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintStream;\nimport java.util.Arrays;\nimport java.util.LinkedHashSet;\nimport java.util.Scanner;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n *\n * @author chaitali.shinde\n */\npublic class Solution {\n    public static void main(String[] args) throws IOException {\n        InputStreamReader inputStreamReader = new InputStreamReader(System.in);\n        String s[] = null;\n        int n = 10000;\n        s = new String[n+1];\n        int m = n + 2;\n        for (int i = 1 ; i <= n ; i++){\n            s[i] = inputStreamReader.readLine();\n        }\n        \n        int a = 0 ;\n        int b = 0 ;\n        boolean c = false ;\n        boolean d = false ;\n        for ( int i = 1 ; i <= n ; i++){\n            if(s[i].charAt(0) == '+' && s[i].charAt(s[i].length() - 1) == '+' ){\n                c = true ;\n                a = s[i].charAt(1) - '0';\n                if(s[a].equals(s[i])){\n                    System.out.println(\"Truth\");\n                }\n                else\n                {\n                    System.out.println(\"Lie\");\n                }\n            }\n            else if (s[i].charAt(0) == '-' && s[i].charAt(s[i].length() - 1) == '-' ){\n                d = true ;\n                b = s[i].charAt(1) - '0';\n                if(s[b].equals(s[i])){\n                    System.out.println(\"Lie\");\n                }\n                else\n                {\n                    System.out.println(\"Truth\");\n                }\n            }\n            if(c && d){\n                break ;\n            }\n        }\n        \n        if(c == false && d == false){\n            System.out.println(\"Not defined\");\n        }\n        else if(c &&!d){\n            System.out.println(\"Lie\");\n        }\n        else if(!c && d){\n            System.out.println(\"Truth\");\n        }\n        else if(c && d){\n            if(a == b){\n                System.out.println(\"Lie\");\n            }\n            else{\n                System.out.println(\"Truth\");\n            }\n        }\n    }\n}\n"}
{"src_uid": "c761bb69cf1b5a3dbe38d9f5c46e9007", "id": 97, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '1 1\\r\\n+1\\r\\n', 'output': ['Truth\\r\\n']}, {'input': '3 2\\r\\n-1\\r\\n-2\\r\\n-3\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\nNot defined\\r\\n']}, {'input': '4 1\\r\\n+2\\r\\n-3\\r\\n+4\\r\\n-1\\r\\n', 'output': ['Lie\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\n']}, {'input': '1 0\\r\\n-1\\r\\n', 'output': ['Lie\\r\\n']}, {'input': '2 2\\r\\n+1\\r\\n+1\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\n']}, {'input': '2 1\\r\\n+2\\r\\n+1\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\n']}, {'input': '2 0\\r\\n-2\\r\\n-2\\r\\n', 'output': ['Lie\\r\\nLie\\r\\n']}, {'input': '3 1\\r\\n+2\\r\\n+3\\r\\n+3\\r\\n', 'output': ['Truth\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '6 3\\r\\n+5\\r\\n+5\\r\\n+5\\r\\n+1\\r\\n+1\\r\\n+1\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\n']}, {'input': '4 3\\r\\n-4\\r\\n-3\\r\\n-1\\r\\n-3\\r\\n', 'output': ['Not defined\\r\\nTruth\\r\\nNot defined\\r\\nTruth\\r\\n']}, {'input': '10 4\\r\\n-8\\r\\n+1\\r\\n-6\\r\\n-10\\r\\n+5\\r\\n-6\\r\\n-8\\r\\n-8\\r\\n-4\\r\\n-8\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 5\\r\\n-4\\r\\n+4\\r\\n+4\\r\\n-9\\r\\n-9\\r\\n-4\\r\\n-4\\r\\n+2\\r\\n-9\\r\\n-4\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '7 2\\r\\n+5\\r\\n+5\\r\\n+5\\r\\n-2\\r\\n+1\\r\\n-5\\r\\n-6\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nLie\\r\\nTruth\\r\\nNot defined\\r\\n']}, {'input': '7 4\\r\\n+7\\r\\n-3\\r\\n-3\\r\\n-4\\r\\n+3\\r\\n+3\\r\\n+3\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\n']}, {'input': '6 3\\r\\n-6\\r\\n-1\\r\\n+5\\r\\n+1\\r\\n+6\\r\\n+1\\r\\n', 'output': ['Truth\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\n']}, {'input': '5 3\\r\\n-2\\r\\n+2\\r\\n+2\\r\\n-3\\r\\n+5\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\n']}, {'input': '3 0\\r\\n-2\\r\\n-2\\r\\n-2\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '5 3\\r\\n-1\\r\\n-1\\r\\n-4\\r\\n+1\\r\\n-4\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '9 6\\r\\n+2\\r\\n+7\\r\\n+7\\r\\n-1\\r\\n-4\\r\\n+7\\r\\n-7\\r\\n+7\\r\\n+5\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '43 18\\r\\n-14\\r\\n-28\\r\\n+16\\r\\n+10\\r\\n+25\\r\\n-30\\r\\n+25\\r\\n+30\\r\\n+25\\r\\n+25\\r\\n+25\\r\\n+25\\r\\n-25\\r\\n+22\\r\\n+3\\r\\n-17\\r\\n+16\\r\\n-25\\r\\n+10\\r\\n+14\\r\\n+41\\r\\n+25\\r\\n-25\\r\\n+33\\r\\n+24\\r\\n-23\\r\\n-25\\r\\n+25\\r\\n-22\\r\\n+29\\r\\n+28\\r\\n-25\\r\\n-25\\r\\n-29\\r\\n+11\\r\\n+26\\r\\n-25\\r\\n+25\\r\\n+10\\r\\n+1\\r\\n-20\\r\\n-17\\r\\n+23\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '28 12\\r\\n+10\\r\\n-7\\r\\n+17\\r\\n-20\\r\\n+7\\r\\n-7\\r\\n+13\\r\\n-21\\r\\n-7\\r\\n-7\\r\\n-18\\r\\n+7\\r\\n+7\\r\\n+3\\r\\n+6\\r\\n+14\\r\\n+7\\r\\n-24\\r\\n-21\\r\\n-7\\r\\n-7\\r\\n+4\\r\\n+7\\r\\n-7\\r\\n+21\\r\\n-7\\r\\n-26\\r\\n+7\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '17 9\\r\\n-6\\r\\n+16\\r\\n+5\\r\\n+16\\r\\n-17\\r\\n+17\\r\\n-11\\r\\n+5\\r\\n+14\\r\\n+5\\r\\n-8\\r\\n-5\\r\\n+6\\r\\n-2\\r\\n-11\\r\\n+4\\r\\n+17\\r\\n', 'output': ['Truth\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '14 3\\r\\n+14\\r\\n+12\\r\\n-9\\r\\n+9\\r\\n-9\\r\\n-9\\r\\n+8\\r\\n+9\\r\\n+2\\r\\n+1\\r\\n-13\\r\\n-9\\r\\n+13\\r\\n+3\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '10 4\\r\\n-9\\r\\n-8\\r\\n-5\\r\\n-9\\r\\n-7\\r\\n-9\\r\\n-9\\r\\n-9\\r\\n-4\\r\\n-9\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 5\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-5\\r\\n-1\\r\\n+10\\r\\n-3\\r\\n-10\\r\\n-9\\r\\n-10\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 4\\r\\n-3\\r\\n-3\\r\\n-3\\r\\n-3\\r\\n-3\\r\\n-2\\r\\n-2\\r\\n-6\\r\\n-7\\r\\n-3\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 6\\r\\n-9\\r\\n-7\\r\\n-5\\r\\n-5\\r\\n-4\\r\\n-2\\r\\n-8\\r\\n-5\\r\\n-5\\r\\n-9\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 4\\r\\n-8\\r\\n-2\\r\\n-8\\r\\n+1\\r\\n-4\\r\\n-8\\r\\n-2\\r\\n-8\\r\\n-8\\r\\n-1\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 2\\r\\n-8\\r\\n+10\\r\\n+1\\r\\n+8\\r\\n+4\\r\\n+8\\r\\n+6\\r\\n-8\\r\\n+10\\r\\n+1\\r\\n', 'output': ['Not defined\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '10 3\\r\\n+9\\r\\n+3\\r\\n+8\\r\\n+3\\r\\n+6\\r\\n-3\\r\\n+6\\r\\n+8\\r\\n+3\\r\\n+7\\r\\n', 'output': ['Lie\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\n']}, {'input': '10 8\\r\\n-2\\r\\n+9\\r\\n+9\\r\\n-4\\r\\n+9\\r\\n+9\\r\\n+4\\r\\n-9\\r\\n-3\\r\\n+9\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '10 7\\r\\n-4\\r\\n+6\\r\\n+4\\r\\n+9\\r\\n+6\\r\\n+6\\r\\n+6\\r\\n+6\\r\\n+6\\r\\n+2\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 4\\r\\n+3\\r\\n+5\\r\\n+6\\r\\n+10\\r\\n+5\\r\\n+5\\r\\n+6\\r\\n+8\\r\\n+5\\r\\n+6\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 7\\r\\n-6\\r\\n-10\\r\\n-3\\r\\n-1\\r\\n-3\\r\\n-7\\r\\n-2\\r\\n-7\\r\\n-7\\r\\n-3\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\n']}, {'input': '10 5\\r\\n-4\\r\\n-4\\r\\n-1\\r\\n-5\\r\\n-7\\r\\n-4\\r\\n-4\\r\\n-4\\r\\n-1\\r\\n-7\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '10 5\\r\\n-9\\r\\n-7\\r\\n-6\\r\\n-3\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-2\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 3\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-3\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-8\\r\\n-4\\r\\n-10\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 5\\r\\n-8\\r\\n-8\\r\\n-4\\r\\n-9\\r\\n-10\\r\\n-2\\r\\n-9\\r\\n-8\\r\\n-8\\r\\n-8\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '10 5\\r\\n+7\\r\\n+8\\r\\n+9\\r\\n+1\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+6\\r\\n+6\\r\\n+7\\r\\n', 'output': ['Truth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 5\\r\\n+2\\r\\n+2\\r\\n+2\\r\\n+2\\r\\n+9\\r\\n+10\\r\\n+8\\r\\n+7\\r\\n+4\\r\\n+2\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 9\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+5\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '10 3\\r\\n+10\\r\\n+2\\r\\n+10\\r\\n+9\\r\\n+1\\r\\n+9\\r\\n+4\\r\\n+9\\r\\n+3\\r\\n+2\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '10 6\\r\\n+10\\r\\n+10\\r\\n+10\\r\\n+3\\r\\n+10\\r\\n+10\\r\\n+6\\r\\n+6\\r\\n+10\\r\\n+8\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '3 2\\r\\n-1\\r\\n+2\\r\\n+3\\r\\n', 'output': ['Truth\\r\\nNot defined\\r\\nNot defined\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Trying {\n    \n    public static void main(String[] args) {\n        \n        Scanner enter = new Scanner(System.in);\n        \n        int n = enter.nextInt(), m = enter.nextInt(), id[] = new int[n], \n            answer[] = new String[n], a, truth = 0, lie = 0;\n        \n        for(int i = 0; i < n; i++){\n            answer[i] = enter.next();\n        }\n        \n        for(int i = 0; i < n; i++){\n            \n            if(answer[i].charAt(0) == '-'){\n                answer[i] = \"Lie\";\n            } else{\n                a = Integer.parseInt(answer[i].charAt(1)+\"\");\n                if(answer[i].charAt(2) == '+'){\n                    truth++;\n                    if(id[a-1] == 0){\n                        id[i] = a;\n                        answer[i] = \"Truth\";\n                    } else if(id[i]!= a){\n                        answer[i] = \"Lie\";\n                    }\n                } else{\n                    lie++;\n                    id[i] = a;\n                    answer[i] = \"Lie\";\n                }\n                \n            }\n            \n            System.out.println(answer[i]);\n            \n        }\n        \n    }\n}\n"}
{"src_uid": "c761bb69cf1b5a3dbe38d9f5c46e9007", "id": 97, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '1 1\\r\\n+1\\r\\n', 'output': ['Truth\\r\\n']}, {'input': '3 2\\r\\n-1\\r\\n-2\\r\\n-3\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\nNot defined\\r\\n']}, {'input': '4 1\\r\\n+2\\r\\n-3\\r\\n+4\\r\\n-1\\r\\n', 'output': ['Lie\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\n']}, {'input': '1 0\\r\\n-1\\r\\n', 'output': ['Lie\\r\\n']}, {'input': '2 2\\r\\n+1\\r\\n+1\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\n']}, {'input': '2 1\\r\\n+2\\r\\n+1\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\n']}, {'input': '2 0\\r\\n-2\\r\\n-2\\r\\n', 'output': ['Lie\\r\\nLie\\r\\n']}, {'input': '3 1\\r\\n+2\\r\\n+3\\r\\n+3\\r\\n', 'output': ['Truth\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '6 3\\r\\n+5\\r\\n+5\\r\\n+5\\r\\n+1\\r\\n+1\\r\\n+1\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\n']}, {'input': '4 3\\r\\n-4\\r\\n-3\\r\\n-1\\r\\n-3\\r\\n', 'output': ['Not defined\\r\\nTruth\\r\\nNot defined\\r\\nTruth\\r\\n']}, {'input': '10 4\\r\\n-8\\r\\n+1\\r\\n-6\\r\\n-10\\r\\n+5\\r\\n-6\\r\\n-8\\r\\n-8\\r\\n-4\\r\\n-8\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 5\\r\\n-4\\r\\n+4\\r\\n+4\\r\\n-9\\r\\n-9\\r\\n-4\\r\\n-4\\r\\n+2\\r\\n-9\\r\\n-4\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '7 2\\r\\n+5\\r\\n+5\\r\\n+5\\r\\n-2\\r\\n+1\\r\\n-5\\r\\n-6\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nLie\\r\\nTruth\\r\\nNot defined\\r\\n']}, {'input': '7 4\\r\\n+7\\r\\n-3\\r\\n-3\\r\\n-4\\r\\n+3\\r\\n+3\\r\\n+3\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\n']}, {'input': '6 3\\r\\n-6\\r\\n-1\\r\\n+5\\r\\n+1\\r\\n+6\\r\\n+1\\r\\n', 'output': ['Truth\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\n']}, {'input': '5 3\\r\\n-2\\r\\n+2\\r\\n+2\\r\\n-3\\r\\n+5\\r\\n', 'output': ['Not defined\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\n']}, {'input': '3 0\\r\\n-2\\r\\n-2\\r\\n-2\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '5 3\\r\\n-1\\r\\n-1\\r\\n-4\\r\\n+1\\r\\n-4\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '9 6\\r\\n+2\\r\\n+7\\r\\n+7\\r\\n-1\\r\\n-4\\r\\n+7\\r\\n-7\\r\\n+7\\r\\n+5\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '43 18\\r\\n-14\\r\\n-28\\r\\n+16\\r\\n+10\\r\\n+25\\r\\n-30\\r\\n+25\\r\\n+30\\r\\n+25\\r\\n+25\\r\\n+25\\r\\n+25\\r\\n-25\\r\\n+22\\r\\n+3\\r\\n-17\\r\\n+16\\r\\n-25\\r\\n+10\\r\\n+14\\r\\n+41\\r\\n+25\\r\\n-25\\r\\n+33\\r\\n+24\\r\\n-23\\r\\n-25\\r\\n+25\\r\\n-22\\r\\n+29\\r\\n+28\\r\\n-25\\r\\n-25\\r\\n-29\\r\\n+11\\r\\n+26\\r\\n-25\\r\\n+25\\r\\n+10\\r\\n+1\\r\\n-20\\r\\n-17\\r\\n+23\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '28 12\\r\\n+10\\r\\n-7\\r\\n+17\\r\\n-20\\r\\n+7\\r\\n-7\\r\\n+13\\r\\n-21\\r\\n-7\\r\\n-7\\r\\n-18\\r\\n+7\\r\\n+7\\r\\n+3\\r\\n+6\\r\\n+14\\r\\n+7\\r\\n-24\\r\\n-21\\r\\n-7\\r\\n-7\\r\\n+4\\r\\n+7\\r\\n-7\\r\\n+21\\r\\n-7\\r\\n-26\\r\\n+7\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '17 9\\r\\n-6\\r\\n+16\\r\\n+5\\r\\n+16\\r\\n-17\\r\\n+17\\r\\n-11\\r\\n+5\\r\\n+14\\r\\n+5\\r\\n-8\\r\\n-5\\r\\n+6\\r\\n-2\\r\\n-11\\r\\n+4\\r\\n+17\\r\\n', 'output': ['Truth\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '14 3\\r\\n+14\\r\\n+12\\r\\n-9\\r\\n+9\\r\\n-9\\r\\n-9\\r\\n+8\\r\\n+9\\r\\n+2\\r\\n+1\\r\\n-13\\r\\n-9\\r\\n+13\\r\\n+3\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '10 4\\r\\n-9\\r\\n-8\\r\\n-5\\r\\n-9\\r\\n-7\\r\\n-9\\r\\n-9\\r\\n-9\\r\\n-4\\r\\n-9\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 5\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-5\\r\\n-1\\r\\n+10\\r\\n-3\\r\\n-10\\r\\n-9\\r\\n-10\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 4\\r\\n-3\\r\\n-3\\r\\n-3\\r\\n-3\\r\\n-3\\r\\n-2\\r\\n-2\\r\\n-6\\r\\n-7\\r\\n-3\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 6\\r\\n-9\\r\\n-7\\r\\n-5\\r\\n-5\\r\\n-4\\r\\n-2\\r\\n-8\\r\\n-5\\r\\n-5\\r\\n-9\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 4\\r\\n-8\\r\\n-2\\r\\n-8\\r\\n+1\\r\\n-4\\r\\n-8\\r\\n-2\\r\\n-8\\r\\n-8\\r\\n-1\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 2\\r\\n-8\\r\\n+10\\r\\n+1\\r\\n+8\\r\\n+4\\r\\n+8\\r\\n+6\\r\\n-8\\r\\n+10\\r\\n+1\\r\\n', 'output': ['Not defined\\r\\nLie\\r\\nLie\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nLie\\r\\nNot defined\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '10 3\\r\\n+9\\r\\n+3\\r\\n+8\\r\\n+3\\r\\n+6\\r\\n-3\\r\\n+6\\r\\n+8\\r\\n+3\\r\\n+7\\r\\n', 'output': ['Lie\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\nLie\\r\\n']}, {'input': '10 8\\r\\n-2\\r\\n+9\\r\\n+9\\r\\n-4\\r\\n+9\\r\\n+9\\r\\n+4\\r\\n-9\\r\\n-3\\r\\n+9\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '10 7\\r\\n-4\\r\\n+6\\r\\n+4\\r\\n+9\\r\\n+6\\r\\n+6\\r\\n+6\\r\\n+6\\r\\n+6\\r\\n+2\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 4\\r\\n+3\\r\\n+5\\r\\n+6\\r\\n+10\\r\\n+5\\r\\n+5\\r\\n+6\\r\\n+8\\r\\n+5\\r\\n+6\\r\\n', 'output': ['Lie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 7\\r\\n-6\\r\\n-10\\r\\n-3\\r\\n-1\\r\\n-3\\r\\n-7\\r\\n-2\\r\\n-7\\r\\n-7\\r\\n-3\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nTruth\\r\\nNot defined\\r\\nNot defined\\r\\nNot defined\\r\\n']}, {'input': '10 5\\r\\n-4\\r\\n-4\\r\\n-1\\r\\n-5\\r\\n-7\\r\\n-4\\r\\n-4\\r\\n-4\\r\\n-1\\r\\n-7\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '10 5\\r\\n-9\\r\\n-7\\r\\n-6\\r\\n-3\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-2\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 3\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-3\\r\\n-10\\r\\n-10\\r\\n-10\\r\\n-8\\r\\n-4\\r\\n-10\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '10 5\\r\\n-8\\r\\n-8\\r\\n-4\\r\\n-9\\r\\n-10\\r\\n-2\\r\\n-9\\r\\n-8\\r\\n-8\\r\\n-8\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '10 5\\r\\n+7\\r\\n+8\\r\\n+9\\r\\n+1\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+6\\r\\n+6\\r\\n+7\\r\\n', 'output': ['Truth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 5\\r\\n+2\\r\\n+2\\r\\n+2\\r\\n+2\\r\\n+9\\r\\n+10\\r\\n+8\\r\\n+7\\r\\n+4\\r\\n+2\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\n']}, {'input': '10 9\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n+5\\r\\n+7\\r\\n+7\\r\\n+7\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nTruth\\r\\n']}, {'input': '10 3\\r\\n+10\\r\\n+2\\r\\n+10\\r\\n+9\\r\\n+1\\r\\n+9\\r\\n+4\\r\\n+9\\r\\n+3\\r\\n+2\\r\\n', 'output': ['Lie\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\n']}, {'input': '10 6\\r\\n+10\\r\\n+10\\r\\n+10\\r\\n+3\\r\\n+10\\r\\n+10\\r\\n+6\\r\\n+6\\r\\n+10\\r\\n+8\\r\\n', 'output': ['Truth\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nTruth\\r\\nTruth\\r\\nLie\\r\\nLie\\r\\nTruth\\r\\nLie\\r\\n']}, {'input': '3 2\\r\\n-1\\r\\n+2\\r\\n+3\\r\\n', 'output': ['Truth\\r\\nNot defined\\r\\nNot defined\\r\\n']}]", "source_code": "import java.util.*;\nimport java.io.*;\n\npublic class Test {\n \t\tpublic static void main (String[] args){\n\t\t \t\tFastScanner scanner = new FastScanner();\n\t\t\tint n = scanner.nextInt();\n\t\t\tint m = scanner.nextInt();\n\t\t\tint[] c = new int [n + 1];\n\t\t\tc[n] = 1;\n\t\t\tboolean[] t = new boolean [n + 1];\n\t\t\tboolean[] o = new boolean [n + 1];\n\t\t\tint z = 0;\n\t\t\tint e = 0;\n\t\t\tfor (int i = 1; i <= n; i++){\n\t\t\t\tc[i] = scanner.nextInt();\n\t\t\t}\n\t\t\tfor (int i = 1; i <= n; i++){\n\t\t\t\tt[i] = c[i] == i? c[c[i]]!= i? true : false : false;\n\t\t\t\to[i] = (c[i] == i? false : c[i] == n? true : o[c[i]]);\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i = 1; i <= n; i++){\n\t\t\t\tif (t[i]) {\n\t\t\t\t\tSystem.out.println(\"Truth\");\n\t\t\t\t}\n\t\t\t\telse if (o[i]) {\n\t\t\t\t\tSystem.out.println(\"Lie\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tSystem.out.println(\"Not defined\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tprivate static class FastScanner {\n\t\t\tprivate final InputStream in = System.in;\n\t\t\tprivate final byte[] buffer = new byte[1024];\n\t\t\tprivate int ptr = 0;\n\t\t\tprivate int buflen = 0;\n\t\t\tprivate boolean hasNextByte() {\n\t\t\t\t\tif (ptr < buflen) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\tptr = 0;\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tbuflen = in.read(buffer);\n\t\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (buflen <= 0) {\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\tprivate int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n\t\t\tprivate static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n\t\t\tpublic boolean hasNext() { while(hasNextByte() &&!isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\n\t\t\tpublic String next() {\n\t\t\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\tint b = readByte();\n\t\t\t\t\twhile(isPrintableChar(b)) {\n\t\t\t\t\t\t\tsb.appendCodePoint(b);\n\t\t\t\t\t\t\tb = readByte();\n\t\t\t\t\t}\n\t\t\t\t\treturn sb.toString();\n\t\t\t}\n\t\t\tpublic long nextLong() {\n\t\t\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\t\t\tlong n = 0;\n\t\t\t\t\tboolean minus = false;\n\t\t\t\t\tint b = readByte();\n\t\t\t\t\tif (b == '-') {\n\t\t\t\t\t\t\tminus = true;\n\t\t\t\t\t\t\tb = readByte();\n\t\t\t\t\t}\n\t\t\t\t\tif (b < '0' || '9' < b) {\n\t\t\t\t\t\t\tthrow new NumberFormatException();\n\t\t\t\t"}
{"src_uid": "b81e7a786e4083cf7188f718bc045a85", "id": 98, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': '2 3 1\\r\\n2 3\\r\\n', 'output': ['0']}, {'input': '3 2 2\\r\\n4 1 3\\r\\n', 'output': ['2']}, {'input': '5 10 10\\r\\n7 0 7 0 7\\r\\n', 'output': ['7']}, {'input': '6 10 4\\r\\n1 2 3 4 5 6\\r\\n', 'output': ['0']}, {'input': '7 5 2\\r\\n1 2 3 4 5 6 7\\r\\n', 'output': ['1']}, {'input': '16 100 100\\r\\n30 89 12 84 62 24 10 59 98 21 13 69 65 12 54 32\\r\\n', 'output': ['0']}, {'input': '99 999 999\\r\\n9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\\r\\n', 'output': ['9']}, {'input': '1 1 1\\r\\n0\\r\\n', 'output': ['0']}, {'input': '1 64 25\\r\\n100000\\r\\n', 'output': ['1600']}, {'input': '1 1000000000 1\\r\\n100\\r\\n', 'output': ['100']}, {'input': '1 1 1000000000\\r\\n100\\r\\n', 'output': ['100']}, {'input': '1 1000000000 1000000000\\r\\n100\\r\\n', 'output': ['100']}, {'input': '5 2 9494412\\r\\n5484 254 1838 18184 9421\\r\\n', 'output': ['0']}, {'input': '5 10 7\\r\\n98765 78654 25669 45126 98745\\r\\n', 'output': ['21']}, {'input': '13 94348844 381845400\\r\\n515 688 5464 155 441 9217 114 21254 55 9449 1800 834 384\\r\\n', 'output': ['55']}, {'input': '17 100 100\\r\\n47 75 22 18 42 53 95 98 94 50 63 55 46 80 9 20 99\\r\\n', 'output': ['9']}, {'input': '47 20 1000000\\r\\n81982 19631 19739 13994 50426 14232 79125 95908 20227 79428 84065 86233 30742 82664 54626 10849 11879 67198 15667 75866 47242 90766 23115 20130 37293 8312 57308 52366 49768 28256 56085 39722 40397 14166 16743 28814 40538 50753 60900 99449 94318 54247 10563 5260 76407 42235 417\\r\\n', 'output': ['0']}, {'input': '58 5858758 7544547\\r\\n6977 5621 6200 6790 7495 5511 6214 6771 6526 6557 5936 7020 6925 5462 7519 6166 5974 6839 6505 7113 5674 6729 6832 6735 5363 5817 6242 7465 7252 6427 7262 5885 6327 7046 6922 5607 7238 5471 7145 5822 5465 6369 6115 5694 6561 7330 7089 7397 7409 7093 7537 7279 7613 6764 7349 7095 6967 5984\\r\\n', 'output': ['0']}, {'input': '79 5464 64574\\r\\n3800 2020 2259 503 4922 975 5869 6140 3808 2635 3420 992 4683 3748 5732 4787 6564 3302 6153 4955 2958 6107 2875 3449 1755 5029 5072 5622 2139 1892 4640 1199 3918 1061 4074 5098 4939 5496 2019 356 5849 4796 4446 4633 1386 1129 3351 639 2040 3769 4106 4048 3959 931 3457 1938 4587 6438 2938 132 2434 3727 3926 2135 1665 2871 2798 6359 989 6220 97 2116 2048 251 4264 3841 4428 5286 1914\\r\\n', 'output': ['97']}, {'input': '95 97575868 5\\r\\n4612 1644 3613 5413 5649 2419 5416 3926 4610 4419 2796 5062 2112 1071 3790 4220 3955 2142 4638 2832 2702 2115 2045 4085 3599 2452 5495 4767 1368 2344 4625 4132 5755 5815 2581 6259 1330 4938 815 5430 1628 3108 4342 3692 2928 1941 3714 4498 4471 4842 1822 867 3395 2587 3372 6394 6423 3728 3720 6525 4296 2091 4400 994 1321 3454 5285 2989 1755 504 5019 2629 3834 3191 6254 844 5338 615 5608 4898 2497 4482 850 5308 2763 1943 6515 5459 5556 829 4646 5258 2019 5582 1226\\r\\n', 'output': ['815']}, {'input': '77 678686 878687\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['1']}, {'input': '2 7597 8545\\r\\n74807 22362\\r\\n', 'output': ['0']}, {'input': '3 75579860 8570575\\r\\n10433 30371 14228\\r\\n', 'output': ['10433']}]", "source_code": "/*package whatever //do not write package name here */\n\nimport java.io.*;\n\n/* Name of the class has to be \"Main\" only if the class is public. */\npublic class Main\n{\n\tpublic static void main (String[] args) throws java.lang.Exception\n\t{\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\t\tString st[]=br.readLine().split(\" \");\n\t\tint n=Integer.parseInt(st[0]),m=Integer.parseInt(st[1]),k=Integer.parseInt(st[2]);\n\t\tint x[]=new int[n];\n\t\tst=br.readLine().split(\" \");\n\t\tfor(int i=0;i<n;i++)\n\t\t\tx[i]=Integer.parseInt(st[i]);\n\t\tlong max=0,temp,sum1=0,sum2=0,avg;\n\t\tboolean flag=false;\n\t\tfor(int j=0;j<=k-1;j+=m)\n\t\t{\n\t\t\tfor(int i=1;i<=n-1;i++)\n\t\t\t{\n\t\t\t\tsum1+=x[i];\n\t\t\t\tsum2+=x[i+1];\n\t\t\t}\n\t\t\tif((sum1!=sum2))\n\t\t\t\tflag=true;\n\t\t\tsum1=0;\n\t\t\tsum2=0;\n\t\t}\n\t\tif(flag)\n\t\t{\n\t\t\tavg=(long)(k/(k-m));\n\t\t\ttemp=avg*m;\n\t\t\tavg*=m-1;\n\t\t\tavg+=m;\n\t\t\tfor(int i=0;i<=n-1;i++)\n\t\t\t\tx[i]=x[i]-avg;\n\t\t\ttemp-=avg;\n\t\t\tmax+=(x[0]>temp?x[0]:temp);\n\t\t\tfor(int i=2;i<=n-1;i+=2)\n\t\t\t\tmax+=(x[i]>x[i-1]?x[i]:x[i-1]);\n\t\t\tfor(int i=1;i<=n-1;i+=2)\n\t\t\t\tmax+=(x[i]>x[i-1]?x[i]:x[i-1]);\n\t\t\tmax+=(x[n-1]>temp?x[n-1]:temp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor(int i=0;i<=n-1;i++)\n\t\t\t\tmax+=(x[i]>x[i-1]?x[i]:x[i-1]);\n\t\t}\n\t\tSystem.out.print(max);\n\t}\n}\n"}
{"src_uid": "b81e7a786e4083cf7188f718bc045a85", "id": 98, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': '2 3 1\\r\\n2 3\\r\\n', 'output': ['0']}, {'input': '3 2 2\\r\\n4 1 3\\r\\n', 'output': ['2']}, {'input': '5 10 10\\r\\n7 0 7 0 7\\r\\n', 'output': ['7']}, {'input': '6 10 4\\r\\n1 2 3 4 5 6\\r\\n', 'output': ['0']}, {'input': '7 5 2\\r\\n1 2 3 4 5 6 7\\r\\n', 'output': ['1']}, {'input': '16 100 100\\r\\n30 89 12 84 62 24 10 59 98 21 13 69 65 12 54 32\\r\\n', 'output': ['0']}, {'input': '99 999 999\\r\\n9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\\r\\n', 'output': ['9']}, {'input': '1 1 1\\r\\n0\\r\\n', 'output': ['0']}, {'input': '1 64 25\\r\\n100000\\r\\n', 'output': ['1600']}, {'input': '1 1000000000 1\\r\\n100\\r\\n', 'output': ['100']}, {'input': '1 1 1000000000\\r\\n100\\r\\n', 'output': ['100']}, {'input': '1 1000000000 1000000000\\r\\n100\\r\\n', 'output': ['100']}, {'input': '5 2 9494412\\r\\n5484 254 1838 18184 9421\\r\\n', 'output': ['0']}, {'input': '5 10 7\\r\\n98765 78654 25669 45126 98745\\r\\n', 'output': ['21']}, {'input': '13 94348844 381845400\\r\\n515 688 5464 155 441 9217 114 21254 55 9449 1800 834 384\\r\\n', 'output': ['55']}, {'input': '17 100 100\\r\\n47 75 22 18 42 53 95 98 94 50 63 55 46 80 9 20 99\\r\\n', 'output': ['9']}, {'input': '47 20 1000000\\r\\n81982 19631 19739 13994 50426 14232 79125 95908 20227 79428 84065 86233 30742 82664 54626 10849 11879 67198 15667 75866 47242 90766 23115 20130 37293 8312 57308 52366 49768 28256 56085 39722 40397 14166 16743 28814 40538 50753 60900 99449 94318 54247 10563 5260 76407 42235 417\\r\\n', 'output': ['0']}, {'input': '58 5858758 7544547\\r\\n6977 5621 6200 6790 7495 5511 6214 6771 6526 6557 5936 7020 6925 5462 7519 6166 5974 6839 6505 7113 5674 6729 6832 6735 5363 5817 6242 7465 7252 6427 7262 5885 6327 7046 6922 5607 7238 5471 7145 5822 5465 6369 6115 5694 6561 7330 7089 7397 7409 7093 7537 7279 7613 6764 7349 7095 6967 5984\\r\\n', 'output': ['0']}, {'input': '79 5464 64574\\r\\n3800 2020 2259 503 4922 975 5869 6140 3808 2635 3420 992 4683 3748 5732 4787 6564 3302 6153 4955 2958 6107 2875 3449 1755 5029 5072 5622 2139 1892 4640 1199 3918 1061 4074 5098 4939 5496 2019 356 5849 4796 4446 4633 1386 1129 3351 639 2040 3769 4106 4048 3959 931 3457 1938 4587 6438 2938 132 2434 3727 3926 2135 1665 2871 2798 6359 989 6220 97 2116 2048 251 4264 3841 4428 5286 1914\\r\\n', 'output': ['97']}, {'input': '95 97575868 5\\r\\n4612 1644 3613 5413 5649 2419 5416 3926 4610 4419 2796 5062 2112 1071 3790 4220 3955 2142 4638 2832 2702 2115 2045 4085 3599 2452 5495 4767 1368 2344 4625 4132 5755 5815 2581 6259 1330 4938 815 5430 1628 3108 4342 3692 2928 1941 3714 4498 4471 4842 1822 867 3395 2587 3372 6394 6423 3728 3720 6525 4296 2091 4400 994 1321 3454 5285 2989 1755 504 5019 2629 3834 3191 6254 844 5338 615 5608 4898 2497 4482 850 5308 2763 1943 6515 5459 5556 829 4646 5258 2019 5582 1226\\r\\n', 'output': ['815']}, {'input': '77 678686 878687\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['1']}, {'input': '2 7597 8545\\r\\n74807 22362\\r\\n', 'output': ['0']}, {'input': '3 75579860 8570575\\r\\n10433 30371 14228\\r\\n', 'output': ['10433']}]", "source_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\npublic class JoeTheElusive {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String s[] = br.readLine().split(\" \");\n        long n = Long.parseLong(s[0]);\n        long m = Long.parseLong(s[1]);\n        long k = Long.parseLong(s[2]);\n        long diamonds[] = new long[(int) n];\n        for (long i = 0; i < n; i++)\n            diamonds[(int) i] = Long.parseLong(br.readLine());\n        long result = 0, last[] = new long[(int) n], count = 0, temp;\n        for (long j = 0; j < n; j++) {\n            temp = 0;\n            count = 0;\n            for (long i = j; i < n; i++) {\n                last[(int) i] = diamonds[(int) i];\n                count += diamonds[(int) i];\n                if (count > 2 * m) {\n                    temp += Math.min(2 * m, count) - m;\n                    count -= 2 * m - m;\n                }\n            }\n            result = Math.max(result, temp);\n            count = 0;\n            for (long i = j; i >= 0; i--) {\n                diamonds[(int) i] = last[(int) i];\n                count += diamonds[(int) i];\n                if (count > 2 * m) {\n                    temp += Math.min(2 * m, count) - m;\n                    count -= 2 * m - m;\n                }\n            }\n            result = Math.max(result, temp);\n        }\n        k += m;\n        for (long j = 0; j < n && count <= 2 * m; j++) {\n            result += diamonds[(int) j];\n            count += diamonds[(int) j];\n            if (count > 2 * m) {\n                result += m - (count - 2 * m);\n                count -= 2 * m - m;\n            }\n        }\n        System.out.println(result + k % 2);\n    }\n}\n"}
{"src_uid": "b81e7a786e4083cf7188f718bc045a85", "id": 98, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': '2 3 1\\r\\n2 3\\r\\n', 'output': ['0']}, {'input': '3 2 2\\r\\n4 1 3\\r\\n', 'output': ['2']}, {'input': '5 10 10\\r\\n7 0 7 0 7\\r\\n', 'output': ['7']}, {'input': '6 10 4\\r\\n1 2 3 4 5 6\\r\\n', 'output': ['0']}, {'input': '7 5 2\\r\\n1 2 3 4 5 6 7\\r\\n', 'output': ['1']}, {'input': '16 100 100\\r\\n30 89 12 84 62 24 10 59 98 21 13 69 65 12 54 32\\r\\n', 'output': ['0']}, {'input': '99 999 999\\r\\n9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\\r\\n', 'output': ['9']}, {'input': '1 1 1\\r\\n0\\r\\n', 'output': ['0']}, {'input': '1 64 25\\r\\n100000\\r\\n', 'output': ['1600']}, {'input': '1 1000000000 1\\r\\n100\\r\\n', 'output': ['100']}, {'input': '1 1 1000000000\\r\\n100\\r\\n', 'output': ['100']}, {'input': '1 1000000000 1000000000\\r\\n100\\r\\n', 'output': ['100']}, {'input': '5 2 9494412\\r\\n5484 254 1838 18184 9421\\r\\n', 'output': ['0']}, {'input': '5 10 7\\r\\n98765 78654 25669 45126 98745\\r\\n', 'output': ['21']}, {'input': '13 94348844 381845400\\r\\n515 688 5464 155 441 9217 114 21254 55 9449 1800 834 384\\r\\n', 'output': ['55']}, {'input': '17 100 100\\r\\n47 75 22 18 42 53 95 98 94 50 63 55 46 80 9 20 99\\r\\n', 'output': ['9']}, {'input': '47 20 1000000\\r\\n81982 19631 19739 13994 50426 14232 79125 95908 20227 79428 84065 86233 30742 82664 54626 10849 11879 67198 15667 75866 47242 90766 23115 20130 37293 8312 57308 52366 49768 28256 56085 39722 40397 14166 16743 28814 40538 50753 60900 99449 94318 54247 10563 5260 76407 42235 417\\r\\n', 'output': ['0']}, {'input': '58 5858758 7544547\\r\\n6977 5621 6200 6790 7495 5511 6214 6771 6526 6557 5936 7020 6925 5462 7519 6166 5974 6839 6505 7113 5674 6729 6832 6735 5363 5817 6242 7465 7252 6427 7262 5885 6327 7046 6922 5607 7238 5471 7145 5822 5465 6369 6115 5694 6561 7330 7089 7397 7409 7093 7537 7279 7613 6764 7349 7095 6967 5984\\r\\n', 'output': ['0']}, {'input': '79 5464 64574\\r\\n3800 2020 2259 503 4922 975 5869 6140 3808 2635 3420 992 4683 3748 5732 4787 6564 3302 6153 4955 2958 6107 2875 3449 1755 5029 5072 5622 2139 1892 4640 1199 3918 1061 4074 5098 4939 5496 2019 356 5849 4796 4446 4633 1386 1129 3351 639 2040 3769 4106 4048 3959 931 3457 1938 4587 6438 2938 132 2434 3727 3926 2135 1665 2871 2798 6359 989 6220 97 2116 2048 251 4264 3841 4428 5286 1914\\r\\n', 'output': ['97']}, {'input': '95 97575868 5\\r\\n4612 1644 3613 5413 5649 2419 5416 3926 4610 4419 2796 5062 2112 1071 3790 4220 3955 2142 4638 2832 2702 2115 2045 4085 3599 2452 5495 4767 1368 2344 4625 4132 5755 5815 2581 6259 1330 4938 815 5430 1628 3108 4342 3692 2928 1941 3714 4498 4471 4842 1822 867 3395 2587 3372 6394 6423 3728 3720 6525 4296 2091 4400 994 1321 3454 5285 2989 1755 504 5019 2629 3834 3191 6254 844 5338 615 5608 4898 2497 4482 850 5308 2763 1943 6515 5459 5556 829 4646 5258 2019 5582 1226\\r\\n', 'output': ['815']}, {'input': '77 678686 878687\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['1']}, {'input': '2 7597 8545\\r\\n74807 22362\\r\\n', 'output': ['0']}, {'input': '3 75579860 8570575\\r\\n10433 30371 14228\\r\\n', 'output': ['10433']}]", "source_code": "import java.util.*;\n\npublic class Diamonds\n{\n\tpublic static void main (String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tlong m = in.nextInt();\n\t\tlong k = in.nextInt();\n\t\tlong curr = 0;\n\t\tlong[] input = new long[n];\n\t\tfor (int i = 0; i < n; i++){\n\t\t\tinput[i] = in.nextLong();\n\t\t}\n\t\tlong start = 0;\n\t\tfor (int step = 1; step < k; step++){\n\t\t\tif (input[0] > input[1]){\n\t\t\t\tcurr += (input[0] - input[1])*step;\n\t\t\t\tinput[0] = input[1];\n\t\t\t}\n\t\t\telse if (input[1] > input[0]){\n\t\t\t\tcurr += (input[1] - input[0])*step;\n\t\t\t\tinput[1] = input[0];\n\t\t\t}\n\t\t\tinput[0] = input[0] - input[1];\n\t\t\tfor (int i = 2; i < n; i++){\n\t\t\t\tif (input[i-1] > input[i]){\n\t\t\t\t\tinput[i] += input[i-1];\n\t\t\t\t\tinput[i-1] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tinput[n-1] = 0;\n\t\t}\n\t\tif (input[0] > input[1]){\n\t\t\tcurr = curr + (input[0] - input[1]);\n\t\t}\n\t\tSystem.out.println((long)Math.min(curr/m,input[0]));\n\t}\n}"}
{"src_uid": "b81e7a786e4083cf7188f718bc045a85", "id": 98, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': '2 3 1\\r\\n2 3\\r\\n', 'output': ['0']}, {'input': '3 2 2\\r\\n4 1 3\\r\\n', 'output': ['2']}, {'input': '5 10 10\\r\\n7 0 7 0 7\\r\\n', 'output': ['7']}, {'input': '6 10 4\\r\\n1 2 3 4 5 6\\r\\n', 'output': ['0']}, {'input': '7 5 2\\r\\n1 2 3 4 5 6 7\\r\\n', 'output': ['1']}, {'input': '16 100 100\\r\\n30 89 12 84 62 24 10 59 98 21 13 69 65 12 54 32\\r\\n', 'output': ['0']}, {'input': '99 999 999\\r\\n9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\\r\\n', 'output': ['9']}, {'input': '1 1 1\\r\\n0\\r\\n', 'output': ['0']}, {'input': '1 64 25\\r\\n100000\\r\\n', 'output': ['1600']}, {'input': '1 1000000000 1\\r\\n100\\r\\n', 'output': ['100']}, {'input': '1 1 1000000000\\r\\n100\\r\\n', 'output': ['100']}, {'input': '1 1000000000 1000000000\\r\\n100\\r\\n', 'output': ['100']}, {'input': '5 2 9494412\\r\\n5484 254 1838 18184 9421\\r\\n', 'output': ['0']}, {'input': '5 10 7\\r\\n98765 78654 25669 45126 98745\\r\\n', 'output': ['21']}, {'input': '13 94348844 381845400\\r\\n515 688 5464 155 441 9217 114 21254 55 9449 1800 834 384\\r\\n', 'output': ['55']}, {'input': '17 100 100\\r\\n47 75 22 18 42 53 95 98 94 50 63 55 46 80 9 20 99\\r\\n', 'output': ['9']}, {'input': '47 20 1000000\\r\\n81982 19631 19739 13994 50426 14232 79125 95908 20227 79428 84065 86233 30742 82664 54626 10849 11879 67198 15667 75866 47242 90766 23115 20130 37293 8312 57308 52366 49768 28256 56085 39722 40397 14166 16743 28814 40538 50753 60900 99449 94318 54247 10563 5260 76407 42235 417\\r\\n', 'output': ['0']}, {'input': '58 5858758 7544547\\r\\n6977 5621 6200 6790 7495 5511 6214 6771 6526 6557 5936 7020 6925 5462 7519 6166 5974 6839 6505 7113 5674 6729 6832 6735 5363 5817 6242 7465 7252 6427 7262 5885 6327 7046 6922 5607 7238 5471 7145 5822 5465 6369 6115 5694 6561 7330 7089 7397 7409 7093 7537 7279 7613 6764 7349 7095 6967 5984\\r\\n', 'output': ['0']}, {'input': '79 5464 64574\\r\\n3800 2020 2259 503 4922 975 5869 6140 3808 2635 3420 992 4683 3748 5732 4787 6564 3302 6153 4955 2958 6107 2875 3449 1755 5029 5072 5622 2139 1892 4640 1199 3918 1061 4074 5098 4939 5496 2019 356 5849 4796 4446 4633 1386 1129 3351 639 2040 3769 4106 4048 3959 931 3457 1938 4587 6438 2938 132 2434 3727 3926 2135 1665 2871 2798 6359 989 6220 97 2116 2048 251 4264 3841 4428 5286 1914\\r\\n', 'output': ['97']}, {'input': '95 97575868 5\\r\\n4612 1644 3613 5413 5649 2419 5416 3926 4610 4419 2796 5062 2112 1071 3790 4220 3955 2142 4638 2832 2702 2115 2045 4085 3599 2452 5495 4767 1368 2344 4625 4132 5755 5815 2581 6259 1330 4938 815 5430 1628 3108 4342 3692 2928 1941 3714 4498 4471 4842 1822 867 3395 2587 3372 6394 6423 3728 3720 6525 4296 2091 4400 994 1321 3454 5285 2989 1755 504 5019 2629 3834 3191 6254 844 5338 615 5608 4898 2497 4482 850 5308 2763 1943 6515 5459 5556 829 4646 5258 2019 5582 1226\\r\\n', 'output': ['815']}, {'input': '77 678686 878687\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['1']}, {'input': '2 7597 8545\\r\\n74807 22362\\r\\n', 'output': ['0']}, {'input': '3 75579860 8570575\\r\\n10433 30371 14228\\r\\n', 'output': ['10433']}]", "source_code": "import java.io.*;\nimport static java.util.Arrays.deepToString;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport static java.util.Comparator.comparingInt;\nimport static java.util.Comparator.reverseOrder;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class HelloWorld {\n\n  \n  \n    \n    public static void main(String[] args) {\n        \n        \n        \n        Scanner input = new Scanner(System.in);\n        int n = input.nextInt();\n        int m = input.nextInt();\n        int k = input.nextInt();\n        int array[] = new int[n];\n        int j=0;\n        \n        for(int i = 0 ; i < n ; ++i){\n           array[i] = input.nextInt(); \n        }\n        \n        int max = 0 ;\n        int s = 0 ; \n        \n        while( k > 0 ){\n        \n        int count = 0 ;\n        int c = 0 ;\n        c = array[0] ;\n       \n        for(int i = 0 ; i < n-1 ; ++i){\n         \n         s = array[i+1] - array[i] ; \n         array[i+1] = array[i] ; \n         array[i] = s ; \n         \n         if( array[i]!= array[i+1] ){\n          ++count ; \n         }\n         \n        }\n         \n         s = array[n-1] - c ;\n         array[n-1] = c ; \n         c = s ;\n         \n         if( array[n-1]!= array[0] ){\n          ++count ; \n         }\n          \n         if( count <= m ){\n          j = c + (m-count)*2 ;\n         }\n         else{\n          j = c + 2*(m-1) ;\n         }\n         \n        k -= (m+1) ;\n        max += j ;\n         \n        }\n       System.out.print(max) ;\n    }\n}\n"}
{"src_uid": "b81e7a786e4083cf7188f718bc045a85", "id": 98, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': '2 3 1\\r\\n2 3\\r\\n', 'output': ['0']}, {'input': '3 2 2\\r\\n4 1 3\\r\\n', 'output': ['2']}, {'input': '5 10 10\\r\\n7 0 7 0 7\\r\\n', 'output': ['7']}, {'input': '6 10 4\\r\\n1 2 3 4 5 6\\r\\n', 'output': ['0']}, {'input': '7 5 2\\r\\n1 2 3 4 5 6 7\\r\\n', 'output': ['1']}, {'input': '16 100 100\\r\\n30 89 12 84 62 24 10 59 98 21 13 69 65 12 54 32\\r\\n', 'output': ['0']}, {'input': '99 999 999\\r\\n9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\\r\\n', 'output': ['9']}, {'input': '1 1 1\\r\\n0\\r\\n', 'output': ['0']}, {'input': '1 64 25\\r\\n100000\\r\\n', 'output': ['1600']}, {'input': '1 1000000000 1\\r\\n100\\r\\n', 'output': ['100']}, {'input': '1 1 1000000000\\r\\n100\\r\\n', 'output': ['100']}, {'input': '1 1000000000 1000000000\\r\\n100\\r\\n', 'output': ['100']}, {'input': '5 2 9494412\\r\\n5484 254 1838 18184 9421\\r\\n', 'output': ['0']}, {'input': '5 10 7\\r\\n98765 78654 25669 45126 98745\\r\\n', 'output': ['21']}, {'input': '13 94348844 381845400\\r\\n515 688 5464 155 441 9217 114 21254 55 9449 1800 834 384\\r\\n', 'output': ['55']}, {'input': '17 100 100\\r\\n47 75 22 18 42 53 95 98 94 50 63 55 46 80 9 20 99\\r\\n', 'output': ['9']}, {'input': '47 20 1000000\\r\\n81982 19631 19739 13994 50426 14232 79125 95908 20227 79428 84065 86233 30742 82664 54626 10849 11879 67198 15667 75866 47242 90766 23115 20130 37293 8312 57308 52366 49768 28256 56085 39722 40397 14166 16743 28814 40538 50753 60900 99449 94318 54247 10563 5260 76407 42235 417\\r\\n', 'output': ['0']}, {'input': '58 5858758 7544547\\r\\n6977 5621 6200 6790 7495 5511 6214 6771 6526 6557 5936 7020 6925 5462 7519 6166 5974 6839 6505 7113 5674 6729 6832 6735 5363 5817 6242 7465 7252 6427 7262 5885 6327 7046 6922 5607 7238 5471 7145 5822 5465 6369 6115 5694 6561 7330 7089 7397 7409 7093 7537 7279 7613 6764 7349 7095 6967 5984\\r\\n', 'output': ['0']}, {'input': '79 5464 64574\\r\\n3800 2020 2259 503 4922 975 5869 6140 3808 2635 3420 992 4683 3748 5732 4787 6564 3302 6153 4955 2958 6107 2875 3449 1755 5029 5072 5622 2139 1892 4640 1199 3918 1061 4074 5098 4939 5496 2019 356 5849 4796 4446 4633 1386 1129 3351 639 2040 3769 4106 4048 3959 931 3457 1938 4587 6438 2938 132 2434 3727 3926 2135 1665 2871 2798 6359 989 6220 97 2116 2048 251 4264 3841 4428 5286 1914\\r\\n', 'output': ['97']}, {'input': '95 97575868 5\\r\\n4612 1644 3613 5413 5649 2419 5416 3926 4610 4419 2796 5062 2112 1071 3790 4220 3955 2142 4638 2832 2702 2115 2045 4085 3599 2452 5495 4767 1368 2344 4625 4132 5755 5815 2581 6259 1330 4938 815 5430 1628 3108 4342 3692 2928 1941 3714 4498 4471 4842 1822 867 3395 2587 3372 6394 6423 3728 3720 6525 4296 2091 4400 994 1321 3454 5285 2989 1755 504 5019 2629 3834 3191 6254 844 5338 615 5608 4898 2497 4482 850 5308 2763 1943 6515 5459 5556 829 4646 5258 2019 5582 1226\\r\\n', 'output': ['815']}, {'input': '77 678686 878687\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['1']}, {'input': '2 7597 8545\\r\\n74807 22362\\r\\n', 'output': ['0']}, {'input': '3 75579860 8570575\\r\\n10433 30371 14228\\r\\n', 'output': ['10433']}]", "source_code": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport static java.util.Collections.reverseOrder;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class Diamond_Robber {\n    \n        static class Reader\n        {\n            final private int BUFFER_SIZE = 1 << 16;\n            private DataInputStream din;\n            private byte[] buffer;\n            private int bufferPointer, bytesRead;\n\n            public Reader()\n            {\n                din = new DataInputStream(System.in);\n                buffer = new byte[BUFFER_SIZE];\n                bufferPointer = bytesRead = 0;\n            }\n\n            public Reader(String file_name) throws IOException\n            {\n                din = new DataInputStream(new FileInputStream(file_name));\n                buffer = new byte[BUFFER_SIZE];\n                bufferPointer = bytesRead = 0;\n            }\n\n            public String readLine() throws IOException\n            {\n                byte[] buf = new byte[64]; // line length\n                int cnt = 0, c;\n                while ((c = read())!= -1)\n                {\n                    if (c == '\\n')\n                        break;\n                    buf[cnt++] = (byte) c;\n                }\n                return new String(buf, 0, cnt);\n            }\n\n            public int nextInt() throws IOException\n            {\n                int ret = 0;\n                byte c = read();\n                if (c == -1 ||!isDigit(c))\n                    throw new NumberFormatException();\n                do\n                {\n                    ret = ret * 10 + c - '0';\n                }  while ((c = read())!= -1 && isDigit(c));\n                return ret;\n            }\n\n            public long nextLong() throws IOException\n            {\n                long ret = 0;\n                byte c = read();\n                if (c == -1 ||!isDigit(c))\n                    throw new NumberFormatException();\n                do\n                {\n                    ret = ret * 10 + c - '0';\n                }\n                while ((c = read())!= -1 && isDigit(c));\n                return ret;\n            }\n\n            public double nextDouble() throws IOException\n            {\n                double ret = 0, div = 1;\n                byte c = read();\n                if (c == -1 ||!isDigit(c))\n                    throw new NumberFormatException();\n                do\n                {\n                    ret = ret * 10 + c - '0';\n                }\n                while ((c = read())!= -1 && isDigit(c));\n                if (c == -1 || c!= '.')\n                {\n                    return ret;\n                }\n                do\n                {\n                    div *= 10;\n                    c = read();\n                    if (!isDigit(c))\n                    {\n                        return ret / div;\n                    }\n                    ret = ret * 10 + c - '0';\n                }\n                while ((c = read())!= -1 && isDigit(c));\n                return ret / div;\n            }\n\n            private static boolean isDigit(byte c)\n            {\n                return '0' <= c && c <= '9';\n            }\n\n            private byte read() throws IOException\n            {\n                if (bufferPointer < bytesRead)\n                {\n                    return buffer[bufferPointer++];\n                }\n                bufferPointer = 0;\n                bytesRead = din.read(buffer, 0, buffer.length);\n                if (bytesRead <= 0)\n                {\n                    return -1;\n                }\n                return buffer[bufferPointer++];\n            }\n        }\n    public static void main(String[] args) throws IOException {\n    \n    Reader st = new Reader();\n    \n   int n =  st.nextInt(),m =  st.nextInt(), k = st.nextInt"}
{"src_uid": "f256235c0b2815aae85a6f9435c69dac", "id": 99, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1700, "testcases": "[{'input': '11 4 3 9\\r\\n', 'output': ['3']}, {'input': '20 5 2 20\\r\\n', 'output': ['2']}, {'input': '1 1 1 1\\r\\n', 'output': ['1']}, {'input': '26 5 2 18\\r\\n', 'output': ['3']}, {'input': '21 5 1 15\\r\\n', 'output': ['1']}, {'input': '21 5 1 21\\r\\n', 'output': ['1']}, {'input': '21 5 8 14\\r\\n', 'output': ['2']}, {'input': '20 4 1 20\\r\\n', 'output': ['1']}, {'input': '21 5 1 13\\r\\n', 'output': ['2']}, {'input': '21 5 4 15\\r\\n', 'output': ['2']}, {'input': '17 3 1 16\\r\\n', 'output': ['2']}, {'input': '19 5 7 19\\r\\n', 'output': ['2']}, {'input': '18 2 1 13\\r\\n', 'output': ['2']}, {'input': '21 3 6 11\\r\\n', 'output': ['2']}, {'input': '21 5 3 12\\r\\n', 'output': ['2']}, {'input': '21 3 6 10\\r\\n', 'output': ['3']}, {'input': '28 5 4 26\\r\\n', 'output': ['3']}, {'input': '21 5 6 18\\r\\n', 'output': ['2']}, {'input': '21 5 4 21\\r\\n', 'output': ['2']}, {'input': '17 5 6 17\\r\\n', 'output': ['1']}, {'input': '21 5 9 12\\r\\n', 'output': ['2']}, {'input': '21 3 6 7\\r\\n', 'output': ['2']}, {'input': '21 5 7 9\\r\\n', 'output': ['1']}, {'input': '12 4 5 8\\r\\n', 'output': ['1']}, {'input': '21 3 6 8\\r\\n', 'output': ['2']}, {'input': '21 1 5 17\\r\\n', 'output': ['1']}, {'input': '5 5 2 4\\r\\n', 'output': ['1']}, {'input': '18 4 6 17\\r\\n', 'output': ['2']}, {'input': '18 4 6 18\\r\\n', 'output': ['2']}, {'input': '16 4 1 16\\r\\n', 'output': ['1']}, {'input': '20 4 7 14\\r\\n', 'output': ['2']}, {'input': '17 3 12 16\\r\\n', 'output': ['3']}, {'input': '12 4 8 9\\r\\n', 'output': ['2']}, {'input': '11 8 2 7\\r\\n', 'output': ['1']}, {'input': '27 5 4 24\\r\\n', 'output': ['3']}, {'input': '29 5 12 27\\r\\n', 'output': ['3']}, {'input': '30 5 5 29\\r\\n', 'output': ['2']}, {'input': '91 2 15 72\\r\\n', 'output': ['1']}, {'input': '41 1 8 27\\r\\n', 'output': ['1']}, {'input': '26 5 7 21\\r\\n', 'output': ['2']}, {'input': '70 5 31 33\\r\\n', 'output': ['1']}, {'input': '84 9 6 80\\r\\n', 'output': ['3']}, {'input': '79 8 41 64\\r\\n', 'output': ['1']}, {'input': '63 11 23 48\\r\\n', 'output': ['2']}, {'input': '97 9 18 54\\r\\n', 'output': ['2']}, {'input': '75 18 20 23\\r\\n', 'output': ['1']}, {'input': '66 42 43 44\\r\\n', 'output': ['1']}, {'input': '92 54 20 53\\r\\n', 'output': ['1']}, {'input': '32 90 31 32\\r\\n', 'output': ['1']}, {'input': '18 100 6 6\\r\\n', 'output': ['1']}, {'input': '458 12 203 310\\r\\n', 'output': ['2']}, {'input': '149 49 92 129\\r\\n', 'output': ['2']}, {'input': '264 2 9 63\\r\\n', 'output': ['2']}, {'input': '908 6 407 531\\r\\n', 'output': ['3']}, {'input': '410 36 109 191\\r\\n', 'output': ['2']}, {'input': '301 38 97 171\\r\\n', 'output': ['3']}, {'input': '691 27 313 499\\r\\n', 'output': ['3']}, {'input': '939 42 86 827\\r\\n', 'output': ['3']}, {'input': '280 32 64 277\\r\\n', 'output': ['3']}, {'input': '244 25 94 199\\r\\n', 'output': ['3']}, {'input': '134 110 11 52\\r\\n', 'output': ['1']}, {'input': '886 251 61 672\\r\\n', 'output': ['3']}, {'input': '261 686 243 254\\r\\n', 'output': ['1']}, {'input': '162 309 68 98\\r\\n', 'output': ['1']}, {'input': '476 398 77 256\\r\\n', 'output': ['1']}, {'input': '258 224 84 174\\r\\n', 'output': ['1']}, {'input': '357 182 73 247\\r\\n', 'output': ['2']}, {'input': '488 655 290 457\\r\\n', 'output': ['1']}, {'input': '149 334 78 105\\r\\n', 'output': ['1']}, {'input': '488 519 203 211\\r\\n', 'output': ['1']}, {'input': '192293793 2864 5278163 190776899\\r\\n', 'output': ['3']}, {'input': '38644205 2729 9325777 31658388\\r\\n', 'output': ['3']}, {'input': '268836959 6117 166683294 249843000\\r\\n', 'output': ['3']}, {'input': '831447817 8377 549549158 577671489\\r\\n', 'output': ['3']}, {'input': '444819690 3519 48280371 117052060\\r\\n', 'output': ['3']}, {'input': '729584406 8367 456501516 557088265\\r\\n', 'output': ['3']}, {'input': '629207296 3735 112288653 309364482\\r\\n', 'output': ['3']}, {'input': '775589210 6930 266348458 604992807\\r\\n', 'output': ['3']}, {'input': '249414894 1999 34827655 127026562\\r\\n', 'output': ['3']}, {'input': '566377385 227 424126063 478693454\\r\\n', 'output': ['3']}, {'input': '960442940 572344654 77422042 406189391\\r\\n', 'output': ['1']}, {'input': '291071313 592207814 6792338 181083636\\r\\n', 'output': ['1']}, {'input': '191971162 306112722 18212391 188328807\\r\\n', 'output': ['1']}, {'input': '609162932 300548167 21640850 411089609\\r\\n', 'output': ['2']}, {'input': '645010014 34698301 217620581 416292490\\r\\n', 'output': ['3']}, {'input': '51474721 867363452 12231088 43489285\\r\\n', 'output': ['1']}, {'input': '484381636 927869638 57278216 175514226\\r\\n', 'output': ['1']}, {'input': '491259590 529594367 305425951 326414536\\r\\n', 'output': ['1']}, {'input': '733405771 830380469 19971607 389270995\\r\\n', 'output': ['1']}, {'input': '446237720 920085248 296916273 439113596\\r\\n', 'output': ['1']}, {'input': '12 6 3 10\\r\\n', 'output': ['2']}, {'input': '25 2 8 11\\r\\n', 'output': ['2']}, {'input': '17 8 3 15\\r\\n', 'output': ['2']}, {'input': '9 2 4 7\\r\\n', 'output': ['2']}, {'input': '6 7 5 6\\r\\n', 'output': ['1']}, {'input': '13 2 1 6\\r\\n', 'output': ['1']}, {'input': '15 8 10 14\\r\\n', 'output': ['1']}, {'input': '27 2 5 13\\r\\n', 'output': ['2']}, {'input': '14 8 2 12\\r\\n', 'output': ['2']}, {'input': '61 1 10 38\\r\\n', 'output': ['1']}, {'input': '15 6 7 15\\r\\n', 'output': ['1']}, {'input': '100 1 2 15\\r\\n', 'output': ['1']}, {'input': '10 1 4 5\\r\\n', 'output': ['1']}, {'input': '6 3 1 6\\r\\n', 'output': ['1']}, {'input': '4 3 3 4\\r\\n', 'output': ['2']}, {'input': '5 2 1 5\\r\\n', 'output': ['1']}, {'input': '7 3 1 1\\r\\n', 'output': ['1']}, {'input': '7 3 1 2\\r\\n', 'output': ['1']}, {'input': '7 3 1 3\\r\\n', 'output': ['1']}, {'input': '7 3 1 4\\r\\n', 'output': ['2']}, {'input': '7 3 1 5\\r\\n', 'output': ['2']}, {'input': '7 3 1 6\\r\\n', 'output': ['1']}, {'input': '7 3 1 7\\r\\n', 'output': ['1']}, {'input': '7 3 2 2\\r\\n', 'output': ['1']}, {'input': '7 3 2 3\\r\\n', 'output': ['1']}, {'input': '7 3 2 4\\r\\n', 'output': ['2']}, {'input': '7 3 2 5\\r\\n', 'output': ['2']}, {'input': '7 3 2 6\\r\\n', 'output': ['2']}, {'input': '7 3 2 7\\r\\n', 'output': ['2']}, {'input': '7 3 3 3\\r\\n', 'output': ['1']}, {'input': '7 3 3 4\\r\\n', 'output': ['2']}, {'input': '7 3 3 5\\r\\n', 'output': ['2']}, {'input': '7 3 3 6\\r\\n', 'output': ['2']}, {'input': '7 3 3 7\\r\\n', 'output': ['2']}, {'input': '7 3 4 4\\r\\n', 'output': ['1']}, {'input': '7 3 4 5\\r\\n', 'output': ['1']}, {'input': '7 3 4 6\\r\\n', 'output': ['1']}, {'input': '7 3 4 7\\r\\n', 'output': ['1']}, {'input': '7 3 5 5\\r\\n', 'output': ['1']}, {'input': '7 3 5 6\\r\\n', 'output': ['1']}, {'input': '7 3 5 7\\r\\n', 'output': ['2']}, {'input': '7 3 6 6\\r\\n', 'output': ['1']}, {'input': '7 3 6 7\\r\\n', 'output': ['2']}, {'input': '7 3 7 7\\r\\n', 'output': ['1']}, {'input': '8 3 1 1\\r\\n', 'output': ['1']}, {'input': '8 3 1 2\\r\\n', 'output': ['1']}, {'input': '8 3 1 3\\r\\n', 'output': ['1']}, {'input': '8 3 1 4\\r\\n', 'output': ['2']}, {'input': '8 3 1 5\\r\\n', 'output': ['2']}, {'input': '8 3 1 6\\r\\n', 'output': ['1']}, {'input': '8 3 1 7\\r\\n', 'output': ['2']}, {'input': '8 3 1 8\\r\\n', 'output': ['1']}, {'input': '8 3 2 2\\r\\n', 'output': ['1']}, {'input': '8 3 2 3\\r\\n', 'output': ['1']}, {'input': '8 3 2 4\\r\\n', 'output': ['2']}, {'input': '8 3 2 5\\r\\n', 'output': ['2']}, {'input': '8 3 2 6\\r\\n', 'output': ['2']}, {'input': '8 3 2 7\\r\\n', 'output': ['2']}, {'input': '8 3 2 8\\r\\n', 'output': ['2']}, {'input': '8 3 3 3\\r\\n', 'output': ['1']}, {'input': '8 3 3 4\\r\\n', 'output': ['2']}, {'input': '8 3 3 5\\r\\n', 'output': ['2']}, {'input': '8 3 3 6\\r\\n', 'output': ['2']}, {'input': '8 3 3 7\\r\\n', 'output': ['3']}, {'input': '8 3 3 8\\r\\n', 'output': ['2']}, {'input': '8 3 4 4\\r\\n', 'output': ['1']}, {'input': '8 3 4 5\\r\\n', 'output': ['1']}, {'input': '8 3 4 6\\r\\n', 'output': ['1']}, {'input': '8 3 4 7\\r\\n', 'output': ['2']}, {'input': '8 3 4 8\\r\\n', 'output': ['1']}, {'input': '8 3 5 5\\r\\n', 'output': ['1']}, {'input': '8 3 5 6\\r\\n', 'output': ['1']}, {'input': '8 3 5 7\\r\\n', 'output': ['2']}, {'input': '8 3 5 8\\r\\n', 'output': ['2']}, {'input': '8 3 6 6\\r\\n', 'output': ['1']}, {'input': '8 3 6 7\\r\\n', 'output': ['2']}, {'input': '8 3 6 8\\r\\n', 'output': ['2']}, {'input': '8 3 7 7\\r\\n', 'output': ['1']}, {'input': '8 3 7 8\\r\\n', 'output': ['1']}, {'input': '8 3 8 8\\r\\n', 'output': ['1']}]", "source_code": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.StreamTokenizer;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Objects;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.SortedMap;\nimport java.util.SortedSet;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n\npublic class Solution {\n\tstatic StreamTokenizer in;\n\tstatic int nextInt() throws IOException {\n\t\tin.nextToken();\n\t\treturn (int)in.nval;\n\t}\n\tstatic long nextLong() throws IOException {\n\t\tin.nextToken();\n\t\treturn in.nval;\n\t}\n\tstatic int[] readIntArray() throws IOException {\n\t\tin.nextToken();\n\t\tif ( in.ttype!= StreamTokenizer.TT_EOL ) {\n\t\t\tint[] result = new int [ 1 ];\n\t\t\tresult [ 0 ] = (int)in.nval;\n\t\t\twhile ( in.ttype!= StreamTokenizer.TT_EOL ) {\n\t\t\t\tin.nextToken();\n\t\t\t\tint[] temp = new int [ result.length + 1 ];\n\t\t\t\tSystem.arraycopy( result, 0, temp, 0, result.length );\n\t\t\t\ttemp[result.length] = (int)in.nval;\n\t\t\t\tresult = temp;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\treturn new int [ 0 ];\n\t}\n\tstatic long[] readLongArray() throws IOException {\n\t\tin.nextToken();\n\t\tif ( in.ttype!= StreamTokenizer.TT_EOL ) {\n\t\t\tlong[] result = new long [ 1 ];\n\t\t\tresult [ 0 ] = in.nval;\n\t\t\twhile ( in.ttype!= StreamTokenizer.TT_EOL ) {\n\t\t\t\tin.nextToken();\n\t\t\t\tlong[] temp = new long [ result.length + 1 ];\n\t\t\t\tSystem.arraycopy( result, 0, temp, 0, result.length );\n\t\t\t\ttemp[result.length] = in.nval;\n\t\t\t\tresult = temp;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\treturn new long [ 0 ];\n\t}\n\tstatic double[] readDoubleArray() throws IOException {\n\t\tin.nextToken();\n\t\tif ( in.ttype!= StreamTokenizer.TT_EOL ) {\n\t\t\tdouble[] result = new double [ 1 ];\n\t\t\tresult [ 0 ] = in.nval;\n\t\t\twhile ( in.ttype!= StreamTokenizer.TT_EOL ) {\n\t\t\t\tin.nextToken();\n\t\t\t\tdouble[] temp = new double [ result.length + 1 ];\n\t\t\t\tSystem.arraycopy( result, 0, temp, 0, result.length );\n\t\t\t\ttemp[result.length] = in.nval;\n\t\t\t\tresult = temp;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\treturn new double [ 0 ];\n\t}\n\tpublic static void main ( String[] args ) throws IOException {\n\t\tin = new StreamTokenizer( new InputStreamReader( System.in ) );\n\t\tint n = nextInt(), m = nextInt(), a = nextInt(), b = nextInt();\n\t\tint res = 0;\n\t\tif ( a % m == 1 ) {\n\t\t\tres += ( ( b - 1 ) / m ) + 1;\n\t\t"}
{"src_uid": "f256235c0b2815aae85a6f9435c69dac", "id": 99, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1700, "testcases": "[{'input': '11 4 3 9\\r\\n', 'output': ['3']}, {'input': '20 5 2 20\\r\\n', 'output': ['2']}, {'input': '1 1 1 1\\r\\n', 'output': ['1']}, {'input': '26 5 2 18\\r\\n', 'output': ['3']}, {'input': '21 5 1 15\\r\\n', 'output': ['1']}, {'input': '21 5 1 21\\r\\n', 'output': ['1']}, {'input': '21 5 8 14\\r\\n', 'output': ['2']}, {'input': '20 4 1 20\\r\\n', 'output': ['1']}, {'input': '21 5 1 13\\r\\n', 'output': ['2']}, {'input': '21 5 4 15\\r\\n', 'output': ['2']}, {'input': '17 3 1 16\\r\\n', 'output': ['2']}, {'input': '19 5 7 19\\r\\n', 'output': ['2']}, {'input': '18 2 1 13\\r\\n', 'output': ['2']}, {'input': '21 3 6 11\\r\\n', 'output': ['2']}, {'input': '21 5 3 12\\r\\n', 'output': ['2']}, {'input': '21 3 6 10\\r\\n', 'output': ['3']}, {'input': '28 5 4 26\\r\\n', 'output': ['3']}, {'input': '21 5 6 18\\r\\n', 'output': ['2']}, {'input': '21 5 4 21\\r\\n', 'output': ['2']}, {'input': '17 5 6 17\\r\\n', 'output': ['1']}, {'input': '21 5 9 12\\r\\n', 'output': ['2']}, {'input': '21 3 6 7\\r\\n', 'output': ['2']}, {'input': '21 5 7 9\\r\\n', 'output': ['1']}, {'input': '12 4 5 8\\r\\n', 'output': ['1']}, {'input': '21 3 6 8\\r\\n', 'output': ['2']}, {'input': '21 1 5 17\\r\\n', 'output': ['1']}, {'input': '5 5 2 4\\r\\n', 'output': ['1']}, {'input': '18 4 6 17\\r\\n', 'output': ['2']}, {'input': '18 4 6 18\\r\\n', 'output': ['2']}, {'input': '16 4 1 16\\r\\n', 'output': ['1']}, {'input': '20 4 7 14\\r\\n', 'output': ['2']}, {'input': '17 3 12 16\\r\\n', 'output': ['3']}, {'input': '12 4 8 9\\r\\n', 'output': ['2']}, {'input': '11 8 2 7\\r\\n', 'output': ['1']}, {'input': '27 5 4 24\\r\\n', 'output': ['3']}, {'input': '29 5 12 27\\r\\n', 'output': ['3']}, {'input': '30 5 5 29\\r\\n', 'output': ['2']}, {'input': '91 2 15 72\\r\\n', 'output': ['1']}, {'input': '41 1 8 27\\r\\n', 'output': ['1']}, {'input': '26 5 7 21\\r\\n', 'output': ['2']}, {'input': '70 5 31 33\\r\\n', 'output': ['1']}, {'input': '84 9 6 80\\r\\n', 'output': ['3']}, {'input': '79 8 41 64\\r\\n', 'output': ['1']}, {'input': '63 11 23 48\\r\\n', 'output': ['2']}, {'input': '97 9 18 54\\r\\n', 'output': ['2']}, {'input': '75 18 20 23\\r\\n', 'output': ['1']}, {'input': '66 42 43 44\\r\\n', 'output': ['1']}, {'input': '92 54 20 53\\r\\n', 'output': ['1']}, {'input': '32 90 31 32\\r\\n', 'output': ['1']}, {'input': '18 100 6 6\\r\\n', 'output': ['1']}, {'input': '458 12 203 310\\r\\n', 'output': ['2']}, {'input': '149 49 92 129\\r\\n', 'output': ['2']}, {'input': '264 2 9 63\\r\\n', 'output': ['2']}, {'input': '908 6 407 531\\r\\n', 'output': ['3']}, {'input': '410 36 109 191\\r\\n', 'output': ['2']}, {'input': '301 38 97 171\\r\\n', 'output': ['3']}, {'input': '691 27 313 499\\r\\n', 'output': ['3']}, {'input': '939 42 86 827\\r\\n', 'output': ['3']}, {'input': '280 32 64 277\\r\\n', 'output': ['3']}, {'input': '244 25 94 199\\r\\n', 'output': ['3']}, {'input': '134 110 11 52\\r\\n', 'output': ['1']}, {'input': '886 251 61 672\\r\\n', 'output': ['3']}, {'input': '261 686 243 254\\r\\n', 'output': ['1']}, {'input': '162 309 68 98\\r\\n', 'output': ['1']}, {'input': '476 398 77 256\\r\\n', 'output': ['1']}, {'input': '258 224 84 174\\r\\n', 'output': ['1']}, {'input': '357 182 73 247\\r\\n', 'output': ['2']}, {'input': '488 655 290 457\\r\\n', 'output': ['1']}, {'input': '149 334 78 105\\r\\n', 'output': ['1']}, {'input': '488 519 203 211\\r\\n', 'output': ['1']}, {'input': '192293793 2864 5278163 190776899\\r\\n', 'output': ['3']}, {'input': '38644205 2729 9325777 31658388\\r\\n', 'output': ['3']}, {'input': '268836959 6117 166683294 249843000\\r\\n', 'output': ['3']}, {'input': '831447817 8377 549549158 577671489\\r\\n', 'output': ['3']}, {'input': '444819690 3519 48280371 117052060\\r\\n', 'output': ['3']}, {'input': '729584406 8367 456501516 557088265\\r\\n', 'output': ['3']}, {'input': '629207296 3735 112288653 309364482\\r\\n', 'output': ['3']}, {'input': '775589210 6930 266348458 604992807\\r\\n', 'output': ['3']}, {'input': '249414894 1999 34827655 127026562\\r\\n', 'output': ['3']}, {'input': '566377385 227 424126063 478693454\\r\\n', 'output': ['3']}, {'input': '960442940 572344654 77422042 406189391\\r\\n', 'output': ['1']}, {'input': '291071313 592207814 6792338 181083636\\r\\n', 'output': ['1']}, {'input': '191971162 306112722 18212391 188328807\\r\\n', 'output': ['1']}, {'input': '609162932 300548167 21640850 411089609\\r\\n', 'output': ['2']}, {'input': '645010014 34698301 217620581 416292490\\r\\n', 'output': ['3']}, {'input': '51474721 867363452 12231088 43489285\\r\\n', 'output': ['1']}, {'input': '484381636 927869638 57278216 175514226\\r\\n', 'output': ['1']}, {'input': '491259590 529594367 305425951 326414536\\r\\n', 'output': ['1']}, {'input': '733405771 830380469 19971607 389270995\\r\\n', 'output': ['1']}, {'input': '446237720 920085248 296916273 439113596\\r\\n', 'output': ['1']}, {'input': '12 6 3 10\\r\\n', 'output': ['2']}, {'input': '25 2 8 11\\r\\n', 'output': ['2']}, {'input': '17 8 3 15\\r\\n', 'output': ['2']}, {'input': '9 2 4 7\\r\\n', 'output': ['2']}, {'input': '6 7 5 6\\r\\n', 'output': ['1']}, {'input': '13 2 1 6\\r\\n', 'output': ['1']}, {'input': '15 8 10 14\\r\\n', 'output': ['1']}, {'input': '27 2 5 13\\r\\n', 'output': ['2']}, {'input': '14 8 2 12\\r\\n', 'output': ['2']}, {'input': '61 1 10 38\\r\\n', 'output': ['1']}, {'input': '15 6 7 15\\r\\n', 'output': ['1']}, {'input': '100 1 2 15\\r\\n', 'output': ['1']}, {'input': '10 1 4 5\\r\\n', 'output': ['1']}, {'input': '6 3 1 6\\r\\n', 'output': ['1']}, {'input': '4 3 3 4\\r\\n', 'output': ['2']}, {'input': '5 2 1 5\\r\\n', 'output': ['1']}, {'input': '7 3 1 1\\r\\n', 'output': ['1']}, {'input': '7 3 1 2\\r\\n', 'output': ['1']}, {'input': '7 3 1 3\\r\\n', 'output': ['1']}, {'input': '7 3 1 4\\r\\n', 'output': ['2']}, {'input': '7 3 1 5\\r\\n', 'output': ['2']}, {'input': '7 3 1 6\\r\\n', 'output': ['1']}, {'input': '7 3 1 7\\r\\n', 'output': ['1']}, {'input': '7 3 2 2\\r\\n', 'output': ['1']}, {'input': '7 3 2 3\\r\\n', 'output': ['1']}, {'input': '7 3 2 4\\r\\n', 'output': ['2']}, {'input': '7 3 2 5\\r\\n', 'output': ['2']}, {'input': '7 3 2 6\\r\\n', 'output': ['2']}, {'input': '7 3 2 7\\r\\n', 'output': ['2']}, {'input': '7 3 3 3\\r\\n', 'output': ['1']}, {'input': '7 3 3 4\\r\\n', 'output': ['2']}, {'input': '7 3 3 5\\r\\n', 'output': ['2']}, {'input': '7 3 3 6\\r\\n', 'output': ['2']}, {'input': '7 3 3 7\\r\\n', 'output': ['2']}, {'input': '7 3 4 4\\r\\n', 'output': ['1']}, {'input': '7 3 4 5\\r\\n', 'output': ['1']}, {'input': '7 3 4 6\\r\\n', 'output': ['1']}, {'input': '7 3 4 7\\r\\n', 'output': ['1']}, {'input': '7 3 5 5\\r\\n', 'output': ['1']}, {'input': '7 3 5 6\\r\\n', 'output': ['1']}, {'input': '7 3 5 7\\r\\n', 'output': ['2']}, {'input': '7 3 6 6\\r\\n', 'output': ['1']}, {'input': '7 3 6 7\\r\\n', 'output': ['2']}, {'input': '7 3 7 7\\r\\n', 'output': ['1']}, {'input': '8 3 1 1\\r\\n', 'output': ['1']}, {'input': '8 3 1 2\\r\\n', 'output': ['1']}, {'input': '8 3 1 3\\r\\n', 'output': ['1']}, {'input': '8 3 1 4\\r\\n', 'output': ['2']}, {'input': '8 3 1 5\\r\\n', 'output': ['2']}, {'input': '8 3 1 6\\r\\n', 'output': ['1']}, {'input': '8 3 1 7\\r\\n', 'output': ['2']}, {'input': '8 3 1 8\\r\\n', 'output': ['1']}, {'input': '8 3 2 2\\r\\n', 'output': ['1']}, {'input': '8 3 2 3\\r\\n', 'output': ['1']}, {'input': '8 3 2 4\\r\\n', 'output': ['2']}, {'input': '8 3 2 5\\r\\n', 'output': ['2']}, {'input': '8 3 2 6\\r\\n', 'output': ['2']}, {'input': '8 3 2 7\\r\\n', 'output': ['2']}, {'input': '8 3 2 8\\r\\n', 'output': ['2']}, {'input': '8 3 3 3\\r\\n', 'output': ['1']}, {'input': '8 3 3 4\\r\\n', 'output': ['2']}, {'input': '8 3 3 5\\r\\n', 'output': ['2']}, {'input': '8 3 3 6\\r\\n', 'output': ['2']}, {'input': '8 3 3 7\\r\\n', 'output': ['3']}, {'input': '8 3 3 8\\r\\n', 'output': ['2']}, {'input': '8 3 4 4\\r\\n', 'output': ['1']}, {'input': '8 3 4 5\\r\\n', 'output': ['1']}, {'input': '8 3 4 6\\r\\n', 'output': ['1']}, {'input': '8 3 4 7\\r\\n', 'output': ['2']}, {'input': '8 3 4 8\\r\\n', 'output': ['1']}, {'input': '8 3 5 5\\r\\n', 'output': ['1']}, {'input': '8 3 5 6\\r\\n', 'output': ['1']}, {'input': '8 3 5 7\\r\\n', 'output': ['2']}, {'input': '8 3 5 8\\r\\n', 'output': ['2']}, {'input': '8 3 6 6\\r\\n', 'output': ['1']}, {'input': '8 3 6 7\\r\\n', 'output': ['2']}, {'input': '8 3 6 8\\r\\n', 'output': ['2']}, {'input': '8 3 7 7\\r\\n', 'output': ['1']}, {'input': '8 3 7 8\\r\\n', 'output': ['1']}, {'input': '8 3 8 8\\r\\n', 'output': ['1']}]", "source_code": "import java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nimport static java.util.Arrays.*;\n\npublic class Hack {\n    \n    static class Reader {\n        final private int BUFFER_SIZE = 1 << 16;\n        private final byte[] buffer;\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n            if (ptr < buflen) {\n                return true;\n            }else{\n                ptr = 0;\n                try {\n                    buflen = stream.read(buffer);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                if (buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n        private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n        public Reader(){\n            buffer = new byte[BUFFER_SIZE];\n            ptr = 0;\n            buflen = 0;\n            try {\n                stream = System.in;\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        public Reader(String file_name) throws IOException {\n            buffer = new byte[BUFFER_SIZE];\n            ptr = 0;\n            try {\n                stream = new FileInputStream(file_name);\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n        }\n        public String readLine() {\n            if (hasNextByte() && buffer[ptr] == (byte) 10) {\n                ptr++;\n                return \"\";\n            }\n            StringBuilder sb = new StringBuilder();\n            boolean hasMore = true;\n            while (hasMore && hasNextByte()) {\n                int b = buffer[ptr++];\n                if (isPrintableChar(b)) {\n                    sb.appendCodePoint(b);\n                }else if (b == (byte) 10){\n                    hasMore = false;\n                }\n            }\n            return sb.length() == 0? null : sb.toString();\n        }\n        public long readLong() {\n            if (hasNextByte() && buffer[ptr] == (byte) 10) {\n                ptr++;\n                return 0;\n            }\n            long n = 0;\n            boolean minus = false;\n            if (hasNextByte() && buffer[ptr] == (byte) 45) {\n                minus = true;\n                ptr++;\n            }\n            if (hasNextByte() && 48 <= buffer[ptr] && buffer[ptr] <= 57) {\n                n = buffer[ptr] - 48;\n                ptr++;\n            }else if(!hasNextByte()){\n                return 0;\n            }else{\n                throw new NumberFormatException();\n            }\n            while (hasNextByte() && 48 <= buffer[ptr] && buffer[ptr] <= 57) {\n                n *= 10;\n                n += buffer[ptr] - 48;\n                ptr++;\n            }\n            return minus? -n : n;\n        }\n        public int readInt() {\n            long nl = readLong();\n            if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) throw new NumberFormatException();\n            return (int) nl;\n        }\n        public short readShort() {\n            long nl = readLong();\n            if (nl < Short.MIN_VALUE || nl > Short.MAX_VALUE) throw new NumberFormatException();\n            return (short) nl;\n        }\n        public double readDouble() { return Double.parseDouble(readLine());}\n        public float readFloat() { return Float.parseFloat(readLine());}\n        private boolean hasNextByte() {\n            if (ptr < buflen) {\n                return true;\n            }else{\n                ptr = 0;\n                try {\n                    buflen = stream.read(buffer);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                if (buflen <= 0) {\n                    return false;\n                }\n            }"}
{"src_uid": "f256235c0b2815aae85a6f9435c69dac", "id": 99, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1700, "testcases": "[{'input': '11 4 3 9\\r\\n', 'output': ['3']}, {'input': '20 5 2 20\\r\\n', 'output': ['2']}, {'input': '1 1 1 1\\r\\n', 'output': ['1']}, {'input': '26 5 2 18\\r\\n', 'output': ['3']}, {'input': '21 5 1 15\\r\\n', 'output': ['1']}, {'input': '21 5 1 21\\r\\n', 'output': ['1']}, {'input': '21 5 8 14\\r\\n', 'output': ['2']}, {'input': '20 4 1 20\\r\\n', 'output': ['1']}, {'input': '21 5 1 13\\r\\n', 'output': ['2']}, {'input': '21 5 4 15\\r\\n', 'output': ['2']}, {'input': '17 3 1 16\\r\\n', 'output': ['2']}, {'input': '19 5 7 19\\r\\n', 'output': ['2']}, {'input': '18 2 1 13\\r\\n', 'output': ['2']}, {'input': '21 3 6 11\\r\\n', 'output': ['2']}, {'input': '21 5 3 12\\r\\n', 'output': ['2']}, {'input': '21 3 6 10\\r\\n', 'output': ['3']}, {'input': '28 5 4 26\\r\\n', 'output': ['3']}, {'input': '21 5 6 18\\r\\n', 'output': ['2']}, {'input': '21 5 4 21\\r\\n', 'output': ['2']}, {'input': '17 5 6 17\\r\\n', 'output': ['1']}, {'input': '21 5 9 12\\r\\n', 'output': ['2']}, {'input': '21 3 6 7\\r\\n', 'output': ['2']}, {'input': '21 5 7 9\\r\\n', 'output': ['1']}, {'input': '12 4 5 8\\r\\n', 'output': ['1']}, {'input': '21 3 6 8\\r\\n', 'output': ['2']}, {'input': '21 1 5 17\\r\\n', 'output': ['1']}, {'input': '5 5 2 4\\r\\n', 'output': ['1']}, {'input': '18 4 6 17\\r\\n', 'output': ['2']}, {'input': '18 4 6 18\\r\\n', 'output': ['2']}, {'input': '16 4 1 16\\r\\n', 'output': ['1']}, {'input': '20 4 7 14\\r\\n', 'output': ['2']}, {'input': '17 3 12 16\\r\\n', 'output': ['3']}, {'input': '12 4 8 9\\r\\n', 'output': ['2']}, {'input': '11 8 2 7\\r\\n', 'output': ['1']}, {'input': '27 5 4 24\\r\\n', 'output': ['3']}, {'input': '29 5 12 27\\r\\n', 'output': ['3']}, {'input': '30 5 5 29\\r\\n', 'output': ['2']}, {'input': '91 2 15 72\\r\\n', 'output': ['1']}, {'input': '41 1 8 27\\r\\n', 'output': ['1']}, {'input': '26 5 7 21\\r\\n', 'output': ['2']}, {'input': '70 5 31 33\\r\\n', 'output': ['1']}, {'input': '84 9 6 80\\r\\n', 'output': ['3']}, {'input': '79 8 41 64\\r\\n', 'output': ['1']}, {'input': '63 11 23 48\\r\\n', 'output': ['2']}, {'input': '97 9 18 54\\r\\n', 'output': ['2']}, {'input': '75 18 20 23\\r\\n', 'output': ['1']}, {'input': '66 42 43 44\\r\\n', 'output': ['1']}, {'input': '92 54 20 53\\r\\n', 'output': ['1']}, {'input': '32 90 31 32\\r\\n', 'output': ['1']}, {'input': '18 100 6 6\\r\\n', 'output': ['1']}, {'input': '458 12 203 310\\r\\n', 'output': ['2']}, {'input': '149 49 92 129\\r\\n', 'output': ['2']}, {'input': '264 2 9 63\\r\\n', 'output': ['2']}, {'input': '908 6 407 531\\r\\n', 'output': ['3']}, {'input': '410 36 109 191\\r\\n', 'output': ['2']}, {'input': '301 38 97 171\\r\\n', 'output': ['3']}, {'input': '691 27 313 499\\r\\n', 'output': ['3']}, {'input': '939 42 86 827\\r\\n', 'output': ['3']}, {'input': '280 32 64 277\\r\\n', 'output': ['3']}, {'input': '244 25 94 199\\r\\n', 'output': ['3']}, {'input': '134 110 11 52\\r\\n', 'output': ['1']}, {'input': '886 251 61 672\\r\\n', 'output': ['3']}, {'input': '261 686 243 254\\r\\n', 'output': ['1']}, {'input': '162 309 68 98\\r\\n', 'output': ['1']}, {'input': '476 398 77 256\\r\\n', 'output': ['1']}, {'input': '258 224 84 174\\r\\n', 'output': ['1']}, {'input': '357 182 73 247\\r\\n', 'output': ['2']}, {'input': '488 655 290 457\\r\\n', 'output': ['1']}, {'input': '149 334 78 105\\r\\n', 'output': ['1']}, {'input': '488 519 203 211\\r\\n', 'output': ['1']}, {'input': '192293793 2864 5278163 190776899\\r\\n', 'output': ['3']}, {'input': '38644205 2729 9325777 31658388\\r\\n', 'output': ['3']}, {'input': '268836959 6117 166683294 249843000\\r\\n', 'output': ['3']}, {'input': '831447817 8377 549549158 577671489\\r\\n', 'output': ['3']}, {'input': '444819690 3519 48280371 117052060\\r\\n', 'output': ['3']}, {'input': '729584406 8367 456501516 557088265\\r\\n', 'output': ['3']}, {'input': '629207296 3735 112288653 309364482\\r\\n', 'output': ['3']}, {'input': '775589210 6930 266348458 604992807\\r\\n', 'output': ['3']}, {'input': '249414894 1999 34827655 127026562\\r\\n', 'output': ['3']}, {'input': '566377385 227 424126063 478693454\\r\\n', 'output': ['3']}, {'input': '960442940 572344654 77422042 406189391\\r\\n', 'output': ['1']}, {'input': '291071313 592207814 6792338 181083636\\r\\n', 'output': ['1']}, {'input': '191971162 306112722 18212391 188328807\\r\\n', 'output': ['1']}, {'input': '609162932 300548167 21640850 411089609\\r\\n', 'output': ['2']}, {'input': '645010014 34698301 217620581 416292490\\r\\n', 'output': ['3']}, {'input': '51474721 867363452 12231088 43489285\\r\\n', 'output': ['1']}, {'input': '484381636 927869638 57278216 175514226\\r\\n', 'output': ['1']}, {'input': '491259590 529594367 305425951 326414536\\r\\n', 'output': ['1']}, {'input': '733405771 830380469 19971607 389270995\\r\\n', 'output': ['1']}, {'input': '446237720 920085248 296916273 439113596\\r\\n', 'output': ['1']}, {'input': '12 6 3 10\\r\\n', 'output': ['2']}, {'input': '25 2 8 11\\r\\n', 'output': ['2']}, {'input': '17 8 3 15\\r\\n', 'output': ['2']}, {'input': '9 2 4 7\\r\\n', 'output': ['2']}, {'input': '6 7 5 6\\r\\n', 'output': ['1']}, {'input': '13 2 1 6\\r\\n', 'output': ['1']}, {'input': '15 8 10 14\\r\\n', 'output': ['1']}, {'input': '27 2 5 13\\r\\n', 'output': ['2']}, {'input': '14 8 2 12\\r\\n', 'output': ['2']}, {'input': '61 1 10 38\\r\\n', 'output': ['1']}, {'input': '15 6 7 15\\r\\n', 'output': ['1']}, {'input': '100 1 2 15\\r\\n', 'output': ['1']}, {'input': '10 1 4 5\\r\\n', 'output': ['1']}, {'input': '6 3 1 6\\r\\n', 'output': ['1']}, {'input': '4 3 3 4\\r\\n', 'output': ['2']}, {'input': '5 2 1 5\\r\\n', 'output': ['1']}, {'input': '7 3 1 1\\r\\n', 'output': ['1']}, {'input': '7 3 1 2\\r\\n', 'output': ['1']}, {'input': '7 3 1 3\\r\\n', 'output': ['1']}, {'input': '7 3 1 4\\r\\n', 'output': ['2']}, {'input': '7 3 1 5\\r\\n', 'output': ['2']}, {'input': '7 3 1 6\\r\\n', 'output': ['1']}, {'input': '7 3 1 7\\r\\n', 'output': ['1']}, {'input': '7 3 2 2\\r\\n', 'output': ['1']}, {'input': '7 3 2 3\\r\\n', 'output': ['1']}, {'input': '7 3 2 4\\r\\n', 'output': ['2']}, {'input': '7 3 2 5\\r\\n', 'output': ['2']}, {'input': '7 3 2 6\\r\\n', 'output': ['2']}, {'input': '7 3 2 7\\r\\n', 'output': ['2']}, {'input': '7 3 3 3\\r\\n', 'output': ['1']}, {'input': '7 3 3 4\\r\\n', 'output': ['2']}, {'input': '7 3 3 5\\r\\n', 'output': ['2']}, {'input': '7 3 3 6\\r\\n', 'output': ['2']}, {'input': '7 3 3 7\\r\\n', 'output': ['2']}, {'input': '7 3 4 4\\r\\n', 'output': ['1']}, {'input': '7 3 4 5\\r\\n', 'output': ['1']}, {'input': '7 3 4 6\\r\\n', 'output': ['1']}, {'input': '7 3 4 7\\r\\n', 'output': ['1']}, {'input': '7 3 5 5\\r\\n', 'output': ['1']}, {'input': '7 3 5 6\\r\\n', 'output': ['1']}, {'input': '7 3 5 7\\r\\n', 'output': ['2']}, {'input': '7 3 6 6\\r\\n', 'output': ['1']}, {'input': '7 3 6 7\\r\\n', 'output': ['2']}, {'input': '7 3 7 7\\r\\n', 'output': ['1']}, {'input': '8 3 1 1\\r\\n', 'output': ['1']}, {'input': '8 3 1 2\\r\\n', 'output': ['1']}, {'input': '8 3 1 3\\r\\n', 'output': ['1']}, {'input': '8 3 1 4\\r\\n', 'output': ['2']}, {'input': '8 3 1 5\\r\\n', 'output': ['2']}, {'input': '8 3 1 6\\r\\n', 'output': ['1']}, {'input': '8 3 1 7\\r\\n', 'output': ['2']}, {'input': '8 3 1 8\\r\\n', 'output': ['1']}, {'input': '8 3 2 2\\r\\n', 'output': ['1']}, {'input': '8 3 2 3\\r\\n', 'output': ['1']}, {'input': '8 3 2 4\\r\\n', 'output': ['2']}, {'input': '8 3 2 5\\r\\n', 'output': ['2']}, {'input': '8 3 2 6\\r\\n', 'output': ['2']}, {'input': '8 3 2 7\\r\\n', 'output': ['2']}, {'input': '8 3 2 8\\r\\n', 'output': ['2']}, {'input': '8 3 3 3\\r\\n', 'output': ['1']}, {'input': '8 3 3 4\\r\\n', 'output': ['2']}, {'input': '8 3 3 5\\r\\n', 'output': ['2']}, {'input': '8 3 3 6\\r\\n', 'output': ['2']}, {'input': '8 3 3 7\\r\\n', 'output': ['3']}, {'input': '8 3 3 8\\r\\n', 'output': ['2']}, {'input': '8 3 4 4\\r\\n', 'output': ['1']}, {'input': '8 3 4 5\\r\\n', 'output': ['1']}, {'input': '8 3 4 6\\r\\n', 'output': ['1']}, {'input': '8 3 4 7\\r\\n', 'output': ['2']}, {'input': '8 3 4 8\\r\\n', 'output': ['1']}, {'input': '8 3 5 5\\r\\n', 'output': ['1']}, {'input': '8 3 5 6\\r\\n', 'output': ['1']}, {'input': '8 3 5 7\\r\\n', 'output': ['2']}, {'input': '8 3 5 8\\r\\n', 'output': ['2']}, {'input': '8 3 6 6\\r\\n', 'output': ['1']}, {'input': '8 3 6 7\\r\\n', 'output': ['2']}, {'input': '8 3 6 8\\r\\n', 'output': ['2']}, {'input': '8 3 7 7\\r\\n', 'output': ['1']}, {'input': '8 3 7 8\\r\\n', 'output': ['1']}, {'input': '8 3 8 8\\r\\n', 'output': ['1']}]", "source_code": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport static java.util.Arrays.deepToString;\nimport static java.util.Arrays.stream;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class JavaApplication18 {\n\n    public static void main(String[] args) throws Exception {\n        try (InputStreamReader read = new InputStreamReader(System.in);\n                BufferedReader reader = new BufferedReader(read)) {\n            String[] split = reader.readLine().split(\" \");\n            int n = Integer.parseInt(split[0]);\n            int m = Integer.parseInt(split[1]);\n            int a = Integer.parseInt(split[2]);\n            int b = Integer.parseInt(split[3]);\n\n            int left = a - ((a - 1) % m);\n            int right = b - ((b - 1) % m);\n            int x1 = left / m;\n            int x2 = right / m;\n            if (x1 == x2) {\n                System.out.print((right - left) / m + 1);\n            } else {\n                if (x2!= 0) {\n                    System.out.print(((m - left % m) + m * (x2 - 1)));\n                }\n                if (x1!= 0) {\n                    System.out.print(+ \"+\" + (m * (x1 - x2)));\n                }\n            }\n        }\n    }\n}\n"}
{"src_uid": "f256235c0b2815aae85a6f9435c69dac", "id": 99, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1700, "testcases": "[{'input': '11 4 3 9\\r\\n', 'output': ['3']}, {'input': '20 5 2 20\\r\\n', 'output': ['2']}, {'input': '1 1 1 1\\r\\n', 'output': ['1']}, {'input': '26 5 2 18\\r\\n', 'output': ['3']}, {'input': '21 5 1 15\\r\\n', 'output': ['1']}, {'input': '21 5 1 21\\r\\n', 'output': ['1']}, {'input': '21 5 8 14\\r\\n', 'output': ['2']}, {'input': '20 4 1 20\\r\\n', 'output': ['1']}, {'input': '21 5 1 13\\r\\n', 'output': ['2']}, {'input': '21 5 4 15\\r\\n', 'output': ['2']}, {'input': '17 3 1 16\\r\\n', 'output': ['2']}, {'input': '19 5 7 19\\r\\n', 'output': ['2']}, {'input': '18 2 1 13\\r\\n', 'output': ['2']}, {'input': '21 3 6 11\\r\\n', 'output': ['2']}, {'input': '21 5 3 12\\r\\n', 'output': ['2']}, {'input': '21 3 6 10\\r\\n', 'output': ['3']}, {'input': '28 5 4 26\\r\\n', 'output': ['3']}, {'input': '21 5 6 18\\r\\n', 'output': ['2']}, {'input': '21 5 4 21\\r\\n', 'output': ['2']}, {'input': '17 5 6 17\\r\\n', 'output': ['1']}, {'input': '21 5 9 12\\r\\n', 'output': ['2']}, {'input': '21 3 6 7\\r\\n', 'output': ['2']}, {'input': '21 5 7 9\\r\\n', 'output': ['1']}, {'input': '12 4 5 8\\r\\n', 'output': ['1']}, {'input': '21 3 6 8\\r\\n', 'output': ['2']}, {'input': '21 1 5 17\\r\\n', 'output': ['1']}, {'input': '5 5 2 4\\r\\n', 'output': ['1']}, {'input': '18 4 6 17\\r\\n', 'output': ['2']}, {'input': '18 4 6 18\\r\\n', 'output': ['2']}, {'input': '16 4 1 16\\r\\n', 'output': ['1']}, {'input': '20 4 7 14\\r\\n', 'output': ['2']}, {'input': '17 3 12 16\\r\\n', 'output': ['3']}, {'input': '12 4 8 9\\r\\n', 'output': ['2']}, {'input': '11 8 2 7\\r\\n', 'output': ['1']}, {'input': '27 5 4 24\\r\\n', 'output': ['3']}, {'input': '29 5 12 27\\r\\n', 'output': ['3']}, {'input': '30 5 5 29\\r\\n', 'output': ['2']}, {'input': '91 2 15 72\\r\\n', 'output': ['1']}, {'input': '41 1 8 27\\r\\n', 'output': ['1']}, {'input': '26 5 7 21\\r\\n', 'output': ['2']}, {'input': '70 5 31 33\\r\\n', 'output': ['1']}, {'input': '84 9 6 80\\r\\n', 'output': ['3']}, {'input': '79 8 41 64\\r\\n', 'output': ['1']}, {'input': '63 11 23 48\\r\\n', 'output': ['2']}, {'input': '97 9 18 54\\r\\n', 'output': ['2']}, {'input': '75 18 20 23\\r\\n', 'output': ['1']}, {'input': '66 42 43 44\\r\\n', 'output': ['1']}, {'input': '92 54 20 53\\r\\n', 'output': ['1']}, {'input': '32 90 31 32\\r\\n', 'output': ['1']}, {'input': '18 100 6 6\\r\\n', 'output': ['1']}, {'input': '458 12 203 310\\r\\n', 'output': ['2']}, {'input': '149 49 92 129\\r\\n', 'output': ['2']}, {'input': '264 2 9 63\\r\\n', 'output': ['2']}, {'input': '908 6 407 531\\r\\n', 'output': ['3']}, {'input': '410 36 109 191\\r\\n', 'output': ['2']}, {'input': '301 38 97 171\\r\\n', 'output': ['3']}, {'input': '691 27 313 499\\r\\n', 'output': ['3']}, {'input': '939 42 86 827\\r\\n', 'output': ['3']}, {'input': '280 32 64 277\\r\\n', 'output': ['3']}, {'input': '244 25 94 199\\r\\n', 'output': ['3']}, {'input': '134 110 11 52\\r\\n', 'output': ['1']}, {'input': '886 251 61 672\\r\\n', 'output': ['3']}, {'input': '261 686 243 254\\r\\n', 'output': ['1']}, {'input': '162 309 68 98\\r\\n', 'output': ['1']}, {'input': '476 398 77 256\\r\\n', 'output': ['1']}, {'input': '258 224 84 174\\r\\n', 'output': ['1']}, {'input': '357 182 73 247\\r\\n', 'output': ['2']}, {'input': '488 655 290 457\\r\\n', 'output': ['1']}, {'input': '149 334 78 105\\r\\n', 'output': ['1']}, {'input': '488 519 203 211\\r\\n', 'output': ['1']}, {'input': '192293793 2864 5278163 190776899\\r\\n', 'output': ['3']}, {'input': '38644205 2729 9325777 31658388\\r\\n', 'output': ['3']}, {'input': '268836959 6117 166683294 249843000\\r\\n', 'output': ['3']}, {'input': '831447817 8377 549549158 577671489\\r\\n', 'output': ['3']}, {'input': '444819690 3519 48280371 117052060\\r\\n', 'output': ['3']}, {'input': '729584406 8367 456501516 557088265\\r\\n', 'output': ['3']}, {'input': '629207296 3735 112288653 309364482\\r\\n', 'output': ['3']}, {'input': '775589210 6930 266348458 604992807\\r\\n', 'output': ['3']}, {'input': '249414894 1999 34827655 127026562\\r\\n', 'output': ['3']}, {'input': '566377385 227 424126063 478693454\\r\\n', 'output': ['3']}, {'input': '960442940 572344654 77422042 406189391\\r\\n', 'output': ['1']}, {'input': '291071313 592207814 6792338 181083636\\r\\n', 'output': ['1']}, {'input': '191971162 306112722 18212391 188328807\\r\\n', 'output': ['1']}, {'input': '609162932 300548167 21640850 411089609\\r\\n', 'output': ['2']}, {'input': '645010014 34698301 217620581 416292490\\r\\n', 'output': ['3']}, {'input': '51474721 867363452 12231088 43489285\\r\\n', 'output': ['1']}, {'input': '484381636 927869638 57278216 175514226\\r\\n', 'output': ['1']}, {'input': '491259590 529594367 305425951 326414536\\r\\n', 'output': ['1']}, {'input': '733405771 830380469 19971607 389270995\\r\\n', 'output': ['1']}, {'input': '446237720 920085248 296916273 439113596\\r\\n', 'output': ['1']}, {'input': '12 6 3 10\\r\\n', 'output': ['2']}, {'input': '25 2 8 11\\r\\n', 'output': ['2']}, {'input': '17 8 3 15\\r\\n', 'output': ['2']}, {'input': '9 2 4 7\\r\\n', 'output': ['2']}, {'input': '6 7 5 6\\r\\n', 'output': ['1']}, {'input': '13 2 1 6\\r\\n', 'output': ['1']}, {'input': '15 8 10 14\\r\\n', 'output': ['1']}, {'input': '27 2 5 13\\r\\n', 'output': ['2']}, {'input': '14 8 2 12\\r\\n', 'output': ['2']}, {'input': '61 1 10 38\\r\\n', 'output': ['1']}, {'input': '15 6 7 15\\r\\n', 'output': ['1']}, {'input': '100 1 2 15\\r\\n', 'output': ['1']}, {'input': '10 1 4 5\\r\\n', 'output': ['1']}, {'input': '6 3 1 6\\r\\n', 'output': ['1']}, {'input': '4 3 3 4\\r\\n', 'output': ['2']}, {'input': '5 2 1 5\\r\\n', 'output': ['1']}, {'input': '7 3 1 1\\r\\n', 'output': ['1']}, {'input': '7 3 1 2\\r\\n', 'output': ['1']}, {'input': '7 3 1 3\\r\\n', 'output': ['1']}, {'input': '7 3 1 4\\r\\n', 'output': ['2']}, {'input': '7 3 1 5\\r\\n', 'output': ['2']}, {'input': '7 3 1 6\\r\\n', 'output': ['1']}, {'input': '7 3 1 7\\r\\n', 'output': ['1']}, {'input': '7 3 2 2\\r\\n', 'output': ['1']}, {'input': '7 3 2 3\\r\\n', 'output': ['1']}, {'input': '7 3 2 4\\r\\n', 'output': ['2']}, {'input': '7 3 2 5\\r\\n', 'output': ['2']}, {'input': '7 3 2 6\\r\\n', 'output': ['2']}, {'input': '7 3 2 7\\r\\n', 'output': ['2']}, {'input': '7 3 3 3\\r\\n', 'output': ['1']}, {'input': '7 3 3 4\\r\\n', 'output': ['2']}, {'input': '7 3 3 5\\r\\n', 'output': ['2']}, {'input': '7 3 3 6\\r\\n', 'output': ['2']}, {'input': '7 3 3 7\\r\\n', 'output': ['2']}, {'input': '7 3 4 4\\r\\n', 'output': ['1']}, {'input': '7 3 4 5\\r\\n', 'output': ['1']}, {'input': '7 3 4 6\\r\\n', 'output': ['1']}, {'input': '7 3 4 7\\r\\n', 'output': ['1']}, {'input': '7 3 5 5\\r\\n', 'output': ['1']}, {'input': '7 3 5 6\\r\\n', 'output': ['1']}, {'input': '7 3 5 7\\r\\n', 'output': ['2']}, {'input': '7 3 6 6\\r\\n', 'output': ['1']}, {'input': '7 3 6 7\\r\\n', 'output': ['2']}, {'input': '7 3 7 7\\r\\n', 'output': ['1']}, {'input': '8 3 1 1\\r\\n', 'output': ['1']}, {'input': '8 3 1 2\\r\\n', 'output': ['1']}, {'input': '8 3 1 3\\r\\n', 'output': ['1']}, {'input': '8 3 1 4\\r\\n', 'output': ['2']}, {'input': '8 3 1 5\\r\\n', 'output': ['2']}, {'input': '8 3 1 6\\r\\n', 'output': ['1']}, {'input': '8 3 1 7\\r\\n', 'output': ['2']}, {'input': '8 3 1 8\\r\\n', 'output': ['1']}, {'input': '8 3 2 2\\r\\n', 'output': ['1']}, {'input': '8 3 2 3\\r\\n', 'output': ['1']}, {'input': '8 3 2 4\\r\\n', 'output': ['2']}, {'input': '8 3 2 5\\r\\n', 'output': ['2']}, {'input': '8 3 2 6\\r\\n', 'output': ['2']}, {'input': '8 3 2 7\\r\\n', 'output': ['2']}, {'input': '8 3 2 8\\r\\n', 'output': ['2']}, {'input': '8 3 3 3\\r\\n', 'output': ['1']}, {'input': '8 3 3 4\\r\\n', 'output': ['2']}, {'input': '8 3 3 5\\r\\n', 'output': ['2']}, {'input': '8 3 3 6\\r\\n', 'output': ['2']}, {'input': '8 3 3 7\\r\\n', 'output': ['3']}, {'input': '8 3 3 8\\r\\n', 'output': ['2']}, {'input': '8 3 4 4\\r\\n', 'output': ['1']}, {'input': '8 3 4 5\\r\\n', 'output': ['1']}, {'input': '8 3 4 6\\r\\n', 'output': ['1']}, {'input': '8 3 4 7\\r\\n', 'output': ['2']}, {'input': '8 3 4 8\\r\\n', 'output': ['1']}, {'input': '8 3 5 5\\r\\n', 'output': ['1']}, {'input': '8 3 5 6\\r\\n', 'output': ['1']}, {'input': '8 3 5 7\\r\\n', 'output': ['2']}, {'input': '8 3 5 8\\r\\n', 'output': ['2']}, {'input': '8 3 6 6\\r\\n', 'output': ['1']}, {'input': '8 3 6 7\\r\\n', 'output': ['2']}, {'input': '8 3 6 8\\r\\n', 'output': ['2']}, {'input': '8 3 7 7\\r\\n', 'output': ['1']}, {'input': '8 3 7 8\\r\\n', 'output': ['1']}, {'input': '8 3 8 8\\r\\n', 'output': ['1']}]", "source_code": "\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class JavaApplication22 {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int n = input.nextInt(),m = input.nextInt(),a = input.nextInt(),b = input.nextInt(),k = 0, l = 0, temp = 0;\n        if ((b - a) % m == 0){\n            System.out.println(((b - a) / m) + 1);\n        } else{\n            l = (b - a + m) / m;\n            System.out.println(l);\n        }\n    }\n}\n"}
{"src_uid": "f256235c0b2815aae85a6f9435c69dac", "id": 99, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1700, "testcases": "[{'input': '11 4 3 9\\r\\n', 'output': ['3']}, {'input': '20 5 2 20\\r\\n', 'output': ['2']}, {'input': '1 1 1 1\\r\\n', 'output': ['1']}, {'input': '26 5 2 18\\r\\n', 'output': ['3']}, {'input': '21 5 1 15\\r\\n', 'output': ['1']}, {'input': '21 5 1 21\\r\\n', 'output': ['1']}, {'input': '21 5 8 14\\r\\n', 'output': ['2']}, {'input': '20 4 1 20\\r\\n', 'output': ['1']}, {'input': '21 5 1 13\\r\\n', 'output': ['2']}, {'input': '21 5 4 15\\r\\n', 'output': ['2']}, {'input': '17 3 1 16\\r\\n', 'output': ['2']}, {'input': '19 5 7 19\\r\\n', 'output': ['2']}, {'input': '18 2 1 13\\r\\n', 'output': ['2']}, {'input': '21 3 6 11\\r\\n', 'output': ['2']}, {'input': '21 5 3 12\\r\\n', 'output': ['2']}, {'input': '21 3 6 10\\r\\n', 'output': ['3']}, {'input': '28 5 4 26\\r\\n', 'output': ['3']}, {'input': '21 5 6 18\\r\\n', 'output': ['2']}, {'input': '21 5 4 21\\r\\n', 'output': ['2']}, {'input': '17 5 6 17\\r\\n', 'output': ['1']}, {'input': '21 5 9 12\\r\\n', 'output': ['2']}, {'input': '21 3 6 7\\r\\n', 'output': ['2']}, {'input': '21 5 7 9\\r\\n', 'output': ['1']}, {'input': '12 4 5 8\\r\\n', 'output': ['1']}, {'input': '21 3 6 8\\r\\n', 'output': ['2']}, {'input': '21 1 5 17\\r\\n', 'output': ['1']}, {'input': '5 5 2 4\\r\\n', 'output': ['1']}, {'input': '18 4 6 17\\r\\n', 'output': ['2']}, {'input': '18 4 6 18\\r\\n', 'output': ['2']}, {'input': '16 4 1 16\\r\\n', 'output': ['1']}, {'input': '20 4 7 14\\r\\n', 'output': ['2']}, {'input': '17 3 12 16\\r\\n', 'output': ['3']}, {'input': '12 4 8 9\\r\\n', 'output': ['2']}, {'input': '11 8 2 7\\r\\n', 'output': ['1']}, {'input': '27 5 4 24\\r\\n', 'output': ['3']}, {'input': '29 5 12 27\\r\\n', 'output': ['3']}, {'input': '30 5 5 29\\r\\n', 'output': ['2']}, {'input': '91 2 15 72\\r\\n', 'output': ['1']}, {'input': '41 1 8 27\\r\\n', 'output': ['1']}, {'input': '26 5 7 21\\r\\n', 'output': ['2']}, {'input': '70 5 31 33\\r\\n', 'output': ['1']}, {'input': '84 9 6 80\\r\\n', 'output': ['3']}, {'input': '79 8 41 64\\r\\n', 'output': ['1']}, {'input': '63 11 23 48\\r\\n', 'output': ['2']}, {'input': '97 9 18 54\\r\\n', 'output': ['2']}, {'input': '75 18 20 23\\r\\n', 'output': ['1']}, {'input': '66 42 43 44\\r\\n', 'output': ['1']}, {'input': '92 54 20 53\\r\\n', 'output': ['1']}, {'input': '32 90 31 32\\r\\n', 'output': ['1']}, {'input': '18 100 6 6\\r\\n', 'output': ['1']}, {'input': '458 12 203 310\\r\\n', 'output': ['2']}, {'input': '149 49 92 129\\r\\n', 'output': ['2']}, {'input': '264 2 9 63\\r\\n', 'output': ['2']}, {'input': '908 6 407 531\\r\\n', 'output': ['3']}, {'input': '410 36 109 191\\r\\n', 'output': ['2']}, {'input': '301 38 97 171\\r\\n', 'output': ['3']}, {'input': '691 27 313 499\\r\\n', 'output': ['3']}, {'input': '939 42 86 827\\r\\n', 'output': ['3']}, {'input': '280 32 64 277\\r\\n', 'output': ['3']}, {'input': '244 25 94 199\\r\\n', 'output': ['3']}, {'input': '134 110 11 52\\r\\n', 'output': ['1']}, {'input': '886 251 61 672\\r\\n', 'output': ['3']}, {'input': '261 686 243 254\\r\\n', 'output': ['1']}, {'input': '162 309 68 98\\r\\n', 'output': ['1']}, {'input': '476 398 77 256\\r\\n', 'output': ['1']}, {'input': '258 224 84 174\\r\\n', 'output': ['1']}, {'input': '357 182 73 247\\r\\n', 'output': ['2']}, {'input': '488 655 290 457\\r\\n', 'output': ['1']}, {'input': '149 334 78 105\\r\\n', 'output': ['1']}, {'input': '488 519 203 211\\r\\n', 'output': ['1']}, {'input': '192293793 2864 5278163 190776899\\r\\n', 'output': ['3']}, {'input': '38644205 2729 9325777 31658388\\r\\n', 'output': ['3']}, {'input': '268836959 6117 166683294 249843000\\r\\n', 'output': ['3']}, {'input': '831447817 8377 549549158 577671489\\r\\n', 'output': ['3']}, {'input': '444819690 3519 48280371 117052060\\r\\n', 'output': ['3']}, {'input': '729584406 8367 456501516 557088265\\r\\n', 'output': ['3']}, {'input': '629207296 3735 112288653 309364482\\r\\n', 'output': ['3']}, {'input': '775589210 6930 266348458 604992807\\r\\n', 'output': ['3']}, {'input': '249414894 1999 34827655 127026562\\r\\n', 'output': ['3']}, {'input': '566377385 227 424126063 478693454\\r\\n', 'output': ['3']}, {'input': '960442940 572344654 77422042 406189391\\r\\n', 'output': ['1']}, {'input': '291071313 592207814 6792338 181083636\\r\\n', 'output': ['1']}, {'input': '191971162 306112722 18212391 188328807\\r\\n', 'output': ['1']}, {'input': '609162932 300548167 21640850 411089609\\r\\n', 'output': ['2']}, {'input': '645010014 34698301 217620581 416292490\\r\\n', 'output': ['3']}, {'input': '51474721 867363452 12231088 43489285\\r\\n', 'output': ['1']}, {'input': '484381636 927869638 57278216 175514226\\r\\n', 'output': ['1']}, {'input': '491259590 529594367 305425951 326414536\\r\\n', 'output': ['1']}, {'input': '733405771 830380469 19971607 389270995\\r\\n', 'output': ['1']}, {'input': '446237720 920085248 296916273 439113596\\r\\n', 'output': ['1']}, {'input': '12 6 3 10\\r\\n', 'output': ['2']}, {'input': '25 2 8 11\\r\\n', 'output': ['2']}, {'input': '17 8 3 15\\r\\n', 'output': ['2']}, {'input': '9 2 4 7\\r\\n', 'output': ['2']}, {'input': '6 7 5 6\\r\\n', 'output': ['1']}, {'input': '13 2 1 6\\r\\n', 'output': ['1']}, {'input': '15 8 10 14\\r\\n', 'output': ['1']}, {'input': '27 2 5 13\\r\\n', 'output': ['2']}, {'input': '14 8 2 12\\r\\n', 'output': ['2']}, {'input': '61 1 10 38\\r\\n', 'output': ['1']}, {'input': '15 6 7 15\\r\\n', 'output': ['1']}, {'input': '100 1 2 15\\r\\n', 'output': ['1']}, {'input': '10 1 4 5\\r\\n', 'output': ['1']}, {'input': '6 3 1 6\\r\\n', 'output': ['1']}, {'input': '4 3 3 4\\r\\n', 'output': ['2']}, {'input': '5 2 1 5\\r\\n', 'output': ['1']}, {'input': '7 3 1 1\\r\\n', 'output': ['1']}, {'input': '7 3 1 2\\r\\n', 'output': ['1']}, {'input': '7 3 1 3\\r\\n', 'output': ['1']}, {'input': '7 3 1 4\\r\\n', 'output': ['2']}, {'input': '7 3 1 5\\r\\n', 'output': ['2']}, {'input': '7 3 1 6\\r\\n', 'output': ['1']}, {'input': '7 3 1 7\\r\\n', 'output': ['1']}, {'input': '7 3 2 2\\r\\n', 'output': ['1']}, {'input': '7 3 2 3\\r\\n', 'output': ['1']}, {'input': '7 3 2 4\\r\\n', 'output': ['2']}, {'input': '7 3 2 5\\r\\n', 'output': ['2']}, {'input': '7 3 2 6\\r\\n', 'output': ['2']}, {'input': '7 3 2 7\\r\\n', 'output': ['2']}, {'input': '7 3 3 3\\r\\n', 'output': ['1']}, {'input': '7 3 3 4\\r\\n', 'output': ['2']}, {'input': '7 3 3 5\\r\\n', 'output': ['2']}, {'input': '7 3 3 6\\r\\n', 'output': ['2']}, {'input': '7 3 3 7\\r\\n', 'output': ['2']}, {'input': '7 3 4 4\\r\\n', 'output': ['1']}, {'input': '7 3 4 5\\r\\n', 'output': ['1']}, {'input': '7 3 4 6\\r\\n', 'output': ['1']}, {'input': '7 3 4 7\\r\\n', 'output': ['1']}, {'input': '7 3 5 5\\r\\n', 'output': ['1']}, {'input': '7 3 5 6\\r\\n', 'output': ['1']}, {'input': '7 3 5 7\\r\\n', 'output': ['2']}, {'input': '7 3 6 6\\r\\n', 'output': ['1']}, {'input': '7 3 6 7\\r\\n', 'output': ['2']}, {'input': '7 3 7 7\\r\\n', 'output': ['1']}, {'input': '8 3 1 1\\r\\n', 'output': ['1']}, {'input': '8 3 1 2\\r\\n', 'output': ['1']}, {'input': '8 3 1 3\\r\\n', 'output': ['1']}, {'input': '8 3 1 4\\r\\n', 'output': ['2']}, {'input': '8 3 1 5\\r\\n', 'output': ['2']}, {'input': '8 3 1 6\\r\\n', 'output': ['1']}, {'input': '8 3 1 7\\r\\n', 'output': ['2']}, {'input': '8 3 1 8\\r\\n', 'output': ['1']}, {'input': '8 3 2 2\\r\\n', 'output': ['1']}, {'input': '8 3 2 3\\r\\n', 'output': ['1']}, {'input': '8 3 2 4\\r\\n', 'output': ['2']}, {'input': '8 3 2 5\\r\\n', 'output': ['2']}, {'input': '8 3 2 6\\r\\n', 'output': ['2']}, {'input': '8 3 2 7\\r\\n', 'output': ['2']}, {'input': '8 3 2 8\\r\\n', 'output': ['2']}, {'input': '8 3 3 3\\r\\n', 'output': ['1']}, {'input': '8 3 3 4\\r\\n', 'output': ['2']}, {'input': '8 3 3 5\\r\\n', 'output': ['2']}, {'input': '8 3 3 6\\r\\n', 'output': ['2']}, {'input': '8 3 3 7\\r\\n', 'output': ['3']}, {'input': '8 3 3 8\\r\\n', 'output': ['2']}, {'input': '8 3 4 4\\r\\n', 'output': ['1']}, {'input': '8 3 4 5\\r\\n', 'output': ['1']}, {'input': '8 3 4 6\\r\\n', 'output': ['1']}, {'input': '8 3 4 7\\r\\n', 'output': ['2']}, {'input': '8 3 4 8\\r\\n', 'output': ['1']}, {'input': '8 3 5 5\\r\\n', 'output': ['1']}, {'input': '8 3 5 6\\r\\n', 'output': ['1']}, {'input': '8 3 5 7\\r\\n', 'output': ['2']}, {'input': '8 3 5 8\\r\\n', 'output': ['2']}, {'input': '8 3 6 6\\r\\n', 'output': ['1']}, {'input': '8 3 6 7\\r\\n', 'output': ['2']}, {'input': '8 3 6 8\\r\\n', 'output': ['2']}, {'input': '8 3 7 7\\r\\n', 'output': ['1']}, {'input': '8 3 7 8\\r\\n', 'output': ['1']}, {'input': '8 3 8 8\\r\\n', 'output': ['1']}]", "source_code": "\nimport java.util.*;\n\npublic class Problem_327B {\n\n    static int countDiv(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i = i*2) {\n            count++;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        int count = 0;\n        int index = 0;\n        int min = 99999999;\n        while (index <= n) {\n            count = 0;\n            int start = index;\n            int temp = 0;\n            while (count < m) {\n                count++;\n                if (start == a && temp == 0) {\n                    temp++;\n                    start++;\n                } else if (start == b && temp == 0) {\n                    temp++;\n                } else if (start > b && temp == 0) {\n                    temp++;\n                }\n                if (start > n) {\n                    break;\n                }\n                start++;\n            }\n            count = count - m + 1;\n            if (count < 0) {\n                count = 0;\n            }\n            index = index + m;\n            if (count < min) {\n                min = count;\n            }\n        }\n        System.out.println(min + 1);\n    }\n}"}
{"src_uid": "d8d449d0fccf755822548ddf9d74b9ab", "id": 100, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '4 4\\r\\n1 3\\r\\n1 2 3\\r\\n1 4 1\\r\\n2 4 1\\r\\n2 3 5\\r\\n2 7\\r\\n7 2\\r\\n1 2\\r\\n7 7\\r\\n', 'output': ['9\\r\\n']}, {'input': '3 3\\r\\n1 3\\r\\n1 2 2\\r\\n1 3 3\\r\\n3 2 1\\r\\n2 7\\r\\n2 7\\r\\n3 6\\r\\n', 'output': ['14\\r\\n']}, {'input': '3 1\\r\\n1 3\\r\\n1 2 2\\r\\n2 7\\r\\n2 7\\r\\n3 6\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 2\\r\\n3 3\\r\\n1 2 2\\r\\n1 3 3\\r\\n2 7\\r\\n2 7\\r\\n3 7\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 2\\r\\n1 2\\r\\n1 2 3\\r\\n1 2 2\\r\\n2 7\\r\\n3 2\\r\\n', 'output': ['7\\r\\n']}, {'input': '1 0\\r\\n1 1\\r\\n74 47\\r\\n', 'output': ['0\\r\\n']}, {'input': '5 5\\r\\n1 3\\r\\n1 3 3\\r\\n5 1 6\\r\\n4 3 8\\r\\n1 3 3\\r\\n5 2 4\\r\\n1 2\\r\\n4 1\\r\\n2 5\\r\\n5 2\\r\\n1 2\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 4\\r\\n3 4\\r\\n6 2 7\\r\\n6 1 4\\r\\n4 3 5\\r\\n3 6 4\\r\\n1 6\\r\\n7 3\\r\\n3 6\\r\\n6 5\\r\\n3 7\\r\\n4 4\\r\\n1 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 5\\r\\n4 5\\r\\n1 4 8\\r\\n4 2 4\\r\\n4 1 3\\r\\n3 1 9\\r\\n4 5 4\\r\\n2 7\\r\\n2 7\\r\\n5 1\\r\\n6 3\\r\\n3 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '5 5\\r\\n5 4\\r\\n2 4 10\\r\\n2 4 7\\r\\n3 1 7\\r\\n2 4 2\\r\\n5 3 9\\r\\n6 17\\r\\n2 4\\r\\n3 12\\r\\n7 18\\r\\n2 5\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4 7\\r\\n3 4\\r\\n2 3 5\\r\\n3 2 9\\r\\n4 1 9\\r\\n3 2 1\\r\\n3 1 2\\r\\n2 3 6\\r\\n1 2 8\\r\\n2 2\\r\\n5 3\\r\\n2 1\\r\\n1 5\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 14\\r\\n7 5\\r\\n1 3 15\\r\\n2 1 10\\r\\n1 3 5\\r\\n2 4 9\\r\\n5 4 19\\r\\n1 3 11\\r\\n5 1 1\\r\\n2 4 5\\r\\n2 3 11\\r\\n3 2 10\\r\\n3 4 18\\r\\n5 1 18\\r\\n6 2 5\\r\\n5 6 2\\r\\n3 6\\r\\n6 7\\r\\n9 1\\r\\n3 6\\r\\n1 1\\r\\n9 4\\r\\n9 8\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 15\\r\\n5 5\\r\\n3 4 6\\r\\n7 4 3\\r\\n7 2 8\\r\\n2 5 2\\r\\n7 2 8\\r\\n5 2 9\\r\\n3 1 7\\r\\n1 2 4\\r\\n7 1 8\\r\\n7 5 7\\r\\n2 4 2\\r\\n4 3 9\\r\\n7 4 2\\r\\n5 4 8\\r\\n7 2 8\\r\\n15 4\\r\\n18 18\\r\\n6 8\\r\\n16 5\\r\\n11 1\\r\\n5 3\\r\\n18 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '8 20\\r\\n8 4\\r\\n6 3 1\\r\\n3 4 4\\r\\n5 2 2\\r\\n3 6 3\\r\\n5 8 7\\r\\n6 2 7\\r\\n8 6 4\\r\\n6 4 5\\r\\n4 2 5\\r\\n5 3 3\\r\\n5 7 3\\r\\n8 1 6\\r\\n2 4 3\\r\\n6 8 5\\r\\n1 8 6\\r\\n8 2 7\\r\\n8 2 3\\r\\n1 6 7\\r\\n8 7 3\\r\\n6 3 6\\r\\n2 2\\r\\n5 9\\r\\n1 9\\r\\n4 7\\r\\n1 8\\r\\n4 8\\r\\n9 7\\r\\n9 3\\r\\n', 'output': ['3\\r\\n']}, {'input': '8 20\\r\\n8 2\\r\\n1 7 5\\r\\n3 2 3\\r\\n2 7 6\\r\\n6 5 6\\r\\n4 8 5\\r\\n7 8 4\\r\\n1 6 2\\r\\n7 4 3\\r\\n4 3 1\\r\\n6 7 5\\r\\n4 2 4\\r\\n2 8 7\\r\\n6 2 2\\r\\n2 3 4\\r\\n3 7 3\\r\\n7 8 4\\r\\n5 4 2\\r\\n7 1 1\\r\\n5 7 3\\r\\n4 3 7\\r\\n4 4\\r\\n2 7\\r\\n3 5\\r\\n3 1\\r\\n3 5\\r\\n1 5\\r\\n11 4\\r\\n10 5\\r\\n', 'output': ['5\\r\\n']}, {'input': '9 20\\r\\n5 1\\r\\n8 9 3\\r\\n1 8 6\\r\\n5 6 3\\r\\n2 1 4\\r\\n7 1 6\\r\\n1 4 4\\r\\n3 2 4\\r\\n5 6 4\\r\\n3 9 6\\r\\n6 2 3\\r\\n9 1 7\\r\\n1 7 1\\r\\n1 3 3\\r\\n8 4 7\\r\\n7 1 7\\r\\n6 9 3\\r\\n5 8 3\\r\\n9 4 5\\r\\n6 9 1\\r\\n6 2 6\\r\\n1 7\\r\\n1 3\\r\\n6 1\\r\\n1 2\\r\\n6 1\\r\\n2 2\\r\\n4 7\\r\\n4 5\\r\\n4 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 21\\r\\n9 5\\r\\n5 2 6\\r\\n1 9 7\\r\\n6 2 7\\r\\n8 10 2\\r\\n7 2 1\\r\\n6 9 6\\r\\n10 9 4\\r\\n2 10 2\\r\\n10 8 4\\r\\n10 1 7\\r\\n9 1 7\\r\\n1 8 5\\r\\n10 9 7\\r\\n7 5 3\\r\\n2 10 6\\r\\n4 7 3\\r\\n10 5 6\\r\\n5 10 4\\r\\n6 9 2\\r\\n2 3 6\\r\\n1 9 3\\r\\n10 6\\r\\n7 12\\r\\n13 3\\r\\n17 4\\r\\n18 17\\r\\n1 9\\r\\n16 16\\r\\n12 13\\r\\n1 10\\r\\n6 15\\r\\n', 'output': ['-1\\r\\n']}, {'input': '14 20\\r\\n7 2\\r\\n12 2 17\\r\\n13 3 8\\r\\n6 8 3\\r\\n14 4 16\\r\\n13 5 17\\r\\n7 14 7\\r\\n11 10 6\\r\\n12 4 16\\r\\n6 11 7\\r\\n2 13 12\\r\\n13 2 18\\r\\n2 10 12\\r\\n13 12 1\\r\\n12 5 4\\r\\n9 4 16\\r\\n7 6 7\\r\\n2 3 15\\r\\n4 14 1\\r\\n13 5 3\\r\\n10 9 3\\r\\n4 6\\r\\n4 5\\r\\n5 3\\r\\n2 6\\r\\n2 4\\r\\n1 2\\r\\n4 7\\r\\n2 2\\r\\n6 1\\r\\n1 1\\r\\n6 5\\r\\n7 7\\r\\n3 4\\r\\n2 6\\r\\n', 'output': ['-1\\r\\n']}, {'input': '15 29\\r\\n6 6\\r\\n7 12 7\\r\\n11 3 7\\r\\n4 5 18\\r\\n13 9 18\\r\\n3 8 12\\r\\n6 1 7\\r\\n4 1 4\\r\\n12 5 18\\r\\n10 8 15\\r\\n2 10 1\\r\\n9 7 11\\r\\n2 4 10\\r\\n2 14 3\\r\\n15 12 14\\r\\n1 13 8\\r\\n11 4 1\\r\\n15 11 2\\r\\n1 5 9\\r\\n5 2 5\\r\\n9 10 5\\r\\n15 2 17\\r\\n11 5 1\\r\\n14 15 14\\r\\n10 1 16\\r\\n15 9 2\\r\\n13 15 6\\r\\n13 5 1\\r\\n7 12 6\\r\\n12 5 13\\r\\n8 26\\r\\n35 17\\r\\n16 14\\r\\n12 13\\r\\n21 1\\r\\n31 9\\r\\n7 24\\r\\n11 31\\r\\n29 5\\r\\n16 22\\r\\n29 7\\r\\n30 20\\r\\n36 3\\r\\n26 22\\r\\n37 6\\r\\n', 'output': ['0\\r\\n']}, {'input': '5 0\\r\\n2 4\\r\\n1 2\\r\\n6 9\\r\\n4 585\\r\\n6 9\\r\\n7 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 8\\r\\n1 3\\r\\n1 2 1\\r\\n1 3 3\\r\\n1 5 1\\r\\n1 4 2\\r\\n5 4 3\\r\\n3 5 2\\r\\n2 3 8\\r\\n1 3 2\\r\\n2 7\\r\\n10 3\\r\\n4 7\\r\\n2 1\\r\\n1 1\\r\\n', 'output': ['7\\r\\n']}, {'input': '5 7\\r\\n1 3\\r\\n1 2 1\\r\\n1 3 3\\r\\n1 5 1\\r\\n1 4 2\\r\\n5 4 3\\r\\n3 5 2\\r\\n2 3 8\\r\\n2 7\\r\\n10 3\\r\\n4 7\\r\\n2 1\\r\\n1 1\\r\\n', 'output': ['10\\r\\n']}, {'input': '7 5\\r\\n6 7\\r\\n1 3 1000000000\\r\\n2 7 999999999\\r\\n5 7 123456789\\r\\n1 5 148879589\\r\\n5 4 1000000000\\r\\n1000000000 1000000000\\r\\n1000000000 1000000000\\r\\n999999999 145785965\\r\\n1000000000 1000000000\\r\\n1000000000 1\\r\\n123456789 123568591\\r\\n1000000000 1000000000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 8\\r\\n6 7\\r\\n1 3 1000000000\\r\\n1 6 1000000000\\r\\n1 2 1000000000\\r\\n6 2 1000000000\\r\\n2 5 1000000000\\r\\n5 7 1000000000\\r\\n4 7 1\\r\\n3 4 1000000000\\r\\n1000000000 100000000\\r\\n999999999 1\\r\\n1000000000 10000000\\r\\n1000000000 10000000\\r\\n1000000000 128\\r\\n1000000000 10000000\\r\\n1000000000 1000000000\\r\\n', 'output': ['130000000\\r\\n']}, {'input': '7 8\\r\\n6 7\\r\\n1 3 1000000000\\r\\n1 6 1000000000\\r\\n1 2 1000000000\\r\\n6 2 1000000000\\r\\n2 5 1000000000\\r\\n5 7 1000000000\\r\\n4 7 1\\r\\n3 4 999999999\\r\\n1000000000 100000000\\r\\n999999999 1\\r\\n999999999 10000000\\r\\n1000000000 10000000\\r\\n1000000000 128\\r\\n1000000000 10000000\\r\\n1000000000 1000000000\\r\\n', 'output': ['130000000\\r\\n']}, {'input': '7 8\\r\\n1 7\\r\\n1 3 1000000000\\r\\n1 6 1000000000\\r\\n1 2 1000000000\\r\\n6 2 1000000000\\r\\n2 5 1000000000\\r\\n5 7 1000000000\\r\\n4 7 1\\r\\n3 4 999999999\\r\\n1000000000 100000000\\r\\n999999999 1\\r\\n999999999 10000000\\r\\n1000000000 10000000\\r\\n1000000000 128\\r\\n1000000000 10000000\\r\\n1000000000 1000000000\\r\\n', 'output': ['120000000\\r\\n']}, {'input': '2 1\\r\\n1 2\\r\\n1 2 1\\r\\n1 999999998\\r\\n1 999999998\\r\\n', 'output': ['999999998\\r\\n']}, {'input': '3 3\\r\\n1 3\\r\\n2 1 1\\r\\n1 2 1000000000\\r\\n1 2 1000000000\\r\\n1000000000 1000000000\\r\\n1000000000 1000000000\\r\\n1000000000 1000000000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 3\\r\\n1 2\\r\\n2 1 1\\r\\n1 2 1000000000\\r\\n1 2 1000000000\\r\\n10000000 1000000000\\r\\n10000000 1000000000\\r\\n10000000 1000000000\\r\\n', 'output': ['1000000000\\r\\n']}, {'input': '3 3\\r\\n1 2\\r\\n2 1 1000000000\\r\\n1 2 1000000000\\r\\n1 2 1000000000\\r\\n10000000 1000000000\\r\\n10000000 1000000000\\r\\n10000000 1000000000\\r\\n', 'output': ['-1\\r\\n']}]", "source_code": "import java.util.Scanner;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author Administrator\n */\npublic class JavaApplication6 {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        int n = reader.nextInt(), m = reader.nextInt(), x = reader.nextInt(), y = reader.nextInt(), t = 0, a, b, max = 0, max2 = 0;\n        long min = Long.MAX_VALUE, ans = Long.MAX_VALUE, price[] = new long [n], temp;\n        for (int i = 0; i < n; ++i) {\n            price[i] = reader.nextInt();\n        }\n        for (int i = 0; i < m; ++i) {\n            a = reader.nextInt();\n            b = reader.nextInt();\n            t = reader.nextInt();\n            if (a == b) {\n                max2 = -1;\n            } else if (a > b) {\n                temp = b;\n                b = a;\n                a = temp;\n            }\n            if (max <= t) {\n                max = t;\n                max2 = a;\n            }\n            for (int j = 0; j < n; ++j) {\n                if (j!= a && j!= b) {\n                    if (min > price[j]) {\n                        min = price[j];\n                    }\n                }\n            }\n            min = Long.MAX_VALUE;\n            if (max >= t) {\n                if (price[max2 - 1] + price[b - 1] < ans) {\n                    ans = price[max2 - 1] + price[b - 1];\n                }\n            }\n            max = 0;\n        }\n        if (ans > Long.MAX_VALUE - price[x - 1] || ans > Long.MAX_VALUE - price[y - 1]) {\n            System.out.println(-1);\n        } else {\n            ans = price[x - 1] + ans;\n            System.out.println(ans);\n        }\n    }\n}\n"}
{"src_uid": "d8d449d0fccf755822548ddf9d74b9ab", "id": 100, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '4 4\\r\\n1 3\\r\\n1 2 3\\r\\n1 4 1\\r\\n2 4 1\\r\\n2 3 5\\r\\n2 7\\r\\n7 2\\r\\n1 2\\r\\n7 7\\r\\n', 'output': ['9\\r\\n']}, {'input': '3 3\\r\\n1 3\\r\\n1 2 2\\r\\n1 3 3\\r\\n3 2 1\\r\\n2 7\\r\\n2 7\\r\\n3 6\\r\\n', 'output': ['14\\r\\n']}, {'input': '3 1\\r\\n1 3\\r\\n1 2 2\\r\\n2 7\\r\\n2 7\\r\\n3 6\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 2\\r\\n3 3\\r\\n1 2 2\\r\\n1 3 3\\r\\n2 7\\r\\n2 7\\r\\n3 7\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 2\\r\\n1 2\\r\\n1 2 3\\r\\n1 2 2\\r\\n2 7\\r\\n3 2\\r\\n', 'output': ['7\\r\\n']}, {'input': '1 0\\r\\n1 1\\r\\n74 47\\r\\n', 'output': ['0\\r\\n']}, {'input': '5 5\\r\\n1 3\\r\\n1 3 3\\r\\n5 1 6\\r\\n4 3 8\\r\\n1 3 3\\r\\n5 2 4\\r\\n1 2\\r\\n4 1\\r\\n2 5\\r\\n5 2\\r\\n1 2\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 4\\r\\n3 4\\r\\n6 2 7\\r\\n6 1 4\\r\\n4 3 5\\r\\n3 6 4\\r\\n1 6\\r\\n7 3\\r\\n3 6\\r\\n6 5\\r\\n3 7\\r\\n4 4\\r\\n1 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 5\\r\\n4 5\\r\\n1 4 8\\r\\n4 2 4\\r\\n4 1 3\\r\\n3 1 9\\r\\n4 5 4\\r\\n2 7\\r\\n2 7\\r\\n5 1\\r\\n6 3\\r\\n3 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '5 5\\r\\n5 4\\r\\n2 4 10\\r\\n2 4 7\\r\\n3 1 7\\r\\n2 4 2\\r\\n5 3 9\\r\\n6 17\\r\\n2 4\\r\\n3 12\\r\\n7 18\\r\\n2 5\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4 7\\r\\n3 4\\r\\n2 3 5\\r\\n3 2 9\\r\\n4 1 9\\r\\n3 2 1\\r\\n3 1 2\\r\\n2 3 6\\r\\n1 2 8\\r\\n2 2\\r\\n5 3\\r\\n2 1\\r\\n1 5\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 14\\r\\n7 5\\r\\n1 3 15\\r\\n2 1 10\\r\\n1 3 5\\r\\n2 4 9\\r\\n5 4 19\\r\\n1 3 11\\r\\n5 1 1\\r\\n2 4 5\\r\\n2 3 11\\r\\n3 2 10\\r\\n3 4 18\\r\\n5 1 18\\r\\n6 2 5\\r\\n5 6 2\\r\\n3 6\\r\\n6 7\\r\\n9 1\\r\\n3 6\\r\\n1 1\\r\\n9 4\\r\\n9 8\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 15\\r\\n5 5\\r\\n3 4 6\\r\\n7 4 3\\r\\n7 2 8\\r\\n2 5 2\\r\\n7 2 8\\r\\n5 2 9\\r\\n3 1 7\\r\\n1 2 4\\r\\n7 1 8\\r\\n7 5 7\\r\\n2 4 2\\r\\n4 3 9\\r\\n7 4 2\\r\\n5 4 8\\r\\n7 2 8\\r\\n15 4\\r\\n18 18\\r\\n6 8\\r\\n16 5\\r\\n11 1\\r\\n5 3\\r\\n18 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '8 20\\r\\n8 4\\r\\n6 3 1\\r\\n3 4 4\\r\\n5 2 2\\r\\n3 6 3\\r\\n5 8 7\\r\\n6 2 7\\r\\n8 6 4\\r\\n6 4 5\\r\\n4 2 5\\r\\n5 3 3\\r\\n5 7 3\\r\\n8 1 6\\r\\n2 4 3\\r\\n6 8 5\\r\\n1 8 6\\r\\n8 2 7\\r\\n8 2 3\\r\\n1 6 7\\r\\n8 7 3\\r\\n6 3 6\\r\\n2 2\\r\\n5 9\\r\\n1 9\\r\\n4 7\\r\\n1 8\\r\\n4 8\\r\\n9 7\\r\\n9 3\\r\\n', 'output': ['3\\r\\n']}, {'input': '8 20\\r\\n8 2\\r\\n1 7 5\\r\\n3 2 3\\r\\n2 7 6\\r\\n6 5 6\\r\\n4 8 5\\r\\n7 8 4\\r\\n1 6 2\\r\\n7 4 3\\r\\n4 3 1\\r\\n6 7 5\\r\\n4 2 4\\r\\n2 8 7\\r\\n6 2 2\\r\\n2 3 4\\r\\n3 7 3\\r\\n7 8 4\\r\\n5 4 2\\r\\n7 1 1\\r\\n5 7 3\\r\\n4 3 7\\r\\n4 4\\r\\n2 7\\r\\n3 5\\r\\n3 1\\r\\n3 5\\r\\n1 5\\r\\n11 4\\r\\n10 5\\r\\n', 'output': ['5\\r\\n']}, {'input': '9 20\\r\\n5 1\\r\\n8 9 3\\r\\n1 8 6\\r\\n5 6 3\\r\\n2 1 4\\r\\n7 1 6\\r\\n1 4 4\\r\\n3 2 4\\r\\n5 6 4\\r\\n3 9 6\\r\\n6 2 3\\r\\n9 1 7\\r\\n1 7 1\\r\\n1 3 3\\r\\n8 4 7\\r\\n7 1 7\\r\\n6 9 3\\r\\n5 8 3\\r\\n9 4 5\\r\\n6 9 1\\r\\n6 2 6\\r\\n1 7\\r\\n1 3\\r\\n6 1\\r\\n1 2\\r\\n6 1\\r\\n2 2\\r\\n4 7\\r\\n4 5\\r\\n4 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 21\\r\\n9 5\\r\\n5 2 6\\r\\n1 9 7\\r\\n6 2 7\\r\\n8 10 2\\r\\n7 2 1\\r\\n6 9 6\\r\\n10 9 4\\r\\n2 10 2\\r\\n10 8 4\\r\\n10 1 7\\r\\n9 1 7\\r\\n1 8 5\\r\\n10 9 7\\r\\n7 5 3\\r\\n2 10 6\\r\\n4 7 3\\r\\n10 5 6\\r\\n5 10 4\\r\\n6 9 2\\r\\n2 3 6\\r\\n1 9 3\\r\\n10 6\\r\\n7 12\\r\\n13 3\\r\\n17 4\\r\\n18 17\\r\\n1 9\\r\\n16 16\\r\\n12 13\\r\\n1 10\\r\\n6 15\\r\\n', 'output': ['-1\\r\\n']}, {'input': '14 20\\r\\n7 2\\r\\n12 2 17\\r\\n13 3 8\\r\\n6 8 3\\r\\n14 4 16\\r\\n13 5 17\\r\\n7 14 7\\r\\n11 10 6\\r\\n12 4 16\\r\\n6 11 7\\r\\n2 13 12\\r\\n13 2 18\\r\\n2 10 12\\r\\n13 12 1\\r\\n12 5 4\\r\\n9 4 16\\r\\n7 6 7\\r\\n2 3 15\\r\\n4 14 1\\r\\n13 5 3\\r\\n10 9 3\\r\\n4 6\\r\\n4 5\\r\\n5 3\\r\\n2 6\\r\\n2 4\\r\\n1 2\\r\\n4 7\\r\\n2 2\\r\\n6 1\\r\\n1 1\\r\\n6 5\\r\\n7 7\\r\\n3 4\\r\\n2 6\\r\\n', 'output': ['-1\\r\\n']}, {'input': '15 29\\r\\n6 6\\r\\n7 12 7\\r\\n11 3 7\\r\\n4 5 18\\r\\n13 9 18\\r\\n3 8 12\\r\\n6 1 7\\r\\n4 1 4\\r\\n12 5 18\\r\\n10 8 15\\r\\n2 10 1\\r\\n9 7 11\\r\\n2 4 10\\r\\n2 14 3\\r\\n15 12 14\\r\\n1 13 8\\r\\n11 4 1\\r\\n15 11 2\\r\\n1 5 9\\r\\n5 2 5\\r\\n9 10 5\\r\\n15 2 17\\r\\n11 5 1\\r\\n14 15 14\\r\\n10 1 16\\r\\n15 9 2\\r\\n13 15 6\\r\\n13 5 1\\r\\n7 12 6\\r\\n12 5 13\\r\\n8 26\\r\\n35 17\\r\\n16 14\\r\\n12 13\\r\\n21 1\\r\\n31 9\\r\\n7 24\\r\\n11 31\\r\\n29 5\\r\\n16 22\\r\\n29 7\\r\\n30 20\\r\\n36 3\\r\\n26 22\\r\\n37 6\\r\\n', 'output': ['0\\r\\n']}, {'input': '5 0\\r\\n2 4\\r\\n1 2\\r\\n6 9\\r\\n4 585\\r\\n6 9\\r\\n7 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 8\\r\\n1 3\\r\\n1 2 1\\r\\n1 3 3\\r\\n1 5 1\\r\\n1 4 2\\r\\n5 4 3\\r\\n3 5 2\\r\\n2 3 8\\r\\n1 3 2\\r\\n2 7\\r\\n10 3\\r\\n4 7\\r\\n2 1\\r\\n1 1\\r\\n', 'output': ['7\\r\\n']}, {'input': '5 7\\r\\n1 3\\r\\n1 2 1\\r\\n1 3 3\\r\\n1 5 1\\r\\n1 4 2\\r\\n5 4 3\\r\\n3 5 2\\r\\n2 3 8\\r\\n2 7\\r\\n10 3\\r\\n4 7\\r\\n2 1\\r\\n1 1\\r\\n', 'output': ['10\\r\\n']}, {'input': '7 5\\r\\n6 7\\r\\n1 3 1000000000\\r\\n2 7 999999999\\r\\n5 7 123456789\\r\\n1 5 148879589\\r\\n5 4 1000000000\\r\\n1000000000 1000000000\\r\\n1000000000 1000000000\\r\\n999999999 145785965\\r\\n1000000000 1000000000\\r\\n1000000000 1\\r\\n123456789 123568591\\r\\n1000000000 1000000000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 8\\r\\n6 7\\r\\n1 3 1000000000\\r\\n1 6 1000000000\\r\\n1 2 1000000000\\r\\n6 2 1000000000\\r\\n2 5 1000000000\\r\\n5 7 1000000000\\r\\n4 7 1\\r\\n3 4 1000000000\\r\\n1000000000 100000000\\r\\n999999999 1\\r\\n1000000000 10000000\\r\\n1000000000 10000000\\r\\n1000000000 128\\r\\n1000000000 10000000\\r\\n1000000000 1000000000\\r\\n', 'output': ['130000000\\r\\n']}, {'input': '7 8\\r\\n6 7\\r\\n1 3 1000000000\\r\\n1 6 1000000000\\r\\n1 2 1000000000\\r\\n6 2 1000000000\\r\\n2 5 1000000000\\r\\n5 7 1000000000\\r\\n4 7 1\\r\\n3 4 999999999\\r\\n1000000000 100000000\\r\\n999999999 1\\r\\n999999999 10000000\\r\\n1000000000 10000000\\r\\n1000000000 128\\r\\n1000000000 10000000\\r\\n1000000000 1000000000\\r\\n', 'output': ['130000000\\r\\n']}, {'input': '7 8\\r\\n1 7\\r\\n1 3 1000000000\\r\\n1 6 1000000000\\r\\n1 2 1000000000\\r\\n6 2 1000000000\\r\\n2 5 1000000000\\r\\n5 7 1000000000\\r\\n4 7 1\\r\\n3 4 999999999\\r\\n1000000000 100000000\\r\\n999999999 1\\r\\n999999999 10000000\\r\\n1000000000 10000000\\r\\n1000000000 128\\r\\n1000000000 10000000\\r\\n1000000000 1000000000\\r\\n', 'output': ['120000000\\r\\n']}, {'input': '2 1\\r\\n1 2\\r\\n1 2 1\\r\\n1 999999998\\r\\n1 999999998\\r\\n', 'output': ['999999998\\r\\n']}, {'input': '3 3\\r\\n1 3\\r\\n2 1 1\\r\\n1 2 1000000000\\r\\n1 2 1000000000\\r\\n1000000000 1000000000\\r\\n1000000000 1000000000\\r\\n1000000000 1000000000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 3\\r\\n1 2\\r\\n2 1 1\\r\\n1 2 1000000000\\r\\n1 2 1000000000\\r\\n10000000 1000000000\\r\\n10000000 1000000000\\r\\n10000000 1000000000\\r\\n', 'output': ['1000000000\\r\\n']}, {'input': '3 3\\r\\n1 2\\r\\n2 1 1000000000\\r\\n1 2 1000000000\\r\\n1 2 1000000000\\r\\n10000000 1000000000\\r\\n10000000 1000000000\\r\\n10000000 1000000000\\r\\n', 'output': ['-1\\r\\n']}]", "source_code": "import java.util.*;\nimport java.io.*;\n\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tFastScanner scanner = new FastScanner();\n\t\tint n = scanner.nextInt();\n\t\tint m = scanner.nextInt();\n\t\tint x = scanner.nextInt();\n\t\tint y = scanner.nextInt();\n\t\tint[][] roads = new int[m][2];\n\t\tfor(int j = 0;j < m ;j++){\n\t\t\troads[j][0] = scanner.nextInt();\n\t\t\troads[j][1] = scanner.nextInt();\n\t\t}\n\t\tint[] tc = new int[n];\n\t\tfor(int k = 0 ;k < n ;k++){\n\t\t\ttc[k] = scanner.nextInt();\n\t\t}\n\t\tfor(int i = 0 ;i < n ;i++){\n\t\t\tfor(int j = 0 ;j < m ;j++){\n\t\t\t\tif(roads[j][0] == i + 1){\n\t\t\t\t\troads[j][0] = roads[j][1];\n\t\t\t\t\troads[j][1] = tc[roads[j][0]-1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlong result = Long.MAX_VALUE;\n\t\tfor(int p = 0 ;p < n ;p++){\n\t\t\tfor(int l = 0 ;l < n ;l++){\n\t\t\t\tfor(int q = 0 ;q < m ;q++){\n\t\t\t\t\tif(roads[q][0] == p + 1 && roads[q][1] == l + 1){\n\t\t\t\t\t\tlong temp = 0;\n\t\t\t\t\t\tfor(int r = 0 ;r < m ;r++){\n\t\t\t\t\t\t\tif(roads[r][0] == l + 1){\n\t\t\t\t\t\t\t\tif(roads[r][1] == y){\n\t\t\t\t\t\t\t\t\ttemp += roads[r][2];\n\t\t\t\t\t\t\t\t}else if(roads[r][1]!= roads[r][0]){\n\t\t\t\t\t\t\t\t\ttemp += tc[roads[r][1]-1];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(temp < result){\n\t\t\t\t\t\t\tresult = temp + tc[x-1] - tc[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(result == Long.MAX_VALUE? -1 : result);\n\t}\n\tstatic class FastScanner {\n\t\tprivate final InputStream in = System.in;\n\t\tprivate final byte[] buffer = new byte[1024];\n\t\tprivate int ptr = 0;\n\t\tprivate int buflen = 0;\n\t\tprivate boolean hasNextByte() {\n\t\t\t\t\tif (ptr < buflen) {\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tptr = 0;\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbuflen = in.read(buffer);\n\t\t\t\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (buflen <= 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\tprivate int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n\t\t\tprivate static boolean isPrintableChar(int c) { return 33 <= c && c <= 126"}
{"src_uid": "d8d449d0fccf755822548ddf9d74b9ab", "id": 100, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '4 4\\r\\n1 3\\r\\n1 2 3\\r\\n1 4 1\\r\\n2 4 1\\r\\n2 3 5\\r\\n2 7\\r\\n7 2\\r\\n1 2\\r\\n7 7\\r\\n', 'output': ['9\\r\\n']}, {'input': '3 3\\r\\n1 3\\r\\n1 2 2\\r\\n1 3 3\\r\\n3 2 1\\r\\n2 7\\r\\n2 7\\r\\n3 6\\r\\n', 'output': ['14\\r\\n']}, {'input': '3 1\\r\\n1 3\\r\\n1 2 2\\r\\n2 7\\r\\n2 7\\r\\n3 6\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 2\\r\\n3 3\\r\\n1 2 2\\r\\n1 3 3\\r\\n2 7\\r\\n2 7\\r\\n3 7\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 2\\r\\n1 2\\r\\n1 2 3\\r\\n1 2 2\\r\\n2 7\\r\\n3 2\\r\\n', 'output': ['7\\r\\n']}, {'input': '1 0\\r\\n1 1\\r\\n74 47\\r\\n', 'output': ['0\\r\\n']}, {'input': '5 5\\r\\n1 3\\r\\n1 3 3\\r\\n5 1 6\\r\\n4 3 8\\r\\n1 3 3\\r\\n5 2 4\\r\\n1 2\\r\\n4 1\\r\\n2 5\\r\\n5 2\\r\\n1 2\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 4\\r\\n3 4\\r\\n6 2 7\\r\\n6 1 4\\r\\n4 3 5\\r\\n3 6 4\\r\\n1 6\\r\\n7 3\\r\\n3 6\\r\\n6 5\\r\\n3 7\\r\\n4 4\\r\\n1 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 5\\r\\n4 5\\r\\n1 4 8\\r\\n4 2 4\\r\\n4 1 3\\r\\n3 1 9\\r\\n4 5 4\\r\\n2 7\\r\\n2 7\\r\\n5 1\\r\\n6 3\\r\\n3 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '5 5\\r\\n5 4\\r\\n2 4 10\\r\\n2 4 7\\r\\n3 1 7\\r\\n2 4 2\\r\\n5 3 9\\r\\n6 17\\r\\n2 4\\r\\n3 12\\r\\n7 18\\r\\n2 5\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4 7\\r\\n3 4\\r\\n2 3 5\\r\\n3 2 9\\r\\n4 1 9\\r\\n3 2 1\\r\\n3 1 2\\r\\n2 3 6\\r\\n1 2 8\\r\\n2 2\\r\\n5 3\\r\\n2 1\\r\\n1 5\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 14\\r\\n7 5\\r\\n1 3 15\\r\\n2 1 10\\r\\n1 3 5\\r\\n2 4 9\\r\\n5 4 19\\r\\n1 3 11\\r\\n5 1 1\\r\\n2 4 5\\r\\n2 3 11\\r\\n3 2 10\\r\\n3 4 18\\r\\n5 1 18\\r\\n6 2 5\\r\\n5 6 2\\r\\n3 6\\r\\n6 7\\r\\n9 1\\r\\n3 6\\r\\n1 1\\r\\n9 4\\r\\n9 8\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 15\\r\\n5 5\\r\\n3 4 6\\r\\n7 4 3\\r\\n7 2 8\\r\\n2 5 2\\r\\n7 2 8\\r\\n5 2 9\\r\\n3 1 7\\r\\n1 2 4\\r\\n7 1 8\\r\\n7 5 7\\r\\n2 4 2\\r\\n4 3 9\\r\\n7 4 2\\r\\n5 4 8\\r\\n7 2 8\\r\\n15 4\\r\\n18 18\\r\\n6 8\\r\\n16 5\\r\\n11 1\\r\\n5 3\\r\\n18 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '8 20\\r\\n8 4\\r\\n6 3 1\\r\\n3 4 4\\r\\n5 2 2\\r\\n3 6 3\\r\\n5 8 7\\r\\n6 2 7\\r\\n8 6 4\\r\\n6 4 5\\r\\n4 2 5\\r\\n5 3 3\\r\\n5 7 3\\r\\n8 1 6\\r\\n2 4 3\\r\\n6 8 5\\r\\n1 8 6\\r\\n8 2 7\\r\\n8 2 3\\r\\n1 6 7\\r\\n8 7 3\\r\\n6 3 6\\r\\n2 2\\r\\n5 9\\r\\n1 9\\r\\n4 7\\r\\n1 8\\r\\n4 8\\r\\n9 7\\r\\n9 3\\r\\n', 'output': ['3\\r\\n']}, {'input': '8 20\\r\\n8 2\\r\\n1 7 5\\r\\n3 2 3\\r\\n2 7 6\\r\\n6 5 6\\r\\n4 8 5\\r\\n7 8 4\\r\\n1 6 2\\r\\n7 4 3\\r\\n4 3 1\\r\\n6 7 5\\r\\n4 2 4\\r\\n2 8 7\\r\\n6 2 2\\r\\n2 3 4\\r\\n3 7 3\\r\\n7 8 4\\r\\n5 4 2\\r\\n7 1 1\\r\\n5 7 3\\r\\n4 3 7\\r\\n4 4\\r\\n2 7\\r\\n3 5\\r\\n3 1\\r\\n3 5\\r\\n1 5\\r\\n11 4\\r\\n10 5\\r\\n', 'output': ['5\\r\\n']}, {'input': '9 20\\r\\n5 1\\r\\n8 9 3\\r\\n1 8 6\\r\\n5 6 3\\r\\n2 1 4\\r\\n7 1 6\\r\\n1 4 4\\r\\n3 2 4\\r\\n5 6 4\\r\\n3 9 6\\r\\n6 2 3\\r\\n9 1 7\\r\\n1 7 1\\r\\n1 3 3\\r\\n8 4 7\\r\\n7 1 7\\r\\n6 9 3\\r\\n5 8 3\\r\\n9 4 5\\r\\n6 9 1\\r\\n6 2 6\\r\\n1 7\\r\\n1 3\\r\\n6 1\\r\\n1 2\\r\\n6 1\\r\\n2 2\\r\\n4 7\\r\\n4 5\\r\\n4 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 21\\r\\n9 5\\r\\n5 2 6\\r\\n1 9 7\\r\\n6 2 7\\r\\n8 10 2\\r\\n7 2 1\\r\\n6 9 6\\r\\n10 9 4\\r\\n2 10 2\\r\\n10 8 4\\r\\n10 1 7\\r\\n9 1 7\\r\\n1 8 5\\r\\n10 9 7\\r\\n7 5 3\\r\\n2 10 6\\r\\n4 7 3\\r\\n10 5 6\\r\\n5 10 4\\r\\n6 9 2\\r\\n2 3 6\\r\\n1 9 3\\r\\n10 6\\r\\n7 12\\r\\n13 3\\r\\n17 4\\r\\n18 17\\r\\n1 9\\r\\n16 16\\r\\n12 13\\r\\n1 10\\r\\n6 15\\r\\n', 'output': ['-1\\r\\n']}, {'input': '14 20\\r\\n7 2\\r\\n12 2 17\\r\\n13 3 8\\r\\n6 8 3\\r\\n14 4 16\\r\\n13 5 17\\r\\n7 14 7\\r\\n11 10 6\\r\\n12 4 16\\r\\n6 11 7\\r\\n2 13 12\\r\\n13 2 18\\r\\n2 10 12\\r\\n13 12 1\\r\\n12 5 4\\r\\n9 4 16\\r\\n7 6 7\\r\\n2 3 15\\r\\n4 14 1\\r\\n13 5 3\\r\\n10 9 3\\r\\n4 6\\r\\n4 5\\r\\n5 3\\r\\n2 6\\r\\n2 4\\r\\n1 2\\r\\n4 7\\r\\n2 2\\r\\n6 1\\r\\n1 1\\r\\n6 5\\r\\n7 7\\r\\n3 4\\r\\n2 6\\r\\n', 'output': ['-1\\r\\n']}, {'input': '15 29\\r\\n6 6\\r\\n7 12 7\\r\\n11 3 7\\r\\n4 5 18\\r\\n13 9 18\\r\\n3 8 12\\r\\n6 1 7\\r\\n4 1 4\\r\\n12 5 18\\r\\n10 8 15\\r\\n2 10 1\\r\\n9 7 11\\r\\n2 4 10\\r\\n2 14 3\\r\\n15 12 14\\r\\n1 13 8\\r\\n11 4 1\\r\\n15 11 2\\r\\n1 5 9\\r\\n5 2 5\\r\\n9 10 5\\r\\n15 2 17\\r\\n11 5 1\\r\\n14 15 14\\r\\n10 1 16\\r\\n15 9 2\\r\\n13 15 6\\r\\n13 5 1\\r\\n7 12 6\\r\\n12 5 13\\r\\n8 26\\r\\n35 17\\r\\n16 14\\r\\n12 13\\r\\n21 1\\r\\n31 9\\r\\n7 24\\r\\n11 31\\r\\n29 5\\r\\n16 22\\r\\n29 7\\r\\n30 20\\r\\n36 3\\r\\n26 22\\r\\n37 6\\r\\n', 'output': ['0\\r\\n']}, {'input': '5 0\\r\\n2 4\\r\\n1 2\\r\\n6 9\\r\\n4 585\\r\\n6 9\\r\\n7 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 8\\r\\n1 3\\r\\n1 2 1\\r\\n1 3 3\\r\\n1 5 1\\r\\n1 4 2\\r\\n5 4 3\\r\\n3 5 2\\r\\n2 3 8\\r\\n1 3 2\\r\\n2 7\\r\\n10 3\\r\\n4 7\\r\\n2 1\\r\\n1 1\\r\\n', 'output': ['7\\r\\n']}, {'input': '5 7\\r\\n1 3\\r\\n1 2 1\\r\\n1 3 3\\r\\n1 5 1\\r\\n1 4 2\\r\\n5 4 3\\r\\n3 5 2\\r\\n2 3 8\\r\\n2 7\\r\\n10 3\\r\\n4 7\\r\\n2 1\\r\\n1 1\\r\\n', 'output': ['10\\r\\n']}, {'input': '7 5\\r\\n6 7\\r\\n1 3 1000000000\\r\\n2 7 999999999\\r\\n5 7 123456789\\r\\n1 5 148879589\\r\\n5 4 1000000000\\r\\n1000000000 1000000000\\r\\n1000000000 1000000000\\r\\n999999999 145785965\\r\\n1000000000 1000000000\\r\\n1000000000 1\\r\\n123456789 123568591\\r\\n1000000000 1000000000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 8\\r\\n6 7\\r\\n1 3 1000000000\\r\\n1 6 1000000000\\r\\n1 2 1000000000\\r\\n6 2 1000000000\\r\\n2 5 1000000000\\r\\n5 7 1000000000\\r\\n4 7 1\\r\\n3 4 1000000000\\r\\n1000000000 100000000\\r\\n999999999 1\\r\\n1000000000 10000000\\r\\n1000000000 10000000\\r\\n1000000000 128\\r\\n1000000000 10000000\\r\\n1000000000 1000000000\\r\\n', 'output': ['130000000\\r\\n']}, {'input': '7 8\\r\\n6 7\\r\\n1 3 1000000000\\r\\n1 6 1000000000\\r\\n1 2 1000000000\\r\\n6 2 1000000000\\r\\n2 5 1000000000\\r\\n5 7 1000000000\\r\\n4 7 1\\r\\n3 4 999999999\\r\\n1000000000 100000000\\r\\n999999999 1\\r\\n999999999 10000000\\r\\n1000000000 10000000\\r\\n1000000000 128\\r\\n1000000000 10000000\\r\\n1000000000 1000000000\\r\\n', 'output': ['130000000\\r\\n']}, {'input': '7 8\\r\\n1 7\\r\\n1 3 1000000000\\r\\n1 6 1000000000\\r\\n1 2 1000000000\\r\\n6 2 1000000000\\r\\n2 5 1000000000\\r\\n5 7 1000000000\\r\\n4 7 1\\r\\n3 4 999999999\\r\\n1000000000 100000000\\r\\n999999999 1\\r\\n999999999 10000000\\r\\n1000000000 10000000\\r\\n1000000000 128\\r\\n1000000000 10000000\\r\\n1000000000 1000000000\\r\\n', 'output': ['120000000\\r\\n']}, {'input': '2 1\\r\\n1 2\\r\\n1 2 1\\r\\n1 999999998\\r\\n1 999999998\\r\\n', 'output': ['999999998\\r\\n']}, {'input': '3 3\\r\\n1 3\\r\\n2 1 1\\r\\n1 2 1000000000\\r\\n1 2 1000000000\\r\\n1000000000 1000000000\\r\\n1000000000 1000000000\\r\\n1000000000 1000000000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 3\\r\\n1 2\\r\\n2 1 1\\r\\n1 2 1000000000\\r\\n1 2 1000000000\\r\\n10000000 1000000000\\r\\n10000000 1000000000\\r\\n10000000 1000000000\\r\\n', 'output': ['1000000000\\r\\n']}, {'input': '3 3\\r\\n1 2\\r\\n2 1 1000000000\\r\\n1 2 1000000000\\r\\n1 2 1000000000\\r\\n10000000 1000000000\\r\\n10000000 1000000000\\r\\n10000000 1000000000\\r\\n', 'output': ['-1\\r\\n']}]", "source_code": "import java.util.ArrayList;\nimport static java.util.Collections.reverseOrder;\nimport static java.util.Comparator.comparing;\nimport java.util.LinkedHashMap;\nimport static java.util.Map.Entry.comparingByKey;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport static java.util.Objects.requireNonNull;\nimport java.util.Optional;\nimport java.util.OptionalLong;\nimport java.util.Set;\nimport java.util.TreeMap;\nimport java.util.stream.Collectors;\nimport static java.util.stream.Collectors.counting;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class HelloWorld {\n\n  \n    \n    public static void main(String[] args) {\n          // TODO code application logic here\n          int n,m;\n          \n          int x,y;\n          \n          int a[][]= new int [1005][3];\n          \n          int t[]= new int [1005];\n          int c[]= new int [1005];\n          int max=0;\n          int min=1000000000;\n          int sum=0;\n          int d[][] = new int[1000][2];\n          int k=0;\n          int count=0;\n          int f = 0 ; \n          \n          int max1;\n          \n         \n          java.util.Scanner input = new java.util.Scanner(System.in);\n          n = input.nextInt();\n          m = input.nextInt();\n          \n          x = input.nextInt();\n          y = input.nextInt();\n          for(int i =0 ; i < m ;i++)\n          {\n              a[i][0] = input.nextInt();\n              a[i][1] = input.nextInt();\n              a[i][2] = input.nextInt();\n          }\n          \n          for(int i=0 ; i < n ; i++)\n          {\n              t[i] = input.nextInt();\n              c[i] = input.nextInt();\n              if(t[i] > max )\n              {\n                  max = t[i];\n              }\n              if(t[i] < min)\n              {\n                  min = t[i];\n              }\n          }\n          \n          max1 = min;\n          sum = 0 ;\n          \n          while(max1 <= max)\n          {\n              for(int i = 0 ; i < n ; i++)\n              {\n                  if(max1 >= a[i][0] && max1 <= a[i][1] )\n                  {\n                      \n                      sum += c[a[i][2]-1];\n                      f = 1 ; \n                      \n                  }\n              }\n              \n              max1++;\n          }\n          \n          if(f == 0 )\n          {\n              sum = -1 ; \n          }\n          \n          System.out.println(sum);\n    }\n}\n"}
{"src_uid": "d8d449d0fccf755822548ddf9d74b9ab", "id": 100, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '4 4\\r\\n1 3\\r\\n1 2 3\\r\\n1 4 1\\r\\n2 4 1\\r\\n2 3 5\\r\\n2 7\\r\\n7 2\\r\\n1 2\\r\\n7 7\\r\\n', 'output': ['9\\r\\n']}, {'input': '3 3\\r\\n1 3\\r\\n1 2 2\\r\\n1 3 3\\r\\n3 2 1\\r\\n2 7\\r\\n2 7\\r\\n3 6\\r\\n', 'output': ['14\\r\\n']}, {'input': '3 1\\r\\n1 3\\r\\n1 2 2\\r\\n2 7\\r\\n2 7\\r\\n3 6\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 2\\r\\n3 3\\r\\n1 2 2\\r\\n1 3 3\\r\\n2 7\\r\\n2 7\\r\\n3 7\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 2\\r\\n1 2\\r\\n1 2 3\\r\\n1 2 2\\r\\n2 7\\r\\n3 2\\r\\n', 'output': ['7\\r\\n']}, {'input': '1 0\\r\\n1 1\\r\\n74 47\\r\\n', 'output': ['0\\r\\n']}, {'input': '5 5\\r\\n1 3\\r\\n1 3 3\\r\\n5 1 6\\r\\n4 3 8\\r\\n1 3 3\\r\\n5 2 4\\r\\n1 2\\r\\n4 1\\r\\n2 5\\r\\n5 2\\r\\n1 2\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 4\\r\\n3 4\\r\\n6 2 7\\r\\n6 1 4\\r\\n4 3 5\\r\\n3 6 4\\r\\n1 6\\r\\n7 3\\r\\n3 6\\r\\n6 5\\r\\n3 7\\r\\n4 4\\r\\n1 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 5\\r\\n4 5\\r\\n1 4 8\\r\\n4 2 4\\r\\n4 1 3\\r\\n3 1 9\\r\\n4 5 4\\r\\n2 7\\r\\n2 7\\r\\n5 1\\r\\n6 3\\r\\n3 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '5 5\\r\\n5 4\\r\\n2 4 10\\r\\n2 4 7\\r\\n3 1 7\\r\\n2 4 2\\r\\n5 3 9\\r\\n6 17\\r\\n2 4\\r\\n3 12\\r\\n7 18\\r\\n2 5\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4 7\\r\\n3 4\\r\\n2 3 5\\r\\n3 2 9\\r\\n4 1 9\\r\\n3 2 1\\r\\n3 1 2\\r\\n2 3 6\\r\\n1 2 8\\r\\n2 2\\r\\n5 3\\r\\n2 1\\r\\n1 5\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 14\\r\\n7 5\\r\\n1 3 15\\r\\n2 1 10\\r\\n1 3 5\\r\\n2 4 9\\r\\n5 4 19\\r\\n1 3 11\\r\\n5 1 1\\r\\n2 4 5\\r\\n2 3 11\\r\\n3 2 10\\r\\n3 4 18\\r\\n5 1 18\\r\\n6 2 5\\r\\n5 6 2\\r\\n3 6\\r\\n6 7\\r\\n9 1\\r\\n3 6\\r\\n1 1\\r\\n9 4\\r\\n9 8\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 15\\r\\n5 5\\r\\n3 4 6\\r\\n7 4 3\\r\\n7 2 8\\r\\n2 5 2\\r\\n7 2 8\\r\\n5 2 9\\r\\n3 1 7\\r\\n1 2 4\\r\\n7 1 8\\r\\n7 5 7\\r\\n2 4 2\\r\\n4 3 9\\r\\n7 4 2\\r\\n5 4 8\\r\\n7 2 8\\r\\n15 4\\r\\n18 18\\r\\n6 8\\r\\n16 5\\r\\n11 1\\r\\n5 3\\r\\n18 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '8 20\\r\\n8 4\\r\\n6 3 1\\r\\n3 4 4\\r\\n5 2 2\\r\\n3 6 3\\r\\n5 8 7\\r\\n6 2 7\\r\\n8 6 4\\r\\n6 4 5\\r\\n4 2 5\\r\\n5 3 3\\r\\n5 7 3\\r\\n8 1 6\\r\\n2 4 3\\r\\n6 8 5\\r\\n1 8 6\\r\\n8 2 7\\r\\n8 2 3\\r\\n1 6 7\\r\\n8 7 3\\r\\n6 3 6\\r\\n2 2\\r\\n5 9\\r\\n1 9\\r\\n4 7\\r\\n1 8\\r\\n4 8\\r\\n9 7\\r\\n9 3\\r\\n', 'output': ['3\\r\\n']}, {'input': '8 20\\r\\n8 2\\r\\n1 7 5\\r\\n3 2 3\\r\\n2 7 6\\r\\n6 5 6\\r\\n4 8 5\\r\\n7 8 4\\r\\n1 6 2\\r\\n7 4 3\\r\\n4 3 1\\r\\n6 7 5\\r\\n4 2 4\\r\\n2 8 7\\r\\n6 2 2\\r\\n2 3 4\\r\\n3 7 3\\r\\n7 8 4\\r\\n5 4 2\\r\\n7 1 1\\r\\n5 7 3\\r\\n4 3 7\\r\\n4 4\\r\\n2 7\\r\\n3 5\\r\\n3 1\\r\\n3 5\\r\\n1 5\\r\\n11 4\\r\\n10 5\\r\\n', 'output': ['5\\r\\n']}, {'input': '9 20\\r\\n5 1\\r\\n8 9 3\\r\\n1 8 6\\r\\n5 6 3\\r\\n2 1 4\\r\\n7 1 6\\r\\n1 4 4\\r\\n3 2 4\\r\\n5 6 4\\r\\n3 9 6\\r\\n6 2 3\\r\\n9 1 7\\r\\n1 7 1\\r\\n1 3 3\\r\\n8 4 7\\r\\n7 1 7\\r\\n6 9 3\\r\\n5 8 3\\r\\n9 4 5\\r\\n6 9 1\\r\\n6 2 6\\r\\n1 7\\r\\n1 3\\r\\n6 1\\r\\n1 2\\r\\n6 1\\r\\n2 2\\r\\n4 7\\r\\n4 5\\r\\n4 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 21\\r\\n9 5\\r\\n5 2 6\\r\\n1 9 7\\r\\n6 2 7\\r\\n8 10 2\\r\\n7 2 1\\r\\n6 9 6\\r\\n10 9 4\\r\\n2 10 2\\r\\n10 8 4\\r\\n10 1 7\\r\\n9 1 7\\r\\n1 8 5\\r\\n10 9 7\\r\\n7 5 3\\r\\n2 10 6\\r\\n4 7 3\\r\\n10 5 6\\r\\n5 10 4\\r\\n6 9 2\\r\\n2 3 6\\r\\n1 9 3\\r\\n10 6\\r\\n7 12\\r\\n13 3\\r\\n17 4\\r\\n18 17\\r\\n1 9\\r\\n16 16\\r\\n12 13\\r\\n1 10\\r\\n6 15\\r\\n', 'output': ['-1\\r\\n']}, {'input': '14 20\\r\\n7 2\\r\\n12 2 17\\r\\n13 3 8\\r\\n6 8 3\\r\\n14 4 16\\r\\n13 5 17\\r\\n7 14 7\\r\\n11 10 6\\r\\n12 4 16\\r\\n6 11 7\\r\\n2 13 12\\r\\n13 2 18\\r\\n2 10 12\\r\\n13 12 1\\r\\n12 5 4\\r\\n9 4 16\\r\\n7 6 7\\r\\n2 3 15\\r\\n4 14 1\\r\\n13 5 3\\r\\n10 9 3\\r\\n4 6\\r\\n4 5\\r\\n5 3\\r\\n2 6\\r\\n2 4\\r\\n1 2\\r\\n4 7\\r\\n2 2\\r\\n6 1\\r\\n1 1\\r\\n6 5\\r\\n7 7\\r\\n3 4\\r\\n2 6\\r\\n', 'output': ['-1\\r\\n']}, {'input': '15 29\\r\\n6 6\\r\\n7 12 7\\r\\n11 3 7\\r\\n4 5 18\\r\\n13 9 18\\r\\n3 8 12\\r\\n6 1 7\\r\\n4 1 4\\r\\n12 5 18\\r\\n10 8 15\\r\\n2 10 1\\r\\n9 7 11\\r\\n2 4 10\\r\\n2 14 3\\r\\n15 12 14\\r\\n1 13 8\\r\\n11 4 1\\r\\n15 11 2\\r\\n1 5 9\\r\\n5 2 5\\r\\n9 10 5\\r\\n15 2 17\\r\\n11 5 1\\r\\n14 15 14\\r\\n10 1 16\\r\\n15 9 2\\r\\n13 15 6\\r\\n13 5 1\\r\\n7 12 6\\r\\n12 5 13\\r\\n8 26\\r\\n35 17\\r\\n16 14\\r\\n12 13\\r\\n21 1\\r\\n31 9\\r\\n7 24\\r\\n11 31\\r\\n29 5\\r\\n16 22\\r\\n29 7\\r\\n30 20\\r\\n36 3\\r\\n26 22\\r\\n37 6\\r\\n', 'output': ['0\\r\\n']}, {'input': '5 0\\r\\n2 4\\r\\n1 2\\r\\n6 9\\r\\n4 585\\r\\n6 9\\r\\n7 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 8\\r\\n1 3\\r\\n1 2 1\\r\\n1 3 3\\r\\n1 5 1\\r\\n1 4 2\\r\\n5 4 3\\r\\n3 5 2\\r\\n2 3 8\\r\\n1 3 2\\r\\n2 7\\r\\n10 3\\r\\n4 7\\r\\n2 1\\r\\n1 1\\r\\n', 'output': ['7\\r\\n']}, {'input': '5 7\\r\\n1 3\\r\\n1 2 1\\r\\n1 3 3\\r\\n1 5 1\\r\\n1 4 2\\r\\n5 4 3\\r\\n3 5 2\\r\\n2 3 8\\r\\n2 7\\r\\n10 3\\r\\n4 7\\r\\n2 1\\r\\n1 1\\r\\n', 'output': ['10\\r\\n']}, {'input': '7 5\\r\\n6 7\\r\\n1 3 1000000000\\r\\n2 7 999999999\\r\\n5 7 123456789\\r\\n1 5 148879589\\r\\n5 4 1000000000\\r\\n1000000000 1000000000\\r\\n1000000000 1000000000\\r\\n999999999 145785965\\r\\n1000000000 1000000000\\r\\n1000000000 1\\r\\n123456789 123568591\\r\\n1000000000 1000000000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 8\\r\\n6 7\\r\\n1 3 1000000000\\r\\n1 6 1000000000\\r\\n1 2 1000000000\\r\\n6 2 1000000000\\r\\n2 5 1000000000\\r\\n5 7 1000000000\\r\\n4 7 1\\r\\n3 4 1000000000\\r\\n1000000000 100000000\\r\\n999999999 1\\r\\n1000000000 10000000\\r\\n1000000000 10000000\\r\\n1000000000 128\\r\\n1000000000 10000000\\r\\n1000000000 1000000000\\r\\n', 'output': ['130000000\\r\\n']}, {'input': '7 8\\r\\n6 7\\r\\n1 3 1000000000\\r\\n1 6 1000000000\\r\\n1 2 1000000000\\r\\n6 2 1000000000\\r\\n2 5 1000000000\\r\\n5 7 1000000000\\r\\n4 7 1\\r\\n3 4 999999999\\r\\n1000000000 100000000\\r\\n999999999 1\\r\\n999999999 10000000\\r\\n1000000000 10000000\\r\\n1000000000 128\\r\\n1000000000 10000000\\r\\n1000000000 1000000000\\r\\n', 'output': ['130000000\\r\\n']}, {'input': '7 8\\r\\n1 7\\r\\n1 3 1000000000\\r\\n1 6 1000000000\\r\\n1 2 1000000000\\r\\n6 2 1000000000\\r\\n2 5 1000000000\\r\\n5 7 1000000000\\r\\n4 7 1\\r\\n3 4 999999999\\r\\n1000000000 100000000\\r\\n999999999 1\\r\\n999999999 10000000\\r\\n1000000000 10000000\\r\\n1000000000 128\\r\\n1000000000 10000000\\r\\n1000000000 1000000000\\r\\n', 'output': ['120000000\\r\\n']}, {'input': '2 1\\r\\n1 2\\r\\n1 2 1\\r\\n1 999999998\\r\\n1 999999998\\r\\n', 'output': ['999999998\\r\\n']}, {'input': '3 3\\r\\n1 3\\r\\n2 1 1\\r\\n1 2 1000000000\\r\\n1 2 1000000000\\r\\n1000000000 1000000000\\r\\n1000000000 1000000000\\r\\n1000000000 1000000000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 3\\r\\n1 2\\r\\n2 1 1\\r\\n1 2 1000000000\\r\\n1 2 1000000000\\r\\n10000000 1000000000\\r\\n10000000 1000000000\\r\\n10000000 1000000000\\r\\n', 'output': ['1000000000\\r\\n']}, {'input': '3 3\\r\\n1 2\\r\\n2 1 1000000000\\r\\n1 2 1000000000\\r\\n1 2 1000000000\\r\\n10000000 1000000000\\r\\n10000000 1000000000\\r\\n10000000 1000000000\\r\\n', 'output': ['-1\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Solution\n{\n    public static void main (String[] args) \n    {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt(), m = in.nextInt(), x = in.nextInt(), y = in.nextInt();\n        int[][] dis = new int[m][2], cost = new int[n][2];\n        for (int i = 0; i < m; i++){\n            dis[i][0] = in.nextInt();\n            dis[i][1] = in.nextInt();\n        }\n        for (int i = 0; i < n; i++){\n            cost[i][0] = in.nextInt();\n            cost[i][1] = in.nextInt();\n        }\n        long min = Long.MAX_VALUE;\n        for (int i = 0; i < n; i++){\n            long sum = 0;\n            for (int j = 0; j < m; j++){\n                if ((i == dis[j][0] - 1 && x == dis[j][1] - 1) || (i == dis[j][1] - 1 && y == dis[j][0] - 1)){\n                    sum += cost[i][0];\n                    if (min > sum){\n                        min = sum;\n                    }\n                }\n                if (cost[i][0] <= dis[j][1] - dis[j][0]){\n                    sum += cost[i][1];\n                    if (min > sum){\n                        min = sum;\n                    }\n                }\n            }\n        }\n        if (min == Long.MAX_VALUE){\n            min = -1;\n        }\n        System.out.println(min);\n    }\n}"}
{"src_uid": "d8d449d0fccf755822548ddf9d74b9ab", "id": 100, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '4 4\\r\\n1 3\\r\\n1 2 3\\r\\n1 4 1\\r\\n2 4 1\\r\\n2 3 5\\r\\n2 7\\r\\n7 2\\r\\n1 2\\r\\n7 7\\r\\n', 'output': ['9\\r\\n']}, {'input': '3 3\\r\\n1 3\\r\\n1 2 2\\r\\n1 3 3\\r\\n3 2 1\\r\\n2 7\\r\\n2 7\\r\\n3 6\\r\\n', 'output': ['14\\r\\n']}, {'input': '3 1\\r\\n1 3\\r\\n1 2 2\\r\\n2 7\\r\\n2 7\\r\\n3 6\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 2\\r\\n3 3\\r\\n1 2 2\\r\\n1 3 3\\r\\n2 7\\r\\n2 7\\r\\n3 7\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 2\\r\\n1 2\\r\\n1 2 3\\r\\n1 2 2\\r\\n2 7\\r\\n3 2\\r\\n', 'output': ['7\\r\\n']}, {'input': '1 0\\r\\n1 1\\r\\n74 47\\r\\n', 'output': ['0\\r\\n']}, {'input': '5 5\\r\\n1 3\\r\\n1 3 3\\r\\n5 1 6\\r\\n4 3 8\\r\\n1 3 3\\r\\n5 2 4\\r\\n1 2\\r\\n4 1\\r\\n2 5\\r\\n5 2\\r\\n1 2\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 4\\r\\n3 4\\r\\n6 2 7\\r\\n6 1 4\\r\\n4 3 5\\r\\n3 6 4\\r\\n1 6\\r\\n7 3\\r\\n3 6\\r\\n6 5\\r\\n3 7\\r\\n4 4\\r\\n1 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 5\\r\\n4 5\\r\\n1 4 8\\r\\n4 2 4\\r\\n4 1 3\\r\\n3 1 9\\r\\n4 5 4\\r\\n2 7\\r\\n2 7\\r\\n5 1\\r\\n6 3\\r\\n3 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '5 5\\r\\n5 4\\r\\n2 4 10\\r\\n2 4 7\\r\\n3 1 7\\r\\n2 4 2\\r\\n5 3 9\\r\\n6 17\\r\\n2 4\\r\\n3 12\\r\\n7 18\\r\\n2 5\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4 7\\r\\n3 4\\r\\n2 3 5\\r\\n3 2 9\\r\\n4 1 9\\r\\n3 2 1\\r\\n3 1 2\\r\\n2 3 6\\r\\n1 2 8\\r\\n2 2\\r\\n5 3\\r\\n2 1\\r\\n1 5\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 14\\r\\n7 5\\r\\n1 3 15\\r\\n2 1 10\\r\\n1 3 5\\r\\n2 4 9\\r\\n5 4 19\\r\\n1 3 11\\r\\n5 1 1\\r\\n2 4 5\\r\\n2 3 11\\r\\n3 2 10\\r\\n3 4 18\\r\\n5 1 18\\r\\n6 2 5\\r\\n5 6 2\\r\\n3 6\\r\\n6 7\\r\\n9 1\\r\\n3 6\\r\\n1 1\\r\\n9 4\\r\\n9 8\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 15\\r\\n5 5\\r\\n3 4 6\\r\\n7 4 3\\r\\n7 2 8\\r\\n2 5 2\\r\\n7 2 8\\r\\n5 2 9\\r\\n3 1 7\\r\\n1 2 4\\r\\n7 1 8\\r\\n7 5 7\\r\\n2 4 2\\r\\n4 3 9\\r\\n7 4 2\\r\\n5 4 8\\r\\n7 2 8\\r\\n15 4\\r\\n18 18\\r\\n6 8\\r\\n16 5\\r\\n11 1\\r\\n5 3\\r\\n18 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '8 20\\r\\n8 4\\r\\n6 3 1\\r\\n3 4 4\\r\\n5 2 2\\r\\n3 6 3\\r\\n5 8 7\\r\\n6 2 7\\r\\n8 6 4\\r\\n6 4 5\\r\\n4 2 5\\r\\n5 3 3\\r\\n5 7 3\\r\\n8 1 6\\r\\n2 4 3\\r\\n6 8 5\\r\\n1 8 6\\r\\n8 2 7\\r\\n8 2 3\\r\\n1 6 7\\r\\n8 7 3\\r\\n6 3 6\\r\\n2 2\\r\\n5 9\\r\\n1 9\\r\\n4 7\\r\\n1 8\\r\\n4 8\\r\\n9 7\\r\\n9 3\\r\\n', 'output': ['3\\r\\n']}, {'input': '8 20\\r\\n8 2\\r\\n1 7 5\\r\\n3 2 3\\r\\n2 7 6\\r\\n6 5 6\\r\\n4 8 5\\r\\n7 8 4\\r\\n1 6 2\\r\\n7 4 3\\r\\n4 3 1\\r\\n6 7 5\\r\\n4 2 4\\r\\n2 8 7\\r\\n6 2 2\\r\\n2 3 4\\r\\n3 7 3\\r\\n7 8 4\\r\\n5 4 2\\r\\n7 1 1\\r\\n5 7 3\\r\\n4 3 7\\r\\n4 4\\r\\n2 7\\r\\n3 5\\r\\n3 1\\r\\n3 5\\r\\n1 5\\r\\n11 4\\r\\n10 5\\r\\n', 'output': ['5\\r\\n']}, {'input': '9 20\\r\\n5 1\\r\\n8 9 3\\r\\n1 8 6\\r\\n5 6 3\\r\\n2 1 4\\r\\n7 1 6\\r\\n1 4 4\\r\\n3 2 4\\r\\n5 6 4\\r\\n3 9 6\\r\\n6 2 3\\r\\n9 1 7\\r\\n1 7 1\\r\\n1 3 3\\r\\n8 4 7\\r\\n7 1 7\\r\\n6 9 3\\r\\n5 8 3\\r\\n9 4 5\\r\\n6 9 1\\r\\n6 2 6\\r\\n1 7\\r\\n1 3\\r\\n6 1\\r\\n1 2\\r\\n6 1\\r\\n2 2\\r\\n4 7\\r\\n4 5\\r\\n4 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 21\\r\\n9 5\\r\\n5 2 6\\r\\n1 9 7\\r\\n6 2 7\\r\\n8 10 2\\r\\n7 2 1\\r\\n6 9 6\\r\\n10 9 4\\r\\n2 10 2\\r\\n10 8 4\\r\\n10 1 7\\r\\n9 1 7\\r\\n1 8 5\\r\\n10 9 7\\r\\n7 5 3\\r\\n2 10 6\\r\\n4 7 3\\r\\n10 5 6\\r\\n5 10 4\\r\\n6 9 2\\r\\n2 3 6\\r\\n1 9 3\\r\\n10 6\\r\\n7 12\\r\\n13 3\\r\\n17 4\\r\\n18 17\\r\\n1 9\\r\\n16 16\\r\\n12 13\\r\\n1 10\\r\\n6 15\\r\\n', 'output': ['-1\\r\\n']}, {'input': '14 20\\r\\n7 2\\r\\n12 2 17\\r\\n13 3 8\\r\\n6 8 3\\r\\n14 4 16\\r\\n13 5 17\\r\\n7 14 7\\r\\n11 10 6\\r\\n12 4 16\\r\\n6 11 7\\r\\n2 13 12\\r\\n13 2 18\\r\\n2 10 12\\r\\n13 12 1\\r\\n12 5 4\\r\\n9 4 16\\r\\n7 6 7\\r\\n2 3 15\\r\\n4 14 1\\r\\n13 5 3\\r\\n10 9 3\\r\\n4 6\\r\\n4 5\\r\\n5 3\\r\\n2 6\\r\\n2 4\\r\\n1 2\\r\\n4 7\\r\\n2 2\\r\\n6 1\\r\\n1 1\\r\\n6 5\\r\\n7 7\\r\\n3 4\\r\\n2 6\\r\\n', 'output': ['-1\\r\\n']}, {'input': '15 29\\r\\n6 6\\r\\n7 12 7\\r\\n11 3 7\\r\\n4 5 18\\r\\n13 9 18\\r\\n3 8 12\\r\\n6 1 7\\r\\n4 1 4\\r\\n12 5 18\\r\\n10 8 15\\r\\n2 10 1\\r\\n9 7 11\\r\\n2 4 10\\r\\n2 14 3\\r\\n15 12 14\\r\\n1 13 8\\r\\n11 4 1\\r\\n15 11 2\\r\\n1 5 9\\r\\n5 2 5\\r\\n9 10 5\\r\\n15 2 17\\r\\n11 5 1\\r\\n14 15 14\\r\\n10 1 16\\r\\n15 9 2\\r\\n13 15 6\\r\\n13 5 1\\r\\n7 12 6\\r\\n12 5 13\\r\\n8 26\\r\\n35 17\\r\\n16 14\\r\\n12 13\\r\\n21 1\\r\\n31 9\\r\\n7 24\\r\\n11 31\\r\\n29 5\\r\\n16 22\\r\\n29 7\\r\\n30 20\\r\\n36 3\\r\\n26 22\\r\\n37 6\\r\\n', 'output': ['0\\r\\n']}, {'input': '5 0\\r\\n2 4\\r\\n1 2\\r\\n6 9\\r\\n4 585\\r\\n6 9\\r\\n7 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 8\\r\\n1 3\\r\\n1 2 1\\r\\n1 3 3\\r\\n1 5 1\\r\\n1 4 2\\r\\n5 4 3\\r\\n3 5 2\\r\\n2 3 8\\r\\n1 3 2\\r\\n2 7\\r\\n10 3\\r\\n4 7\\r\\n2 1\\r\\n1 1\\r\\n', 'output': ['7\\r\\n']}, {'input': '5 7\\r\\n1 3\\r\\n1 2 1\\r\\n1 3 3\\r\\n1 5 1\\r\\n1 4 2\\r\\n5 4 3\\r\\n3 5 2\\r\\n2 3 8\\r\\n2 7\\r\\n10 3\\r\\n4 7\\r\\n2 1\\r\\n1 1\\r\\n', 'output': ['10\\r\\n']}, {'input': '7 5\\r\\n6 7\\r\\n1 3 1000000000\\r\\n2 7 999999999\\r\\n5 7 123456789\\r\\n1 5 148879589\\r\\n5 4 1000000000\\r\\n1000000000 1000000000\\r\\n1000000000 1000000000\\r\\n999999999 145785965\\r\\n1000000000 1000000000\\r\\n1000000000 1\\r\\n123456789 123568591\\r\\n1000000000 1000000000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 8\\r\\n6 7\\r\\n1 3 1000000000\\r\\n1 6 1000000000\\r\\n1 2 1000000000\\r\\n6 2 1000000000\\r\\n2 5 1000000000\\r\\n5 7 1000000000\\r\\n4 7 1\\r\\n3 4 1000000000\\r\\n1000000000 100000000\\r\\n999999999 1\\r\\n1000000000 10000000\\r\\n1000000000 10000000\\r\\n1000000000 128\\r\\n1000000000 10000000\\r\\n1000000000 1000000000\\r\\n', 'output': ['130000000\\r\\n']}, {'input': '7 8\\r\\n6 7\\r\\n1 3 1000000000\\r\\n1 6 1000000000\\r\\n1 2 1000000000\\r\\n6 2 1000000000\\r\\n2 5 1000000000\\r\\n5 7 1000000000\\r\\n4 7 1\\r\\n3 4 999999999\\r\\n1000000000 100000000\\r\\n999999999 1\\r\\n999999999 10000000\\r\\n1000000000 10000000\\r\\n1000000000 128\\r\\n1000000000 10000000\\r\\n1000000000 1000000000\\r\\n', 'output': ['130000000\\r\\n']}, {'input': '7 8\\r\\n1 7\\r\\n1 3 1000000000\\r\\n1 6 1000000000\\r\\n1 2 1000000000\\r\\n6 2 1000000000\\r\\n2 5 1000000000\\r\\n5 7 1000000000\\r\\n4 7 1\\r\\n3 4 999999999\\r\\n1000000000 100000000\\r\\n999999999 1\\r\\n999999999 10000000\\r\\n1000000000 10000000\\r\\n1000000000 128\\r\\n1000000000 10000000\\r\\n1000000000 1000000000\\r\\n', 'output': ['120000000\\r\\n']}, {'input': '2 1\\r\\n1 2\\r\\n1 2 1\\r\\n1 999999998\\r\\n1 999999998\\r\\n', 'output': ['999999998\\r\\n']}, {'input': '3 3\\r\\n1 3\\r\\n2 1 1\\r\\n1 2 1000000000\\r\\n1 2 1000000000\\r\\n1000000000 1000000000\\r\\n1000000000 1000000000\\r\\n1000000000 1000000000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 3\\r\\n1 2\\r\\n2 1 1\\r\\n1 2 1000000000\\r\\n1 2 1000000000\\r\\n10000000 1000000000\\r\\n10000000 1000000000\\r\\n10000000 1000000000\\r\\n', 'output': ['1000000000\\r\\n']}, {'input': '3 3\\r\\n1 2\\r\\n2 1 1000000000\\r\\n1 2 1000000000\\r\\n1 2 1000000000\\r\\n10000000 1000000000\\r\\n10000000 1000000000\\r\\n10000000 1000000000\\r\\n', 'output': ['-1\\r\\n']}]", "source_code": "import java.util.*;\nimport java.io.*;\n\npublic class HelloWorld\n{\n\t\n\t//11111111111111111111111111111111\n\tpublic static void main (String[] args) throws IOException\n\t{\t\n\t\tReader.init(System.in);\n\t\tint n = Reader.nextInt(), m = Reader.nextInt(), x = Reader.nextInt(), y = Reader.nextInt(), u, v, w;\n\t\tint ans = (int)1e9;\n\t\tlong t[][] = new long[n][2], cost[] = new long[n];\n\t\tfor(int i = 0 ; i < n ; i++)\n\t\t\tfor(int j = 0 ; j < 2 ; j++)\n\t\t\t\tt[i][j] = Reader.nextInt();\n\t\tfor(int i = 0 ; i < n ; i++)\n\t\t\tcost[i] = Reader.nextInt();\n\t\t\n\t\tfor(int k = 0 ; k < n ; k++)\n\t\t\tfor(int i = 0 ; i < n ; i++)\n\t\t\t\tfor(int j = 0 ; j < n ; j++)\n\t\t\t\t{\n\t\t\t\t\tif(t[i][0] == t[j][k] && t[j][k+1] == t[i][1])\n\t\t\t\t\t\tw = cost[j];\n\t\t\t\t}\n\t\t\n\t\tfor(int i = 0 ; i < n ; i++)\n\t\t\tif(t[i][0] == x && t[i][1] == y)\n\t\t\t\tans = w;\n\t\t\t\t\n\t\tif(ans == (int)1e9)\n\t\t\tSystem.out.println(\"-1\");\n\t\telse\n\t\t\tSystem.out.println(ans);\n\t}\n}"}
{"src_uid": "e9db8d048e9763cf38c584342dea9f53", "id": 101, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2400, "testcases": "[{'input': '3 2001 2\\r\\n1 2\\r\\n2 3\\r\\n', 'output': ['1 2 3']}, {'input': '7 2020 6\\r\\n1 2\\r\\n1 3\\r\\n2 4\\r\\n2 5\\r\\n3 6\\r\\n3 7\\r\\n', 'output': ['1 2 3 7 4 6 5']}, {'input': '10 3630801 0\\r\\n', 'output': ['The times have changed']}, {'input': '3 2001 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['The times have changed']}, {'input': '5 2030 13\\r\\n5 2\\r\\n2 3\\r\\n2 4\\r\\n5 3\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n2 3\\r\\n2 3\\r\\n5 2\\r\\n2 4\\r\\n3 4\\r\\n5 4\\r\\n', 'output': ['The times have changed']}, {'input': '5 2019 12\\r\\n4 1\\r\\n1 2\\r\\n4 2\\r\\n4 3\\r\\n5 3\\r\\n5 1\\r\\n3 2\\r\\n4 2\\r\\n1 2\\r\\n1 3\\r\\n5 1\\r\\n1 3\\r\\n', 'output': ['The times have changed']}, {'input': '8 2004 6\\r\\n7 4\\r\\n6 4\\r\\n7 5\\r\\n5 8\\r\\n8 4\\r\\n8 2\\r\\n', 'output': ['1 6 2 8 4 7 3 5']}, {'input': '6 2004 18\\r\\n1 3\\r\\n2 1\\r\\n6 2\\r\\n5 1\\r\\n4 6\\r\\n5 1\\r\\n2 3\\r\\n6 2\\r\\n6 1\\r\\n2 1\\r\\n4 1\\r\\n2 3\\r\\n5 1\\r\\n2 1\\r\\n4 6\\r\\n5 2\\r\\n1 3\\r\\n5 6\\r\\n', 'output': ['The times have changed']}, {'input': '7 2035 5\\r\\n5 2\\r\\n3 2\\r\\n4 2\\r\\n4 2\\r\\n3 1\\r\\n', 'output': ['2 7 1 6 3 4 5']}, {'input': '16 20922789890000 0\\r\\n', 'output': ['16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1']}, {'input': '10 2001 13\\r\\n8 3\\r\\n7 6\\r\\n5 7\\r\\n2 1\\r\\n1 4\\r\\n5 10\\r\\n7 6\\r\\n6 1\\r\\n1 8\\r\\n3 10\\r\\n5 1\\r\\n5 8\\r\\n1 3\\r\\n', 'output': ['5 1 7 8 2 4 3 6 9 10']}, {'input': '10 2670 33\\r\\n5 7\\r\\n4 10\\r\\n5 9\\r\\n5 9\\r\\n7 8\\r\\n9 10\\r\\n4 6\\r\\n4 6\\r\\n1 8\\r\\n10 3\\r\\n4 7\\r\\n9 8\\r\\n6 1\\r\\n6 5\\r\\n10 1\\r\\n9 10\\r\\n4 6\\r\\n8 2\\r\\n6 9\\r\\n6 8\\r\\n6 5\\r\\n10 3\\r\\n6 2\\r\\n3 1\\r\\n7 9\\r\\n5 2\\r\\n4 10\\r\\n6 3\\r\\n6 2\\r\\n5 3\\r\\n3 1\\r\\n6 8\\r\\n6 2\\r\\n', 'output': ['The times have changed']}, {'input': '14 2001 22\\r\\n11 5\\r\\n14 6\\r\\n2 5\\r\\n2 4\\r\\n2 3\\r\\n7 2\\r\\n1 5\\r\\n7 3\\r\\n6 8\\r\\n1 5\\r\\n6 7\\r\\n1 10\\r\\n3 5\\r\\n4 1\\r\\n14 7\\r\\n7 8\\r\\n4 8\\r\\n1 11\\r\\n12 1\\r\\n10 11\\r\\n11 3\\r\\n8 3\\r\\n', 'output': ['7 4 11 5 12 2 3 8 13 9 10 6 14 1']}, {'input': '10 2001 32\\r\\n1 3\\r\\n2 9\\r\\n5 3\\r\\n9 5\\r\\n9 3\\r\\n6 9\\r\\n6 3\\r\\n5 8\\r\\n2 7\\r\\n2 7\\r\\n8 7\\r\\n5 4\\r\\n1 6\\r\\n4 8\\r\\n8 3\\r\\n9 8\\r\\n1 5\\r\\n5 10\\r\\n2 4\\r\\n2 6\\r\\n9 10\\r\\n1 4\\r\\n1 6\\r\\n4 7\\r\\n9 10\\r\\n9 5\\r\\n9 3\\r\\n6 10\\r\\n6 9\\r\\n10 7\\r\\n1 7\\r\\n1 2\\r\\n', 'output': ['1 2 8 6 5 3 10 7 4 9']}, {'input': '15 2001 8\\r\\n9 2\\r\\n4 8\\r\\n12 13\\r\\n6 7\\r\\n12 4\\r\\n7 2\\r\\n6 13\\r\\n4 11\\r\\n', 'output': ['1 5 6 8 9 2 3 10 4 11 12 7 13 14 15']}, {'input': '14 2001 15\\r\\n12 3\\r\\n5 6\\r\\n11 3\\r\\n6 7\\r\\n3 6\\r\\n5 13\\r\\n11 2\\r\\n1 2\\r\\n14 3\\r\\n1 2\\r\\n8 4\\r\\n13 8\\r\\n3 7\\r\\n5 11\\r\\n8 9\\r\\n', 'output': ['1 4 7 10 2 11 12 9 13 14 3 5 8 6']}, {'input': '14 11414 33\\r\\n11 14\\r\\n11 8\\r\\n3 5\\r\\n14 6\\r\\n3 1\\r\\n9 13\\r\\n11 4\\r\\n11 8\\r\\n4 6\\r\\n6 2\\r\\n3 10\\r\\n10 1\\r\\n11 9\\r\\n10 5\\r\\n9 8\\r\\n6 12\\r\\n10 5\\r\\n9 10\\r\\n8 13\\r\\n9 11\\r\\n8 10\\r\\n8 9\\r\\n14 3\\r\\n7 1\\r\\n5 13\\r\\n13 8\\r\\n4 8\\r\\n1 6\\r\\n1 8\\r\\n8 2\\r\\n6 7\\r\\n10 14\\r\\n2 1\\r\\n', 'output': ['The times have changed']}, {'input': '13 3651 42\\r\\n8 4\\r\\n13 7\\r\\n8 5\\r\\n6 2\\r\\n7 13\\r\\n12 10\\r\\n7 9\\r\\n9 4\\r\\n3 4\\r\\n8 1\\r\\n12 6\\r\\n3 4\\r\\n7 1\\r\\n4 1\\r\\n7 5\\r\\n2 5\\r\\n2 7\\r\\n6 11\\r\\n9 8\\r\\n3 2\\r\\n11 12\\r\\n1 2\\r\\n7 12\\r\\n8 11\\r\\n11 13\\r\\n10 12\\r\\n11 1\\r\\n8 2\\r\\n9 7\\r\\n6 13\\r\\n8 12\\r\\n10 1\\r\\n2 12\\r\\n1 2\\r\\n8 7\\r\\n6 8\\r\\n1 8\\r\\n3 12\\r\\n13 6\\r\\n7 13\\r\\n5 4\\r\\n7 8\\r\\n', 'output': ['The times have changed']}, {'input': '11 2001 34\\r\\n2 1\\r\\n7 5\\r\\n9 8\\r\\n5 2\\r\\n9 5\\r\\n9 1\\r\\n9 11\\r\\n1 5\\r\\n7 2\\r\\n9 1\\r\\n4 7\\r\\n3 11\\r\\n9 7\\r\\n2 1\\r\\n3 7\\r\\n7 3\\r\\n7 6\\r\\n8 1\\r\\n1 9\\r\\n11 8\\r\\n8 4\\r\\n8 9\\r\\n7 11\\r\\n7 5\\r\\n9 11\\r\\n7 9\\r\\n8 11\\r\\n8 7\\r\\n4 2\\r\\n7 4\\r\\n2 4\\r\\n6 1\\r\\n4 10\\r\\n11 2\\r\\n', 'output': ['The times have changed']}, {'input': '13 2001 5\\r\\n8 6\\r\\n11 2\\r\\n13 8\\r\\n6 3\\r\\n3 12\\r\\n', 'output': ['1 3 7 8 9 6 10 5 11 12 2 13 4']}, {'input': '16 2001 68\\r\\n16 15\\r\\n16 6\\r\\n4 1\\r\\n14 15\\r\\n13 5\\r\\n1 8\\r\\n1 5\\r\\n12 10\\r\\n3 11\\r\\n8 7\\r\\n6 5\\r\\n4 3\\r\\n5 11\\r\\n6 14\\r\\n13 5\\r\\n6 4\\r\\n10 7\\r\\n10 8\\r\\n9 15\\r\\n2 4\\r\\n5 15\\r\\n5 14\\r\\n12 4\\r\\n12 8\\r\\n10 1\\r\\n12 2\\r\\n11 7\\r\\n2 9\\r\\n10 16\\r\\n16 2\\r\\n13 10\\r\\n2 15\\r\\n11 15\\r\\n16 4\\r\\n13 2\\r\\n10 6\\r\\n1 9\\r\\n16 6\\r\\n13 1\\r\\n1 9\\r\\n4 3\\r\\n8 7...', 'output': ['8 6 9 7 11 5 14 10 15 3 12 1 2 13 16 4']}, {'input': '16 919540 100\\r\\n3 8\\r\\n3 10\\r\\n10 1\\r\\n1 14\\r\\n13 3\\r\\n9 13\\r\\n14 6\\r\\n5 3\\r\\n8 4\\r\\n14 12\\r\\n16 1\\r\\n13 10\\r\\n2 10\\r\\n9 12\\r\\n5 10\\r\\n8 12\\r\\n7 14\\r\\n15 11\\r\\n2 6\\r\\n5 3\\r\\n15 16\\r\\n8 14\\r\\n5 7\\r\\n15 14\\r\\n5 14\\r\\n8 6\\r\\n8 7\\r\\n7 6\\r\\n10 1\\r\\n7 15\\r\\n9 12\\r\\n11 14\\r\\n2 7\\r\\n3 7\\r\\n3 10\\r\\n9 13\\r\\n5 2\\r\\n16 11\\r\\n10 1\\r\\n4 16\\r\\n4 2\\r\\n...', 'output': ['The times have changed']}, {'input': '16 2005 99\\r\\n13 11\\r\\n12 10\\r\\n15 11\\r\\n10 15\\r\\n7 10\\r\\n15 14\\r\\n10 14\\r\\n13 3\\r\\n7 3\\r\\n11 8\\r\\n6 14\\r\\n16 13\\r\\n7 2\\r\\n4 8\\r\\n6 11\\r\\n9 6\\r\\n9 1\\r\\n16 4\\r\\n14 3\\r\\n6 14\\r\\n2 8\\r\\n15 6\\r\\n9 13\\r\\n7 9\\r\\n15 13\\r\\n14 16\\r\\n3 5\\r\\n8 5\\r\\n9 15\\r\\n16 5\\r\\n13 2\\r\\n10 15\\r\\n16 13\\r\\n14 1\\r\\n12 9\\r\\n14 13\\r\\n7 11\\r\\n11 2\\r\\n14 4\\r\\n3 11\\r\\n...', 'output': ['The times have changed']}, {'input': '16 2046 84\\r\\n2 15\\r\\n1 10\\r\\n7 1\\r\\n1 10\\r\\n5 8\\r\\n8 10\\r\\n11 14\\r\\n8 13\\r\\n7 15\\r\\n16 15\\r\\n6 12\\r\\n12 15\\r\\n10 15\\r\\n10 9\\r\\n1 10\\r\\n5 10\\r\\n1 4\\r\\n7 13\\r\\n5 9\\r\\n3 13\\r\\n2 14\\r\\n5 15\\r\\n13 6\\r\\n7 16\\r\\n16 12\\r\\n2 12\\r\\n5 6\\r\\n8 16\\r\\n12 11\\r\\n1 2\\r\\n2 16\\r\\n5 14\\r\\n2 16\\r\\n5 2\\r\\n4 6\\r\\n2 16\\r\\n7 1\\r\\n13 11\\r\\n7 13\\r\\n1 2\\r\\n3 6\\r\\n5...', 'output': ['The times have changed']}, {'input': '16 2001 82\\r\\n12 11\\r\\n9 11\\r\\n3 5\\r\\n12 3\\r\\n9 7\\r\\n16 15\\r\\n15 4\\r\\n15 11\\r\\n14 7\\r\\n11 10\\r\\n4 1\\r\\n11 13\\r\\n15 6\\r\\n4 13\\r\\n3 11\\r\\n10 4\\r\\n10 14\\r\\n7 5\\r\\n15 4\\r\\n12 6\\r\\n16 8\\r\\n3 9\\r\\n3 11\\r\\n6 8\\r\\n13 5\\r\\n15 2\\r\\n11 5\\r\\n2 8\\r\\n16 12\\r\\n1 2\\r\\n3 8\\r\\n16 14\\r\\n16 3\\r\\n8 14\\r\\n15 11\\r\\n16 2\\r\\n3 4\\r\\n16 5\\r\\n12 8\\r\\n10 4\\r\\n6 11...', 'output': ['10 11 3 9 16 6 14 12 5 8 7 2 15 13 4 1']}, {'input': '16 2001 65\\r\\n12 9\\r\\n4 11\\r\\n10 12\\r\\n6 12\\r\\n14 2\\r\\n13 2\\r\\n8 13\\r\\n3 11\\r\\n8 6\\r\\n8 13\\r\\n1 2\\r\\n11 8\\r\\n2 16\\r\\n2 10\\r\\n15 4\\r\\n3 8\\r\\n10 16\\r\\n5 7\\r\\n8 16\\r\\n10 7\\r\\n8 2\\r\\n8 9\\r\\n1 16\\r\\n15 10\\r\\n3 12\\r\\n12 7\\r\\n15 16\\r\\n3 8\\r\\n4 1\\r\\n13 7\\r\\n11 1\\r\\n14 3\\r\\n7 9\\r\\n13 5\\r\\n11 12\\r\\n3 5\\r\\n4 7\\r\\n14 1\\r\\n3 13\\r\\n9 16\\r\\n15 14\\r\\n11...', 'output': ['8 10 3 4 12 9 14 6 15 11 5 13 7 2 1 16']}, {'input': '16 2001 99\\r\\n13 12\\r\\n3 16\\r\\n4 11\\r\\n5 7\\r\\n2 13\\r\\n7 14\\r\\n5 2\\r\\n5 3\\r\\n4 13\\r\\n9 3\\r\\n7 14\\r\\n13 15\\r\\n6 13\\r\\n14 15\\r\\n5 16\\r\\n10 16\\r\\n6 5\\r\\n2 8\\r\\n1 6\\r\\n4 11\\r\\n6 3\\r\\n7 12\\r\\n9 16\\r\\n3 10\\r\\n6 11\\r\\n5 15\\r\\n4 6\\r\\n14 16\\r\\n9 2\\r\\n13 7\\r\\n3 8\\r\\n15 3\\r\\n6 2\\r\\n10 12\\r\\n4 6\\r\\n1 5\\r\\n4 7\\r\\n7 14\\r\\n5 11\\r\\n3 12\\r\\n13 7\\r\\n14 10\\r...', 'output': ['1 6 11 2 5 3 8 14 4 12 15 16 7 9 10 13']}, {'input': '16 2001 69\\r\\n2 15\\r\\n10 6\\r\\n10 11\\r\\n3 11\\r\\n6 7\\r\\n1 15\\r\\n6 1\\r\\n1 13\\r\\n13 5\\r\\n10 15\\r\\n7 14\\r\\n4 1\\r\\n7 11\\r\\n5 3\\r\\n10 7\\r\\n9 1\\r\\n12 16\\r\\n13 11\\r\\n7 12\\r\\n12 2\\r\\n4 13\\r\\n6 7\\r\\n8 12\\r\\n10 9\\r\\n3 16\\r\\n8 15\\r\\n6 1\\r\\n6 7\\r\\n5 14\\r\\n4 10\\r\\n14 2\\r\\n5 3\\r\\n6 5\\r\\n6 5\\r\\n9 13\\r\\n9 14\\r\\n10 15\\r\\n10 6\\r\\n5 3\\r\\n10 5\\r\\n7 13\\r\\n6 11...', 'output': ['5 12 13 1 10 3 6 8 4 2 14 9 7 11 15 16']}, {'input': '16 2001 87\\r\\n13 7\\r\\n12 6\\r\\n10 7\\r\\n1 7\\r\\n15 16\\r\\n16 14\\r\\n2 3\\r\\n5 6\\r\\n10 4\\r\\n15 14\\r\\n13 1\\r\\n6 14\\r\\n2 9\\r\\n2 9\\r\\n16 8\\r\\n14 7\\r\\n4 12\\r\\n5 4\\r\\n8 14\\r\\n13 4\\r\\n2 5\\r\\n6 3\\r\\n5 14\\r\\n11 12\\r\\n10 2\\r\\n16 13\\r\\n1 3\\r\\n1 7\\r\\n15 13\\r\\n15 16\\r\\n14 3\\r\\n16 3\\r\\n8 4\\r\\n2 7\\r\\n4 3\\r\\n4 6\\r\\n1 14\\r\\n6 14\\r\\n9 14\\r\\n1 7\\r\\n1 10\\r\\n8 11\\r...', 'output': ['4 7 15 10 8 13 16 5 9 6 11 12 3 14 1 2']}, {'input': '16 1000000000000000000 0\\r\\n', 'output': ['The times have changed']}, {'input': '16 1000000000000000000 1\\r\\n16 15\\r\\n', 'output': ['The times have changed']}, {'input': '16 1000000000000000000 1\\r\\n2 1\\r\\n', 'output': ['The times have changed']}, {'input': '16 405483668029442000 2\\r\\n16 15\\r\\n15 14\\r\\n', 'output': ['The times have changed']}, {'input': '16 2001 99\\r\\n4 15\\r\\n13 15\\r\\n11 8\\r\\n10 13\\r\\n13 16\\r\\n8 15\\r\\n7 9\\r\\n10 5\\r\\n7 8\\r\\n8 13\\r\\n8 2\\r\\n2 13\\r\\n15 1\\r\\n3 12\\r\\n8 3\\r\\n8 2\\r\\n10 7\\r\\n10 14\\r\\n16 4\\r\\n3 1\\r\\n3 5\\r\\n5 9\\r\\n2 16\\r\\n15 1\\r\\n3 4\\r\\n3 14\\r\\n6 3\\r\\n10 13\\r\\n14 5\\r\\n11 7\\r\\n14 9\\r\\n4 14\\r\\n4 12\\r\\n7 16\\r\\n8 13\\r\\n11 1\\r\\n2 3\\r\\n14 12\\r\\n6 8\\r\\n6 7\\r\\n11 7\\r\\n6 12...', 'output': ['15 6 7 10 14 1 4 5 16 3 2 13 8 11 12 9']}, {'input': '16 2001 94\\r\\n12 13\\r\\n11 1\\r\\n8 3\\r\\n8 11\\r\\n11 5\\r\\n8 2\\r\\n8 9\\r\\n7 15\\r\\n6 11\\r\\n8 6\\r\\n10 13\\r\\n13 11\\r\\n7 5\\r\\n6 3\\r\\n14 2\\r\\n15 10\\r\\n3 4\\r\\n9 1\\r\\n14 10\\r\\n14 15\\r\\n11 1\\r\\n12 15\\r\\n2 10\\r\\n6 5\\r\\n2 6\\r\\n16 2\\r\\n8 7\\r\\n16 6\\r\\n7 2\\r\\n15 9\\r\\n3 15\\r\\n13 5\\r\\n11 4\\r\\n14 10\\r\\n6 11\\r\\n12 10\\r\\n13 4\\r\\n12 6\\r\\n1 4\\r\\n2 10\\r\\n6 15\\r\\n1...', 'output': ['14 5 8 15 16 7 3 2 10 11 13 6 12 1 9 4']}, {'input': '16 2001 97\\r\\n12 6\\r\\n13 8\\r\\n7 15\\r\\n11 3\\r\\n2 3\\r\\n9 15\\r\\n4 7\\r\\n10 8\\r\\n3 1\\r\\n11 10\\r\\n2 14\\r\\n4 7\\r\\n9 2\\r\\n16 8\\r\\n11 12\\r\\n6 2\\r\\n15 14\\r\\n8 7\\r\\n2 10\\r\\n9 6\\r\\n6 4\\r\\n13 11\\r\\n12 6\\r\\n1 4\\r\\n8 4\\r\\n6 1\\r\\n16 14\\r\\n12 2\\r\\n6 14\\r\\n1 14\\r\\n11 6\\r\\n11 16\\r\\n1 5\\r\\n10 16\\r\\n5 16\\r\\n11 3\\r\\n2 4\\r\\n3 14\\r\\n11 10\\r\\n13 5\\r\\n12 16\\r\\n1 ...', 'output': ['8 6 7 13 9 5 14 12 3 10 2 4 1 16 15 11']}, {'input': '16 2001 95\\r\\n6 9\\r\\n5 3\\r\\n7 16\\r\\n11 14\\r\\n2 5\\r\\n13 10\\r\\n2 1\\r\\n8 6\\r\\n7 10\\r\\n12 7\\r\\n12 13\\r\\n2 4\\r\\n3 10\\r\\n7 13\\r\\n1 8\\r\\n14 6\\r\\n1 4\\r\\n7 14\\r\\n1 15\\r\\n7 14\\r\\n11 13\\r\\n13 5\\r\\n3 14\\r\\n11 12\\r\\n11 1\\r\\n5 15\\r\\n16 14\\r\\n14 6\\r\\n16 13\\r\\n8 6\\r\\n14 10\\r\\n14 1\\r\\n16 9\\r\\n14 8\\r\\n13 3\\r\\n15 8\\r\\n7 10\\r\\n11 7\\r\\n4 10\\r\\n11 4\\r\\n11 2...', 'output': ['10 5 8 14 7 13 3 12 15 16 1 2 6 9 11 4']}, {'input': '16 2001 93\\r\\n12 13\\r\\n13 11\\r\\n10 2\\r\\n5 9\\r\\n1 15\\r\\n11 9\\r\\n8 9\\r\\n6 9\\r\\n15 11\\r\\n16 14\\r\\n14 2\\r\\n8 13\\r\\n1 2\\r\\n14 8\\r\\n14 8\\r\\n14 4\\r\\n1 15\\r\\n1 9\\r\\n16 11\\r\\n2 9\\r\\n14 10\\r\\n2 3\\r\\n10 6\\r\\n12 5\\r\\n15 6\\r\\n10 7\\r\\n12 5\\r\\n6 5\\r\\n7 1\\r\\n3 5\\r\\n7 13\\r\\n6 9\\r\\n8 3\\r\\n8 4\\r\\n3 4\\r\\n12 5\\r\\n13 6\\r\\n16 11\\r\\n8 13\\r\\n2 12\\r\\n4 12\\r\\n5 9\\r...', 'output': ['6 7 8 9 14 13 4 5 16 3 15 10 11 2 12 1']}, {'input': '16 2001 97\\r\\n12 3\\r\\n10 2\\r\\n14 9\\r\\n4 7\\r\\n9 7\\r\\n8 13\\r\\n3 15\\r\\n9 8\\r\\n13 2\\r\\n4 7\\r\\n5 14\\r\\n9 1\\r\\n5 10\\r\\n6 4\\r\\n13 12\\r\\n2 15\\r\\n7 1\\r\\n2 4\\r\\n16 12\\r\\n7 12\\r\\n5 9\\r\\n7 15\\r\\n8 3\\r\\n9 4\\r\\n14 12\\r\\n4 15\\r\\n12 15\\r\\n2 12\\r\\n13 6\\r\\n8 16\\r\\n2 11\\r\\n7 1\\r\\n9 7\\r\\n5 3\\r\\n4 15\\r\\n16 11\\r\\n13 1\\r\\n7 16\\r\\n5 11\\r\\n10 9\\r\\n4 1\\r\\n1 16\\r\\n4...', 'output': ['11 7 14 9 1 8 10 5 4 3 15 13 6 2 16 12']}, {'input': '16 2001 96\\r\\n12 16\\r\\n1 7\\r\\n5 4\\r\\n13 12\\r\\n6 12\\r\\n11 16\\r\\n16 7\\r\\n1 14\\r\\n2 11\\r\\n3 11\\r\\n6 3\\r\\n3 10\\r\\n13 3\\r\\n5 1\\r\\n4 12\\r\\n10 11\\r\\n9 5\\r\\n6 15\\r\\n3 2\\r\\n8 12\\r\\n13 8\\r\\n4 6\\r\\n5 1\\r\\n15 7\\r\\n15 12\\r\\n5 1\\r\\n1 11\\r\\n5 15\\r\\n5 15\\r\\n12 16\\r\\n10 14\\r\\n9 11\\r\\n4 2\\r\\n15 11\\r\\n6 8\\r\\n5 3\\r\\n1 4\\r\\n13 6\\r\\n12 3\\r\\n10 7\\r\\n13 15\\r\\n1...', 'output': ['4 11 10 5 2 6 15 7 1 12 13 9 3 16 8 14']}]", "source_code": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nimport java.util.Arrays;\nimport java.util.List;\nimport static java.util.stream.Collectors.joining;\nimport static java.util.stream.Collectors.toList;\n\n/**\n *\n * @author Humberto Aduarte Correa\n */\npublic class Solution {\n\n    \n    \n    public static void main(String[] args) {\n        \n        int n = 0, m = 0, y = 0;\n        int[] res = new int [16];\n        \n        String []str_input = new String [17];\n        \n        str_input = java.util.Arrays.stream(java.util.Arrays.copyOfRange(System.console().readLine().split(\" \", 0), 1, 17)).map(String::trim).map(t -> String.valueOf(t.charAt(0))).toArray(String[]::new);\n        \n        n = Integer.valueOf(str_input[0]);\n        m = Integer.valueOf(str_input[2]);\n        y = Integer.valueOf(str_input[1]);\n        \n        int x,y2;\n        \n        for(int i=0; i < 16; ++i)\n            res[i] = i+1;\n        \n        String temp=\"\";\n        \n        while(m > 0){\n            m--;\n            y2 = 0;\n            for(int i = 0; i < n-1; i++){\n                for(int j = i+1; j < n; ++j){\n                    if(res[i] > res[j]){\n                        temp = Integer.toString(res[i]);\n                        res[i] = res[j];\n                        res[j] = Integer.valueOf(temp);\n                        y2 = 1;\n                    }\n                }\n            }\n            \n            x = Integer.valueOf(str_input[m*3+1]);\n            y2 = Integer.valueOf(str_input[m*3]);\n            \n            for(int i = 0; i < n; ++i){\n                if(res[i] == x)\n                    y2 = i;\n            }\n            \n            for(int i = 0; i < n-1; i++){\n                if(i == y2)\n                    continue;\n                for(int j = i+1; j < n; ++j){\n                    if(res[i] > res[j]){\n                        temp = Integer.toString(res[i]);\n                        res[i] = res[j];\n                        res[j] = Integer.valueOf(temp);\n                    }\n                }\n            }\n            if(y2 > y){\n                System.out.println(\"The times have changed\");\n                return;\n            }\n        }\n        \n        temp = String.valueOf(res[0]);\n        for(int i = 1; i < n; ++i){\n            temp = temp + \" \" + Integer.toString(res[i]);\n        }\n        long[] out = new long [n];\n        out[0] = Long.valueOf(str_input[0]);\n        for(int i = 1; i < n; ++i){\n            out[i] = Long.valueOf(str_input[i]);\n        }\n        while(java.util.Arrays.stream(out).sum() < y){\n            ++out[0];\n            for(int i = 1; i < n; ++i){\n                if(out[i-1] == out[i])\n                    ++out[i];\n            }\n        }\n        \n        temp = String.valueOf(out[0]);\n        for(int i = 1; i < n; ++i){\n            temp = temp + \" \" + Long.toString(out[i]);\n        }\n        temp = temp + \" \" + str_input[n];\n        System.out.println(temp);\n       \n    }\n}\n"}
{"src_uid": "e9db8d048e9763cf38c584342dea9f53", "id": 101, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2400, "testcases": "[{'input': '3 2001 2\\r\\n1 2\\r\\n2 3\\r\\n', 'output': ['1 2 3']}, {'input': '7 2020 6\\r\\n1 2\\r\\n1 3\\r\\n2 4\\r\\n2 5\\r\\n3 6\\r\\n3 7\\r\\n', 'output': ['1 2 3 7 4 6 5']}, {'input': '10 3630801 0\\r\\n', 'output': ['The times have changed']}, {'input': '3 2001 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['The times have changed']}, {'input': '5 2030 13\\r\\n5 2\\r\\n2 3\\r\\n2 4\\r\\n5 3\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n2 3\\r\\n2 3\\r\\n5 2\\r\\n2 4\\r\\n3 4\\r\\n5 4\\r\\n', 'output': ['The times have changed']}, {'input': '5 2019 12\\r\\n4 1\\r\\n1 2\\r\\n4 2\\r\\n4 3\\r\\n5 3\\r\\n5 1\\r\\n3 2\\r\\n4 2\\r\\n1 2\\r\\n1 3\\r\\n5 1\\r\\n1 3\\r\\n', 'output': ['The times have changed']}, {'input': '8 2004 6\\r\\n7 4\\r\\n6 4\\r\\n7 5\\r\\n5 8\\r\\n8 4\\r\\n8 2\\r\\n', 'output': ['1 6 2 8 4 7 3 5']}, {'input': '6 2004 18\\r\\n1 3\\r\\n2 1\\r\\n6 2\\r\\n5 1\\r\\n4 6\\r\\n5 1\\r\\n2 3\\r\\n6 2\\r\\n6 1\\r\\n2 1\\r\\n4 1\\r\\n2 3\\r\\n5 1\\r\\n2 1\\r\\n4 6\\r\\n5 2\\r\\n1 3\\r\\n5 6\\r\\n', 'output': ['The times have changed']}, {'input': '7 2035 5\\r\\n5 2\\r\\n3 2\\r\\n4 2\\r\\n4 2\\r\\n3 1\\r\\n', 'output': ['2 7 1 6 3 4 5']}, {'input': '16 20922789890000 0\\r\\n', 'output': ['16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1']}, {'input': '10 2001 13\\r\\n8 3\\r\\n7 6\\r\\n5 7\\r\\n2 1\\r\\n1 4\\r\\n5 10\\r\\n7 6\\r\\n6 1\\r\\n1 8\\r\\n3 10\\r\\n5 1\\r\\n5 8\\r\\n1 3\\r\\n', 'output': ['5 1 7 8 2 4 3 6 9 10']}, {'input': '10 2670 33\\r\\n5 7\\r\\n4 10\\r\\n5 9\\r\\n5 9\\r\\n7 8\\r\\n9 10\\r\\n4 6\\r\\n4 6\\r\\n1 8\\r\\n10 3\\r\\n4 7\\r\\n9 8\\r\\n6 1\\r\\n6 5\\r\\n10 1\\r\\n9 10\\r\\n4 6\\r\\n8 2\\r\\n6 9\\r\\n6 8\\r\\n6 5\\r\\n10 3\\r\\n6 2\\r\\n3 1\\r\\n7 9\\r\\n5 2\\r\\n4 10\\r\\n6 3\\r\\n6 2\\r\\n5 3\\r\\n3 1\\r\\n6 8\\r\\n6 2\\r\\n', 'output': ['The times have changed']}, {'input': '14 2001 22\\r\\n11 5\\r\\n14 6\\r\\n2 5\\r\\n2 4\\r\\n2 3\\r\\n7 2\\r\\n1 5\\r\\n7 3\\r\\n6 8\\r\\n1 5\\r\\n6 7\\r\\n1 10\\r\\n3 5\\r\\n4 1\\r\\n14 7\\r\\n7 8\\r\\n4 8\\r\\n1 11\\r\\n12 1\\r\\n10 11\\r\\n11 3\\r\\n8 3\\r\\n', 'output': ['7 4 11 5 12 2 3 8 13 9 10 6 14 1']}, {'input': '10 2001 32\\r\\n1 3\\r\\n2 9\\r\\n5 3\\r\\n9 5\\r\\n9 3\\r\\n6 9\\r\\n6 3\\r\\n5 8\\r\\n2 7\\r\\n2 7\\r\\n8 7\\r\\n5 4\\r\\n1 6\\r\\n4 8\\r\\n8 3\\r\\n9 8\\r\\n1 5\\r\\n5 10\\r\\n2 4\\r\\n2 6\\r\\n9 10\\r\\n1 4\\r\\n1 6\\r\\n4 7\\r\\n9 10\\r\\n9 5\\r\\n9 3\\r\\n6 10\\r\\n6 9\\r\\n10 7\\r\\n1 7\\r\\n1 2\\r\\n', 'output': ['1 2 8 6 5 3 10 7 4 9']}, {'input': '15 2001 8\\r\\n9 2\\r\\n4 8\\r\\n12 13\\r\\n6 7\\r\\n12 4\\r\\n7 2\\r\\n6 13\\r\\n4 11\\r\\n', 'output': ['1 5 6 8 9 2 3 10 4 11 12 7 13 14 15']}, {'input': '14 2001 15\\r\\n12 3\\r\\n5 6\\r\\n11 3\\r\\n6 7\\r\\n3 6\\r\\n5 13\\r\\n11 2\\r\\n1 2\\r\\n14 3\\r\\n1 2\\r\\n8 4\\r\\n13 8\\r\\n3 7\\r\\n5 11\\r\\n8 9\\r\\n', 'output': ['1 4 7 10 2 11 12 9 13 14 3 5 8 6']}, {'input': '14 11414 33\\r\\n11 14\\r\\n11 8\\r\\n3 5\\r\\n14 6\\r\\n3 1\\r\\n9 13\\r\\n11 4\\r\\n11 8\\r\\n4 6\\r\\n6 2\\r\\n3 10\\r\\n10 1\\r\\n11 9\\r\\n10 5\\r\\n9 8\\r\\n6 12\\r\\n10 5\\r\\n9 10\\r\\n8 13\\r\\n9 11\\r\\n8 10\\r\\n8 9\\r\\n14 3\\r\\n7 1\\r\\n5 13\\r\\n13 8\\r\\n4 8\\r\\n1 6\\r\\n1 8\\r\\n8 2\\r\\n6 7\\r\\n10 14\\r\\n2 1\\r\\n', 'output': ['The times have changed']}, {'input': '13 3651 42\\r\\n8 4\\r\\n13 7\\r\\n8 5\\r\\n6 2\\r\\n7 13\\r\\n12 10\\r\\n7 9\\r\\n9 4\\r\\n3 4\\r\\n8 1\\r\\n12 6\\r\\n3 4\\r\\n7 1\\r\\n4 1\\r\\n7 5\\r\\n2 5\\r\\n2 7\\r\\n6 11\\r\\n9 8\\r\\n3 2\\r\\n11 12\\r\\n1 2\\r\\n7 12\\r\\n8 11\\r\\n11 13\\r\\n10 12\\r\\n11 1\\r\\n8 2\\r\\n9 7\\r\\n6 13\\r\\n8 12\\r\\n10 1\\r\\n2 12\\r\\n1 2\\r\\n8 7\\r\\n6 8\\r\\n1 8\\r\\n3 12\\r\\n13 6\\r\\n7 13\\r\\n5 4\\r\\n7 8\\r\\n', 'output': ['The times have changed']}, {'input': '11 2001 34\\r\\n2 1\\r\\n7 5\\r\\n9 8\\r\\n5 2\\r\\n9 5\\r\\n9 1\\r\\n9 11\\r\\n1 5\\r\\n7 2\\r\\n9 1\\r\\n4 7\\r\\n3 11\\r\\n9 7\\r\\n2 1\\r\\n3 7\\r\\n7 3\\r\\n7 6\\r\\n8 1\\r\\n1 9\\r\\n11 8\\r\\n8 4\\r\\n8 9\\r\\n7 11\\r\\n7 5\\r\\n9 11\\r\\n7 9\\r\\n8 11\\r\\n8 7\\r\\n4 2\\r\\n7 4\\r\\n2 4\\r\\n6 1\\r\\n4 10\\r\\n11 2\\r\\n', 'output': ['The times have changed']}, {'input': '13 2001 5\\r\\n8 6\\r\\n11 2\\r\\n13 8\\r\\n6 3\\r\\n3 12\\r\\n', 'output': ['1 3 7 8 9 6 10 5 11 12 2 13 4']}, {'input': '16 2001 68\\r\\n16 15\\r\\n16 6\\r\\n4 1\\r\\n14 15\\r\\n13 5\\r\\n1 8\\r\\n1 5\\r\\n12 10\\r\\n3 11\\r\\n8 7\\r\\n6 5\\r\\n4 3\\r\\n5 11\\r\\n6 14\\r\\n13 5\\r\\n6 4\\r\\n10 7\\r\\n10 8\\r\\n9 15\\r\\n2 4\\r\\n5 15\\r\\n5 14\\r\\n12 4\\r\\n12 8\\r\\n10 1\\r\\n12 2\\r\\n11 7\\r\\n2 9\\r\\n10 16\\r\\n16 2\\r\\n13 10\\r\\n2 15\\r\\n11 15\\r\\n16 4\\r\\n13 2\\r\\n10 6\\r\\n1 9\\r\\n16 6\\r\\n13 1\\r\\n1 9\\r\\n4 3\\r\\n8 7...', 'output': ['8 6 9 7 11 5 14 10 15 3 12 1 2 13 16 4']}, {'input': '16 919540 100\\r\\n3 8\\r\\n3 10\\r\\n10 1\\r\\n1 14\\r\\n13 3\\r\\n9 13\\r\\n14 6\\r\\n5 3\\r\\n8 4\\r\\n14 12\\r\\n16 1\\r\\n13 10\\r\\n2 10\\r\\n9 12\\r\\n5 10\\r\\n8 12\\r\\n7 14\\r\\n15 11\\r\\n2 6\\r\\n5 3\\r\\n15 16\\r\\n8 14\\r\\n5 7\\r\\n15 14\\r\\n5 14\\r\\n8 6\\r\\n8 7\\r\\n7 6\\r\\n10 1\\r\\n7 15\\r\\n9 12\\r\\n11 14\\r\\n2 7\\r\\n3 7\\r\\n3 10\\r\\n9 13\\r\\n5 2\\r\\n16 11\\r\\n10 1\\r\\n4 16\\r\\n4 2\\r\\n...', 'output': ['The times have changed']}, {'input': '16 2005 99\\r\\n13 11\\r\\n12 10\\r\\n15 11\\r\\n10 15\\r\\n7 10\\r\\n15 14\\r\\n10 14\\r\\n13 3\\r\\n7 3\\r\\n11 8\\r\\n6 14\\r\\n16 13\\r\\n7 2\\r\\n4 8\\r\\n6 11\\r\\n9 6\\r\\n9 1\\r\\n16 4\\r\\n14 3\\r\\n6 14\\r\\n2 8\\r\\n15 6\\r\\n9 13\\r\\n7 9\\r\\n15 13\\r\\n14 16\\r\\n3 5\\r\\n8 5\\r\\n9 15\\r\\n16 5\\r\\n13 2\\r\\n10 15\\r\\n16 13\\r\\n14 1\\r\\n12 9\\r\\n14 13\\r\\n7 11\\r\\n11 2\\r\\n14 4\\r\\n3 11\\r\\n...', 'output': ['The times have changed']}, {'input': '16 2046 84\\r\\n2 15\\r\\n1 10\\r\\n7 1\\r\\n1 10\\r\\n5 8\\r\\n8 10\\r\\n11 14\\r\\n8 13\\r\\n7 15\\r\\n16 15\\r\\n6 12\\r\\n12 15\\r\\n10 15\\r\\n10 9\\r\\n1 10\\r\\n5 10\\r\\n1 4\\r\\n7 13\\r\\n5 9\\r\\n3 13\\r\\n2 14\\r\\n5 15\\r\\n13 6\\r\\n7 16\\r\\n16 12\\r\\n2 12\\r\\n5 6\\r\\n8 16\\r\\n12 11\\r\\n1 2\\r\\n2 16\\r\\n5 14\\r\\n2 16\\r\\n5 2\\r\\n4 6\\r\\n2 16\\r\\n7 1\\r\\n13 11\\r\\n7 13\\r\\n1 2\\r\\n3 6\\r\\n5...', 'output': ['The times have changed']}, {'input': '16 2001 82\\r\\n12 11\\r\\n9 11\\r\\n3 5\\r\\n12 3\\r\\n9 7\\r\\n16 15\\r\\n15 4\\r\\n15 11\\r\\n14 7\\r\\n11 10\\r\\n4 1\\r\\n11 13\\r\\n15 6\\r\\n4 13\\r\\n3 11\\r\\n10 4\\r\\n10 14\\r\\n7 5\\r\\n15 4\\r\\n12 6\\r\\n16 8\\r\\n3 9\\r\\n3 11\\r\\n6 8\\r\\n13 5\\r\\n15 2\\r\\n11 5\\r\\n2 8\\r\\n16 12\\r\\n1 2\\r\\n3 8\\r\\n16 14\\r\\n16 3\\r\\n8 14\\r\\n15 11\\r\\n16 2\\r\\n3 4\\r\\n16 5\\r\\n12 8\\r\\n10 4\\r\\n6 11...', 'output': ['10 11 3 9 16 6 14 12 5 8 7 2 15 13 4 1']}, {'input': '16 2001 65\\r\\n12 9\\r\\n4 11\\r\\n10 12\\r\\n6 12\\r\\n14 2\\r\\n13 2\\r\\n8 13\\r\\n3 11\\r\\n8 6\\r\\n8 13\\r\\n1 2\\r\\n11 8\\r\\n2 16\\r\\n2 10\\r\\n15 4\\r\\n3 8\\r\\n10 16\\r\\n5 7\\r\\n8 16\\r\\n10 7\\r\\n8 2\\r\\n8 9\\r\\n1 16\\r\\n15 10\\r\\n3 12\\r\\n12 7\\r\\n15 16\\r\\n3 8\\r\\n4 1\\r\\n13 7\\r\\n11 1\\r\\n14 3\\r\\n7 9\\r\\n13 5\\r\\n11 12\\r\\n3 5\\r\\n4 7\\r\\n14 1\\r\\n3 13\\r\\n9 16\\r\\n15 14\\r\\n11...', 'output': ['8 10 3 4 12 9 14 6 15 11 5 13 7 2 1 16']}, {'input': '16 2001 99\\r\\n13 12\\r\\n3 16\\r\\n4 11\\r\\n5 7\\r\\n2 13\\r\\n7 14\\r\\n5 2\\r\\n5 3\\r\\n4 13\\r\\n9 3\\r\\n7 14\\r\\n13 15\\r\\n6 13\\r\\n14 15\\r\\n5 16\\r\\n10 16\\r\\n6 5\\r\\n2 8\\r\\n1 6\\r\\n4 11\\r\\n6 3\\r\\n7 12\\r\\n9 16\\r\\n3 10\\r\\n6 11\\r\\n5 15\\r\\n4 6\\r\\n14 16\\r\\n9 2\\r\\n13 7\\r\\n3 8\\r\\n15 3\\r\\n6 2\\r\\n10 12\\r\\n4 6\\r\\n1 5\\r\\n4 7\\r\\n7 14\\r\\n5 11\\r\\n3 12\\r\\n13 7\\r\\n14 10\\r...', 'output': ['1 6 11 2 5 3 8 14 4 12 15 16 7 9 10 13']}, {'input': '16 2001 69\\r\\n2 15\\r\\n10 6\\r\\n10 11\\r\\n3 11\\r\\n6 7\\r\\n1 15\\r\\n6 1\\r\\n1 13\\r\\n13 5\\r\\n10 15\\r\\n7 14\\r\\n4 1\\r\\n7 11\\r\\n5 3\\r\\n10 7\\r\\n9 1\\r\\n12 16\\r\\n13 11\\r\\n7 12\\r\\n12 2\\r\\n4 13\\r\\n6 7\\r\\n8 12\\r\\n10 9\\r\\n3 16\\r\\n8 15\\r\\n6 1\\r\\n6 7\\r\\n5 14\\r\\n4 10\\r\\n14 2\\r\\n5 3\\r\\n6 5\\r\\n6 5\\r\\n9 13\\r\\n9 14\\r\\n10 15\\r\\n10 6\\r\\n5 3\\r\\n10 5\\r\\n7 13\\r\\n6 11...', 'output': ['5 12 13 1 10 3 6 8 4 2 14 9 7 11 15 16']}, {'input': '16 2001 87\\r\\n13 7\\r\\n12 6\\r\\n10 7\\r\\n1 7\\r\\n15 16\\r\\n16 14\\r\\n2 3\\r\\n5 6\\r\\n10 4\\r\\n15 14\\r\\n13 1\\r\\n6 14\\r\\n2 9\\r\\n2 9\\r\\n16 8\\r\\n14 7\\r\\n4 12\\r\\n5 4\\r\\n8 14\\r\\n13 4\\r\\n2 5\\r\\n6 3\\r\\n5 14\\r\\n11 12\\r\\n10 2\\r\\n16 13\\r\\n1 3\\r\\n1 7\\r\\n15 13\\r\\n15 16\\r\\n14 3\\r\\n16 3\\r\\n8 4\\r\\n2 7\\r\\n4 3\\r\\n4 6\\r\\n1 14\\r\\n6 14\\r\\n9 14\\r\\n1 7\\r\\n1 10\\r\\n8 11\\r...', 'output': ['4 7 15 10 8 13 16 5 9 6 11 12 3 14 1 2']}, {'input': '16 1000000000000000000 0\\r\\n', 'output': ['The times have changed']}, {'input': '16 1000000000000000000 1\\r\\n16 15\\r\\n', 'output': ['The times have changed']}, {'input': '16 1000000000000000000 1\\r\\n2 1\\r\\n', 'output': ['The times have changed']}, {'input': '16 405483668029442000 2\\r\\n16 15\\r\\n15 14\\r\\n', 'output': ['The times have changed']}, {'input': '16 2001 99\\r\\n4 15\\r\\n13 15\\r\\n11 8\\r\\n10 13\\r\\n13 16\\r\\n8 15\\r\\n7 9\\r\\n10 5\\r\\n7 8\\r\\n8 13\\r\\n8 2\\r\\n2 13\\r\\n15 1\\r\\n3 12\\r\\n8 3\\r\\n8 2\\r\\n10 7\\r\\n10 14\\r\\n16 4\\r\\n3 1\\r\\n3 5\\r\\n5 9\\r\\n2 16\\r\\n15 1\\r\\n3 4\\r\\n3 14\\r\\n6 3\\r\\n10 13\\r\\n14 5\\r\\n11 7\\r\\n14 9\\r\\n4 14\\r\\n4 12\\r\\n7 16\\r\\n8 13\\r\\n11 1\\r\\n2 3\\r\\n14 12\\r\\n6 8\\r\\n6 7\\r\\n11 7\\r\\n6 12...', 'output': ['15 6 7 10 14 1 4 5 16 3 2 13 8 11 12 9']}, {'input': '16 2001 94\\r\\n12 13\\r\\n11 1\\r\\n8 3\\r\\n8 11\\r\\n11 5\\r\\n8 2\\r\\n8 9\\r\\n7 15\\r\\n6 11\\r\\n8 6\\r\\n10 13\\r\\n13 11\\r\\n7 5\\r\\n6 3\\r\\n14 2\\r\\n15 10\\r\\n3 4\\r\\n9 1\\r\\n14 10\\r\\n14 15\\r\\n11 1\\r\\n12 15\\r\\n2 10\\r\\n6 5\\r\\n2 6\\r\\n16 2\\r\\n8 7\\r\\n16 6\\r\\n7 2\\r\\n15 9\\r\\n3 15\\r\\n13 5\\r\\n11 4\\r\\n14 10\\r\\n6 11\\r\\n12 10\\r\\n13 4\\r\\n12 6\\r\\n1 4\\r\\n2 10\\r\\n6 15\\r\\n1...', 'output': ['14 5 8 15 16 7 3 2 10 11 13 6 12 1 9 4']}, {'input': '16 2001 97\\r\\n12 6\\r\\n13 8\\r\\n7 15\\r\\n11 3\\r\\n2 3\\r\\n9 15\\r\\n4 7\\r\\n10 8\\r\\n3 1\\r\\n11 10\\r\\n2 14\\r\\n4 7\\r\\n9 2\\r\\n16 8\\r\\n11 12\\r\\n6 2\\r\\n15 14\\r\\n8 7\\r\\n2 10\\r\\n9 6\\r\\n6 4\\r\\n13 11\\r\\n12 6\\r\\n1 4\\r\\n8 4\\r\\n6 1\\r\\n16 14\\r\\n12 2\\r\\n6 14\\r\\n1 14\\r\\n11 6\\r\\n11 16\\r\\n1 5\\r\\n10 16\\r\\n5 16\\r\\n11 3\\r\\n2 4\\r\\n3 14\\r\\n11 10\\r\\n13 5\\r\\n12 16\\r\\n1 ...', 'output': ['8 6 7 13 9 5 14 12 3 10 2 4 1 16 15 11']}, {'input': '16 2001 95\\r\\n6 9\\r\\n5 3\\r\\n7 16\\r\\n11 14\\r\\n2 5\\r\\n13 10\\r\\n2 1\\r\\n8 6\\r\\n7 10\\r\\n12 7\\r\\n12 13\\r\\n2 4\\r\\n3 10\\r\\n7 13\\r\\n1 8\\r\\n14 6\\r\\n1 4\\r\\n7 14\\r\\n1 15\\r\\n7 14\\r\\n11 13\\r\\n13 5\\r\\n3 14\\r\\n11 12\\r\\n11 1\\r\\n5 15\\r\\n16 14\\r\\n14 6\\r\\n16 13\\r\\n8 6\\r\\n14 10\\r\\n14 1\\r\\n16 9\\r\\n14 8\\r\\n13 3\\r\\n15 8\\r\\n7 10\\r\\n11 7\\r\\n4 10\\r\\n11 4\\r\\n11 2...', 'output': ['10 5 8 14 7 13 3 12 15 16 1 2 6 9 11 4']}, {'input': '16 2001 93\\r\\n12 13\\r\\n13 11\\r\\n10 2\\r\\n5 9\\r\\n1 15\\r\\n11 9\\r\\n8 9\\r\\n6 9\\r\\n15 11\\r\\n16 14\\r\\n14 2\\r\\n8 13\\r\\n1 2\\r\\n14 8\\r\\n14 8\\r\\n14 4\\r\\n1 15\\r\\n1 9\\r\\n16 11\\r\\n2 9\\r\\n14 10\\r\\n2 3\\r\\n10 6\\r\\n12 5\\r\\n15 6\\r\\n10 7\\r\\n12 5\\r\\n6 5\\r\\n7 1\\r\\n3 5\\r\\n7 13\\r\\n6 9\\r\\n8 3\\r\\n8 4\\r\\n3 4\\r\\n12 5\\r\\n13 6\\r\\n16 11\\r\\n8 13\\r\\n2 12\\r\\n4 12\\r\\n5 9\\r...', 'output': ['6 7 8 9 14 13 4 5 16 3 15 10 11 2 12 1']}, {'input': '16 2001 97\\r\\n12 3\\r\\n10 2\\r\\n14 9\\r\\n4 7\\r\\n9 7\\r\\n8 13\\r\\n3 15\\r\\n9 8\\r\\n13 2\\r\\n4 7\\r\\n5 14\\r\\n9 1\\r\\n5 10\\r\\n6 4\\r\\n13 12\\r\\n2 15\\r\\n7 1\\r\\n2 4\\r\\n16 12\\r\\n7 12\\r\\n5 9\\r\\n7 15\\r\\n8 3\\r\\n9 4\\r\\n14 12\\r\\n4 15\\r\\n12 15\\r\\n2 12\\r\\n13 6\\r\\n8 16\\r\\n2 11\\r\\n7 1\\r\\n9 7\\r\\n5 3\\r\\n4 15\\r\\n16 11\\r\\n13 1\\r\\n7 16\\r\\n5 11\\r\\n10 9\\r\\n4 1\\r\\n1 16\\r\\n4...', 'output': ['11 7 14 9 1 8 10 5 4 3 15 13 6 2 16 12']}, {'input': '16 2001 96\\r\\n12 16\\r\\n1 7\\r\\n5 4\\r\\n13 12\\r\\n6 12\\r\\n11 16\\r\\n16 7\\r\\n1 14\\r\\n2 11\\r\\n3 11\\r\\n6 3\\r\\n3 10\\r\\n13 3\\r\\n5 1\\r\\n4 12\\r\\n10 11\\r\\n9 5\\r\\n6 15\\r\\n3 2\\r\\n8 12\\r\\n13 8\\r\\n4 6\\r\\n5 1\\r\\n15 7\\r\\n15 12\\r\\n5 1\\r\\n1 11\\r\\n5 15\\r\\n5 15\\r\\n12 16\\r\\n10 14\\r\\n9 11\\r\\n4 2\\r\\n15 11\\r\\n6 8\\r\\n5 3\\r\\n1 4\\r\\n13 6\\r\\n12 3\\r\\n10 7\\r\\n13 15\\r\\n1...', 'output': ['4 11 10 5 2 6 15 7 1 12 13 9 3 16 8 14']}]", "source_code": "import java.util.*;\n\npublic class HelloWorld {\n\n    \n\n    \n    \n    public static void main(String []args){\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt(), y = in.nextInt(), m = in.nextInt();\n        int[] p = new int[n], q = new int[n], pos = new int[n];\n        int x, t, i, j;\n        for(i=0; i<n; i++)\n            pos[i] = i;\n        for(i=0; i<m; i++){\n            x = in.nextInt();\n            y = in.nextInt();\n            p[x-1]++;\n            q[y-1]++;\n        }\n        int[] s = new int[n];\n        s[0] = 0;\n        for(i=1; i<n; i++)\n            s[i] = s[i-1] + q[i-1];\n        for(i=0; i<n; i++){\n            t = 0;\n            for(j=0; j<n; j++){\n                if(p[pos[j]] < s[n-1-j] && q[pos[j]] > t)\n                    t = q[pos[j]], x = pos[j];\n            }\n            if(t == 0)\n                break;\n            for(j=0; j<n; j++){\n                if(pos[j] == x)\n                    pos[j] = n-1;\n                else if(pos[j] > x)\n                    pos[j]--;\n            }\n        }\n        if(i == n)\n            System.out.print(\"The times have changed\");\n        else{\n            for(i=0; i<n; i++)\n                System.out.print((i == 0? \"\" : \" \") + pos[i]+1);\n        }\n    }\n}"}
{"src_uid": "e9db8d048e9763cf38c584342dea9f53", "id": 101, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2400, "testcases": "[{'input': '3 2001 2\\r\\n1 2\\r\\n2 3\\r\\n', 'output': ['1 2 3']}, {'input': '7 2020 6\\r\\n1 2\\r\\n1 3\\r\\n2 4\\r\\n2 5\\r\\n3 6\\r\\n3 7\\r\\n', 'output': ['1 2 3 7 4 6 5']}, {'input': '10 3630801 0\\r\\n', 'output': ['The times have changed']}, {'input': '3 2001 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['The times have changed']}, {'input': '5 2030 13\\r\\n5 2\\r\\n2 3\\r\\n2 4\\r\\n5 3\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n2 3\\r\\n2 3\\r\\n5 2\\r\\n2 4\\r\\n3 4\\r\\n5 4\\r\\n', 'output': ['The times have changed']}, {'input': '5 2019 12\\r\\n4 1\\r\\n1 2\\r\\n4 2\\r\\n4 3\\r\\n5 3\\r\\n5 1\\r\\n3 2\\r\\n4 2\\r\\n1 2\\r\\n1 3\\r\\n5 1\\r\\n1 3\\r\\n', 'output': ['The times have changed']}, {'input': '8 2004 6\\r\\n7 4\\r\\n6 4\\r\\n7 5\\r\\n5 8\\r\\n8 4\\r\\n8 2\\r\\n', 'output': ['1 6 2 8 4 7 3 5']}, {'input': '6 2004 18\\r\\n1 3\\r\\n2 1\\r\\n6 2\\r\\n5 1\\r\\n4 6\\r\\n5 1\\r\\n2 3\\r\\n6 2\\r\\n6 1\\r\\n2 1\\r\\n4 1\\r\\n2 3\\r\\n5 1\\r\\n2 1\\r\\n4 6\\r\\n5 2\\r\\n1 3\\r\\n5 6\\r\\n', 'output': ['The times have changed']}, {'input': '7 2035 5\\r\\n5 2\\r\\n3 2\\r\\n4 2\\r\\n4 2\\r\\n3 1\\r\\n', 'output': ['2 7 1 6 3 4 5']}, {'input': '16 20922789890000 0\\r\\n', 'output': ['16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1']}, {'input': '10 2001 13\\r\\n8 3\\r\\n7 6\\r\\n5 7\\r\\n2 1\\r\\n1 4\\r\\n5 10\\r\\n7 6\\r\\n6 1\\r\\n1 8\\r\\n3 10\\r\\n5 1\\r\\n5 8\\r\\n1 3\\r\\n', 'output': ['5 1 7 8 2 4 3 6 9 10']}, {'input': '10 2670 33\\r\\n5 7\\r\\n4 10\\r\\n5 9\\r\\n5 9\\r\\n7 8\\r\\n9 10\\r\\n4 6\\r\\n4 6\\r\\n1 8\\r\\n10 3\\r\\n4 7\\r\\n9 8\\r\\n6 1\\r\\n6 5\\r\\n10 1\\r\\n9 10\\r\\n4 6\\r\\n8 2\\r\\n6 9\\r\\n6 8\\r\\n6 5\\r\\n10 3\\r\\n6 2\\r\\n3 1\\r\\n7 9\\r\\n5 2\\r\\n4 10\\r\\n6 3\\r\\n6 2\\r\\n5 3\\r\\n3 1\\r\\n6 8\\r\\n6 2\\r\\n', 'output': ['The times have changed']}, {'input': '14 2001 22\\r\\n11 5\\r\\n14 6\\r\\n2 5\\r\\n2 4\\r\\n2 3\\r\\n7 2\\r\\n1 5\\r\\n7 3\\r\\n6 8\\r\\n1 5\\r\\n6 7\\r\\n1 10\\r\\n3 5\\r\\n4 1\\r\\n14 7\\r\\n7 8\\r\\n4 8\\r\\n1 11\\r\\n12 1\\r\\n10 11\\r\\n11 3\\r\\n8 3\\r\\n', 'output': ['7 4 11 5 12 2 3 8 13 9 10 6 14 1']}, {'input': '10 2001 32\\r\\n1 3\\r\\n2 9\\r\\n5 3\\r\\n9 5\\r\\n9 3\\r\\n6 9\\r\\n6 3\\r\\n5 8\\r\\n2 7\\r\\n2 7\\r\\n8 7\\r\\n5 4\\r\\n1 6\\r\\n4 8\\r\\n8 3\\r\\n9 8\\r\\n1 5\\r\\n5 10\\r\\n2 4\\r\\n2 6\\r\\n9 10\\r\\n1 4\\r\\n1 6\\r\\n4 7\\r\\n9 10\\r\\n9 5\\r\\n9 3\\r\\n6 10\\r\\n6 9\\r\\n10 7\\r\\n1 7\\r\\n1 2\\r\\n', 'output': ['1 2 8 6 5 3 10 7 4 9']}, {'input': '15 2001 8\\r\\n9 2\\r\\n4 8\\r\\n12 13\\r\\n6 7\\r\\n12 4\\r\\n7 2\\r\\n6 13\\r\\n4 11\\r\\n', 'output': ['1 5 6 8 9 2 3 10 4 11 12 7 13 14 15']}, {'input': '14 2001 15\\r\\n12 3\\r\\n5 6\\r\\n11 3\\r\\n6 7\\r\\n3 6\\r\\n5 13\\r\\n11 2\\r\\n1 2\\r\\n14 3\\r\\n1 2\\r\\n8 4\\r\\n13 8\\r\\n3 7\\r\\n5 11\\r\\n8 9\\r\\n', 'output': ['1 4 7 10 2 11 12 9 13 14 3 5 8 6']}, {'input': '14 11414 33\\r\\n11 14\\r\\n11 8\\r\\n3 5\\r\\n14 6\\r\\n3 1\\r\\n9 13\\r\\n11 4\\r\\n11 8\\r\\n4 6\\r\\n6 2\\r\\n3 10\\r\\n10 1\\r\\n11 9\\r\\n10 5\\r\\n9 8\\r\\n6 12\\r\\n10 5\\r\\n9 10\\r\\n8 13\\r\\n9 11\\r\\n8 10\\r\\n8 9\\r\\n14 3\\r\\n7 1\\r\\n5 13\\r\\n13 8\\r\\n4 8\\r\\n1 6\\r\\n1 8\\r\\n8 2\\r\\n6 7\\r\\n10 14\\r\\n2 1\\r\\n', 'output': ['The times have changed']}, {'input': '13 3651 42\\r\\n8 4\\r\\n13 7\\r\\n8 5\\r\\n6 2\\r\\n7 13\\r\\n12 10\\r\\n7 9\\r\\n9 4\\r\\n3 4\\r\\n8 1\\r\\n12 6\\r\\n3 4\\r\\n7 1\\r\\n4 1\\r\\n7 5\\r\\n2 5\\r\\n2 7\\r\\n6 11\\r\\n9 8\\r\\n3 2\\r\\n11 12\\r\\n1 2\\r\\n7 12\\r\\n8 11\\r\\n11 13\\r\\n10 12\\r\\n11 1\\r\\n8 2\\r\\n9 7\\r\\n6 13\\r\\n8 12\\r\\n10 1\\r\\n2 12\\r\\n1 2\\r\\n8 7\\r\\n6 8\\r\\n1 8\\r\\n3 12\\r\\n13 6\\r\\n7 13\\r\\n5 4\\r\\n7 8\\r\\n', 'output': ['The times have changed']}, {'input': '11 2001 34\\r\\n2 1\\r\\n7 5\\r\\n9 8\\r\\n5 2\\r\\n9 5\\r\\n9 1\\r\\n9 11\\r\\n1 5\\r\\n7 2\\r\\n9 1\\r\\n4 7\\r\\n3 11\\r\\n9 7\\r\\n2 1\\r\\n3 7\\r\\n7 3\\r\\n7 6\\r\\n8 1\\r\\n1 9\\r\\n11 8\\r\\n8 4\\r\\n8 9\\r\\n7 11\\r\\n7 5\\r\\n9 11\\r\\n7 9\\r\\n8 11\\r\\n8 7\\r\\n4 2\\r\\n7 4\\r\\n2 4\\r\\n6 1\\r\\n4 10\\r\\n11 2\\r\\n', 'output': ['The times have changed']}, {'input': '13 2001 5\\r\\n8 6\\r\\n11 2\\r\\n13 8\\r\\n6 3\\r\\n3 12\\r\\n', 'output': ['1 3 7 8 9 6 10 5 11 12 2 13 4']}, {'input': '16 2001 68\\r\\n16 15\\r\\n16 6\\r\\n4 1\\r\\n14 15\\r\\n13 5\\r\\n1 8\\r\\n1 5\\r\\n12 10\\r\\n3 11\\r\\n8 7\\r\\n6 5\\r\\n4 3\\r\\n5 11\\r\\n6 14\\r\\n13 5\\r\\n6 4\\r\\n10 7\\r\\n10 8\\r\\n9 15\\r\\n2 4\\r\\n5 15\\r\\n5 14\\r\\n12 4\\r\\n12 8\\r\\n10 1\\r\\n12 2\\r\\n11 7\\r\\n2 9\\r\\n10 16\\r\\n16 2\\r\\n13 10\\r\\n2 15\\r\\n11 15\\r\\n16 4\\r\\n13 2\\r\\n10 6\\r\\n1 9\\r\\n16 6\\r\\n13 1\\r\\n1 9\\r\\n4 3\\r\\n8 7...', 'output': ['8 6 9 7 11 5 14 10 15 3 12 1 2 13 16 4']}, {'input': '16 919540 100\\r\\n3 8\\r\\n3 10\\r\\n10 1\\r\\n1 14\\r\\n13 3\\r\\n9 13\\r\\n14 6\\r\\n5 3\\r\\n8 4\\r\\n14 12\\r\\n16 1\\r\\n13 10\\r\\n2 10\\r\\n9 12\\r\\n5 10\\r\\n8 12\\r\\n7 14\\r\\n15 11\\r\\n2 6\\r\\n5 3\\r\\n15 16\\r\\n8 14\\r\\n5 7\\r\\n15 14\\r\\n5 14\\r\\n8 6\\r\\n8 7\\r\\n7 6\\r\\n10 1\\r\\n7 15\\r\\n9 12\\r\\n11 14\\r\\n2 7\\r\\n3 7\\r\\n3 10\\r\\n9 13\\r\\n5 2\\r\\n16 11\\r\\n10 1\\r\\n4 16\\r\\n4 2\\r\\n...', 'output': ['The times have changed']}, {'input': '16 2005 99\\r\\n13 11\\r\\n12 10\\r\\n15 11\\r\\n10 15\\r\\n7 10\\r\\n15 14\\r\\n10 14\\r\\n13 3\\r\\n7 3\\r\\n11 8\\r\\n6 14\\r\\n16 13\\r\\n7 2\\r\\n4 8\\r\\n6 11\\r\\n9 6\\r\\n9 1\\r\\n16 4\\r\\n14 3\\r\\n6 14\\r\\n2 8\\r\\n15 6\\r\\n9 13\\r\\n7 9\\r\\n15 13\\r\\n14 16\\r\\n3 5\\r\\n8 5\\r\\n9 15\\r\\n16 5\\r\\n13 2\\r\\n10 15\\r\\n16 13\\r\\n14 1\\r\\n12 9\\r\\n14 13\\r\\n7 11\\r\\n11 2\\r\\n14 4\\r\\n3 11\\r\\n...', 'output': ['The times have changed']}, {'input': '16 2046 84\\r\\n2 15\\r\\n1 10\\r\\n7 1\\r\\n1 10\\r\\n5 8\\r\\n8 10\\r\\n11 14\\r\\n8 13\\r\\n7 15\\r\\n16 15\\r\\n6 12\\r\\n12 15\\r\\n10 15\\r\\n10 9\\r\\n1 10\\r\\n5 10\\r\\n1 4\\r\\n7 13\\r\\n5 9\\r\\n3 13\\r\\n2 14\\r\\n5 15\\r\\n13 6\\r\\n7 16\\r\\n16 12\\r\\n2 12\\r\\n5 6\\r\\n8 16\\r\\n12 11\\r\\n1 2\\r\\n2 16\\r\\n5 14\\r\\n2 16\\r\\n5 2\\r\\n4 6\\r\\n2 16\\r\\n7 1\\r\\n13 11\\r\\n7 13\\r\\n1 2\\r\\n3 6\\r\\n5...', 'output': ['The times have changed']}, {'input': '16 2001 82\\r\\n12 11\\r\\n9 11\\r\\n3 5\\r\\n12 3\\r\\n9 7\\r\\n16 15\\r\\n15 4\\r\\n15 11\\r\\n14 7\\r\\n11 10\\r\\n4 1\\r\\n11 13\\r\\n15 6\\r\\n4 13\\r\\n3 11\\r\\n10 4\\r\\n10 14\\r\\n7 5\\r\\n15 4\\r\\n12 6\\r\\n16 8\\r\\n3 9\\r\\n3 11\\r\\n6 8\\r\\n13 5\\r\\n15 2\\r\\n11 5\\r\\n2 8\\r\\n16 12\\r\\n1 2\\r\\n3 8\\r\\n16 14\\r\\n16 3\\r\\n8 14\\r\\n15 11\\r\\n16 2\\r\\n3 4\\r\\n16 5\\r\\n12 8\\r\\n10 4\\r\\n6 11...', 'output': ['10 11 3 9 16 6 14 12 5 8 7 2 15 13 4 1']}, {'input': '16 2001 65\\r\\n12 9\\r\\n4 11\\r\\n10 12\\r\\n6 12\\r\\n14 2\\r\\n13 2\\r\\n8 13\\r\\n3 11\\r\\n8 6\\r\\n8 13\\r\\n1 2\\r\\n11 8\\r\\n2 16\\r\\n2 10\\r\\n15 4\\r\\n3 8\\r\\n10 16\\r\\n5 7\\r\\n8 16\\r\\n10 7\\r\\n8 2\\r\\n8 9\\r\\n1 16\\r\\n15 10\\r\\n3 12\\r\\n12 7\\r\\n15 16\\r\\n3 8\\r\\n4 1\\r\\n13 7\\r\\n11 1\\r\\n14 3\\r\\n7 9\\r\\n13 5\\r\\n11 12\\r\\n3 5\\r\\n4 7\\r\\n14 1\\r\\n3 13\\r\\n9 16\\r\\n15 14\\r\\n11...', 'output': ['8 10 3 4 12 9 14 6 15 11 5 13 7 2 1 16']}, {'input': '16 2001 99\\r\\n13 12\\r\\n3 16\\r\\n4 11\\r\\n5 7\\r\\n2 13\\r\\n7 14\\r\\n5 2\\r\\n5 3\\r\\n4 13\\r\\n9 3\\r\\n7 14\\r\\n13 15\\r\\n6 13\\r\\n14 15\\r\\n5 16\\r\\n10 16\\r\\n6 5\\r\\n2 8\\r\\n1 6\\r\\n4 11\\r\\n6 3\\r\\n7 12\\r\\n9 16\\r\\n3 10\\r\\n6 11\\r\\n5 15\\r\\n4 6\\r\\n14 16\\r\\n9 2\\r\\n13 7\\r\\n3 8\\r\\n15 3\\r\\n6 2\\r\\n10 12\\r\\n4 6\\r\\n1 5\\r\\n4 7\\r\\n7 14\\r\\n5 11\\r\\n3 12\\r\\n13 7\\r\\n14 10\\r...', 'output': ['1 6 11 2 5 3 8 14 4 12 15 16 7 9 10 13']}, {'input': '16 2001 69\\r\\n2 15\\r\\n10 6\\r\\n10 11\\r\\n3 11\\r\\n6 7\\r\\n1 15\\r\\n6 1\\r\\n1 13\\r\\n13 5\\r\\n10 15\\r\\n7 14\\r\\n4 1\\r\\n7 11\\r\\n5 3\\r\\n10 7\\r\\n9 1\\r\\n12 16\\r\\n13 11\\r\\n7 12\\r\\n12 2\\r\\n4 13\\r\\n6 7\\r\\n8 12\\r\\n10 9\\r\\n3 16\\r\\n8 15\\r\\n6 1\\r\\n6 7\\r\\n5 14\\r\\n4 10\\r\\n14 2\\r\\n5 3\\r\\n6 5\\r\\n6 5\\r\\n9 13\\r\\n9 14\\r\\n10 15\\r\\n10 6\\r\\n5 3\\r\\n10 5\\r\\n7 13\\r\\n6 11...', 'output': ['5 12 13 1 10 3 6 8 4 2 14 9 7 11 15 16']}, {'input': '16 2001 87\\r\\n13 7\\r\\n12 6\\r\\n10 7\\r\\n1 7\\r\\n15 16\\r\\n16 14\\r\\n2 3\\r\\n5 6\\r\\n10 4\\r\\n15 14\\r\\n13 1\\r\\n6 14\\r\\n2 9\\r\\n2 9\\r\\n16 8\\r\\n14 7\\r\\n4 12\\r\\n5 4\\r\\n8 14\\r\\n13 4\\r\\n2 5\\r\\n6 3\\r\\n5 14\\r\\n11 12\\r\\n10 2\\r\\n16 13\\r\\n1 3\\r\\n1 7\\r\\n15 13\\r\\n15 16\\r\\n14 3\\r\\n16 3\\r\\n8 4\\r\\n2 7\\r\\n4 3\\r\\n4 6\\r\\n1 14\\r\\n6 14\\r\\n9 14\\r\\n1 7\\r\\n1 10\\r\\n8 11\\r...', 'output': ['4 7 15 10 8 13 16 5 9 6 11 12 3 14 1 2']}, {'input': '16 1000000000000000000 0\\r\\n', 'output': ['The times have changed']}, {'input': '16 1000000000000000000 1\\r\\n16 15\\r\\n', 'output': ['The times have changed']}, {'input': '16 1000000000000000000 1\\r\\n2 1\\r\\n', 'output': ['The times have changed']}, {'input': '16 405483668029442000 2\\r\\n16 15\\r\\n15 14\\r\\n', 'output': ['The times have changed']}, {'input': '16 2001 99\\r\\n4 15\\r\\n13 15\\r\\n11 8\\r\\n10 13\\r\\n13 16\\r\\n8 15\\r\\n7 9\\r\\n10 5\\r\\n7 8\\r\\n8 13\\r\\n8 2\\r\\n2 13\\r\\n15 1\\r\\n3 12\\r\\n8 3\\r\\n8 2\\r\\n10 7\\r\\n10 14\\r\\n16 4\\r\\n3 1\\r\\n3 5\\r\\n5 9\\r\\n2 16\\r\\n15 1\\r\\n3 4\\r\\n3 14\\r\\n6 3\\r\\n10 13\\r\\n14 5\\r\\n11 7\\r\\n14 9\\r\\n4 14\\r\\n4 12\\r\\n7 16\\r\\n8 13\\r\\n11 1\\r\\n2 3\\r\\n14 12\\r\\n6 8\\r\\n6 7\\r\\n11 7\\r\\n6 12...', 'output': ['15 6 7 10 14 1 4 5 16 3 2 13 8 11 12 9']}, {'input': '16 2001 94\\r\\n12 13\\r\\n11 1\\r\\n8 3\\r\\n8 11\\r\\n11 5\\r\\n8 2\\r\\n8 9\\r\\n7 15\\r\\n6 11\\r\\n8 6\\r\\n10 13\\r\\n13 11\\r\\n7 5\\r\\n6 3\\r\\n14 2\\r\\n15 10\\r\\n3 4\\r\\n9 1\\r\\n14 10\\r\\n14 15\\r\\n11 1\\r\\n12 15\\r\\n2 10\\r\\n6 5\\r\\n2 6\\r\\n16 2\\r\\n8 7\\r\\n16 6\\r\\n7 2\\r\\n15 9\\r\\n3 15\\r\\n13 5\\r\\n11 4\\r\\n14 10\\r\\n6 11\\r\\n12 10\\r\\n13 4\\r\\n12 6\\r\\n1 4\\r\\n2 10\\r\\n6 15\\r\\n1...', 'output': ['14 5 8 15 16 7 3 2 10 11 13 6 12 1 9 4']}, {'input': '16 2001 97\\r\\n12 6\\r\\n13 8\\r\\n7 15\\r\\n11 3\\r\\n2 3\\r\\n9 15\\r\\n4 7\\r\\n10 8\\r\\n3 1\\r\\n11 10\\r\\n2 14\\r\\n4 7\\r\\n9 2\\r\\n16 8\\r\\n11 12\\r\\n6 2\\r\\n15 14\\r\\n8 7\\r\\n2 10\\r\\n9 6\\r\\n6 4\\r\\n13 11\\r\\n12 6\\r\\n1 4\\r\\n8 4\\r\\n6 1\\r\\n16 14\\r\\n12 2\\r\\n6 14\\r\\n1 14\\r\\n11 6\\r\\n11 16\\r\\n1 5\\r\\n10 16\\r\\n5 16\\r\\n11 3\\r\\n2 4\\r\\n3 14\\r\\n11 10\\r\\n13 5\\r\\n12 16\\r\\n1 ...', 'output': ['8 6 7 13 9 5 14 12 3 10 2 4 1 16 15 11']}, {'input': '16 2001 95\\r\\n6 9\\r\\n5 3\\r\\n7 16\\r\\n11 14\\r\\n2 5\\r\\n13 10\\r\\n2 1\\r\\n8 6\\r\\n7 10\\r\\n12 7\\r\\n12 13\\r\\n2 4\\r\\n3 10\\r\\n7 13\\r\\n1 8\\r\\n14 6\\r\\n1 4\\r\\n7 14\\r\\n1 15\\r\\n7 14\\r\\n11 13\\r\\n13 5\\r\\n3 14\\r\\n11 12\\r\\n11 1\\r\\n5 15\\r\\n16 14\\r\\n14 6\\r\\n16 13\\r\\n8 6\\r\\n14 10\\r\\n14 1\\r\\n16 9\\r\\n14 8\\r\\n13 3\\r\\n15 8\\r\\n7 10\\r\\n11 7\\r\\n4 10\\r\\n11 4\\r\\n11 2...', 'output': ['10 5 8 14 7 13 3 12 15 16 1 2 6 9 11 4']}, {'input': '16 2001 93\\r\\n12 13\\r\\n13 11\\r\\n10 2\\r\\n5 9\\r\\n1 15\\r\\n11 9\\r\\n8 9\\r\\n6 9\\r\\n15 11\\r\\n16 14\\r\\n14 2\\r\\n8 13\\r\\n1 2\\r\\n14 8\\r\\n14 8\\r\\n14 4\\r\\n1 15\\r\\n1 9\\r\\n16 11\\r\\n2 9\\r\\n14 10\\r\\n2 3\\r\\n10 6\\r\\n12 5\\r\\n15 6\\r\\n10 7\\r\\n12 5\\r\\n6 5\\r\\n7 1\\r\\n3 5\\r\\n7 13\\r\\n6 9\\r\\n8 3\\r\\n8 4\\r\\n3 4\\r\\n12 5\\r\\n13 6\\r\\n16 11\\r\\n8 13\\r\\n2 12\\r\\n4 12\\r\\n5 9\\r...', 'output': ['6 7 8 9 14 13 4 5 16 3 15 10 11 2 12 1']}, {'input': '16 2001 97\\r\\n12 3\\r\\n10 2\\r\\n14 9\\r\\n4 7\\r\\n9 7\\r\\n8 13\\r\\n3 15\\r\\n9 8\\r\\n13 2\\r\\n4 7\\r\\n5 14\\r\\n9 1\\r\\n5 10\\r\\n6 4\\r\\n13 12\\r\\n2 15\\r\\n7 1\\r\\n2 4\\r\\n16 12\\r\\n7 12\\r\\n5 9\\r\\n7 15\\r\\n8 3\\r\\n9 4\\r\\n14 12\\r\\n4 15\\r\\n12 15\\r\\n2 12\\r\\n13 6\\r\\n8 16\\r\\n2 11\\r\\n7 1\\r\\n9 7\\r\\n5 3\\r\\n4 15\\r\\n16 11\\r\\n13 1\\r\\n7 16\\r\\n5 11\\r\\n10 9\\r\\n4 1\\r\\n1 16\\r\\n4...', 'output': ['11 7 14 9 1 8 10 5 4 3 15 13 6 2 16 12']}, {'input': '16 2001 96\\r\\n12 16\\r\\n1 7\\r\\n5 4\\r\\n13 12\\r\\n6 12\\r\\n11 16\\r\\n16 7\\r\\n1 14\\r\\n2 11\\r\\n3 11\\r\\n6 3\\r\\n3 10\\r\\n13 3\\r\\n5 1\\r\\n4 12\\r\\n10 11\\r\\n9 5\\r\\n6 15\\r\\n3 2\\r\\n8 12\\r\\n13 8\\r\\n4 6\\r\\n5 1\\r\\n15 7\\r\\n15 12\\r\\n5 1\\r\\n1 11\\r\\n5 15\\r\\n5 15\\r\\n12 16\\r\\n10 14\\r\\n9 11\\r\\n4 2\\r\\n15 11\\r\\n6 8\\r\\n5 3\\r\\n1 4\\r\\n13 6\\r\\n12 3\\r\\n10 7\\r\\n13 15\\r\\n1...', 'output': ['4 11 10 5 2 6 15 7 1 12 13 9 3 16 8 14']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Solution implements Runnable {\n    \n    private void solve() throws IOException {\n        int n = reader.nextInt(), m = reader.nextInt(), y = reader.nextInt();\n        \n        long[] a = new long[n], b = new long[n];\n        for (int i = 0; i < m; i++) {\n            a[i] = reader.nextInt() - 1;\n            b[i] = reader.nextInt() - 1;\n        }\n        \n        long cur = 2001, mod = 1, inv = 1;\n        StringBuilder sb = new StringBuilder();\n        while (cur <= y) {\n            mod = (cur - 1) * mod + 1;\n            inv = (inv * (cur - 1)) % mod;\n            cur *= n;\n        }\n        \n        for (int i = 0; i < n; i++) {\n            long newi = (y - 2001) * n + i;\n            newi = newi % mod;\n            if (newi == 0) {\n                newi = mod;\n            }\n            newi = inv * newi % mod;\n            int x = 0;\n            for (; x < m; x++) {\n                if (newi == a[x]) {\n                    newi = b[x];\n                    break;\n                }\n            }\n            for (int j = 0; j < m; j++) {\n                if (newi == a[j]) {\n                    newi = b[j];\n                    break;\n                }\n            }\n            if (newi == i) {\n                sb.append(newi + 1).append(' ');\n            } else {\n                System.out.println(\"The times have changed\");\n                return;\n            }\n        }\n        System.out.println(sb.toString().trim());\n    }\n\n    public static void main(String[] args) throws IOException {\n        try (Input reader = new StandardInput()) {\n            new Solution().run();\n        }\n    }\n\n    StandardInput reader;\n\n    @Override\n    public void run() {\n        try {\n            solve();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    interface Input extends Closeable {\n        String next() throws IOException;\n\n        default int nextInt() throws IOException {\n            return Integer.parseInt(next());\n        }\n\n        default long nextLong() throws IOException {\n            return Long.parseLong(next());\n        }\n\n        default int[] readIntArray() throws IOException {\n            return readIntArray(nextInt());\n        }\n\n        default int[] readIntArray(int size) throws IOException {\n            int[] array = new int[size];\n            for (int i = 0; i < array.length; i++) {\n                array[i] = nextInt();\n            }\n            return array;\n        }\n\n        default long[] readLongArray(int size) throws IOException {\n            long[] array = new long[size];\n            for (int i = 0; i < array.length; i++) {\n                array[i] = nextLong();\n            }\n            return array;\n        }\n    }\n\n    private static class StandardInput implements Input {\n\n        private final Scanner scanner = new Scanner(System.in);\n\n        @Override\n        public void close() throws IOException {\n            scanner.close();\n        }\n\n        @Override\n        public String next() throws IOException {\n            return scanner.next();\n        }\n    }\n}\n"}
{"src_uid": "e9db8d048e9763cf38c584342dea9f53", "id": 101, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2400, "testcases": "[{'input': '3 2001 2\\r\\n1 2\\r\\n2 3\\r\\n', 'output': ['1 2 3']}, {'input': '7 2020 6\\r\\n1 2\\r\\n1 3\\r\\n2 4\\r\\n2 5\\r\\n3 6\\r\\n3 7\\r\\n', 'output': ['1 2 3 7 4 6 5']}, {'input': '10 3630801 0\\r\\n', 'output': ['The times have changed']}, {'input': '3 2001 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['The times have changed']}, {'input': '5 2030 13\\r\\n5 2\\r\\n2 3\\r\\n2 4\\r\\n5 3\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n2 3\\r\\n2 3\\r\\n5 2\\r\\n2 4\\r\\n3 4\\r\\n5 4\\r\\n', 'output': ['The times have changed']}, {'input': '5 2019 12\\r\\n4 1\\r\\n1 2\\r\\n4 2\\r\\n4 3\\r\\n5 3\\r\\n5 1\\r\\n3 2\\r\\n4 2\\r\\n1 2\\r\\n1 3\\r\\n5 1\\r\\n1 3\\r\\n', 'output': ['The times have changed']}, {'input': '8 2004 6\\r\\n7 4\\r\\n6 4\\r\\n7 5\\r\\n5 8\\r\\n8 4\\r\\n8 2\\r\\n', 'output': ['1 6 2 8 4 7 3 5']}, {'input': '6 2004 18\\r\\n1 3\\r\\n2 1\\r\\n6 2\\r\\n5 1\\r\\n4 6\\r\\n5 1\\r\\n2 3\\r\\n6 2\\r\\n6 1\\r\\n2 1\\r\\n4 1\\r\\n2 3\\r\\n5 1\\r\\n2 1\\r\\n4 6\\r\\n5 2\\r\\n1 3\\r\\n5 6\\r\\n', 'output': ['The times have changed']}, {'input': '7 2035 5\\r\\n5 2\\r\\n3 2\\r\\n4 2\\r\\n4 2\\r\\n3 1\\r\\n', 'output': ['2 7 1 6 3 4 5']}, {'input': '16 20922789890000 0\\r\\n', 'output': ['16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1']}, {'input': '10 2001 13\\r\\n8 3\\r\\n7 6\\r\\n5 7\\r\\n2 1\\r\\n1 4\\r\\n5 10\\r\\n7 6\\r\\n6 1\\r\\n1 8\\r\\n3 10\\r\\n5 1\\r\\n5 8\\r\\n1 3\\r\\n', 'output': ['5 1 7 8 2 4 3 6 9 10']}, {'input': '10 2670 33\\r\\n5 7\\r\\n4 10\\r\\n5 9\\r\\n5 9\\r\\n7 8\\r\\n9 10\\r\\n4 6\\r\\n4 6\\r\\n1 8\\r\\n10 3\\r\\n4 7\\r\\n9 8\\r\\n6 1\\r\\n6 5\\r\\n10 1\\r\\n9 10\\r\\n4 6\\r\\n8 2\\r\\n6 9\\r\\n6 8\\r\\n6 5\\r\\n10 3\\r\\n6 2\\r\\n3 1\\r\\n7 9\\r\\n5 2\\r\\n4 10\\r\\n6 3\\r\\n6 2\\r\\n5 3\\r\\n3 1\\r\\n6 8\\r\\n6 2\\r\\n', 'output': ['The times have changed']}, {'input': '14 2001 22\\r\\n11 5\\r\\n14 6\\r\\n2 5\\r\\n2 4\\r\\n2 3\\r\\n7 2\\r\\n1 5\\r\\n7 3\\r\\n6 8\\r\\n1 5\\r\\n6 7\\r\\n1 10\\r\\n3 5\\r\\n4 1\\r\\n14 7\\r\\n7 8\\r\\n4 8\\r\\n1 11\\r\\n12 1\\r\\n10 11\\r\\n11 3\\r\\n8 3\\r\\n', 'output': ['7 4 11 5 12 2 3 8 13 9 10 6 14 1']}, {'input': '10 2001 32\\r\\n1 3\\r\\n2 9\\r\\n5 3\\r\\n9 5\\r\\n9 3\\r\\n6 9\\r\\n6 3\\r\\n5 8\\r\\n2 7\\r\\n2 7\\r\\n8 7\\r\\n5 4\\r\\n1 6\\r\\n4 8\\r\\n8 3\\r\\n9 8\\r\\n1 5\\r\\n5 10\\r\\n2 4\\r\\n2 6\\r\\n9 10\\r\\n1 4\\r\\n1 6\\r\\n4 7\\r\\n9 10\\r\\n9 5\\r\\n9 3\\r\\n6 10\\r\\n6 9\\r\\n10 7\\r\\n1 7\\r\\n1 2\\r\\n', 'output': ['1 2 8 6 5 3 10 7 4 9']}, {'input': '15 2001 8\\r\\n9 2\\r\\n4 8\\r\\n12 13\\r\\n6 7\\r\\n12 4\\r\\n7 2\\r\\n6 13\\r\\n4 11\\r\\n', 'output': ['1 5 6 8 9 2 3 10 4 11 12 7 13 14 15']}, {'input': '14 2001 15\\r\\n12 3\\r\\n5 6\\r\\n11 3\\r\\n6 7\\r\\n3 6\\r\\n5 13\\r\\n11 2\\r\\n1 2\\r\\n14 3\\r\\n1 2\\r\\n8 4\\r\\n13 8\\r\\n3 7\\r\\n5 11\\r\\n8 9\\r\\n', 'output': ['1 4 7 10 2 11 12 9 13 14 3 5 8 6']}, {'input': '14 11414 33\\r\\n11 14\\r\\n11 8\\r\\n3 5\\r\\n14 6\\r\\n3 1\\r\\n9 13\\r\\n11 4\\r\\n11 8\\r\\n4 6\\r\\n6 2\\r\\n3 10\\r\\n10 1\\r\\n11 9\\r\\n10 5\\r\\n9 8\\r\\n6 12\\r\\n10 5\\r\\n9 10\\r\\n8 13\\r\\n9 11\\r\\n8 10\\r\\n8 9\\r\\n14 3\\r\\n7 1\\r\\n5 13\\r\\n13 8\\r\\n4 8\\r\\n1 6\\r\\n1 8\\r\\n8 2\\r\\n6 7\\r\\n10 14\\r\\n2 1\\r\\n', 'output': ['The times have changed']}, {'input': '13 3651 42\\r\\n8 4\\r\\n13 7\\r\\n8 5\\r\\n6 2\\r\\n7 13\\r\\n12 10\\r\\n7 9\\r\\n9 4\\r\\n3 4\\r\\n8 1\\r\\n12 6\\r\\n3 4\\r\\n7 1\\r\\n4 1\\r\\n7 5\\r\\n2 5\\r\\n2 7\\r\\n6 11\\r\\n9 8\\r\\n3 2\\r\\n11 12\\r\\n1 2\\r\\n7 12\\r\\n8 11\\r\\n11 13\\r\\n10 12\\r\\n11 1\\r\\n8 2\\r\\n9 7\\r\\n6 13\\r\\n8 12\\r\\n10 1\\r\\n2 12\\r\\n1 2\\r\\n8 7\\r\\n6 8\\r\\n1 8\\r\\n3 12\\r\\n13 6\\r\\n7 13\\r\\n5 4\\r\\n7 8\\r\\n', 'output': ['The times have changed']}, {'input': '11 2001 34\\r\\n2 1\\r\\n7 5\\r\\n9 8\\r\\n5 2\\r\\n9 5\\r\\n9 1\\r\\n9 11\\r\\n1 5\\r\\n7 2\\r\\n9 1\\r\\n4 7\\r\\n3 11\\r\\n9 7\\r\\n2 1\\r\\n3 7\\r\\n7 3\\r\\n7 6\\r\\n8 1\\r\\n1 9\\r\\n11 8\\r\\n8 4\\r\\n8 9\\r\\n7 11\\r\\n7 5\\r\\n9 11\\r\\n7 9\\r\\n8 11\\r\\n8 7\\r\\n4 2\\r\\n7 4\\r\\n2 4\\r\\n6 1\\r\\n4 10\\r\\n11 2\\r\\n', 'output': ['The times have changed']}, {'input': '13 2001 5\\r\\n8 6\\r\\n11 2\\r\\n13 8\\r\\n6 3\\r\\n3 12\\r\\n', 'output': ['1 3 7 8 9 6 10 5 11 12 2 13 4']}, {'input': '16 2001 68\\r\\n16 15\\r\\n16 6\\r\\n4 1\\r\\n14 15\\r\\n13 5\\r\\n1 8\\r\\n1 5\\r\\n12 10\\r\\n3 11\\r\\n8 7\\r\\n6 5\\r\\n4 3\\r\\n5 11\\r\\n6 14\\r\\n13 5\\r\\n6 4\\r\\n10 7\\r\\n10 8\\r\\n9 15\\r\\n2 4\\r\\n5 15\\r\\n5 14\\r\\n12 4\\r\\n12 8\\r\\n10 1\\r\\n12 2\\r\\n11 7\\r\\n2 9\\r\\n10 16\\r\\n16 2\\r\\n13 10\\r\\n2 15\\r\\n11 15\\r\\n16 4\\r\\n13 2\\r\\n10 6\\r\\n1 9\\r\\n16 6\\r\\n13 1\\r\\n1 9\\r\\n4 3\\r\\n8 7...', 'output': ['8 6 9 7 11 5 14 10 15 3 12 1 2 13 16 4']}, {'input': '16 919540 100\\r\\n3 8\\r\\n3 10\\r\\n10 1\\r\\n1 14\\r\\n13 3\\r\\n9 13\\r\\n14 6\\r\\n5 3\\r\\n8 4\\r\\n14 12\\r\\n16 1\\r\\n13 10\\r\\n2 10\\r\\n9 12\\r\\n5 10\\r\\n8 12\\r\\n7 14\\r\\n15 11\\r\\n2 6\\r\\n5 3\\r\\n15 16\\r\\n8 14\\r\\n5 7\\r\\n15 14\\r\\n5 14\\r\\n8 6\\r\\n8 7\\r\\n7 6\\r\\n10 1\\r\\n7 15\\r\\n9 12\\r\\n11 14\\r\\n2 7\\r\\n3 7\\r\\n3 10\\r\\n9 13\\r\\n5 2\\r\\n16 11\\r\\n10 1\\r\\n4 16\\r\\n4 2\\r\\n...', 'output': ['The times have changed']}, {'input': '16 2005 99\\r\\n13 11\\r\\n12 10\\r\\n15 11\\r\\n10 15\\r\\n7 10\\r\\n15 14\\r\\n10 14\\r\\n13 3\\r\\n7 3\\r\\n11 8\\r\\n6 14\\r\\n16 13\\r\\n7 2\\r\\n4 8\\r\\n6 11\\r\\n9 6\\r\\n9 1\\r\\n16 4\\r\\n14 3\\r\\n6 14\\r\\n2 8\\r\\n15 6\\r\\n9 13\\r\\n7 9\\r\\n15 13\\r\\n14 16\\r\\n3 5\\r\\n8 5\\r\\n9 15\\r\\n16 5\\r\\n13 2\\r\\n10 15\\r\\n16 13\\r\\n14 1\\r\\n12 9\\r\\n14 13\\r\\n7 11\\r\\n11 2\\r\\n14 4\\r\\n3 11\\r\\n...', 'output': ['The times have changed']}, {'input': '16 2046 84\\r\\n2 15\\r\\n1 10\\r\\n7 1\\r\\n1 10\\r\\n5 8\\r\\n8 10\\r\\n11 14\\r\\n8 13\\r\\n7 15\\r\\n16 15\\r\\n6 12\\r\\n12 15\\r\\n10 15\\r\\n10 9\\r\\n1 10\\r\\n5 10\\r\\n1 4\\r\\n7 13\\r\\n5 9\\r\\n3 13\\r\\n2 14\\r\\n5 15\\r\\n13 6\\r\\n7 16\\r\\n16 12\\r\\n2 12\\r\\n5 6\\r\\n8 16\\r\\n12 11\\r\\n1 2\\r\\n2 16\\r\\n5 14\\r\\n2 16\\r\\n5 2\\r\\n4 6\\r\\n2 16\\r\\n7 1\\r\\n13 11\\r\\n7 13\\r\\n1 2\\r\\n3 6\\r\\n5...', 'output': ['The times have changed']}, {'input': '16 2001 82\\r\\n12 11\\r\\n9 11\\r\\n3 5\\r\\n12 3\\r\\n9 7\\r\\n16 15\\r\\n15 4\\r\\n15 11\\r\\n14 7\\r\\n11 10\\r\\n4 1\\r\\n11 13\\r\\n15 6\\r\\n4 13\\r\\n3 11\\r\\n10 4\\r\\n10 14\\r\\n7 5\\r\\n15 4\\r\\n12 6\\r\\n16 8\\r\\n3 9\\r\\n3 11\\r\\n6 8\\r\\n13 5\\r\\n15 2\\r\\n11 5\\r\\n2 8\\r\\n16 12\\r\\n1 2\\r\\n3 8\\r\\n16 14\\r\\n16 3\\r\\n8 14\\r\\n15 11\\r\\n16 2\\r\\n3 4\\r\\n16 5\\r\\n12 8\\r\\n10 4\\r\\n6 11...', 'output': ['10 11 3 9 16 6 14 12 5 8 7 2 15 13 4 1']}, {'input': '16 2001 65\\r\\n12 9\\r\\n4 11\\r\\n10 12\\r\\n6 12\\r\\n14 2\\r\\n13 2\\r\\n8 13\\r\\n3 11\\r\\n8 6\\r\\n8 13\\r\\n1 2\\r\\n11 8\\r\\n2 16\\r\\n2 10\\r\\n15 4\\r\\n3 8\\r\\n10 16\\r\\n5 7\\r\\n8 16\\r\\n10 7\\r\\n8 2\\r\\n8 9\\r\\n1 16\\r\\n15 10\\r\\n3 12\\r\\n12 7\\r\\n15 16\\r\\n3 8\\r\\n4 1\\r\\n13 7\\r\\n11 1\\r\\n14 3\\r\\n7 9\\r\\n13 5\\r\\n11 12\\r\\n3 5\\r\\n4 7\\r\\n14 1\\r\\n3 13\\r\\n9 16\\r\\n15 14\\r\\n11...', 'output': ['8 10 3 4 12 9 14 6 15 11 5 13 7 2 1 16']}, {'input': '16 2001 99\\r\\n13 12\\r\\n3 16\\r\\n4 11\\r\\n5 7\\r\\n2 13\\r\\n7 14\\r\\n5 2\\r\\n5 3\\r\\n4 13\\r\\n9 3\\r\\n7 14\\r\\n13 15\\r\\n6 13\\r\\n14 15\\r\\n5 16\\r\\n10 16\\r\\n6 5\\r\\n2 8\\r\\n1 6\\r\\n4 11\\r\\n6 3\\r\\n7 12\\r\\n9 16\\r\\n3 10\\r\\n6 11\\r\\n5 15\\r\\n4 6\\r\\n14 16\\r\\n9 2\\r\\n13 7\\r\\n3 8\\r\\n15 3\\r\\n6 2\\r\\n10 12\\r\\n4 6\\r\\n1 5\\r\\n4 7\\r\\n7 14\\r\\n5 11\\r\\n3 12\\r\\n13 7\\r\\n14 10\\r...', 'output': ['1 6 11 2 5 3 8 14 4 12 15 16 7 9 10 13']}, {'input': '16 2001 69\\r\\n2 15\\r\\n10 6\\r\\n10 11\\r\\n3 11\\r\\n6 7\\r\\n1 15\\r\\n6 1\\r\\n1 13\\r\\n13 5\\r\\n10 15\\r\\n7 14\\r\\n4 1\\r\\n7 11\\r\\n5 3\\r\\n10 7\\r\\n9 1\\r\\n12 16\\r\\n13 11\\r\\n7 12\\r\\n12 2\\r\\n4 13\\r\\n6 7\\r\\n8 12\\r\\n10 9\\r\\n3 16\\r\\n8 15\\r\\n6 1\\r\\n6 7\\r\\n5 14\\r\\n4 10\\r\\n14 2\\r\\n5 3\\r\\n6 5\\r\\n6 5\\r\\n9 13\\r\\n9 14\\r\\n10 15\\r\\n10 6\\r\\n5 3\\r\\n10 5\\r\\n7 13\\r\\n6 11...', 'output': ['5 12 13 1 10 3 6 8 4 2 14 9 7 11 15 16']}, {'input': '16 2001 87\\r\\n13 7\\r\\n12 6\\r\\n10 7\\r\\n1 7\\r\\n15 16\\r\\n16 14\\r\\n2 3\\r\\n5 6\\r\\n10 4\\r\\n15 14\\r\\n13 1\\r\\n6 14\\r\\n2 9\\r\\n2 9\\r\\n16 8\\r\\n14 7\\r\\n4 12\\r\\n5 4\\r\\n8 14\\r\\n13 4\\r\\n2 5\\r\\n6 3\\r\\n5 14\\r\\n11 12\\r\\n10 2\\r\\n16 13\\r\\n1 3\\r\\n1 7\\r\\n15 13\\r\\n15 16\\r\\n14 3\\r\\n16 3\\r\\n8 4\\r\\n2 7\\r\\n4 3\\r\\n4 6\\r\\n1 14\\r\\n6 14\\r\\n9 14\\r\\n1 7\\r\\n1 10\\r\\n8 11\\r...', 'output': ['4 7 15 10 8 13 16 5 9 6 11 12 3 14 1 2']}, {'input': '16 1000000000000000000 0\\r\\n', 'output': ['The times have changed']}, {'input': '16 1000000000000000000 1\\r\\n16 15\\r\\n', 'output': ['The times have changed']}, {'input': '16 1000000000000000000 1\\r\\n2 1\\r\\n', 'output': ['The times have changed']}, {'input': '16 405483668029442000 2\\r\\n16 15\\r\\n15 14\\r\\n', 'output': ['The times have changed']}, {'input': '16 2001 99\\r\\n4 15\\r\\n13 15\\r\\n11 8\\r\\n10 13\\r\\n13 16\\r\\n8 15\\r\\n7 9\\r\\n10 5\\r\\n7 8\\r\\n8 13\\r\\n8 2\\r\\n2 13\\r\\n15 1\\r\\n3 12\\r\\n8 3\\r\\n8 2\\r\\n10 7\\r\\n10 14\\r\\n16 4\\r\\n3 1\\r\\n3 5\\r\\n5 9\\r\\n2 16\\r\\n15 1\\r\\n3 4\\r\\n3 14\\r\\n6 3\\r\\n10 13\\r\\n14 5\\r\\n11 7\\r\\n14 9\\r\\n4 14\\r\\n4 12\\r\\n7 16\\r\\n8 13\\r\\n11 1\\r\\n2 3\\r\\n14 12\\r\\n6 8\\r\\n6 7\\r\\n11 7\\r\\n6 12...', 'output': ['15 6 7 10 14 1 4 5 16 3 2 13 8 11 12 9']}, {'input': '16 2001 94\\r\\n12 13\\r\\n11 1\\r\\n8 3\\r\\n8 11\\r\\n11 5\\r\\n8 2\\r\\n8 9\\r\\n7 15\\r\\n6 11\\r\\n8 6\\r\\n10 13\\r\\n13 11\\r\\n7 5\\r\\n6 3\\r\\n14 2\\r\\n15 10\\r\\n3 4\\r\\n9 1\\r\\n14 10\\r\\n14 15\\r\\n11 1\\r\\n12 15\\r\\n2 10\\r\\n6 5\\r\\n2 6\\r\\n16 2\\r\\n8 7\\r\\n16 6\\r\\n7 2\\r\\n15 9\\r\\n3 15\\r\\n13 5\\r\\n11 4\\r\\n14 10\\r\\n6 11\\r\\n12 10\\r\\n13 4\\r\\n12 6\\r\\n1 4\\r\\n2 10\\r\\n6 15\\r\\n1...', 'output': ['14 5 8 15 16 7 3 2 10 11 13 6 12 1 9 4']}, {'input': '16 2001 97\\r\\n12 6\\r\\n13 8\\r\\n7 15\\r\\n11 3\\r\\n2 3\\r\\n9 15\\r\\n4 7\\r\\n10 8\\r\\n3 1\\r\\n11 10\\r\\n2 14\\r\\n4 7\\r\\n9 2\\r\\n16 8\\r\\n11 12\\r\\n6 2\\r\\n15 14\\r\\n8 7\\r\\n2 10\\r\\n9 6\\r\\n6 4\\r\\n13 11\\r\\n12 6\\r\\n1 4\\r\\n8 4\\r\\n6 1\\r\\n16 14\\r\\n12 2\\r\\n6 14\\r\\n1 14\\r\\n11 6\\r\\n11 16\\r\\n1 5\\r\\n10 16\\r\\n5 16\\r\\n11 3\\r\\n2 4\\r\\n3 14\\r\\n11 10\\r\\n13 5\\r\\n12 16\\r\\n1 ...', 'output': ['8 6 7 13 9 5 14 12 3 10 2 4 1 16 15 11']}, {'input': '16 2001 95\\r\\n6 9\\r\\n5 3\\r\\n7 16\\r\\n11 14\\r\\n2 5\\r\\n13 10\\r\\n2 1\\r\\n8 6\\r\\n7 10\\r\\n12 7\\r\\n12 13\\r\\n2 4\\r\\n3 10\\r\\n7 13\\r\\n1 8\\r\\n14 6\\r\\n1 4\\r\\n7 14\\r\\n1 15\\r\\n7 14\\r\\n11 13\\r\\n13 5\\r\\n3 14\\r\\n11 12\\r\\n11 1\\r\\n5 15\\r\\n16 14\\r\\n14 6\\r\\n16 13\\r\\n8 6\\r\\n14 10\\r\\n14 1\\r\\n16 9\\r\\n14 8\\r\\n13 3\\r\\n15 8\\r\\n7 10\\r\\n11 7\\r\\n4 10\\r\\n11 4\\r\\n11 2...', 'output': ['10 5 8 14 7 13 3 12 15 16 1 2 6 9 11 4']}, {'input': '16 2001 93\\r\\n12 13\\r\\n13 11\\r\\n10 2\\r\\n5 9\\r\\n1 15\\r\\n11 9\\r\\n8 9\\r\\n6 9\\r\\n15 11\\r\\n16 14\\r\\n14 2\\r\\n8 13\\r\\n1 2\\r\\n14 8\\r\\n14 8\\r\\n14 4\\r\\n1 15\\r\\n1 9\\r\\n16 11\\r\\n2 9\\r\\n14 10\\r\\n2 3\\r\\n10 6\\r\\n12 5\\r\\n15 6\\r\\n10 7\\r\\n12 5\\r\\n6 5\\r\\n7 1\\r\\n3 5\\r\\n7 13\\r\\n6 9\\r\\n8 3\\r\\n8 4\\r\\n3 4\\r\\n12 5\\r\\n13 6\\r\\n16 11\\r\\n8 13\\r\\n2 12\\r\\n4 12\\r\\n5 9\\r...', 'output': ['6 7 8 9 14 13 4 5 16 3 15 10 11 2 12 1']}, {'input': '16 2001 97\\r\\n12 3\\r\\n10 2\\r\\n14 9\\r\\n4 7\\r\\n9 7\\r\\n8 13\\r\\n3 15\\r\\n9 8\\r\\n13 2\\r\\n4 7\\r\\n5 14\\r\\n9 1\\r\\n5 10\\r\\n6 4\\r\\n13 12\\r\\n2 15\\r\\n7 1\\r\\n2 4\\r\\n16 12\\r\\n7 12\\r\\n5 9\\r\\n7 15\\r\\n8 3\\r\\n9 4\\r\\n14 12\\r\\n4 15\\r\\n12 15\\r\\n2 12\\r\\n13 6\\r\\n8 16\\r\\n2 11\\r\\n7 1\\r\\n9 7\\r\\n5 3\\r\\n4 15\\r\\n16 11\\r\\n13 1\\r\\n7 16\\r\\n5 11\\r\\n10 9\\r\\n4 1\\r\\n1 16\\r\\n4...', 'output': ['11 7 14 9 1 8 10 5 4 3 15 13 6 2 16 12']}, {'input': '16 2001 96\\r\\n12 16\\r\\n1 7\\r\\n5 4\\r\\n13 12\\r\\n6 12\\r\\n11 16\\r\\n16 7\\r\\n1 14\\r\\n2 11\\r\\n3 11\\r\\n6 3\\r\\n3 10\\r\\n13 3\\r\\n5 1\\r\\n4 12\\r\\n10 11\\r\\n9 5\\r\\n6 15\\r\\n3 2\\r\\n8 12\\r\\n13 8\\r\\n4 6\\r\\n5 1\\r\\n15 7\\r\\n15 12\\r\\n5 1\\r\\n1 11\\r\\n5 15\\r\\n5 15\\r\\n12 16\\r\\n10 14\\r\\n9 11\\r\\n4 2\\r\\n15 11\\r\\n6 8\\r\\n5 3\\r\\n1 4\\r\\n13 6\\r\\n12 3\\r\\n10 7\\r\\n13 15\\r\\n1...', 'output': ['4 11 10 5 2 6 15 7 1 12 13 9 3 16 8 14']}]", "source_code": "import java.io.DataInputStream;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\nimport java.math.*;\npublic class Solution{\n\tpublic static void main(String[] args) throws IOException {\n\t\tFileInputStream fileInputStream = new FileInputStream(\"input.txt\");\n\t\tDataInputStream dataInputStream = new DataInputStream(fileInputStream);\n\t\tInputStreamReader inputStreamReader = new InputStreamReader(dataInputStream);\n\t\tBufferedReader reader = new BufferedReader(inputStreamReader);\n\t\tStringTokenizer token = new StringTokenizer(reader.readLine());\n\t\t\n\t\tint n = Integer.parseInt(token.nextToken());\n\t\tlong y = Long.parseLong(token.nextToken());\n\t\tint m = Integer.parseInt(token.nextToken());\n\t\tint[][] matrix = new int[m][2];\n\t\tfor(int i = 0;i<m;i++){\n\t\t\ttoken = new StringTokenizer(reader.readLine());\n\t\t\tmatrix[i][0] = Integer.parseInt(token.nextToken());\n\t\t\tmatrix[i][1] = Integer.parseInt(token.nextToken());\n\t\t}\n\t\tboolean found = false;\n\t\tfor(long k = 1;k<=Math.pow(2, m);k++){\n\t\t\tint[] temp = new int[n];\n\t\t\tfor(int j = 0;j<n;j++){\n\t\t\t\ttemp[j] = j+1;\n\t\t\t}\n\t\t\tfor(int p = 0;p<m;p++){\n\t\t\t\ttemp[matrix[p][1]-1] = matrix[p][0]<temp[matrix[p][1]-1]?matrix[p][0]-1:temp[matrix[p][1]-1];\n\t\t\t}\n\t\t\tboolean check = true;\n\t\t\tfor(int j = 0;j<n;j++){\n\t\t\t\tif(temp[j]>temp[j+1]){\n\t\t\t\t\tcheck = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(check){\n\t\t\t\tfound = true;\n\t\t\t\tfor(int j = 0;j<n;j++){\n\t\t\t\t\tSystem.out.print((temp[j]+1)+\" \");\n\t\t\t\t}\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\tfor(int j = 0;j<m;j++){\n\t\t\t\tmatrix[j][0] = matrix[j][1];\n\t\t\t}\n\t\t\tif(k==y){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatrix[m-1][1] += m;\n\t\t}\n\t\tif(!found){\n\t\t\tSystem.out.println(\"The times have changed\");\n\t\t}\n\t}\n}"}
{"src_uid": "e9db8d048e9763cf38c584342dea9f53", "id": 101, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2400, "testcases": "[{'input': '3 2001 2\\r\\n1 2\\r\\n2 3\\r\\n', 'output': ['1 2 3']}, {'input': '7 2020 6\\r\\n1 2\\r\\n1 3\\r\\n2 4\\r\\n2 5\\r\\n3 6\\r\\n3 7\\r\\n', 'output': ['1 2 3 7 4 6 5']}, {'input': '10 3630801 0\\r\\n', 'output': ['The times have changed']}, {'input': '3 2001 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['The times have changed']}, {'input': '5 2030 13\\r\\n5 2\\r\\n2 3\\r\\n2 4\\r\\n5 3\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n2 3\\r\\n2 3\\r\\n5 2\\r\\n2 4\\r\\n3 4\\r\\n5 4\\r\\n', 'output': ['The times have changed']}, {'input': '5 2019 12\\r\\n4 1\\r\\n1 2\\r\\n4 2\\r\\n4 3\\r\\n5 3\\r\\n5 1\\r\\n3 2\\r\\n4 2\\r\\n1 2\\r\\n1 3\\r\\n5 1\\r\\n1 3\\r\\n', 'output': ['The times have changed']}, {'input': '8 2004 6\\r\\n7 4\\r\\n6 4\\r\\n7 5\\r\\n5 8\\r\\n8 4\\r\\n8 2\\r\\n', 'output': ['1 6 2 8 4 7 3 5']}, {'input': '6 2004 18\\r\\n1 3\\r\\n2 1\\r\\n6 2\\r\\n5 1\\r\\n4 6\\r\\n5 1\\r\\n2 3\\r\\n6 2\\r\\n6 1\\r\\n2 1\\r\\n4 1\\r\\n2 3\\r\\n5 1\\r\\n2 1\\r\\n4 6\\r\\n5 2\\r\\n1 3\\r\\n5 6\\r\\n', 'output': ['The times have changed']}, {'input': '7 2035 5\\r\\n5 2\\r\\n3 2\\r\\n4 2\\r\\n4 2\\r\\n3 1\\r\\n', 'output': ['2 7 1 6 3 4 5']}, {'input': '16 20922789890000 0\\r\\n', 'output': ['16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1']}, {'input': '10 2001 13\\r\\n8 3\\r\\n7 6\\r\\n5 7\\r\\n2 1\\r\\n1 4\\r\\n5 10\\r\\n7 6\\r\\n6 1\\r\\n1 8\\r\\n3 10\\r\\n5 1\\r\\n5 8\\r\\n1 3\\r\\n', 'output': ['5 1 7 8 2 4 3 6 9 10']}, {'input': '10 2670 33\\r\\n5 7\\r\\n4 10\\r\\n5 9\\r\\n5 9\\r\\n7 8\\r\\n9 10\\r\\n4 6\\r\\n4 6\\r\\n1 8\\r\\n10 3\\r\\n4 7\\r\\n9 8\\r\\n6 1\\r\\n6 5\\r\\n10 1\\r\\n9 10\\r\\n4 6\\r\\n8 2\\r\\n6 9\\r\\n6 8\\r\\n6 5\\r\\n10 3\\r\\n6 2\\r\\n3 1\\r\\n7 9\\r\\n5 2\\r\\n4 10\\r\\n6 3\\r\\n6 2\\r\\n5 3\\r\\n3 1\\r\\n6 8\\r\\n6 2\\r\\n', 'output': ['The times have changed']}, {'input': '14 2001 22\\r\\n11 5\\r\\n14 6\\r\\n2 5\\r\\n2 4\\r\\n2 3\\r\\n7 2\\r\\n1 5\\r\\n7 3\\r\\n6 8\\r\\n1 5\\r\\n6 7\\r\\n1 10\\r\\n3 5\\r\\n4 1\\r\\n14 7\\r\\n7 8\\r\\n4 8\\r\\n1 11\\r\\n12 1\\r\\n10 11\\r\\n11 3\\r\\n8 3\\r\\n', 'output': ['7 4 11 5 12 2 3 8 13 9 10 6 14 1']}, {'input': '10 2001 32\\r\\n1 3\\r\\n2 9\\r\\n5 3\\r\\n9 5\\r\\n9 3\\r\\n6 9\\r\\n6 3\\r\\n5 8\\r\\n2 7\\r\\n2 7\\r\\n8 7\\r\\n5 4\\r\\n1 6\\r\\n4 8\\r\\n8 3\\r\\n9 8\\r\\n1 5\\r\\n5 10\\r\\n2 4\\r\\n2 6\\r\\n9 10\\r\\n1 4\\r\\n1 6\\r\\n4 7\\r\\n9 10\\r\\n9 5\\r\\n9 3\\r\\n6 10\\r\\n6 9\\r\\n10 7\\r\\n1 7\\r\\n1 2\\r\\n', 'output': ['1 2 8 6 5 3 10 7 4 9']}, {'input': '15 2001 8\\r\\n9 2\\r\\n4 8\\r\\n12 13\\r\\n6 7\\r\\n12 4\\r\\n7 2\\r\\n6 13\\r\\n4 11\\r\\n', 'output': ['1 5 6 8 9 2 3 10 4 11 12 7 13 14 15']}, {'input': '14 2001 15\\r\\n12 3\\r\\n5 6\\r\\n11 3\\r\\n6 7\\r\\n3 6\\r\\n5 13\\r\\n11 2\\r\\n1 2\\r\\n14 3\\r\\n1 2\\r\\n8 4\\r\\n13 8\\r\\n3 7\\r\\n5 11\\r\\n8 9\\r\\n', 'output': ['1 4 7 10 2 11 12 9 13 14 3 5 8 6']}, {'input': '14 11414 33\\r\\n11 14\\r\\n11 8\\r\\n3 5\\r\\n14 6\\r\\n3 1\\r\\n9 13\\r\\n11 4\\r\\n11 8\\r\\n4 6\\r\\n6 2\\r\\n3 10\\r\\n10 1\\r\\n11 9\\r\\n10 5\\r\\n9 8\\r\\n6 12\\r\\n10 5\\r\\n9 10\\r\\n8 13\\r\\n9 11\\r\\n8 10\\r\\n8 9\\r\\n14 3\\r\\n7 1\\r\\n5 13\\r\\n13 8\\r\\n4 8\\r\\n1 6\\r\\n1 8\\r\\n8 2\\r\\n6 7\\r\\n10 14\\r\\n2 1\\r\\n', 'output': ['The times have changed']}, {'input': '13 3651 42\\r\\n8 4\\r\\n13 7\\r\\n8 5\\r\\n6 2\\r\\n7 13\\r\\n12 10\\r\\n7 9\\r\\n9 4\\r\\n3 4\\r\\n8 1\\r\\n12 6\\r\\n3 4\\r\\n7 1\\r\\n4 1\\r\\n7 5\\r\\n2 5\\r\\n2 7\\r\\n6 11\\r\\n9 8\\r\\n3 2\\r\\n11 12\\r\\n1 2\\r\\n7 12\\r\\n8 11\\r\\n11 13\\r\\n10 12\\r\\n11 1\\r\\n8 2\\r\\n9 7\\r\\n6 13\\r\\n8 12\\r\\n10 1\\r\\n2 12\\r\\n1 2\\r\\n8 7\\r\\n6 8\\r\\n1 8\\r\\n3 12\\r\\n13 6\\r\\n7 13\\r\\n5 4\\r\\n7 8\\r\\n', 'output': ['The times have changed']}, {'input': '11 2001 34\\r\\n2 1\\r\\n7 5\\r\\n9 8\\r\\n5 2\\r\\n9 5\\r\\n9 1\\r\\n9 11\\r\\n1 5\\r\\n7 2\\r\\n9 1\\r\\n4 7\\r\\n3 11\\r\\n9 7\\r\\n2 1\\r\\n3 7\\r\\n7 3\\r\\n7 6\\r\\n8 1\\r\\n1 9\\r\\n11 8\\r\\n8 4\\r\\n8 9\\r\\n7 11\\r\\n7 5\\r\\n9 11\\r\\n7 9\\r\\n8 11\\r\\n8 7\\r\\n4 2\\r\\n7 4\\r\\n2 4\\r\\n6 1\\r\\n4 10\\r\\n11 2\\r\\n', 'output': ['The times have changed']}, {'input': '13 2001 5\\r\\n8 6\\r\\n11 2\\r\\n13 8\\r\\n6 3\\r\\n3 12\\r\\n', 'output': ['1 3 7 8 9 6 10 5 11 12 2 13 4']}, {'input': '16 2001 68\\r\\n16 15\\r\\n16 6\\r\\n4 1\\r\\n14 15\\r\\n13 5\\r\\n1 8\\r\\n1 5\\r\\n12 10\\r\\n3 11\\r\\n8 7\\r\\n6 5\\r\\n4 3\\r\\n5 11\\r\\n6 14\\r\\n13 5\\r\\n6 4\\r\\n10 7\\r\\n10 8\\r\\n9 15\\r\\n2 4\\r\\n5 15\\r\\n5 14\\r\\n12 4\\r\\n12 8\\r\\n10 1\\r\\n12 2\\r\\n11 7\\r\\n2 9\\r\\n10 16\\r\\n16 2\\r\\n13 10\\r\\n2 15\\r\\n11 15\\r\\n16 4\\r\\n13 2\\r\\n10 6\\r\\n1 9\\r\\n16 6\\r\\n13 1\\r\\n1 9\\r\\n4 3\\r\\n8 7...', 'output': ['8 6 9 7 11 5 14 10 15 3 12 1 2 13 16 4']}, {'input': '16 919540 100\\r\\n3 8\\r\\n3 10\\r\\n10 1\\r\\n1 14\\r\\n13 3\\r\\n9 13\\r\\n14 6\\r\\n5 3\\r\\n8 4\\r\\n14 12\\r\\n16 1\\r\\n13 10\\r\\n2 10\\r\\n9 12\\r\\n5 10\\r\\n8 12\\r\\n7 14\\r\\n15 11\\r\\n2 6\\r\\n5 3\\r\\n15 16\\r\\n8 14\\r\\n5 7\\r\\n15 14\\r\\n5 14\\r\\n8 6\\r\\n8 7\\r\\n7 6\\r\\n10 1\\r\\n7 15\\r\\n9 12\\r\\n11 14\\r\\n2 7\\r\\n3 7\\r\\n3 10\\r\\n9 13\\r\\n5 2\\r\\n16 11\\r\\n10 1\\r\\n4 16\\r\\n4 2\\r\\n...', 'output': ['The times have changed']}, {'input': '16 2005 99\\r\\n13 11\\r\\n12 10\\r\\n15 11\\r\\n10 15\\r\\n7 10\\r\\n15 14\\r\\n10 14\\r\\n13 3\\r\\n7 3\\r\\n11 8\\r\\n6 14\\r\\n16 13\\r\\n7 2\\r\\n4 8\\r\\n6 11\\r\\n9 6\\r\\n9 1\\r\\n16 4\\r\\n14 3\\r\\n6 14\\r\\n2 8\\r\\n15 6\\r\\n9 13\\r\\n7 9\\r\\n15 13\\r\\n14 16\\r\\n3 5\\r\\n8 5\\r\\n9 15\\r\\n16 5\\r\\n13 2\\r\\n10 15\\r\\n16 13\\r\\n14 1\\r\\n12 9\\r\\n14 13\\r\\n7 11\\r\\n11 2\\r\\n14 4\\r\\n3 11\\r\\n...', 'output': ['The times have changed']}, {'input': '16 2046 84\\r\\n2 15\\r\\n1 10\\r\\n7 1\\r\\n1 10\\r\\n5 8\\r\\n8 10\\r\\n11 14\\r\\n8 13\\r\\n7 15\\r\\n16 15\\r\\n6 12\\r\\n12 15\\r\\n10 15\\r\\n10 9\\r\\n1 10\\r\\n5 10\\r\\n1 4\\r\\n7 13\\r\\n5 9\\r\\n3 13\\r\\n2 14\\r\\n5 15\\r\\n13 6\\r\\n7 16\\r\\n16 12\\r\\n2 12\\r\\n5 6\\r\\n8 16\\r\\n12 11\\r\\n1 2\\r\\n2 16\\r\\n5 14\\r\\n2 16\\r\\n5 2\\r\\n4 6\\r\\n2 16\\r\\n7 1\\r\\n13 11\\r\\n7 13\\r\\n1 2\\r\\n3 6\\r\\n5...', 'output': ['The times have changed']}, {'input': '16 2001 82\\r\\n12 11\\r\\n9 11\\r\\n3 5\\r\\n12 3\\r\\n9 7\\r\\n16 15\\r\\n15 4\\r\\n15 11\\r\\n14 7\\r\\n11 10\\r\\n4 1\\r\\n11 13\\r\\n15 6\\r\\n4 13\\r\\n3 11\\r\\n10 4\\r\\n10 14\\r\\n7 5\\r\\n15 4\\r\\n12 6\\r\\n16 8\\r\\n3 9\\r\\n3 11\\r\\n6 8\\r\\n13 5\\r\\n15 2\\r\\n11 5\\r\\n2 8\\r\\n16 12\\r\\n1 2\\r\\n3 8\\r\\n16 14\\r\\n16 3\\r\\n8 14\\r\\n15 11\\r\\n16 2\\r\\n3 4\\r\\n16 5\\r\\n12 8\\r\\n10 4\\r\\n6 11...', 'output': ['10 11 3 9 16 6 14 12 5 8 7 2 15 13 4 1']}, {'input': '16 2001 65\\r\\n12 9\\r\\n4 11\\r\\n10 12\\r\\n6 12\\r\\n14 2\\r\\n13 2\\r\\n8 13\\r\\n3 11\\r\\n8 6\\r\\n8 13\\r\\n1 2\\r\\n11 8\\r\\n2 16\\r\\n2 10\\r\\n15 4\\r\\n3 8\\r\\n10 16\\r\\n5 7\\r\\n8 16\\r\\n10 7\\r\\n8 2\\r\\n8 9\\r\\n1 16\\r\\n15 10\\r\\n3 12\\r\\n12 7\\r\\n15 16\\r\\n3 8\\r\\n4 1\\r\\n13 7\\r\\n11 1\\r\\n14 3\\r\\n7 9\\r\\n13 5\\r\\n11 12\\r\\n3 5\\r\\n4 7\\r\\n14 1\\r\\n3 13\\r\\n9 16\\r\\n15 14\\r\\n11...', 'output': ['8 10 3 4 12 9 14 6 15 11 5 13 7 2 1 16']}, {'input': '16 2001 99\\r\\n13 12\\r\\n3 16\\r\\n4 11\\r\\n5 7\\r\\n2 13\\r\\n7 14\\r\\n5 2\\r\\n5 3\\r\\n4 13\\r\\n9 3\\r\\n7 14\\r\\n13 15\\r\\n6 13\\r\\n14 15\\r\\n5 16\\r\\n10 16\\r\\n6 5\\r\\n2 8\\r\\n1 6\\r\\n4 11\\r\\n6 3\\r\\n7 12\\r\\n9 16\\r\\n3 10\\r\\n6 11\\r\\n5 15\\r\\n4 6\\r\\n14 16\\r\\n9 2\\r\\n13 7\\r\\n3 8\\r\\n15 3\\r\\n6 2\\r\\n10 12\\r\\n4 6\\r\\n1 5\\r\\n4 7\\r\\n7 14\\r\\n5 11\\r\\n3 12\\r\\n13 7\\r\\n14 10\\r...', 'output': ['1 6 11 2 5 3 8 14 4 12 15 16 7 9 10 13']}, {'input': '16 2001 69\\r\\n2 15\\r\\n10 6\\r\\n10 11\\r\\n3 11\\r\\n6 7\\r\\n1 15\\r\\n6 1\\r\\n1 13\\r\\n13 5\\r\\n10 15\\r\\n7 14\\r\\n4 1\\r\\n7 11\\r\\n5 3\\r\\n10 7\\r\\n9 1\\r\\n12 16\\r\\n13 11\\r\\n7 12\\r\\n12 2\\r\\n4 13\\r\\n6 7\\r\\n8 12\\r\\n10 9\\r\\n3 16\\r\\n8 15\\r\\n6 1\\r\\n6 7\\r\\n5 14\\r\\n4 10\\r\\n14 2\\r\\n5 3\\r\\n6 5\\r\\n6 5\\r\\n9 13\\r\\n9 14\\r\\n10 15\\r\\n10 6\\r\\n5 3\\r\\n10 5\\r\\n7 13\\r\\n6 11...', 'output': ['5 12 13 1 10 3 6 8 4 2 14 9 7 11 15 16']}, {'input': '16 2001 87\\r\\n13 7\\r\\n12 6\\r\\n10 7\\r\\n1 7\\r\\n15 16\\r\\n16 14\\r\\n2 3\\r\\n5 6\\r\\n10 4\\r\\n15 14\\r\\n13 1\\r\\n6 14\\r\\n2 9\\r\\n2 9\\r\\n16 8\\r\\n14 7\\r\\n4 12\\r\\n5 4\\r\\n8 14\\r\\n13 4\\r\\n2 5\\r\\n6 3\\r\\n5 14\\r\\n11 12\\r\\n10 2\\r\\n16 13\\r\\n1 3\\r\\n1 7\\r\\n15 13\\r\\n15 16\\r\\n14 3\\r\\n16 3\\r\\n8 4\\r\\n2 7\\r\\n4 3\\r\\n4 6\\r\\n1 14\\r\\n6 14\\r\\n9 14\\r\\n1 7\\r\\n1 10\\r\\n8 11\\r...', 'output': ['4 7 15 10 8 13 16 5 9 6 11 12 3 14 1 2']}, {'input': '16 1000000000000000000 0\\r\\n', 'output': ['The times have changed']}, {'input': '16 1000000000000000000 1\\r\\n16 15\\r\\n', 'output': ['The times have changed']}, {'input': '16 1000000000000000000 1\\r\\n2 1\\r\\n', 'output': ['The times have changed']}, {'input': '16 405483668029442000 2\\r\\n16 15\\r\\n15 14\\r\\n', 'output': ['The times have changed']}, {'input': '16 2001 99\\r\\n4 15\\r\\n13 15\\r\\n11 8\\r\\n10 13\\r\\n13 16\\r\\n8 15\\r\\n7 9\\r\\n10 5\\r\\n7 8\\r\\n8 13\\r\\n8 2\\r\\n2 13\\r\\n15 1\\r\\n3 12\\r\\n8 3\\r\\n8 2\\r\\n10 7\\r\\n10 14\\r\\n16 4\\r\\n3 1\\r\\n3 5\\r\\n5 9\\r\\n2 16\\r\\n15 1\\r\\n3 4\\r\\n3 14\\r\\n6 3\\r\\n10 13\\r\\n14 5\\r\\n11 7\\r\\n14 9\\r\\n4 14\\r\\n4 12\\r\\n7 16\\r\\n8 13\\r\\n11 1\\r\\n2 3\\r\\n14 12\\r\\n6 8\\r\\n6 7\\r\\n11 7\\r\\n6 12...', 'output': ['15 6 7 10 14 1 4 5 16 3 2 13 8 11 12 9']}, {'input': '16 2001 94\\r\\n12 13\\r\\n11 1\\r\\n8 3\\r\\n8 11\\r\\n11 5\\r\\n8 2\\r\\n8 9\\r\\n7 15\\r\\n6 11\\r\\n8 6\\r\\n10 13\\r\\n13 11\\r\\n7 5\\r\\n6 3\\r\\n14 2\\r\\n15 10\\r\\n3 4\\r\\n9 1\\r\\n14 10\\r\\n14 15\\r\\n11 1\\r\\n12 15\\r\\n2 10\\r\\n6 5\\r\\n2 6\\r\\n16 2\\r\\n8 7\\r\\n16 6\\r\\n7 2\\r\\n15 9\\r\\n3 15\\r\\n13 5\\r\\n11 4\\r\\n14 10\\r\\n6 11\\r\\n12 10\\r\\n13 4\\r\\n12 6\\r\\n1 4\\r\\n2 10\\r\\n6 15\\r\\n1...', 'output': ['14 5 8 15 16 7 3 2 10 11 13 6 12 1 9 4']}, {'input': '16 2001 97\\r\\n12 6\\r\\n13 8\\r\\n7 15\\r\\n11 3\\r\\n2 3\\r\\n9 15\\r\\n4 7\\r\\n10 8\\r\\n3 1\\r\\n11 10\\r\\n2 14\\r\\n4 7\\r\\n9 2\\r\\n16 8\\r\\n11 12\\r\\n6 2\\r\\n15 14\\r\\n8 7\\r\\n2 10\\r\\n9 6\\r\\n6 4\\r\\n13 11\\r\\n12 6\\r\\n1 4\\r\\n8 4\\r\\n6 1\\r\\n16 14\\r\\n12 2\\r\\n6 14\\r\\n1 14\\r\\n11 6\\r\\n11 16\\r\\n1 5\\r\\n10 16\\r\\n5 16\\r\\n11 3\\r\\n2 4\\r\\n3 14\\r\\n11 10\\r\\n13 5\\r\\n12 16\\r\\n1 ...', 'output': ['8 6 7 13 9 5 14 12 3 10 2 4 1 16 15 11']}, {'input': '16 2001 95\\r\\n6 9\\r\\n5 3\\r\\n7 16\\r\\n11 14\\r\\n2 5\\r\\n13 10\\r\\n2 1\\r\\n8 6\\r\\n7 10\\r\\n12 7\\r\\n12 13\\r\\n2 4\\r\\n3 10\\r\\n7 13\\r\\n1 8\\r\\n14 6\\r\\n1 4\\r\\n7 14\\r\\n1 15\\r\\n7 14\\r\\n11 13\\r\\n13 5\\r\\n3 14\\r\\n11 12\\r\\n11 1\\r\\n5 15\\r\\n16 14\\r\\n14 6\\r\\n16 13\\r\\n8 6\\r\\n14 10\\r\\n14 1\\r\\n16 9\\r\\n14 8\\r\\n13 3\\r\\n15 8\\r\\n7 10\\r\\n11 7\\r\\n4 10\\r\\n11 4\\r\\n11 2...', 'output': ['10 5 8 14 7 13 3 12 15 16 1 2 6 9 11 4']}, {'input': '16 2001 93\\r\\n12 13\\r\\n13 11\\r\\n10 2\\r\\n5 9\\r\\n1 15\\r\\n11 9\\r\\n8 9\\r\\n6 9\\r\\n15 11\\r\\n16 14\\r\\n14 2\\r\\n8 13\\r\\n1 2\\r\\n14 8\\r\\n14 8\\r\\n14 4\\r\\n1 15\\r\\n1 9\\r\\n16 11\\r\\n2 9\\r\\n14 10\\r\\n2 3\\r\\n10 6\\r\\n12 5\\r\\n15 6\\r\\n10 7\\r\\n12 5\\r\\n6 5\\r\\n7 1\\r\\n3 5\\r\\n7 13\\r\\n6 9\\r\\n8 3\\r\\n8 4\\r\\n3 4\\r\\n12 5\\r\\n13 6\\r\\n16 11\\r\\n8 13\\r\\n2 12\\r\\n4 12\\r\\n5 9\\r...', 'output': ['6 7 8 9 14 13 4 5 16 3 15 10 11 2 12 1']}, {'input': '16 2001 97\\r\\n12 3\\r\\n10 2\\r\\n14 9\\r\\n4 7\\r\\n9 7\\r\\n8 13\\r\\n3 15\\r\\n9 8\\r\\n13 2\\r\\n4 7\\r\\n5 14\\r\\n9 1\\r\\n5 10\\r\\n6 4\\r\\n13 12\\r\\n2 15\\r\\n7 1\\r\\n2 4\\r\\n16 12\\r\\n7 12\\r\\n5 9\\r\\n7 15\\r\\n8 3\\r\\n9 4\\r\\n14 12\\r\\n4 15\\r\\n12 15\\r\\n2 12\\r\\n13 6\\r\\n8 16\\r\\n2 11\\r\\n7 1\\r\\n9 7\\r\\n5 3\\r\\n4 15\\r\\n16 11\\r\\n13 1\\r\\n7 16\\r\\n5 11\\r\\n10 9\\r\\n4 1\\r\\n1 16\\r\\n4...', 'output': ['11 7 14 9 1 8 10 5 4 3 15 13 6 2 16 12']}, {'input': '16 2001 96\\r\\n12 16\\r\\n1 7\\r\\n5 4\\r\\n13 12\\r\\n6 12\\r\\n11 16\\r\\n16 7\\r\\n1 14\\r\\n2 11\\r\\n3 11\\r\\n6 3\\r\\n3 10\\r\\n13 3\\r\\n5 1\\r\\n4 12\\r\\n10 11\\r\\n9 5\\r\\n6 15\\r\\n3 2\\r\\n8 12\\r\\n13 8\\r\\n4 6\\r\\n5 1\\r\\n15 7\\r\\n15 12\\r\\n5 1\\r\\n1 11\\r\\n5 15\\r\\n5 15\\r\\n12 16\\r\\n10 14\\r\\n9 11\\r\\n4 2\\r\\n15 11\\r\\n6 8\\r\\n5 3\\r\\n1 4\\r\\n13 6\\r\\n12 3\\r\\n10 7\\r\\n13 15\\r\\n1...', 'output': ['4 11 10 5 2 6 15 7 1 12 13 9 3 16 8 14']}]", "source_code": "//package main;\nimport java.io.*;\n\n/**\n * <pre>\n *     author: Fanxu\n *     e-mail: maidfxx@gmail.com\n *     time: 2019/3/28 11:54\n *     desc: \n * </pre>\n */\npublic class Main {\n\n    private static FastScanner in;\n    private static PrintWriter out;\n\n    public static void main(String[] args) throws IOException {\n        in = new FastScanner();\n        out = new PrintWriter(System.out);\n\n        int n = in.nextInt();\n        long y = in.nextLong();\n        int m = in.nextInt();\n\n        int[] order = new int[n];\n        for (int i = 0; i < n; i++) {\n            order[i] = i;\n        }\n\n        boolean isOk = false;\n        int[] seat = new int[n];\n        for (int j = 0; j < 1 << m; j++) {\n            int[] change = new int[n];\n            int k = 0;\n            for (int i = 0; i < m; i++) {\n                if (j & (1 << i)) {\n                    change[seat[k]] = seat[k + 1];\n                    k++;\n                }\n            }\n            for (int i = 0; i < n; i++) {\n                seat[i] = change[order[i]];\n            }\n            long limit = (long) n * (n - 1) / 2;\n            for (int i = 0; i < m; i++) {\n                if (seat[seat[i]] < seat[i]) {\n                    isOk = true;\n                }\n                limit--;\n                if (limit < 0) {\n                    isOk = false;\n                    break;\n                }\n            }\n            if (isOk) {\n                for (int i = 0; i < n; i++) {\n                    if (i!= 0) {\n                        out.print(\" \");\n                    }\n                    out.print(seat[i] + 1);\n                }\n                out.print(\"\\n\");\n                return;\n            }\n            isOk = false;\n        }\n\n        if (y % 2 == 1) {\n            isOk = true;\n        }\n        int k = 0;\n        for (int i = 1; i <= n; i++) {\n            int res = (int)(y / 2 + 5000) % n;\n            if (res == 0) {\n                res = n;\n            }\n            if (res == i) {\n                k++;\n            }\n        }\n        if (k % 2 == 1) {\n            isOk =!isOk;\n        }\n        if (!isOk) {\n            out.print(\"The times have changed\\n\");\n        }\n        out.flush();\n    }\n\n    static class FastScanner {\n        private final InputStream in = System.in;\n        private final byte[] buffer = new byte[1024];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n            if (ptr < buflen) {\n                return true;\n            } else {\n                ptr = 0;\n                try {\n                    buflen = in.read(buffer);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                if (buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n        private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n        public boolean hasNext() { while (hasNextByte() &&!isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\n        public String next() {\n            if (!hasNext()) throw new NoSuchElementException();\n            StringBuffer sb = new StringBuffer();\n            int b = readByte();\n            while (isPrintableChar(b)) {\n                sb.appendCodePoint(b);\n               "}
{"src_uid": "8b6f633802293202531264446d33fee5", "id": 102, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': ['1 10 7\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 0 9\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['10 7 8\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['6 4 10\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 1 4\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 7 9\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['13 4 51\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['0 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['2 1 3\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['0 2 2\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['2 3 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['3 0 3\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1 1 2\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['3 2 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 3 3\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 0 13\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1 2 13\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 3 12\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1 2 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 3 12\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['815 216 182\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['218 550 593\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['116482865 344094604 3271060\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['19749161 751031022 646204\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['70499104 10483793 5504995\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1960930 562910 606828\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['8270979 4785512 9669629\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['9323791 4748006 5840080\\r\\n'], 'output': ['1 000000005\\r\\n']}, {'input': ['972037745 4602117 5090186\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['585173560 4799128 5611727\\r\\n'], 'output': ['1 000000036\\r\\n']}, {'input': ['22033548 813958 4874712\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['702034015 6007275 9777625\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['218556 828183 7799410\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1167900 2709798 6800151\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['7004769 3114686 4659684\\r\\n'], 'output': ['1 000000002\\r\\n']}, {'input': ['1000000000 1000000000 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['3631 1628 367377\\r\\n'], 'output': ['1 000000009\\r\\n']}, {'input': ['3966 5002 273075\\r\\n'], 'output': ['1 000000008\\r\\n']}, {'input': ['2388 2896 73888\\r\\n'], 'output': ['1 000000016\\r\\n']}, {'input': ['0 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 1 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1000000000 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 1000000000 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 0 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1000000000 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 0 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 999999999 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['999999999 0 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['999999999 999999999 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['999999999 1000000000 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 999999999 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 10000 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 1 1337\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['576694 1234562 1234567\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['12350 12000 12345\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['576695 1234562 1234567\\r\\n'], 'output': ['1 000576695\\r\\n']}, {'input': ['0 0 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['999999999 999999999 9009009\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 7\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1 1 7\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 9999991 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['9902593 9902584 9902593\\r\\n'], 'output': ['1 002490619\\r\\n']}, {'input': ['10000000 9999977 9999979\\r\\n'], 'output': ['1 009909503\\r\\n']}, {'input': ['1000000000 1000000000 9999999\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['11 9 11\\r\\n'], 'output': ['1 000000010\\r\\n']}, {'input': ['0 7 13\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 3\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['100 2 3\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['2 7 13\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 9\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1000000000 9999995 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 25 30\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['243 1001 1003\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['9 9 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 4 7\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 1 10\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 11\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['0 0 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 0 3\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['10 12000 12345\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 0 2\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1 3\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['3 1 7\\r\\n'], 'output': ['1 000000002\\r\\n']}, {'input': ['1000000000 2 1000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['23 0 23\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['123456789 1234561 1234567\\r\\n'], 'output': ['1 000549636\\r\\n']}, {'input': ['11 10 13\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['138 11711 11829\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 100050 1000001\\r\\n'], 'output': ['1 000000101\\r\\n']}]", "source_code": "import java.util.*;\n \npublic class JavaApplication7 {\n \n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt(), b = sc.nextInt(), mod = sc.nextInt();\n        int lcm = (a * b) / gcd(a, b);\n        if (lcm % mod == 0) System.out.println(2);\n        else\n        {\n            boolean flag = true;\n            while (flag)\n            {\n                flag = false;\n                String temp = \"\";\n                for (int i = 1; i <= 9; i++)\n                    temp += \"9\";\n                temp = temp + \"1\";\n                long val = Long.parseLong(temp);\n                if (val % mod == 0 && val > b)\n                {\n                    System.out.println(1 + \" \" + temp);\n                    flag = true;\n                }\n                temp = \"\";\n                for (int i = 1; i <= 9; i++)\n                    temp += \"0\";\n                temp = temp + \"1\";\n                val = Long.parseLong(temp);\n                if (val % mod == 0 && val > b)\n                {\n                    System.out.println(1 + \" \" + temp);\n                    flag = true;\n                }\n            }\n        }\n    }\n    static int gcd(int a, int b){\n        while(b!= 0){\n          int temp = a % b; \n          a = b; \n          b = temp; \n        }\n        return a;\n    }\n}"}
{"src_uid": "8b6f633802293202531264446d33fee5", "id": 102, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': ['1 10 7\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 0 9\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['10 7 8\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['6 4 10\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 1 4\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 7 9\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['13 4 51\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['0 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['2 1 3\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['0 2 2\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['2 3 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['3 0 3\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1 1 2\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['3 2 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 3 3\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 0 13\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1 2 13\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 3 12\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1 2 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 3 12\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['815 216 182\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['218 550 593\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['116482865 344094604 3271060\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['19749161 751031022 646204\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['70499104 10483793 5504995\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1960930 562910 606828\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['8270979 4785512 9669629\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['9323791 4748006 5840080\\r\\n'], 'output': ['1 000000005\\r\\n']}, {'input': ['972037745 4602117 5090186\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['585173560 4799128 5611727\\r\\n'], 'output': ['1 000000036\\r\\n']}, {'input': ['22033548 813958 4874712\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['702034015 6007275 9777625\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['218556 828183 7799410\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1167900 2709798 6800151\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['7004769 3114686 4659684\\r\\n'], 'output': ['1 000000002\\r\\n']}, {'input': ['1000000000 1000000000 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['3631 1628 367377\\r\\n'], 'output': ['1 000000009\\r\\n']}, {'input': ['3966 5002 273075\\r\\n'], 'output': ['1 000000008\\r\\n']}, {'input': ['2388 2896 73888\\r\\n'], 'output': ['1 000000016\\r\\n']}, {'input': ['0 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 1 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1000000000 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 1000000000 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 0 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1000000000 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 0 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 999999999 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['999999999 0 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['999999999 999999999 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['999999999 1000000000 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 999999999 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 10000 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 1 1337\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['576694 1234562 1234567\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['12350 12000 12345\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['576695 1234562 1234567\\r\\n'], 'output': ['1 000576695\\r\\n']}, {'input': ['0 0 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['999999999 999999999 9009009\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 7\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1 1 7\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 9999991 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['9902593 9902584 9902593\\r\\n'], 'output': ['1 002490619\\r\\n']}, {'input': ['10000000 9999977 9999979\\r\\n'], 'output': ['1 009909503\\r\\n']}, {'input': ['1000000000 1000000000 9999999\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['11 9 11\\r\\n'], 'output': ['1 000000010\\r\\n']}, {'input': ['0 7 13\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 3\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['100 2 3\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['2 7 13\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 9\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1000000000 9999995 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 25 30\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['243 1001 1003\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['9 9 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 4 7\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 1 10\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 11\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['0 0 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 0 3\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['10 12000 12345\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 0 2\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1 3\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['3 1 7\\r\\n'], 'output': ['1 000000002\\r\\n']}, {'input': ['1000000000 2 1000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['23 0 23\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['123456789 1234561 1234567\\r\\n'], 'output': ['1 000549636\\r\\n']}, {'input': ['11 10 13\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['138 11711 11829\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 100050 1000001\\r\\n'], 'output': ['1 000000101\\r\\n']}]", "source_code": "import java.util.Scanner;\nimport static java.util.stream.IntStream.range;\n\n/**\n *\n * @author Suleyman Yasin KUDUKLA\n */\npublic class HelloWorld \n{\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt(), b = sc.nextInt(), mod = sc.nextInt();\n        int ans = 2;\n        for (int i : range(1, 10).map(x -> a / (int) Math.pow(10, 8 - x) + 1)) {\n            String x = range(0, 9).mapToObj(y -> i + \"\").repeat(x).collect(StringBuilder::new, StringBuilder::append, StringBuilder::append).toString();\n            if ((int) (x + b) % mod!= 0) {\n                ans = 1;\n                System.out.println(1 + \" \" + x);\n                break;\n            }\n        }\n        if (ans == 2) {\n            System.out.println(2);\n        }\n    }\n}\n"}
{"src_uid": "8b6f633802293202531264446d33fee5", "id": 102, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': ['1 10 7\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 0 9\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['10 7 8\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['6 4 10\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 1 4\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 7 9\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['13 4 51\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['0 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['2 1 3\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['0 2 2\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['2 3 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['3 0 3\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1 1 2\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['3 2 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 3 3\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 0 13\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1 2 13\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 3 12\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1 2 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 3 12\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['815 216 182\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['218 550 593\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['116482865 344094604 3271060\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['19749161 751031022 646204\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['70499104 10483793 5504995\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1960930 562910 606828\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['8270979 4785512 9669629\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['9323791 4748006 5840080\\r\\n'], 'output': ['1 000000005\\r\\n']}, {'input': ['972037745 4602117 5090186\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['585173560 4799128 5611727\\r\\n'], 'output': ['1 000000036\\r\\n']}, {'input': ['22033548 813958 4874712\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['702034015 6007275 9777625\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['218556 828183 7799410\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1167900 2709798 6800151\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['7004769 3114686 4659684\\r\\n'], 'output': ['1 000000002\\r\\n']}, {'input': ['1000000000 1000000000 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['3631 1628 367377\\r\\n'], 'output': ['1 000000009\\r\\n']}, {'input': ['3966 5002 273075\\r\\n'], 'output': ['1 000000008\\r\\n']}, {'input': ['2388 2896 73888\\r\\n'], 'output': ['1 000000016\\r\\n']}, {'input': ['0 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 1 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1000000000 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 1000000000 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 0 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1000000000 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 0 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 999999999 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['999999999 0 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['999999999 999999999 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['999999999 1000000000 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 999999999 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 10000 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 1 1337\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['576694 1234562 1234567\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['12350 12000 12345\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['576695 1234562 1234567\\r\\n'], 'output': ['1 000576695\\r\\n']}, {'input': ['0 0 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['999999999 999999999 9009009\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 7\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1 1 7\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 9999991 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['9902593 9902584 9902593\\r\\n'], 'output': ['1 002490619\\r\\n']}, {'input': ['10000000 9999977 9999979\\r\\n'], 'output': ['1 009909503\\r\\n']}, {'input': ['1000000000 1000000000 9999999\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['11 9 11\\r\\n'], 'output': ['1 000000010\\r\\n']}, {'input': ['0 7 13\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 3\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['100 2 3\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['2 7 13\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 9\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1000000000 9999995 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 25 30\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['243 1001 1003\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['9 9 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 4 7\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 1 10\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 11\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['0 0 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 0 3\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['10 12000 12345\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 0 2\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1 3\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['3 1 7\\r\\n'], 'output': ['1 000000002\\r\\n']}, {'input': ['1000000000 2 1000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['23 0 23\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['123456789 1234561 1234567\\r\\n'], 'output': ['1 000549636\\r\\n']}, {'input': ['11 10 13\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['138 11711 11829\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 100050 1000001\\r\\n'], 'output': ['1 000000101\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class try7 {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int a = in.nextInt(), b = in.nextInt(), mod = in.nextInt();\n        int dp[][][] = new int[2][100005][10];\n        dp[0][0][0] = 1;\n        for(int i = 0; i < 2; i++){\n            for(int j = 0; j < 100005; j++){\n                for(int k = 0; k < 10; k++){\n                    if(j > 0 && k == 0 && i == 1){\n                        dp[i][j][k] = dp[i][j - 1][k];\n                    }else if(j > 0 && k!= 0){\n                        dp[i][j][k] = dp[i][j][k - 1] + dp[i][j - 1][k];\n                        if(j >= k && i == 1){\n                            dp[i][j][k] -= dp[i][j - k][k];\n                        }\n                    }\n                }\n            }\n        }\n        int res = 0, val = 0;\n        String s = \"\";\n        for(int i = 0; i < 100005; i++){\n            if(dp[0][i][mod] == 1){\n                res = i;\n            }\n        }\n        for(int i = 1; i < 10; i++){\n            int temp = 0;\n            if(res >= i){\n                temp = res / i;\n                if(res % i == 0){\n                    temp--;\n                }\n            }\n            int check = temp * i;\n            if(check > b){\n                val = b;\n            }else{\n                val = check;\n            }\n            if(a < i){\n                val = a;\n            }\n            s += String.valueOf(val);\n        }\n        if(dp[0][res][mod] == 1){\n            System.out.println(\"1 \" + s);\n        }else{\n            System.out.println(\"2\");\n        }\n\n    }\n}"}
{"src_uid": "8b6f633802293202531264446d33fee5", "id": 102, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': ['1 10 7\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 0 9\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['10 7 8\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['6 4 10\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 1 4\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 7 9\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['13 4 51\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['0 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['2 1 3\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['0 2 2\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['2 3 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['3 0 3\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1 1 2\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['3 2 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 3 3\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 0 13\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1 2 13\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 3 12\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1 2 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 3 12\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['815 216 182\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['218 550 593\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['116482865 344094604 3271060\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['19749161 751031022 646204\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['70499104 10483793 5504995\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1960930 562910 606828\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['8270979 4785512 9669629\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['9323791 4748006 5840080\\r\\n'], 'output': ['1 000000005\\r\\n']}, {'input': ['972037745 4602117 5090186\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['585173560 4799128 5611727\\r\\n'], 'output': ['1 000000036\\r\\n']}, {'input': ['22033548 813958 4874712\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['702034015 6007275 9777625\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['218556 828183 7799410\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1167900 2709798 6800151\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['7004769 3114686 4659684\\r\\n'], 'output': ['1 000000002\\r\\n']}, {'input': ['1000000000 1000000000 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['3631 1628 367377\\r\\n'], 'output': ['1 000000009\\r\\n']}, {'input': ['3966 5002 273075\\r\\n'], 'output': ['1 000000008\\r\\n']}, {'input': ['2388 2896 73888\\r\\n'], 'output': ['1 000000016\\r\\n']}, {'input': ['0 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 1 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1000000000 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 1000000000 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 0 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1000000000 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 0 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 999999999 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['999999999 0 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['999999999 999999999 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['999999999 1000000000 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 999999999 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 10000 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 1 1337\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['576694 1234562 1234567\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['12350 12000 12345\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['576695 1234562 1234567\\r\\n'], 'output': ['1 000576695\\r\\n']}, {'input': ['0 0 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['999999999 999999999 9009009\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 7\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1 1 7\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 9999991 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['9902593 9902584 9902593\\r\\n'], 'output': ['1 002490619\\r\\n']}, {'input': ['10000000 9999977 9999979\\r\\n'], 'output': ['1 009909503\\r\\n']}, {'input': ['1000000000 1000000000 9999999\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['11 9 11\\r\\n'], 'output': ['1 000000010\\r\\n']}, {'input': ['0 7 13\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 3\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['100 2 3\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['2 7 13\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 9\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1000000000 9999995 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 25 30\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['243 1001 1003\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['9 9 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 4 7\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 1 10\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 11\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['0 0 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 0 3\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['10 12000 12345\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 0 2\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1 3\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['3 1 7\\r\\n'], 'output': ['1 000000002\\r\\n']}, {'input': ['1000000000 2 1000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['23 0 23\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['123456789 1234561 1234567\\r\\n'], 'output': ['1 000549636\\r\\n']}, {'input': ['11 10 13\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['138 11711 11829\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 100050 1000001\\r\\n'], 'output': ['1 000000101\\r\\n']}]", "source_code": "/**\n * ******* Created on 25/10/19 6:17 PM*******\n */\n\nimport java.io.*;\nimport java.util.*;\nimport java.math.BigDecimal;\n\npublic class MiniMax {\n\n    static class Reader {\n        final private int BUFFER_SIZE = 1 << 16;\n        private DataInputStream din;\n        private byte[] buffer;\n        private int bufferPointer, bytesRead;\n\n        public Reader() {\n            din = new DataInputStream(System.in);\n            buffer = new byte[BUFFER_SIZE];\n            bufferPointer = bytesRead = 0;\n        }\n\n        public Reader(String file_name) throws IOException {\n            din = new DataInputStream(new FileInputStream(file_name));\n            buffer = new byte[BUFFER_SIZE];\n            bufferPointer = bytesRead = 0;\n        }\n\n        public String readLine() throws IOException {\n            byte[] buf = new byte[64]; // line length\n            int cnt = 0, c;\n            while ((c = read())!= -1) {\n                if (c == '\\n') {\n                    return new String(buf, 0, cnt);\n                }\n                buf[cnt++] = (byte) c;\n            }\n            return new String(buf, 0, cnt);\n        }\n\n        public int nextInt() throws IOException {\n            int ret = 0;\n            byte c = read();\n            while (c <='') c = read();\n            boolean neg = (c == '-');\n            if (neg) c = read();\n            do {\n                ret *= 10;\n                ret += c - '0';\n            }\n            while ((c = read()) >= '0' && c <= '9');\n            if (neg) return -ret;\n            return ret;\n        }\n\n        public long nextLong() throws IOException {\n            long ret = 0;\n            byte c = read();\n            while (c <='') c = read();\n            boolean neg = (c == '-');\n            if (neg) c = read();\n            do {\n                ret *= 10;\n                ret += c - '0';\n            }\n            while ((c = read()) >= '0' && c <= '9');\n            if (neg) return -ret;\n            return ret;\n        }\n\n        public double nextDouble() throws IOException {\n            double ret = 0, div = 1;\n            byte c = read();\n            while (c <='') c = read();\n            boolean neg = (c == '-');\n            if (neg) c = read();\n            do {\n                ret = ret * 10 + c - '0';\n            }\n            while ((c = read()) >= '0' && c <= '9');\n            if (c == '.') {\n                while ((c = read()) >= '0' && c <= '9') {\n                    ret += (c - '0') / (div *= 10);\n                }\n            }\n            if (neg) return -ret;\n            return ret;\n        }\n\n        private void fillBuffer() throws IOException {\n            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);\n            if (bytesRead == -1)\n                buffer[0] = -1;\n        }\n\n        private byte read() throws IOException {\n            if (bufferPointer == bytesRead) fillBuffer();\n            return buffer[bufferPointer++];\n        }\n\n        public void close() throws IOException {\n            if (din == null) return;\n            din.close();\n        }\n    }\n\n    private static void solve() throws IOException {\n        int a = in.nextInt(), b = in.nextInt(), mod = in.nextInt();\n        int win = 0, cnt = 0, m = 0, d = 100000000;\n        for (int i = 0; i < 1000; i++) {\n            for (int j = 0; j < 1000; j++) {\n                int val = (i * 10000 + j) % mod;\n                if (val < m) m = val;\n                int t = a * 100000000 + b * val;\n               "}
{"src_uid": "8b6f633802293202531264446d33fee5", "id": 102, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': ['1 10 7\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 0 9\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['10 7 8\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['6 4 10\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 1 4\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 7 9\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['13 4 51\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['0 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['2 1 3\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['0 2 2\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['2 3 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['3 0 3\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1 1 2\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['3 2 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 3 3\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 0 13\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1 2 13\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 3 12\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1 2 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 3 12\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['815 216 182\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['218 550 593\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['116482865 344094604 3271060\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['19749161 751031022 646204\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['70499104 10483793 5504995\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1960930 562910 606828\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['8270979 4785512 9669629\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['9323791 4748006 5840080\\r\\n'], 'output': ['1 000000005\\r\\n']}, {'input': ['972037745 4602117 5090186\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['585173560 4799128 5611727\\r\\n'], 'output': ['1 000000036\\r\\n']}, {'input': ['22033548 813958 4874712\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['702034015 6007275 9777625\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['218556 828183 7799410\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1167900 2709798 6800151\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['7004769 3114686 4659684\\r\\n'], 'output': ['1 000000002\\r\\n']}, {'input': ['1000000000 1000000000 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['3631 1628 367377\\r\\n'], 'output': ['1 000000009\\r\\n']}, {'input': ['3966 5002 273075\\r\\n'], 'output': ['1 000000008\\r\\n']}, {'input': ['2388 2896 73888\\r\\n'], 'output': ['1 000000016\\r\\n']}, {'input': ['0 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 1 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 0 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1000000000 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 1000000000 1\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 0 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1000000000 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 0 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 999999999 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['999999999 0 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['999999999 999999999 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['999999999 1000000000 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 999999999 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 10000 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 1 1337\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['576694 1234562 1234567\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['12350 12000 12345\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['576695 1234562 1234567\\r\\n'], 'output': ['1 000576695\\r\\n']}, {'input': ['0 0 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['999999999 999999999 9009009\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 7\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1 1 7\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 9999991 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['9902593 9902584 9902593\\r\\n'], 'output': ['1 002490619\\r\\n']}, {'input': ['10000000 9999977 9999979\\r\\n'], 'output': ['1 009909503\\r\\n']}, {'input': ['1000000000 1000000000 9999999\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['11 9 11\\r\\n'], 'output': ['1 000000010\\r\\n']}, {'input': ['0 7 13\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 3\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['100 2 3\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['2 7 13\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 9\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['1000000000 9999995 10000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 25 30\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['243 1001 1003\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['9 9 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['4 4 7\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 1 10\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1 0 11\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['0 0 11\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 0 3\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['10 12000 12345\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 0 2\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['0 1 3\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['3 1 7\\r\\n'], 'output': ['1 000000002\\r\\n']}, {'input': ['1000000000 2 1000000\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['23 0 23\\r\\n'], 'output': ['1 000000001\\r\\n']}, {'input': ['123456789 1234561 1234567\\r\\n'], 'output': ['1 000549636\\r\\n']}, {'input': ['11 10 13\\r\\n'], 'output': ['1 000000011\\r\\n']}, {'input': ['138 11711 11829\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1000000000 100050 1000001\\r\\n'], 'output': ['1 000000101\\r\\n']}]", "source_code": "import java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport static java.util.Collections.reverseOrder;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class JavaApplication16 {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) throws IOException {\n        Scanner input = new Scanner(System.in);\n        int a = input.nextInt(), b = input.nextInt(), mod = input.nextInt();\n        String smallest = \"\";\n        int res = 0;\n        for (int i = 1; i <= 9; i++) {\n            int cur = i;\n            int sum = 0;\n            for (int j = 1; j <= 9; j++) {\n                cur = (cur * 10 + j) % mod;\n                if (cur == 0) {\n                    sum = sum + 10;\n                    cur = j;\n                }\n            }\n            if (sum < 10) {\n                res = 1;\n                smallest = smallest + (i + \" \");\n            } else if (sum == 10 && cur > 0 && cur <= b) {\n                res = 1;\n                smallest = smallest + (i + \"0000000\" + cur);\n            }\n        }\n        if (a % mod == 0) {\n            System.out.println(\"2\");\n        } else if (res == 1) {\n            System.out.println(\"1\" + smallest);\n        } else {\n            System.out.println(\"2\");\n        }\n\n    }\n}\n"}
{"src_uid": "db853d598b638dcdeaea5a26ae83758b", "id": 103, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2300, "testcases": "[{'input': 'aaaa\\r\\n', 'output': ['20\\r\\n']}, {'input': 'abcdef\\r\\n', 'output': ['21\\r\\n']}, {'input': 'abacabadabacaba\\r\\n', 'output': ['188\\r\\n']}, {'input': 'tkth\\r\\n', 'output': ['11\\r\\n']}, {'input': 'eqkrqe\\r\\n', 'output': ['23\\r\\n']}, {'input': 'cwuiax\\r\\n', 'output': ['21\\r\\n']}, {'input': 'hhhhqhqh\\r\\n', 'output': ['59\\r\\n']}, {'input': 'gmxfmcgp\\r\\n', 'output': ['38\\r\\n']}, {'input': 'eleellleeee\\r\\n', 'output': ['104\\r\\n']}, {'input': 'usussubuubbbbs\\r\\n', 'output': ['138\\r\\n']}, {'input': 'lhmpaugvnqzrfxke\\r\\n', 'output': ['136\\r\\n']}, {'input': 'xkkkkkkkkkkkkkkkkxkkkk\\r\\n', 'output': ['1098\\r\\n']}, {'input': 'pprppppriiriiiirprppprriir\\r\\n', 'output': ['512\\r\\n']}, {'input': 'jsoxkutcvyshsinfmtrpujedcbmyqlojzco\\r\\n', 'output': ['646\\r\\n']}, {'input': 'emcegmekgnlefkeguqkfffnduqhfhhhndlfhlfdqdncefnn\\r\\n', 'output': ['1227\\r\\n']}, {'input': 'ffffdjfddffdjdfffddjfffffffjfffjdjfffjfjfdjjfjdjjdjjjdffd\\r\\n', 'output': ['2564\\r\\n']}, {'input': 'cxvhmeyouudwuglhbwndzwmjjsgrnuwnzwaycfspyyrdckjcidfsabvdxzjkvm\\r\\n', 'output': ['2023\\r\\n']}, {'input': 'cahdktuxuukmbuqcqactqhqdcxpkqcuumckttdpmpqxxkacpappxuqkxbuahqdphhddhquthqaapm\\r\\n', 'output': ['3258\\r\\n']}, {'input': 'hhwhhwhhhwhwwhhwwwhwhhhwhwwwhhwhwhhhhhhwhwhwwwhhwwwhhwhhhhwhwwhwhwwwwhhwwhwhwwwhhhwwhwhwhhwwwhwhhhwwwhwhw\\r\\n', 'output': ['10856\\r\\n']}, {'input': 'cnrkvxbljhitbvoysdpghhhnymktvburpvxybnvugkzudmnmpuhevzyjpbtraaepszhhssmcozkgbjayztrvqwdfmjlhtvarkkdsbnjrabqexpfjozmjzfbmdsihovoxmmtjgtfyaisllysnekdxozhdwu\\r\\n', 'output': ['12399\\r\\n']}, {'input': 'qasiyhdivaiyyhdqiqsvqhtqsetxqvaeqatxesxehisyqiivhvayaxvsxhsydiesaxydysqhedxqhsqivvidqtsitiiveexiehsqdteahyxtsyqetahviyhqvytexethsqssxiytqhxxxdihxietsyxqhtitheyeateeyhythxhhqaad\\r\\n', 'output': ['17103\\r\\n']}, {'input': 'ggwgwwgwwkggwgwwkgwwwggwwwggkgkgwkwgkkgkwwgwkkggwggkwgwgkgwwkwkkkkwggwwkwkkkgwkwwwwwgwkwkkwkggwwgggkkwwkgkgkwgkgkwggkwgggwwkgkwgkwkkgwkkkkggwwwgkggkwwgkwkgwgggkggkkkwwwwwkkgkwggwgkwwwwggwwgkkggwkkwkkgkwggggggkkwkkgkkkwkwwkwggwkkwggggwg\\r\\n', 'output': ['41166\\r\\n']}, {'input': 'tmoqyzoikohtgkybnwjizgjypzycmtstmsizrqrmczmqmpewxiwlqzcaufxkchqyjegktxihlksisbgogpyxkltioovelwaqcbebgcyygxsshsirkwvtsvhpqtbomueaszkrlixueyeiccvfiuoogomjlhjkacnxtimkprmjttpmeaminvmcqagrpjighsvaosojymcjoyopsvkrphzbnckcvvckicmjwpvawjuzkofnuvcahwhzjpfngwyobiufivsjnekjcloobvzawrvosnkvalmr\\r\\n', 'output': ['42165\\r\\n']}, {'input': 'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrbrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrbrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\\r\\n', 'output': ['2214420\\r\\n']}, {'input': 'zzzzooozzzoozozoozzzzzzozooozoozoozzozzozoooozzzzzzoooozzozooozoozzzozozoooooozzzozozooooozozozozzooozozzooozzzzozozoozoozzzozooozzzzoozzzzozzzzoooozozozozozzoooozzzooozzoooooooozozzozozooozzzooooozozooozozzozozoozzozzzzooozzoozozozzozozoozozzzoozozoooozzooozozooooozzzzzoozoozzzozzzoozzoozozzooozzzzzzoozzozzoozzzoozozzooozoozzzozooozozzoozoozozzzzzoozoozzzooooozooooooozooooozzoozoozzzooooozoozozozozzzoozzzzzoozzzzzzooooooozzzzozzozzo\\r\\n', 'output': ['190205\\r\\n']}]", "source_code": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\nimport java.util.*;\n/**\n *\n * @author Ahmed_Naser\n */\npublic class test {\n\n  \n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        Scanner a= new Scanner(System.in);\n        String str = a.nextLine();\n        long sum=0;\n        for(int len = 1 ; len <= str.length();len++){\n            for(int i =0 ; i+len <= str.length();i++){\n                sum += (long)(Math.floor((str.length()-i)/len)) * (Math.floor((str.length()-i-len+1)/len)) ; \n            }\n        }\n        System.out.print(sum);\n    }\n}\n"}
{"src_uid": "db853d598b638dcdeaea5a26ae83758b", "id": 103, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2300, "testcases": "[{'input': 'aaaa\\r\\n', 'output': ['20\\r\\n']}, {'input': 'abcdef\\r\\n', 'output': ['21\\r\\n']}, {'input': 'abacabadabacaba\\r\\n', 'output': ['188\\r\\n']}, {'input': 'tkth\\r\\n', 'output': ['11\\r\\n']}, {'input': 'eqkrqe\\r\\n', 'output': ['23\\r\\n']}, {'input': 'cwuiax\\r\\n', 'output': ['21\\r\\n']}, {'input': 'hhhhqhqh\\r\\n', 'output': ['59\\r\\n']}, {'input': 'gmxfmcgp\\r\\n', 'output': ['38\\r\\n']}, {'input': 'eleellleeee\\r\\n', 'output': ['104\\r\\n']}, {'input': 'usussubuubbbbs\\r\\n', 'output': ['138\\r\\n']}, {'input': 'lhmpaugvnqzrfxke\\r\\n', 'output': ['136\\r\\n']}, {'input': 'xkkkkkkkkkkkkkkkkxkkkk\\r\\n', 'output': ['1098\\r\\n']}, {'input': 'pprppppriiriiiirprppprriir\\r\\n', 'output': ['512\\r\\n']}, {'input': 'jsoxkutcvyshsinfmtrpujedcbmyqlojzco\\r\\n', 'output': ['646\\r\\n']}, {'input': 'emcegmekgnlefkeguqkfffnduqhfhhhndlfhlfdqdncefnn\\r\\n', 'output': ['1227\\r\\n']}, {'input': 'ffffdjfddffdjdfffddjfffffffjfffjdjfffjfjfdjjfjdjjdjjjdffd\\r\\n', 'output': ['2564\\r\\n']}, {'input': 'cxvhmeyouudwuglhbwndzwmjjsgrnuwnzwaycfspyyrdckjcidfsabvdxzjkvm\\r\\n', 'output': ['2023\\r\\n']}, {'input': 'cahdktuxuukmbuqcqactqhqdcxpkqcuumckttdpmpqxxkacpappxuqkxbuahqdphhddhquthqaapm\\r\\n', 'output': ['3258\\r\\n']}, {'input': 'hhwhhwhhhwhwwhhwwwhwhhhwhwwwhhwhwhhhhhhwhwhwwwhhwwwhhwhhhhwhwwhwhwwwwhhwwhwhwwwhhhwwhwhwhhwwwhwhhhwwwhwhw\\r\\n', 'output': ['10856\\r\\n']}, {'input': 'cnrkvxbljhitbvoysdpghhhnymktvburpvxybnvugkzudmnmpuhevzyjpbtraaepszhhssmcozkgbjayztrvqwdfmjlhtvarkkdsbnjrabqexpfjozmjzfbmdsihovoxmmtjgtfyaisllysnekdxozhdwu\\r\\n', 'output': ['12399\\r\\n']}, {'input': 'qasiyhdivaiyyhdqiqsvqhtqsetxqvaeqatxesxehisyqiivhvayaxvsxhsydiesaxydysqhedxqhsqivvidqtsitiiveexiehsqdteahyxtsyqetahviyhqvytexethsqssxiytqhxxxdihxietsyxqhtitheyeateeyhythxhhqaad\\r\\n', 'output': ['17103\\r\\n']}, {'input': 'ggwgwwgwwkggwgwwkgwwwggwwwggkgkgwkwgkkgkwwgwkkggwggkwgwgkgwwkwkkkkwggwwkwkkkgwkwwwwwgwkwkkwkggwwgggkkwwkgkgkwgkgkwggkwgggwwkgkwgkwkkgwkkkkggwwwgkggkwwgkwkgwgggkggkkkwwwwwkkgkwggwgkwwwwggwwgkkggwkkwkkgkwggggggkkwkkgkkkwkwwkwggwkkwggggwg\\r\\n', 'output': ['41166\\r\\n']}, {'input': 'tmoqyzoikohtgkybnwjizgjypzycmtstmsizrqrmczmqmpewxiwlqzcaufxkchqyjegktxihlksisbgogpyxkltioovelwaqcbebgcyygxsshsirkwvtsvhpqtbomueaszkrlixueyeiccvfiuoogomjlhjkacnxtimkprmjttpmeaminvmcqagrpjighsvaosojymcjoyopsvkrphzbnckcvvckicmjwpvawjuzkofnuvcahwhzjpfngwyobiufivsjnekjcloobvzawrvosnkvalmr\\r\\n', 'output': ['42165\\r\\n']}, {'input': 'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrbrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrbrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\\r\\n', 'output': ['2214420\\r\\n']}, {'input': 'zzzzooozzzoozozoozzzzzzozooozoozoozzozzozoooozzzzzzoooozzozooozoozzzozozoooooozzzozozooooozozozozzooozozzooozzzzozozoozoozzzozooozzzzoozzzzozzzzoooozozozozozzoooozzzooozzoooooooozozzozozooozzzooooozozooozozzozozoozzozzzzooozzoozozozzozozoozozzzoozozoooozzooozozooooozzzzzoozoozzzozzzoozzoozozzooozzzzzzoozzozzoozzzoozozzooozoozzzozooozozzoozoozozzzzzoozoozzzooooozooooooozooooozzoozoozzzooooozoozozozozzzoozzzzzoozzzzzzooooooozzzzozzozzo\\r\\n', 'output': ['190205\\r\\n']}]", "source_code": "import java.util.*;\nimport java.math.*;\nimport static java.util.Arrays.*;\n\npublic class JavaApplication1 {\n  \n    public static long solve(long n){\n      long[][] table = new long[n][n];\n      for(int i=0;i<n;++i){\n        table[i][i] = 1;\n      }\n      for(int len=2;len<=n;++len){\n        for(int l=0;l+len<=n;++l){\n          int r = l+len-1;\n          if(table[l+1][r]!= 0){\n            table[l][r] = table[l+1][r];\n          }\n          else if(s.charAt(l) == s.charAt(r)){\n            table[l][r] = table[l+1][r-1]+2;\n          }\n        }\n      }\n      return table[0][n-1];\n    }\n    \n    public static void main(String[] args){\n      String input = new java.util.Scanner(System.in).next();\n      int len = input.length();\n      long ans = 0;\n      String[] strs = new String[len];\n      for(int i=0;i<len;++i){\n        for(int j=i;j<len;++j){\n          strs[ans] = input.substring(i,j+1);\n          ans++;\n        }\n      }\n      s = input;\n      for(int i=0;i<ans;++i){\n        ans += solve(strs[i].length()) - strs[i].length();\n      }\n      System.out.println(ans);\n    }\n    \n    static String s;\n}"}
{"src_uid": "db853d598b638dcdeaea5a26ae83758b", "id": 103, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2300, "testcases": "[{'input': 'aaaa\\r\\n', 'output': ['20\\r\\n']}, {'input': 'abcdef\\r\\n', 'output': ['21\\r\\n']}, {'input': 'abacabadabacaba\\r\\n', 'output': ['188\\r\\n']}, {'input': 'tkth\\r\\n', 'output': ['11\\r\\n']}, {'input': 'eqkrqe\\r\\n', 'output': ['23\\r\\n']}, {'input': 'cwuiax\\r\\n', 'output': ['21\\r\\n']}, {'input': 'hhhhqhqh\\r\\n', 'output': ['59\\r\\n']}, {'input': 'gmxfmcgp\\r\\n', 'output': ['38\\r\\n']}, {'input': 'eleellleeee\\r\\n', 'output': ['104\\r\\n']}, {'input': 'usussubuubbbbs\\r\\n', 'output': ['138\\r\\n']}, {'input': 'lhmpaugvnqzrfxke\\r\\n', 'output': ['136\\r\\n']}, {'input': 'xkkkkkkkkkkkkkkkkxkkkk\\r\\n', 'output': ['1098\\r\\n']}, {'input': 'pprppppriiriiiirprppprriir\\r\\n', 'output': ['512\\r\\n']}, {'input': 'jsoxkutcvyshsinfmtrpujedcbmyqlojzco\\r\\n', 'output': ['646\\r\\n']}, {'input': 'emcegmekgnlefkeguqkfffnduqhfhhhndlfhlfdqdncefnn\\r\\n', 'output': ['1227\\r\\n']}, {'input': 'ffffdjfddffdjdfffddjfffffffjfffjdjfffjfjfdjjfjdjjdjjjdffd\\r\\n', 'output': ['2564\\r\\n']}, {'input': 'cxvhmeyouudwuglhbwndzwmjjsgrnuwnzwaycfspyyrdckjcidfsabvdxzjkvm\\r\\n', 'output': ['2023\\r\\n']}, {'input': 'cahdktuxuukmbuqcqactqhqdcxpkqcuumckttdpmpqxxkacpappxuqkxbuahqdphhddhquthqaapm\\r\\n', 'output': ['3258\\r\\n']}, {'input': 'hhwhhwhhhwhwwhhwwwhwhhhwhwwwhhwhwhhhhhhwhwhwwwhhwwwhhwhhhhwhwwhwhwwwwhhwwhwhwwwhhhwwhwhwhhwwwhwhhhwwwhwhw\\r\\n', 'output': ['10856\\r\\n']}, {'input': 'cnrkvxbljhitbvoysdpghhhnymktvburpvxybnvugkzudmnmpuhevzyjpbtraaepszhhssmcozkgbjayztrvqwdfmjlhtvarkkdsbnjrabqexpfjozmjzfbmdsihovoxmmtjgtfyaisllysnekdxozhdwu\\r\\n', 'output': ['12399\\r\\n']}, {'input': 'qasiyhdivaiyyhdqiqsvqhtqsetxqvaeqatxesxehisyqiivhvayaxvsxhsydiesaxydysqhedxqhsqivvidqtsitiiveexiehsqdteahyxtsyqetahviyhqvytexethsqssxiytqhxxxdihxietsyxqhtitheyeateeyhythxhhqaad\\r\\n', 'output': ['17103\\r\\n']}, {'input': 'ggwgwwgwwkggwgwwkgwwwggwwwggkgkgwkwgkkgkwwgwkkggwggkwgwgkgwwkwkkkkwggwwkwkkkgwkwwwwwgwkwkkwkggwwgggkkwwkgkgkwgkgkwggkwgggwwkgkwgkwkkgwkkkkggwwwgkggkwwgkwkgwgggkggkkkwwwwwkkgkwggwgkwwwwggwwgkkggwkkwkkgkwggggggkkwkkgkkkwkwwkwggwkkwggggwg\\r\\n', 'output': ['41166\\r\\n']}, {'input': 'tmoqyzoikohtgkybnwjizgjypzycmtstmsizrqrmczmqmpewxiwlqzcaufxkchqyjegktxihlksisbgogpyxkltioovelwaqcbebgcyygxsshsirkwvtsvhpqtbomueaszkrlixueyeiccvfiuoogomjlhjkacnxtimkprmjttpmeaminvmcqagrpjighsvaosojymcjoyopsvkrphzbnckcvvckicmjwpvawjuzkofnuvcahwhzjpfngwyobiufivsjnekjcloobvzawrvosnkvalmr\\r\\n', 'output': ['42165\\r\\n']}, {'input': 'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrbrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrbrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\\r\\n', 'output': ['2214420\\r\\n']}, {'input': 'zzzzooozzzoozozoozzzzzzozooozoozoozzozzozoooozzzzzzoooozzozooozoozzzozozoooooozzzozozooooozozozozzooozozzooozzzzozozoozoozzzozooozzzzoozzzzozzzzoooozozozozozzoooozzzooozzoooooooozozzozozooozzzooooozozooozozzozozoozzozzzzooozzoozozozzozozoozozzzoozozoooozzooozozooooozzzzzoozoozzzozzzoozzoozozzooozzzzzzoozzozzoozzzoozozzooozoozzzozooozozzoozoozozzzzzoozoozzzooooozooooooozooooozzoozoozzzooooozoozozozozzzoozzzzzoozzzzzzooooooozzzzozzozzo\\r\\n', 'output': ['190205\\r\\n']}]", "source_code": "import java.util.*;\nimport java.math.*;\n\n\npublic class Main {\n    \n\n    static class Reader {\n        final private int BUFFER_SIZE = 1 << 16;\n        private DataInputStream din;\n        private byte[] buffer;\n        private int bufferPointer, bytesRead;\n\n        public Reader() {\n            din = new DataInputStream(System.in);\n            buffer = new byte[BUFFER_SIZE];\n            bufferPointer = bytesRead = 0;\n        }\n\n        public Reader(String file_name) throws IOException {\n            din = new DataInputStream(new FileInputStream(file_name));\n            buffer = new byte[BUFFER_SIZE];\n            bufferPointer = bytesRead = 0;\n        }\n\n        public String readLine() throws IOException {\n            byte[] buf = new byte[64]; // line length\n            int cnt = 0, c;\n            while ((c = read())!= -1) {\n                if (c == '\\n') {\n                    break;\n                }\n                buf[cnt++] = (byte) c;\n            }\n            return new String(buf, 0, cnt);\n        }\n\n        public int nextInt() throws IOException {\n            int ret = 0;\n            byte c = read();\n            while (c <='') {\n                c = read();\n            }\n            boolean neg = (c == '-');\n            if (neg) c = read();\n            do {\n                ret = ret * 10 + c - '0';\n            }  while ((c = read()) >= '0' && c <= '9');\n            if (neg) ret *= -1;\n            return ret;\n        }\n\n        public long nextLong() throws IOException {\n            long ret = 0;\n            byte c = read();\n            while (c <='') c = read();\n            boolean neg = (c == '-');\n            if (neg) c = read();\n            do {\n                ret = ret * 10 + c - '0';\n            }\n            while ((c = read()) >= '0' && c <= '9');\n            if (neg) ret *= -1;\n            return ret;\n        }\n\n        public double nextDouble() throws IOException {\n            double ret = 0, div = 1;\n            byte c = read();\n            while (c <='') c = read();\n            boolean neg = (c == '-');\n            if (neg) c = read();\n\n            do {\n                ret = ret * 10 + c - '0';\n            }\n            while ((c = read()) >= '0' && c <= '9');\n\n            if (c == '.') {\n                while ((c = read()) >= '0' && c <= '9') {\n                    ret += (c - '0') / (div *= 10);\n                }\n            }\n\n            if (neg) ret *= -1;\n            return ret;\n        }\n\n        private static boolean isPrintableChar(int c) {\n            return 33 <= c && c <= 126;\n        }\n\n        public boolean hasNextByte() throws IOException {\n            if (bufferPointer < bytesRead) {\n                return true;\n            } else {\n                bufferPointer = 0;\n                bytesRead = din.read(buffer, bufferPointer, buffer.length);\n                if (bytesRead <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        public byte read() throws IOException {\n            if (bufferPointer < bytesRead) {\n                return buffer[bufferPointer++];\n            } else {\n                bufferPointer = 0;\n                bytesRead = din.read(buffer, bufferPointer, buffer.length);\n                if (bytesRead <= 0) {\n                    return -1;\n                }\n                return read();\n            }\n        }\n\n        public void close() throws IOException {\n            if (din == null) {\n                return;\n            }\n            din.close();\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        try (Reader in = new Reader()) {\n            int n = in.nextInt(), sum = 0;\n            for (int i = 0; i < n; i++) {\n                sum += n - i;\n                for (int j ="}
{"src_uid": "db853d598b638dcdeaea5a26ae83758b", "id": 103, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2300, "testcases": "[{'input': 'aaaa\\r\\n', 'output': ['20\\r\\n']}, {'input': 'abcdef\\r\\n', 'output': ['21\\r\\n']}, {'input': 'abacabadabacaba\\r\\n', 'output': ['188\\r\\n']}, {'input': 'tkth\\r\\n', 'output': ['11\\r\\n']}, {'input': 'eqkrqe\\r\\n', 'output': ['23\\r\\n']}, {'input': 'cwuiax\\r\\n', 'output': ['21\\r\\n']}, {'input': 'hhhhqhqh\\r\\n', 'output': ['59\\r\\n']}, {'input': 'gmxfmcgp\\r\\n', 'output': ['38\\r\\n']}, {'input': 'eleellleeee\\r\\n', 'output': ['104\\r\\n']}, {'input': 'usussubuubbbbs\\r\\n', 'output': ['138\\r\\n']}, {'input': 'lhmpaugvnqzrfxke\\r\\n', 'output': ['136\\r\\n']}, {'input': 'xkkkkkkkkkkkkkkkkxkkkk\\r\\n', 'output': ['1098\\r\\n']}, {'input': 'pprppppriiriiiirprppprriir\\r\\n', 'output': ['512\\r\\n']}, {'input': 'jsoxkutcvyshsinfmtrpujedcbmyqlojzco\\r\\n', 'output': ['646\\r\\n']}, {'input': 'emcegmekgnlefkeguqkfffnduqhfhhhndlfhlfdqdncefnn\\r\\n', 'output': ['1227\\r\\n']}, {'input': 'ffffdjfddffdjdfffddjfffffffjfffjdjfffjfjfdjjfjdjjdjjjdffd\\r\\n', 'output': ['2564\\r\\n']}, {'input': 'cxvhmeyouudwuglhbwndzwmjjsgrnuwnzwaycfspyyrdckjcidfsabvdxzjkvm\\r\\n', 'output': ['2023\\r\\n']}, {'input': 'cahdktuxuukmbuqcqactqhqdcxpkqcuumckttdpmpqxxkacpappxuqkxbuahqdphhddhquthqaapm\\r\\n', 'output': ['3258\\r\\n']}, {'input': 'hhwhhwhhhwhwwhhwwwhwhhhwhwwwhhwhwhhhhhhwhwhwwwhhwwwhhwhhhhwhwwhwhwwwwhhwwhwhwwwhhhwwhwhwhhwwwhwhhhwwwhwhw\\r\\n', 'output': ['10856\\r\\n']}, {'input': 'cnrkvxbljhitbvoysdpghhhnymktvburpvxybnvugkzudmnmpuhevzyjpbtraaepszhhssmcozkgbjayztrvqwdfmjlhtvarkkdsbnjrabqexpfjozmjzfbmdsihovoxmmtjgtfyaisllysnekdxozhdwu\\r\\n', 'output': ['12399\\r\\n']}, {'input': 'qasiyhdivaiyyhdqiqsvqhtqsetxqvaeqatxesxehisyqiivhvayaxvsxhsydiesaxydysqhedxqhsqivvidqtsitiiveexiehsqdteahyxtsyqetahviyhqvytexethsqssxiytqhxxxdihxietsyxqhtitheyeateeyhythxhhqaad\\r\\n', 'output': ['17103\\r\\n']}, {'input': 'ggwgwwgwwkggwgwwkgwwwggwwwggkgkgwkwgkkgkwwgwkkggwggkwgwgkgwwkwkkkkwggwwkwkkkgwkwwwwwgwkwkkwkggwwgggkkwwkgkgkwgkgkwggkwgggwwkgkwgkwkkgwkkkkggwwwgkggkwwgkwkgwgggkggkkkwwwwwkkgkwggwgkwwwwggwwgkkggwkkwkkgkwggggggkkwkkgkkkwkwwkwggwkkwggggwg\\r\\n', 'output': ['41166\\r\\n']}, {'input': 'tmoqyzoikohtgkybnwjizgjypzycmtstmsizrqrmczmqmpewxiwlqzcaufxkchqyjegktxihlksisbgogpyxkltioovelwaqcbebgcyygxsshsirkwvtsvhpqtbomueaszkrlixueyeiccvfiuoogomjlhjkacnxtimkprmjttpmeaminvmcqagrpjighsvaosojymcjoyopsvkrphzbnckcvvckicmjwpvawjuzkofnuvcahwhzjpfngwyobiufivsjnekjcloobvzawrvosnkvalmr\\r\\n', 'output': ['42165\\r\\n']}, {'input': 'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrbrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrbrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\\r\\n', 'output': ['2214420\\r\\n']}, {'input': 'zzzzooozzzoozozoozzzzzzozooozoozoozzozzozoooozzzzzzoooozzozooozoozzzozozoooooozzzozozooooozozozozzooozozzooozzzzozozoozoozzzozooozzzzoozzzzozzzzoooozozozozozzoooozzzooozzoooooooozozzozozooozzzooooozozooozozzozozoozzozzzzooozzoozozozzozozoozozzzoozozoooozzooozozooooozzzzzoozoozzzozzzoozzoozozzooozzzzzzoozzozzoozzzoozozzooozoozzzozooozozzoozoozozzzzzoozoozzzooooozooooooozooooozzoozoozzzooooozoozozozozzzoozzzzzoozzzzzzooooooozzzzozzozzo\\r\\n', 'output': ['190205\\r\\n']}]", "source_code": "import java.util.Scanner;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author ahmed_Naser\n */\npublic class HelloWorld {\n\n  \n    \n    public static void main(String[] args) {\n        String a=\"\";\n        int sum[]=new int [1000];\n        Scanner in =new Scanner(System.in);\n        \n        a=in.nextLine();\n        int j;\n        for(int  i=a.length() ; i >1 ; i--)\n        {    j=0 ;\n            for(int k=0 ; k<a.length()-i+1 ; k++)\n            {\n                if(a.substring(k, k+i).equals(a.substring(k+1, k+i)))\n                sum[j]++;\n                j=sum[j];\n            }\n        }\n        long result=0;\n        for(int ii=0 ; ii<sum.length ; ii++)\n        result+=(long)sum[ii]*(long)(sum.length-ii);\n        System.out.print(result);\n        \n    }\n}\n"}
{"src_uid": "db853d598b638dcdeaea5a26ae83758b", "id": 103, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2300, "testcases": "[{'input': 'aaaa\\r\\n', 'output': ['20\\r\\n']}, {'input': 'abcdef\\r\\n', 'output': ['21\\r\\n']}, {'input': 'abacabadabacaba\\r\\n', 'output': ['188\\r\\n']}, {'input': 'tkth\\r\\n', 'output': ['11\\r\\n']}, {'input': 'eqkrqe\\r\\n', 'output': ['23\\r\\n']}, {'input': 'cwuiax\\r\\n', 'output': ['21\\r\\n']}, {'input': 'hhhhqhqh\\r\\n', 'output': ['59\\r\\n']}, {'input': 'gmxfmcgp\\r\\n', 'output': ['38\\r\\n']}, {'input': 'eleellleeee\\r\\n', 'output': ['104\\r\\n']}, {'input': 'usussubuubbbbs\\r\\n', 'output': ['138\\r\\n']}, {'input': 'lhmpaugvnqzrfxke\\r\\n', 'output': ['136\\r\\n']}, {'input': 'xkkkkkkkkkkkkkkkkxkkkk\\r\\n', 'output': ['1098\\r\\n']}, {'input': 'pprppppriiriiiirprppprriir\\r\\n', 'output': ['512\\r\\n']}, {'input': 'jsoxkutcvyshsinfmtrpujedcbmyqlojzco\\r\\n', 'output': ['646\\r\\n']}, {'input': 'emcegmekgnlefkeguqkfffnduqhfhhhndlfhlfdqdncefnn\\r\\n', 'output': ['1227\\r\\n']}, {'input': 'ffffdjfddffdjdfffddjfffffffjfffjdjfffjfjfdjjfjdjjdjjjdffd\\r\\n', 'output': ['2564\\r\\n']}, {'input': 'cxvhmeyouudwuglhbwndzwmjjsgrnuwnzwaycfspyyrdckjcidfsabvdxzjkvm\\r\\n', 'output': ['2023\\r\\n']}, {'input': 'cahdktuxuukmbuqcqactqhqdcxpkqcuumckttdpmpqxxkacpappxuqkxbuahqdphhddhquthqaapm\\r\\n', 'output': ['3258\\r\\n']}, {'input': 'hhwhhwhhhwhwwhhwwwhwhhhwhwwwhhwhwhhhhhhwhwhwwwhhwwwhhwhhhhwhwwhwhwwwwhhwwhwhwwwhhhwwhwhwhhwwwhwhhhwwwhwhw\\r\\n', 'output': ['10856\\r\\n']}, {'input': 'cnrkvxbljhitbvoysdpghhhnymktvburpvxybnvugkzudmnmpuhevzyjpbtraaepszhhssmcozkgbjayztrvqwdfmjlhtvarkkdsbnjrabqexpfjozmjzfbmdsihovoxmmtjgtfyaisllysnekdxozhdwu\\r\\n', 'output': ['12399\\r\\n']}, {'input': 'qasiyhdivaiyyhdqiqsvqhtqsetxqvaeqatxesxehisyqiivhvayaxvsxhsydiesaxydysqhedxqhsqivvidqtsitiiveexiehsqdteahyxtsyqetahviyhqvytexethsqssxiytqhxxxdihxietsyxqhtitheyeateeyhythxhhqaad\\r\\n', 'output': ['17103\\r\\n']}, {'input': 'ggwgwwgwwkggwgwwkgwwwggwwwggkgkgwkwgkkgkwwgwkkggwggkwgwgkgwwkwkkkkwggwwkwkkkgwkwwwwwgwkwkkwkggwwgggkkwwkgkgkwgkgkwggkwgggwwkgkwgkwkkgwkkkkggwwwgkggkwwgkwkgwgggkggkkkwwwwwkkgkwggwgkwwwwggwwgkkggwkkwkkgkwggggggkkwkkgkkkwkwwkwggwkkwggggwg\\r\\n', 'output': ['41166\\r\\n']}, {'input': 'tmoqyzoikohtgkybnwjizgjypzycmtstmsizrqrmczmqmpewxiwlqzcaufxkchqyjegktxihlksisbgogpyxkltioovelwaqcbebgcyygxsshsirkwvtsvhpqtbomueaszkrlixueyeiccvfiuoogomjlhjkacnxtimkprmjttpmeaminvmcqagrpjighsvaosojymcjoyopsvkrphzbnckcvvckicmjwpvawjuzkofnuvcahwhzjpfngwyobiufivsjnekjcloobvzawrvosnkvalmr\\r\\n', 'output': ['42165\\r\\n']}, {'input': 'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrbrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrbrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\\r\\n', 'output': ['2214420\\r\\n']}, {'input': 'zzzzooozzzoozozoozzzzzzozooozoozoozzozzozoooozzzzzzoooozzozooozoozzzozozoooooozzzozozooooozozozozzooozozzooozzzzozozoozoozzzozooozzzzoozzzzozzzzoooozozozozozzoooozzzooozzoooooooozozzozozooozzzooooozozooozozzozozoozzozzzzooozzoozozozzozozoozozzzoozozoooozzooozozooooozzzzzoozoozzzozzzoozzoozozzooozzzzzzoozzozzoozzzoozozzooozoozzzozooozozzoozoozozzzzzoozoozzzooooozooooooozooooozzoozoozzzooooozoozozozozzzoozzzzzoozzzzzzooooooozzzzozzozzo\\r\\n', 'output': ['190205\\r\\n']}]", "source_code": "import java.io.*;\n\npublic class Main\n{\n   static long binpow (long a, int n, long p) {\n      if (n == 0)\n         return 1;\n      long t = binpow (a, n / 2, p);\n      if (n % 2 == 0)\n         return (t * t) % p;\n      else\n         return (((t * t) % p) * a) % p;\n   }\n\n   public static void main (String[] args) throws IOException {\n      long[][] next = new long[100][26];\n      long[][] dp = new long[100][26];\n      for (int i = 1; i <= 100; i++) {\n         for (int j = 0; j < 26; j++) {\n            next[i][j] = (j == 0? i : next[i - 1][j - 1]);\n         }\n      }\n      for (int i = 0; i <= 100; i++) {\n         for (int j = 0; j < 26; j++) {\n            dp[i][j] = (next[i + 1][j] - next[i][j] + 1000000007);\n         }\n      }\n      char[] cc = new char[100];\n      int l = 0;\n      InputStream input = System.in;\n      OutputStream output = System.out;\n      BufferedReader reader = new BufferedReader(new InputStreamReader(input));\n      String line = reader.readLine();\n      char[] s = new char[100];\n      for (int j = 0; j <= 100; j++) {\n         s[j] = '*';\n      }\n      for (int j = 0; j < line.length(); j++) {\n         s[++l] = line.charAt(j);\n      }\n      cc[0] = '*';\n      int k = 0;\n      long count = 0;\n      while (true) {\n         boolean flag = true;\n         k = 1;\n         cc[0] = s[1];\n         while (flag) {\n            if (s[k + 1] == cc[k]) {\n               cc[++k] = cc[k - 1];\n            } else {\n               cc[++k] = s[k + 1];\n               flag = false;\n            }\n         }\n         for (int t = 0; t <= 26; t++) {\n            if (t < cc[k]) {\n               count = (count + dp[k][t] % 1000000007 * binpow(25, k - 1, 1000000007) % 1000000007) % 1000000007;\n            }\n         }\n         for (int t = 0; t <= 26; t++) {\n            dp[k][t] = (s[k + 1] == cc[k]? dp[k][t] : dp[k - 1][t]);\n         }\n         cc[k] = '*';\n         k++;\n         if (k > l) {\n            break;\n         }\n      }\n      writer(output, count);\n   }\n\n   static void writer (OutputStream output, long number) throws IOException {\n      byte[] bytes = new byte[8];\n      for (int i = 0; i < 8; i++) {\n         bytes[i] = (byte)(number & 0xFF);\n         number >>= 8;\n      }\n      output.write(bytes);\n   }\n}\n"}
{"src_uid": "d9eb0f6f82bd09ea53a1dbbd7242c497", "id": 104, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2100, "testcases": "[{'input': '6\\r\\n-2 1\\r\\n0 3\\r\\n3 3\\r\\n4 1\\r\\n3 -2\\r\\n2 -2\\r\\n4\\r\\n0 1\\r\\n2 2\\r\\n3 1\\r\\n1 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '5\\r\\n1 2\\r\\n4 2\\r\\n3 -3\\r\\n-2 -2\\r\\n-2 1\\r\\n4\\r\\n0 1\\r\\n1 2\\r\\n4 1\\r\\n2 -1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n-1 2\\r\\n2 3\\r\\n4 1\\r\\n3 -2\\r\\n0 -3\\r\\n5\\r\\n1 0\\r\\n1 1\\r\\n3 1\\r\\n5 -1\\r\\n2 -1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7\\r\\n1 3\\r\\n4 2\\r\\n4 -1\\r\\n2 -3\\r\\n0 -3\\r\\n-3 0\\r\\n-2 2\\r\\n5\\r\\n-1 1\\r\\n2 2\\r\\n3 0\\r\\n2 -2\\r\\n0 -2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4\\r\\n3 -2\\r\\n-2 2\\r\\n2 3\\r\\n4 1\\r\\n4\\r\\n2 1\\r\\n1 1\\r\\n1 2\\r\\n2 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '5\\r\\n4 3\\r\\n2 -3\\r\\n-1 -3\\r\\n-1 0\\r\\n2 2\\r\\n5\\r\\n-1 -2\\r\\n-1 -1\\r\\n2 1\\r\\n3 0\\r\\n2 -2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6\\r\\n3 3\\r\\n3 -3\\r\\n0 -4\\r\\n-4 -1\\r\\n-4 2\\r\\n1 5\\r\\n9\\r\\n0 0\\r\\n2 1\\r\\n2 -3\\r\\n0 -1\\r\\n0 -3\\r\\n-2 -2\\r\\n-1 -1\\r\\n-2 1\\r\\n2 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '6\\r\\n2 4\\r\\n4 2\\r\\n3 -1\\r\\n-1 -3\\r\\n-3 0\\r\\n-2 3\\r\\n12\\r\\n0 3\\r\\n0 2\\r\\n1 2\\r\\n2 3\\r\\n3 2\\r\\n1 1\\r\\n2 0\\r\\n0 -2\\r\\n0 0\\r\\n-1 -1\\r\\n-2 0\\r\\n-1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '6\\r\\n-2 2\\r\\n1 3\\r\\n4 3\\r\\n5 1\\r\\n3 -2\\r\\n-1 -2\\r\\n7\\r\\n1 1\\r\\n2 4\\r\\n3 2\\r\\n6 2\\r\\n3 1\\r\\n3 0\\r\\n2 -3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6\\r\\n-3 2\\r\\n1 4\\r\\n3 3\\r\\n2 -2\\r\\n-1 -3\\r\\n-5 0\\r\\n3\\r\\n3 -2\\r\\n4 3\\r\\n5 -2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n4 -1\\r\\n-1 -2\\r\\n-2 3\\r\\n2 3\\r\\n6\\r\\n2 1\\r\\n2 2\\r\\n5 3\\r\\n5 0\\r\\n4 -2\\r\\n4 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n3 -1\\r\\n-1 -1\\r\\n-1 2\\r\\n3 4\\r\\n6 4\\r\\n7\\r\\n1 0\\r\\n1 2\\r\\n2 3\\r\\n2 2\\r\\n4 4\\r\\n4 2\\r\\n2 -1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n1 2\\r\\n5 5\\r\\n6 1\\r\\n3\\r\\n4 3\\r\\n5 2\\r\\n3 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3\\r\\n0 0\\r\\n0 1\\r\\n1 0\\r\\n3\\r\\n0 1\\r\\n1 0\\r\\n0 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n1 0\\r\\n0 1\\r\\n3 3\\r\\n3 0\\r\\n8\\r\\n-1 2\\r\\n4 6\\r\\n4 3\\r\\n5 4\\r\\n3 -2\\r\\n3 -3\\r\\n2 -2\\r\\n1 -2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n-10 0\\r\\n1 5\\r\\n2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n10 0\\r\\n2 2\\r\\n1 5\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n0 -10\\r\\n1 5\\r\\n2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n0 10\\r\\n2 2\\r\\n1 5\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n-10 -10\\r\\n1 5\\r\\n2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n-10 10\\r\\n1 5\\r\\n2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n0 0\\r\\n9 4\\r\\n12 -5\\r\\n5 -5\\r\\n4\\r\\n2 0\\r\\n2 3\\r\\n5 3\\r\\n5 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n-1000000000 0\\r\\n1000000000 1\\r\\n1000000000 -2\\r\\n3\\r\\n-999999999 0\\r\\n999999999 0\\r\\n999999999 -1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4\\r\\n0 0\\r\\n0 4\\r\\n4 4\\r\\n4 0\\r\\n3\\r\\n2 1\\r\\n2 3\\r\\n4 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n0 10\\r\\n10 0\\r\\n0 -10\\r\\n-10 0\\r\\n3\\r\\n6 6\\r\\n6 5\\r\\n0 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n0 6\\r\\n6 0\\r\\n0 -6\\r\\n-6 0\\r\\n4\\r\\n4 4\\r\\n4 -4\\r\\n-4 -4\\r\\n-4 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n0 0\\r\\n0 4\\r\\n4 4\\r\\n4 0\\r\\n3\\r\\n3 1\\r\\n2 1\\r\\n4 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n-1000000000 1000000000\\r\\n1000000000 0\\r\\n1000 -1000000000\\r\\n3\\r\\n1000 -999999999\\r\\n1000 0\\r\\n1001 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4\\r\\n0 3\\r\\n3 0\\r\\n0 -3\\r\\n-3 0\\r\\n4\\r\\n2 2\\r\\n2 -2\\r\\n-2 -2\\r\\n-2 2\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main\n{\n\t//----------------------------------------------------------------------------------\n\t// 標準入出力系\n\t//----------------------------------------------------------------------------------\n\t// メソッド\n\t//----------------------------------------------------------------------------------\n\t// 全般\n\tstatic class Scanner\n\t{\n\t\tprivate final InputStream\tis;\n\t\tprivate final byte[]\t\t\tbuffer\t= new byte[1024];\n\t\tprivate int\t\t\t\t\tptr\t\t= 0;\n\t\tprivate int\t\t\t\t\tbuflen\t= 0;\n\t\tprivate boolean\t\t\t\thasNextByte()\n\t\t{\n\t\t\t\tif(ptr < buflen){ return true; }else{ return ready(); }\n\t\t}\n\t\tprivate boolean\t\t\t\tready() throws IOException\n\t\t{\n\t\t\t\tptr = 0;\n\t\t\t\tif(is.available() > 0){\n\t\t\t\t\t\tbuflen = is.read(buffer);\n\t\t\t\t\t\tif(buflen <= 0){ return false; }else{ return true; }\n\t\t\t\t}else{ return false;}\n\t\t}\n\t\tprivate int readByte() throws IOException { if(hasNextByte()){ return buffer[ptr++]; }}\n\t\t//----------------------------------------------------------------------------------\n\t\tprivate static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n\t\tpublic static boolean isPrintableChar(byte c) { return isPrintableChar(c & 0xff); }\n\t\t//----------------------------------------------------------------------------------\n\t\tpublic static boolean isDigit(int c) { return '0' <= c && c <= '9'; }\n\t\tpublic static boolean isDigit(byte c) { return isDigit(c & 0xff); }\n\t\t//----------------------------------------------------------------------------------\n\t\tstatic boolean isHexDigit(int c) {\n\t\t\t\treturn (isDigit(c)) || ('a' <= c && c <= 'f') || ('A' <= c && c <= 'F');\n\t\t}\n\t\tstatic boolean isHexDigit(byte c) { return isHexDigit(c & 0xff); }\n\t\t//----------------------------------------------------------------------------------\n\t\tstatic boolean isSpaceChar(int c) {\n\t\t\t\treturn (c =='') || (c == '\\f') || (c == '\\n') || (c == '\\r') || (c == '\\t') || (c == '\\u000b');\n\t\t}\n\t\tstatic boolean isSpaceChar(byte c) { return isSpaceChar(c & 0xff); }\n\t\t//----------------------------------------------------------------------------------\n\t\tpublic static boolean isSpaceChar(int c)\n\t\t{\n\t\t\t\tswitch(c)\n\t\t\t\t{\n\t\t\t\t\t\tcase'' : \n\t\t\t\t\t\tcase '\\f' : \n\t\t\t\t\t\tcase '\\n' : \n\t\t\t\t\t\tcase '\\r' : \n\t\t\t\t\t\tcase '\\t' :\n\t\t\t\t\t\tcase '\\u000b': return true;\n\t\t\t\t\t\tdefault   : return false;\n\t\t\t\t}\n\t\t}\n\t\tpublic static boolean isSpaceChar(byte c) { return isSpaceChar(c & 0xff); }\n\t\t//----------------------------------------------------------------------------------\n\t\tprivate static boolean isLowerCase(int c) { return 'a' <= c && c <= 'z'; }\n\t\tprivate static boolean isLowerCase(byte c) { return isLowerCase(c & 0xff); }\n\t\t//----------------------------------------------------------------------------------\n\t\tprivate static boolean isUpperCase(int c) { return 'A' <= c && c <= 'Z'; }\n\t\tprivate static boolean isUpperCase(byte c) { return isUpperCase(c & 0xff); }\n\t\t//----------------------------------------------------------------------------------\n\t\t// ユーティリティ\n\t\t//----------------------------------------------------------------------------------\n\t\tstatic int toCode(int x, int y) { return 100000*x+y;}\n\t\tstatic int toX(int code)\t\t{ return code/1"}
{"src_uid": "d9eb0f6f82bd09ea53a1dbbd7242c497", "id": 104, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2100, "testcases": "[{'input': '6\\r\\n-2 1\\r\\n0 3\\r\\n3 3\\r\\n4 1\\r\\n3 -2\\r\\n2 -2\\r\\n4\\r\\n0 1\\r\\n2 2\\r\\n3 1\\r\\n1 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '5\\r\\n1 2\\r\\n4 2\\r\\n3 -3\\r\\n-2 -2\\r\\n-2 1\\r\\n4\\r\\n0 1\\r\\n1 2\\r\\n4 1\\r\\n2 -1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n-1 2\\r\\n2 3\\r\\n4 1\\r\\n3 -2\\r\\n0 -3\\r\\n5\\r\\n1 0\\r\\n1 1\\r\\n3 1\\r\\n5 -1\\r\\n2 -1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7\\r\\n1 3\\r\\n4 2\\r\\n4 -1\\r\\n2 -3\\r\\n0 -3\\r\\n-3 0\\r\\n-2 2\\r\\n5\\r\\n-1 1\\r\\n2 2\\r\\n3 0\\r\\n2 -2\\r\\n0 -2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4\\r\\n3 -2\\r\\n-2 2\\r\\n2 3\\r\\n4 1\\r\\n4\\r\\n2 1\\r\\n1 1\\r\\n1 2\\r\\n2 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '5\\r\\n4 3\\r\\n2 -3\\r\\n-1 -3\\r\\n-1 0\\r\\n2 2\\r\\n5\\r\\n-1 -2\\r\\n-1 -1\\r\\n2 1\\r\\n3 0\\r\\n2 -2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6\\r\\n3 3\\r\\n3 -3\\r\\n0 -4\\r\\n-4 -1\\r\\n-4 2\\r\\n1 5\\r\\n9\\r\\n0 0\\r\\n2 1\\r\\n2 -3\\r\\n0 -1\\r\\n0 -3\\r\\n-2 -2\\r\\n-1 -1\\r\\n-2 1\\r\\n2 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '6\\r\\n2 4\\r\\n4 2\\r\\n3 -1\\r\\n-1 -3\\r\\n-3 0\\r\\n-2 3\\r\\n12\\r\\n0 3\\r\\n0 2\\r\\n1 2\\r\\n2 3\\r\\n3 2\\r\\n1 1\\r\\n2 0\\r\\n0 -2\\r\\n0 0\\r\\n-1 -1\\r\\n-2 0\\r\\n-1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '6\\r\\n-2 2\\r\\n1 3\\r\\n4 3\\r\\n5 1\\r\\n3 -2\\r\\n-1 -2\\r\\n7\\r\\n1 1\\r\\n2 4\\r\\n3 2\\r\\n6 2\\r\\n3 1\\r\\n3 0\\r\\n2 -3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6\\r\\n-3 2\\r\\n1 4\\r\\n3 3\\r\\n2 -2\\r\\n-1 -3\\r\\n-5 0\\r\\n3\\r\\n3 -2\\r\\n4 3\\r\\n5 -2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n4 -1\\r\\n-1 -2\\r\\n-2 3\\r\\n2 3\\r\\n6\\r\\n2 1\\r\\n2 2\\r\\n5 3\\r\\n5 0\\r\\n4 -2\\r\\n4 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n3 -1\\r\\n-1 -1\\r\\n-1 2\\r\\n3 4\\r\\n6 4\\r\\n7\\r\\n1 0\\r\\n1 2\\r\\n2 3\\r\\n2 2\\r\\n4 4\\r\\n4 2\\r\\n2 -1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n1 2\\r\\n5 5\\r\\n6 1\\r\\n3\\r\\n4 3\\r\\n5 2\\r\\n3 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3\\r\\n0 0\\r\\n0 1\\r\\n1 0\\r\\n3\\r\\n0 1\\r\\n1 0\\r\\n0 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n1 0\\r\\n0 1\\r\\n3 3\\r\\n3 0\\r\\n8\\r\\n-1 2\\r\\n4 6\\r\\n4 3\\r\\n5 4\\r\\n3 -2\\r\\n3 -3\\r\\n2 -2\\r\\n1 -2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n-10 0\\r\\n1 5\\r\\n2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n10 0\\r\\n2 2\\r\\n1 5\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n0 -10\\r\\n1 5\\r\\n2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n0 10\\r\\n2 2\\r\\n1 5\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n-10 -10\\r\\n1 5\\r\\n2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n-10 10\\r\\n1 5\\r\\n2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n0 0\\r\\n9 4\\r\\n12 -5\\r\\n5 -5\\r\\n4\\r\\n2 0\\r\\n2 3\\r\\n5 3\\r\\n5 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n-1000000000 0\\r\\n1000000000 1\\r\\n1000000000 -2\\r\\n3\\r\\n-999999999 0\\r\\n999999999 0\\r\\n999999999 -1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4\\r\\n0 0\\r\\n0 4\\r\\n4 4\\r\\n4 0\\r\\n3\\r\\n2 1\\r\\n2 3\\r\\n4 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n0 10\\r\\n10 0\\r\\n0 -10\\r\\n-10 0\\r\\n3\\r\\n6 6\\r\\n6 5\\r\\n0 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n0 6\\r\\n6 0\\r\\n0 -6\\r\\n-6 0\\r\\n4\\r\\n4 4\\r\\n4 -4\\r\\n-4 -4\\r\\n-4 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n0 0\\r\\n0 4\\r\\n4 4\\r\\n4 0\\r\\n3\\r\\n3 1\\r\\n2 1\\r\\n4 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n-1000000000 1000000000\\r\\n1000000000 0\\r\\n1000 -1000000000\\r\\n3\\r\\n1000 -999999999\\r\\n1000 0\\r\\n1001 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4\\r\\n0 3\\r\\n3 0\\r\\n0 -3\\r\\n-3 0\\r\\n4\\r\\n2 2\\r\\n2 -2\\r\\n-2 -2\\r\\n-2 2\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "/*\n\n\tauthor: S. A. H. M. Mousour\n\tid: 19869427\n\n*/\n\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\tFastScanner scanner = new FastScanner();\n\t\tint n = scanner.nextInt(), m = scanner.nextInt(), i, j, k;\n\t\tint[] xa = new int[n], ya = new int[n], xb = new int[m], yb = new int[m];\n\t\tint orientation = 0;\n\t\t\n\t\tfor (i = 0; i < n; ++i) {\n\t\t\txa[i] = scanner.nextInt();\n\t\t\tya[i] = scanner.nextInt();\n\t\t}\n\t\tfor (i = 0; i < m; ++i) {\n\t\t\txb[i] = scanner.nextInt();\n\t\t\tyb[i] = scanner.nextInt();\n\t\t}\n\t\t\n\t\tfor (i = 0; i < m; ++i) {\n\t\t\tfor (j = 0; j < n; ++j) {\n\t\t\t\tif (i!= 0 && j!= 0) {\n\t\t\t\t\torientation = orientationFunction(xa[j - 1], ya[j - 1], xa[j], ya[j], xb[i], yb[i]);\n\t\t\t\t\tif (orientation == 2) {\n\t\t\t\t\t\tk = j - 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (j = k; j <= n; ++j) {\n\t\t\t\tif (j!= 0 && i!= m - 1) {\n\t\t\t\t\torientation = orientationFunction(xa[j], ya[j], xa[0], ya[0], xb[i + 1], yb[i + 1]);\n\t\t\t\t\tif (orientation == 2) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (orientation == 2) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (i == m)\n\t\t\tSystem.out.println(\"YES\");\n\t\telse\n\t\t\tSystem.out.println(\"NO\");\n\t\t\n\t}\n\t\n\tstatic int orientationFunction(int xa, int ya, int xb, int yb, int xc, int yc) {\n\t\tint result = (xb - xa) * (yc - ya) - (yc - ya) * (xc - xa);\n\t\tif (result == 0)\n\t\t\treturn 1;\n\t\treturn (result > 0)? 2 : 0;\n\t}\n\t\n\tstatic class FastScanner {\n\t\tprivate final InputStream in = System.in;\n\t\tprivate final byte[] buffer = new byte[1024];\n\t\tprivate int ptr = 0;\n\t\tprivate int buflen = 0;\n\t\tprivate boolean hasNextByte() {\n\t\t\t\tif (ptr < buflen) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t}else{\n\t\t\t\t\t\tptr = 0;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tbuflen = in.read(buffer);\n\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (buflen <= 0) {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t}\n\t\tprivate int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n\t\tprivate static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n\t\tpublic boolean hasNext() { while(hasNextByte() &&!isPrint"}
{"src_uid": "d9eb0f6f82bd09ea53a1dbbd7242c497", "id": 104, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2100, "testcases": "[{'input': '6\\r\\n-2 1\\r\\n0 3\\r\\n3 3\\r\\n4 1\\r\\n3 -2\\r\\n2 -2\\r\\n4\\r\\n0 1\\r\\n2 2\\r\\n3 1\\r\\n1 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '5\\r\\n1 2\\r\\n4 2\\r\\n3 -3\\r\\n-2 -2\\r\\n-2 1\\r\\n4\\r\\n0 1\\r\\n1 2\\r\\n4 1\\r\\n2 -1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n-1 2\\r\\n2 3\\r\\n4 1\\r\\n3 -2\\r\\n0 -3\\r\\n5\\r\\n1 0\\r\\n1 1\\r\\n3 1\\r\\n5 -1\\r\\n2 -1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7\\r\\n1 3\\r\\n4 2\\r\\n4 -1\\r\\n2 -3\\r\\n0 -3\\r\\n-3 0\\r\\n-2 2\\r\\n5\\r\\n-1 1\\r\\n2 2\\r\\n3 0\\r\\n2 -2\\r\\n0 -2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4\\r\\n3 -2\\r\\n-2 2\\r\\n2 3\\r\\n4 1\\r\\n4\\r\\n2 1\\r\\n1 1\\r\\n1 2\\r\\n2 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '5\\r\\n4 3\\r\\n2 -3\\r\\n-1 -3\\r\\n-1 0\\r\\n2 2\\r\\n5\\r\\n-1 -2\\r\\n-1 -1\\r\\n2 1\\r\\n3 0\\r\\n2 -2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6\\r\\n3 3\\r\\n3 -3\\r\\n0 -4\\r\\n-4 -1\\r\\n-4 2\\r\\n1 5\\r\\n9\\r\\n0 0\\r\\n2 1\\r\\n2 -3\\r\\n0 -1\\r\\n0 -3\\r\\n-2 -2\\r\\n-1 -1\\r\\n-2 1\\r\\n2 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '6\\r\\n2 4\\r\\n4 2\\r\\n3 -1\\r\\n-1 -3\\r\\n-3 0\\r\\n-2 3\\r\\n12\\r\\n0 3\\r\\n0 2\\r\\n1 2\\r\\n2 3\\r\\n3 2\\r\\n1 1\\r\\n2 0\\r\\n0 -2\\r\\n0 0\\r\\n-1 -1\\r\\n-2 0\\r\\n-1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '6\\r\\n-2 2\\r\\n1 3\\r\\n4 3\\r\\n5 1\\r\\n3 -2\\r\\n-1 -2\\r\\n7\\r\\n1 1\\r\\n2 4\\r\\n3 2\\r\\n6 2\\r\\n3 1\\r\\n3 0\\r\\n2 -3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6\\r\\n-3 2\\r\\n1 4\\r\\n3 3\\r\\n2 -2\\r\\n-1 -3\\r\\n-5 0\\r\\n3\\r\\n3 -2\\r\\n4 3\\r\\n5 -2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n4 -1\\r\\n-1 -2\\r\\n-2 3\\r\\n2 3\\r\\n6\\r\\n2 1\\r\\n2 2\\r\\n5 3\\r\\n5 0\\r\\n4 -2\\r\\n4 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n3 -1\\r\\n-1 -1\\r\\n-1 2\\r\\n3 4\\r\\n6 4\\r\\n7\\r\\n1 0\\r\\n1 2\\r\\n2 3\\r\\n2 2\\r\\n4 4\\r\\n4 2\\r\\n2 -1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n1 2\\r\\n5 5\\r\\n6 1\\r\\n3\\r\\n4 3\\r\\n5 2\\r\\n3 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3\\r\\n0 0\\r\\n0 1\\r\\n1 0\\r\\n3\\r\\n0 1\\r\\n1 0\\r\\n0 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n1 0\\r\\n0 1\\r\\n3 3\\r\\n3 0\\r\\n8\\r\\n-1 2\\r\\n4 6\\r\\n4 3\\r\\n5 4\\r\\n3 -2\\r\\n3 -3\\r\\n2 -2\\r\\n1 -2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n-10 0\\r\\n1 5\\r\\n2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n10 0\\r\\n2 2\\r\\n1 5\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n0 -10\\r\\n1 5\\r\\n2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n0 10\\r\\n2 2\\r\\n1 5\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n-10 -10\\r\\n1 5\\r\\n2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n-10 10\\r\\n1 5\\r\\n2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n0 0\\r\\n9 4\\r\\n12 -5\\r\\n5 -5\\r\\n4\\r\\n2 0\\r\\n2 3\\r\\n5 3\\r\\n5 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n-1000000000 0\\r\\n1000000000 1\\r\\n1000000000 -2\\r\\n3\\r\\n-999999999 0\\r\\n999999999 0\\r\\n999999999 -1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4\\r\\n0 0\\r\\n0 4\\r\\n4 4\\r\\n4 0\\r\\n3\\r\\n2 1\\r\\n2 3\\r\\n4 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n0 10\\r\\n10 0\\r\\n0 -10\\r\\n-10 0\\r\\n3\\r\\n6 6\\r\\n6 5\\r\\n0 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n0 6\\r\\n6 0\\r\\n0 -6\\r\\n-6 0\\r\\n4\\r\\n4 4\\r\\n4 -4\\r\\n-4 -4\\r\\n-4 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n0 0\\r\\n0 4\\r\\n4 4\\r\\n4 0\\r\\n3\\r\\n3 1\\r\\n2 1\\r\\n4 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n-1000000000 1000000000\\r\\n1000000000 0\\r\\n1000 -1000000000\\r\\n3\\r\\n1000 -999999999\\r\\n1000 0\\r\\n1001 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4\\r\\n0 3\\r\\n3 0\\r\\n0 -3\\r\\n-3 0\\r\\n4\\r\\n2 2\\r\\n2 -2\\r\\n-2 -2\\r\\n-2 2\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.util.*;\nimport java.io.*;\n\npublic class Solution {\n\n    private static void solve() throws IOException{\n        int n = sc.nextInt();\n        Point[] a = new Point[n];\n        for(int i=0;i<n;i++)a[i]=new Point(sc.nextInt(),sc.nextInt());\n        n--;\n        int m = sc.nextInt();\n        Point[] b = new Point[m];\n        for(int i=0;i<m;i++)b[i]=new Point(sc.nextInt(),sc.nextInt());\n        m--;\n        for(int i=0;i<m;i++){\n            if(ccw(a[0],a[n],b[i])<0||ccw(b[i],b[(i+1)%m],a[0])>=0||ccw(b[i],b[(i+1)%m],a[n])>=0)System.out.print(\"NO\");\n            System.out.println();\n            return;\n        }\n        System.out.print(\"YES\");\n    }\n\n    static int ccw(Point a,Point b,Point c)\n    {\n        return (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);\n    }\n\n    static class Point{\n        int x,y;\n\n        Point(int x,int y){\n            this.x=x;this.y=y;\n        }\n    }\n\n    static Scanner sc = new Scanner(System.in);\n    public static void main(String[] args){\n        try{\n            solve();\n        }catch(Exception e){\n\n        }\n    }\n}\n"}
{"src_uid": "d9eb0f6f82bd09ea53a1dbbd7242c497", "id": 104, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2100, "testcases": "[{'input': '6\\r\\n-2 1\\r\\n0 3\\r\\n3 3\\r\\n4 1\\r\\n3 -2\\r\\n2 -2\\r\\n4\\r\\n0 1\\r\\n2 2\\r\\n3 1\\r\\n1 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '5\\r\\n1 2\\r\\n4 2\\r\\n3 -3\\r\\n-2 -2\\r\\n-2 1\\r\\n4\\r\\n0 1\\r\\n1 2\\r\\n4 1\\r\\n2 -1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n-1 2\\r\\n2 3\\r\\n4 1\\r\\n3 -2\\r\\n0 -3\\r\\n5\\r\\n1 0\\r\\n1 1\\r\\n3 1\\r\\n5 -1\\r\\n2 -1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7\\r\\n1 3\\r\\n4 2\\r\\n4 -1\\r\\n2 -3\\r\\n0 -3\\r\\n-3 0\\r\\n-2 2\\r\\n5\\r\\n-1 1\\r\\n2 2\\r\\n3 0\\r\\n2 -2\\r\\n0 -2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4\\r\\n3 -2\\r\\n-2 2\\r\\n2 3\\r\\n4 1\\r\\n4\\r\\n2 1\\r\\n1 1\\r\\n1 2\\r\\n2 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '5\\r\\n4 3\\r\\n2 -3\\r\\n-1 -3\\r\\n-1 0\\r\\n2 2\\r\\n5\\r\\n-1 -2\\r\\n-1 -1\\r\\n2 1\\r\\n3 0\\r\\n2 -2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6\\r\\n3 3\\r\\n3 -3\\r\\n0 -4\\r\\n-4 -1\\r\\n-4 2\\r\\n1 5\\r\\n9\\r\\n0 0\\r\\n2 1\\r\\n2 -3\\r\\n0 -1\\r\\n0 -3\\r\\n-2 -2\\r\\n-1 -1\\r\\n-2 1\\r\\n2 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '6\\r\\n2 4\\r\\n4 2\\r\\n3 -1\\r\\n-1 -3\\r\\n-3 0\\r\\n-2 3\\r\\n12\\r\\n0 3\\r\\n0 2\\r\\n1 2\\r\\n2 3\\r\\n3 2\\r\\n1 1\\r\\n2 0\\r\\n0 -2\\r\\n0 0\\r\\n-1 -1\\r\\n-2 0\\r\\n-1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '6\\r\\n-2 2\\r\\n1 3\\r\\n4 3\\r\\n5 1\\r\\n3 -2\\r\\n-1 -2\\r\\n7\\r\\n1 1\\r\\n2 4\\r\\n3 2\\r\\n6 2\\r\\n3 1\\r\\n3 0\\r\\n2 -3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6\\r\\n-3 2\\r\\n1 4\\r\\n3 3\\r\\n2 -2\\r\\n-1 -3\\r\\n-5 0\\r\\n3\\r\\n3 -2\\r\\n4 3\\r\\n5 -2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n4 -1\\r\\n-1 -2\\r\\n-2 3\\r\\n2 3\\r\\n6\\r\\n2 1\\r\\n2 2\\r\\n5 3\\r\\n5 0\\r\\n4 -2\\r\\n4 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n3 -1\\r\\n-1 -1\\r\\n-1 2\\r\\n3 4\\r\\n6 4\\r\\n7\\r\\n1 0\\r\\n1 2\\r\\n2 3\\r\\n2 2\\r\\n4 4\\r\\n4 2\\r\\n2 -1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n1 2\\r\\n5 5\\r\\n6 1\\r\\n3\\r\\n4 3\\r\\n5 2\\r\\n3 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3\\r\\n0 0\\r\\n0 1\\r\\n1 0\\r\\n3\\r\\n0 1\\r\\n1 0\\r\\n0 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n1 0\\r\\n0 1\\r\\n3 3\\r\\n3 0\\r\\n8\\r\\n-1 2\\r\\n4 6\\r\\n4 3\\r\\n5 4\\r\\n3 -2\\r\\n3 -3\\r\\n2 -2\\r\\n1 -2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n-10 0\\r\\n1 5\\r\\n2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n10 0\\r\\n2 2\\r\\n1 5\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n0 -10\\r\\n1 5\\r\\n2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n0 10\\r\\n2 2\\r\\n1 5\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n-10 -10\\r\\n1 5\\r\\n2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n-10 10\\r\\n1 5\\r\\n2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n0 0\\r\\n9 4\\r\\n12 -5\\r\\n5 -5\\r\\n4\\r\\n2 0\\r\\n2 3\\r\\n5 3\\r\\n5 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n-1000000000 0\\r\\n1000000000 1\\r\\n1000000000 -2\\r\\n3\\r\\n-999999999 0\\r\\n999999999 0\\r\\n999999999 -1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4\\r\\n0 0\\r\\n0 4\\r\\n4 4\\r\\n4 0\\r\\n3\\r\\n2 1\\r\\n2 3\\r\\n4 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n0 10\\r\\n10 0\\r\\n0 -10\\r\\n-10 0\\r\\n3\\r\\n6 6\\r\\n6 5\\r\\n0 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n0 6\\r\\n6 0\\r\\n0 -6\\r\\n-6 0\\r\\n4\\r\\n4 4\\r\\n4 -4\\r\\n-4 -4\\r\\n-4 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n0 0\\r\\n0 4\\r\\n4 4\\r\\n4 0\\r\\n3\\r\\n3 1\\r\\n2 1\\r\\n4 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n-1000000000 1000000000\\r\\n1000000000 0\\r\\n1000 -1000000000\\r\\n3\\r\\n1000 -999999999\\r\\n1000 0\\r\\n1001 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4\\r\\n0 3\\r\\n3 0\\r\\n0 -3\\r\\n-3 0\\r\\n4\\r\\n2 2\\r\\n2 -2\\r\\n-2 -2\\r\\n-2 2\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class Polygon {\n\n\tprivate static void solve() {\n\t\tint n = sc.nextInt();\n\t\tint[] x1 = new int[n];\n\t\tint[] y1 = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tx1[i] = sc.nextInt();\n\t\t\ty1[i] = sc.nextInt();\n\t\t}\n\n\t\tint m = sc.nextInt();\n\t\tint[] x2 = new int[m];\n\t\tint[] y2 = new int[m];\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tx2[i] = sc.nextInt();\n\t\t\ty2[i] = sc.nextInt();\n\t\t}\n\n\t\tString ans = \"YES\";\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tif (ccw(x2[i], y2[i], x1[0], y1[0], x1[n - 1], y1[n - 1]) == 2) {\n\t\t\t\tans = \"NO\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (int i = 1; i < n - 1; i++) {\n\t\t\tif (ccw(x1[i - 1], y1[i - 1], x1[i], y1[i], x1[i + 1], y1[i + 1]) == 0) {\n\t\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\t\tif (x2[j] <= Math.max(x1[i - 1], x1[i]) && x2[j] >= Math.min(x1[i - 1], x1[i]) && (y2[j] <= Math.max(y1[i - 1], y1[i]) && y2[j] >= Math.min(y1[i - 1], y1[i]))) {\n\t\t\t\t\t\tans = \"NO\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tif ((y1[i - 1] <= y1[i] && y2[0] >= y1[i] && x2[0] <= x1[i]) || (y2[m - 1] >= y1[i] && y1[i - 1] <= y2[0] && x2[m - 1] >= x1[i])) {\n\t\t\t\tans = \"NO\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.print(ans);\n\n\t}\n\n\tstatic class Reader {\n\t\tfinal private int BUFFER_SIZE = 1 << 16;\n\t\tprivate final DataInputStream din;\n\t\tprivate final byte[] buffer;\n\t\tprivate int bufferPointer, bytesRead;\n\n\t\tpublic Reader() {\n\t\t\tdin = new DataInputStream(System.in);\n\t\t\tbuffer = new byte[BUFFER_SIZE];\n\t\t\tbufferPointer = bytesRead = 0;\n\t\t}\n\n\t\tpublic Reader(String file_name) throws IOException {\n\t\t\tdin = new DataInputStream(new FileInputStream(file_name));\n\t\t\tbuffer = new byte[BUFFER_SIZE];\n\t\t\tbufferPointer = bytesRead = 0;\n\t\t}\n\n\t\tpublic String readLine() throws IOException {\n\t\t\tbyte[]"}
{"src_uid": "d9eb0f6f82bd09ea53a1dbbd7242c497", "id": 104, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2100, "testcases": "[{'input': '6\\r\\n-2 1\\r\\n0 3\\r\\n3 3\\r\\n4 1\\r\\n3 -2\\r\\n2 -2\\r\\n4\\r\\n0 1\\r\\n2 2\\r\\n3 1\\r\\n1 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '5\\r\\n1 2\\r\\n4 2\\r\\n3 -3\\r\\n-2 -2\\r\\n-2 1\\r\\n4\\r\\n0 1\\r\\n1 2\\r\\n4 1\\r\\n2 -1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n-1 2\\r\\n2 3\\r\\n4 1\\r\\n3 -2\\r\\n0 -3\\r\\n5\\r\\n1 0\\r\\n1 1\\r\\n3 1\\r\\n5 -1\\r\\n2 -1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7\\r\\n1 3\\r\\n4 2\\r\\n4 -1\\r\\n2 -3\\r\\n0 -3\\r\\n-3 0\\r\\n-2 2\\r\\n5\\r\\n-1 1\\r\\n2 2\\r\\n3 0\\r\\n2 -2\\r\\n0 -2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4\\r\\n3 -2\\r\\n-2 2\\r\\n2 3\\r\\n4 1\\r\\n4\\r\\n2 1\\r\\n1 1\\r\\n1 2\\r\\n2 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '5\\r\\n4 3\\r\\n2 -3\\r\\n-1 -3\\r\\n-1 0\\r\\n2 2\\r\\n5\\r\\n-1 -2\\r\\n-1 -1\\r\\n2 1\\r\\n3 0\\r\\n2 -2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6\\r\\n3 3\\r\\n3 -3\\r\\n0 -4\\r\\n-4 -1\\r\\n-4 2\\r\\n1 5\\r\\n9\\r\\n0 0\\r\\n2 1\\r\\n2 -3\\r\\n0 -1\\r\\n0 -3\\r\\n-2 -2\\r\\n-1 -1\\r\\n-2 1\\r\\n2 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '6\\r\\n2 4\\r\\n4 2\\r\\n3 -1\\r\\n-1 -3\\r\\n-3 0\\r\\n-2 3\\r\\n12\\r\\n0 3\\r\\n0 2\\r\\n1 2\\r\\n2 3\\r\\n3 2\\r\\n1 1\\r\\n2 0\\r\\n0 -2\\r\\n0 0\\r\\n-1 -1\\r\\n-2 0\\r\\n-1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '6\\r\\n-2 2\\r\\n1 3\\r\\n4 3\\r\\n5 1\\r\\n3 -2\\r\\n-1 -2\\r\\n7\\r\\n1 1\\r\\n2 4\\r\\n3 2\\r\\n6 2\\r\\n3 1\\r\\n3 0\\r\\n2 -3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6\\r\\n-3 2\\r\\n1 4\\r\\n3 3\\r\\n2 -2\\r\\n-1 -3\\r\\n-5 0\\r\\n3\\r\\n3 -2\\r\\n4 3\\r\\n5 -2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n4 -1\\r\\n-1 -2\\r\\n-2 3\\r\\n2 3\\r\\n6\\r\\n2 1\\r\\n2 2\\r\\n5 3\\r\\n5 0\\r\\n4 -2\\r\\n4 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5\\r\\n3 -1\\r\\n-1 -1\\r\\n-1 2\\r\\n3 4\\r\\n6 4\\r\\n7\\r\\n1 0\\r\\n1 2\\r\\n2 3\\r\\n2 2\\r\\n4 4\\r\\n4 2\\r\\n2 -1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n1 2\\r\\n5 5\\r\\n6 1\\r\\n3\\r\\n4 3\\r\\n5 2\\r\\n3 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3\\r\\n0 0\\r\\n0 1\\r\\n1 0\\r\\n3\\r\\n0 1\\r\\n1 0\\r\\n0 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n1 0\\r\\n0 1\\r\\n3 3\\r\\n3 0\\r\\n8\\r\\n-1 2\\r\\n4 6\\r\\n4 3\\r\\n5 4\\r\\n3 -2\\r\\n3 -3\\r\\n2 -2\\r\\n1 -2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n-10 0\\r\\n1 5\\r\\n2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n10 0\\r\\n2 2\\r\\n1 5\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n0 -10\\r\\n1 5\\r\\n2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n0 10\\r\\n2 2\\r\\n1 5\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n-10 -10\\r\\n1 5\\r\\n2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n-10 -10\\r\\n-10 10\\r\\n10 10\\r\\n10 -10\\r\\n3\\r\\n-10 10\\r\\n1 5\\r\\n2 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n0 0\\r\\n9 4\\r\\n12 -5\\r\\n5 -5\\r\\n4\\r\\n2 0\\r\\n2 3\\r\\n5 3\\r\\n5 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n-1000000000 0\\r\\n1000000000 1\\r\\n1000000000 -2\\r\\n3\\r\\n-999999999 0\\r\\n999999999 0\\r\\n999999999 -1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4\\r\\n0 0\\r\\n0 4\\r\\n4 4\\r\\n4 0\\r\\n3\\r\\n2 1\\r\\n2 3\\r\\n4 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n0 10\\r\\n10 0\\r\\n0 -10\\r\\n-10 0\\r\\n3\\r\\n6 6\\r\\n6 5\\r\\n0 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n0 6\\r\\n6 0\\r\\n0 -6\\r\\n-6 0\\r\\n4\\r\\n4 4\\r\\n4 -4\\r\\n-4 -4\\r\\n-4 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n0 0\\r\\n0 4\\r\\n4 4\\r\\n4 0\\r\\n3\\r\\n3 1\\r\\n2 1\\r\\n4 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3\\r\\n-1000000000 1000000000\\r\\n1000000000 0\\r\\n1000 -1000000000\\r\\n3\\r\\n1000 -999999999\\r\\n1000 0\\r\\n1001 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4\\r\\n0 3\\r\\n3 0\\r\\n0 -3\\r\\n-3 0\\r\\n4\\r\\n2 2\\r\\n2 -2\\r\\n-2 -2\\r\\n-2 2\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Solution {\n\n\tpublic static boolean isInside(int A[][], int B[][]){\n\t\tfor(int i = 0; i < B.length; i++){\n\t\t\tint a = A[i][0];\n\t\t\tint b = A[i+1][0];\n\t\t\tint c = B[i][0];\n\t\t\tint d = B[i+1][0];\n\t\t\tif((((a < c) && (c <= b)) || ((a <= b) && (b < c))) && \n\t\t\t\t\t(((a < d) && (d <= b)) || ((a <= b) && (b < d)))){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner input = new Scanner(System.in);\n\t\tint n = input.nextInt();\n\t\tint A[][] = new int [n][2];\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tA[i][0] = input.nextInt();\n\t\t\tA[i][1] = input.nextInt();\n\t\t}\n\t\tint m = input.nextInt();\n\t\tint B[][] = new int [m][2];\n\t\tfor(int i = 0; i < B.length; i++){\n\t\t\tB[i][0] = input.nextInt();\n\t\t\tB[i][1] = input.nextInt();\n\t\t}\n\t\tif(isInside(A,B)){\n\t\t\tSystem.out.println(\"YES\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"NO\");\n\t\t}\n\t}\n}\n"}
{"src_uid": "0a9cabb857949e818453ffe411f08f95", "id": 105, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': '3\\r\\n1 1 1\\r\\n', 'output': ['1.0 1.0 1.0\\r\\n']}, {'input': '3\\r\\n2 0 0\\r\\n', 'output': ['3.0 0.0 0.0\\r\\n']}, {'input': '10\\r\\n1 6 3\\r\\n', 'output': ['1.0 6.0 3.0\\r\\n']}, {'input': '9\\r\\n8 2 0\\r\\n', 'output': ['7.2 1.8 0.0\\r\\n']}, {'input': '1\\r\\n0 9 2\\r\\n', 'output': ['0.0 0.8181818181818182 0.18181818181818182\\r\\n']}, {'input': '1\\r\\n3 5 1\\r\\n', 'output': ['0.3333333333333333 0.5555555555555556 0.1111111111111111\\r\\n']}, {'input': '7\\r\\n8 2 2\\r\\n', 'output': ['4.666666666666667 1.1666666666666667 1.1666666666666667\\r\\n']}, {'input': '9\\r\\n3 7 0\\r\\n', 'output': ['2.7 6.3 0.0\\r\\n']}, {'input': '1000\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '624\\r\\n553 828 109\\r\\n', 'output': ['231.59194630872483 346.7597315436242 45.64832214765101\\r\\n']}, {'input': '902\\r\\n742 737 340\\r\\n', 'output': ['367.9406267179769 365.4612424409016 168.5981308411215\\r\\n']}, {'input': '239\\r\\n995 385 267\\r\\n', 'output': ['144.3867638129933 55.8682452944748 38.744990892531874\\r\\n']}, {'input': '797\\r\\n917 702 538\\r\\n', 'output': ['338.82661103384334 259.3852573018081 198.78813166434864\\r\\n']}, {'input': '938\\r\\n414 308 795\\r\\n', 'output': ['255.98681608437707 190.44429795649307 491.5688859591299\\r\\n']}, {'input': '422\\r\\n215 779 900\\r\\n', 'output': ['47.903907074973596 173.56810982048574 200.52798310454065\\r\\n']}, {'input': '413\\r\\n569 138 159\\r\\n', 'output': ['271.35912240184757 65.81293302540415 75.82794457274827\\r\\n']}, {'input': '188\\r\\n748 859 686\\r\\n', 'output': ['61.327518534670745 70.42825992150023 56.24422154382905\\r\\n']}, {'input': '48\\r\\n395 552 466\\r\\n', 'output': ['13.418259023354565 18.751592356687897 15.830148619957537\\r\\n']}, {'input': '492\\r\\n971 305 807\\r\\n', 'output': ['229.34805568891022 72.04032645223235 190.61161785885741\\r\\n']}, {'input': '557\\r\\n84 654 154\\r\\n', 'output': ['52.45291479820627 408.3834080717489 96.16367713004483\\r\\n']}, {'input': '699\\r\\n493 285 659\\r\\n', 'output': ['239.8100208768267 138.63256784968684 320.5574112734864\\r\\n']}, {'input': '814\\r\\n711 408 545\\r\\n', 'output': ['347.8088942307692 199.58653846153845 266.6045673076923\\r\\n']}, {'input': '706\\r\\n197 265 571\\r\\n', 'output': ['134.63891577928362 181.11326234269117 390.24782187802515\\r\\n']}, {'input': '945\\r\\n123 67 174\\r\\n', 'output': ['319.3269230769231 173.9423076923077 451.7307692307692\\r\\n']}, {'input': '724\\r\\n529 558 407\\r\\n', 'output': ['256.3560910307898 270.4096385542168 197.2342704149933\\r\\n']}, {'input': '269\\r\\n0 623 873\\r\\n', 'output': ['0.0 112.02339572192513 156.97660427807486\\r\\n']}, {'input': '173\\r\\n0 0 374\\r\\n', 'output': ['0.0 0.0 173.0\\r\\n']}, {'input': '972\\r\\n918 0 405\\r\\n', 'output': ['674.4489795918367 0.0 297.55102040816325\\r\\n']}, {'input': '809\\r\\n328 0 0\\r\\n', 'output': ['809.0 0.0 0.0\\r\\n']}, {'input': '413\\r\\n517 0 0\\r\\n', 'output': ['413.0 0.0 0.0\\r\\n']}, {'input': '642\\r\\n0 665 0\\r\\n', 'output': ['0.0 642.0 0.0\\r\\n']}, {'input': '1000\\r\\n117 403 270\\r\\n', 'output': ['148.10126582278482 510.12658227848107 341.7721518987342\\r\\n']}, {'input': '1000\\r\\n1000 1000 1000\\r\\n', 'output': ['333.3333333333333 333.3333333333333 333.3333333333333\\r\\n']}, {'input': '1\\r\\n1000 1000 1000\\r\\n', 'output': ['0.3333333333333333 0.3333333333333333 0.3333333333333333\\r\\n']}, {'input': '1000\\r\\n1 0 1\\r\\n', 'output': ['500.0 0.0 500.0\\r\\n']}, {'input': '1000\\r\\n0 1 1\\r\\n', 'output': ['0.0 500.0 500.0\\r\\n']}, {'input': '1000\\r\\n1 1 0\\r\\n', 'output': ['500.0 500.0 0.0\\r\\n']}, {'input': '1000\\r\\n0 0 1\\r\\n', 'output': ['0.0 0.0 1000.0\\r\\n']}, {'input': '1000\\r\\n1 0 0\\r\\n', 'output': ['1000.0 0.0 0.0\\r\\n']}, {'input': '1000\\r\\n0 1 0\\r\\n', 'output': ['0.0 1000.0 0.0\\r\\n']}, {'input': '1000\\r\\n999 1000 999\\r\\n', 'output': ['333.2221480987325 333.555703802535 333.2221480987325\\r\\n']}, {'input': '1000\\r\\n999 998 997\\r\\n', 'output': ['333.6673346693387 333.33333333333337 332.999331997328\\r\\n']}, {'input': '3\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '100\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '1\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '239\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '10\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '1000\\r\\n197 198 199\\r\\n', 'output': ['331.6498316498317 333.33333333333337 335.01683501683505\\r\\n']}, {'input': '5\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '1000\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '1000\\r\\n0 1 999\\r\\n', 'output': ['0.0 1.0 999.0\\r\\n']}, {'input': '1000\\r\\n1000 0 0\\r\\n', 'output': ['1000.0 0.0 0.0\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Solution {\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint a = in.nextInt();\n\t\tint b = in.nextInt();\n\t\tint c = in.nextInt();\n\n\t\tint m = 0;\n\t\tint x = 0;\n\t\tint y = 0;\n\t\tint z = 0;\n\t\tint max = 0;\n\t\tint sum = 0;\n\t\tdouble res = 0;\n\t\tfor (int i = 0; i <= n; i++) {\n\t\t\tfor (int j = 0; j <= n; j++) {\n\t\t\t\tfor (int k = 0; k <= n; k++) {\n\t\t\t\t\tsum = i + j + k;\n\t\t\t\t\tif (i * a + j * b + k * c == sum && i + j + k <= n) {\n\t\t\t\t\t\tif (max < sum) {\n\t\t\t\t\t\t\tmax = sum;\n\t\t\t\t\t\t\tm = i;\n\t\t\t\t\t\t\tx = j;\n\t\t\t\t\t\t\ty = k;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println((double) m / (double) n + \" \" + (double) x / (double) n + \" \" + (double) y / (double) n);\n\t}\n\n}\n"}
{"src_uid": "0a9cabb857949e818453ffe411f08f95", "id": 105, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': '3\\r\\n1 1 1\\r\\n', 'output': ['1.0 1.0 1.0\\r\\n']}, {'input': '3\\r\\n2 0 0\\r\\n', 'output': ['3.0 0.0 0.0\\r\\n']}, {'input': '10\\r\\n1 6 3\\r\\n', 'output': ['1.0 6.0 3.0\\r\\n']}, {'input': '9\\r\\n8 2 0\\r\\n', 'output': ['7.2 1.8 0.0\\r\\n']}, {'input': '1\\r\\n0 9 2\\r\\n', 'output': ['0.0 0.8181818181818182 0.18181818181818182\\r\\n']}, {'input': '1\\r\\n3 5 1\\r\\n', 'output': ['0.3333333333333333 0.5555555555555556 0.1111111111111111\\r\\n']}, {'input': '7\\r\\n8 2 2\\r\\n', 'output': ['4.666666666666667 1.1666666666666667 1.1666666666666667\\r\\n']}, {'input': '9\\r\\n3 7 0\\r\\n', 'output': ['2.7 6.3 0.0\\r\\n']}, {'input': '1000\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '624\\r\\n553 828 109\\r\\n', 'output': ['231.59194630872483 346.7597315436242 45.64832214765101\\r\\n']}, {'input': '902\\r\\n742 737 340\\r\\n', 'output': ['367.9406267179769 365.4612424409016 168.5981308411215\\r\\n']}, {'input': '239\\r\\n995 385 267\\r\\n', 'output': ['144.3867638129933 55.8682452944748 38.744990892531874\\r\\n']}, {'input': '797\\r\\n917 702 538\\r\\n', 'output': ['338.82661103384334 259.3852573018081 198.78813166434864\\r\\n']}, {'input': '938\\r\\n414 308 795\\r\\n', 'output': ['255.98681608437707 190.44429795649307 491.5688859591299\\r\\n']}, {'input': '422\\r\\n215 779 900\\r\\n', 'output': ['47.903907074973596 173.56810982048574 200.52798310454065\\r\\n']}, {'input': '413\\r\\n569 138 159\\r\\n', 'output': ['271.35912240184757 65.81293302540415 75.82794457274827\\r\\n']}, {'input': '188\\r\\n748 859 686\\r\\n', 'output': ['61.327518534670745 70.42825992150023 56.24422154382905\\r\\n']}, {'input': '48\\r\\n395 552 466\\r\\n', 'output': ['13.418259023354565 18.751592356687897 15.830148619957537\\r\\n']}, {'input': '492\\r\\n971 305 807\\r\\n', 'output': ['229.34805568891022 72.04032645223235 190.61161785885741\\r\\n']}, {'input': '557\\r\\n84 654 154\\r\\n', 'output': ['52.45291479820627 408.3834080717489 96.16367713004483\\r\\n']}, {'input': '699\\r\\n493 285 659\\r\\n', 'output': ['239.8100208768267 138.63256784968684 320.5574112734864\\r\\n']}, {'input': '814\\r\\n711 408 545\\r\\n', 'output': ['347.8088942307692 199.58653846153845 266.6045673076923\\r\\n']}, {'input': '706\\r\\n197 265 571\\r\\n', 'output': ['134.63891577928362 181.11326234269117 390.24782187802515\\r\\n']}, {'input': '945\\r\\n123 67 174\\r\\n', 'output': ['319.3269230769231 173.9423076923077 451.7307692307692\\r\\n']}, {'input': '724\\r\\n529 558 407\\r\\n', 'output': ['256.3560910307898 270.4096385542168 197.2342704149933\\r\\n']}, {'input': '269\\r\\n0 623 873\\r\\n', 'output': ['0.0 112.02339572192513 156.97660427807486\\r\\n']}, {'input': '173\\r\\n0 0 374\\r\\n', 'output': ['0.0 0.0 173.0\\r\\n']}, {'input': '972\\r\\n918 0 405\\r\\n', 'output': ['674.4489795918367 0.0 297.55102040816325\\r\\n']}, {'input': '809\\r\\n328 0 0\\r\\n', 'output': ['809.0 0.0 0.0\\r\\n']}, {'input': '413\\r\\n517 0 0\\r\\n', 'output': ['413.0 0.0 0.0\\r\\n']}, {'input': '642\\r\\n0 665 0\\r\\n', 'output': ['0.0 642.0 0.0\\r\\n']}, {'input': '1000\\r\\n117 403 270\\r\\n', 'output': ['148.10126582278482 510.12658227848107 341.7721518987342\\r\\n']}, {'input': '1000\\r\\n1000 1000 1000\\r\\n', 'output': ['333.3333333333333 333.3333333333333 333.3333333333333\\r\\n']}, {'input': '1\\r\\n1000 1000 1000\\r\\n', 'output': ['0.3333333333333333 0.3333333333333333 0.3333333333333333\\r\\n']}, {'input': '1000\\r\\n1 0 1\\r\\n', 'output': ['500.0 0.0 500.0\\r\\n']}, {'input': '1000\\r\\n0 1 1\\r\\n', 'output': ['0.0 500.0 500.0\\r\\n']}, {'input': '1000\\r\\n1 1 0\\r\\n', 'output': ['500.0 500.0 0.0\\r\\n']}, {'input': '1000\\r\\n0 0 1\\r\\n', 'output': ['0.0 0.0 1000.0\\r\\n']}, {'input': '1000\\r\\n1 0 0\\r\\n', 'output': ['1000.0 0.0 0.0\\r\\n']}, {'input': '1000\\r\\n0 1 0\\r\\n', 'output': ['0.0 1000.0 0.0\\r\\n']}, {'input': '1000\\r\\n999 1000 999\\r\\n', 'output': ['333.2221480987325 333.555703802535 333.2221480987325\\r\\n']}, {'input': '1000\\r\\n999 998 997\\r\\n', 'output': ['333.6673346693387 333.33333333333337 332.999331997328\\r\\n']}, {'input': '3\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '100\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '1\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '239\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '10\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '1000\\r\\n197 198 199\\r\\n', 'output': ['331.6498316498317 333.33333333333337 335.01683501683505\\r\\n']}, {'input': '5\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '1000\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '1000\\r\\n0 1 999\\r\\n', 'output': ['0.0 1.0 999.0\\r\\n']}, {'input': '1000\\r\\n1000 0 0\\r\\n', 'output': ['1000.0 0.0 0.0\\r\\n']}]", "source_code": "import java.io.*;\n\npublic class HelloWorld\n{\n\tprivate static final double MAX = 1e-9;\n\tprivate static final int MOD = 1000000007;\n\n\tprivate static boolean bEOF = false;\n\tprivate static boolean hasNextByte() {\n\t\tif(bEOF) return false;\n\t\telse if(0!= in.available()) return true;\n\t\telse return hasNextByteFromFile();\n\t}\n\tprivate static boolean hasNextByteFromFile() {\n\t\ttry {\n\t\t\tif(in.read() >= 0) { bEOF = false; return true; }\n\t\t\telse { in.close(); bEOF = true; return false; }\n\t\t} catch(Exception e) {}\n\t\treturn false;\n\t}\n\tprivate static boolean hasNextInt() {\n\t\tint result = 0;\n\t\tint b = 0;\n\t\tboolean minus = false;\n\t\tif(!hasNextByte()) return false;\n\t\tif('-' == (b = inByte())) { minus = true; }\n\t\telse if(!minus && ('+'!= b)) return false;\n\t\tif(!hasNextByte()) return false;\n\t\twhile(true){\n\t\t\tb = inByte();\n\t\t\tif('0' <= b && b <= '9') {\n\t\t\t\tresult *= 10;\n\t\t\t\tresult += b - '0';\n\t\t\t} else if(!minus && b == -1 || minus && b!= -1) return true;\n\t\t\telse return false;\n\t\t}\n\t}\n\tprivate static boolean hasNextLong() {\n\t\tlong result = 0;\n\t\tint b = 0;\n\t\tboolean minus = false;\n\t\tif(!hasNextByte()) return false;\n\t\tif('-' == (b = inByte())) { minus = true; }\n\t\telse if(!minus && ('+'!= b)) return false;\n\t\tif(!hasNextByte()) return false;\n\t\twhile(true){\n\t\t\tb = inByte();\n\t\t\tif('0' <= b && b <= '9') {\n\t\t\t\tresult *= 10;\n\t\t\t\tresult += b - '0';\n\t\t\t} else if(!minus && b == -1 || minus && b!= -1) return true;\n\t\t\telse return false;\n\t\t}\n\t}\n\tprivate static boolean hasNextDouble() {\n\t\tlong length = 0;\n\t\tint b = 0;\n\t\tboolean intPart = false;\n\t\tboolean fracPart = false;\n\t\tif(!hasNextByte()) return false;\n\t\twhile(true){\n\t\t\tb = inByte();\n\t\t\tif('0' <= b && b <= '9' &&!fracPart) {\n\t\t\t\tlength++;\n\t\t\t} else if(!intPart && '0' > b || fracPart && b == -1 || 'e' == b || 'E' == b) {\n\t\t\t\tlength++;\n\t\t\t} else if('e' == b || 'E' == b || fracPart && b == -1 || intPart && b == -1) {\n\t\t\t\tlength += 2;\n\t\t\t} else if(intPart &&!fracPart &&!('+' == b || '-' == b)) {\n\t\t\t\tlength += 2;\n\t\t\t} else if(fracPart && b == -1 || intPart && b!= -1) {\n\t\t\t\tlength++;\n\t\t\t} else if('+' == b || '-' == b) {\n\t\t\t\tlength++;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif('.' == b) fracPart = true;\n\t\t\tif(intPart &&!fracPart && ('0' <= b && b <= '9')) {\n\t\t\t\tintPart = false;\n\t\t\t\tfracPart = true;\n\t\t\t} else if(!intPart && '0' <= b && b <= '9') {\n\t\t\t\tintPart = true;\n\t\t\t}\n\t\t\tif(fracPart && b == -1) return true;\n\t\t}\n\t}\n\n\tprivate static int inByte() {\n\t"}
{"src_uid": "0a9cabb857949e818453ffe411f08f95", "id": 105, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': '3\\r\\n1 1 1\\r\\n', 'output': ['1.0 1.0 1.0\\r\\n']}, {'input': '3\\r\\n2 0 0\\r\\n', 'output': ['3.0 0.0 0.0\\r\\n']}, {'input': '10\\r\\n1 6 3\\r\\n', 'output': ['1.0 6.0 3.0\\r\\n']}, {'input': '9\\r\\n8 2 0\\r\\n', 'output': ['7.2 1.8 0.0\\r\\n']}, {'input': '1\\r\\n0 9 2\\r\\n', 'output': ['0.0 0.8181818181818182 0.18181818181818182\\r\\n']}, {'input': '1\\r\\n3 5 1\\r\\n', 'output': ['0.3333333333333333 0.5555555555555556 0.1111111111111111\\r\\n']}, {'input': '7\\r\\n8 2 2\\r\\n', 'output': ['4.666666666666667 1.1666666666666667 1.1666666666666667\\r\\n']}, {'input': '9\\r\\n3 7 0\\r\\n', 'output': ['2.7 6.3 0.0\\r\\n']}, {'input': '1000\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '624\\r\\n553 828 109\\r\\n', 'output': ['231.59194630872483 346.7597315436242 45.64832214765101\\r\\n']}, {'input': '902\\r\\n742 737 340\\r\\n', 'output': ['367.9406267179769 365.4612424409016 168.5981308411215\\r\\n']}, {'input': '239\\r\\n995 385 267\\r\\n', 'output': ['144.3867638129933 55.8682452944748 38.744990892531874\\r\\n']}, {'input': '797\\r\\n917 702 538\\r\\n', 'output': ['338.82661103384334 259.3852573018081 198.78813166434864\\r\\n']}, {'input': '938\\r\\n414 308 795\\r\\n', 'output': ['255.98681608437707 190.44429795649307 491.5688859591299\\r\\n']}, {'input': '422\\r\\n215 779 900\\r\\n', 'output': ['47.903907074973596 173.56810982048574 200.52798310454065\\r\\n']}, {'input': '413\\r\\n569 138 159\\r\\n', 'output': ['271.35912240184757 65.81293302540415 75.82794457274827\\r\\n']}, {'input': '188\\r\\n748 859 686\\r\\n', 'output': ['61.327518534670745 70.42825992150023 56.24422154382905\\r\\n']}, {'input': '48\\r\\n395 552 466\\r\\n', 'output': ['13.418259023354565 18.751592356687897 15.830148619957537\\r\\n']}, {'input': '492\\r\\n971 305 807\\r\\n', 'output': ['229.34805568891022 72.04032645223235 190.61161785885741\\r\\n']}, {'input': '557\\r\\n84 654 154\\r\\n', 'output': ['52.45291479820627 408.3834080717489 96.16367713004483\\r\\n']}, {'input': '699\\r\\n493 285 659\\r\\n', 'output': ['239.8100208768267 138.63256784968684 320.5574112734864\\r\\n']}, {'input': '814\\r\\n711 408 545\\r\\n', 'output': ['347.8088942307692 199.58653846153845 266.6045673076923\\r\\n']}, {'input': '706\\r\\n197 265 571\\r\\n', 'output': ['134.63891577928362 181.11326234269117 390.24782187802515\\r\\n']}, {'input': '945\\r\\n123 67 174\\r\\n', 'output': ['319.3269230769231 173.9423076923077 451.7307692307692\\r\\n']}, {'input': '724\\r\\n529 558 407\\r\\n', 'output': ['256.3560910307898 270.4096385542168 197.2342704149933\\r\\n']}, {'input': '269\\r\\n0 623 873\\r\\n', 'output': ['0.0 112.02339572192513 156.97660427807486\\r\\n']}, {'input': '173\\r\\n0 0 374\\r\\n', 'output': ['0.0 0.0 173.0\\r\\n']}, {'input': '972\\r\\n918 0 405\\r\\n', 'output': ['674.4489795918367 0.0 297.55102040816325\\r\\n']}, {'input': '809\\r\\n328 0 0\\r\\n', 'output': ['809.0 0.0 0.0\\r\\n']}, {'input': '413\\r\\n517 0 0\\r\\n', 'output': ['413.0 0.0 0.0\\r\\n']}, {'input': '642\\r\\n0 665 0\\r\\n', 'output': ['0.0 642.0 0.0\\r\\n']}, {'input': '1000\\r\\n117 403 270\\r\\n', 'output': ['148.10126582278482 510.12658227848107 341.7721518987342\\r\\n']}, {'input': '1000\\r\\n1000 1000 1000\\r\\n', 'output': ['333.3333333333333 333.3333333333333 333.3333333333333\\r\\n']}, {'input': '1\\r\\n1000 1000 1000\\r\\n', 'output': ['0.3333333333333333 0.3333333333333333 0.3333333333333333\\r\\n']}, {'input': '1000\\r\\n1 0 1\\r\\n', 'output': ['500.0 0.0 500.0\\r\\n']}, {'input': '1000\\r\\n0 1 1\\r\\n', 'output': ['0.0 500.0 500.0\\r\\n']}, {'input': '1000\\r\\n1 1 0\\r\\n', 'output': ['500.0 500.0 0.0\\r\\n']}, {'input': '1000\\r\\n0 0 1\\r\\n', 'output': ['0.0 0.0 1000.0\\r\\n']}, {'input': '1000\\r\\n1 0 0\\r\\n', 'output': ['1000.0 0.0 0.0\\r\\n']}, {'input': '1000\\r\\n0 1 0\\r\\n', 'output': ['0.0 1000.0 0.0\\r\\n']}, {'input': '1000\\r\\n999 1000 999\\r\\n', 'output': ['333.2221480987325 333.555703802535 333.2221480987325\\r\\n']}, {'input': '1000\\r\\n999 998 997\\r\\n', 'output': ['333.6673346693387 333.33333333333337 332.999331997328\\r\\n']}, {'input': '3\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '100\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '1\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '239\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '10\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '1000\\r\\n197 198 199\\r\\n', 'output': ['331.6498316498317 333.33333333333337 335.01683501683505\\r\\n']}, {'input': '5\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '1000\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '1000\\r\\n0 1 999\\r\\n', 'output': ['0.0 1.0 999.0\\r\\n']}, {'input': '1000\\r\\n1000 0 0\\r\\n', 'output': ['1000.0 0.0 0.0\\r\\n']}]", "source_code": "import java.util.*;\nimport static java.util.Arrays.*;\nimport java.util.stream.Collectors;\n\npublic class Solution {\n \n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int S = in.nextInt();\n    double a[] = new double[3];\n    for(int i=0;i<3;i++) a[i] = in.nextInt();\n    \n    double x = a[0]/((a[0]+a[1]+a[2])/S);\n    double y = a[1]/((a[0]+a[1]+a[2])/S);\n    double z = a[2]/((a[0]+a[1]+a[2])/S);\n    \n    System.out.printf(Locale.US,\"%.2f %.2f %.2f\",x,y,z);\n  }\n}"}
{"src_uid": "0a9cabb857949e818453ffe411f08f95", "id": 105, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': '3\\r\\n1 1 1\\r\\n', 'output': ['1.0 1.0 1.0\\r\\n']}, {'input': '3\\r\\n2 0 0\\r\\n', 'output': ['3.0 0.0 0.0\\r\\n']}, {'input': '10\\r\\n1 6 3\\r\\n', 'output': ['1.0 6.0 3.0\\r\\n']}, {'input': '9\\r\\n8 2 0\\r\\n', 'output': ['7.2 1.8 0.0\\r\\n']}, {'input': '1\\r\\n0 9 2\\r\\n', 'output': ['0.0 0.8181818181818182 0.18181818181818182\\r\\n']}, {'input': '1\\r\\n3 5 1\\r\\n', 'output': ['0.3333333333333333 0.5555555555555556 0.1111111111111111\\r\\n']}, {'input': '7\\r\\n8 2 2\\r\\n', 'output': ['4.666666666666667 1.1666666666666667 1.1666666666666667\\r\\n']}, {'input': '9\\r\\n3 7 0\\r\\n', 'output': ['2.7 6.3 0.0\\r\\n']}, {'input': '1000\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '624\\r\\n553 828 109\\r\\n', 'output': ['231.59194630872483 346.7597315436242 45.64832214765101\\r\\n']}, {'input': '902\\r\\n742 737 340\\r\\n', 'output': ['367.9406267179769 365.4612424409016 168.5981308411215\\r\\n']}, {'input': '239\\r\\n995 385 267\\r\\n', 'output': ['144.3867638129933 55.8682452944748 38.744990892531874\\r\\n']}, {'input': '797\\r\\n917 702 538\\r\\n', 'output': ['338.82661103384334 259.3852573018081 198.78813166434864\\r\\n']}, {'input': '938\\r\\n414 308 795\\r\\n', 'output': ['255.98681608437707 190.44429795649307 491.5688859591299\\r\\n']}, {'input': '422\\r\\n215 779 900\\r\\n', 'output': ['47.903907074973596 173.56810982048574 200.52798310454065\\r\\n']}, {'input': '413\\r\\n569 138 159\\r\\n', 'output': ['271.35912240184757 65.81293302540415 75.82794457274827\\r\\n']}, {'input': '188\\r\\n748 859 686\\r\\n', 'output': ['61.327518534670745 70.42825992150023 56.24422154382905\\r\\n']}, {'input': '48\\r\\n395 552 466\\r\\n', 'output': ['13.418259023354565 18.751592356687897 15.830148619957537\\r\\n']}, {'input': '492\\r\\n971 305 807\\r\\n', 'output': ['229.34805568891022 72.04032645223235 190.61161785885741\\r\\n']}, {'input': '557\\r\\n84 654 154\\r\\n', 'output': ['52.45291479820627 408.3834080717489 96.16367713004483\\r\\n']}, {'input': '699\\r\\n493 285 659\\r\\n', 'output': ['239.8100208768267 138.63256784968684 320.5574112734864\\r\\n']}, {'input': '814\\r\\n711 408 545\\r\\n', 'output': ['347.8088942307692 199.58653846153845 266.6045673076923\\r\\n']}, {'input': '706\\r\\n197 265 571\\r\\n', 'output': ['134.63891577928362 181.11326234269117 390.24782187802515\\r\\n']}, {'input': '945\\r\\n123 67 174\\r\\n', 'output': ['319.3269230769231 173.9423076923077 451.7307692307692\\r\\n']}, {'input': '724\\r\\n529 558 407\\r\\n', 'output': ['256.3560910307898 270.4096385542168 197.2342704149933\\r\\n']}, {'input': '269\\r\\n0 623 873\\r\\n', 'output': ['0.0 112.02339572192513 156.97660427807486\\r\\n']}, {'input': '173\\r\\n0 0 374\\r\\n', 'output': ['0.0 0.0 173.0\\r\\n']}, {'input': '972\\r\\n918 0 405\\r\\n', 'output': ['674.4489795918367 0.0 297.55102040816325\\r\\n']}, {'input': '809\\r\\n328 0 0\\r\\n', 'output': ['809.0 0.0 0.0\\r\\n']}, {'input': '413\\r\\n517 0 0\\r\\n', 'output': ['413.0 0.0 0.0\\r\\n']}, {'input': '642\\r\\n0 665 0\\r\\n', 'output': ['0.0 642.0 0.0\\r\\n']}, {'input': '1000\\r\\n117 403 270\\r\\n', 'output': ['148.10126582278482 510.12658227848107 341.7721518987342\\r\\n']}, {'input': '1000\\r\\n1000 1000 1000\\r\\n', 'output': ['333.3333333333333 333.3333333333333 333.3333333333333\\r\\n']}, {'input': '1\\r\\n1000 1000 1000\\r\\n', 'output': ['0.3333333333333333 0.3333333333333333 0.3333333333333333\\r\\n']}, {'input': '1000\\r\\n1 0 1\\r\\n', 'output': ['500.0 0.0 500.0\\r\\n']}, {'input': '1000\\r\\n0 1 1\\r\\n', 'output': ['0.0 500.0 500.0\\r\\n']}, {'input': '1000\\r\\n1 1 0\\r\\n', 'output': ['500.0 500.0 0.0\\r\\n']}, {'input': '1000\\r\\n0 0 1\\r\\n', 'output': ['0.0 0.0 1000.0\\r\\n']}, {'input': '1000\\r\\n1 0 0\\r\\n', 'output': ['1000.0 0.0 0.0\\r\\n']}, {'input': '1000\\r\\n0 1 0\\r\\n', 'output': ['0.0 1000.0 0.0\\r\\n']}, {'input': '1000\\r\\n999 1000 999\\r\\n', 'output': ['333.2221480987325 333.555703802535 333.2221480987325\\r\\n']}, {'input': '1000\\r\\n999 998 997\\r\\n', 'output': ['333.6673346693387 333.33333333333337 332.999331997328\\r\\n']}, {'input': '3\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '100\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '1\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '239\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '10\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '1000\\r\\n197 198 199\\r\\n', 'output': ['331.6498316498317 333.33333333333337 335.01683501683505\\r\\n']}, {'input': '5\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '1000\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '1000\\r\\n0 1 999\\r\\n', 'output': ['0.0 1.0 999.0\\r\\n']}, {'input': '1000\\r\\n1000 0 0\\r\\n', 'output': ['1000.0 0.0 0.0\\r\\n']}]", "source_code": "\nimport java.io.*;\nimport java.util.*;\n\npublic class Solution \n{\n\tprivate static void solve() throws IOException\n\t{\n\t\ttry(Input reader = new StandardInput())\n\t\t{\n\t\t\tint S = reader.nextInt(), a = reader.nextInt(), b = reader.nextInt(), c = reader.nextInt();\n\t\t\tint temp = S;\n\t\t\tif((S - 2*a) > 0)\n\t\t\t{\n\t\t\t\ttemp -= 2*a;\n\t\t\t\tSystem.out.print((S-temp)/b+ \" \");\n\t\t\t\tSystem.out.print( temp / b + \" \");\n\t\t\t\tSystem.out.print( 0 );\n\t\t\t}\n\t\t\telse if((S-2*b) > 0)\n\t\t\t{\n\t\t\t\ttemp -= 2*b;\n\t\t\t\tSystem.out.print( 0 + \" \");\n\t\t\t\tSystem.out.print( temp / b + \" \");\n\t\t\t\tSystem.out.print( 0 );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttemp -= 2*c;\n\t\t\t\tSystem.out.print( temp / c + \" \");\n\t\t\t\tSystem.out.print( 0 );\n\t\t\t\tSystem.out.print( 0 );\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) throws IOException \n\t{\n\t\t//code\n\t\tif(args.length == 1 && args[0].equals(\"-\")) solve();\n\t\ttry(StandardInput reader = new StandardInput())\n\t\t{\n\t\t\tint T = reader.nextInt();\n\t\t\twhile(T-->0) solve();\n\t\t}\n\t}\n}"}
{"src_uid": "0a9cabb857949e818453ffe411f08f95", "id": 105, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': '3\\r\\n1 1 1\\r\\n', 'output': ['1.0 1.0 1.0\\r\\n']}, {'input': '3\\r\\n2 0 0\\r\\n', 'output': ['3.0 0.0 0.0\\r\\n']}, {'input': '10\\r\\n1 6 3\\r\\n', 'output': ['1.0 6.0 3.0\\r\\n']}, {'input': '9\\r\\n8 2 0\\r\\n', 'output': ['7.2 1.8 0.0\\r\\n']}, {'input': '1\\r\\n0 9 2\\r\\n', 'output': ['0.0 0.8181818181818182 0.18181818181818182\\r\\n']}, {'input': '1\\r\\n3 5 1\\r\\n', 'output': ['0.3333333333333333 0.5555555555555556 0.1111111111111111\\r\\n']}, {'input': '7\\r\\n8 2 2\\r\\n', 'output': ['4.666666666666667 1.1666666666666667 1.1666666666666667\\r\\n']}, {'input': '9\\r\\n3 7 0\\r\\n', 'output': ['2.7 6.3 0.0\\r\\n']}, {'input': '1000\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '624\\r\\n553 828 109\\r\\n', 'output': ['231.59194630872483 346.7597315436242 45.64832214765101\\r\\n']}, {'input': '902\\r\\n742 737 340\\r\\n', 'output': ['367.9406267179769 365.4612424409016 168.5981308411215\\r\\n']}, {'input': '239\\r\\n995 385 267\\r\\n', 'output': ['144.3867638129933 55.8682452944748 38.744990892531874\\r\\n']}, {'input': '797\\r\\n917 702 538\\r\\n', 'output': ['338.82661103384334 259.3852573018081 198.78813166434864\\r\\n']}, {'input': '938\\r\\n414 308 795\\r\\n', 'output': ['255.98681608437707 190.44429795649307 491.5688859591299\\r\\n']}, {'input': '422\\r\\n215 779 900\\r\\n', 'output': ['47.903907074973596 173.56810982048574 200.52798310454065\\r\\n']}, {'input': '413\\r\\n569 138 159\\r\\n', 'output': ['271.35912240184757 65.81293302540415 75.82794457274827\\r\\n']}, {'input': '188\\r\\n748 859 686\\r\\n', 'output': ['61.327518534670745 70.42825992150023 56.24422154382905\\r\\n']}, {'input': '48\\r\\n395 552 466\\r\\n', 'output': ['13.418259023354565 18.751592356687897 15.830148619957537\\r\\n']}, {'input': '492\\r\\n971 305 807\\r\\n', 'output': ['229.34805568891022 72.04032645223235 190.61161785885741\\r\\n']}, {'input': '557\\r\\n84 654 154\\r\\n', 'output': ['52.45291479820627 408.3834080717489 96.16367713004483\\r\\n']}, {'input': '699\\r\\n493 285 659\\r\\n', 'output': ['239.8100208768267 138.63256784968684 320.5574112734864\\r\\n']}, {'input': '814\\r\\n711 408 545\\r\\n', 'output': ['347.8088942307692 199.58653846153845 266.6045673076923\\r\\n']}, {'input': '706\\r\\n197 265 571\\r\\n', 'output': ['134.63891577928362 181.11326234269117 390.24782187802515\\r\\n']}, {'input': '945\\r\\n123 67 174\\r\\n', 'output': ['319.3269230769231 173.9423076923077 451.7307692307692\\r\\n']}, {'input': '724\\r\\n529 558 407\\r\\n', 'output': ['256.3560910307898 270.4096385542168 197.2342704149933\\r\\n']}, {'input': '269\\r\\n0 623 873\\r\\n', 'output': ['0.0 112.02339572192513 156.97660427807486\\r\\n']}, {'input': '173\\r\\n0 0 374\\r\\n', 'output': ['0.0 0.0 173.0\\r\\n']}, {'input': '972\\r\\n918 0 405\\r\\n', 'output': ['674.4489795918367 0.0 297.55102040816325\\r\\n']}, {'input': '809\\r\\n328 0 0\\r\\n', 'output': ['809.0 0.0 0.0\\r\\n']}, {'input': '413\\r\\n517 0 0\\r\\n', 'output': ['413.0 0.0 0.0\\r\\n']}, {'input': '642\\r\\n0 665 0\\r\\n', 'output': ['0.0 642.0 0.0\\r\\n']}, {'input': '1000\\r\\n117 403 270\\r\\n', 'output': ['148.10126582278482 510.12658227848107 341.7721518987342\\r\\n']}, {'input': '1000\\r\\n1000 1000 1000\\r\\n', 'output': ['333.3333333333333 333.3333333333333 333.3333333333333\\r\\n']}, {'input': '1\\r\\n1000 1000 1000\\r\\n', 'output': ['0.3333333333333333 0.3333333333333333 0.3333333333333333\\r\\n']}, {'input': '1000\\r\\n1 0 1\\r\\n', 'output': ['500.0 0.0 500.0\\r\\n']}, {'input': '1000\\r\\n0 1 1\\r\\n', 'output': ['0.0 500.0 500.0\\r\\n']}, {'input': '1000\\r\\n1 1 0\\r\\n', 'output': ['500.0 500.0 0.0\\r\\n']}, {'input': '1000\\r\\n0 0 1\\r\\n', 'output': ['0.0 0.0 1000.0\\r\\n']}, {'input': '1000\\r\\n1 0 0\\r\\n', 'output': ['1000.0 0.0 0.0\\r\\n']}, {'input': '1000\\r\\n0 1 0\\r\\n', 'output': ['0.0 1000.0 0.0\\r\\n']}, {'input': '1000\\r\\n999 1000 999\\r\\n', 'output': ['333.2221480987325 333.555703802535 333.2221480987325\\r\\n']}, {'input': '1000\\r\\n999 998 997\\r\\n', 'output': ['333.6673346693387 333.33333333333337 332.999331997328\\r\\n']}, {'input': '3\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '100\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '1\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '239\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '10\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '1000\\r\\n197 198 199\\r\\n', 'output': ['331.6498316498317 333.33333333333337 335.01683501683505\\r\\n']}, {'input': '5\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '1000\\r\\n0 0 0\\r\\n', 'output': ['0 0 0\\r\\n']}, {'input': '1000\\r\\n0 1 999\\r\\n', 'output': ['0.0 1.0 999.0\\r\\n']}, {'input': '1000\\r\\n1000 0 0\\r\\n', 'output': ['1000.0 0.0 0.0\\r\\n']}]", "source_code": "import java.util.*;\nimport java.io.*;\n\npublic class Main {\n\tpublic static void main (String[] args) {\n\t\tInputSupplier is = new StandardInputSupplier();\n\t\tint S = is.nextInt();\n\t\tint[] a = new int[3];\n\t\tfor(int i = 0; i < 3; i++)\n\t\t\ta[i] = is.nextInt();\n\t\tdouble ans = 0, x = 0, y = 0, z = 0;\n\t\tfor(int i = 0; i < 3; i++) {\n\t\t\tfor(int j = 0; j < 3; j++) {\n\t\t\t\tfor(int k = 0; k < 3; k++) {\n\t\t\t\t\tif(a[i]!= 0 || a[j]!= 0 || a[k]!= 0){\n\t\t\t\t\t\tx = (S + a[i] - a[j] - a[k]) / (a[i] * a[j] * a[k]);\n\t\t\t\t\t\ty = (S - a[i] + a[j] - a[k]) / (a[i] * a[j] * a[k]);\n\t\t\t\t\t\tz = (S + a[i] + a[j] - a[k]) / (a[i] * a[j] * a[k]);\n\t\t\t\t\t\tif(S > 0 && (x >= 0) && (y >= 0) && (z >= 0) && (x + y + z <= S)) {\n\t\t\t\t\t\t\tif(ans == 0 || Math.abs((ans - Math.log10(x*a[j]*a[k]))/Math.log10(x*a[j]*a[k])) <= 1e-6){\n\t\t\t\t\t\t\t\tans = Math.log10(x*a[j]*a[k]);\n\t\t\t\t\t\t\t\tSystem.out.print((double)x+\" \"+(double)y+\" \"+(double)z);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate interface InputSupplier{\n\t\tint nextInt() throws IOException;\n\t\tdefault long nextLong() throws IOException {\n\t\t\treturn Long.parseLong(next());\n\t\t}\n\t\tdefault int[] readIntArray() throws IOException {\n\t\t\treturn readIntArray(nextInt());\n\t\t}\n\t\tdefault int[] readIntArray(int size) throws IOException {\n\t\t\tint[] array = new int[size];\n\t\t\tfor(int i = 0; i < array.length; i++) {\n\t\t\t\tarray[i] = nextInt();\n\t\t\t}\n\t\t\treturn array;\n\t\t}\n\t\tdefault long[] readLongArray(int size) throws IOException {\n\t\t\tlong[] array = new long[size];\n\t\t\tfor(int i = 0; i < array.length; i++) {\n\t\t\t\tarray[i] = nextLong();\n\t\t\t}\n\t\t\treturn array;\n\t\t}\n\t\tdefault double nextDouble() throws IOException {\n\t\t\treturn Double.parseDouble(next());\n\t\t}\n\t\tdefault double[] readDoubleArray() throws IOException {\n\t\t\treturn readDoubleArray(nextInt());\n\t\t}\n\t\tdefault double[] readDoubleArray(int size) throws IOException {\n\t\t\tdouble[] array = new double[size];\n\t\t\tfor(int i = 0; i < array.length; i++) {\n\t\t\t\tarray[i] = nextDouble();\n\t\t\t}\n\t\t\treturn array;\n\t\t}\n\t\tdefault String next() throws IOException {\n\t\t\treturn new BufferedReader(new InputStreamReader(System.in)).readLine();\n\t\t}\n\t}\n\n\tprivate static class StandardInputSupplier implements InputSupplier{\n\t\tprivate final StringTokenizer stringTokenizer;\n\t\tpublic StandardInputSupplier(){\n\t\t\tstringTokenizer = new StringTokenizer(System.in.toString());\n\t\t}\n\t\t@Override\n\t\tpublic int nextInt()"}
{"src_uid": "1805771e194d323edacf2526a1eb6768", "id": 106, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '4\\r\\n2S 2S 2C 2C\\r\\n', 'output': ['YES']}, {'input': '2\\r\\n3S 2C\\r\\n', 'output': ['NO']}, {'input': '5\\r\\n2S 2S 4S 3S 2S\\r\\n', 'output': ['YES']}, {'input': '5\\r\\n5S 5S 7S 4S 3H\\r\\n', 'output': ['NO']}, {'input': '5\\r\\n7S 7S 4S 8H 4H\\r\\n', 'output': ['NO']}, {'input': '5\\r\\n4S 2H 3S 3S 2H\\r\\n', 'output': ['NO']}, {'input': '52\\r\\n3H 6S 3S 2S 2S 3S 4S 3H 2C 4S 3C 3S 2S 2C 2S 6S 4C 3S 5C 3S 2S 4S 3S 5S 2H 2S 4H 3S 3S 4H 4S 2C 2H 2S 4S 6D 4C 4H 2H 4S 3H 6D 6S 3C 3C 4H 5S 3S 3S 2H 2S 4C\\r\\n', 'output': ['NO']}, {'input': '52\\r\\n2S 4S 3S 2S 4S 3S 4S 4S 8S 3S 2S 2S 5S 3S 3S 2S 3S 5S 4S 4S 2S 2S 4S 4S 6S 2S 5S 2S 5S 2S 2S 2S 4S 2S 5S 5S 2S 6S 8S 6S 2S 2S TS 2H 4S 4S 3S 3S 2S 2S 7S 3S\\r\\n', 'output': ['YES']}, {'input': '5\\r\\nAD 5S KH AH AS\\r\\n', 'output': ['YES']}, {'input': '50\\r\\nTS 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D\\r\\n', 'output': ['NO']}, {'input': '5\\r\\nAD 5S KH AH KS\\r\\n', 'output': ['YES']}, {'input': '5\\r\\nAD 5S KH AH JS\\r\\n', 'output': ['NO']}, {'input': '20\\r\\nJD 5H 3H 9H 2S 5S 5H QS 8D 7H TS 9S 4H 5S 9H 4H 3S KS KS JS\\r\\n', 'output': ['NO']}, {'input': '21\\r\\nJS 5S 9S KH 9D JH 3S KH QH 5D TC 3S 5S 4H 4H 5S 7S AH 4S 3S 6S\\r\\n', 'output': ['NO']}, {'input': '51\\r\\nJD 8D QD TC JD AD JD 5D 5S QC TC 4H 8S 7D QD QD 3H TH 8D 9D 5D 4D 6D 7D 9C 2D AD 6D 6H AD 5D 3D AC AC JC 5D 3D KC 7C AD 4D 8C QD QH 6D 9C 2D 6D 3C KC TD\\r\\n', 'output': ['NO']}, {'input': '52\\r\\nKD KD 8H 9C 7C 8D JD 3D 9C KD 6D 9C QD TC 7D TD 3C KD 6D 2D TC 6D AC QD 2C 3D 8D KH AD QD 2C 6C JH 6D 8D 2C 7D QD 7C 7H TD 4D 2D 8D TC 5D 8D KD 7C QC TD 5D\\r\\n', 'output': ['NO']}, {'input': '52\\r\\nJS 7S 3S 2S 7S TS 4S 6S 5H TS 4S TH 6H 9S TH TH 4S 4H 2H TH TC TH TS TS 4S TS 2S TH TH TS 6S TS TS 3S TS TH 5H TS TS 5S 7H 2H TS 6S 6H 2H TS TH 2S 4S 4H 4S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n8D AD AC 9H AS AD KH AD QH AH AC AS 8H KS TD AH KS AD AD AS KD AD AS AH AS AD AD AH AC AD KC JD 8D AC 9D AC AD QD KC AD JS JC AD TD KC JD TD 8D KS KC KD KD\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nAD JD JD TD AD 8D QD AH TC QH AD TD 2D AD QD 4D 3C 3D 3H 6D 8C 3C 3S 6C QC KD 2D 4S TD 5D 3S 3S 3H 3S KH 3H 3D 3H JH JH QH 9H TH 3H KH 7H 3H TH AH 3S 4H 3H\\r\\n', 'output': ['YES']}, {'input': '10\\r\\n4C 8C 8D JC 8C 5S 8H 8C 8S 8H\\r\\n', 'output': ['YES']}, {'input': '10\\r\\nQH QS QS JH QS 6S 7H QH QH QS\\r\\n', 'output': ['YES']}, {'input': '10\\r\\nKS 4S KS KH TS TS KC KH KH KS\\r\\n', 'output': ['YES']}, {'input': '11\\r\\nJD 5D JC JH 6C 6D JH 6S 6S JS JD\\r\\n', 'output': ['YES']}, {'input': '11\\r\\nJS KH JC JS 9S 9H 6H 7H JH AS AH\\r\\n', 'output': ['YES']}, {'input': '11\\r\\n3S 2H TS 9D 9S 2S 2S 9S 3C 2S 2C\\r\\n', 'output': ['YES']}, {'input': '12\\r\\n9S TS QS KD KS AS QS KS 6S AD AD AS\\r\\n', 'output': ['YES']}, {'input': '12\\r\\nJC 8C AC TH AH AC TC AS AH TC AS AS\\r\\n', 'output': ['YES']}, {'input': '12\\r\\n6S 6S 3S 4C 2S 2S 7S 2C 2S 4S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '51\\r\\n7S 4C 2S JS 5C 2H 2C 3C 4C QC 2C 2C 2S 4S 2H 2H 4C 2C 6C 2C 2C JC 8C QC JC 8C TC 7H 4C 8S QH 4H 8C 3H 4S 3H 7H 8S 4C 4S 4S 4S 2H 4H QH 3H 3H 3H 4H 8C 3C\\r\\n', 'output': ['YES']}, {'input': '51\\r\\n2S 2H 2C 2C 3H 2H 7S 2D 6H 2H 2C 2H 2H 5S 2S 3C 2C 2H 2S 2C 5C JC 2S 4C 3C 2C 5C 4C 4D 8C 5C 6C 7C 4C 4C 6S TS 3C TH 4C 4C TS 7C TC 3C TS TC 2S TH TC 2C\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nAC 4C TC 9C TH AD 3C TC 4S 5C TD QD TH 4C 4D 3H TC 4S TH 8H 7H 4D TH QD 4D 8H QH 4D 4H 8D 4H 4D 8H 3D 9D 8H 9D 9C 9H 8D TD 3H 5H 6D QD 9H 6D KD 9H 6D 2D 9D\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nJH 8H 9D TH 5H 9H 5H JH 5H 8H 9D QH 9H 6C AD AC 9C AD AH 9C AC 5C 5C AC 5H 5C 8C 5D KD 5H 5C 8D 5D 8D KD 5D QD 8S 8C 8C 8H 8C JD 8C 8D 8C 8H 9C JD 8D 8D JD\\r\\n', 'output': ['NO']}, {'input': '52\\r\\n9D AD 9C 6C 9D 7D 6D TS 6D 6D 3D QH 9D 9D 9H 9D 9D 2H 5D JH 9H 5C JC TC 9D 9C 2C 9C 9D 4H 4D AC 9D 4C AC 8C 9C QC 8C 9D 7D QC 9H 9D 2C 9D 9C 3C 7H 9C TC 9H\\r\\n', 'output': ['NO']}, {'input': '52\\r\\n9D 5D TC 4D 7D 3D JD 5C 7D TD 5D TD 6H TD TD AD 6D AD TD 2C TD TS TD TD 2H 7D TD QD 2D 2H AC 9D 2D 2C QC AD 2D 4C JC 2D AD 5D 5C AC AD 6C 8D 4D 7C 8C JC AC\\r\\n', 'output': ['NO']}, {'input': '51\\r\\nAH 6S 2S 6H 6S 4S 3S 9S 5S 4S 2S 9S 2S 3S 2S JS 2S 2S 9H 2S 9S 2S 3S 9S 4S 4S 9S 9S 2S 2S 3S 2S 6H 7S 3S 3H 6S 3S 2H 6S 3S 6H 7H 6S 6S 4S 4H 5H 4H 4H 6H\\r\\n', 'output': ['YES']}, {'input': '51\\r\\nJC 6S 2S 6H 6S 4S 3S 9S 5S 4S 2S 9S 2S 3S 2S JS 2S 2S 9H 2S 9S 2S 3S 9S 4S 4S 9S 9S 2S 2S 3S 2S 6H 7S 3S 3H 6S 3S 2H 6S 3S 6H 7H 6S 6S 4S 4H 5H 4H 4H 6H\\r\\n', 'output': ['YES']}, {'input': '51\\r\\n9C 6S 2S 6H 6S 4S 3S 9S 5S 4S 2S 9S 2S 3S 2S JS 2S 2S 9H 2S 9S 2S 3S 9S 4S 4S 9S 9S 2S 2S 3S 2S 6H 7S 3S 3H 6S 3S 2H 6S 3S 6H 7H 6S 6S 4S 4H 5H 4H 4H 6H\\r\\n', 'output': ['YES']}, {'input': '51\\r\\n7C 6S 2S 6H 6S 4S 3S 9S 5S 4S 2S 9S 2S 3S 2S JS 2S 2S 9H 2S 9S 2S 3S 9S 4S 4S 9S 9S 2S 2S 3S 2S 6H 7S 3S 3H 6S 3S 2H 6S 3S 6H 7H 6S 6S 4S 4H 5H 4H 4H 6H\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n2D 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n3D 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nTD 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nJD 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nAH 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n7H 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n2D 5S 4S 4S 4C 2S 4H 4S 4H 4C 3S 4S 4S 4H 5S 4H 4H 5S 2S 4S 4S 2S 4S 4C 4S 4S 9S 4H 4S 3S 3H 4S 4S 7S 3S 3S 2H 3S 7S 4S 2S 7S 2S 2S 3S 3C 2S 3S 3S 2S 5S 3S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nAC 5S 4S 4S 4C 2S 4H 4S 4H 4C 3S 4S 4S 4H 5S 4H 4H 5S 2S 4S 4S 2S 4S 4C 4S 4S 9S 4H 4S 3S 3H 4S 4S 7S 3S 3S 2H 3S 7S 4S 2S 7S 2S 2S 3S 3C 2S 3S 3S 2S 5S 3S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n7D 5S 4S 4S 4C 2S 4H 4S 4H 4C 3S 4S 4S 4H 5S 4H 4H 5S 2S 4S 4S 2S 4S 4C 4S 4S 9S 4H 4S 3S 3H 4S 4S 7S 3S 3S 2H 3S 7S 4S 2S 7S 2S 2S 3S 3C 2S 3S 3S 2S 5S 3S\\r\\n', 'output': ['YES']}, {'input': '1\\r\\n3C\\r\\n', 'output': ['YES']}, {'input': '4\\r\\n2C 3D 4D 5C\\r\\n', 'output': ['NO']}]", "source_code": "import java.io.*;\nimport java.util.*;\npublic class Solution {\n \tstatic void run() throws IOException {\n    \tFastScanner scanner = new FastScanner();\n    \tint n = scanner.nextInt();\n    \tString [] cards = new String [n];\n    \tfor(int i = 0; i < n; ++i)\n    \t\tcards[i] = scanner.next();\n    \t//System.out.println(Arrays.deepToString(cards));\n    \tboolean solvable = true;\n    \tfor(int i = 1; i <= n; ++i)\n    \t{\n    \t\tboolean found = false;\n    \t\tif(i!= 1 && cards[i - 1].equals(cards[i]))\n    \t\t\tfound = true;\n    \t\tif(i!= 2 &&!cards[i - 1].equals(cards[i]) &&!cards[i - 2].equals(cards[i]))\n    \t\t\tfound = true;\n    \t\tif(i!= 3 &&!cards[i - 1].equals(cards[i]) &&!cards[i - 2].equals(cards[i]) &&!cards[i - 3].equals(cards[i]))\n    \t\t\tfound = true;\n    \t\tif(!found)\n    \t\t{\n    \t\t\tsolvable = false;\n    \t\t\tbreak;\n    \t\t}\n    \t}\n    \tSystem.out.println(solvable? \"YES\" : \"NO\");\n    }\n\n\tpublic static void main(String[] args) throws IOException {\n\t\trun();\n\t\t}\n\n\tprivate static class FastScanner {\n        private final InputStream in = System.in;\n        private final byte[] buffer = new byte[1024];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n           \tif (ptr < buflen) {\n               \treturn true;\n               \t} else {\n               \tptr = 0;\n               \ttry {\n               \t\tbuflen = in.read(buffer);\n               \t} catch (IOException e) { \n               \t\te.printStackTrace();\n               \t} \n               \tif (buflen <= 0) { \n               \t\treturn false; \n               \t} \n           \t} \n           \treturn true;\n        }\n        private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n        static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n        public boolean hasNext() { while(hasNextByte() &&!isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\n        public String next() {\n            if (!hasNext()) throw new NoSuchElementException();\n            String res = null;\n            boolean isValid = false;\n           \tdo {\n               \tint b = readByte();\n               \tif (b == -1) break;\n               \tif (!isPrintableChar(b)) continue;\n               \tif (res == null) res = \"\";\n               \tres += (char) b;\n               \tisValid = true;\n           \t} while(true);\n           \treturn isValid? res : null;\n        }\n        public long nextLong() {\n            if (!hasNext()) throw new NoSuchElementException();\n            long n = 0;\n            boolean minus = false;\n            int b = readByte();\n            if (b == '-') {\n            \tminus = true;\n            \tb = readByte();\n            }\n            if (b < '0' || '9' < b) {\n            \tthrow new NumberFormatException();\n            }\n            while(true){\n            \tif ('0' <= b && b <= '9') {\n            \t\tn *= 10;\n            \t\tn += b - '0';\n            \t} else if (b == -1 ||!isPrintableChar(b)) {\n            \t\treturn minus? -n : n;\n            \t} else {\n            \t\tthrow new NumberFormatException();\n            \t}\n            \tb = readByte();\n            }\n        }\n        public int nextInt() {\n            long nl = nextLong();\n            if (nl < Integer.MIN_VALUE ||"}
{"src_uid": "1805771e194d323edacf2526a1eb6768", "id": 106, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '4\\r\\n2S 2S 2C 2C\\r\\n', 'output': ['YES']}, {'input': '2\\r\\n3S 2C\\r\\n', 'output': ['NO']}, {'input': '5\\r\\n2S 2S 4S 3S 2S\\r\\n', 'output': ['YES']}, {'input': '5\\r\\n5S 5S 7S 4S 3H\\r\\n', 'output': ['NO']}, {'input': '5\\r\\n7S 7S 4S 8H 4H\\r\\n', 'output': ['NO']}, {'input': '5\\r\\n4S 2H 3S 3S 2H\\r\\n', 'output': ['NO']}, {'input': '52\\r\\n3H 6S 3S 2S 2S 3S 4S 3H 2C 4S 3C 3S 2S 2C 2S 6S 4C 3S 5C 3S 2S 4S 3S 5S 2H 2S 4H 3S 3S 4H 4S 2C 2H 2S 4S 6D 4C 4H 2H 4S 3H 6D 6S 3C 3C 4H 5S 3S 3S 2H 2S 4C\\r\\n', 'output': ['NO']}, {'input': '52\\r\\n2S 4S 3S 2S 4S 3S 4S 4S 8S 3S 2S 2S 5S 3S 3S 2S 3S 5S 4S 4S 2S 2S 4S 4S 6S 2S 5S 2S 5S 2S 2S 2S 4S 2S 5S 5S 2S 6S 8S 6S 2S 2S TS 2H 4S 4S 3S 3S 2S 2S 7S 3S\\r\\n', 'output': ['YES']}, {'input': '5\\r\\nAD 5S KH AH AS\\r\\n', 'output': ['YES']}, {'input': '50\\r\\nTS 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D\\r\\n', 'output': ['NO']}, {'input': '5\\r\\nAD 5S KH AH KS\\r\\n', 'output': ['YES']}, {'input': '5\\r\\nAD 5S KH AH JS\\r\\n', 'output': ['NO']}, {'input': '20\\r\\nJD 5H 3H 9H 2S 5S 5H QS 8D 7H TS 9S 4H 5S 9H 4H 3S KS KS JS\\r\\n', 'output': ['NO']}, {'input': '21\\r\\nJS 5S 9S KH 9D JH 3S KH QH 5D TC 3S 5S 4H 4H 5S 7S AH 4S 3S 6S\\r\\n', 'output': ['NO']}, {'input': '51\\r\\nJD 8D QD TC JD AD JD 5D 5S QC TC 4H 8S 7D QD QD 3H TH 8D 9D 5D 4D 6D 7D 9C 2D AD 6D 6H AD 5D 3D AC AC JC 5D 3D KC 7C AD 4D 8C QD QH 6D 9C 2D 6D 3C KC TD\\r\\n', 'output': ['NO']}, {'input': '52\\r\\nKD KD 8H 9C 7C 8D JD 3D 9C KD 6D 9C QD TC 7D TD 3C KD 6D 2D TC 6D AC QD 2C 3D 8D KH AD QD 2C 6C JH 6D 8D 2C 7D QD 7C 7H TD 4D 2D 8D TC 5D 8D KD 7C QC TD 5D\\r\\n', 'output': ['NO']}, {'input': '52\\r\\nJS 7S 3S 2S 7S TS 4S 6S 5H TS 4S TH 6H 9S TH TH 4S 4H 2H TH TC TH TS TS 4S TS 2S TH TH TS 6S TS TS 3S TS TH 5H TS TS 5S 7H 2H TS 6S 6H 2H TS TH 2S 4S 4H 4S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n8D AD AC 9H AS AD KH AD QH AH AC AS 8H KS TD AH KS AD AD AS KD AD AS AH AS AD AD AH AC AD KC JD 8D AC 9D AC AD QD KC AD JS JC AD TD KC JD TD 8D KS KC KD KD\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nAD JD JD TD AD 8D QD AH TC QH AD TD 2D AD QD 4D 3C 3D 3H 6D 8C 3C 3S 6C QC KD 2D 4S TD 5D 3S 3S 3H 3S KH 3H 3D 3H JH JH QH 9H TH 3H KH 7H 3H TH AH 3S 4H 3H\\r\\n', 'output': ['YES']}, {'input': '10\\r\\n4C 8C 8D JC 8C 5S 8H 8C 8S 8H\\r\\n', 'output': ['YES']}, {'input': '10\\r\\nQH QS QS JH QS 6S 7H QH QH QS\\r\\n', 'output': ['YES']}, {'input': '10\\r\\nKS 4S KS KH TS TS KC KH KH KS\\r\\n', 'output': ['YES']}, {'input': '11\\r\\nJD 5D JC JH 6C 6D JH 6S 6S JS JD\\r\\n', 'output': ['YES']}, {'input': '11\\r\\nJS KH JC JS 9S 9H 6H 7H JH AS AH\\r\\n', 'output': ['YES']}, {'input': '11\\r\\n3S 2H TS 9D 9S 2S 2S 9S 3C 2S 2C\\r\\n', 'output': ['YES']}, {'input': '12\\r\\n9S TS QS KD KS AS QS KS 6S AD AD AS\\r\\n', 'output': ['YES']}, {'input': '12\\r\\nJC 8C AC TH AH AC TC AS AH TC AS AS\\r\\n', 'output': ['YES']}, {'input': '12\\r\\n6S 6S 3S 4C 2S 2S 7S 2C 2S 4S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '51\\r\\n7S 4C 2S JS 5C 2H 2C 3C 4C QC 2C 2C 2S 4S 2H 2H 4C 2C 6C 2C 2C JC 8C QC JC 8C TC 7H 4C 8S QH 4H 8C 3H 4S 3H 7H 8S 4C 4S 4S 4S 2H 4H QH 3H 3H 3H 4H 8C 3C\\r\\n', 'output': ['YES']}, {'input': '51\\r\\n2S 2H 2C 2C 3H 2H 7S 2D 6H 2H 2C 2H 2H 5S 2S 3C 2C 2H 2S 2C 5C JC 2S 4C 3C 2C 5C 4C 4D 8C 5C 6C 7C 4C 4C 6S TS 3C TH 4C 4C TS 7C TC 3C TS TC 2S TH TC 2C\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nAC 4C TC 9C TH AD 3C TC 4S 5C TD QD TH 4C 4D 3H TC 4S TH 8H 7H 4D TH QD 4D 8H QH 4D 4H 8D 4H 4D 8H 3D 9D 8H 9D 9C 9H 8D TD 3H 5H 6D QD 9H 6D KD 9H 6D 2D 9D\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nJH 8H 9D TH 5H 9H 5H JH 5H 8H 9D QH 9H 6C AD AC 9C AD AH 9C AC 5C 5C AC 5H 5C 8C 5D KD 5H 5C 8D 5D 8D KD 5D QD 8S 8C 8C 8H 8C JD 8C 8D 8C 8H 9C JD 8D 8D JD\\r\\n', 'output': ['NO']}, {'input': '52\\r\\n9D AD 9C 6C 9D 7D 6D TS 6D 6D 3D QH 9D 9D 9H 9D 9D 2H 5D JH 9H 5C JC TC 9D 9C 2C 9C 9D 4H 4D AC 9D 4C AC 8C 9C QC 8C 9D 7D QC 9H 9D 2C 9D 9C 3C 7H 9C TC 9H\\r\\n', 'output': ['NO']}, {'input': '52\\r\\n9D 5D TC 4D 7D 3D JD 5C 7D TD 5D TD 6H TD TD AD 6D AD TD 2C TD TS TD TD 2H 7D TD QD 2D 2H AC 9D 2D 2C QC AD 2D 4C JC 2D AD 5D 5C AC AD 6C 8D 4D 7C 8C JC AC\\r\\n', 'output': ['NO']}, {'input': '51\\r\\nAH 6S 2S 6H 6S 4S 3S 9S 5S 4S 2S 9S 2S 3S 2S JS 2S 2S 9H 2S 9S 2S 3S 9S 4S 4S 9S 9S 2S 2S 3S 2S 6H 7S 3S 3H 6S 3S 2H 6S 3S 6H 7H 6S 6S 4S 4H 5H 4H 4H 6H\\r\\n', 'output': ['YES']}, {'input': '51\\r\\nJC 6S 2S 6H 6S 4S 3S 9S 5S 4S 2S 9S 2S 3S 2S JS 2S 2S 9H 2S 9S 2S 3S 9S 4S 4S 9S 9S 2S 2S 3S 2S 6H 7S 3S 3H 6S 3S 2H 6S 3S 6H 7H 6S 6S 4S 4H 5H 4H 4H 6H\\r\\n', 'output': ['YES']}, {'input': '51\\r\\n9C 6S 2S 6H 6S 4S 3S 9S 5S 4S 2S 9S 2S 3S 2S JS 2S 2S 9H 2S 9S 2S 3S 9S 4S 4S 9S 9S 2S 2S 3S 2S 6H 7S 3S 3H 6S 3S 2H 6S 3S 6H 7H 6S 6S 4S 4H 5H 4H 4H 6H\\r\\n', 'output': ['YES']}, {'input': '51\\r\\n7C 6S 2S 6H 6S 4S 3S 9S 5S 4S 2S 9S 2S 3S 2S JS 2S 2S 9H 2S 9S 2S 3S 9S 4S 4S 9S 9S 2S 2S 3S 2S 6H 7S 3S 3H 6S 3S 2H 6S 3S 6H 7H 6S 6S 4S 4H 5H 4H 4H 6H\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n2D 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n3D 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nTD 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nJD 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nAH 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n7H 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n2D 5S 4S 4S 4C 2S 4H 4S 4H 4C 3S 4S 4S 4H 5S 4H 4H 5S 2S 4S 4S 2S 4S 4C 4S 4S 9S 4H 4S 3S 3H 4S 4S 7S 3S 3S 2H 3S 7S 4S 2S 7S 2S 2S 3S 3C 2S 3S 3S 2S 5S 3S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nAC 5S 4S 4S 4C 2S 4H 4S 4H 4C 3S 4S 4S 4H 5S 4H 4H 5S 2S 4S 4S 2S 4S 4C 4S 4S 9S 4H 4S 3S 3H 4S 4S 7S 3S 3S 2H 3S 7S 4S 2S 7S 2S 2S 3S 3C 2S 3S 3S 2S 5S 3S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n7D 5S 4S 4S 4C 2S 4H 4S 4H 4C 3S 4S 4S 4H 5S 4H 4H 5S 2S 4S 4S 2S 4S 4C 4S 4S 9S 4H 4S 3S 3H 4S 4S 7S 3S 3S 2H 3S 7S 4S 2S 7S 2S 2S 3S 3C 2S 3S 3S 2S 5S 3S\\r\\n', 'output': ['YES']}, {'input': '1\\r\\n3C\\r\\n', 'output': ['YES']}, {'input': '4\\r\\n2C 3D 4D 5C\\r\\n', 'output': ['NO']}]", "source_code": "import java.util.*;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tString[] cards = new String[n];\n\t\tfor(int i = 0 ; i < n ; i++)\n\t\t\tcards[i] = sc.next();\n\t\tint score = 0;\n\t\tint temp;\n\t\twhile(n!= 1){\n\t\t\tfor(int i = 0 ; i < n-2 ; i++){\n\t\t\t\tif(cards[i].equals(\"2S\") || cards[i].equals(\"3S\"))\n\t\t\t\t\tcards[i] = \"0\";\n\t\t\t\tif(cards[i+1].equals(\"2S\") || cards[i+1].equals(\"3S\"))\n\t\t\t\t\tcards[i+1] = \"0\";\n\t\t\t\tif(cards[i].equals(cards[i+1]))\n\t\t\t\t\tcards[i+2] = \"0\";\n\t\t\t\t\n\t\t\t}\n\t\t\ttemp = n;\n\t\t\tfor(int i = 0 ; i < n ; i++){\n\t\t\t\tif(cards[i].equals(\"0\")){\n\t\t\t\t\ttemp = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcards[temp] = cards[n-1];\n\t\t\tcards[n-1] = \"0\";\n\t\t\tn--;\n\t\t\t\n\t\t}\n\t\t\n\t\tif(cards[0].equals(\"2S\") || cards[0].equals(\"3S\"))\n\t\t\tcards[0] = \"0\";\n\t\tfor(int i = 0 ; i < cards[0].length()-1 ; i++){\n\t\t\tif(cards[0].charAt(i) == 'A')\n\t\t\t\tscore += 1;\n\t\t\telse if(cards[0].charAt(i) == 'K')\n\t\t\t\tscore += 2;\n\t\t\telse if(cards[0].charAt(i) == 'Q')\n\t\t\t\tscore += 3;\n\t\t\telse if(cards[0].charAt(i) == 'J')\n\t\t\t\tscore += 4;\n\t\t\telse if(cards[0].charAt(i) == 'T')\n\t\t\t\tscore += 5;\n\t\t\telse if(cards[0].charAt(i) == '9')\n\t\t\t\tscore += 6;\n\t\t\telse if(cards[0].charAt(i) == '8')\n\t\t\t\tscore += 7;\n\t\t\telse if(cards[0].charAt(i) == '7')\n\t\t\t\tscore += 8;\n\t\t\telse if(cards[0].charAt(i) == '6')\n\t\t\t\tscore += 9;\n\t\t\telse if(cards[0].charAt(i) == '5')\n\t\t\t\tscore += 10;\n\t\t\telse if(cards[0].charAt(i) == '4')\n\t\t\t\tscore += 11;\n\t\t\telse if(cards[0].charAt(i) == '3')\n\t\t\t\tscore += 12;\n\t\t\telse if(cards[0].charAt(i) == '2')\n\t\t\t\tscore += 13;\n\t\t}\n\t\tfor(int i = 0 ; i < 14 ; i++){\n\t\t\tif(score == i*2)\n\t\t\t\tSystem.out.println(\"YES\");\n\t\t}\n\t\tif(score!= 26 && score!= 50){\n\t\t\tSystem.out.println(\"NO\");\n\t\t}\n\t\t\n\t}\n\n}\n"}
{"src_uid": "1805771e194d323edacf2526a1eb6768", "id": 106, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '4\\r\\n2S 2S 2C 2C\\r\\n', 'output': ['YES']}, {'input': '2\\r\\n3S 2C\\r\\n', 'output': ['NO']}, {'input': '5\\r\\n2S 2S 4S 3S 2S\\r\\n', 'output': ['YES']}, {'input': '5\\r\\n5S 5S 7S 4S 3H\\r\\n', 'output': ['NO']}, {'input': '5\\r\\n7S 7S 4S 8H 4H\\r\\n', 'output': ['NO']}, {'input': '5\\r\\n4S 2H 3S 3S 2H\\r\\n', 'output': ['NO']}, {'input': '52\\r\\n3H 6S 3S 2S 2S 3S 4S 3H 2C 4S 3C 3S 2S 2C 2S 6S 4C 3S 5C 3S 2S 4S 3S 5S 2H 2S 4H 3S 3S 4H 4S 2C 2H 2S 4S 6D 4C 4H 2H 4S 3H 6D 6S 3C 3C 4H 5S 3S 3S 2H 2S 4C\\r\\n', 'output': ['NO']}, {'input': '52\\r\\n2S 4S 3S 2S 4S 3S 4S 4S 8S 3S 2S 2S 5S 3S 3S 2S 3S 5S 4S 4S 2S 2S 4S 4S 6S 2S 5S 2S 5S 2S 2S 2S 4S 2S 5S 5S 2S 6S 8S 6S 2S 2S TS 2H 4S 4S 3S 3S 2S 2S 7S 3S\\r\\n', 'output': ['YES']}, {'input': '5\\r\\nAD 5S KH AH AS\\r\\n', 'output': ['YES']}, {'input': '50\\r\\nTS 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D\\r\\n', 'output': ['NO']}, {'input': '5\\r\\nAD 5S KH AH KS\\r\\n', 'output': ['YES']}, {'input': '5\\r\\nAD 5S KH AH JS\\r\\n', 'output': ['NO']}, {'input': '20\\r\\nJD 5H 3H 9H 2S 5S 5H QS 8D 7H TS 9S 4H 5S 9H 4H 3S KS KS JS\\r\\n', 'output': ['NO']}, {'input': '21\\r\\nJS 5S 9S KH 9D JH 3S KH QH 5D TC 3S 5S 4H 4H 5S 7S AH 4S 3S 6S\\r\\n', 'output': ['NO']}, {'input': '51\\r\\nJD 8D QD TC JD AD JD 5D 5S QC TC 4H 8S 7D QD QD 3H TH 8D 9D 5D 4D 6D 7D 9C 2D AD 6D 6H AD 5D 3D AC AC JC 5D 3D KC 7C AD 4D 8C QD QH 6D 9C 2D 6D 3C KC TD\\r\\n', 'output': ['NO']}, {'input': '52\\r\\nKD KD 8H 9C 7C 8D JD 3D 9C KD 6D 9C QD TC 7D TD 3C KD 6D 2D TC 6D AC QD 2C 3D 8D KH AD QD 2C 6C JH 6D 8D 2C 7D QD 7C 7H TD 4D 2D 8D TC 5D 8D KD 7C QC TD 5D\\r\\n', 'output': ['NO']}, {'input': '52\\r\\nJS 7S 3S 2S 7S TS 4S 6S 5H TS 4S TH 6H 9S TH TH 4S 4H 2H TH TC TH TS TS 4S TS 2S TH TH TS 6S TS TS 3S TS TH 5H TS TS 5S 7H 2H TS 6S 6H 2H TS TH 2S 4S 4H 4S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n8D AD AC 9H AS AD KH AD QH AH AC AS 8H KS TD AH KS AD AD AS KD AD AS AH AS AD AD AH AC AD KC JD 8D AC 9D AC AD QD KC AD JS JC AD TD KC JD TD 8D KS KC KD KD\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nAD JD JD TD AD 8D QD AH TC QH AD TD 2D AD QD 4D 3C 3D 3H 6D 8C 3C 3S 6C QC KD 2D 4S TD 5D 3S 3S 3H 3S KH 3H 3D 3H JH JH QH 9H TH 3H KH 7H 3H TH AH 3S 4H 3H\\r\\n', 'output': ['YES']}, {'input': '10\\r\\n4C 8C 8D JC 8C 5S 8H 8C 8S 8H\\r\\n', 'output': ['YES']}, {'input': '10\\r\\nQH QS QS JH QS 6S 7H QH QH QS\\r\\n', 'output': ['YES']}, {'input': '10\\r\\nKS 4S KS KH TS TS KC KH KH KS\\r\\n', 'output': ['YES']}, {'input': '11\\r\\nJD 5D JC JH 6C 6D JH 6S 6S JS JD\\r\\n', 'output': ['YES']}, {'input': '11\\r\\nJS KH JC JS 9S 9H 6H 7H JH AS AH\\r\\n', 'output': ['YES']}, {'input': '11\\r\\n3S 2H TS 9D 9S 2S 2S 9S 3C 2S 2C\\r\\n', 'output': ['YES']}, {'input': '12\\r\\n9S TS QS KD KS AS QS KS 6S AD AD AS\\r\\n', 'output': ['YES']}, {'input': '12\\r\\nJC 8C AC TH AH AC TC AS AH TC AS AS\\r\\n', 'output': ['YES']}, {'input': '12\\r\\n6S 6S 3S 4C 2S 2S 7S 2C 2S 4S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '51\\r\\n7S 4C 2S JS 5C 2H 2C 3C 4C QC 2C 2C 2S 4S 2H 2H 4C 2C 6C 2C 2C JC 8C QC JC 8C TC 7H 4C 8S QH 4H 8C 3H 4S 3H 7H 8S 4C 4S 4S 4S 2H 4H QH 3H 3H 3H 4H 8C 3C\\r\\n', 'output': ['YES']}, {'input': '51\\r\\n2S 2H 2C 2C 3H 2H 7S 2D 6H 2H 2C 2H 2H 5S 2S 3C 2C 2H 2S 2C 5C JC 2S 4C 3C 2C 5C 4C 4D 8C 5C 6C 7C 4C 4C 6S TS 3C TH 4C 4C TS 7C TC 3C TS TC 2S TH TC 2C\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nAC 4C TC 9C TH AD 3C TC 4S 5C TD QD TH 4C 4D 3H TC 4S TH 8H 7H 4D TH QD 4D 8H QH 4D 4H 8D 4H 4D 8H 3D 9D 8H 9D 9C 9H 8D TD 3H 5H 6D QD 9H 6D KD 9H 6D 2D 9D\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nJH 8H 9D TH 5H 9H 5H JH 5H 8H 9D QH 9H 6C AD AC 9C AD AH 9C AC 5C 5C AC 5H 5C 8C 5D KD 5H 5C 8D 5D 8D KD 5D QD 8S 8C 8C 8H 8C JD 8C 8D 8C 8H 9C JD 8D 8D JD\\r\\n', 'output': ['NO']}, {'input': '52\\r\\n9D AD 9C 6C 9D 7D 6D TS 6D 6D 3D QH 9D 9D 9H 9D 9D 2H 5D JH 9H 5C JC TC 9D 9C 2C 9C 9D 4H 4D AC 9D 4C AC 8C 9C QC 8C 9D 7D QC 9H 9D 2C 9D 9C 3C 7H 9C TC 9H\\r\\n', 'output': ['NO']}, {'input': '52\\r\\n9D 5D TC 4D 7D 3D JD 5C 7D TD 5D TD 6H TD TD AD 6D AD TD 2C TD TS TD TD 2H 7D TD QD 2D 2H AC 9D 2D 2C QC AD 2D 4C JC 2D AD 5D 5C AC AD 6C 8D 4D 7C 8C JC AC\\r\\n', 'output': ['NO']}, {'input': '51\\r\\nAH 6S 2S 6H 6S 4S 3S 9S 5S 4S 2S 9S 2S 3S 2S JS 2S 2S 9H 2S 9S 2S 3S 9S 4S 4S 9S 9S 2S 2S 3S 2S 6H 7S 3S 3H 6S 3S 2H 6S 3S 6H 7H 6S 6S 4S 4H 5H 4H 4H 6H\\r\\n', 'output': ['YES']}, {'input': '51\\r\\nJC 6S 2S 6H 6S 4S 3S 9S 5S 4S 2S 9S 2S 3S 2S JS 2S 2S 9H 2S 9S 2S 3S 9S 4S 4S 9S 9S 2S 2S 3S 2S 6H 7S 3S 3H 6S 3S 2H 6S 3S 6H 7H 6S 6S 4S 4H 5H 4H 4H 6H\\r\\n', 'output': ['YES']}, {'input': '51\\r\\n9C 6S 2S 6H 6S 4S 3S 9S 5S 4S 2S 9S 2S 3S 2S JS 2S 2S 9H 2S 9S 2S 3S 9S 4S 4S 9S 9S 2S 2S 3S 2S 6H 7S 3S 3H 6S 3S 2H 6S 3S 6H 7H 6S 6S 4S 4H 5H 4H 4H 6H\\r\\n', 'output': ['YES']}, {'input': '51\\r\\n7C 6S 2S 6H 6S 4S 3S 9S 5S 4S 2S 9S 2S 3S 2S JS 2S 2S 9H 2S 9S 2S 3S 9S 4S 4S 9S 9S 2S 2S 3S 2S 6H 7S 3S 3H 6S 3S 2H 6S 3S 6H 7H 6S 6S 4S 4H 5H 4H 4H 6H\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n2D 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n3D 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nTD 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nJD 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nAH 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n7H 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n2D 5S 4S 4S 4C 2S 4H 4S 4H 4C 3S 4S 4S 4H 5S 4H 4H 5S 2S 4S 4S 2S 4S 4C 4S 4S 9S 4H 4S 3S 3H 4S 4S 7S 3S 3S 2H 3S 7S 4S 2S 7S 2S 2S 3S 3C 2S 3S 3S 2S 5S 3S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nAC 5S 4S 4S 4C 2S 4H 4S 4H 4C 3S 4S 4S 4H 5S 4H 4H 5S 2S 4S 4S 2S 4S 4C 4S 4S 9S 4H 4S 3S 3H 4S 4S 7S 3S 3S 2H 3S 7S 4S 2S 7S 2S 2S 3S 3C 2S 3S 3S 2S 5S 3S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n7D 5S 4S 4S 4C 2S 4H 4S 4H 4C 3S 4S 4S 4H 5S 4H 4H 5S 2S 4S 4S 2S 4S 4C 4S 4S 9S 4H 4S 3S 3H 4S 4S 7S 3S 3S 2H 3S 7S 4S 2S 7S 2S 2S 3S 3C 2S 3S 3S 2S 5S 3S\\r\\n', 'output': ['YES']}, {'input': '1\\r\\n3C\\r\\n', 'output': ['YES']}, {'input': '4\\r\\n2C 3D 4D 5C\\r\\n', 'output': ['NO']}]", "source_code": "import java.util.*;\n\npublic class Main\n{\n\tpublic static void main (String[] args) \n\t{\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt(), a = 0;\n\t\tString[] p = new String[n], s = new String[5];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tp[i] = in.next();\n\t\twhile (n > 1)\n\t\t{\n\t\t\tfor (int j = 0; j < 4; j++)\n\t\t\t\ts[j] = p[0];\n\t\t\ts[4] = \"\";\n\t\t\ta = 0;\n\t\t\tfor (int j = 1; j < n - 1; j++)\n\t\t\t{\n\t\t\t\tif (s[1].compareTo(p[j]) < 0)\n\t\t\t\t\ts[1] = p[j];\n\t\t\t\telse if (s[3].compareTo(p[j]) < 0)\n\t\t\t\t\ts[3] = p[j];\n\t\t\t\telse if (s[0].compareTo(p[j]) < 0)\n\t\t\t\t{\n\t\t\t\t\ts[4] = s[0];\n\t\t\t\t\ts[0] = p[j];\n\t\t\t\t\ta = 1;\n\t\t\t\t}\n\t\t\t\telse if (s[2].compareTo(p[j]) < 0)\n\t\t\t\t\ts[2] = p[j];\n\t\t\t}\n\t\t\tfor (int j = 0; j < 3; j++)\n\t\t\t\tif (s[j + 1].compareTo(s[j]) < 0)\n\t\t\t\t{\n\t\t\t\t\tfor (int z = 0; z < 4; z++)\n\t\t\t\t\t\tp[z] = s[z];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tfor (int j = n - 1; j > 0; j--)\n\t\t\t\tif (p[j].compareTo(p[j - 1]) < 0)\n\t\t\t\t{\n\t\t\t\t\tif (a == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tp[j] = s[3];\n\t\t\t\t\t\tp[j - 2] = s[0];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tp[j] = s[j - 1];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tn--;\n\t\t\ta = 0;\n\t\t}\n\t\tif (p[0].compareTo(\"\") == 0)\n\t\t\tSystem.out.println(\"YES\");\n\t\telse\n\t\t\tSystem.out.println(\"NO\");\n\t}\n}"}
{"src_uid": "1805771e194d323edacf2526a1eb6768", "id": 106, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '4\\r\\n2S 2S 2C 2C\\r\\n', 'output': ['YES']}, {'input': '2\\r\\n3S 2C\\r\\n', 'output': ['NO']}, {'input': '5\\r\\n2S 2S 4S 3S 2S\\r\\n', 'output': ['YES']}, {'input': '5\\r\\n5S 5S 7S 4S 3H\\r\\n', 'output': ['NO']}, {'input': '5\\r\\n7S 7S 4S 8H 4H\\r\\n', 'output': ['NO']}, {'input': '5\\r\\n4S 2H 3S 3S 2H\\r\\n', 'output': ['NO']}, {'input': '52\\r\\n3H 6S 3S 2S 2S 3S 4S 3H 2C 4S 3C 3S 2S 2C 2S 6S 4C 3S 5C 3S 2S 4S 3S 5S 2H 2S 4H 3S 3S 4H 4S 2C 2H 2S 4S 6D 4C 4H 2H 4S 3H 6D 6S 3C 3C 4H 5S 3S 3S 2H 2S 4C\\r\\n', 'output': ['NO']}, {'input': '52\\r\\n2S 4S 3S 2S 4S 3S 4S 4S 8S 3S 2S 2S 5S 3S 3S 2S 3S 5S 4S 4S 2S 2S 4S 4S 6S 2S 5S 2S 5S 2S 2S 2S 4S 2S 5S 5S 2S 6S 8S 6S 2S 2S TS 2H 4S 4S 3S 3S 2S 2S 7S 3S\\r\\n', 'output': ['YES']}, {'input': '5\\r\\nAD 5S KH AH AS\\r\\n', 'output': ['YES']}, {'input': '50\\r\\nTS 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D\\r\\n', 'output': ['NO']}, {'input': '5\\r\\nAD 5S KH AH KS\\r\\n', 'output': ['YES']}, {'input': '5\\r\\nAD 5S KH AH JS\\r\\n', 'output': ['NO']}, {'input': '20\\r\\nJD 5H 3H 9H 2S 5S 5H QS 8D 7H TS 9S 4H 5S 9H 4H 3S KS KS JS\\r\\n', 'output': ['NO']}, {'input': '21\\r\\nJS 5S 9S KH 9D JH 3S KH QH 5D TC 3S 5S 4H 4H 5S 7S AH 4S 3S 6S\\r\\n', 'output': ['NO']}, {'input': '51\\r\\nJD 8D QD TC JD AD JD 5D 5S QC TC 4H 8S 7D QD QD 3H TH 8D 9D 5D 4D 6D 7D 9C 2D AD 6D 6H AD 5D 3D AC AC JC 5D 3D KC 7C AD 4D 8C QD QH 6D 9C 2D 6D 3C KC TD\\r\\n', 'output': ['NO']}, {'input': '52\\r\\nKD KD 8H 9C 7C 8D JD 3D 9C KD 6D 9C QD TC 7D TD 3C KD 6D 2D TC 6D AC QD 2C 3D 8D KH AD QD 2C 6C JH 6D 8D 2C 7D QD 7C 7H TD 4D 2D 8D TC 5D 8D KD 7C QC TD 5D\\r\\n', 'output': ['NO']}, {'input': '52\\r\\nJS 7S 3S 2S 7S TS 4S 6S 5H TS 4S TH 6H 9S TH TH 4S 4H 2H TH TC TH TS TS 4S TS 2S TH TH TS 6S TS TS 3S TS TH 5H TS TS 5S 7H 2H TS 6S 6H 2H TS TH 2S 4S 4H 4S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n8D AD AC 9H AS AD KH AD QH AH AC AS 8H KS TD AH KS AD AD AS KD AD AS AH AS AD AD AH AC AD KC JD 8D AC 9D AC AD QD KC AD JS JC AD TD KC JD TD 8D KS KC KD KD\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nAD JD JD TD AD 8D QD AH TC QH AD TD 2D AD QD 4D 3C 3D 3H 6D 8C 3C 3S 6C QC KD 2D 4S TD 5D 3S 3S 3H 3S KH 3H 3D 3H JH JH QH 9H TH 3H KH 7H 3H TH AH 3S 4H 3H\\r\\n', 'output': ['YES']}, {'input': '10\\r\\n4C 8C 8D JC 8C 5S 8H 8C 8S 8H\\r\\n', 'output': ['YES']}, {'input': '10\\r\\nQH QS QS JH QS 6S 7H QH QH QS\\r\\n', 'output': ['YES']}, {'input': '10\\r\\nKS 4S KS KH TS TS KC KH KH KS\\r\\n', 'output': ['YES']}, {'input': '11\\r\\nJD 5D JC JH 6C 6D JH 6S 6S JS JD\\r\\n', 'output': ['YES']}, {'input': '11\\r\\nJS KH JC JS 9S 9H 6H 7H JH AS AH\\r\\n', 'output': ['YES']}, {'input': '11\\r\\n3S 2H TS 9D 9S 2S 2S 9S 3C 2S 2C\\r\\n', 'output': ['YES']}, {'input': '12\\r\\n9S TS QS KD KS AS QS KS 6S AD AD AS\\r\\n', 'output': ['YES']}, {'input': '12\\r\\nJC 8C AC TH AH AC TC AS AH TC AS AS\\r\\n', 'output': ['YES']}, {'input': '12\\r\\n6S 6S 3S 4C 2S 2S 7S 2C 2S 4S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '51\\r\\n7S 4C 2S JS 5C 2H 2C 3C 4C QC 2C 2C 2S 4S 2H 2H 4C 2C 6C 2C 2C JC 8C QC JC 8C TC 7H 4C 8S QH 4H 8C 3H 4S 3H 7H 8S 4C 4S 4S 4S 2H 4H QH 3H 3H 3H 4H 8C 3C\\r\\n', 'output': ['YES']}, {'input': '51\\r\\n2S 2H 2C 2C 3H 2H 7S 2D 6H 2H 2C 2H 2H 5S 2S 3C 2C 2H 2S 2C 5C JC 2S 4C 3C 2C 5C 4C 4D 8C 5C 6C 7C 4C 4C 6S TS 3C TH 4C 4C TS 7C TC 3C TS TC 2S TH TC 2C\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nAC 4C TC 9C TH AD 3C TC 4S 5C TD QD TH 4C 4D 3H TC 4S TH 8H 7H 4D TH QD 4D 8H QH 4D 4H 8D 4H 4D 8H 3D 9D 8H 9D 9C 9H 8D TD 3H 5H 6D QD 9H 6D KD 9H 6D 2D 9D\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nJH 8H 9D TH 5H 9H 5H JH 5H 8H 9D QH 9H 6C AD AC 9C AD AH 9C AC 5C 5C AC 5H 5C 8C 5D KD 5H 5C 8D 5D 8D KD 5D QD 8S 8C 8C 8H 8C JD 8C 8D 8C 8H 9C JD 8D 8D JD\\r\\n', 'output': ['NO']}, {'input': '52\\r\\n9D AD 9C 6C 9D 7D 6D TS 6D 6D 3D QH 9D 9D 9H 9D 9D 2H 5D JH 9H 5C JC TC 9D 9C 2C 9C 9D 4H 4D AC 9D 4C AC 8C 9C QC 8C 9D 7D QC 9H 9D 2C 9D 9C 3C 7H 9C TC 9H\\r\\n', 'output': ['NO']}, {'input': '52\\r\\n9D 5D TC 4D 7D 3D JD 5C 7D TD 5D TD 6H TD TD AD 6D AD TD 2C TD TS TD TD 2H 7D TD QD 2D 2H AC 9D 2D 2C QC AD 2D 4C JC 2D AD 5D 5C AC AD 6C 8D 4D 7C 8C JC AC\\r\\n', 'output': ['NO']}, {'input': '51\\r\\nAH 6S 2S 6H 6S 4S 3S 9S 5S 4S 2S 9S 2S 3S 2S JS 2S 2S 9H 2S 9S 2S 3S 9S 4S 4S 9S 9S 2S 2S 3S 2S 6H 7S 3S 3H 6S 3S 2H 6S 3S 6H 7H 6S 6S 4S 4H 5H 4H 4H 6H\\r\\n', 'output': ['YES']}, {'input': '51\\r\\nJC 6S 2S 6H 6S 4S 3S 9S 5S 4S 2S 9S 2S 3S 2S JS 2S 2S 9H 2S 9S 2S 3S 9S 4S 4S 9S 9S 2S 2S 3S 2S 6H 7S 3S 3H 6S 3S 2H 6S 3S 6H 7H 6S 6S 4S 4H 5H 4H 4H 6H\\r\\n', 'output': ['YES']}, {'input': '51\\r\\n9C 6S 2S 6H 6S 4S 3S 9S 5S 4S 2S 9S 2S 3S 2S JS 2S 2S 9H 2S 9S 2S 3S 9S 4S 4S 9S 9S 2S 2S 3S 2S 6H 7S 3S 3H 6S 3S 2H 6S 3S 6H 7H 6S 6S 4S 4H 5H 4H 4H 6H\\r\\n', 'output': ['YES']}, {'input': '51\\r\\n7C 6S 2S 6H 6S 4S 3S 9S 5S 4S 2S 9S 2S 3S 2S JS 2S 2S 9H 2S 9S 2S 3S 9S 4S 4S 9S 9S 2S 2S 3S 2S 6H 7S 3S 3H 6S 3S 2H 6S 3S 6H 7H 6S 6S 4S 4H 5H 4H 4H 6H\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n2D 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n3D 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nTD 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nJD 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nAH 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n7H 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n2D 5S 4S 4S 4C 2S 4H 4S 4H 4C 3S 4S 4S 4H 5S 4H 4H 5S 2S 4S 4S 2S 4S 4C 4S 4S 9S 4H 4S 3S 3H 4S 4S 7S 3S 3S 2H 3S 7S 4S 2S 7S 2S 2S 3S 3C 2S 3S 3S 2S 5S 3S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nAC 5S 4S 4S 4C 2S 4H 4S 4H 4C 3S 4S 4S 4H 5S 4H 4H 5S 2S 4S 4S 2S 4S 4C 4S 4S 9S 4H 4S 3S 3H 4S 4S 7S 3S 3S 2H 3S 7S 4S 2S 7S 2S 2S 3S 3C 2S 3S 3S 2S 5S 3S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n7D 5S 4S 4S 4C 2S 4H 4S 4H 4C 3S 4S 4S 4H 5S 4H 4H 5S 2S 4S 4S 2S 4S 4C 4S 4S 9S 4H 4S 3S 3H 4S 4S 7S 3S 3S 2H 3S 7S 4S 2S 7S 2S 2S 3S 3C 2S 3S 3S 2S 5S 3S\\r\\n', 'output': ['YES']}, {'input': '1\\r\\n3C\\r\\n', 'output': ['YES']}, {'input': '4\\r\\n2C 3D 4D 5C\\r\\n', 'output': ['NO']}]", "source_code": "import java.util.*;\nimport java.io.*;\n\npublic class p2 implements Runnable {\n\t// static variables\n\tprivate static final Scanner in = new Scanner(System.in);\n\t// instance variables\n\n\tprivate void solve() throws IOException {\n\t\tint n = in.nextInt();\n\t\tString[] s = new String[n];\n\t\tint[] rank = new int[n];\n\t\tint[] suit = new int[n];\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ts[i] = in.next();\n\t\t\trank[i] = s[i].charAt(0);\n\t\t\tsuit[i] = s[i].charAt(1);\n\t\t}\n\n\t\tString result = \"NO\";\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tint rMax = 0;\n\t\t\tint[] temp = rank.clone();\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (temp[j] > rMax) {\n\t\t\t\t\trMax = temp[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tint ind = 0;\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (rank[j] == rMax) {\n\t\t\t\t\tind = j;\n\t\t\t\t\trank[j] = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (rank[j]!= 0) {\n\t\t\t\t\tif (temp[j] == temp[ind]) {\n\t\t\t\t\t\tif (suit[j] == suit[ind]) {\n\t\t\t\t\t\t\tresult = \"YES\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(result);\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\ttry (Input in = getInput()) {\n\t\t\tsolve();\n\t\t}\n\t}\n\n\tprivate static Input getInput() throws FileNotFoundException {\n\t\t// return new StandardInput();\n\t\treturn new FileInput(new File(\"input.txt\"));\n\t}\n\n\tprivate interface Input extends Closeable {\n\t\tString next() throws IOException;\n\t}\n\n\tprivate static class StandardInput implements Input {\n\t\tprivate final Scanner sc;\n\t\tStandardInput() {\n\t\t\tthis.sc = in;\n\t\t}\n\t\t@Override\n\t\tpublic void close() {}\n\t\t@Override\n\t\tpublic String next() {return sc.next();}\n\t}\n\n\tprivate static class FileInput implements Input {\n\t\tprivate final Scanner sc;\n\t\tprivate File file;\n\t\tFileInput(final File file) throws FileNotFoundException {\n\t\t\tthis.file = file;\n\t\t\tthis.sc = new Scanner(file);\n\t\t}\n\t\t@Override\n\t\tpublic void close() {\n\t\t\tthis.file.close();\n\t\t}\n\t\t@Override\n\t\tpublic String next() {\n\t\t\treturn sc.next();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tin = new StandardInput();\n\t\t// noinspection UnusedAssignment\n\t\ttry (p2 p = new p2()) {\n\t\t\tp.run();\n\t\t}\n\t}\n}\n"}
{"src_uid": "1805771e194d323edacf2526a1eb6768", "id": 106, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '4\\r\\n2S 2S 2C 2C\\r\\n', 'output': ['YES']}, {'input': '2\\r\\n3S 2C\\r\\n', 'output': ['NO']}, {'input': '5\\r\\n2S 2S 4S 3S 2S\\r\\n', 'output': ['YES']}, {'input': '5\\r\\n5S 5S 7S 4S 3H\\r\\n', 'output': ['NO']}, {'input': '5\\r\\n7S 7S 4S 8H 4H\\r\\n', 'output': ['NO']}, {'input': '5\\r\\n4S 2H 3S 3S 2H\\r\\n', 'output': ['NO']}, {'input': '52\\r\\n3H 6S 3S 2S 2S 3S 4S 3H 2C 4S 3C 3S 2S 2C 2S 6S 4C 3S 5C 3S 2S 4S 3S 5S 2H 2S 4H 3S 3S 4H 4S 2C 2H 2S 4S 6D 4C 4H 2H 4S 3H 6D 6S 3C 3C 4H 5S 3S 3S 2H 2S 4C\\r\\n', 'output': ['NO']}, {'input': '52\\r\\n2S 4S 3S 2S 4S 3S 4S 4S 8S 3S 2S 2S 5S 3S 3S 2S 3S 5S 4S 4S 2S 2S 4S 4S 6S 2S 5S 2S 5S 2S 2S 2S 4S 2S 5S 5S 2S 6S 8S 6S 2S 2S TS 2H 4S 4S 3S 3S 2S 2S 7S 3S\\r\\n', 'output': ['YES']}, {'input': '5\\r\\nAD 5S KH AH AS\\r\\n', 'output': ['YES']}, {'input': '50\\r\\nTS 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D\\r\\n', 'output': ['NO']}, {'input': '5\\r\\nAD 5S KH AH KS\\r\\n', 'output': ['YES']}, {'input': '5\\r\\nAD 5S KH AH JS\\r\\n', 'output': ['NO']}, {'input': '20\\r\\nJD 5H 3H 9H 2S 5S 5H QS 8D 7H TS 9S 4H 5S 9H 4H 3S KS KS JS\\r\\n', 'output': ['NO']}, {'input': '21\\r\\nJS 5S 9S KH 9D JH 3S KH QH 5D TC 3S 5S 4H 4H 5S 7S AH 4S 3S 6S\\r\\n', 'output': ['NO']}, {'input': '51\\r\\nJD 8D QD TC JD AD JD 5D 5S QC TC 4H 8S 7D QD QD 3H TH 8D 9D 5D 4D 6D 7D 9C 2D AD 6D 6H AD 5D 3D AC AC JC 5D 3D KC 7C AD 4D 8C QD QH 6D 9C 2D 6D 3C KC TD\\r\\n', 'output': ['NO']}, {'input': '52\\r\\nKD KD 8H 9C 7C 8D JD 3D 9C KD 6D 9C QD TC 7D TD 3C KD 6D 2D TC 6D AC QD 2C 3D 8D KH AD QD 2C 6C JH 6D 8D 2C 7D QD 7C 7H TD 4D 2D 8D TC 5D 8D KD 7C QC TD 5D\\r\\n', 'output': ['NO']}, {'input': '52\\r\\nJS 7S 3S 2S 7S TS 4S 6S 5H TS 4S TH 6H 9S TH TH 4S 4H 2H TH TC TH TS TS 4S TS 2S TH TH TS 6S TS TS 3S TS TH 5H TS TS 5S 7H 2H TS 6S 6H 2H TS TH 2S 4S 4H 4S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n8D AD AC 9H AS AD KH AD QH AH AC AS 8H KS TD AH KS AD AD AS KD AD AS AH AS AD AD AH AC AD KC JD 8D AC 9D AC AD QD KC AD JS JC AD TD KC JD TD 8D KS KC KD KD\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nAD JD JD TD AD 8D QD AH TC QH AD TD 2D AD QD 4D 3C 3D 3H 6D 8C 3C 3S 6C QC KD 2D 4S TD 5D 3S 3S 3H 3S KH 3H 3D 3H JH JH QH 9H TH 3H KH 7H 3H TH AH 3S 4H 3H\\r\\n', 'output': ['YES']}, {'input': '10\\r\\n4C 8C 8D JC 8C 5S 8H 8C 8S 8H\\r\\n', 'output': ['YES']}, {'input': '10\\r\\nQH QS QS JH QS 6S 7H QH QH QS\\r\\n', 'output': ['YES']}, {'input': '10\\r\\nKS 4S KS KH TS TS KC KH KH KS\\r\\n', 'output': ['YES']}, {'input': '11\\r\\nJD 5D JC JH 6C 6D JH 6S 6S JS JD\\r\\n', 'output': ['YES']}, {'input': '11\\r\\nJS KH JC JS 9S 9H 6H 7H JH AS AH\\r\\n', 'output': ['YES']}, {'input': '11\\r\\n3S 2H TS 9D 9S 2S 2S 9S 3C 2S 2C\\r\\n', 'output': ['YES']}, {'input': '12\\r\\n9S TS QS KD KS AS QS KS 6S AD AD AS\\r\\n', 'output': ['YES']}, {'input': '12\\r\\nJC 8C AC TH AH AC TC AS AH TC AS AS\\r\\n', 'output': ['YES']}, {'input': '12\\r\\n6S 6S 3S 4C 2S 2S 7S 2C 2S 4S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '51\\r\\n7S 4C 2S JS 5C 2H 2C 3C 4C QC 2C 2C 2S 4S 2H 2H 4C 2C 6C 2C 2C JC 8C QC JC 8C TC 7H 4C 8S QH 4H 8C 3H 4S 3H 7H 8S 4C 4S 4S 4S 2H 4H QH 3H 3H 3H 4H 8C 3C\\r\\n', 'output': ['YES']}, {'input': '51\\r\\n2S 2H 2C 2C 3H 2H 7S 2D 6H 2H 2C 2H 2H 5S 2S 3C 2C 2H 2S 2C 5C JC 2S 4C 3C 2C 5C 4C 4D 8C 5C 6C 7C 4C 4C 6S TS 3C TH 4C 4C TS 7C TC 3C TS TC 2S TH TC 2C\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nAC 4C TC 9C TH AD 3C TC 4S 5C TD QD TH 4C 4D 3H TC 4S TH 8H 7H 4D TH QD 4D 8H QH 4D 4H 8D 4H 4D 8H 3D 9D 8H 9D 9C 9H 8D TD 3H 5H 6D QD 9H 6D KD 9H 6D 2D 9D\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nJH 8H 9D TH 5H 9H 5H JH 5H 8H 9D QH 9H 6C AD AC 9C AD AH 9C AC 5C 5C AC 5H 5C 8C 5D KD 5H 5C 8D 5D 8D KD 5D QD 8S 8C 8C 8H 8C JD 8C 8D 8C 8H 9C JD 8D 8D JD\\r\\n', 'output': ['NO']}, {'input': '52\\r\\n9D AD 9C 6C 9D 7D 6D TS 6D 6D 3D QH 9D 9D 9H 9D 9D 2H 5D JH 9H 5C JC TC 9D 9C 2C 9C 9D 4H 4D AC 9D 4C AC 8C 9C QC 8C 9D 7D QC 9H 9D 2C 9D 9C 3C 7H 9C TC 9H\\r\\n', 'output': ['NO']}, {'input': '52\\r\\n9D 5D TC 4D 7D 3D JD 5C 7D TD 5D TD 6H TD TD AD 6D AD TD 2C TD TS TD TD 2H 7D TD QD 2D 2H AC 9D 2D 2C QC AD 2D 4C JC 2D AD 5D 5C AC AD 6C 8D 4D 7C 8C JC AC\\r\\n', 'output': ['NO']}, {'input': '51\\r\\nAH 6S 2S 6H 6S 4S 3S 9S 5S 4S 2S 9S 2S 3S 2S JS 2S 2S 9H 2S 9S 2S 3S 9S 4S 4S 9S 9S 2S 2S 3S 2S 6H 7S 3S 3H 6S 3S 2H 6S 3S 6H 7H 6S 6S 4S 4H 5H 4H 4H 6H\\r\\n', 'output': ['YES']}, {'input': '51\\r\\nJC 6S 2S 6H 6S 4S 3S 9S 5S 4S 2S 9S 2S 3S 2S JS 2S 2S 9H 2S 9S 2S 3S 9S 4S 4S 9S 9S 2S 2S 3S 2S 6H 7S 3S 3H 6S 3S 2H 6S 3S 6H 7H 6S 6S 4S 4H 5H 4H 4H 6H\\r\\n', 'output': ['YES']}, {'input': '51\\r\\n9C 6S 2S 6H 6S 4S 3S 9S 5S 4S 2S 9S 2S 3S 2S JS 2S 2S 9H 2S 9S 2S 3S 9S 4S 4S 9S 9S 2S 2S 3S 2S 6H 7S 3S 3H 6S 3S 2H 6S 3S 6H 7H 6S 6S 4S 4H 5H 4H 4H 6H\\r\\n', 'output': ['YES']}, {'input': '51\\r\\n7C 6S 2S 6H 6S 4S 3S 9S 5S 4S 2S 9S 2S 3S 2S JS 2S 2S 9H 2S 9S 2S 3S 9S 4S 4S 9S 9S 2S 2S 3S 2S 6H 7S 3S 3H 6S 3S 2H 6S 3S 6H 7H 6S 6S 4S 4H 5H 4H 4H 6H\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n2D 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n3D 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nTD 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nJD 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nAH 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n7H 5S 5S JS 5H 5C 5S 5H 2S 5S 9S 3S 2S 5S 2S 2S 5S 4S 3S 5S 7H 3S 5S 7S 4S 2S TS 2S 3S 3S 3S 3S 3S 3S 2S 7S 3S 2S 2S 2S 2S 2S 5S 2H 2C 4S 2S 2S 4S 7S 2S 2S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n2D 5S 4S 4S 4C 2S 4H 4S 4H 4C 3S 4S 4S 4H 5S 4H 4H 5S 2S 4S 4S 2S 4S 4C 4S 4S 9S 4H 4S 3S 3H 4S 4S 7S 3S 3S 2H 3S 7S 4S 2S 7S 2S 2S 3S 3C 2S 3S 3S 2S 5S 3S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\nAC 5S 4S 4S 4C 2S 4H 4S 4H 4C 3S 4S 4S 4H 5S 4H 4H 5S 2S 4S 4S 2S 4S 4C 4S 4S 9S 4H 4S 3S 3H 4S 4S 7S 3S 3S 2H 3S 7S 4S 2S 7S 2S 2S 3S 3C 2S 3S 3S 2S 5S 3S\\r\\n', 'output': ['YES']}, {'input': '52\\r\\n7D 5S 4S 4S 4C 2S 4H 4S 4H 4C 3S 4S 4S 4H 5S 4H 4H 5S 2S 4S 4S 2S 4S 4C 4S 4S 9S 4H 4S 3S 3H 4S 4S 7S 3S 3S 2H 3S 7S 4S 2S 7S 2S 2S 3S 3C 2S 3S 3S 2S 5S 3S\\r\\n', 'output': ['YES']}, {'input': '1\\r\\n3C\\r\\n', 'output': ['YES']}, {'input': '4\\r\\n2C 3D 4D 5C\\r\\n', 'output': ['NO']}]", "source_code": "import java.util.*;\npublic class solitaire {\n    public static void main(String[] args) {\n      Scanner input = new Scanner(System.in);\n      int n = input.nextInt(), j = 0, i, pile=0;\n      String[] cards = new String[n], temp;\n      cards[n] = \"0\";\n      for(i = 0 ; i < n ; i++)\n      {\n          cards[i] = input.next();\n      }\n      for(j = 2 ; pile < n - 1 ; j += 2)\n      {\n          pile = 0;\n          for(i = 1 ; i <= n-j ; i+=2)\n          {\n              if(cards[i].compareTo(cards[i+j]) > 0 || cards[i].charAt(0) == cards[i+j].charAt(0))\n              {\n                  temp = cards[i];\n                  cards[i] = cards[i+j];\n                  cards[i+j] = temp;\n              }\n              pile += 2;\n          }\n          if(j > n)\n          {\n              break;\n          }\n      }\n      for(i = 0 ; i < n ; i++)\n      {\n          if(i == n-1)\n          {\n              if(cards[i].compareTo(cards[i-2]) > 0 || cards[i].charAt(0) == cards[i-2].charAt(0))\n              {\n                  System.out.println(\"YES\");\n              }\n              else\n              {\n                  System.out.println(\"NO\");\n              }\n          }\n          if(i == 0)\n          {\n              continue;\n          }\n          if(cards[i].compareTo(cards[i-2]) > 0 || cards[i].charAt(0) == cards[i-2].charAt(0))\n          {\n              System.out.println(\"NO\");\n              break;\n          }\n      }\n    }\n}"}
{"src_uid": "be42e213ff43e303e475d77a9560367f", "id": 107, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1700, "testcases": "[{'input': '1\\r\\n1\\r\\n0\\r\\n', 'output': ['1']}, {'input': '5\\r\\n2 2 1 1 3\\r\\n1 5\\r\\n2 5 1\\r\\n2 5 4\\r\\n1 5\\r\\n0\\r\\n', 'output': ['7']}, {'input': '7\\r\\n1 3 3 1 2 1 1\\r\\n0\\r\\n1 1\\r\\n1 1\\r\\n2 1 6\\r\\n3 1 2 7\\r\\n1 1\\r\\n1 1\\r\\n', 'output': ['11']}, {'input': '2\\r\\n2 1\\r\\n0\\r\\n1 1\\r\\n', 'output': ['4']}, {'input': '3\\r\\n2 1 2\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['4']}, {'input': '4\\r\\n2 1 1 1\\r\\n0\\r\\n0\\r\\n1 1\\r\\n1 3\\r\\n', 'output': ['6']}, {'input': '6\\r\\n1 1 2 3 3 1\\r\\n2 2 3\\r\\n0\\r\\n0\\r\\n0\\r\\n2 2 1\\r\\n1 1\\r\\n', 'output': ['10']}, {'input': '8\\r\\n2 2 2 1 1 2 1 1\\r\\n3 5 6 7\\r\\n1 5\\r\\n2 5 6\\r\\n1 5\\r\\n0\\r\\n1 5\\r\\n1 5\\r\\n2 5 6\\r\\n', 'output': ['11']}, {'input': '9\\r\\n3 3 2 1 3 1 2 2 1\\r\\n2 4 3\\r\\n0\\r\\n2 4 2\\r\\n0\\r\\n1 4\\r\\n2 4 2\\r\\n0\\r\\n1 4\\r\\n3 4 3 8\\r\\n', 'output': ['13']}, {'input': '10\\r\\n3 1 2 2 2 1 2 1 1 1\\r\\n0\\r\\n2 6 9\\r\\n0\\r\\n1 9\\r\\n0\\r\\n1 3\\r\\n4 3 6 5 2\\r\\n3 6 4 2\\r\\n0\\r\\n1 3\\r\\n', 'output': ['14']}, {'input': '11\\r\\n1 2 2 3 3 2 2 2 2 3 1\\r\\n1 4\\r\\n2 7 11\\r\\n0\\r\\n0\\r\\n1 2\\r\\n1 11\\r\\n0\\r\\n1 2\\r\\n3 7 11 2\\r\\n3 3 2 9\\r\\n0\\r\\n', 'output': ['14']}, {'input': '12\\r\\n1 3 2 2 1 3 2 1 3 2 2 2\\r\\n2 3 4\\r\\n3 12 11 10\\r\\n1 8\\r\\n2 8 7\\r\\n2 9 10\\r\\n1 3\\r\\n0\\r\\n0\\r\\n1 4\\r\\n4 3 1 12 9\\r\\n3 8 3 4\\r\\n1 4\\r\\n', 'output': ['18']}, {'input': '13\\r\\n3 3 2 2 1 3 1 1 1 1 2 1 2\\r\\n5 6 3 11 13 12\\r\\n1 6\\r\\n2 10 6\\r\\n3 6 3 11\\r\\n1 6\\r\\n1 10\\r\\n3 6 2 3\\r\\n4 6 3 9 11\\r\\n3 6 2 3\\r\\n0\\r\\n3 6 2 3\\r\\n4 6 3 4 13\\r\\n2 6 3\\r\\n', 'output': ['21']}, {'input': '14\\r\\n3 2 2 1 2 1 1 3 1 2 2 3 1 1\\r\\n2 9 13\\r\\n3 9 13 8\\r\\n2 9 6\\r\\n3 9 6 13\\r\\n1 9\\r\\n1 9\\r\\n3 9 6 13\\r\\n2 9 13\\r\\n0\\r\\n4 9 3 13 4\\r\\n4 9 6 13 2\\r\\n2 9 13\\r\\n1 9\\r\\n8 9 5 6 3 13 7 4 11\\r\\n', 'output': ['20']}, {'input': '15\\r\\n1 2 3 2 3 2 2 2 3 3 3 2 3 1 3\\r\\n5 2 7 4 3 6\\r\\n0\\r\\n2 7 4\\r\\n2 2 15\\r\\n1 7\\r\\n1 7\\r\\n0\\r\\n2 4 6\\r\\n1 6\\r\\n2 15 3\\r\\n4 12 2 15 7\\r\\n0\\r\\n3 2 5 6\\r\\n3 2 4 6\\r\\n1 2\\r\\n', 'output': ['20']}, {'input': '16\\r\\n3 3 1 3 2 3 2 2 3 1 2 3 2 2 2 3\\r\\n1 14\\r\\n4 14 10 13 6\\r\\n3 14 15 6\\r\\n1 14\\r\\n4 14 10 9 7\\r\\n4 14 10 13 9\\r\\n4 14 10 13 6\\r\\n4 14 4 12 3\\r\\n2 14 4\\r\\n1 14\\r\\n1 14\\r\\n2 14 1\\r\\n4 14 10 4 1\\r\\n0\\r\\n2 14 10\\r\\n1 14\\r\\n', 'output': ['22']}, {'input': '17\\r\\n3 2 3 2 2 2 1 3 3 3 3 2 3 3 3 1 1\\r\\n0\\r\\n0\\r\\n2 8 10\\r\\n4 12 8 6 16\\r\\n0\\r\\n2 8 13\\r\\n3 2 8 10\\r\\n1 12\\r\\n4 8 17 3 16\\r\\n2 2 8\\r\\n0\\r\\n1 2\\r\\n2 8 10\\r\\n2 12 8\\r\\n2 8 10\\r\\n1 8\\r\\n2 12 8\\r\\n', 'output': ['21']}, {'input': '18\\r\\n2 1 1 3 2 1 3 2 3 3 2 2 1 1 3 1 1 3\\r\\n3 16 8 6\\r\\n3 16 6 1\\r\\n4 6 13 5 7\\r\\n2 6 2\\r\\n4 16 6 17 1\\r\\n2 16 8\\r\\n3 6 17 12\\r\\n1 16\\r\\n0\\r\\n3 6 15 1\\r\\n3 16 6 12\\r\\n7 16 9 8 6 13 17 14\\r\\n1 6\\r\\n1 6\\r\\n3 8 6 13\\r\\n0\\r\\n1 6\\r\\n3 9 6 13\\r\\n', 'output': ['26']}, {'input': '19\\r\\n2 1 2 3 3 3 2 1 1 1 1 3 3 1 1 1 2 2 3\\r\\n0\\r\\n2 1 7\\r\\n0\\r\\n4 3 2 17 13\\r\\n1 17\\r\\n1 3\\r\\n3 1 3 6\\r\\n4 1 17 9 13\\r\\n3 1 16 17\\r\\n0\\r\\n3 3 6 17\\r\\n1 6\\r\\n6 10 6 7 17 9 11\\r\\n3 10 17 13\\r\\n4 3 17 13 8\\r\\n1 3\\r\\n3 6 7 16\\r\\n0\\r\\n6 1 7 17 11 13 15\\r\\n', 'output': ['29']}, {'input': '20\\r\\n1 2 2 2 1 3 3 2 2 1 2 2 3 1 2 2 2 1 1 1\\r\\n2 10 8\\r\\n5 10 12 3 20 7\\r\\n0\\r\\n3 10 15 3\\r\\n0\\r\\n3 14 17 3\\r\\n2 12 20\\r\\n0\\r\\n3 17 10 12\\r\\n1 17\\r\\n1 5\\r\\n1 5\\r\\n0\\r\\n1 18\\r\\n3 18 5 12\\r\\n5 5 12 8 3 19\\r\\n0\\r\\n0\\r\\n1 12\\r\\n1 18\\r\\n', 'output': ['24']}, {'input': '11\\r\\n3 1 3 2 3 2 3 2 3 1 3\\r\\n6 2 3 9 5 7 10\\r\\n1 6\\r\\n2 6 2\\r\\n5 6 2 3 9 5\\r\\n2 3 9\\r\\n0\\r\\n5 3 9 5 8 4\\r\\n4 2 3 9 5\\r\\n2 2 3\\r\\n8 6 2 3 9 5 4 11 7\\r\\n4 2 3 9 5\\r\\n', 'output': ['21']}, {'input': '12\\r\\n2 3 3 1 1 3 2 2 3 1 3 3\\r\\n1 9\\r\\n1 1\\r\\n2 2 11\\r\\n5 1 2 11 5 8\\r\\n4 9 10 1 11\\r\\n5 9 10 12 11 5\\r\\n4 1 12 11 5\\r\\n5 10 1 2 12 11\\r\\n0\\r\\n1 9\\r\\n1 12\\r\\n0\\r\\n', 'output': ['19']}, {'input': '13\\r\\n3 2 2 1 3 3 2 3 2 2 1 2 3\\r\\n7 4 3 2 5 9 8 13\\r\\n1 4\\r\\n1 4\\r\\n0\\r\\n3 4 2 6\\r\\n2 4 2\\r\\n4 4 3 2 9\\r\\n5 4 2 6 9 7\\r\\n3 4 2 6\\r\\n6 4 3 2 5 9 7\\r\\n6 4 3 2 6 9 7\\r\\n8 4 2 6 5 9 8 11 10\\r\\n7 4 3 2 6 9 8 11\\r\\n', 'output': ['21']}, {'input': '14\\r\\n2 3 1 3 1 1 1 2 2 3 1 1 3 1\\r\\n4 14 9 8 5\\r\\n4 4 8 5 1\\r\\n9 4 14 9 8 1 2 13 7 12\\r\\n0\\r\\n2 14 8\\r\\n2 4 14\\r\\n7 9 6 10 8 1 2 13\\r\\n2 4 6\\r\\n1 14\\r\\n1 9\\r\\n8 4 6 10 8 5 1 2 3\\r\\n7 14 6 10 8 1 2 7\\r\\n5 10 8 5 1 2\\r\\n0\\r\\n', 'output': ['21']}, {'input': '15\\r\\n3 2 2 2 1 1 2 1 1 2 2 3 3 3 2\\r\\n1 13\\r\\n4 13 1 8 14\\r\\n10 5 13 1 8 14 4 2 11 15 10\\r\\n6 5 13 1 8 9 14\\r\\n0\\r\\n11 5 13 1 8 14 4 2 11 10 3 12\\r\\n11 13 1 8 14 4 2 11 15 10 3 6\\r\\n2 13 1\\r\\n4 5 13 1 8\\r\\n8 5 13 1 8 14 2 11 15\\r\\n6 5 13 1 8 14 2\\r\\n10 5 13 1 8 14 2 11 15 10 3\\r\\n0\\r\\n4 13 1 8 9\\r\\n8 5 13 1 8 9 14 2 11\\r\\n', 'output': ['23']}, {'input': '16\\r\\n3 1 2 3 3 2 3 1 3 2 2 1 2 2 1 2\\r\\n0\\r\\n0\\r\\n7 2 8 4 12 5 9 11\\r\\n1 1\\r\\n4 1 8 4 12\\r\\n5 2 4 12 5 11\\r\\n4 4 12 5 10\\r\\n0\\r\\n5 1 8 4 12 5\\r\\n6 1 4 12 5 9 11\\r\\n6 2 1 8 4 12 5\\r\\n2 4 13\\r\\n3 1 8 4\\r\\n8 1 4 13 12 5 10 3 6\\r\\n4 4 12 5 6\\r\\n8 8 4 13 12 5 9 6 14\\r\\n', 'output': ['26']}, {'input': '17\\r\\n2 3 1 3 3 3 1 1 1 2 2 2 3 2 3 3 2\\r\\n5 4 14 2 11 7\\r\\n3 13 4 14\\r\\n7 6 4 14 2 1 10 12\\r\\n2 6 13\\r\\n9 4 2 9 8 7 17 1 10 12\\r\\n0\\r\\n5 4 14 2 9 11\\r\\n4 13 4 2 11\\r\\n4 13 4 14 2\\r\\n7 13 4 2 11 8 7 1\\r\\n4 13 4 14 2\\r\\n8 6 4 2 8 7 17 1 10\\r\\n0\\r\\n1 4\\r\\n7 13 4 14 2 9 8 7\\r\\n6 4 2 17 1 10 12\\r\\n5 13 4 2 9 8\\r\\n', 'output': ['27']}, {'input': '18\\r\\n1 2 3 3 2 2 1 1 3 1 2 3 2 3 1 2 2 3\\r\\n5 9 3 14 12 2\\r\\n7 9 4 3 14 16 7 12\\r\\n1 9\\r\\n1 9\\r\\n6 9 14 12 1 6 15\\r\\n6 9 14 12 2 1 11\\r\\n2 9 14\\r\\n7 9 14 7 12 2 1 6\\r\\n0\\r\\n6 9 18 14 7 1 6\\r\\n4 9 14 7 1\\r\\n2 9 14\\r\\n6 9 3 14 7 1 6\\r\\n2 9 3\\r\\n9 9 3 14 16 12 2 1 6 17\\r\\n4 9 4 18 14\\r\\n8 9 18 14 12 1 11 6 13\\r\\n2 9 4\\r\\n', 'output': ['26']}, {'input': '19\\r\\n2 3 3 2 3 1 3 1 2 2 2 1 1 1 2 2 1 3 3\\r\\n0\\r\\n3 1 10 6\\r\\n8 1 6 2 17 18 12 15 7\\r\\n5 6 2 9 17 18\\r\\n6 6 2 17 18 12 16\\r\\n1 11\\r\\n9 1 11 6 2 17 18 4 12 15\\r\\n3 1 6 2\\r\\n4 1 6 2 8\\r\\n0\\r\\n1 1\\r\\n5 1 6 2 17 18\\r\\n12 1 10 6 2 8 17 18 4 12 15 7 3\\r\\n10 11 6 2 17 18 4 12 16 15 7\\r\\n8 1 6 2 8 17 18 12 16\\r\\n8 11 6 2 9 17 18 4 12\\r\\n3 11 6 2\\r\\n5 10 6 2 9 17\\r\\n10 1 6 2 17 18 12 5 15 7 3\\r\\n', 'output': ['30']}, {'input': '20\\r\\n2 2 3 2 3 1 1 3 1 1 1 1 1 3 2 1 3 1 1 1\\r\\n1 7\\r\\n13 7 1 11 4 6 16 20 12 5 18 19 15 10\\r\\n8 7 1 11 4 6 17 8 16\\r\\n3 7 1 11\\r\\n9 7 1 11 4 6 8 20 12 3\\r\\n4 7 1 11 4\\r\\n0\\r\\n6 7 1 11 4 6 17\\r\\n4 7 1 11 4\\r\\n7 7 1 11 4 6 17 5\\r\\n2 7 1\\r\\n9 7 1 11 4 6 17 8 14 20\\r\\n11 7 1 11 4 6 20 3 5 15 10 2\\r\\n5 7 1 11 4 6\\r\\n9 7 1 11 4 6 8 16 14 5\\r\\n5 7 1 11 4 6\\r\\n5 7 1 11 4 6\\r\\n11 7 1 11 4 9 6 17 8 20 3 5\\r\\n11 7 1 11 4 6 17 16 20 12 5 18\\r\\n6 7 1 11 4 6 14\\r\\n', 'output': ['35']}, {'input': '21\\r\\n1 2 1 3 3 3 1 1 2 2 3 1 3 1 3 3 1 1 1 2 2\\r\\n1 5\\r\\n0\\r\\n1 11\\r\\n0\\r\\n0\\r\\n0\\r\\n1 8\\r\\n0\\r\\n1 11\\r\\n1 1\\r\\n1 19\\r\\n0\\r\\n1 2\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 19\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['25']}, {'input': '22\\r\\n2 3 2 3 3 2 1 2 3 3 1 3 1 1 2 2 3 3 1 3 2 2\\r\\n0\\r\\n1 8\\r\\n1 22\\r\\n1 12\\r\\n0\\r\\n1 14\\r\\n0\\r\\n0\\r\\n0\\r\\n2 22 14\\r\\n1 12\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 16\\r\\n1 13\\r\\n0\\r\\n', 'output': ['25']}, {'input': '23\\r\\n3 1 3 3 2 2 2 1 3 2 3 1 1 1 1 2 3 1 2 1 3 1 1\\r\\n0\\r\\n1 11\\r\\n1 11\\r\\n2 11 16\\r\\n1 2\\r\\n3 11 1 12\\r\\n2 11 16\\r\\n2 12 2\\r\\n1 13\\r\\n2 12 2\\r\\n0\\r\\n0\\r\\n0\\r\\n2 13 11\\r\\n0\\r\\n1 11\\r\\n2 12 2\\r\\n3 16 6 21\\r\\n1 11\\r\\n0\\r\\n0\\r\\n2 11 12\\r\\n0\\r\\n', 'output': ['27']}, {'input': '24\\r\\n1 2 1 1 2 2 1 1 3 2 3 1 3 2 3 3 1 1 3 2 3 2 1 2\\r\\n1 16\\r\\n0\\r\\n0\\r\\n1 2\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 2\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n2 12 24\\r\\n0\\r\\n0\\r\\n1 11\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['27']}, {'input': '25\\r\\n3 3 1 1 1 2 2 2 3 1 2 3 2 1 2 2 2 3 2 1 2 3 2 1 1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 12\\r\\n0\\r\\n1 19\\r\\n0\\r\\n2 12 21\\r\\n2 3 10\\r\\n0\\r\\n1 21\\r\\n0\\r\\n1 9\\r\\n1 3\\r\\n0\\r\\n0\\r\\n2 3 2\\r\\n0\\r\\n1 12\\r\\n0\\r\\n1 3\\r\\n2 21 9\\r\\n', 'output': ['29']}, {'input': '26\\r\\n1 2 2 1 1 2 1 1 2 1 3 1 3 1 2 3 3 3 2 1 2 1 3 3 2 2\\r\\n1 9\\r\\n1 1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 5\\r\\n0\\r\\n2 15 12\\r\\n1 8\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n2 3 26\\r\\n0\\r\\n0\\r\\n0\\r\\n1 22\\r\\n0\\r\\n1 8\\r\\n', 'output': ['30']}, {'input': '27\\r\\n2 1 1 3 2 1 1 2 3 1 1 2 2 2 1 2 1 1 3 3 3 1 1 1 3 1 1\\r\\n0\\r\\n0\\r\\n0\\r\\n1 12\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 26\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 27\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 5\\r\\n0\\r\\n2 20 27\\r\\n1 18\\r\\n0\\r\\n', 'output': ['30']}, {'input': '28\\r\\n2 1 1 3 2 3 2 2 1 3 2 3 3 2 3 1 2 2 3 3 3 3 1 3 2 1 3 3\\r\\n0\\r\\n1 7\\r\\n0\\r\\n2 28 18\\r\\n1 28\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n2 10 18\\r\\n3 8 10 18\\r\\n0\\r\\n2 1 20\\r\\n0\\r\\n1 18\\r\\n1 27\\r\\n2 27 18\\r\\n0\\r\\n0\\r\\n1 28\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 28\\r\\n1 9\\r\\n', 'output': ['33']}, {'input': '29\\r\\n3 3 3 3 3 1 1 1 3 2 2 1 1 3 1 1 1 2 1 2 3 1 1 2 1 3 1 2 3\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 1\\r\\n0\\r\\n0\\r\\n2 28 15\\r\\n0\\r\\n0\\r\\n0\\r\\n2 24 23\\r\\n1 28\\r\\n0\\r\\n1 28\\r\\n1 20\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 28\\r\\n0\\r\\n0\\r\\n2 23 16\\r\\n0\\r\\n0\\r\\n1 7\\r\\n1 28\\r\\n', 'output': ['32']}, {'input': '30\\r\\n1 3 3 3 2 3 1 3 3 3 3 2 3 1 3 2 1 1 1 1 2 3 2 1 1 3 3 2 2 2\\r\\n0\\r\\n1 20\\r\\n0\\r\\n1 7\\r\\n2 6 9\\r\\n1 20\\r\\n1 20\\r\\n3 7 6 9\\r\\n2 10 6\\r\\n0\\r\\n0\\r\\n2 6 9\\r\\n0\\r\\n0\\r\\n1 20\\r\\n2 6 9\\r\\n2 6 9\\r\\n0\\r\\n2 6 9\\r\\n0\\r\\n2 6 9\\r\\n3 27 6 9\\r\\n2 6 9\\r\\n2 6 9\\r\\n0\\r\\n0\\r\\n0\\r\\n2 6 9\\r\\n3 6 9 19\\r\\n3 27 6 9\\r\\n', 'output': ['34']}, {'input': '200\\r\\n3 3 3 1 3 1 3 1 1 1 3 2 1 1 3 1 3 3 2 2 2 2 3 3 1 3 2 3 1 2 3 3 2 2 1 2 3 3 1 3 1 3 3 3 1 2 1 3 3 1 2 1 2 3 2 2 3 2 2 3 2 3 1 1 1 2 2 2 1 3 1 2 1 3 2 3 2 1 2 2 1 1 2 2 1 3 3 2 2 1 3 2 3 2 3 1 2 2 2 3 3 2 2 3 2 3 3 3 3 3 2 2 3 3 2 3 2 1 2 3 2 3 2 1 2 3 3 1 2 3 2 2 3 3 3 1 2 3 3 2 3 3 3 3 3 1 2 1 3 3 1 1 2 1 2 3 1 3 2 3 1 1 2 3 3 2 2 1 3 3 1 3 1 2 1 2 3 1 1 3 2 1 1 1 2 1 1 2 2 2 3 1 2 1 1 1 1 2 1 2\\r\\n19 52 113 18 109 125 8 150 180 173 174 116 130 79 122 112 19 80 110 121\\r\\n2 52 124\\r\\n13 52 129 148 125 150 ...', 'output': ['224']}, {'input': '200\\r\\n1 2 3 2 1 1 3 3 3 3 2 1 1 2 3 3 1 3 2 3 1 3 3 1 2 3 3 2 2 1 3 3 3 3 1 1 2 2 2 2 2 1 1 2 3 2 3 3 3 2 2 1 2 3 2 1 1 1 1 1 3 2 2 2 2 1 3 1 2 2 3 1 1 2 1 1 1 1 2 2 2 1 3 2 1 1 2 2 2 1 1 3 1 3 3 1 3 3 2 3 2 2 3 1 3 3 1 3 3 3 3 2 1 3 1 3 2 2 1 3 2 2 3 1 2 1 2 3 1 3 1 2 1 2 2 3 2 3 2 2 3 2 2 2 3 1 3 3 1 1 2 3 1 2 3 2 2 2 1 3 2 1 1 3 2 1 3 2 1 1 3 2 3 3 2 1 2 3 2 1 3 2 2 3 1 3 3 3 2 1 3 2 3 2 3 3 2 1 1 1\\r\\n16 96 58 20 140 86 51 130 57 66 64 112 177 54 123 62 155\\r\\n0\\r\\n0\\r\\n9 3 125 15 94 46 124 51 130 121\\r\\n4 56 124...', 'output': ['220']}, {'input': '200\\r\\n1 3 2 3 2 3 3 3 2 2 3 2 3 1 1 3 3 2 2 2 1 1 3 3 3 1 1 1 1 2 2 3 1 3 2 3 3 2 1 2 3 2 2 1 2 1 3 3 3 1 3 3 3 2 2 1 3 3 1 1 2 1 2 2 3 3 3 2 1 2 2 2 2 3 2 1 3 1 3 2 2 2 1 3 2 2 3 3 1 3 3 1 3 1 1 2 3 1 1 2 3 1 3 2 1 1 2 2 2 1 1 3 3 1 1 3 1 1 2 1 3 2 1 2 2 3 2 2 3 3 3 1 2 3 3 1 2 3 2 3 2 1 1 2 2 1 3 1 3 3 3 3 3 2 3 3 1 1 1 1 3 1 2 3 1 2 3 3 3 1 3 2 3 3 3 3 3 3 3 1 2 1 3 1 3 1 1 1 1 3 3 2 2 3 1 3 2 3 2 2\\r\\n0\\r\\n0\\r\\n3 193 176 85\\r\\n0\\r\\n1 193\\r\\n3 83 167 85\\r\\n0\\r\\n1 193\\r\\n5 161 193 85 16 44\\r\\n5 83 38 158 85 141\\r\\n7 120 4 158 ...', 'output': ['219']}, {'input': '200\\r\\n1 3 3 1 1 2 1 3 2 2 3 2 2 1 3 1 1 3 3 2 3 3 2 3 2 3 1 2 3 3 2 2 3 3 1 3 3 1 1 1 2 1 1 1 2 2 2 3 2 3 2 1 1 3 2 3 2 1 1 3 3 1 3 1 3 3 3 3 1 2 3 2 1 1 1 2 1 3 2 3 2 1 3 3 2 2 3 3 1 2 1 3 1 2 2 1 1 3 3 3 3 2 1 1 2 1 3 1 3 3 1 2 1 2 1 2 2 1 3 1 2 3 2 3 2 1 1 1 3 3 1 3 2 2 1 1 3 1 3 2 1 3 3 1 1 3 2 2 3 1 2 3 3 1 1 2 1 2 3 1 2 2 3 1 1 1 1 2 2 3 1 1 3 2 3 3 3 3 2 2 3 3 2 3 2 3 1 2 3 1 1 2 3 2 1 1 3 2 3 1\\r\\n3 4 164 15\\r\\n8 15 35 25 18 32 168 10 118\\r\\n3 50 15 35\\r\\n0\\r\\n0\\r\\n2 4 15\\r\\n0\\r\\n5 50 15 44 84 120\\r\\n5 15 111 91 66 1...', 'output': ['222']}, {'input': '200\\r\\n3 1 2 3 2 1 3 2 2 1 3 1 1 1 3 1 3 3 1 1 3 1 2 2 2 1 3 3 2 1 3 2 3 3 3 2 2 1 3 1 2 1 3 2 2 2 2 1 1 2 2 3 1 2 1 3 2 3 2 1 2 1 2 3 3 2 2 2 2 1 2 2 1 2 3 1 1 1 3 3 1 3 2 3 1 2 2 1 2 2 3 3 1 1 1 2 1 1 3 1 3 2 2 1 3 1 2 3 1 3 2 3 3 3 1 3 1 2 3 3 2 2 2 2 2 3 2 3 3 3 3 2 3 2 3 2 1 3 2 1 3 2 1 1 3 1 3 1 2 2 2 2 1 1 1 1 3 2 1 3 3 1 1 2 1 3 3 1 1 3 1 3 2 2 2 3 2 3 2 3 1 2 3 2 3 3 2 3 3 1 1 2 2 2 3 1 2 2 2 2\\r\\n0\\r\\n0\\r\\n11 153 175 47 143 18 78 79 113 170 35 49\\r\\n8 45 153 67 74 161 162 122 170\\r\\n4 153 137 67 72\\r\\n2 153 10...', 'output': ['223']}, {'input': '200\\r\\n3 2 2 1 3 2 2 3 1 1 2 3 3 1 2 2 3 3 1 1 3 3 3 1 1 3 2 3 2 3 3 2 2 1 3 2 1 2 3 1 1 3 3 2 3 1 1 2 3 2 1 3 2 2 3 3 1 1 1 3 2 1 3 1 2 1 2 1 2 3 1 3 2 2 1 1 1 1 3 2 1 1 1 1 3 1 3 1 3 3 1 2 2 2 1 2 3 1 2 3 1 1 2 3 3 3 1 3 2 2 2 2 2 2 3 1 1 3 1 3 1 1 3 3 1 2 1 3 3 2 1 2 2 1 1 2 3 1 3 3 3 2 2 1 1 1 3 3 1 2 3 1 1 3 2 3 2 1 3 3 2 1 3 1 1 1 2 1 1 2 3 2 3 2 3 1 3 1 3 1 3 3 1 2 2 3 3 3 2 1 3 1 1 2 2 2 3 3 1 1\\r\\n0\\r\\n3 96 43 53\\r\\n3 43 156 199\\r\\n1 43\\r\\n3 1 43 33\\r\\n6 43 50 191 21 57 168\\r\\n10 43 194 185 192 83 101 152 80 191 ...', 'output': ['222']}, {'input': '200\\r\\n1 2 3 3 1 2 1 1 2 1 1 1 1 2 3 3 3 1 2 2 2 2 3 2 1 2 2 3 3 1 1 3 1 1 1 3 1 3 3 2 2 3 3 3 2 3 1 1 1 1 2 3 2 3 3 3 1 1 3 3 1 2 3 1 3 1 3 2 3 2 1 3 1 1 1 2 1 3 2 2 2 3 2 2 2 2 1 3 3 3 3 1 3 1 2 1 2 1 2 1 2 3 2 3 1 3 1 2 1 1 2 3 3 1 2 1 1 1 1 2 3 1 1 1 2 3 2 1 1 2 3 3 2 3 3 3 1 3 1 2 3 2 3 2 1 2 3 2 2 2 3 1 2 3 2 1 2 3 1 1 1 3 1 2 3 2 3 1 3 2 1 2 3 1 1 1 1 2 2 2 1 2 1 2 3 3 2 1 3 3 2 2 3 1 1 2 1 3 1 2\\r\\n11 164 21 199 71 131 112 110 4 146 192 179\\r\\n4 71 127 60 14\\r\\n14 193 144 133 70 97 71 53 110 145 113 57 166...', 'output': ['219']}, {'input': '200\\r\\n3 1 3 3 2 1 2 1 1 3 3 3 2 3 2 3 3 2 1 1 2 3 2 2 1 1 2 2 2 3 3 2 2 3 2 1 2 3 1 1 3 1 1 2 2 2 3 3 2 2 3 2 3 1 2 2 2 1 3 1 3 3 3 2 3 2 2 1 2 1 1 3 2 2 3 3 2 3 2 1 2 3 3 3 3 1 2 1 1 3 1 3 1 2 2 1 3 1 1 2 2 3 1 3 1 2 3 3 2 1 2 1 2 1 2 3 2 1 1 2 1 3 1 3 1 3 2 1 2 1 3 3 1 1 1 2 1 2 3 3 1 2 2 1 1 3 1 1 1 3 2 3 1 2 2 3 1 2 1 1 1 1 1 3 3 3 1 1 2 2 3 3 2 2 2 1 3 1 1 3 2 1 1 3 3 3 2 2 1 1 1 1 2 3 3 3 2 2 1 3\\r\\n7 132 13 75 196 148 170 110\\r\\n10 132 16 77 192 46 146 55 75 99 98\\r\\n1 132\\r\\n1 132\\r\\n5 132 103 73 119 13\\r\\n6 13...', 'output': ['221']}, {'input': '200\\r\\n2 1 1 3 2 1 3 2 1 2 2 2 3 1 3 1 3 3 2 2 2 3 1 2 1 2 1 2 1 3 1 3 2 2 2 2 2 2 3 2 3 2 3 2 2 3 2 3 2 3 2 3 3 1 1 3 2 3 3 1 3 2 1 1 1 3 1 2 2 2 2 1 2 3 2 1 1 3 1 1 3 2 1 3 2 2 1 2 1 2 1 3 2 2 2 1 2 1 2 3 3 3 1 1 2 2 3 3 3 3 1 3 1 2 1 3 1 2 2 2 2 1 2 1 2 1 2 1 2 1 1 3 1 2 3 1 2 1 3 1 3 1 2 1 3 3 1 2 1 1 3 3 3 3 3 2 3 2 2 2 2 1 3 3 3 3 3 2 1 1 3 3 3 3 2 1 2 2 2 2 2 1 2 1 2 1 2 1 3 3 2 2 3 1 1 2 2 3 2 2\\r\\n6 84 74 147 109 151 78\\r\\n13 157 14 38 43 55 12 96 111 138 30 76 146 108\\r\\n7 7 12 60 139 159 199 2\\r\\n6 7 14 5...', 'output': ['216']}, {'input': '200\\r\\n1 2 1 3 2 1 1 3 3 3 1 3 1 2 1 1 3 2 2 3 2 3 1 2 2 3 2 3 2 3 2 1 3 1 3 3 3 3 2 3 2 2 3 3 2 3 2 2 1 3 2 2 2 1 2 1 2 3 3 1 3 1 2 1 1 2 2 1 1 2 3 3 2 2 1 3 1 2 2 2 1 2 2 3 3 2 1 1 1 1 2 1 3 1 3 2 1 3 3 2 1 2 3 1 3 2 2 2 3 3 2 1 3 3 2 2 3 1 3 1 2 2 3 1 3 2 1 3 3 2 2 2 1 1 3 1 2 3 2 1 2 3 2 2 3 2 1 3 2 2 3 2 3 2 3 2 2 2 2 2 1 3 1 3 3 3 1 3 1 3 1 2 2 3 2 3 1 3 1 3 3 3 1 1 2 2 1 1 2 1 1 3 1 1 2 3 2 2 2 2\\r\\n11 120 34 23 75 191 50 115 196 15 134 160\\r\\n8 105 34 167 25 191 50 43 15\\r\\n1 55\\r\\n1 42\\r\\n8 159 31 122 25 191 ...', 'output': ['219']}, {'input': '200\\r\\n3 3 2 3 2 3 1 3 2 2 1 3 2 2 1 3 1 3 3 3 2 2 2 2 1 1 3 1 1 2 1 3 1 3 2 1 1 2 3 3 2 3 1 1 3 2 2 2 3 2 1 3 3 2 3 2 2 2 3 3 2 3 2 3 1 2 2 3 3 2 3 3 1 3 1 3 1 1 1 3 1 1 2 3 2 1 1 1 2 2 2 2 3 2 1 2 3 1 3 3 1 2 2 1 2 1 1 3 3 3 1 1 2 3 1 2 3 2 2 1 2 2 3 1 3 3 1 1 2 2 1 1 2 2 3 3 2 3 2 2 3 3 2 3 3 1 2 1 3 1 2 1 1 3 2 3 2 2 2 2 2 3 1 1 2 1 1 3 2 2 1 3 3 1 2 3 2 1 2 3 3 1 1 1 2 2 1 2 1 2 2 2 3 1 3 3 3 2 3 3\\r\\n5 188 126 156 182 91\\r\\n3 102 139 93\\r\\n4 139 56 152 126\\r\\n0\\r\\n5 35 127 37 93 174\\r\\n4 55 21 154 91\\r\\n4 10 93 126 ...', 'output': ['213']}, {'input': '200\\r\\n3 2 2 2 2 3 1 1 1 2 2 2 3 2 3 3 3 1 3 2 3 1 2 2 1 1 1 3 1 3 1 1 1 1 2 3 3 1 3 1 2 2 1 2 3 2 1 2 2 1 1 2 1 2 3 1 3 1 1 2 1 3 2 3 1 2 2 3 1 3 2 2 2 1 1 2 1 1 2 2 1 2 2 2 2 2 3 1 3 2 2 1 3 2 2 2 3 1 3 1 3 1 1 1 2 1 1 3 3 1 3 2 3 3 1 3 3 2 1 1 3 1 1 2 3 3 3 2 1 3 3 1 2 3 3 2 2 3 2 3 1 1 3 1 3 2 2 2 2 3 1 1 2 1 1 2 1 2 3 2 3 3 1 2 3 2 2 2 2 3 1 2 3 3 2 3 3 2 3 1 3 3 2 1 1 1 2 2 2 3 3 1 2 2 1 2 3 2 2 1\\r\\n1 125\\r\\n0\\r\\n2 125 34\\r\\n1 116\\r\\n3 76 100 59\\r\\n0\\r\\n5 176 175 126 80 142\\r\\n3 19 172 116\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n4 125 116 200 ...', 'output': ['210']}, {'input': '200\\r\\n2 1 2 3 2 2 1 2 2 2 1 3 2 2 2 2 1 1 3 2 2 2 3 3 3 1 2 3 2 1 2 2 1 3 3 2 1 3 3 1 1 2 2 2 3 1 2 3 1 1 3 3 1 1 1 1 2 2 1 2 2 2 3 2 2 1 2 3 3 2 2 3 3 3 2 1 1 2 1 1 1 2 3 3 2 3 1 2 3 1 3 1 1 1 3 1 1 1 1 3 2 3 3 2 2 1 1 2 2 1 1 1 2 3 1 3 3 2 2 1 1 3 1 1 2 2 2 1 3 3 3 2 2 2 2 3 1 3 2 3 1 3 3 2 2 1 1 2 1 1 3 2 1 1 2 3 2 2 2 3 1 2 3 2 1 1 2 2 2 3 1 3 2 1 1 1 3 2 1 1 1 1 2 2 2 3 1 2 3 3 2 1 1 1 3 3 2 2 2 1\\r\\n4 15 85 52 111\\r\\n0\\r\\n0\\r\\n2 190 140\\r\\n4 74 52 124 64\\r\\n4 29 181 52 167\\r\\n2 52 184\\r\\n1 31\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n2 21 184\\r\\n0...', 'output': ['210']}, {'input': '200\\r\\n3 1 1 1 3 3 3 1 3 3 1 3 1 2 3 3 3 2 1 2 2 3 3 1 1 3 2 1 3 2 1 2 3 2 2 1 1 2 2 1 1 3 2 2 1 2 2 1 2 2 1 3 1 2 3 1 3 3 1 3 1 3 2 3 2 2 1 2 3 2 1 3 2 3 1 1 1 1 1 1 2 2 3 2 3 3 3 1 3 1 2 3 1 1 3 2 3 2 1 1 3 2 2 2 3 2 1 3 2 1 3 2 3 2 2 1 2 1 2 1 3 2 1 2 1 3 2 2 1 3 3 3 2 2 2 1 2 3 1 1 1 2 1 2 1 2 3 1 1 3 3 2 2 1 1 3 3 1 1 1 1 2 3 1 3 3 3 2 1 3 3 1 3 3 1 2 1 2 1 1 2 3 2 2 1 1 1 1 3 3 3 3 3 3 3 1 3 3 3 2\\r\\n5 200 120 25 2 163\\r\\n5 200 120 21 25 90\\r\\n6 200 120 25 189 2 76\\r\\n3 200 120 25\\r\\n5 200 120 115 25 28\\r\\n4 200 1...', 'output': ['212']}, {'input': '200\\r\\n1 1 3 3 2 2 2 2 2 3 2 3 1 1 1 2 2 2 3 3 1 1 2 1 3 1 3 2 2 2 3 1 3 2 3 2 2 3 1 1 3 3 2 3 3 3 2 2 1 2 3 3 2 2 1 3 2 1 2 3 1 3 2 1 1 1 2 1 3 1 1 3 2 3 1 2 3 3 2 1 2 1 2 3 3 3 1 1 3 3 2 3 3 1 2 2 3 1 3 3 2 1 3 3 2 2 3 2 2 3 1 2 2 3 2 3 2 3 1 3 1 1 3 2 2 2 3 2 2 3 2 3 1 2 3 1 1 2 3 2 1 2 2 3 1 1 3 1 1 1 1 2 2 1 1 3 1 2 3 3 1 2 3 1 2 2 3 2 2 1 1 2 2 1 2 1 3 1 1 1 2 3 2 2 2 2 3 2 2 2 3 1 3 3 1 1 1 3 2 2\\r\\n3 159 22 96\\r\\n2 100 148\\r\\n3 180 22 123\\r\\n3 44 80 22\\r\\n4 102 111 180 22\\r\\n1 39\\r\\n9 112 180 186 185 42 159 22 36 ...', 'output': ['208']}, {'input': '200\\r\\n2 2 2 3 2 1 1 2 3 1 3 2 1 1 1 2 2 2 3 1 3 3 2 1 1 2 1 3 1 3 3 1 1 3 2 1 3 2 2 3 1 2 3 2 2 2 3 3 1 1 3 3 1 2 3 2 3 2 1 1 2 3 3 2 3 3 2 1 3 2 2 3 1 2 2 2 2 2 3 2 3 3 2 3 3 3 3 1 2 2 2 1 3 2 1 1 2 1 3 1 1 3 3 1 1 2 1 2 2 3 1 1 2 1 1 1 2 3 2 2 1 1 1 1 3 2 1 1 2 3 2 2 3 2 2 2 1 3 3 3 3 2 1 1 1 3 2 3 1 3 2 2 2 1 3 2 1 2 1 2 1 2 1 1 1 1 3 1 2 2 1 2 3 2 3 3 2 3 1 3 3 3 2 2 2 1 2 1 1 1 2 2 3 1 2 2 3 3 2 2\\r\\n2 105 58\\r\\n5 3 105 174 47 138\\r\\n0\\r\\n1 3\\r\\n0\\r\\n1 105\\r\\n3 3 105 8\\r\\n2 162 105\\r\\n3 105 174 44\\r\\n4 3 98 105 174\\r\\n1 56\\r...', 'output': ['213']}, {'input': '200\\r\\n3 3 1 3 2 3 2 3 1 3 3 1 1 2 3 1 2 2 2 3 2 2 2 2 1 3 3 2 2 2 3 3 3 3 1 1 3 1 3 1 2 1 2 3 2 2 3 3 3 3 1 3 1 3 1 3 3 3 2 2 1 1 2 1 2 2 2 2 1 2 1 1 2 3 2 3 2 2 2 3 3 3 3 3 2 2 1 1 1 2 1 1 2 3 2 3 1 3 1 1 1 3 3 2 3 2 1 3 1 3 1 2 2 2 2 1 1 2 2 3 2 1 2 2 3 3 1 1 3 3 3 3 1 1 1 3 1 3 2 1 1 3 2 1 1 2 3 3 3 3 2 2 1 2 3 2 2 2 1 3 2 1 2 1 3 2 3 3 1 3 3 3 2 1 3 3 2 2 1 2 2 1 1 3 2 1 3 3 2 1 1 2 3 1 2 2 2 2 3 1\\r\\n0\\r\\n3 7 146 123\\r\\n1 71\\r\\n4 62 140 24 93\\r\\n0\\r\\n7 41 186 144 104 10 32 189\\r\\n1 71\\r\\n1 71\\r\\n0\\r\\n6 71 62 24 72 123 104...', 'output': ['215']}, {'input': '200\\r\\n1 2 3 1 1 1 2 2 2 2 1 2 1 2 3 2 2 3 2 1 2 1 1 2 2 1 2 2 3 1 2 3 3 3 1 1 1 2 1 1 1 1 1 1 1 2 3 2 1 1 3 2 1 2 1 1 3 3 1 3 2 3 2 1 3 3 3 3 1 1 3 3 3 1 2 1 1 1 1 1 1 1 1 2 1 3 3 1 2 1 2 1 2 2 1 2 1 2 3 3 2 2 2 1 1 2 2 3 3 1 1 1 2 2 3 1 3 2 1 3 1 2 1 1 2 1 2 3 1 1 1 2 2 2 3 3 2 3 3 3 3 1 1 2 3 3 3 1 1 1 1 1 3 2 1 3 2 2 2 3 3 2 3 2 2 1 2 2 3 1 2 2 1 1 1 3 3 1 3 1 1 2 1 3 1 2 3 1 1 2 2 2 3 1 2 2 2 1 2 3\\r\\n2 49 38\\r\\n3 200 49 38\\r\\n5 159 38 94 182 192\\r\\n4 49 38 94 148\\r\\n2 200 159\\r\\n7 9 38 111 89 94 92 125\\r\\n8 38 68 17...', 'output': ['213']}, {'input': '200\\r\\n2 3 1 2 1 3 2 1 1 2 1 2 3 3 1 2 1 3 3 2 1 1 3 1 2 3 3 3 1 1 3 1 1 1 2 3 3 3 1 2 3 2 2 1 2 3 3 1 1 2 1 3 3 1 2 3 3 2 2 1 2 1 2 1 3 2 2 3 2 2 1 1 3 3 2 2 1 1 3 1 1 1 3 1 3 1 1 3 1 3 2 3 1 3 1 1 3 2 3 2 2 1 3 3 2 2 2 2 3 3 1 1 1 1 2 1 1 1 3 1 3 2 1 2 1 3 3 2 2 2 1 2 2 2 1 3 2 1 3 2 1 2 2 2 2 1 1 3 2 1 1 2 1 1 1 1 1 3 1 2 2 2 3 2 3 2 3 3 2 3 2 3 2 1 3 3 3 3 3 2 1 3 1 3 1 3 1 1 3 2 1 3 1 3 1 2 1 3 3 1\\r\\n5 38 67 92 180 132\\r\\n4 119 69 116 67\\r\\n0\\r\\n1 135\\r\\n9 193 67 122 7 15 45 2 180 129\\r\\n2 143 195\\r\\n3 176 38 175\\r\\n0...', 'output': ['212']}, {'input': '200\\r\\n2 3 3 1 1 1 3 3 3 3 1 1 1 1 2 2 2 2 2 1 3 1 2 3 1 1 1 3 2 2 1 2 2 3 3 2 3 2 2 2 3 2 3 3 2 2 1 2 3 3 1 1 1 2 2 3 1 2 1 3 3 2 1 3 3 3 2 2 1 2 3 2 2 1 2 1 2 2 1 3 3 2 2 3 3 2 3 1 3 3 1 2 1 1 1 3 1 2 1 2 3 1 3 2 2 1 2 3 1 2 3 3 1 2 1 1 2 2 2 1 3 2 3 3 2 1 2 3 3 3 1 2 3 1 1 1 2 1 3 3 2 3 1 1 2 2 1 3 3 3 3 2 3 2 2 1 1 2 3 1 3 1 3 3 3 3 1 3 2 3 2 2 3 2 3 1 2 2 2 3 2 2 1 1 1 3 1 3 1 2 1 3 1 1 3 2 2 2 3 1\\r\\n2 14 181\\r\\n3 83 181 61\\r\\n3 59 181 60\\r\\n4 181 164 72 138\\r\\n2 109 181\\r\\n3 176 181 79\\r\\n5 118 109 181 135 142\\r\\n2 1...', 'output': ['215']}, {'input': '200\\r\\n3 3 2 2 3 2 1 1 1 1 3 3 1 2 2 2 1 1 3 1 3 3 1 2 3 1 3 2 3 2 2 3 2 2 2 3 1 2 2 1 1 3 3 1 3 3 2 1 3 2 1 1 3 3 2 1 3 1 1 2 3 2 1 2 3 1 2 2 3 1 2 1 1 3 1 3 2 3 1 3 1 3 2 2 2 1 2 1 2 2 2 2 3 1 2 1 1 2 3 3 1 2 1 2 1 2 2 3 2 2 3 2 1 3 2 1 1 1 3 3 3 2 2 3 2 2 3 3 2 1 1 2 1 1 3 3 2 2 3 1 1 2 2 2 3 1 3 2 3 2 2 1 2 1 3 2 2 3 1 2 1 2 2 1 3 3 2 2 3 2 3 2 3 2 1 1 1 3 2 2 1 3 2 2 1 1 2 3 1 1 1 1 2 2 1 2 3 3 1 3\\r\\n110 6 89 9 11 54 82 39 183 22 93 96 109 24 42 45 104 75 190 147 90 68 188 133 62 117 139 154 91 177 44 92...', 'output': ['346']}, {'input': '200\\r\\n1 1 1 3 2 3 1 2 2 2 1 1 1 3 2 2 3 1 1 2 1 2 1 2 2 3 2 2 2 2 1 3 1 1 1 3 2 2 3 2 3 3 1 2 1 1 2 3 1 1 2 3 2 3 1 1 2 1 2 1 2 3 2 3 1 1 2 1 1 3 2 2 1 1 1 2 1 1 1 1 1 3 1 1 3 3 3 1 3 2 1 2 1 1 1 3 1 1 3 2 3 1 1 3 3 1 1 1 1 1 3 2 2 3 1 1 2 3 3 1 1 3 3 2 3 2 2 1 2 3 3 1 1 1 1 3 3 2 3 2 3 3 3 2 3 1 2 2 3 1 3 2 1 3 1 2 3 3 1 1 2 2 2 3 2 3 2 1 3 3 2 1 3 1 3 2 2 2 2 1 2 2 1 1 2 3 1 2 3 2 1 2 1 1 2 2 1 3 2 3\\r\\n23 109 172 111 25 46 157 144 72 156 94 110 22 60 98 118 171 189 86 42 117 186 8 161\\r\\n43 111 25 197 46 157...', 'output': ['338']}, {'input': '200\\r\\n3 2 3 1 2 1 2 3 3 1 3 2 3 1 1 3 3 2 2 2 1 2 2 3 1 1 1 2 3 3 2 3 3 2 3 2 2 1 3 3 2 1 3 3 2 2 1 1 1 2 3 1 3 3 2 3 1 3 3 3 3 3 3 2 2 1 2 3 3 1 2 1 1 1 3 1 1 3 1 1 2 2 2 2 3 3 3 1 1 2 3 2 1 3 2 2 1 2 3 1 2 3 3 3 3 3 2 1 1 3 3 2 3 1 3 3 3 1 2 1 2 2 1 1 3 2 1 1 1 3 3 3 3 2 2 1 3 2 1 2 3 2 1 1 1 1 3 2 3 1 2 1 1 3 2 2 3 1 3 1 2 3 1 1 3 2 2 1 3 2 2 3 1 1 2 2 2 1 1 2 3 1 1 1 2 2 2 2 2 2 1 3 3 2 1 3 2 3 3 1\\r\\n25 200 2 127 5 69 99 52 174 194 19 169 106 163 40 177 84 178 108 112 21 17 42 162 33 122\\r\\n1 200\\r\\n46 200 2...', 'output': ['335']}, {'input': '200\\r\\n2 2 3 3 3 1 3 3 1 3 2 3 2 3 2 3 1 1 1 3 3 3 2 2 3 3 2 1 3 1 1 3 3 3 3 3 1 2 3 2 3 2 1 1 1 3 3 2 2 3 2 1 2 3 1 2 2 2 3 3 3 2 3 2 3 3 3 1 2 2 1 2 3 3 3 1 1 3 3 1 2 1 1 3 3 1 2 3 1 3 3 2 2 3 2 3 1 1 2 1 1 3 1 3 2 2 2 3 1 2 1 1 2 3 2 2 1 1 3 1 1 3 1 2 1 1 3 1 2 3 1 2 3 2 3 1 1 3 1 1 2 1 1 2 3 3 1 3 1 1 3 1 3 2 3 1 2 2 1 2 1 2 3 3 3 1 2 3 2 1 3 3 3 1 1 3 2 3 2 3 1 2 2 3 1 3 1 2 2 1 2 3 1 3 2 1 3 3 3 2\\r\\n84 138 10 57 184 16 9 11 15 2 176 33 43 6 91 158 194 27 18 31 141 167 193 150 102 41 53 197 191 94 66 49 ...', 'output': ['339']}, {'input': '200\\r\\n2 2 3 1 3 2 2 3 3 1 2 3 1 1 2 1 3 3 2 3 3 3 3 3 3 2 2 1 3 1 1 1 2 3 3 1 1 3 1 2 3 3 3 1 2 1 3 3 2 1 3 2 1 3 2 2 3 3 1 3 3 1 2 2 2 2 3 3 1 1 2 3 3 1 1 3 1 1 2 3 2 2 3 3 1 2 1 3 3 1 1 3 2 2 2 1 2 1 1 3 2 1 2 3 3 3 3 1 1 3 1 1 1 2 3 1 2 2 3 1 1 2 3 3 1 3 3 3 2 1 1 2 2 3 3 1 3 3 1 1 1 3 2 1 2 2 2 3 3 1 1 1 3 2 3 3 2 3 3 2 3 2 1 1 3 2 1 3 3 1 2 2 2 3 1 1 2 3 2 2 3 2 1 2 2 1 1 2 2 1 3 2 3 2 1 2 1 2 2 3\\r\\n0\\r\\n43 1 121 139 184 5 124 152 43 197 25 149 186 23 94 80 188 91 187 68 49 176 153 169 36 110 26 38 3 195 ...', 'output': ['387']}, {'input': '200\\r\\n2 3 1 2 3 2 3 2 2 3 2 2 1 2 3 1 1 2 3 2 3 1 1 1 2 1 3 1 1 1 3 3 3 2 3 1 2 2 2 3 2 3 3 3 2 1 3 1 2 1 1 1 3 3 2 3 2 2 3 2 3 3 3 2 2 3 3 2 2 3 1 3 3 2 3 1 2 1 2 1 3 3 2 1 1 2 3 3 2 1 2 1 2 1 1 3 2 2 1 3 3 3 2 1 1 3 2 3 1 1 3 3 2 1 3 1 2 2 2 1 3 3 3 1 1 2 2 1 1 2 3 3 1 3 3 3 3 2 3 1 3 2 1 3 1 1 3 1 2 2 1 3 3 2 1 3 1 2 2 1 2 2 1 1 1 1 1 1 2 2 2 1 3 2 1 3 1 3 1 2 2 2 1 2 1 2 3 3 1 3 2 3 1 2 1 2 3 1 3 1\\r\\n48 98 53 140 115 193 33 91 105 9 19 143 72 194 84 88 90 17 30 52 71 36 118 23 21 180 51 27 81 178 95 43 9...', 'output': ['411']}, {'input': '200\\r\\n1 1 1 3 2 3 1 2 2 3 2 3 2 3 2 3 2 3 2 1 3 2 2 2 2 1 1 3 1 1 3 2 3 2 1 1 3 1 3 3 1 2 1 3 3 3 2 1 2 2 3 1 1 2 3 3 1 1 1 3 2 2 1 3 2 3 3 1 2 1 1 3 1 3 1 3 2 2 1 1 2 1 2 3 2 1 3 3 3 1 2 1 3 3 1 3 2 3 3 1 3 1 1 3 2 3 2 3 1 3 3 3 2 2 3 2 1 2 2 3 2 1 3 3 2 2 2 2 3 3 1 1 2 2 3 2 2 2 2 1 1 2 3 1 2 2 1 1 2 2 2 2 1 2 3 2 1 1 1 2 3 2 3 1 3 3 2 1 1 2 2 3 1 3 3 2 2 1 2 2 3 1 2 1 2 3 2 2 3 1 3 1 2 1 3 3 2 2 1 2\\r\\n85 58 117 3 98 12 35 75 167 155 18 169 88 22 145 132 49 29 71 184 161 9 142 153 189 67 118 112 26 92 139 ...', 'output': ['381']}, {'input': '200\\r\\n2 1 2 2 2 2 1 3 2 3 1 3 3 1 3 3 2 2 2 2 1 3 1 1 2 1 3 2 3 2 2 1 1 1 2 1 2 2 2 1 3 1 1 1 1 1 2 2 1 1 3 1 1 2 1 1 3 2 2 2 3 2 1 1 2 3 1 1 2 1 3 1 3 1 1 2 1 2 3 3 3 3 2 2 2 2 1 3 2 1 3 1 2 3 3 1 3 2 1 1 2 3 2 1 3 2 3 3 3 3 1 2 1 2 3 2 2 1 1 3 1 2 3 2 3 2 1 1 1 3 2 3 1 2 1 1 2 1 3 1 2 1 1 2 3 1 3 3 1 3 2 3 1 1 1 3 1 3 1 1 2 1 2 3 2 3 3 3 2 3 1 3 1 2 3 1 3 1 1 1 3 1 2 3 1 1 2 3 3 1 1 2 2 1 3 2 3 1 2 1\\r\\n131 141 103 74 113 45 96 142 55 196 126 6 77 139 102 15 194 34 105 158 145 187 134 27 162 100 57 8 183 29...', 'output': ['391']}, {'input': '200\\r\\n3 1 3 3 1 3 3 2 1 2 2 3 3 2 1 1 1 2 2 2 2 2 3 1 1 3 1 1 1 3 3 3 2 2 3 3 3 1 1 1 1 3 1 3 3 2 1 3 2 3 3 3 2 2 3 1 2 3 1 2 3 2 2 2 3 2 1 3 2 1 2 3 1 2 1 2 2 3 3 3 2 1 1 3 2 1 1 2 2 1 1 3 2 3 2 2 3 1 3 2 2 1 1 3 2 1 1 2 2 1 2 2 2 2 1 3 2 2 1 1 2 1 1 1 2 1 1 2 3 1 3 1 3 3 3 2 3 1 3 3 2 2 2 3 1 2 1 2 3 2 1 2 2 2 1 3 2 2 1 2 2 3 2 2 3 3 1 1 3 1 2 2 2 3 1 2 3 3 2 3 3 2 3 2 3 2 3 2 2 3 1 2 1 1 2 3 3 1 1 2\\r\\n28 123 137 3 177 73 48 126 94 112 66 186 197 78 26 181 180 187 117 142 29 189 31 191 24 125 45 200 140\\r\\n1...', 'output': ['390']}, {'input': '200\\r\\n1 1 1 2 3 1 3 2 1 1 1 1 1 3 2 3 1 2 2 1 2 2 2 1 1 2 2 2 2 3 3 3 3 3 2 3 1 3 1 1 3 3 2 1 2 2 3 2 1 2 1 3 3 3 2 2 1 2 1 1 1 2 2 1 3 3 3 1 1 2 1 2 1 3 2 1 2 2 2 3 3 1 2 2 2 1 2 3 2 3 1 2 1 3 2 3 1 2 1 3 3 2 1 3 1 2 2 2 1 2 1 2 3 3 3 3 1 3 1 2 1 1 1 2 2 1 2 3 3 1 1 2 3 3 3 2 3 1 1 3 1 1 3 3 3 1 1 3 1 2 3 3 2 3 3 3 2 1 1 1 1 2 3 2 3 3 2 1 3 1 2 3 2 1 1 3 3 2 1 3 3 1 1 1 2 3 1 3 1 3 3 2 3 3 1 1 1 3 3 1\\r\\n141 15 147 168 123 32 99 115 22 9 10 125 79 96 145 126 59 17 20 188 124 21 172 23 14 177 26 112 150 54 47...', 'output': ['383']}, {'input': '200\\r\\n3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 2 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 2 3 1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n...', 'output': ['202']}, {'input': '200\\r\\n3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 3\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n...', 'output': ['201']}, {'input': '200\\r\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2\\r\\n0\\r\\n1 1\\r\\n1 2\\r\\n1 2\\r\\n1 1\\r\\n1 5\\r\\n1 5\\r\\n1 6\\r\\n1 7\\r\\n1 8\\r\\n1 5\\r\\n1 8\\r\\n1 6\\r\\n1 12\\r\\n1 14\\r\\n1 2\\r\\n1 12\\r\\n1 4\\r\\n1 9\\r\\n1 2\\r\\n1 17...', 'output': ['214']}, {'input': '4\\r\\n1 1 2 3\\r\\n1 2\\r\\n1 3\\r\\n0\\r\\n1 1\\r\\n', 'output': ['8']}, {'input': '15\\r\\n3 2 2 2 1 1 2 1 1 2 2 3 3 3 2\\r\\n1 13\\r\\n4 13 1 8 14\\r\\n10 5 13 1 8 14 4 2 11 15 10\\r\\n6 5 13 1 8 9 14\\r\\n0\\r\\n11 5 13 1 8 14 4 2 11 10 3 12\\r\\n11 13 1 8 14 4 2 11 15 10 3 6\\r\\n2 13 1\\r\\n4 5 13 1 8\\r\\n8 5 13 1 8 14 2 11 15\\r\\n6 5 13 1 8 14 2\\r\\n10 5 13 1 8 14 2 11 15 10 3\\r\\n0...', 'output': ['23']}, {'input': '17\\r\\n2 3 1 3 3 3 1 1 1 2 2 2 3 2 3 3 2\\r\\n5 4 14 2 11 7\\r\\n3 13 4 14\\r\\n7 6 4 14 2 1 10 12\\r\\n2 6 13\\r\\n9 4 2 9 8 7 17 1 10 12\\r\\n0\\r\\n5 4 14 2 9 11\\r\\n4 13 4 2 11\\r\\n4 13 4 14 2\\r\\n7 13 4 2 11 8 7 1\\r\\n4 13 4 14 2\\r\\n8 6 4 2 8 7 17 1 10\\r\\n0\\r\\n1 4\\r\\n7 13 4 14 2 9 8 7\\r\\n6 4 2 17 1 10 ...', 'output': ['27']}, {'input': '18\\r\\n1 2 3 3 2 2 1 1 3 1 2 3 2 3 1 2 2 3\\r\\n5 9 3 14 12 2\\r\\n7 9 4 3 14 16 7 12\\r\\n1 9\\r\\n1 9\\r\\n6 9 14 12 1 6 15\\r\\n6 9 14 12 2 1 11\\r\\n2 9 14\\r\\n7 9 14 7 12 2 1 6\\r\\n0\\r\\n6 9 18 14 7 1 6\\r\\n4 9 14 7 1\\r\\n2 9 14\\r\\n6 9 3 14 7 1 6\\r\\n2 9 3\\r\\n9 9 3 14 16 12 2 1 6 17\\r\\n4 9 4 18 14\\r\\n8 9 1...', 'output': ['26']}, {'input': '19\\r\\n2 3 3 2 3 1 3 1 2 2 2 1 1 1 2 2 1 3 3\\r\\n0\\r\\n3 1 10 6\\r\\n8 1 6 2 17 18 12 15 7\\r\\n5 6 2 9 17 18\\r\\n6 6 2 17 18 12 16\\r\\n1 11\\r\\n9 1 11 6 2 17 18 4 12 15\\r\\n3 1 6 2\\r\\n4 1 6 2 8\\r\\n0\\r\\n1 1\\r\\n5 1 6 2 17 18\\r\\n12 1 10 6 2 8 17 18 4 12 15 7 3\\r\\n10 11 6 2 17 18 4 12 16 15 7\\r\\n8 1 ...', 'output': ['30']}, {'input': '20\\r\\n2 2 3 2 3 1 1 3 1 1 1 1 1 3 2 1 3 1 1 1\\r\\n1 7\\r\\n13 7 1 11 4 6 16 20 12 5 18 19 15 10\\r\\n8 7 1 11 4 6 17 8 16\\r\\n3 7 1 11\\r\\n9 7 1 11 4 6 8 20 12 3\\r\\n4 7 1 11 4\\r\\n0\\r\\n6 7 1 11 4 6 17\\r\\n4 7 1 11 4\\r\\n7 7 1 11 4 6 17 5\\r\\n2 7 1\\r\\n9 7 1 11 4 6 17 8 14 20\\r\\n11 7 1 11 4 6 20...', 'output': ['35']}, {'input': '200\\r\\n3 3 3 1 3 1 3 1 1 1 3 2 1 1 3 1 3 3 2 2 2 2 3 3 1 3 2 3 1 2 3 3 2 2 1 2 3 3 1 3 1 3 3 3 1 2 1 3 3 1 2 1 2 3 2 2 3 2 2 3 2 3 1 1 1 2 2 2 1 3 1 2 1 3 2 3 2 1 2 2 1 1 2 2 1 3 3 2 2 1 3 2 3 2 3 1 2 2 2 3 3 2 2 3 2 3 3 3 3 3 2 2 3 3 2 3 2 1 2 3 2 3 2 1 2 ...', 'output': ['224']}, {'input': '200\\r\\n1 2 3 2 1 1 3 3 3 3 2 1 1 2 3 3 1 3 2 3 1 3 3 1 2 3 3 2 2 1 3 3 3 3 1 1 2 2 2 2 2 1 1 2 3 2 3 3 3 2 2 1 2 3 2 1 1 1 1 1 3 2 2 2 2 1 3 1 2 2 3 1 1 2 1 1 1 1 2 2 2 1 3 2 1 1 2 2 2 1 1 3 1 3 3 1 3 3 2 3 2 2 3 1 3 3 1 3 3 3 3 2 1 3 1 3 2 2 1 3 2 2 3 1 2 ...', 'output': ['220']}, {'input': '200\\r\\n1 3 2 3 2 3 3 3 2 2 3 2 3 1 1 3 3 2 2 2 1 1 3 3 3 1 1 1 1 2 2 3 1 3 2 3 3 2 1 2 3 2 2 1 2 1 3 3 3 1 3 3 3 2 2 1 3 3 1 1 2 1 2 2 3 3 3 2 1 2 2 2 2 3 2 1 3 1 3 2 2 2 1 3 2 2 3 3 1 3 3 1 3 1 1 2 3 1 1 2 3 1 3 2 1 1 2 2 2 1 1 3 3 1 1 3 1 1 2 1 3 2 1 2 2 ...', 'output': ['219']}, {'input': '200\\r\\n1 3 3 1 1 2 1 3 2 2 3 2 2 1 3 1 1 3 3 2 3 3 2 3 2 3 1 2 3 3 2 2 3 3 1 3 3 1 1 1 2 1 1 1 2 2 2 3 2 3 2 1 1 3 2 3 2 1 1 3 3 1 3 1 3 3 3 3 1 2 3 2 1 1 1 2 1 3 2 3 2 1 3 3 2 2 3 3 1 2 1 3 1 2 2 1 1 3 3 3 3 2 1 1 2 1 3 1 3 3 1 2 1 2 1 2 2 1 3 1 2 3 2 3 2 ...', 'output': ['222']}, {'input': '200\\r\\n3 1 2 3 2 1 3 2 2 1 3 1 1 1 3 1 3 3 1 1 3 1 2 2 2 1 3 3 2 1 3 2 3 3 3 2 2 1 3 1 2 1 3 2 2 2 2 1 1 2 2 3 1 2 1 3 2 3 2 1 2 1 2 3 3 2 2 2 2 1 2 2 1 2 3 1 1 1 3 3 1 3 2 3 1 2 2 1 2 2 3 3 1 1 1 2 1 1 3 1 3 2 2 1 3 1 2 3 1 3 2 3 3 3 1 3 1 2 3 3 2 2 2 2 2 ...', 'output': ['223']}, {'input': '200\\r\\n3 2 2 1 3 2 2 3 1 1 2 3 3 1 2 2 3 3 1 1 3 3 3 1 1 3 2 3 2 3 3 2 2 1 3 2 1 2 3 1 1 3 3 2 3 1 1 2 3 2 1 3 2 2 3 3 1 1 1 3 2 1 3 1 2 1 2 1 2 3 1 3 2 2 1 1 1 1 3 2 1 1 1 1 3 1 3 1 3 3 1 2 2 2 1 2 3 1 2 3 1 1 2 3 3 3 1 3 2 2 2 2 2 2 3 1 1 3 1 3 1 1 3 3 1 ...', 'output': ['222']}, {'input': '200\\r\\n1 2 3 3 1 2 1 1 2 1 1 1 1 2 3 3 3 1 2 2 2 2 3 2 1 2 2 3 3 1 1 3 1 1 1 3 1 3 3 2 2 3 3 3 2 3 1 1 1 1 2 3 2 3 3 3 1 1 3 3 1 2 3 1 3 1 3 2 3 2 1 3 1 1 1 2 1 3 2 2 2 3 2 2 2 2 1 3 3 3 3 1 3 1 2 1 2 1 2 1 2 3 2 3 1 3 1 2 1 1 2 3 3 1 2 1 1 1 1 2 3 1 1 1 2 ...', 'output': ['219']}, {'input': '200\\r\\n3 1 3 3 2 1 2 1 1 3 3 3 2 3 2 3 3 2 1 1 2 3 2 2 1 1 2 2 2 3 3 2 2 3 2 1 2 3 1 1 3 1 1 2 2 2 3 3 2 2 3 2 3 1 2 2 2 1 3 1 3 3 3 2 3 2 2 1 2 1 1 3 2 2 3 3 2 3 2 1 2 3 3 3 3 1 2 1 1 3 1 3 1 2 2 1 3 1 1 2 2 3 1 3 1 2 3 3 2 1 2 1 2 1 2 3 2 1 1 2 1 3 1 3 1 ...', 'output': ['221']}, {'input': '200\\r\\n2 1 1 3 2 1 3 2 1 2 2 2 3 1 3 1 3 3 2 2 2 3 1 2 1 2 1 2 1 3 1 3 2 2 2 2 2 2 3 2 3 2 3 2 2 3 2 3 2 3 2 3 3 1 1 3 2 3 3 1 3 2 1 1 1 3 1 2 2 2 2 1 2 3 2 1 1 3 1 1 3 2 1 3 2 2 1 2 1 2 1 3 2 2 2 1 2 1 2 3 3 3 1 1 2 2 3 3 3 3 1 3 1 2 1 3 1 2 2 2 2 1 2 1 2 ...', 'output': ['216']}, {'input': '200\\r\\n1 2 1 3 2 1 1 3 3 3 1 3 1 2 1 1 3 2 2 3 2 3 1 2 2 3 2 3 2 3 2 1 3 1 3 3 3 3 2 3 2 2 3 3 2 3 2 2 1 3 2 2 2 1 2 1 2 3 3 1 3 1 2 1 1 2 2 1 1 2 3 3 2 2 1 3 1 2 2 2 1 2 2 3 3 2 1 1 1 1 2 1 3 1 3 2 1 3 3 2 1 2 3 1 3 2 2 2 3 3 2 1 3 3 2 2 3 1 3 1 2 2 3 1 3 ...', 'output': ['219']}, {'input': '200\\r\\n3 3 2 3 2 3 1 3 2 2 1 3 2 2 1 3 1 3 3 3 2 2 2 2 1 1 3 1 1 2 1 3 1 3 2 1 1 2 3 3 2 3 1 1 3 2 2 2 3 2 1 3 3 2 3 2 2 2 3 3 2 3 2 3 1 2 2 3 3 2 3 3 1 3 1 3 1 1 1 3 1 1 2 3 2 1 1 1 2 2 2 2 3 2 1 2 3 1 3 3 1 2 2 1 2 1 1 3 3 3 1 1 2 3 1 2 3 2 2 1 2 2 3 1 3 ...', 'output': ['213']}, {'input': '200\\r\\n3 2 2 2 2 3 1 1 1 2 2 2 3 2 3 3 3 1 3 2 3 1 2 2 1 1 1 3 1 3 1 1 1 1 2 3 3 1 3 1 2 2 1 2 3 2 1 2 2 1 1 2 1 2 3 1 3 1 1 2 1 3 2 3 1 2 2 3 1 3 2 2 2 1 1 2 1 1 2 2 1 2 2 2 2 2 3 1 3 2 2 1 3 2 2 2 3 1 3 1 3 1 1 1 2 1 1 3 3 1 3 2 3 3 1 3 3 2 1 1 3 1 1 2 3 ...', 'output': ['210']}, {'input': '200\\r\\n2 1 2 3 2 2 1 2 2 2 1 3 2 2 2 2 1 1 3 2 2 2 3 3 3 1 2 3 2 1 2 2 1 3 3 2 1 3 3 1 1 2 2 2 3 1 2 3 1 1 3 3 1 1 1 1 2 2 1 2 2 2 3 2 2 1 2 3 3 2 2 3 3 3 2 1 1 2 1 1 1 2 3 3 2 3 1 2 3 1 3 1 1 1 3 1 1 1 1 3 2 3 3 2 2 1 1 2 2 1 1 1 2 3 1 3 3 2 2 1 1 3 1 1 2 ...', 'output': ['210']}, {'input': '200\\r\\n3 1 1 1 3 3 3 1 3 3 1 3 1 2 3 3 3 2 1 2 2 3 3 1 1 3 2 1 3 2 1 2 3 2 2 1 1 2 2 1 1 3 2 2 1 2 2 1 2 2 1 3 1 2 3 1 3 3 1 3 1 3 2 3 2 2 1 2 3 2 1 3 2 3 1 1 1 1 1 1 2 2 3 2 3 3 3 1 3 1 2 3 1 1 3 2 3 2 1 1 3 2 2 2 3 2 1 3 2 1 3 2 3 2 2 1 2 1 2 1 3 2 1 2 1 ...', 'output': ['212']}, {'input': '200\\r\\n1 1 3 3 2 2 2 2 2 3 2 3 1 1 1 2 2 2 3 3 1 1 2 1 3 1 3 2 2 2 3 1 3 2 3 2 2 3 1 1 3 3 2 3 3 3 2 2 1 2 3 3 2 2 1 3 2 1 2 3 1 3 2 1 1 1 2 1 3 1 1 3 2 3 1 2 3 3 2 1 2 1 2 3 3 3 1 1 3 3 2 3 3 1 2 2 3 1 3 3 2 1 3 3 2 2 3 2 2 3 1 2 2 3 2 3 2 3 1 3 1 1 3 2 2 ...', 'output': ['208']}, {'input': '200\\r\\n2 2 2 3 2 1 1 2 3 1 3 2 1 1 1 2 2 2 3 1 3 3 2 1 1 2 1 3 1 3 3 1 1 3 2 1 3 2 2 3 1 2 3 2 2 2 3 3 1 1 3 3 1 2 3 2 3 2 1 1 2 3 3 2 3 3 2 1 3 2 2 3 1 2 2 2 2 2 3 2 3 3 2 3 3 3 3 1 2 2 2 1 3 2 1 1 2 1 3 1 1 3 3 1 1 2 1 2 2 3 1 1 2 1 1 1 2 3 2 2 1 1 1 1 3 ...', 'output': ['213']}, {'input': '200\\r\\n3 3 1 3 2 3 2 3 1 3 3 1 1 2 3 1 2 2 2 3 2 2 2 2 1 3 3 2 2 2 3 3 3 3 1 1 3 1 3 1 2 1 2 3 2 2 3 3 3 3 1 3 1 3 1 3 3 3 2 2 1 1 2 1 2 2 2 2 1 2 1 1 2 3 2 3 2 2 2 3 3 3 3 3 2 2 1 1 1 2 1 1 2 3 2 3 1 3 1 1 1 3 3 2 3 2 1 3 1 3 1 2 2 2 2 1 1 2 2 3 2 1 2 2 3 ...', 'output': ['215']}, {'input': '200\\r\\n1 2 3 1 1 1 2 2 2 2 1 2 1 2 3 2 2 3 2 1 2 1 1 2 2 1 2 2 3 1 2 3 3 3 1 1 1 2 1 1 1 1 1 1 1 2 3 2 1 1 3 2 1 2 1 1 3 3 1 3 2 3 2 1 3 3 3 3 1 1 3 3 3 1 2 1 1 1 1 1 1 1 1 2 1 3 3 1 2 1 2 1 2 2 1 2 1 2 3 3 2 2 2 1 1 2 2 3 3 1 1 1 2 2 3 1 3 2 1 3 1 2 1 1 2 ...', 'output': ['213']}, {'input': '200\\r\\n2 3 1 2 1 3 2 1 1 2 1 2 3 3 1 2 1 3 3 2 1 1 3 1 2 3 3 3 1 1 3 1 1 1 2 3 3 3 1 2 3 2 2 1 2 3 3 1 1 2 1 3 3 1 2 3 3 2 2 1 2 1 2 1 3 2 2 3 2 2 1 1 3 3 2 2 1 1 3 1 1 1 3 1 3 1 1 3 1 3 2 3 1 3 1 1 3 2 3 2 2 1 3 3 2 2 2 2 3 3 1 1 1 1 2 1 1 1 3 1 3 2 1 2 1 ...', 'output': ['212']}, {'input': '200\\r\\n2 3 3 1 1 1 3 3 3 3 1 1 1 1 2 2 2 2 2 1 3 1 2 3 1 1 1 3 2 2 1 2 2 3 3 2 3 2 2 2 3 2 3 3 2 2 1 2 3 3 1 1 1 2 2 3 1 2 1 3 3 2 1 3 3 3 2 2 1 2 3 2 2 1 2 1 2 2 1 3 3 2 2 3 3 2 3 1 3 3 1 2 1 1 1 3 1 2 1 2 3 1 3 2 2 1 2 3 1 2 3 3 1 2 1 1 2 2 2 1 3 2 3 3 2 ...', 'output': ['215']}, {'input': '200\\r\\n3 3 2 2 3 2 1 1 1 1 3 3 1 2 2 2 1 1 3 1 3 3 1 2 3 1 3 2 3 2 2 3 2 2 2 3 1 2 2 1 1 3 3 1 3 3 2 1 3 2 1 1 3 3 2 1 3 1 1 2 3 2 1 2 3 1 2 2 3 1 2 1 1 3 1 3 2 3 1 3 1 3 2 2 2 1 2 1 2 2 2 2 3 1 2 1 1 2 3 3 1 2 1 2 1 2 2 3 2 2 3 2 1 3 2 1 1 1 3 3 3 2 2 3 2 ...', 'output': ['346']}, {'input': '200\\r\\n1 1 1 3 2 3 1 2 2 2 1 1 1 3 2 2 3 1 1 2 1 2 1 2 2 3 2 2 2 2 1 3 1 1 1 3 2 2 3 2 3 3 1 2 1 1 2 3 1 1 2 3 2 3 1 1 2 1 2 1 2 3 2 3 1 1 2 1 1 3 2 2 1 1 1 2 1 1 1 1 1 3 1 1 3 3 3 1 3 2 1 2 1 1 1 3 1 1 3 2 3 1 1 3 3 1 1 1 1 1 3 2 2 3 1 1 2 3 3 1 1 3 3 2 3 ...', 'output': ['338']}, {'input': '200\\r\\n3 2 3 1 2 1 2 3 3 1 3 2 3 1 1 3 3 2 2 2 1 2 2 3 1 1 1 2 3 3 2 3 3 2 3 2 2 1 3 3 2 1 3 3 2 2 1 1 1 2 3 1 3 3 2 3 1 3 3 3 3 3 3 2 2 1 2 3 3 1 2 1 1 1 3 1 1 3 1 1 2 2 2 2 3 3 3 1 1 2 3 2 1 3 2 2 1 2 3 1 2 3 3 3 3 3 2 1 1 3 3 2 3 1 3 3 3 1 2 1 2 2 1 1 3 ...', 'output': ['335']}, {'input': '200\\r\\n2 2 3 3 3 1 3 3 1 3 2 3 2 3 2 3 1 1 1 3 3 3 2 2 3 3 2 1 3 1 1 3 3 3 3 3 1 2 3 2 3 2 1 1 1 3 3 2 2 3 2 1 2 3 1 2 2 2 3 3 3 2 3 2 3 3 3 1 2 2 1 2 3 3 3 1 1 3 3 1 2 1 1 3 3 1 2 3 1 3 3 2 2 3 2 3 1 1 2 1 1 3 1 3 2 2 2 3 1 2 1 1 2 3 2 2 1 1 3 1 1 3 1 2 1 ...', 'output': ['339']}, {'input': '200\\r\\n2 2 3 1 3 2 2 3 3 1 2 3 1 1 2 1 3 3 2 3 3 3 3 3 3 2 2 1 3 1 1 1 2 3 3 1 1 3 1 2 3 3 3 1 2 1 3 3 2 1 3 2 1 3 2 2 3 3 1 3 3 1 2 2 2 2 3 3 1 1 2 3 3 1 1 3 1 1 2 3 2 2 3 3 1 2 1 3 3 1 1 3 2 2 2 1 2 1 1 3 2 1 2 3 3 3 3 1 1 3 1 1 1 2 3 1 2 2 3 1 1 2 3 3 1 ...', 'output': ['387']}, {'input': '200\\r\\n2 3 1 2 3 2 3 2 2 3 2 2 1 2 3 1 1 2 3 2 3 1 1 1 2 1 3 1 1 1 3 3 3 2 3 1 2 2 2 3 2 3 3 3 2 1 3 1 2 1 1 1 3 3 2 3 2 2 3 2 3 3 3 2 2 3 3 2 2 3 1 3 3 2 3 1 2 1 2 1 3 3 2 1 1 2 3 3 2 1 2 1 2 1 1 3 2 2 1 3 3 3 2 1 1 3 2 3 1 1 3 3 2 1 3 1 2 2 2 1 3 3 3 1 1 ...', 'output': ['411']}, {'input': '200\\r\\n1 1 1 3 2 3 1 2 2 3 2 3 2 3 2 3 2 3 2 1 3 2 2 2 2 1 1 3 1 1 3 2 3 2 1 1 3 1 3 3 1 2 1 3 3 3 2 1 2 2 3 1 1 2 3 3 1 1 1 3 2 2 1 3 2 3 3 1 2 1 1 3 1 3 1 3 2 2 1 1 2 1 2 3 2 1 3 3 3 1 2 1 3 3 1 3 2 3 3 1 3 1 1 3 2 3 2 3 1 3 3 3 2 2 3 2 1 2 2 3 2 1 3 3 2 ...', 'output': ['381']}, {'input': '200\\r\\n2 1 2 2 2 2 1 3 2 3 1 3 3 1 3 3 2 2 2 2 1 3 1 1 2 1 3 2 3 2 2 1 1 1 2 1 2 2 2 1 3 1 1 1 1 1 2 2 1 1 3 1 1 2 1 1 3 2 2 2 3 2 1 1 2 3 1 1 2 1 3 1 3 1 1 2 1 2 3 3 3 3 2 2 2 2 1 3 2 1 3 1 2 3 3 1 3 2 1 1 2 3 2 1 3 2 3 3 3 3 1 2 1 2 3 2 2 1 1 3 1 2 3 2 3 ...', 'output': ['391']}, {'input': '200\\r\\n3 1 3 3 1 3 3 2 1 2 2 3 3 2 1 1 1 2 2 2 2 2 3 1 1 3 1 1 1 3 3 3 2 2 3 3 3 1 1 1 1 3 1 3 3 2 1 3 2 3 3 3 2 2 3 1 2 3 1 2 3 2 2 2 3 2 1 3 2 1 2 3 1 2 1 2 2 3 3 3 2 1 1 3 2 1 1 2 2 1 1 3 2 3 2 2 3 1 3 2 2 1 1 3 2 1 1 2 2 1 2 2 2 2 1 3 2 2 1 1 2 1 1 1 2 ...', 'output': ['390']}, {'input': '200\\r\\n1 1 1 2 3 1 3 2 1 1 1 1 1 3 2 3 1 2 2 1 2 2 2 1 1 2 2 2 2 3 3 3 3 3 2 3 1 3 1 1 3 3 2 1 2 2 3 2 1 2 1 3 3 3 2 2 1 2 1 1 1 2 2 1 3 3 3 1 1 2 1 2 1 3 2 1 2 2 2 3 3 1 2 2 2 1 2 3 2 3 1 2 1 3 2 3 1 2 1 3 3 2 1 3 1 2 2 2 1 2 1 2 3 3 3 3 1 3 1 2 1 1 1 2 2 ...', 'output': ['383']}, {'input': '200\\r\\n3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 ...', 'output': ['201', '202']}, {'input': '200\\r\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 ...', 'output': ['214']}]", "source_code": "import java.util.*;\n\npublic class Solution{\n    static int min(int a,int b,int c){\n        if(a<b) return (b<c?a:b);\n        else return (a<c?a:c);\n    }\n    static int max(int a,int b,int c){\n        if(a>b) return (b>c?a:b);\n        else return (a>c?a:c);\n    }\n    \n    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int[] can = {in.nextInt(),in.nextInt(),in.nextInt()};\n        int[] cost = new int[n];\n        int[] prev = new int[n];\n        for(int i=0 ;i<n ; i++){\n            int k = in.nextInt();\n            for(int j=0 ;j<k ; j++){\n                int tmp = in.nextInt();\n                cost[i] = max(cost[i],cost[tmp-1]+1);\n                prev[i] = min(prev[i],prev[tmp-1],max(can[0],can[1],can[2]));\n            }\n        }\n        \n        int[] best = new int[3];\n        for(int i=0 ;i<3 ; i++){\n            best[i] = max(cost[0],cost[i+1]+2,cost[i+2]+1);\n        }\n        System.out.println(min(min(best[0],best[1],best[2]),prev[0],prev[1])+1);\n    }\n}\n"}
{"src_uid": "be42e213ff43e303e475d77a9560367f", "id": 107, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1700, "testcases": "[{'input': '1\\r\\n1\\r\\n0\\r\\n', 'output': ['1']}, {'input': '5\\r\\n2 2 1 1 3\\r\\n1 5\\r\\n2 5 1\\r\\n2 5 4\\r\\n1 5\\r\\n0\\r\\n', 'output': ['7']}, {'input': '7\\r\\n1 3 3 1 2 1 1\\r\\n0\\r\\n1 1\\r\\n1 1\\r\\n2 1 6\\r\\n3 1 2 7\\r\\n1 1\\r\\n1 1\\r\\n', 'output': ['11']}, {'input': '2\\r\\n2 1\\r\\n0\\r\\n1 1\\r\\n', 'output': ['4']}, {'input': '3\\r\\n2 1 2\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['4']}, {'input': '4\\r\\n2 1 1 1\\r\\n0\\r\\n0\\r\\n1 1\\r\\n1 3\\r\\n', 'output': ['6']}, {'input': '6\\r\\n1 1 2 3 3 1\\r\\n2 2 3\\r\\n0\\r\\n0\\r\\n0\\r\\n2 2 1\\r\\n1 1\\r\\n', 'output': ['10']}, {'input': '8\\r\\n2 2 2 1 1 2 1 1\\r\\n3 5 6 7\\r\\n1 5\\r\\n2 5 6\\r\\n1 5\\r\\n0\\r\\n1 5\\r\\n1 5\\r\\n2 5 6\\r\\n', 'output': ['11']}, {'input': '9\\r\\n3 3 2 1 3 1 2 2 1\\r\\n2 4 3\\r\\n0\\r\\n2 4 2\\r\\n0\\r\\n1 4\\r\\n2 4 2\\r\\n0\\r\\n1 4\\r\\n3 4 3 8\\r\\n', 'output': ['13']}, {'input': '10\\r\\n3 1 2 2 2 1 2 1 1 1\\r\\n0\\r\\n2 6 9\\r\\n0\\r\\n1 9\\r\\n0\\r\\n1 3\\r\\n4 3 6 5 2\\r\\n3 6 4 2\\r\\n0\\r\\n1 3\\r\\n', 'output': ['14']}, {'input': '11\\r\\n1 2 2 3 3 2 2 2 2 3 1\\r\\n1 4\\r\\n2 7 11\\r\\n0\\r\\n0\\r\\n1 2\\r\\n1 11\\r\\n0\\r\\n1 2\\r\\n3 7 11 2\\r\\n3 3 2 9\\r\\n0\\r\\n', 'output': ['14']}, {'input': '12\\r\\n1 3 2 2 1 3 2 1 3 2 2 2\\r\\n2 3 4\\r\\n3 12 11 10\\r\\n1 8\\r\\n2 8 7\\r\\n2 9 10\\r\\n1 3\\r\\n0\\r\\n0\\r\\n1 4\\r\\n4 3 1 12 9\\r\\n3 8 3 4\\r\\n1 4\\r\\n', 'output': ['18']}, {'input': '13\\r\\n3 3 2 2 1 3 1 1 1 1 2 1 2\\r\\n5 6 3 11 13 12\\r\\n1 6\\r\\n2 10 6\\r\\n3 6 3 11\\r\\n1 6\\r\\n1 10\\r\\n3 6 2 3\\r\\n4 6 3 9 11\\r\\n3 6 2 3\\r\\n0\\r\\n3 6 2 3\\r\\n4 6 3 4 13\\r\\n2 6 3\\r\\n', 'output': ['21']}, {'input': '14\\r\\n3 2 2 1 2 1 1 3 1 2 2 3 1 1\\r\\n2 9 13\\r\\n3 9 13 8\\r\\n2 9 6\\r\\n3 9 6 13\\r\\n1 9\\r\\n1 9\\r\\n3 9 6 13\\r\\n2 9 13\\r\\n0\\r\\n4 9 3 13 4\\r\\n4 9 6 13 2\\r\\n2 9 13\\r\\n1 9\\r\\n8 9 5 6 3 13 7 4 11\\r\\n', 'output': ['20']}, {'input': '15\\r\\n1 2 3 2 3 2 2 2 3 3 3 2 3 1 3\\r\\n5 2 7 4 3 6\\r\\n0\\r\\n2 7 4\\r\\n2 2 15\\r\\n1 7\\r\\n1 7\\r\\n0\\r\\n2 4 6\\r\\n1 6\\r\\n2 15 3\\r\\n4 12 2 15 7\\r\\n0\\r\\n3 2 5 6\\r\\n3 2 4 6\\r\\n1 2\\r\\n', 'output': ['20']}, {'input': '16\\r\\n3 3 1 3 2 3 2 2 3 1 2 3 2 2 2 3\\r\\n1 14\\r\\n4 14 10 13 6\\r\\n3 14 15 6\\r\\n1 14\\r\\n4 14 10 9 7\\r\\n4 14 10 13 9\\r\\n4 14 10 13 6\\r\\n4 14 4 12 3\\r\\n2 14 4\\r\\n1 14\\r\\n1 14\\r\\n2 14 1\\r\\n4 14 10 4 1\\r\\n0\\r\\n2 14 10\\r\\n1 14\\r\\n', 'output': ['22']}, {'input': '17\\r\\n3 2 3 2 2 2 1 3 3 3 3 2 3 3 3 1 1\\r\\n0\\r\\n0\\r\\n2 8 10\\r\\n4 12 8 6 16\\r\\n0\\r\\n2 8 13\\r\\n3 2 8 10\\r\\n1 12\\r\\n4 8 17 3 16\\r\\n2 2 8\\r\\n0\\r\\n1 2\\r\\n2 8 10\\r\\n2 12 8\\r\\n2 8 10\\r\\n1 8\\r\\n2 12 8\\r\\n', 'output': ['21']}, {'input': '18\\r\\n2 1 1 3 2 1 3 2 3 3 2 2 1 1 3 1 1 3\\r\\n3 16 8 6\\r\\n3 16 6 1\\r\\n4 6 13 5 7\\r\\n2 6 2\\r\\n4 16 6 17 1\\r\\n2 16 8\\r\\n3 6 17 12\\r\\n1 16\\r\\n0\\r\\n3 6 15 1\\r\\n3 16 6 12\\r\\n7 16 9 8 6 13 17 14\\r\\n1 6\\r\\n1 6\\r\\n3 8 6 13\\r\\n0\\r\\n1 6\\r\\n3 9 6 13\\r\\n', 'output': ['26']}, {'input': '19\\r\\n2 1 2 3 3 3 2 1 1 1 1 3 3 1 1 1 2 2 3\\r\\n0\\r\\n2 1 7\\r\\n0\\r\\n4 3 2 17 13\\r\\n1 17\\r\\n1 3\\r\\n3 1 3 6\\r\\n4 1 17 9 13\\r\\n3 1 16 17\\r\\n0\\r\\n3 3 6 17\\r\\n1 6\\r\\n6 10 6 7 17 9 11\\r\\n3 10 17 13\\r\\n4 3 17 13 8\\r\\n1 3\\r\\n3 6 7 16\\r\\n0\\r\\n6 1 7 17 11 13 15\\r\\n', 'output': ['29']}, {'input': '20\\r\\n1 2 2 2 1 3 3 2 2 1 2 2 3 1 2 2 2 1 1 1\\r\\n2 10 8\\r\\n5 10 12 3 20 7\\r\\n0\\r\\n3 10 15 3\\r\\n0\\r\\n3 14 17 3\\r\\n2 12 20\\r\\n0\\r\\n3 17 10 12\\r\\n1 17\\r\\n1 5\\r\\n1 5\\r\\n0\\r\\n1 18\\r\\n3 18 5 12\\r\\n5 5 12 8 3 19\\r\\n0\\r\\n0\\r\\n1 12\\r\\n1 18\\r\\n', 'output': ['24']}, {'input': '11\\r\\n3 1 3 2 3 2 3 2 3 1 3\\r\\n6 2 3 9 5 7 10\\r\\n1 6\\r\\n2 6 2\\r\\n5 6 2 3 9 5\\r\\n2 3 9\\r\\n0\\r\\n5 3 9 5 8 4\\r\\n4 2 3 9 5\\r\\n2 2 3\\r\\n8 6 2 3 9 5 4 11 7\\r\\n4 2 3 9 5\\r\\n', 'output': ['21']}, {'input': '12\\r\\n2 3 3 1 1 3 2 2 3 1 3 3\\r\\n1 9\\r\\n1 1\\r\\n2 2 11\\r\\n5 1 2 11 5 8\\r\\n4 9 10 1 11\\r\\n5 9 10 12 11 5\\r\\n4 1 12 11 5\\r\\n5 10 1 2 12 11\\r\\n0\\r\\n1 9\\r\\n1 12\\r\\n0\\r\\n', 'output': ['19']}, {'input': '13\\r\\n3 2 2 1 3 3 2 3 2 2 1 2 3\\r\\n7 4 3 2 5 9 8 13\\r\\n1 4\\r\\n1 4\\r\\n0\\r\\n3 4 2 6\\r\\n2 4 2\\r\\n4 4 3 2 9\\r\\n5 4 2 6 9 7\\r\\n3 4 2 6\\r\\n6 4 3 2 5 9 7\\r\\n6 4 3 2 6 9 7\\r\\n8 4 2 6 5 9 8 11 10\\r\\n7 4 3 2 6 9 8 11\\r\\n', 'output': ['21']}, {'input': '14\\r\\n2 3 1 3 1 1 1 2 2 3 1 1 3 1\\r\\n4 14 9 8 5\\r\\n4 4 8 5 1\\r\\n9 4 14 9 8 1 2 13 7 12\\r\\n0\\r\\n2 14 8\\r\\n2 4 14\\r\\n7 9 6 10 8 1 2 13\\r\\n2 4 6\\r\\n1 14\\r\\n1 9\\r\\n8 4 6 10 8 5 1 2 3\\r\\n7 14 6 10 8 1 2 7\\r\\n5 10 8 5 1 2\\r\\n0\\r\\n', 'output': ['21']}, {'input': '15\\r\\n3 2 2 2 1 1 2 1 1 2 2 3 3 3 2\\r\\n1 13\\r\\n4 13 1 8 14\\r\\n10 5 13 1 8 14 4 2 11 15 10\\r\\n6 5 13 1 8 9 14\\r\\n0\\r\\n11 5 13 1 8 14 4 2 11 10 3 12\\r\\n11 13 1 8 14 4 2 11 15 10 3 6\\r\\n2 13 1\\r\\n4 5 13 1 8\\r\\n8 5 13 1 8 14 2 11 15\\r\\n6 5 13 1 8 14 2\\r\\n10 5 13 1 8 14 2 11 15 10 3\\r\\n0\\r\\n4 13 1 8 9\\r\\n8 5 13 1 8 9 14 2 11\\r\\n', 'output': ['23']}, {'input': '16\\r\\n3 1 2 3 3 2 3 1 3 2 2 1 2 2 1 2\\r\\n0\\r\\n0\\r\\n7 2 8 4 12 5 9 11\\r\\n1 1\\r\\n4 1 8 4 12\\r\\n5 2 4 12 5 11\\r\\n4 4 12 5 10\\r\\n0\\r\\n5 1 8 4 12 5\\r\\n6 1 4 12 5 9 11\\r\\n6 2 1 8 4 12 5\\r\\n2 4 13\\r\\n3 1 8 4\\r\\n8 1 4 13 12 5 10 3 6\\r\\n4 4 12 5 6\\r\\n8 8 4 13 12 5 9 6 14\\r\\n', 'output': ['26']}, {'input': '17\\r\\n2 3 1 3 3 3 1 1 1 2 2 2 3 2 3 3 2\\r\\n5 4 14 2 11 7\\r\\n3 13 4 14\\r\\n7 6 4 14 2 1 10 12\\r\\n2 6 13\\r\\n9 4 2 9 8 7 17 1 10 12\\r\\n0\\r\\n5 4 14 2 9 11\\r\\n4 13 4 2 11\\r\\n4 13 4 14 2\\r\\n7 13 4 2 11 8 7 1\\r\\n4 13 4 14 2\\r\\n8 6 4 2 8 7 17 1 10\\r\\n0\\r\\n1 4\\r\\n7 13 4 14 2 9 8 7\\r\\n6 4 2 17 1 10 12\\r\\n5 13 4 2 9 8\\r\\n', 'output': ['27']}, {'input': '18\\r\\n1 2 3 3 2 2 1 1 3 1 2 3 2 3 1 2 2 3\\r\\n5 9 3 14 12 2\\r\\n7 9 4 3 14 16 7 12\\r\\n1 9\\r\\n1 9\\r\\n6 9 14 12 1 6 15\\r\\n6 9 14 12 2 1 11\\r\\n2 9 14\\r\\n7 9 14 7 12 2 1 6\\r\\n0\\r\\n6 9 18 14 7 1 6\\r\\n4 9 14 7 1\\r\\n2 9 14\\r\\n6 9 3 14 7 1 6\\r\\n2 9 3\\r\\n9 9 3 14 16 12 2 1 6 17\\r\\n4 9 4 18 14\\r\\n8 9 18 14 12 1 11 6 13\\r\\n2 9 4\\r\\n', 'output': ['26']}, {'input': '19\\r\\n2 3 3 2 3 1 3 1 2 2 2 1 1 1 2 2 1 3 3\\r\\n0\\r\\n3 1 10 6\\r\\n8 1 6 2 17 18 12 15 7\\r\\n5 6 2 9 17 18\\r\\n6 6 2 17 18 12 16\\r\\n1 11\\r\\n9 1 11 6 2 17 18 4 12 15\\r\\n3 1 6 2\\r\\n4 1 6 2 8\\r\\n0\\r\\n1 1\\r\\n5 1 6 2 17 18\\r\\n12 1 10 6 2 8 17 18 4 12 15 7 3\\r\\n10 11 6 2 17 18 4 12 16 15 7\\r\\n8 1 6 2 8 17 18 12 16\\r\\n8 11 6 2 9 17 18 4 12\\r\\n3 11 6 2\\r\\n5 10 6 2 9 17\\r\\n10 1 6 2 17 18 12 5 15 7 3\\r\\n', 'output': ['30']}, {'input': '20\\r\\n2 2 3 2 3 1 1 3 1 1 1 1 1 3 2 1 3 1 1 1\\r\\n1 7\\r\\n13 7 1 11 4 6 16 20 12 5 18 19 15 10\\r\\n8 7 1 11 4 6 17 8 16\\r\\n3 7 1 11\\r\\n9 7 1 11 4 6 8 20 12 3\\r\\n4 7 1 11 4\\r\\n0\\r\\n6 7 1 11 4 6 17\\r\\n4 7 1 11 4\\r\\n7 7 1 11 4 6 17 5\\r\\n2 7 1\\r\\n9 7 1 11 4 6 17 8 14 20\\r\\n11 7 1 11 4 6 20 3 5 15 10 2\\r\\n5 7 1 11 4 6\\r\\n9 7 1 11 4 6 8 16 14 5\\r\\n5 7 1 11 4 6\\r\\n5 7 1 11 4 6\\r\\n11 7 1 11 4 9 6 17 8 20 3 5\\r\\n11 7 1 11 4 6 17 16 20 12 5 18\\r\\n6 7 1 11 4 6 14\\r\\n', 'output': ['35']}, {'input': '21\\r\\n1 2 1 3 3 3 1 1 2 2 3 1 3 1 3 3 1 1 1 2 2\\r\\n1 5\\r\\n0\\r\\n1 11\\r\\n0\\r\\n0\\r\\n0\\r\\n1 8\\r\\n0\\r\\n1 11\\r\\n1 1\\r\\n1 19\\r\\n0\\r\\n1 2\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 19\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['25']}, {'input': '22\\r\\n2 3 2 3 3 2 1 2 3 3 1 3 1 1 2 2 3 3 1 3 2 2\\r\\n0\\r\\n1 8\\r\\n1 22\\r\\n1 12\\r\\n0\\r\\n1 14\\r\\n0\\r\\n0\\r\\n0\\r\\n2 22 14\\r\\n1 12\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 16\\r\\n1 13\\r\\n0\\r\\n', 'output': ['25']}, {'input': '23\\r\\n3 1 3 3 2 2 2 1 3 2 3 1 1 1 1 2 3 1 2 1 3 1 1\\r\\n0\\r\\n1 11\\r\\n1 11\\r\\n2 11 16\\r\\n1 2\\r\\n3 11 1 12\\r\\n2 11 16\\r\\n2 12 2\\r\\n1 13\\r\\n2 12 2\\r\\n0\\r\\n0\\r\\n0\\r\\n2 13 11\\r\\n0\\r\\n1 11\\r\\n2 12 2\\r\\n3 16 6 21\\r\\n1 11\\r\\n0\\r\\n0\\r\\n2 11 12\\r\\n0\\r\\n', 'output': ['27']}, {'input': '24\\r\\n1 2 1 1 2 2 1 1 3 2 3 1 3 2 3 3 1 1 3 2 3 2 1 2\\r\\n1 16\\r\\n0\\r\\n0\\r\\n1 2\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 2\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n2 12 24\\r\\n0\\r\\n0\\r\\n1 11\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['27']}, {'input': '25\\r\\n3 3 1 1 1 2 2 2 3 1 2 3 2 1 2 2 2 3 2 1 2 3 2 1 1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 12\\r\\n0\\r\\n1 19\\r\\n0\\r\\n2 12 21\\r\\n2 3 10\\r\\n0\\r\\n1 21\\r\\n0\\r\\n1 9\\r\\n1 3\\r\\n0\\r\\n0\\r\\n2 3 2\\r\\n0\\r\\n1 12\\r\\n0\\r\\n1 3\\r\\n2 21 9\\r\\n', 'output': ['29']}, {'input': '26\\r\\n1 2 2 1 1 2 1 1 2 1 3 1 3 1 2 3 3 3 2 1 2 1 3 3 2 2\\r\\n1 9\\r\\n1 1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 5\\r\\n0\\r\\n2 15 12\\r\\n1 8\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n2 3 26\\r\\n0\\r\\n0\\r\\n0\\r\\n1 22\\r\\n0\\r\\n1 8\\r\\n', 'output': ['30']}, {'input': '27\\r\\n2 1 1 3 2 1 1 2 3 1 1 2 2 2 1 2 1 1 3 3 3 1 1 1 3 1 1\\r\\n0\\r\\n0\\r\\n0\\r\\n1 12\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 26\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 27\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 5\\r\\n0\\r\\n2 20 27\\r\\n1 18\\r\\n0\\r\\n', 'output': ['30']}, {'input': '28\\r\\n2 1 1 3 2 3 2 2 1 3 2 3 3 2 3 1 2 2 3 3 3 3 1 3 2 1 3 3\\r\\n0\\r\\n1 7\\r\\n0\\r\\n2 28 18\\r\\n1 28\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n2 10 18\\r\\n3 8 10 18\\r\\n0\\r\\n2 1 20\\r\\n0\\r\\n1 18\\r\\n1 27\\r\\n2 27 18\\r\\n0\\r\\n0\\r\\n1 28\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 28\\r\\n1 9\\r\\n', 'output': ['33']}, {'input': '29\\r\\n3 3 3 3 3 1 1 1 3 2 2 1 1 3 1 1 1 2 1 2 3 1 1 2 1 3 1 2 3\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 1\\r\\n0\\r\\n0\\r\\n2 28 15\\r\\n0\\r\\n0\\r\\n0\\r\\n2 24 23\\r\\n1 28\\r\\n0\\r\\n1 28\\r\\n1 20\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 28\\r\\n0\\r\\n0\\r\\n2 23 16\\r\\n0\\r\\n0\\r\\n1 7\\r\\n1 28\\r\\n', 'output': ['32']}, {'input': '30\\r\\n1 3 3 3 2 3 1 3 3 3 3 2 3 1 3 2 1 1 1 1 2 3 2 1 1 3 3 2 2 2\\r\\n0\\r\\n1 20\\r\\n0\\r\\n1 7\\r\\n2 6 9\\r\\n1 20\\r\\n1 20\\r\\n3 7 6 9\\r\\n2 10 6\\r\\n0\\r\\n0\\r\\n2 6 9\\r\\n0\\r\\n0\\r\\n1 20\\r\\n2 6 9\\r\\n2 6 9\\r\\n0\\r\\n2 6 9\\r\\n0\\r\\n2 6 9\\r\\n3 27 6 9\\r\\n2 6 9\\r\\n2 6 9\\r\\n0\\r\\n0\\r\\n0\\r\\n2 6 9\\r\\n3 6 9 19\\r\\n3 27 6 9\\r\\n', 'output': ['34']}, {'input': '200\\r\\n3 3 3 1 3 1 3 1 1 1 3 2 1 1 3 1 3 3 2 2 2 2 3 3 1 3 2 3 1 2 3 3 2 2 1 2 3 3 1 3 1 3 3 3 1 2 1 3 3 1 2 1 2 3 2 2 3 2 2 3 2 3 1 1 1 2 2 2 1 3 1 2 1 3 2 3 2 1 2 2 1 1 2 2 1 3 3 2 2 1 3 2 3 2 3 1 2 2 2 3 3 2 2 3 2 3 3 3 3 3 2 2 3 3 2 3 2 1 2 3 2 3 2 1 2 3 3 1 2 3 2 2 3 3 3 1 2 3 3 2 3 3 3 3 3 1 2 1 3 3 1 1 2 1 2 3 1 3 2 3 1 1 2 3 3 2 2 1 3 3 1 3 1 2 1 2 3 1 1 3 2 1 1 1 2 1 1 2 2 2 3 1 2 1 1 1 1 2 1 2\\r\\n19 52 113 18 109 125 8 150 180 173 174 116 130 79 122 112 19 80 110 121\\r\\n2 52 124\\r\\n13 52 129 148 125 150 ...', 'output': ['224']}, {'input': '200\\r\\n1 2 3 2 1 1 3 3 3 3 2 1 1 2 3 3 1 3 2 3 1 3 3 1 2 3 3 2 2 1 3 3 3 3 1 1 2 2 2 2 2 1 1 2 3 2 3 3 3 2 2 1 2 3 2 1 1 1 1 1 3 2 2 2 2 1 3 1 2 2 3 1 1 2 1 1 1 1 2 2 2 1 3 2 1 1 2 2 2 1 1 3 1 3 3 1 3 3 2 3 2 2 3 1 3 3 1 3 3 3 3 2 1 3 1 3 2 2 1 3 2 2 3 1 2 1 2 3 1 3 1 2 1 2 2 3 2 3 2 2 3 2 2 2 3 1 3 3 1 1 2 3 1 2 3 2 2 2 1 3 2 1 1 3 2 1 3 2 1 1 3 2 3 3 2 1 2 3 2 1 3 2 2 3 1 3 3 3 2 1 3 2 3 2 3 3 2 1 1 1\\r\\n16 96 58 20 140 86 51 130 57 66 64 112 177 54 123 62 155\\r\\n0\\r\\n0\\r\\n9 3 125 15 94 46 124 51 130 121\\r\\n4 56 124...', 'output': ['220']}, {'input': '200\\r\\n1 3 2 3 2 3 3 3 2 2 3 2 3 1 1 3 3 2 2 2 1 1 3 3 3 1 1 1 1 2 2 3 1 3 2 3 3 2 1 2 3 2 2 1 2 1 3 3 3 1 3 3 3 2 2 1 3 3 1 1 2 1 2 2 3 3 3 2 1 2 2 2 2 3 2 1 3 1 3 2 2 2 1 3 2 2 3 3 1 3 3 1 3 1 1 2 3 1 1 2 3 1 3 2 1 1 2 2 2 1 1 3 3 1 1 3 1 1 2 1 3 2 1 2 2 3 2 2 3 3 3 1 2 3 3 1 2 3 2 3 2 1 1 2 2 1 3 1 3 3 3 3 3 2 3 3 1 1 1 1 3 1 2 3 1 2 3 3 3 1 3 2 3 3 3 3 3 3 3 1 2 1 3 1 3 1 1 1 1 3 3 2 2 3 1 3 2 3 2 2\\r\\n0\\r\\n0\\r\\n3 193 176 85\\r\\n0\\r\\n1 193\\r\\n3 83 167 85\\r\\n0\\r\\n1 193\\r\\n5 161 193 85 16 44\\r\\n5 83 38 158 85 141\\r\\n7 120 4 158 ...', 'output': ['219']}, {'input': '200\\r\\n1 3 3 1 1 2 1 3 2 2 3 2 2 1 3 1 1 3 3 2 3 3 2 3 2 3 1 2 3 3 2 2 3 3 1 3 3 1 1 1 2 1 1 1 2 2 2 3 2 3 2 1 1 3 2 3 2 1 1 3 3 1 3 1 3 3 3 3 1 2 3 2 1 1 1 2 1 3 2 3 2 1 3 3 2 2 3 3 1 2 1 3 1 2 2 1 1 3 3 3 3 2 1 1 2 1 3 1 3 3 1 2 1 2 1 2 2 1 3 1 2 3 2 3 2 1 1 1 3 3 1 3 2 2 1 1 3 1 3 2 1 3 3 1 1 3 2 2 3 1 2 3 3 1 1 2 1 2 3 1 2 2 3 1 1 1 1 2 2 3 1 1 3 2 3 3 3 3 2 2 3 3 2 3 2 3 1 2 3 1 1 2 3 2 1 1 3 2 3 1\\r\\n3 4 164 15\\r\\n8 15 35 25 18 32 168 10 118\\r\\n3 50 15 35\\r\\n0\\r\\n0\\r\\n2 4 15\\r\\n0\\r\\n5 50 15 44 84 120\\r\\n5 15 111 91 66 1...', 'output': ['222']}, {'input': '200\\r\\n3 1 2 3 2 1 3 2 2 1 3 1 1 1 3 1 3 3 1 1 3 1 2 2 2 1 3 3 2 1 3 2 3 3 3 2 2 1 3 1 2 1 3 2 2 2 2 1 1 2 2 3 1 2 1 3 2 3 2 1 2 1 2 3 3 2 2 2 2 1 2 2 1 2 3 1 1 1 3 3 1 3 2 3 1 2 2 1 2 2 3 3 1 1 1 2 1 1 3 1 3 2 2 1 3 1 2 3 1 3 2 3 3 3 1 3 1 2 3 3 2 2 2 2 2 3 2 3 3 3 3 2 3 2 3 2 1 3 2 1 3 2 1 1 3 1 3 1 2 2 2 2 1 1 1 1 3 2 1 3 3 1 1 2 1 3 3 1 1 3 1 3 2 2 2 3 2 3 2 3 1 2 3 2 3 3 2 3 3 1 1 2 2 2 3 1 2 2 2 2\\r\\n0\\r\\n0\\r\\n11 153 175 47 143 18 78 79 113 170 35 49\\r\\n8 45 153 67 74 161 162 122 170\\r\\n4 153 137 67 72\\r\\n2 153 10...', 'output': ['223']}, {'input': '200\\r\\n3 2 2 1 3 2 2 3 1 1 2 3 3 1 2 2 3 3 1 1 3 3 3 1 1 3 2 3 2 3 3 2 2 1 3 2 1 2 3 1 1 3 3 2 3 1 1 2 3 2 1 3 2 2 3 3 1 1 1 3 2 1 3 1 2 1 2 1 2 3 1 3 2 2 1 1 1 1 3 2 1 1 1 1 3 1 3 1 3 3 1 2 2 2 1 2 3 1 2 3 1 1 2 3 3 3 1 3 2 2 2 2 2 2 3 1 1 3 1 3 1 1 3 3 1 2 1 3 3 2 1 2 2 1 1 2 3 1 3 3 3 2 2 1 1 1 3 3 1 2 3 1 1 3 2 3 2 1 3 3 2 1 3 1 1 1 2 1 1 2 3 2 3 2 3 1 3 1 3 1 3 3 1 2 2 3 3 3 2 1 3 1 1 2 2 2 3 3 1 1\\r\\n0\\r\\n3 96 43 53\\r\\n3 43 156 199\\r\\n1 43\\r\\n3 1 43 33\\r\\n6 43 50 191 21 57 168\\r\\n10 43 194 185 192 83 101 152 80 191 ...', 'output': ['222']}, {'input': '200\\r\\n1 2 3 3 1 2 1 1 2 1 1 1 1 2 3 3 3 1 2 2 2 2 3 2 1 2 2 3 3 1 1 3 1 1 1 3 1 3 3 2 2 3 3 3 2 3 1 1 1 1 2 3 2 3 3 3 1 1 3 3 1 2 3 1 3 1 3 2 3 2 1 3 1 1 1 2 1 3 2 2 2 3 2 2 2 2 1 3 3 3 3 1 3 1 2 1 2 1 2 1 2 3 2 3 1 3 1 2 1 1 2 3 3 1 2 1 1 1 1 2 3 1 1 1 2 3 2 1 1 2 3 3 2 3 3 3 1 3 1 2 3 2 3 2 1 2 3 2 2 2 3 1 2 3 2 1 2 3 1 1 1 3 1 2 3 2 3 1 3 2 1 2 3 1 1 1 1 2 2 2 1 2 1 2 3 3 2 1 3 3 2 2 3 1 1 2 1 3 1 2\\r\\n11 164 21 199 71 131 112 110 4 146 192 179\\r\\n4 71 127 60 14\\r\\n14 193 144 133 70 97 71 53 110 145 113 57 166...', 'output': ['219']}, {'input': '200\\r\\n3 1 3 3 2 1 2 1 1 3 3 3 2 3 2 3 3 2 1 1 2 3 2 2 1 1 2 2 2 3 3 2 2 3 2 1 2 3 1 1 3 1 1 2 2 2 3 3 2 2 3 2 3 1 2 2 2 1 3 1 3 3 3 2 3 2 2 1 2 1 1 3 2 2 3 3 2 3 2 1 2 3 3 3 3 1 2 1 1 3 1 3 1 2 2 1 3 1 1 2 2 3 1 3 1 2 3 3 2 1 2 1 2 1 2 3 2 1 1 2 1 3 1 3 1 3 2 1 2 1 3 3 1 1 1 2 1 2 3 3 1 2 2 1 1 3 1 1 1 3 2 3 1 2 2 3 1 2 1 1 1 1 1 3 3 3 1 1 2 2 3 3 2 2 2 1 3 1 1 3 2 1 1 3 3 3 2 2 1 1 1 1 2 3 3 3 2 2 1 3\\r\\n7 132 13 75 196 148 170 110\\r\\n10 132 16 77 192 46 146 55 75 99 98\\r\\n1 132\\r\\n1 132\\r\\n5 132 103 73 119 13\\r\\n6 13...', 'output': ['221']}, {'input': '200\\r\\n2 1 1 3 2 1 3 2 1 2 2 2 3 1 3 1 3 3 2 2 2 3 1 2 1 2 1 2 1 3 1 3 2 2 2 2 2 2 3 2 3 2 3 2 2 3 2 3 2 3 2 3 3 1 1 3 2 3 3 1 3 2 1 1 1 3 1 2 2 2 2 1 2 3 2 1 1 3 1 1 3 2 1 3 2 2 1 2 1 2 1 3 2 2 2 1 2 1 2 3 3 3 1 1 2 2 3 3 3 3 1 3 1 2 1 3 1 2 2 2 2 1 2 1 2 1 2 1 2 1 1 3 1 2 3 1 2 1 3 1 3 1 2 1 3 3 1 2 1 1 3 3 3 3 3 2 3 2 2 2 2 1 3 3 3 3 3 2 1 1 3 3 3 3 2 1 2 2 2 2 2 1 2 1 2 1 2 1 3 3 2 2 3 1 1 2 2 3 2 2\\r\\n6 84 74 147 109 151 78\\r\\n13 157 14 38 43 55 12 96 111 138 30 76 146 108\\r\\n7 7 12 60 139 159 199 2\\r\\n6 7 14 5...', 'output': ['216']}, {'input': '200\\r\\n1 2 1 3 2 1 1 3 3 3 1 3 1 2 1 1 3 2 2 3 2 3 1 2 2 3 2 3 2 3 2 1 3 1 3 3 3 3 2 3 2 2 3 3 2 3 2 2 1 3 2 2 2 1 2 1 2 3 3 1 3 1 2 1 1 2 2 1 1 2 3 3 2 2 1 3 1 2 2 2 1 2 2 3 3 2 1 1 1 1 2 1 3 1 3 2 1 3 3 2 1 2 3 1 3 2 2 2 3 3 2 1 3 3 2 2 3 1 3 1 2 2 3 1 3 2 1 3 3 2 2 2 1 1 3 1 2 3 2 1 2 3 2 2 3 2 1 3 2 2 3 2 3 2 3 2 2 2 2 2 1 3 1 3 3 3 1 3 1 3 1 2 2 3 2 3 1 3 1 3 3 3 1 1 2 2 1 1 2 1 1 3 1 1 2 3 2 2 2 2\\r\\n11 120 34 23 75 191 50 115 196 15 134 160\\r\\n8 105 34 167 25 191 50 43 15\\r\\n1 55\\r\\n1 42\\r\\n8 159 31 122 25 191 ...', 'output': ['219']}, {'input': '200\\r\\n3 3 2 3 2 3 1 3 2 2 1 3 2 2 1 3 1 3 3 3 2 2 2 2 1 1 3 1 1 2 1 3 1 3 2 1 1 2 3 3 2 3 1 1 3 2 2 2 3 2 1 3 3 2 3 2 2 2 3 3 2 3 2 3 1 2 2 3 3 2 3 3 1 3 1 3 1 1 1 3 1 1 2 3 2 1 1 1 2 2 2 2 3 2 1 2 3 1 3 3 1 2 2 1 2 1 1 3 3 3 1 1 2 3 1 2 3 2 2 1 2 2 3 1 3 3 1 1 2 2 1 1 2 2 3 3 2 3 2 2 3 3 2 3 3 1 2 1 3 1 2 1 1 3 2 3 2 2 2 2 2 3 1 1 2 1 1 3 2 2 1 3 3 1 2 3 2 1 2 3 3 1 1 1 2 2 1 2 1 2 2 2 3 1 3 3 3 2 3 3\\r\\n5 188 126 156 182 91\\r\\n3 102 139 93\\r\\n4 139 56 152 126\\r\\n0\\r\\n5 35 127 37 93 174\\r\\n4 55 21 154 91\\r\\n4 10 93 126 ...', 'output': ['213']}, {'input': '200\\r\\n3 2 2 2 2 3 1 1 1 2 2 2 3 2 3 3 3 1 3 2 3 1 2 2 1 1 1 3 1 3 1 1 1 1 2 3 3 1 3 1 2 2 1 2 3 2 1 2 2 1 1 2 1 2 3 1 3 1 1 2 1 3 2 3 1 2 2 3 1 3 2 2 2 1 1 2 1 1 2 2 1 2 2 2 2 2 3 1 3 2 2 1 3 2 2 2 3 1 3 1 3 1 1 1 2 1 1 3 3 1 3 2 3 3 1 3 3 2 1 1 3 1 1 2 3 3 3 2 1 3 3 1 2 3 3 2 2 3 2 3 1 1 3 1 3 2 2 2 2 3 1 1 2 1 1 2 1 2 3 2 3 3 1 2 3 2 2 2 2 3 1 2 3 3 2 3 3 2 3 1 3 3 2 1 1 1 2 2 2 3 3 1 2 2 1 2 3 2 2 1\\r\\n1 125\\r\\n0\\r\\n2 125 34\\r\\n1 116\\r\\n3 76 100 59\\r\\n0\\r\\n5 176 175 126 80 142\\r\\n3 19 172 116\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n4 125 116 200 ...', 'output': ['210']}, {'input': '200\\r\\n2 1 2 3 2 2 1 2 2 2 1 3 2 2 2 2 1 1 3 2 2 2 3 3 3 1 2 3 2 1 2 2 1 3 3 2 1 3 3 1 1 2 2 2 3 1 2 3 1 1 3 3 1 1 1 1 2 2 1 2 2 2 3 2 2 1 2 3 3 2 2 3 3 3 2 1 1 2 1 1 1 2 3 3 2 3 1 2 3 1 3 1 1 1 3 1 1 1 1 3 2 3 3 2 2 1 1 2 2 1 1 1 2 3 1 3 3 2 2 1 1 3 1 1 2 2 2 1 3 3 3 2 2 2 2 3 1 3 2 3 1 3 3 2 2 1 1 2 1 1 3 2 1 1 2 3 2 2 2 3 1 2 3 2 1 1 2 2 2 3 1 3 2 1 1 1 3 2 1 1 1 1 2 2 2 3 1 2 3 3 2 1 1 1 3 3 2 2 2 1\\r\\n4 15 85 52 111\\r\\n0\\r\\n0\\r\\n2 190 140\\r\\n4 74 52 124 64\\r\\n4 29 181 52 167\\r\\n2 52 184\\r\\n1 31\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n2 21 184\\r\\n0...', 'output': ['210']}, {'input': '200\\r\\n3 1 1 1 3 3 3 1 3 3 1 3 1 2 3 3 3 2 1 2 2 3 3 1 1 3 2 1 3 2 1 2 3 2 2 1 1 2 2 1 1 3 2 2 1 2 2 1 2 2 1 3 1 2 3 1 3 3 1 3 1 3 2 3 2 2 1 2 3 2 1 3 2 3 1 1 1 1 1 1 2 2 3 2 3 3 3 1 3 1 2 3 1 1 3 2 3 2 1 1 3 2 2 2 3 2 1 3 2 1 3 2 3 2 2 1 2 1 2 1 3 2 1 2 1 3 2 2 1 3 3 3 2 2 2 1 2 3 1 1 1 2 1 2 1 2 3 1 1 3 3 2 2 1 1 3 3 1 1 1 1 2 3 1 3 3 3 2 1 3 3 1 3 3 1 2 1 2 1 1 2 3 2 2 1 1 1 1 3 3 3 3 3 3 3 1 3 3 3 2\\r\\n5 200 120 25 2 163\\r\\n5 200 120 21 25 90\\r\\n6 200 120 25 189 2 76\\r\\n3 200 120 25\\r\\n5 200 120 115 25 28\\r\\n4 200 1...', 'output': ['212']}, {'input': '200\\r\\n1 1 3 3 2 2 2 2 2 3 2 3 1 1 1 2 2 2 3 3 1 1 2 1 3 1 3 2 2 2 3 1 3 2 3 2 2 3 1 1 3 3 2 3 3 3 2 2 1 2 3 3 2 2 1 3 2 1 2 3 1 3 2 1 1 1 2 1 3 1 1 3 2 3 1 2 3 3 2 1 2 1 2 3 3 3 1 1 3 3 2 3 3 1 2 2 3 1 3 3 2 1 3 3 2 2 3 2 2 3 1 2 2 3 2 3 2 3 1 3 1 1 3 2 2 2 3 2 2 3 2 3 1 2 3 1 1 2 3 2 1 2 2 3 1 1 3 1 1 1 1 2 2 1 1 3 1 2 3 3 1 2 3 1 2 2 3 2 2 1 1 2 2 1 2 1 3 1 1 1 2 3 2 2 2 2 3 2 2 2 3 1 3 3 1 1 1 3 2 2\\r\\n3 159 22 96\\r\\n2 100 148\\r\\n3 180 22 123\\r\\n3 44 80 22\\r\\n4 102 111 180 22\\r\\n1 39\\r\\n9 112 180 186 185 42 159 22 36 ...', 'output': ['208']}, {'input': '200\\r\\n2 2 2 3 2 1 1 2 3 1 3 2 1 1 1 2 2 2 3 1 3 3 2 1 1 2 1 3 1 3 3 1 1 3 2 1 3 2 2 3 1 2 3 2 2 2 3 3 1 1 3 3 1 2 3 2 3 2 1 1 2 3 3 2 3 3 2 1 3 2 2 3 1 2 2 2 2 2 3 2 3 3 2 3 3 3 3 1 2 2 2 1 3 2 1 1 2 1 3 1 1 3 3 1 1 2 1 2 2 3 1 1 2 1 1 1 2 3 2 2 1 1 1 1 3 2 1 1 2 3 2 2 3 2 2 2 1 3 3 3 3 2 1 1 1 3 2 3 1 3 2 2 2 1 3 2 1 2 1 2 1 2 1 1 1 1 3 1 2 2 1 2 3 2 3 3 2 3 1 3 3 3 2 2 2 1 2 1 1 1 2 2 3 1 2 2 3 3 2 2\\r\\n2 105 58\\r\\n5 3 105 174 47 138\\r\\n0\\r\\n1 3\\r\\n0\\r\\n1 105\\r\\n3 3 105 8\\r\\n2 162 105\\r\\n3 105 174 44\\r\\n4 3 98 105 174\\r\\n1 56\\r...', 'output': ['213']}, {'input': '200\\r\\n3 3 1 3 2 3 2 3 1 3 3 1 1 2 3 1 2 2 2 3 2 2 2 2 1 3 3 2 2 2 3 3 3 3 1 1 3 1 3 1 2 1 2 3 2 2 3 3 3 3 1 3 1 3 1 3 3 3 2 2 1 1 2 1 2 2 2 2 1 2 1 1 2 3 2 3 2 2 2 3 3 3 3 3 2 2 1 1 1 2 1 1 2 3 2 3 1 3 1 1 1 3 3 2 3 2 1 3 1 3 1 2 2 2 2 1 1 2 2 3 2 1 2 2 3 3 1 1 3 3 3 3 1 1 1 3 1 3 2 1 1 3 2 1 1 2 3 3 3 3 2 2 1 2 3 2 2 2 1 3 2 1 2 1 3 2 3 3 1 3 3 3 2 1 3 3 2 2 1 2 2 1 1 3 2 1 3 3 2 1 1 2 3 1 2 2 2 2 3 1\\r\\n0\\r\\n3 7 146 123\\r\\n1 71\\r\\n4 62 140 24 93\\r\\n0\\r\\n7 41 186 144 104 10 32 189\\r\\n1 71\\r\\n1 71\\r\\n0\\r\\n6 71 62 24 72 123 104...', 'output': ['215']}, {'input': '200\\r\\n1 2 3 1 1 1 2 2 2 2 1 2 1 2 3 2 2 3 2 1 2 1 1 2 2 1 2 2 3 1 2 3 3 3 1 1 1 2 1 1 1 1 1 1 1 2 3 2 1 1 3 2 1 2 1 1 3 3 1 3 2 3 2 1 3 3 3 3 1 1 3 3 3 1 2 1 1 1 1 1 1 1 1 2 1 3 3 1 2 1 2 1 2 2 1 2 1 2 3 3 2 2 2 1 1 2 2 3 3 1 1 1 2 2 3 1 3 2 1 3 1 2 1 1 2 1 2 3 1 1 1 2 2 2 3 3 2 3 3 3 3 1 1 2 3 3 3 1 1 1 1 1 3 2 1 3 2 2 2 3 3 2 3 2 2 1 2 2 3 1 2 2 1 1 1 3 3 1 3 1 1 2 1 3 1 2 3 1 1 2 2 2 3 1 2 2 2 1 2 3\\r\\n2 49 38\\r\\n3 200 49 38\\r\\n5 159 38 94 182 192\\r\\n4 49 38 94 148\\r\\n2 200 159\\r\\n7 9 38 111 89 94 92 125\\r\\n8 38 68 17...', 'output': ['213']}, {'input': '200\\r\\n2 3 1 2 1 3 2 1 1 2 1 2 3 3 1 2 1 3 3 2 1 1 3 1 2 3 3 3 1 1 3 1 1 1 2 3 3 3 1 2 3 2 2 1 2 3 3 1 1 2 1 3 3 1 2 3 3 2 2 1 2 1 2 1 3 2 2 3 2 2 1 1 3 3 2 2 1 1 3 1 1 1 3 1 3 1 1 3 1 3 2 3 1 3 1 1 3 2 3 2 2 1 3 3 2 2 2 2 3 3 1 1 1 1 2 1 1 1 3 1 3 2 1 2 1 3 3 2 2 2 1 2 2 2 1 3 2 1 3 2 1 2 2 2 2 1 1 3 2 1 1 2 1 1 1 1 1 3 1 2 2 2 3 2 3 2 3 3 2 3 2 3 2 1 3 3 3 3 3 2 1 3 1 3 1 3 1 1 3 2 1 3 1 3 1 2 1 3 3 1\\r\\n5 38 67 92 180 132\\r\\n4 119 69 116 67\\r\\n0\\r\\n1 135\\r\\n9 193 67 122 7 15 45 2 180 129\\r\\n2 143 195\\r\\n3 176 38 175\\r\\n0...', 'output': ['212']}, {'input': '200\\r\\n2 3 3 1 1 1 3 3 3 3 1 1 1 1 2 2 2 2 2 1 3 1 2 3 1 1 1 3 2 2 1 2 2 3 3 2 3 2 2 2 3 2 3 3 2 2 1 2 3 3 1 1 1 2 2 3 1 2 1 3 3 2 1 3 3 3 2 2 1 2 3 2 2 1 2 1 2 2 1 3 3 2 2 3 3 2 3 1 3 3 1 2 1 1 1 3 1 2 1 2 3 1 3 2 2 1 2 3 1 2 3 3 1 2 1 1 2 2 2 1 3 2 3 3 2 1 2 3 3 3 1 2 3 1 1 1 2 1 3 3 2 3 1 1 2 2 1 3 3 3 3 2 3 2 2 1 1 2 3 1 3 1 3 3 3 3 1 3 2 3 2 2 3 2 3 1 2 2 2 3 2 2 1 1 1 3 1 3 1 2 1 3 1 1 3 2 2 2 3 1\\r\\n2 14 181\\r\\n3 83 181 61\\r\\n3 59 181 60\\r\\n4 181 164 72 138\\r\\n2 109 181\\r\\n3 176 181 79\\r\\n5 118 109 181 135 142\\r\\n2 1...', 'output': ['215']}, {'input': '200\\r\\n3 3 2 2 3 2 1 1 1 1 3 3 1 2 2 2 1 1 3 1 3 3 1 2 3 1 3 2 3 2 2 3 2 2 2 3 1 2 2 1 1 3 3 1 3 3 2 1 3 2 1 1 3 3 2 1 3 1 1 2 3 2 1 2 3 1 2 2 3 1 2 1 1 3 1 3 2 3 1 3 1 3 2 2 2 1 2 1 2 2 2 2 3 1 2 1 1 2 3 3 1 2 1 2 1 2 2 3 2 2 3 2 1 3 2 1 1 1 3 3 3 2 2 3 2 2 3 3 2 1 1 2 1 1 3 3 2 2 3 1 1 2 2 2 3 1 3 2 3 2 2 1 2 1 3 2 2 3 1 2 1 2 2 1 3 3 2 2 3 2 3 2 3 2 1 1 1 3 2 2 1 3 2 2 1 1 2 3 1 1 1 1 2 2 1 2 3 3 1 3\\r\\n110 6 89 9 11 54 82 39 183 22 93 96 109 24 42 45 104 75 190 147 90 68 188 133 62 117 139 154 91 177 44 92...', 'output': ['346']}, {'input': '200\\r\\n1 1 1 3 2 3 1 2 2 2 1 1 1 3 2 2 3 1 1 2 1 2 1 2 2 3 2 2 2 2 1 3 1 1 1 3 2 2 3 2 3 3 1 2 1 1 2 3 1 1 2 3 2 3 1 1 2 1 2 1 2 3 2 3 1 1 2 1 1 3 2 2 1 1 1 2 1 1 1 1 1 3 1 1 3 3 3 1 3 2 1 2 1 1 1 3 1 1 3 2 3 1 1 3 3 1 1 1 1 1 3 2 2 3 1 1 2 3 3 1 1 3 3 2 3 2 2 1 2 3 3 1 1 1 1 3 3 2 3 2 3 3 3 2 3 1 2 2 3 1 3 2 1 3 1 2 3 3 1 1 2 2 2 3 2 3 2 1 3 3 2 1 3 1 3 2 2 2 2 1 2 2 1 1 2 3 1 2 3 2 1 2 1 1 2 2 1 3 2 3\\r\\n23 109 172 111 25 46 157 144 72 156 94 110 22 60 98 118 171 189 86 42 117 186 8 161\\r\\n43 111 25 197 46 157...', 'output': ['338']}, {'input': '200\\r\\n3 2 3 1 2 1 2 3 3 1 3 2 3 1 1 3 3 2 2 2 1 2 2 3 1 1 1 2 3 3 2 3 3 2 3 2 2 1 3 3 2 1 3 3 2 2 1 1 1 2 3 1 3 3 2 3 1 3 3 3 3 3 3 2 2 1 2 3 3 1 2 1 1 1 3 1 1 3 1 1 2 2 2 2 3 3 3 1 1 2 3 2 1 3 2 2 1 2 3 1 2 3 3 3 3 3 2 1 1 3 3 2 3 1 3 3 3 1 2 1 2 2 1 1 3 2 1 1 1 3 3 3 3 2 2 1 3 2 1 2 3 2 1 1 1 1 3 2 3 1 2 1 1 3 2 2 3 1 3 1 2 3 1 1 3 2 2 1 3 2 2 3 1 1 2 2 2 1 1 2 3 1 1 1 2 2 2 2 2 2 1 3 3 2 1 3 2 3 3 1\\r\\n25 200 2 127 5 69 99 52 174 194 19 169 106 163 40 177 84 178 108 112 21 17 42 162 33 122\\r\\n1 200\\r\\n46 200 2...', 'output': ['335']}, {'input': '200\\r\\n2 2 3 3 3 1 3 3 1 3 2 3 2 3 2 3 1 1 1 3 3 3 2 2 3 3 2 1 3 1 1 3 3 3 3 3 1 2 3 2 3 2 1 1 1 3 3 2 2 3 2 1 2 3 1 2 2 2 3 3 3 2 3 2 3 3 3 1 2 2 1 2 3 3 3 1 1 3 3 1 2 1 1 3 3 1 2 3 1 3 3 2 2 3 2 3 1 1 2 1 1 3 1 3 2 2 2 3 1 2 1 1 2 3 2 2 1 1 3 1 1 3 1 2 1 1 3 1 2 3 1 2 3 2 3 1 1 3 1 1 2 1 1 2 3 3 1 3 1 1 3 1 3 2 3 1 2 2 1 2 1 2 3 3 3 1 2 3 2 1 3 3 3 1 1 3 2 3 2 3 1 2 2 3 1 3 1 2 2 1 2 3 1 3 2 1 3 3 3 2\\r\\n84 138 10 57 184 16 9 11 15 2 176 33 43 6 91 158 194 27 18 31 141 167 193 150 102 41 53 197 191 94 66 49 ...', 'output': ['339']}, {'input': '200\\r\\n2 2 3 1 3 2 2 3 3 1 2 3 1 1 2 1 3 3 2 3 3 3 3 3 3 2 2 1 3 1 1 1 2 3 3 1 1 3 1 2 3 3 3 1 2 1 3 3 2 1 3 2 1 3 2 2 3 3 1 3 3 1 2 2 2 2 3 3 1 1 2 3 3 1 1 3 1 1 2 3 2 2 3 3 1 2 1 3 3 1 1 3 2 2 2 1 2 1 1 3 2 1 2 3 3 3 3 1 1 3 1 1 1 2 3 1 2 2 3 1 1 2 3 3 1 3 3 3 2 1 1 2 2 3 3 1 3 3 1 1 1 3 2 1 2 2 2 3 3 1 1 1 3 2 3 3 2 3 3 2 3 2 1 1 3 2 1 3 3 1 2 2 2 3 1 1 2 3 2 2 3 2 1 2 2 1 1 2 2 1 3 2 3 2 1 2 1 2 2 3\\r\\n0\\r\\n43 1 121 139 184 5 124 152 43 197 25 149 186 23 94 80 188 91 187 68 49 176 153 169 36 110 26 38 3 195 ...', 'output': ['387']}, {'input': '200\\r\\n2 3 1 2 3 2 3 2 2 3 2 2 1 2 3 1 1 2 3 2 3 1 1 1 2 1 3 1 1 1 3 3 3 2 3 1 2 2 2 3 2 3 3 3 2 1 3 1 2 1 1 1 3 3 2 3 2 2 3 2 3 3 3 2 2 3 3 2 2 3 1 3 3 2 3 1 2 1 2 1 3 3 2 1 1 2 3 3 2 1 2 1 2 1 1 3 2 2 1 3 3 3 2 1 1 3 2 3 1 1 3 3 2 1 3 1 2 2 2 1 3 3 3 1 1 2 2 1 1 2 3 3 1 3 3 3 3 2 3 1 3 2 1 3 1 1 3 1 2 2 1 3 3 2 1 3 1 2 2 1 2 2 1 1 1 1 1 1 2 2 2 1 3 2 1 3 1 3 1 2 2 2 1 2 1 2 3 3 1 3 2 3 1 2 1 2 3 1 3 1\\r\\n48 98 53 140 115 193 33 91 105 9 19 143 72 194 84 88 90 17 30 52 71 36 118 23 21 180 51 27 81 178 95 43 9...', 'output': ['411']}, {'input': '200\\r\\n1 1 1 3 2 3 1 2 2 3 2 3 2 3 2 3 2 3 2 1 3 2 2 2 2 1 1 3 1 1 3 2 3 2 1 1 3 1 3 3 1 2 1 3 3 3 2 1 2 2 3 1 1 2 3 3 1 1 1 3 2 2 1 3 2 3 3 1 2 1 1 3 1 3 1 3 2 2 1 1 2 1 2 3 2 1 3 3 3 1 2 1 3 3 1 3 2 3 3 1 3 1 1 3 2 3 2 3 1 3 3 3 2 2 3 2 1 2 2 3 2 1 3 3 2 2 2 2 3 3 1 1 2 2 3 2 2 2 2 1 1 2 3 1 2 2 1 1 2 2 2 2 1 2 3 2 1 1 1 2 3 2 3 1 3 3 2 1 1 2 2 3 1 3 3 2 2 1 2 2 3 1 2 1 2 3 2 2 3 1 3 1 2 1 3 3 2 2 1 2\\r\\n85 58 117 3 98 12 35 75 167 155 18 169 88 22 145 132 49 29 71 184 161 9 142 153 189 67 118 112 26 92 139 ...', 'output': ['381']}, {'input': '200\\r\\n2 1 2 2 2 2 1 3 2 3 1 3 3 1 3 3 2 2 2 2 1 3 1 1 2 1 3 2 3 2 2 1 1 1 2 1 2 2 2 1 3 1 1 1 1 1 2 2 1 1 3 1 1 2 1 1 3 2 2 2 3 2 1 1 2 3 1 1 2 1 3 1 3 1 1 2 1 2 3 3 3 3 2 2 2 2 1 3 2 1 3 1 2 3 3 1 3 2 1 1 2 3 2 1 3 2 3 3 3 3 1 2 1 2 3 2 2 1 1 3 1 2 3 2 3 2 1 1 1 3 2 3 1 2 1 1 2 1 3 1 2 1 1 2 3 1 3 3 1 3 2 3 1 1 1 3 1 3 1 1 2 1 2 3 2 3 3 3 2 3 1 3 1 2 3 1 3 1 1 1 3 1 2 3 1 1 2 3 3 1 1 2 2 1 3 2 3 1 2 1\\r\\n131 141 103 74 113 45 96 142 55 196 126 6 77 139 102 15 194 34 105 158 145 187 134 27 162 100 57 8 183 29...', 'output': ['391']}, {'input': '200\\r\\n3 1 3 3 1 3 3 2 1 2 2 3 3 2 1 1 1 2 2 2 2 2 3 1 1 3 1 1 1 3 3 3 2 2 3 3 3 1 1 1 1 3 1 3 3 2 1 3 2 3 3 3 2 2 3 1 2 3 1 2 3 2 2 2 3 2 1 3 2 1 2 3 1 2 1 2 2 3 3 3 2 1 1 3 2 1 1 2 2 1 1 3 2 3 2 2 3 1 3 2 2 1 1 3 2 1 1 2 2 1 2 2 2 2 1 3 2 2 1 1 2 1 1 1 2 1 1 2 3 1 3 1 3 3 3 2 3 1 3 3 2 2 2 3 1 2 1 2 3 2 1 2 2 2 1 3 2 2 1 2 2 3 2 2 3 3 1 1 3 1 2 2 2 3 1 2 3 3 2 3 3 2 3 2 3 2 3 2 2 3 1 2 1 1 2 3 3 1 1 2\\r\\n28 123 137 3 177 73 48 126 94 112 66 186 197 78 26 181 180 187 117 142 29 189 31 191 24 125 45 200 140\\r\\n1...', 'output': ['390']}, {'input': '200\\r\\n1 1 1 2 3 1 3 2 1 1 1 1 1 3 2 3 1 2 2 1 2 2 2 1 1 2 2 2 2 3 3 3 3 3 2 3 1 3 1 1 3 3 2 1 2 2 3 2 1 2 1 3 3 3 2 2 1 2 1 1 1 2 2 1 3 3 3 1 1 2 1 2 1 3 2 1 2 2 2 3 3 1 2 2 2 1 2 3 2 3 1 2 1 3 2 3 1 2 1 3 3 2 1 3 1 2 2 2 1 2 1 2 3 3 3 3 1 3 1 2 1 1 1 2 2 1 2 3 3 1 1 2 3 3 3 2 3 1 1 3 1 1 3 3 3 1 1 3 1 2 3 3 2 3 3 3 2 1 1 1 1 2 3 2 3 3 2 1 3 1 2 3 2 1 1 3 3 2 1 3 3 1 1 1 2 3 1 3 1 3 3 2 3 3 1 1 1 3 3 1\\r\\n141 15 147 168 123 32 99 115 22 9 10 125 79 96 145 126 59 17 20 188 124 21 172 23 14 177 26 112 150 54 47...', 'output': ['383']}, {'input': '200\\r\\n3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 2 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 2 3 1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n...', 'output': ['202']}, {'input': '200\\r\\n3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 3\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n...', 'output': ['201']}, {'input': '200\\r\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2\\r\\n0\\r\\n1 1\\r\\n1 2\\r\\n1 2\\r\\n1 1\\r\\n1 5\\r\\n1 5\\r\\n1 6\\r\\n1 7\\r\\n1 8\\r\\n1 5\\r\\n1 8\\r\\n1 6\\r\\n1 12\\r\\n1 14\\r\\n1 2\\r\\n1 12\\r\\n1 4\\r\\n1 9\\r\\n1 2\\r\\n1 17...', 'output': ['214']}, {'input': '4\\r\\n1 1 2 3\\r\\n1 2\\r\\n1 3\\r\\n0\\r\\n1 1\\r\\n', 'output': ['8']}, {'input': '15\\r\\n3 2 2 2 1 1 2 1 1 2 2 3 3 3 2\\r\\n1 13\\r\\n4 13 1 8 14\\r\\n10 5 13 1 8 14 4 2 11 15 10\\r\\n6 5 13 1 8 9 14\\r\\n0\\r\\n11 5 13 1 8 14 4 2 11 10 3 12\\r\\n11 13 1 8 14 4 2 11 15 10 3 6\\r\\n2 13 1\\r\\n4 5 13 1 8\\r\\n8 5 13 1 8 14 2 11 15\\r\\n6 5 13 1 8 14 2\\r\\n10 5 13 1 8 14 2 11 15 10 3\\r\\n0...', 'output': ['23']}, {'input': '17\\r\\n2 3 1 3 3 3 1 1 1 2 2 2 3 2 3 3 2\\r\\n5 4 14 2 11 7\\r\\n3 13 4 14\\r\\n7 6 4 14 2 1 10 12\\r\\n2 6 13\\r\\n9 4 2 9 8 7 17 1 10 12\\r\\n0\\r\\n5 4 14 2 9 11\\r\\n4 13 4 2 11\\r\\n4 13 4 14 2\\r\\n7 13 4 2 11 8 7 1\\r\\n4 13 4 14 2\\r\\n8 6 4 2 8 7 17 1 10\\r\\n0\\r\\n1 4\\r\\n7 13 4 14 2 9 8 7\\r\\n6 4 2 17 1 10 ...', 'output': ['27']}, {'input': '18\\r\\n1 2 3 3 2 2 1 1 3 1 2 3 2 3 1 2 2 3\\r\\n5 9 3 14 12 2\\r\\n7 9 4 3 14 16 7 12\\r\\n1 9\\r\\n1 9\\r\\n6 9 14 12 1 6 15\\r\\n6 9 14 12 2 1 11\\r\\n2 9 14\\r\\n7 9 14 7 12 2 1 6\\r\\n0\\r\\n6 9 18 14 7 1 6\\r\\n4 9 14 7 1\\r\\n2 9 14\\r\\n6 9 3 14 7 1 6\\r\\n2 9 3\\r\\n9 9 3 14 16 12 2 1 6 17\\r\\n4 9 4 18 14\\r\\n8 9 1...', 'output': ['26']}, {'input': '19\\r\\n2 3 3 2 3 1 3 1 2 2 2 1 1 1 2 2 1 3 3\\r\\n0\\r\\n3 1 10 6\\r\\n8 1 6 2 17 18 12 15 7\\r\\n5 6 2 9 17 18\\r\\n6 6 2 17 18 12 16\\r\\n1 11\\r\\n9 1 11 6 2 17 18 4 12 15\\r\\n3 1 6 2\\r\\n4 1 6 2 8\\r\\n0\\r\\n1 1\\r\\n5 1 6 2 17 18\\r\\n12 1 10 6 2 8 17 18 4 12 15 7 3\\r\\n10 11 6 2 17 18 4 12 16 15 7\\r\\n8 1 ...', 'output': ['30']}, {'input': '20\\r\\n2 2 3 2 3 1 1 3 1 1 1 1 1 3 2 1 3 1 1 1\\r\\n1 7\\r\\n13 7 1 11 4 6 16 20 12 5 18 19 15 10\\r\\n8 7 1 11 4 6 17 8 16\\r\\n3 7 1 11\\r\\n9 7 1 11 4 6 8 20 12 3\\r\\n4 7 1 11 4\\r\\n0\\r\\n6 7 1 11 4 6 17\\r\\n4 7 1 11 4\\r\\n7 7 1 11 4 6 17 5\\r\\n2 7 1\\r\\n9 7 1 11 4 6 17 8 14 20\\r\\n11 7 1 11 4 6 20...', 'output': ['35']}, {'input': '200\\r\\n3 3 3 1 3 1 3 1 1 1 3 2 1 1 3 1 3 3 2 2 2 2 3 3 1 3 2 3 1 2 3 3 2 2 1 2 3 3 1 3 1 3 3 3 1 2 1 3 3 1 2 1 2 3 2 2 3 2 2 3 2 3 1 1 1 2 2 2 1 3 1 2 1 3 2 3 2 1 2 2 1 1 2 2 1 3 3 2 2 1 3 2 3 2 3 1 2 2 2 3 3 2 2 3 2 3 3 3 3 3 2 2 3 3 2 3 2 1 2 3 2 3 2 1 2 ...', 'output': ['224']}, {'input': '200\\r\\n1 2 3 2 1 1 3 3 3 3 2 1 1 2 3 3 1 3 2 3 1 3 3 1 2 3 3 2 2 1 3 3 3 3 1 1 2 2 2 2 2 1 1 2 3 2 3 3 3 2 2 1 2 3 2 1 1 1 1 1 3 2 2 2 2 1 3 1 2 2 3 1 1 2 1 1 1 1 2 2 2 1 3 2 1 1 2 2 2 1 1 3 1 3 3 1 3 3 2 3 2 2 3 1 3 3 1 3 3 3 3 2 1 3 1 3 2 2 1 3 2 2 3 1 2 ...', 'output': ['220']}, {'input': '200\\r\\n1 3 2 3 2 3 3 3 2 2 3 2 3 1 1 3 3 2 2 2 1 1 3 3 3 1 1 1 1 2 2 3 1 3 2 3 3 2 1 2 3 2 2 1 2 1 3 3 3 1 3 3 3 2 2 1 3 3 1 1 2 1 2 2 3 3 3 2 1 2 2 2 2 3 2 1 3 1 3 2 2 2 1 3 2 2 3 3 1 3 3 1 3 1 1 2 3 1 1 2 3 1 3 2 1 1 2 2 2 1 1 3 3 1 1 3 1 1 2 1 3 2 1 2 2 ...', 'output': ['219']}, {'input': '200\\r\\n1 3 3 1 1 2 1 3 2 2 3 2 2 1 3 1 1 3 3 2 3 3 2 3 2 3 1 2 3 3 2 2 3 3 1 3 3 1 1 1 2 1 1 1 2 2 2 3 2 3 2 1 1 3 2 3 2 1 1 3 3 1 3 1 3 3 3 3 1 2 3 2 1 1 1 2 1 3 2 3 2 1 3 3 2 2 3 3 1 2 1 3 1 2 2 1 1 3 3 3 3 2 1 1 2 1 3 1 3 3 1 2 1 2 1 2 2 1 3 1 2 3 2 3 2 ...', 'output': ['222']}, {'input': '200\\r\\n3 1 2 3 2 1 3 2 2 1 3 1 1 1 3 1 3 3 1 1 3 1 2 2 2 1 3 3 2 1 3 2 3 3 3 2 2 1 3 1 2 1 3 2 2 2 2 1 1 2 2 3 1 2 1 3 2 3 2 1 2 1 2 3 3 2 2 2 2 1 2 2 1 2 3 1 1 1 3 3 1 3 2 3 1 2 2 1 2 2 3 3 1 1 1 2 1 1 3 1 3 2 2 1 3 1 2 3 1 3 2 3 3 3 1 3 1 2 3 3 2 2 2 2 2 ...', 'output': ['223']}, {'input': '200\\r\\n3 2 2 1 3 2 2 3 1 1 2 3 3 1 2 2 3 3 1 1 3 3 3 1 1 3 2 3 2 3 3 2 2 1 3 2 1 2 3 1 1 3 3 2 3 1 1 2 3 2 1 3 2 2 3 3 1 1 1 3 2 1 3 1 2 1 2 1 2 3 1 3 2 2 1 1 1 1 3 2 1 1 1 1 3 1 3 1 3 3 1 2 2 2 1 2 3 1 2 3 1 1 2 3 3 3 1 3 2 2 2 2 2 2 3 1 1 3 1 3 1 1 3 3 1 ...', 'output': ['222']}, {'input': '200\\r\\n1 2 3 3 1 2 1 1 2 1 1 1 1 2 3 3 3 1 2 2 2 2 3 2 1 2 2 3 3 1 1 3 1 1 1 3 1 3 3 2 2 3 3 3 2 3 1 1 1 1 2 3 2 3 3 3 1 1 3 3 1 2 3 1 3 1 3 2 3 2 1 3 1 1 1 2 1 3 2 2 2 3 2 2 2 2 1 3 3 3 3 1 3 1 2 1 2 1 2 1 2 3 2 3 1 3 1 2 1 1 2 3 3 1 2 1 1 1 1 2 3 1 1 1 2 ...', 'output': ['219']}, {'input': '200\\r\\n3 1 3 3 2 1 2 1 1 3 3 3 2 3 2 3 3 2 1 1 2 3 2 2 1 1 2 2 2 3 3 2 2 3 2 1 2 3 1 1 3 1 1 2 2 2 3 3 2 2 3 2 3 1 2 2 2 1 3 1 3 3 3 2 3 2 2 1 2 1 1 3 2 2 3 3 2 3 2 1 2 3 3 3 3 1 2 1 1 3 1 3 1 2 2 1 3 1 1 2 2 3 1 3 1 2 3 3 2 1 2 1 2 1 2 3 2 1 1 2 1 3 1 3 1 ...', 'output': ['221']}, {'input': '200\\r\\n2 1 1 3 2 1 3 2 1 2 2 2 3 1 3 1 3 3 2 2 2 3 1 2 1 2 1 2 1 3 1 3 2 2 2 2 2 2 3 2 3 2 3 2 2 3 2 3 2 3 2 3 3 1 1 3 2 3 3 1 3 2 1 1 1 3 1 2 2 2 2 1 2 3 2 1 1 3 1 1 3 2 1 3 2 2 1 2 1 2 1 3 2 2 2 1 2 1 2 3 3 3 1 1 2 2 3 3 3 3 1 3 1 2 1 3 1 2 2 2 2 1 2 1 2 ...', 'output': ['216']}, {'input': '200\\r\\n1 2 1 3 2 1 1 3 3 3 1 3 1 2 1 1 3 2 2 3 2 3 1 2 2 3 2 3 2 3 2 1 3 1 3 3 3 3 2 3 2 2 3 3 2 3 2 2 1 3 2 2 2 1 2 1 2 3 3 1 3 1 2 1 1 2 2 1 1 2 3 3 2 2 1 3 1 2 2 2 1 2 2 3 3 2 1 1 1 1 2 1 3 1 3 2 1 3 3 2 1 2 3 1 3 2 2 2 3 3 2 1 3 3 2 2 3 1 3 1 2 2 3 1 3 ...', 'output': ['219']}, {'input': '200\\r\\n3 3 2 3 2 3 1 3 2 2 1 3 2 2 1 3 1 3 3 3 2 2 2 2 1 1 3 1 1 2 1 3 1 3 2 1 1 2 3 3 2 3 1 1 3 2 2 2 3 2 1 3 3 2 3 2 2 2 3 3 2 3 2 3 1 2 2 3 3 2 3 3 1 3 1 3 1 1 1 3 1 1 2 3 2 1 1 1 2 2 2 2 3 2 1 2 3 1 3 3 1 2 2 1 2 1 1 3 3 3 1 1 2 3 1 2 3 2 2 1 2 2 3 1 3 ...', 'output': ['213']}, {'input': '200\\r\\n3 2 2 2 2 3 1 1 1 2 2 2 3 2 3 3 3 1 3 2 3 1 2 2 1 1 1 3 1 3 1 1 1 1 2 3 3 1 3 1 2 2 1 2 3 2 1 2 2 1 1 2 1 2 3 1 3 1 1 2 1 3 2 3 1 2 2 3 1 3 2 2 2 1 1 2 1 1 2 2 1 2 2 2 2 2 3 1 3 2 2 1 3 2 2 2 3 1 3 1 3 1 1 1 2 1 1 3 3 1 3 2 3 3 1 3 3 2 1 1 3 1 1 2 3 ...', 'output': ['210']}, {'input': '200\\r\\n2 1 2 3 2 2 1 2 2 2 1 3 2 2 2 2 1 1 3 2 2 2 3 3 3 1 2 3 2 1 2 2 1 3 3 2 1 3 3 1 1 2 2 2 3 1 2 3 1 1 3 3 1 1 1 1 2 2 1 2 2 2 3 2 2 1 2 3 3 2 2 3 3 3 2 1 1 2 1 1 1 2 3 3 2 3 1 2 3 1 3 1 1 1 3 1 1 1 1 3 2 3 3 2 2 1 1 2 2 1 1 1 2 3 1 3 3 2 2 1 1 3 1 1 2 ...', 'output': ['210']}, {'input': '200\\r\\n3 1 1 1 3 3 3 1 3 3 1 3 1 2 3 3 3 2 1 2 2 3 3 1 1 3 2 1 3 2 1 2 3 2 2 1 1 2 2 1 1 3 2 2 1 2 2 1 2 2 1 3 1 2 3 1 3 3 1 3 1 3 2 3 2 2 1 2 3 2 1 3 2 3 1 1 1 1 1 1 2 2 3 2 3 3 3 1 3 1 2 3 1 1 3 2 3 2 1 1 3 2 2 2 3 2 1 3 2 1 3 2 3 2 2 1 2 1 2 1 3 2 1 2 1 ...', 'output': ['212']}, {'input': '200\\r\\n1 1 3 3 2 2 2 2 2 3 2 3 1 1 1 2 2 2 3 3 1 1 2 1 3 1 3 2 2 2 3 1 3 2 3 2 2 3 1 1 3 3 2 3 3 3 2 2 1 2 3 3 2 2 1 3 2 1 2 3 1 3 2 1 1 1 2 1 3 1 1 3 2 3 1 2 3 3 2 1 2 1 2 3 3 3 1 1 3 3 2 3 3 1 2 2 3 1 3 3 2 1 3 3 2 2 3 2 2 3 1 2 2 3 2 3 2 3 1 3 1 1 3 2 2 ...', 'output': ['208']}, {'input': '200\\r\\n2 2 2 3 2 1 1 2 3 1 3 2 1 1 1 2 2 2 3 1 3 3 2 1 1 2 1 3 1 3 3 1 1 3 2 1 3 2 2 3 1 2 3 2 2 2 3 3 1 1 3 3 1 2 3 2 3 2 1 1 2 3 3 2 3 3 2 1 3 2 2 3 1 2 2 2 2 2 3 2 3 3 2 3 3 3 3 1 2 2 2 1 3 2 1 1 2 1 3 1 1 3 3 1 1 2 1 2 2 3 1 1 2 1 1 1 2 3 2 2 1 1 1 1 3 ...', 'output': ['213']}, {'input': '200\\r\\n3 3 1 3 2 3 2 3 1 3 3 1 1 2 3 1 2 2 2 3 2 2 2 2 1 3 3 2 2 2 3 3 3 3 1 1 3 1 3 1 2 1 2 3 2 2 3 3 3 3 1 3 1 3 1 3 3 3 2 2 1 1 2 1 2 2 2 2 1 2 1 1 2 3 2 3 2 2 2 3 3 3 3 3 2 2 1 1 1 2 1 1 2 3 2 3 1 3 1 1 1 3 3 2 3 2 1 3 1 3 1 2 2 2 2 1 1 2 2 3 2 1 2 2 3 ...', 'output': ['215']}, {'input': '200\\r\\n1 2 3 1 1 1 2 2 2 2 1 2 1 2 3 2 2 3 2 1 2 1 1 2 2 1 2 2 3 1 2 3 3 3 1 1 1 2 1 1 1 1 1 1 1 2 3 2 1 1 3 2 1 2 1 1 3 3 1 3 2 3 2 1 3 3 3 3 1 1 3 3 3 1 2 1 1 1 1 1 1 1 1 2 1 3 3 1 2 1 2 1 2 2 1 2 1 2 3 3 2 2 2 1 1 2 2 3 3 1 1 1 2 2 3 1 3 2 1 3 1 2 1 1 2 ...', 'output': ['213']}, {'input': '200\\r\\n2 3 1 2 1 3 2 1 1 2 1 2 3 3 1 2 1 3 3 2 1 1 3 1 2 3 3 3 1 1 3 1 1 1 2 3 3 3 1 2 3 2 2 1 2 3 3 1 1 2 1 3 3 1 2 3 3 2 2 1 2 1 2 1 3 2 2 3 2 2 1 1 3 3 2 2 1 1 3 1 1 1 3 1 3 1 1 3 1 3 2 3 1 3 1 1 3 2 3 2 2 1 3 3 2 2 2 2 3 3 1 1 1 1 2 1 1 1 3 1 3 2 1 2 1 ...', 'output': ['212']}, {'input': '200\\r\\n2 3 3 1 1 1 3 3 3 3 1 1 1 1 2 2 2 2 2 1 3 1 2 3 1 1 1 3 2 2 1 2 2 3 3 2 3 2 2 2 3 2 3 3 2 2 1 2 3 3 1 1 1 2 2 3 1 2 1 3 3 2 1 3 3 3 2 2 1 2 3 2 2 1 2 1 2 2 1 3 3 2 2 3 3 2 3 1 3 3 1 2 1 1 1 3 1 2 1 2 3 1 3 2 2 1 2 3 1 2 3 3 1 2 1 1 2 2 2 1 3 2 3 3 2 ...', 'output': ['215']}, {'input': '200\\r\\n3 3 2 2 3 2 1 1 1 1 3 3 1 2 2 2 1 1 3 1 3 3 1 2 3 1 3 2 3 2 2 3 2 2 2 3 1 2 2 1 1 3 3 1 3 3 2 1 3 2 1 1 3 3 2 1 3 1 1 2 3 2 1 2 3 1 2 2 3 1 2 1 1 3 1 3 2 3 1 3 1 3 2 2 2 1 2 1 2 2 2 2 3 1 2 1 1 2 3 3 1 2 1 2 1 2 2 3 2 2 3 2 1 3 2 1 1 1 3 3 3 2 2 3 2 ...', 'output': ['346']}, {'input': '200\\r\\n1 1 1 3 2 3 1 2 2 2 1 1 1 3 2 2 3 1 1 2 1 2 1 2 2 3 2 2 2 2 1 3 1 1 1 3 2 2 3 2 3 3 1 2 1 1 2 3 1 1 2 3 2 3 1 1 2 1 2 1 2 3 2 3 1 1 2 1 1 3 2 2 1 1 1 2 1 1 1 1 1 3 1 1 3 3 3 1 3 2 1 2 1 1 1 3 1 1 3 2 3 1 1 3 3 1 1 1 1 1 3 2 2 3 1 1 2 3 3 1 1 3 3 2 3 ...', 'output': ['338']}, {'input': '200\\r\\n3 2 3 1 2 1 2 3 3 1 3 2 3 1 1 3 3 2 2 2 1 2 2 3 1 1 1 2 3 3 2 3 3 2 3 2 2 1 3 3 2 1 3 3 2 2 1 1 1 2 3 1 3 3 2 3 1 3 3 3 3 3 3 2 2 1 2 3 3 1 2 1 1 1 3 1 1 3 1 1 2 2 2 2 3 3 3 1 1 2 3 2 1 3 2 2 1 2 3 1 2 3 3 3 3 3 2 1 1 3 3 2 3 1 3 3 3 1 2 1 2 2 1 1 3 ...', 'output': ['335']}, {'input': '200\\r\\n2 2 3 3 3 1 3 3 1 3 2 3 2 3 2 3 1 1 1 3 3 3 2 2 3 3 2 1 3 1 1 3 3 3 3 3 1 2 3 2 3 2 1 1 1 3 3 2 2 3 2 1 2 3 1 2 2 2 3 3 3 2 3 2 3 3 3 1 2 2 1 2 3 3 3 1 1 3 3 1 2 1 1 3 3 1 2 3 1 3 3 2 2 3 2 3 1 1 2 1 1 3 1 3 2 2 2 3 1 2 1 1 2 3 2 2 1 1 3 1 1 3 1 2 1 ...', 'output': ['339']}, {'input': '200\\r\\n2 2 3 1 3 2 2 3 3 1 2 3 1 1 2 1 3 3 2 3 3 3 3 3 3 2 2 1 3 1 1 1 2 3 3 1 1 3 1 2 3 3 3 1 2 1 3 3 2 1 3 2 1 3 2 2 3 3 1 3 3 1 2 2 2 2 3 3 1 1 2 3 3 1 1 3 1 1 2 3 2 2 3 3 1 2 1 3 3 1 1 3 2 2 2 1 2 1 1 3 2 1 2 3 3 3 3 1 1 3 1 1 1 2 3 1 2 2 3 1 1 2 3 3 1 ...', 'output': ['387']}, {'input': '200\\r\\n2 3 1 2 3 2 3 2 2 3 2 2 1 2 3 1 1 2 3 2 3 1 1 1 2 1 3 1 1 1 3 3 3 2 3 1 2 2 2 3 2 3 3 3 2 1 3 1 2 1 1 1 3 3 2 3 2 2 3 2 3 3 3 2 2 3 3 2 2 3 1 3 3 2 3 1 2 1 2 1 3 3 2 1 1 2 3 3 2 1 2 1 2 1 1 3 2 2 1 3 3 3 2 1 1 3 2 3 1 1 3 3 2 1 3 1 2 2 2 1 3 3 3 1 1 ...', 'output': ['411']}, {'input': '200\\r\\n1 1 1 3 2 3 1 2 2 3 2 3 2 3 2 3 2 3 2 1 3 2 2 2 2 1 1 3 1 1 3 2 3 2 1 1 3 1 3 3 1 2 1 3 3 3 2 1 2 2 3 1 1 2 3 3 1 1 1 3 2 2 1 3 2 3 3 1 2 1 1 3 1 3 1 3 2 2 1 1 2 1 2 3 2 1 3 3 3 1 2 1 3 3 1 3 2 3 3 1 3 1 1 3 2 3 2 3 1 3 3 3 2 2 3 2 1 2 2 3 2 1 3 3 2 ...', 'output': ['381']}, {'input': '200\\r\\n2 1 2 2 2 2 1 3 2 3 1 3 3 1 3 3 2 2 2 2 1 3 1 1 2 1 3 2 3 2 2 1 1 1 2 1 2 2 2 1 3 1 1 1 1 1 2 2 1 1 3 1 1 2 1 1 3 2 2 2 3 2 1 1 2 3 1 1 2 1 3 1 3 1 1 2 1 2 3 3 3 3 2 2 2 2 1 3 2 1 3 1 2 3 3 1 3 2 1 1 2 3 2 1 3 2 3 3 3 3 1 2 1 2 3 2 2 1 1 3 1 2 3 2 3 ...', 'output': ['391']}, {'input': '200\\r\\n3 1 3 3 1 3 3 2 1 2 2 3 3 2 1 1 1 2 2 2 2 2 3 1 1 3 1 1 1 3 3 3 2 2 3 3 3 1 1 1 1 3 1 3 3 2 1 3 2 3 3 3 2 2 3 1 2 3 1 2 3 2 2 2 3 2 1 3 2 1 2 3 1 2 1 2 2 3 3 3 2 1 1 3 2 1 1 2 2 1 1 3 2 3 2 2 3 1 3 2 2 1 1 3 2 1 1 2 2 1 2 2 2 2 1 3 2 2 1 1 2 1 1 1 2 ...', 'output': ['390']}, {'input': '200\\r\\n1 1 1 2 3 1 3 2 1 1 1 1 1 3 2 3 1 2 2 1 2 2 2 1 1 2 2 2 2 3 3 3 3 3 2 3 1 3 1 1 3 3 2 1 2 2 3 2 1 2 1 3 3 3 2 2 1 2 1 1 1 2 2 1 3 3 3 1 1 2 1 2 1 3 2 1 2 2 2 3 3 1 2 2 2 1 2 3 2 3 1 2 1 3 2 3 1 2 1 3 3 2 1 3 1 2 2 2 1 2 1 2 3 3 3 3 1 3 1 2 1 1 1 2 2 ...', 'output': ['383']}, {'input': '200\\r\\n3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 ...', 'output': ['201', '202']}, {'input': '200\\r\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 ...', 'output': ['214']}]", "source_code": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt(), c, i, k, a[][] = new int[n][n];\n        int p[] = new int[n], dp[][] = new int [3][1<<n], p1[][] = new int[3][1<<n];\n        int min;\n        for(i=0; i<n; i++){\n            a[i][0] = in.nextInt()-1;\n            for(k=1; k<n; k++) a[i][k] = in.nextInt()-1;\n        }\n        for(i=0; i<n; i++){\n            p[i] = in.nextInt();\n        }\n        for(c=0; c<3; c++){\n            for(i=0; i<n; i++){\n                for(k=0; k<n-1; k++){\n                    dp[c][1<<i] = Math.min(dp[c][1<<i], dp[c][1<<a[i][k]]+(i==0?0:k+1));\n                    dp[c][1<<i] = Math.min(dp[c][1<<i], dp[c][1<<a[i][k+1]]+(i==0?0:k+1)+1);\n                }\n                dp[c][1<<i] = Math.min(dp[c][1<<i], dp[c^1][1<<p[i]]+(c==0?0:p[i]+1));\n                p1[c][1<<i] = i==0?0:(p[i]+1);\n                min = 1<<20;\n                for(k=0; k<n; k++){\n                    min = Math.min(min, p1[(c+k)%3][1<<a[i][k]]+((c+k+1)%3==0?0:k+1));\n                }\n                p1[c][1<<i] += min;\n            }\n        }\n        System.out.println(Math.min(p1[0][1<<0], Math.min(p1[1][1<<0], p1[2][1<<0])));\n    }\n}"}
{"src_uid": "be42e213ff43e303e475d77a9560367f", "id": 107, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1700, "testcases": "[{'input': '1\\r\\n1\\r\\n0\\r\\n', 'output': ['1']}, {'input': '5\\r\\n2 2 1 1 3\\r\\n1 5\\r\\n2 5 1\\r\\n2 5 4\\r\\n1 5\\r\\n0\\r\\n', 'output': ['7']}, {'input': '7\\r\\n1 3 3 1 2 1 1\\r\\n0\\r\\n1 1\\r\\n1 1\\r\\n2 1 6\\r\\n3 1 2 7\\r\\n1 1\\r\\n1 1\\r\\n', 'output': ['11']}, {'input': '2\\r\\n2 1\\r\\n0\\r\\n1 1\\r\\n', 'output': ['4']}, {'input': '3\\r\\n2 1 2\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['4']}, {'input': '4\\r\\n2 1 1 1\\r\\n0\\r\\n0\\r\\n1 1\\r\\n1 3\\r\\n', 'output': ['6']}, {'input': '6\\r\\n1 1 2 3 3 1\\r\\n2 2 3\\r\\n0\\r\\n0\\r\\n0\\r\\n2 2 1\\r\\n1 1\\r\\n', 'output': ['10']}, {'input': '8\\r\\n2 2 2 1 1 2 1 1\\r\\n3 5 6 7\\r\\n1 5\\r\\n2 5 6\\r\\n1 5\\r\\n0\\r\\n1 5\\r\\n1 5\\r\\n2 5 6\\r\\n', 'output': ['11']}, {'input': '9\\r\\n3 3 2 1 3 1 2 2 1\\r\\n2 4 3\\r\\n0\\r\\n2 4 2\\r\\n0\\r\\n1 4\\r\\n2 4 2\\r\\n0\\r\\n1 4\\r\\n3 4 3 8\\r\\n', 'output': ['13']}, {'input': '10\\r\\n3 1 2 2 2 1 2 1 1 1\\r\\n0\\r\\n2 6 9\\r\\n0\\r\\n1 9\\r\\n0\\r\\n1 3\\r\\n4 3 6 5 2\\r\\n3 6 4 2\\r\\n0\\r\\n1 3\\r\\n', 'output': ['14']}, {'input': '11\\r\\n1 2 2 3 3 2 2 2 2 3 1\\r\\n1 4\\r\\n2 7 11\\r\\n0\\r\\n0\\r\\n1 2\\r\\n1 11\\r\\n0\\r\\n1 2\\r\\n3 7 11 2\\r\\n3 3 2 9\\r\\n0\\r\\n', 'output': ['14']}, {'input': '12\\r\\n1 3 2 2 1 3 2 1 3 2 2 2\\r\\n2 3 4\\r\\n3 12 11 10\\r\\n1 8\\r\\n2 8 7\\r\\n2 9 10\\r\\n1 3\\r\\n0\\r\\n0\\r\\n1 4\\r\\n4 3 1 12 9\\r\\n3 8 3 4\\r\\n1 4\\r\\n', 'output': ['18']}, {'input': '13\\r\\n3 3 2 2 1 3 1 1 1 1 2 1 2\\r\\n5 6 3 11 13 12\\r\\n1 6\\r\\n2 10 6\\r\\n3 6 3 11\\r\\n1 6\\r\\n1 10\\r\\n3 6 2 3\\r\\n4 6 3 9 11\\r\\n3 6 2 3\\r\\n0\\r\\n3 6 2 3\\r\\n4 6 3 4 13\\r\\n2 6 3\\r\\n', 'output': ['21']}, {'input': '14\\r\\n3 2 2 1 2 1 1 3 1 2 2 3 1 1\\r\\n2 9 13\\r\\n3 9 13 8\\r\\n2 9 6\\r\\n3 9 6 13\\r\\n1 9\\r\\n1 9\\r\\n3 9 6 13\\r\\n2 9 13\\r\\n0\\r\\n4 9 3 13 4\\r\\n4 9 6 13 2\\r\\n2 9 13\\r\\n1 9\\r\\n8 9 5 6 3 13 7 4 11\\r\\n', 'output': ['20']}, {'input': '15\\r\\n1 2 3 2 3 2 2 2 3 3 3 2 3 1 3\\r\\n5 2 7 4 3 6\\r\\n0\\r\\n2 7 4\\r\\n2 2 15\\r\\n1 7\\r\\n1 7\\r\\n0\\r\\n2 4 6\\r\\n1 6\\r\\n2 15 3\\r\\n4 12 2 15 7\\r\\n0\\r\\n3 2 5 6\\r\\n3 2 4 6\\r\\n1 2\\r\\n', 'output': ['20']}, {'input': '16\\r\\n3 3 1 3 2 3 2 2 3 1 2 3 2 2 2 3\\r\\n1 14\\r\\n4 14 10 13 6\\r\\n3 14 15 6\\r\\n1 14\\r\\n4 14 10 9 7\\r\\n4 14 10 13 9\\r\\n4 14 10 13 6\\r\\n4 14 4 12 3\\r\\n2 14 4\\r\\n1 14\\r\\n1 14\\r\\n2 14 1\\r\\n4 14 10 4 1\\r\\n0\\r\\n2 14 10\\r\\n1 14\\r\\n', 'output': ['22']}, {'input': '17\\r\\n3 2 3 2 2 2 1 3 3 3 3 2 3 3 3 1 1\\r\\n0\\r\\n0\\r\\n2 8 10\\r\\n4 12 8 6 16\\r\\n0\\r\\n2 8 13\\r\\n3 2 8 10\\r\\n1 12\\r\\n4 8 17 3 16\\r\\n2 2 8\\r\\n0\\r\\n1 2\\r\\n2 8 10\\r\\n2 12 8\\r\\n2 8 10\\r\\n1 8\\r\\n2 12 8\\r\\n', 'output': ['21']}, {'input': '18\\r\\n2 1 1 3 2 1 3 2 3 3 2 2 1 1 3 1 1 3\\r\\n3 16 8 6\\r\\n3 16 6 1\\r\\n4 6 13 5 7\\r\\n2 6 2\\r\\n4 16 6 17 1\\r\\n2 16 8\\r\\n3 6 17 12\\r\\n1 16\\r\\n0\\r\\n3 6 15 1\\r\\n3 16 6 12\\r\\n7 16 9 8 6 13 17 14\\r\\n1 6\\r\\n1 6\\r\\n3 8 6 13\\r\\n0\\r\\n1 6\\r\\n3 9 6 13\\r\\n', 'output': ['26']}, {'input': '19\\r\\n2 1 2 3 3 3 2 1 1 1 1 3 3 1 1 1 2 2 3\\r\\n0\\r\\n2 1 7\\r\\n0\\r\\n4 3 2 17 13\\r\\n1 17\\r\\n1 3\\r\\n3 1 3 6\\r\\n4 1 17 9 13\\r\\n3 1 16 17\\r\\n0\\r\\n3 3 6 17\\r\\n1 6\\r\\n6 10 6 7 17 9 11\\r\\n3 10 17 13\\r\\n4 3 17 13 8\\r\\n1 3\\r\\n3 6 7 16\\r\\n0\\r\\n6 1 7 17 11 13 15\\r\\n', 'output': ['29']}, {'input': '20\\r\\n1 2 2 2 1 3 3 2 2 1 2 2 3 1 2 2 2 1 1 1\\r\\n2 10 8\\r\\n5 10 12 3 20 7\\r\\n0\\r\\n3 10 15 3\\r\\n0\\r\\n3 14 17 3\\r\\n2 12 20\\r\\n0\\r\\n3 17 10 12\\r\\n1 17\\r\\n1 5\\r\\n1 5\\r\\n0\\r\\n1 18\\r\\n3 18 5 12\\r\\n5 5 12 8 3 19\\r\\n0\\r\\n0\\r\\n1 12\\r\\n1 18\\r\\n', 'output': ['24']}, {'input': '11\\r\\n3 1 3 2 3 2 3 2 3 1 3\\r\\n6 2 3 9 5 7 10\\r\\n1 6\\r\\n2 6 2\\r\\n5 6 2 3 9 5\\r\\n2 3 9\\r\\n0\\r\\n5 3 9 5 8 4\\r\\n4 2 3 9 5\\r\\n2 2 3\\r\\n8 6 2 3 9 5 4 11 7\\r\\n4 2 3 9 5\\r\\n', 'output': ['21']}, {'input': '12\\r\\n2 3 3 1 1 3 2 2 3 1 3 3\\r\\n1 9\\r\\n1 1\\r\\n2 2 11\\r\\n5 1 2 11 5 8\\r\\n4 9 10 1 11\\r\\n5 9 10 12 11 5\\r\\n4 1 12 11 5\\r\\n5 10 1 2 12 11\\r\\n0\\r\\n1 9\\r\\n1 12\\r\\n0\\r\\n', 'output': ['19']}, {'input': '13\\r\\n3 2 2 1 3 3 2 3 2 2 1 2 3\\r\\n7 4 3 2 5 9 8 13\\r\\n1 4\\r\\n1 4\\r\\n0\\r\\n3 4 2 6\\r\\n2 4 2\\r\\n4 4 3 2 9\\r\\n5 4 2 6 9 7\\r\\n3 4 2 6\\r\\n6 4 3 2 5 9 7\\r\\n6 4 3 2 6 9 7\\r\\n8 4 2 6 5 9 8 11 10\\r\\n7 4 3 2 6 9 8 11\\r\\n', 'output': ['21']}, {'input': '14\\r\\n2 3 1 3 1 1 1 2 2 3 1 1 3 1\\r\\n4 14 9 8 5\\r\\n4 4 8 5 1\\r\\n9 4 14 9 8 1 2 13 7 12\\r\\n0\\r\\n2 14 8\\r\\n2 4 14\\r\\n7 9 6 10 8 1 2 13\\r\\n2 4 6\\r\\n1 14\\r\\n1 9\\r\\n8 4 6 10 8 5 1 2 3\\r\\n7 14 6 10 8 1 2 7\\r\\n5 10 8 5 1 2\\r\\n0\\r\\n', 'output': ['21']}, {'input': '15\\r\\n3 2 2 2 1 1 2 1 1 2 2 3 3 3 2\\r\\n1 13\\r\\n4 13 1 8 14\\r\\n10 5 13 1 8 14 4 2 11 15 10\\r\\n6 5 13 1 8 9 14\\r\\n0\\r\\n11 5 13 1 8 14 4 2 11 10 3 12\\r\\n11 13 1 8 14 4 2 11 15 10 3 6\\r\\n2 13 1\\r\\n4 5 13 1 8\\r\\n8 5 13 1 8 14 2 11 15\\r\\n6 5 13 1 8 14 2\\r\\n10 5 13 1 8 14 2 11 15 10 3\\r\\n0\\r\\n4 13 1 8 9\\r\\n8 5 13 1 8 9 14 2 11\\r\\n', 'output': ['23']}, {'input': '16\\r\\n3 1 2 3 3 2 3 1 3 2 2 1 2 2 1 2\\r\\n0\\r\\n0\\r\\n7 2 8 4 12 5 9 11\\r\\n1 1\\r\\n4 1 8 4 12\\r\\n5 2 4 12 5 11\\r\\n4 4 12 5 10\\r\\n0\\r\\n5 1 8 4 12 5\\r\\n6 1 4 12 5 9 11\\r\\n6 2 1 8 4 12 5\\r\\n2 4 13\\r\\n3 1 8 4\\r\\n8 1 4 13 12 5 10 3 6\\r\\n4 4 12 5 6\\r\\n8 8 4 13 12 5 9 6 14\\r\\n', 'output': ['26']}, {'input': '17\\r\\n2 3 1 3 3 3 1 1 1 2 2 2 3 2 3 3 2\\r\\n5 4 14 2 11 7\\r\\n3 13 4 14\\r\\n7 6 4 14 2 1 10 12\\r\\n2 6 13\\r\\n9 4 2 9 8 7 17 1 10 12\\r\\n0\\r\\n5 4 14 2 9 11\\r\\n4 13 4 2 11\\r\\n4 13 4 14 2\\r\\n7 13 4 2 11 8 7 1\\r\\n4 13 4 14 2\\r\\n8 6 4 2 8 7 17 1 10\\r\\n0\\r\\n1 4\\r\\n7 13 4 14 2 9 8 7\\r\\n6 4 2 17 1 10 12\\r\\n5 13 4 2 9 8\\r\\n', 'output': ['27']}, {'input': '18\\r\\n1 2 3 3 2 2 1 1 3 1 2 3 2 3 1 2 2 3\\r\\n5 9 3 14 12 2\\r\\n7 9 4 3 14 16 7 12\\r\\n1 9\\r\\n1 9\\r\\n6 9 14 12 1 6 15\\r\\n6 9 14 12 2 1 11\\r\\n2 9 14\\r\\n7 9 14 7 12 2 1 6\\r\\n0\\r\\n6 9 18 14 7 1 6\\r\\n4 9 14 7 1\\r\\n2 9 14\\r\\n6 9 3 14 7 1 6\\r\\n2 9 3\\r\\n9 9 3 14 16 12 2 1 6 17\\r\\n4 9 4 18 14\\r\\n8 9 18 14 12 1 11 6 13\\r\\n2 9 4\\r\\n', 'output': ['26']}, {'input': '19\\r\\n2 3 3 2 3 1 3 1 2 2 2 1 1 1 2 2 1 3 3\\r\\n0\\r\\n3 1 10 6\\r\\n8 1 6 2 17 18 12 15 7\\r\\n5 6 2 9 17 18\\r\\n6 6 2 17 18 12 16\\r\\n1 11\\r\\n9 1 11 6 2 17 18 4 12 15\\r\\n3 1 6 2\\r\\n4 1 6 2 8\\r\\n0\\r\\n1 1\\r\\n5 1 6 2 17 18\\r\\n12 1 10 6 2 8 17 18 4 12 15 7 3\\r\\n10 11 6 2 17 18 4 12 16 15 7\\r\\n8 1 6 2 8 17 18 12 16\\r\\n8 11 6 2 9 17 18 4 12\\r\\n3 11 6 2\\r\\n5 10 6 2 9 17\\r\\n10 1 6 2 17 18 12 5 15 7 3\\r\\n', 'output': ['30']}, {'input': '20\\r\\n2 2 3 2 3 1 1 3 1 1 1 1 1 3 2 1 3 1 1 1\\r\\n1 7\\r\\n13 7 1 11 4 6 16 20 12 5 18 19 15 10\\r\\n8 7 1 11 4 6 17 8 16\\r\\n3 7 1 11\\r\\n9 7 1 11 4 6 8 20 12 3\\r\\n4 7 1 11 4\\r\\n0\\r\\n6 7 1 11 4 6 17\\r\\n4 7 1 11 4\\r\\n7 7 1 11 4 6 17 5\\r\\n2 7 1\\r\\n9 7 1 11 4 6 17 8 14 20\\r\\n11 7 1 11 4 6 20 3 5 15 10 2\\r\\n5 7 1 11 4 6\\r\\n9 7 1 11 4 6 8 16 14 5\\r\\n5 7 1 11 4 6\\r\\n5 7 1 11 4 6\\r\\n11 7 1 11 4 9 6 17 8 20 3 5\\r\\n11 7 1 11 4 6 17 16 20 12 5 18\\r\\n6 7 1 11 4 6 14\\r\\n', 'output': ['35']}, {'input': '21\\r\\n1 2 1 3 3 3 1 1 2 2 3 1 3 1 3 3 1 1 1 2 2\\r\\n1 5\\r\\n0\\r\\n1 11\\r\\n0\\r\\n0\\r\\n0\\r\\n1 8\\r\\n0\\r\\n1 11\\r\\n1 1\\r\\n1 19\\r\\n0\\r\\n1 2\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 19\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['25']}, {'input': '22\\r\\n2 3 2 3 3 2 1 2 3 3 1 3 1 1 2 2 3 3 1 3 2 2\\r\\n0\\r\\n1 8\\r\\n1 22\\r\\n1 12\\r\\n0\\r\\n1 14\\r\\n0\\r\\n0\\r\\n0\\r\\n2 22 14\\r\\n1 12\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 16\\r\\n1 13\\r\\n0\\r\\n', 'output': ['25']}, {'input': '23\\r\\n3 1 3 3 2 2 2 1 3 2 3 1 1 1 1 2 3 1 2 1 3 1 1\\r\\n0\\r\\n1 11\\r\\n1 11\\r\\n2 11 16\\r\\n1 2\\r\\n3 11 1 12\\r\\n2 11 16\\r\\n2 12 2\\r\\n1 13\\r\\n2 12 2\\r\\n0\\r\\n0\\r\\n0\\r\\n2 13 11\\r\\n0\\r\\n1 11\\r\\n2 12 2\\r\\n3 16 6 21\\r\\n1 11\\r\\n0\\r\\n0\\r\\n2 11 12\\r\\n0\\r\\n', 'output': ['27']}, {'input': '24\\r\\n1 2 1 1 2 2 1 1 3 2 3 1 3 2 3 3 1 1 3 2 3 2 1 2\\r\\n1 16\\r\\n0\\r\\n0\\r\\n1 2\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 2\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n2 12 24\\r\\n0\\r\\n0\\r\\n1 11\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['27']}, {'input': '25\\r\\n3 3 1 1 1 2 2 2 3 1 2 3 2 1 2 2 2 3 2 1 2 3 2 1 1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 12\\r\\n0\\r\\n1 19\\r\\n0\\r\\n2 12 21\\r\\n2 3 10\\r\\n0\\r\\n1 21\\r\\n0\\r\\n1 9\\r\\n1 3\\r\\n0\\r\\n0\\r\\n2 3 2\\r\\n0\\r\\n1 12\\r\\n0\\r\\n1 3\\r\\n2 21 9\\r\\n', 'output': ['29']}, {'input': '26\\r\\n1 2 2 1 1 2 1 1 2 1 3 1 3 1 2 3 3 3 2 1 2 1 3 3 2 2\\r\\n1 9\\r\\n1 1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 5\\r\\n0\\r\\n2 15 12\\r\\n1 8\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n2 3 26\\r\\n0\\r\\n0\\r\\n0\\r\\n1 22\\r\\n0\\r\\n1 8\\r\\n', 'output': ['30']}, {'input': '27\\r\\n2 1 1 3 2 1 1 2 3 1 1 2 2 2 1 2 1 1 3 3 3 1 1 1 3 1 1\\r\\n0\\r\\n0\\r\\n0\\r\\n1 12\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 26\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 27\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 5\\r\\n0\\r\\n2 20 27\\r\\n1 18\\r\\n0\\r\\n', 'output': ['30']}, {'input': '28\\r\\n2 1 1 3 2 3 2 2 1 3 2 3 3 2 3 1 2 2 3 3 3 3 1 3 2 1 3 3\\r\\n0\\r\\n1 7\\r\\n0\\r\\n2 28 18\\r\\n1 28\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n2 10 18\\r\\n3 8 10 18\\r\\n0\\r\\n2 1 20\\r\\n0\\r\\n1 18\\r\\n1 27\\r\\n2 27 18\\r\\n0\\r\\n0\\r\\n1 28\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 28\\r\\n1 9\\r\\n', 'output': ['33']}, {'input': '29\\r\\n3 3 3 3 3 1 1 1 3 2 2 1 1 3 1 1 1 2 1 2 3 1 1 2 1 3 1 2 3\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 1\\r\\n0\\r\\n0\\r\\n2 28 15\\r\\n0\\r\\n0\\r\\n0\\r\\n2 24 23\\r\\n1 28\\r\\n0\\r\\n1 28\\r\\n1 20\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 28\\r\\n0\\r\\n0\\r\\n2 23 16\\r\\n0\\r\\n0\\r\\n1 7\\r\\n1 28\\r\\n', 'output': ['32']}, {'input': '30\\r\\n1 3 3 3 2 3 1 3 3 3 3 2 3 1 3 2 1 1 1 1 2 3 2 1 1 3 3 2 2 2\\r\\n0\\r\\n1 20\\r\\n0\\r\\n1 7\\r\\n2 6 9\\r\\n1 20\\r\\n1 20\\r\\n3 7 6 9\\r\\n2 10 6\\r\\n0\\r\\n0\\r\\n2 6 9\\r\\n0\\r\\n0\\r\\n1 20\\r\\n2 6 9\\r\\n2 6 9\\r\\n0\\r\\n2 6 9\\r\\n0\\r\\n2 6 9\\r\\n3 27 6 9\\r\\n2 6 9\\r\\n2 6 9\\r\\n0\\r\\n0\\r\\n0\\r\\n2 6 9\\r\\n3 6 9 19\\r\\n3 27 6 9\\r\\n', 'output': ['34']}, {'input': '200\\r\\n3 3 3 1 3 1 3 1 1 1 3 2 1 1 3 1 3 3 2 2 2 2 3 3 1 3 2 3 1 2 3 3 2 2 1 2 3 3 1 3 1 3 3 3 1 2 1 3 3 1 2 1 2 3 2 2 3 2 2 3 2 3 1 1 1 2 2 2 1 3 1 2 1 3 2 3 2 1 2 2 1 1 2 2 1 3 3 2 2 1 3 2 3 2 3 1 2 2 2 3 3 2 2 3 2 3 3 3 3 3 2 2 3 3 2 3 2 1 2 3 2 3 2 1 2 3 3 1 2 3 2 2 3 3 3 1 2 3 3 2 3 3 3 3 3 1 2 1 3 3 1 1 2 1 2 3 1 3 2 3 1 1 2 3 3 2 2 1 3 3 1 3 1 2 1 2 3 1 1 3 2 1 1 1 2 1 1 2 2 2 3 1 2 1 1 1 1 2 1 2\\r\\n19 52 113 18 109 125 8 150 180 173 174 116 130 79 122 112 19 80 110 121\\r\\n2 52 124\\r\\n13 52 129 148 125 150 ...', 'output': ['224']}, {'input': '200\\r\\n1 2 3 2 1 1 3 3 3 3 2 1 1 2 3 3 1 3 2 3 1 3 3 1 2 3 3 2 2 1 3 3 3 3 1 1 2 2 2 2 2 1 1 2 3 2 3 3 3 2 2 1 2 3 2 1 1 1 1 1 3 2 2 2 2 1 3 1 2 2 3 1 1 2 1 1 1 1 2 2 2 1 3 2 1 1 2 2 2 1 1 3 1 3 3 1 3 3 2 3 2 2 3 1 3 3 1 3 3 3 3 2 1 3 1 3 2 2 1 3 2 2 3 1 2 1 2 3 1 3 1 2 1 2 2 3 2 3 2 2 3 2 2 2 3 1 3 3 1 1 2 3 1 2 3 2 2 2 1 3 2 1 1 3 2 1 3 2 1 1 3 2 3 3 2 1 2 3 2 1 3 2 2 3 1 3 3 3 2 1 3 2 3 2 3 3 2 1 1 1\\r\\n16 96 58 20 140 86 51 130 57 66 64 112 177 54 123 62 155\\r\\n0\\r\\n0\\r\\n9 3 125 15 94 46 124 51 130 121\\r\\n4 56 124...', 'output': ['220']}, {'input': '200\\r\\n1 3 2 3 2 3 3 3 2 2 3 2 3 1 1 3 3 2 2 2 1 1 3 3 3 1 1 1 1 2 2 3 1 3 2 3 3 2 1 2 3 2 2 1 2 1 3 3 3 1 3 3 3 2 2 1 3 3 1 1 2 1 2 2 3 3 3 2 1 2 2 2 2 3 2 1 3 1 3 2 2 2 1 3 2 2 3 3 1 3 3 1 3 1 1 2 3 1 1 2 3 1 3 2 1 1 2 2 2 1 1 3 3 1 1 3 1 1 2 1 3 2 1 2 2 3 2 2 3 3 3 1 2 3 3 1 2 3 2 3 2 1 1 2 2 1 3 1 3 3 3 3 3 2 3 3 1 1 1 1 3 1 2 3 1 2 3 3 3 1 3 2 3 3 3 3 3 3 3 1 2 1 3 1 3 1 1 1 1 3 3 2 2 3 1 3 2 3 2 2\\r\\n0\\r\\n0\\r\\n3 193 176 85\\r\\n0\\r\\n1 193\\r\\n3 83 167 85\\r\\n0\\r\\n1 193\\r\\n5 161 193 85 16 44\\r\\n5 83 38 158 85 141\\r\\n7 120 4 158 ...', 'output': ['219']}, {'input': '200\\r\\n1 3 3 1 1 2 1 3 2 2 3 2 2 1 3 1 1 3 3 2 3 3 2 3 2 3 1 2 3 3 2 2 3 3 1 3 3 1 1 1 2 1 1 1 2 2 2 3 2 3 2 1 1 3 2 3 2 1 1 3 3 1 3 1 3 3 3 3 1 2 3 2 1 1 1 2 1 3 2 3 2 1 3 3 2 2 3 3 1 2 1 3 1 2 2 1 1 3 3 3 3 2 1 1 2 1 3 1 3 3 1 2 1 2 1 2 2 1 3 1 2 3 2 3 2 1 1 1 3 3 1 3 2 2 1 1 3 1 3 2 1 3 3 1 1 3 2 2 3 1 2 3 3 1 1 2 1 2 3 1 2 2 3 1 1 1 1 2 2 3 1 1 3 2 3 3 3 3 2 2 3 3 2 3 2 3 1 2 3 1 1 2 3 2 1 1 3 2 3 1\\r\\n3 4 164 15\\r\\n8 15 35 25 18 32 168 10 118\\r\\n3 50 15 35\\r\\n0\\r\\n0\\r\\n2 4 15\\r\\n0\\r\\n5 50 15 44 84 120\\r\\n5 15 111 91 66 1...', 'output': ['222']}, {'input': '200\\r\\n3 1 2 3 2 1 3 2 2 1 3 1 1 1 3 1 3 3 1 1 3 1 2 2 2 1 3 3 2 1 3 2 3 3 3 2 2 1 3 1 2 1 3 2 2 2 2 1 1 2 2 3 1 2 1 3 2 3 2 1 2 1 2 3 3 2 2 2 2 1 2 2 1 2 3 1 1 1 3 3 1 3 2 3 1 2 2 1 2 2 3 3 1 1 1 2 1 1 3 1 3 2 2 1 3 1 2 3 1 3 2 3 3 3 1 3 1 2 3 3 2 2 2 2 2 3 2 3 3 3 3 2 3 2 3 2 1 3 2 1 3 2 1 1 3 1 3 1 2 2 2 2 1 1 1 1 3 2 1 3 3 1 1 2 1 3 3 1 1 3 1 3 2 2 2 3 2 3 2 3 1 2 3 2 3 3 2 3 3 1 1 2 2 2 3 1 2 2 2 2\\r\\n0\\r\\n0\\r\\n11 153 175 47 143 18 78 79 113 170 35 49\\r\\n8 45 153 67 74 161 162 122 170\\r\\n4 153 137 67 72\\r\\n2 153 10...', 'output': ['223']}, {'input': '200\\r\\n3 2 2 1 3 2 2 3 1 1 2 3 3 1 2 2 3 3 1 1 3 3 3 1 1 3 2 3 2 3 3 2 2 1 3 2 1 2 3 1 1 3 3 2 3 1 1 2 3 2 1 3 2 2 3 3 1 1 1 3 2 1 3 1 2 1 2 1 2 3 1 3 2 2 1 1 1 1 3 2 1 1 1 1 3 1 3 1 3 3 1 2 2 2 1 2 3 1 2 3 1 1 2 3 3 3 1 3 2 2 2 2 2 2 3 1 1 3 1 3 1 1 3 3 1 2 1 3 3 2 1 2 2 1 1 2 3 1 3 3 3 2 2 1 1 1 3 3 1 2 3 1 1 3 2 3 2 1 3 3 2 1 3 1 1 1 2 1 1 2 3 2 3 2 3 1 3 1 3 1 3 3 1 2 2 3 3 3 2 1 3 1 1 2 2 2 3 3 1 1\\r\\n0\\r\\n3 96 43 53\\r\\n3 43 156 199\\r\\n1 43\\r\\n3 1 43 33\\r\\n6 43 50 191 21 57 168\\r\\n10 43 194 185 192 83 101 152 80 191 ...', 'output': ['222']}, {'input': '200\\r\\n1 2 3 3 1 2 1 1 2 1 1 1 1 2 3 3 3 1 2 2 2 2 3 2 1 2 2 3 3 1 1 3 1 1 1 3 1 3 3 2 2 3 3 3 2 3 1 1 1 1 2 3 2 3 3 3 1 1 3 3 1 2 3 1 3 1 3 2 3 2 1 3 1 1 1 2 1 3 2 2 2 3 2 2 2 2 1 3 3 3 3 1 3 1 2 1 2 1 2 1 2 3 2 3 1 3 1 2 1 1 2 3 3 1 2 1 1 1 1 2 3 1 1 1 2 3 2 1 1 2 3 3 2 3 3 3 1 3 1 2 3 2 3 2 1 2 3 2 2 2 3 1 2 3 2 1 2 3 1 1 1 3 1 2 3 2 3 1 3 2 1 2 3 1 1 1 1 2 2 2 1 2 1 2 3 3 2 1 3 3 2 2 3 1 1 2 1 3 1 2\\r\\n11 164 21 199 71 131 112 110 4 146 192 179\\r\\n4 71 127 60 14\\r\\n14 193 144 133 70 97 71 53 110 145 113 57 166...', 'output': ['219']}, {'input': '200\\r\\n3 1 3 3 2 1 2 1 1 3 3 3 2 3 2 3 3 2 1 1 2 3 2 2 1 1 2 2 2 3 3 2 2 3 2 1 2 3 1 1 3 1 1 2 2 2 3 3 2 2 3 2 3 1 2 2 2 1 3 1 3 3 3 2 3 2 2 1 2 1 1 3 2 2 3 3 2 3 2 1 2 3 3 3 3 1 2 1 1 3 1 3 1 2 2 1 3 1 1 2 2 3 1 3 1 2 3 3 2 1 2 1 2 1 2 3 2 1 1 2 1 3 1 3 1 3 2 1 2 1 3 3 1 1 1 2 1 2 3 3 1 2 2 1 1 3 1 1 1 3 2 3 1 2 2 3 1 2 1 1 1 1 1 3 3 3 1 1 2 2 3 3 2 2 2 1 3 1 1 3 2 1 1 3 3 3 2 2 1 1 1 1 2 3 3 3 2 2 1 3\\r\\n7 132 13 75 196 148 170 110\\r\\n10 132 16 77 192 46 146 55 75 99 98\\r\\n1 132\\r\\n1 132\\r\\n5 132 103 73 119 13\\r\\n6 13...', 'output': ['221']}, {'input': '200\\r\\n2 1 1 3 2 1 3 2 1 2 2 2 3 1 3 1 3 3 2 2 2 3 1 2 1 2 1 2 1 3 1 3 2 2 2 2 2 2 3 2 3 2 3 2 2 3 2 3 2 3 2 3 3 1 1 3 2 3 3 1 3 2 1 1 1 3 1 2 2 2 2 1 2 3 2 1 1 3 1 1 3 2 1 3 2 2 1 2 1 2 1 3 2 2 2 1 2 1 2 3 3 3 1 1 2 2 3 3 3 3 1 3 1 2 1 3 1 2 2 2 2 1 2 1 2 1 2 1 2 1 1 3 1 2 3 1 2 1 3 1 3 1 2 1 3 3 1 2 1 1 3 3 3 3 3 2 3 2 2 2 2 1 3 3 3 3 3 2 1 1 3 3 3 3 2 1 2 2 2 2 2 1 2 1 2 1 2 1 3 3 2 2 3 1 1 2 2 3 2 2\\r\\n6 84 74 147 109 151 78\\r\\n13 157 14 38 43 55 12 96 111 138 30 76 146 108\\r\\n7 7 12 60 139 159 199 2\\r\\n6 7 14 5...', 'output': ['216']}, {'input': '200\\r\\n1 2 1 3 2 1 1 3 3 3 1 3 1 2 1 1 3 2 2 3 2 3 1 2 2 3 2 3 2 3 2 1 3 1 3 3 3 3 2 3 2 2 3 3 2 3 2 2 1 3 2 2 2 1 2 1 2 3 3 1 3 1 2 1 1 2 2 1 1 2 3 3 2 2 1 3 1 2 2 2 1 2 2 3 3 2 1 1 1 1 2 1 3 1 3 2 1 3 3 2 1 2 3 1 3 2 2 2 3 3 2 1 3 3 2 2 3 1 3 1 2 2 3 1 3 2 1 3 3 2 2 2 1 1 3 1 2 3 2 1 2 3 2 2 3 2 1 3 2 2 3 2 3 2 3 2 2 2 2 2 1 3 1 3 3 3 1 3 1 3 1 2 2 3 2 3 1 3 1 3 3 3 1 1 2 2 1 1 2 1 1 3 1 1 2 3 2 2 2 2\\r\\n11 120 34 23 75 191 50 115 196 15 134 160\\r\\n8 105 34 167 25 191 50 43 15\\r\\n1 55\\r\\n1 42\\r\\n8 159 31 122 25 191 ...', 'output': ['219']}, {'input': '200\\r\\n3 3 2 3 2 3 1 3 2 2 1 3 2 2 1 3 1 3 3 3 2 2 2 2 1 1 3 1 1 2 1 3 1 3 2 1 1 2 3 3 2 3 1 1 3 2 2 2 3 2 1 3 3 2 3 2 2 2 3 3 2 3 2 3 1 2 2 3 3 2 3 3 1 3 1 3 1 1 1 3 1 1 2 3 2 1 1 1 2 2 2 2 3 2 1 2 3 1 3 3 1 2 2 1 2 1 1 3 3 3 1 1 2 3 1 2 3 2 2 1 2 2 3 1 3 3 1 1 2 2 1 1 2 2 3 3 2 3 2 2 3 3 2 3 3 1 2 1 3 1 2 1 1 3 2 3 2 2 2 2 2 3 1 1 2 1 1 3 2 2 1 3 3 1 2 3 2 1 2 3 3 1 1 1 2 2 1 2 1 2 2 2 3 1 3 3 3 2 3 3\\r\\n5 188 126 156 182 91\\r\\n3 102 139 93\\r\\n4 139 56 152 126\\r\\n0\\r\\n5 35 127 37 93 174\\r\\n4 55 21 154 91\\r\\n4 10 93 126 ...', 'output': ['213']}, {'input': '200\\r\\n3 2 2 2 2 3 1 1 1 2 2 2 3 2 3 3 3 1 3 2 3 1 2 2 1 1 1 3 1 3 1 1 1 1 2 3 3 1 3 1 2 2 1 2 3 2 1 2 2 1 1 2 1 2 3 1 3 1 1 2 1 3 2 3 1 2 2 3 1 3 2 2 2 1 1 2 1 1 2 2 1 2 2 2 2 2 3 1 3 2 2 1 3 2 2 2 3 1 3 1 3 1 1 1 2 1 1 3 3 1 3 2 3 3 1 3 3 2 1 1 3 1 1 2 3 3 3 2 1 3 3 1 2 3 3 2 2 3 2 3 1 1 3 1 3 2 2 2 2 3 1 1 2 1 1 2 1 2 3 2 3 3 1 2 3 2 2 2 2 3 1 2 3 3 2 3 3 2 3 1 3 3 2 1 1 1 2 2 2 3 3 1 2 2 1 2 3 2 2 1\\r\\n1 125\\r\\n0\\r\\n2 125 34\\r\\n1 116\\r\\n3 76 100 59\\r\\n0\\r\\n5 176 175 126 80 142\\r\\n3 19 172 116\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n4 125 116 200 ...', 'output': ['210']}, {'input': '200\\r\\n2 1 2 3 2 2 1 2 2 2 1 3 2 2 2 2 1 1 3 2 2 2 3 3 3 1 2 3 2 1 2 2 1 3 3 2 1 3 3 1 1 2 2 2 3 1 2 3 1 1 3 3 1 1 1 1 2 2 1 2 2 2 3 2 2 1 2 3 3 2 2 3 3 3 2 1 1 2 1 1 1 2 3 3 2 3 1 2 3 1 3 1 1 1 3 1 1 1 1 3 2 3 3 2 2 1 1 2 2 1 1 1 2 3 1 3 3 2 2 1 1 3 1 1 2 2 2 1 3 3 3 2 2 2 2 3 1 3 2 3 1 3 3 2 2 1 1 2 1 1 3 2 1 1 2 3 2 2 2 3 1 2 3 2 1 1 2 2 2 3 1 3 2 1 1 1 3 2 1 1 1 1 2 2 2 3 1 2 3 3 2 1 1 1 3 3 2 2 2 1\\r\\n4 15 85 52 111\\r\\n0\\r\\n0\\r\\n2 190 140\\r\\n4 74 52 124 64\\r\\n4 29 181 52 167\\r\\n2 52 184\\r\\n1 31\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n2 21 184\\r\\n0...', 'output': ['210']}, {'input': '200\\r\\n3 1 1 1 3 3 3 1 3 3 1 3 1 2 3 3 3 2 1 2 2 3 3 1 1 3 2 1 3 2 1 2 3 2 2 1 1 2 2 1 1 3 2 2 1 2 2 1 2 2 1 3 1 2 3 1 3 3 1 3 1 3 2 3 2 2 1 2 3 2 1 3 2 3 1 1 1 1 1 1 2 2 3 2 3 3 3 1 3 1 2 3 1 1 3 2 3 2 1 1 3 2 2 2 3 2 1 3 2 1 3 2 3 2 2 1 2 1 2 1 3 2 1 2 1 3 2 2 1 3 3 3 2 2 2 1 2 3 1 1 1 2 1 2 1 2 3 1 1 3 3 2 2 1 1 3 3 1 1 1 1 2 3 1 3 3 3 2 1 3 3 1 3 3 1 2 1 2 1 1 2 3 2 2 1 1 1 1 3 3 3 3 3 3 3 1 3 3 3 2\\r\\n5 200 120 25 2 163\\r\\n5 200 120 21 25 90\\r\\n6 200 120 25 189 2 76\\r\\n3 200 120 25\\r\\n5 200 120 115 25 28\\r\\n4 200 1...', 'output': ['212']}, {'input': '200\\r\\n1 1 3 3 2 2 2 2 2 3 2 3 1 1 1 2 2 2 3 3 1 1 2 1 3 1 3 2 2 2 3 1 3 2 3 2 2 3 1 1 3 3 2 3 3 3 2 2 1 2 3 3 2 2 1 3 2 1 2 3 1 3 2 1 1 1 2 1 3 1 1 3 2 3 1 2 3 3 2 1 2 1 2 3 3 3 1 1 3 3 2 3 3 1 2 2 3 1 3 3 2 1 3 3 2 2 3 2 2 3 1 2 2 3 2 3 2 3 1 3 1 1 3 2 2 2 3 2 2 3 2 3 1 2 3 1 1 2 3 2 1 2 2 3 1 1 3 1 1 1 1 2 2 1 1 3 1 2 3 3 1 2 3 1 2 2 3 2 2 1 1 2 2 1 2 1 3 1 1 1 2 3 2 2 2 2 3 2 2 2 3 1 3 3 1 1 1 3 2 2\\r\\n3 159 22 96\\r\\n2 100 148\\r\\n3 180 22 123\\r\\n3 44 80 22\\r\\n4 102 111 180 22\\r\\n1 39\\r\\n9 112 180 186 185 42 159 22 36 ...', 'output': ['208']}, {'input': '200\\r\\n2 2 2 3 2 1 1 2 3 1 3 2 1 1 1 2 2 2 3 1 3 3 2 1 1 2 1 3 1 3 3 1 1 3 2 1 3 2 2 3 1 2 3 2 2 2 3 3 1 1 3 3 1 2 3 2 3 2 1 1 2 3 3 2 3 3 2 1 3 2 2 3 1 2 2 2 2 2 3 2 3 3 2 3 3 3 3 1 2 2 2 1 3 2 1 1 2 1 3 1 1 3 3 1 1 2 1 2 2 3 1 1 2 1 1 1 2 3 2 2 1 1 1 1 3 2 1 1 2 3 2 2 3 2 2 2 1 3 3 3 3 2 1 1 1 3 2 3 1 3 2 2 2 1 3 2 1 2 1 2 1 2 1 1 1 1 3 1 2 2 1 2 3 2 3 3 2 3 1 3 3 3 2 2 2 1 2 1 1 1 2 2 3 1 2 2 3 3 2 2\\r\\n2 105 58\\r\\n5 3 105 174 47 138\\r\\n0\\r\\n1 3\\r\\n0\\r\\n1 105\\r\\n3 3 105 8\\r\\n2 162 105\\r\\n3 105 174 44\\r\\n4 3 98 105 174\\r\\n1 56\\r...', 'output': ['213']}, {'input': '200\\r\\n3 3 1 3 2 3 2 3 1 3 3 1 1 2 3 1 2 2 2 3 2 2 2 2 1 3 3 2 2 2 3 3 3 3 1 1 3 1 3 1 2 1 2 3 2 2 3 3 3 3 1 3 1 3 1 3 3 3 2 2 1 1 2 1 2 2 2 2 1 2 1 1 2 3 2 3 2 2 2 3 3 3 3 3 2 2 1 1 1 2 1 1 2 3 2 3 1 3 1 1 1 3 3 2 3 2 1 3 1 3 1 2 2 2 2 1 1 2 2 3 2 1 2 2 3 3 1 1 3 3 3 3 1 1 1 3 1 3 2 1 1 3 2 1 1 2 3 3 3 3 2 2 1 2 3 2 2 2 1 3 2 1 2 1 3 2 3 3 1 3 3 3 2 1 3 3 2 2 1 2 2 1 1 3 2 1 3 3 2 1 1 2 3 1 2 2 2 2 3 1\\r\\n0\\r\\n3 7 146 123\\r\\n1 71\\r\\n4 62 140 24 93\\r\\n0\\r\\n7 41 186 144 104 10 32 189\\r\\n1 71\\r\\n1 71\\r\\n0\\r\\n6 71 62 24 72 123 104...', 'output': ['215']}, {'input': '200\\r\\n1 2 3 1 1 1 2 2 2 2 1 2 1 2 3 2 2 3 2 1 2 1 1 2 2 1 2 2 3 1 2 3 3 3 1 1 1 2 1 1 1 1 1 1 1 2 3 2 1 1 3 2 1 2 1 1 3 3 1 3 2 3 2 1 3 3 3 3 1 1 3 3 3 1 2 1 1 1 1 1 1 1 1 2 1 3 3 1 2 1 2 1 2 2 1 2 1 2 3 3 2 2 2 1 1 2 2 3 3 1 1 1 2 2 3 1 3 2 1 3 1 2 1 1 2 1 2 3 1 1 1 2 2 2 3 3 2 3 3 3 3 1 1 2 3 3 3 1 1 1 1 1 3 2 1 3 2 2 2 3 3 2 3 2 2 1 2 2 3 1 2 2 1 1 1 3 3 1 3 1 1 2 1 3 1 2 3 1 1 2 2 2 3 1 2 2 2 1 2 3\\r\\n2 49 38\\r\\n3 200 49 38\\r\\n5 159 38 94 182 192\\r\\n4 49 38 94 148\\r\\n2 200 159\\r\\n7 9 38 111 89 94 92 125\\r\\n8 38 68 17...', 'output': ['213']}, {'input': '200\\r\\n2 3 1 2 1 3 2 1 1 2 1 2 3 3 1 2 1 3 3 2 1 1 3 1 2 3 3 3 1 1 3 1 1 1 2 3 3 3 1 2 3 2 2 1 2 3 3 1 1 2 1 3 3 1 2 3 3 2 2 1 2 1 2 1 3 2 2 3 2 2 1 1 3 3 2 2 1 1 3 1 1 1 3 1 3 1 1 3 1 3 2 3 1 3 1 1 3 2 3 2 2 1 3 3 2 2 2 2 3 3 1 1 1 1 2 1 1 1 3 1 3 2 1 2 1 3 3 2 2 2 1 2 2 2 1 3 2 1 3 2 1 2 2 2 2 1 1 3 2 1 1 2 1 1 1 1 1 3 1 2 2 2 3 2 3 2 3 3 2 3 2 3 2 1 3 3 3 3 3 2 1 3 1 3 1 3 1 1 3 2 1 3 1 3 1 2 1 3 3 1\\r\\n5 38 67 92 180 132\\r\\n4 119 69 116 67\\r\\n0\\r\\n1 135\\r\\n9 193 67 122 7 15 45 2 180 129\\r\\n2 143 195\\r\\n3 176 38 175\\r\\n0...', 'output': ['212']}, {'input': '200\\r\\n2 3 3 1 1 1 3 3 3 3 1 1 1 1 2 2 2 2 2 1 3 1 2 3 1 1 1 3 2 2 1 2 2 3 3 2 3 2 2 2 3 2 3 3 2 2 1 2 3 3 1 1 1 2 2 3 1 2 1 3 3 2 1 3 3 3 2 2 1 2 3 2 2 1 2 1 2 2 1 3 3 2 2 3 3 2 3 1 3 3 1 2 1 1 1 3 1 2 1 2 3 1 3 2 2 1 2 3 1 2 3 3 1 2 1 1 2 2 2 1 3 2 3 3 2 1 2 3 3 3 1 2 3 1 1 1 2 1 3 3 2 3 1 1 2 2 1 3 3 3 3 2 3 2 2 1 1 2 3 1 3 1 3 3 3 3 1 3 2 3 2 2 3 2 3 1 2 2 2 3 2 2 1 1 1 3 1 3 1 2 1 3 1 1 3 2 2 2 3 1\\r\\n2 14 181\\r\\n3 83 181 61\\r\\n3 59 181 60\\r\\n4 181 164 72 138\\r\\n2 109 181\\r\\n3 176 181 79\\r\\n5 118 109 181 135 142\\r\\n2 1...', 'output': ['215']}, {'input': '200\\r\\n3 3 2 2 3 2 1 1 1 1 3 3 1 2 2 2 1 1 3 1 3 3 1 2 3 1 3 2 3 2 2 3 2 2 2 3 1 2 2 1 1 3 3 1 3 3 2 1 3 2 1 1 3 3 2 1 3 1 1 2 3 2 1 2 3 1 2 2 3 1 2 1 1 3 1 3 2 3 1 3 1 3 2 2 2 1 2 1 2 2 2 2 3 1 2 1 1 2 3 3 1 2 1 2 1 2 2 3 2 2 3 2 1 3 2 1 1 1 3 3 3 2 2 3 2 2 3 3 2 1 1 2 1 1 3 3 2 2 3 1 1 2 2 2 3 1 3 2 3 2 2 1 2 1 3 2 2 3 1 2 1 2 2 1 3 3 2 2 3 2 3 2 3 2 1 1 1 3 2 2 1 3 2 2 1 1 2 3 1 1 1 1 2 2 1 2 3 3 1 3\\r\\n110 6 89 9 11 54 82 39 183 22 93 96 109 24 42 45 104 75 190 147 90 68 188 133 62 117 139 154 91 177 44 92...', 'output': ['346']}, {'input': '200\\r\\n1 1 1 3 2 3 1 2 2 2 1 1 1 3 2 2 3 1 1 2 1 2 1 2 2 3 2 2 2 2 1 3 1 1 1 3 2 2 3 2 3 3 1 2 1 1 2 3 1 1 2 3 2 3 1 1 2 1 2 1 2 3 2 3 1 1 2 1 1 3 2 2 1 1 1 2 1 1 1 1 1 3 1 1 3 3 3 1 3 2 1 2 1 1 1 3 1 1 3 2 3 1 1 3 3 1 1 1 1 1 3 2 2 3 1 1 2 3 3 1 1 3 3 2 3 2 2 1 2 3 3 1 1 1 1 3 3 2 3 2 3 3 3 2 3 1 2 2 3 1 3 2 1 3 1 2 3 3 1 1 2 2 2 3 2 3 2 1 3 3 2 1 3 1 3 2 2 2 2 1 2 2 1 1 2 3 1 2 3 2 1 2 1 1 2 2 1 3 2 3\\r\\n23 109 172 111 25 46 157 144 72 156 94 110 22 60 98 118 171 189 86 42 117 186 8 161\\r\\n43 111 25 197 46 157...', 'output': ['338']}, {'input': '200\\r\\n3 2 3 1 2 1 2 3 3 1 3 2 3 1 1 3 3 2 2 2 1 2 2 3 1 1 1 2 3 3 2 3 3 2 3 2 2 1 3 3 2 1 3 3 2 2 1 1 1 2 3 1 3 3 2 3 1 3 3 3 3 3 3 2 2 1 2 3 3 1 2 1 1 1 3 1 1 3 1 1 2 2 2 2 3 3 3 1 1 2 3 2 1 3 2 2 1 2 3 1 2 3 3 3 3 3 2 1 1 3 3 2 3 1 3 3 3 1 2 1 2 2 1 1 3 2 1 1 1 3 3 3 3 2 2 1 3 2 1 2 3 2 1 1 1 1 3 2 3 1 2 1 1 3 2 2 3 1 3 1 2 3 1 1 3 2 2 1 3 2 2 3 1 1 2 2 2 1 1 2 3 1 1 1 2 2 2 2 2 2 1 3 3 2 1 3 2 3 3 1\\r\\n25 200 2 127 5 69 99 52 174 194 19 169 106 163 40 177 84 178 108 112 21 17 42 162 33 122\\r\\n1 200\\r\\n46 200 2...', 'output': ['335']}, {'input': '200\\r\\n2 2 3 3 3 1 3 3 1 3 2 3 2 3 2 3 1 1 1 3 3 3 2 2 3 3 2 1 3 1 1 3 3 3 3 3 1 2 3 2 3 2 1 1 1 3 3 2 2 3 2 1 2 3 1 2 2 2 3 3 3 2 3 2 3 3 3 1 2 2 1 2 3 3 3 1 1 3 3 1 2 1 1 3 3 1 2 3 1 3 3 2 2 3 2 3 1 1 2 1 1 3 1 3 2 2 2 3 1 2 1 1 2 3 2 2 1 1 3 1 1 3 1 2 1 1 3 1 2 3 1 2 3 2 3 1 1 3 1 1 2 1 1 2 3 3 1 3 1 1 3 1 3 2 3 1 2 2 1 2 1 2 3 3 3 1 2 3 2 1 3 3 3 1 1 3 2 3 2 3 1 2 2 3 1 3 1 2 2 1 2 3 1 3 2 1 3 3 3 2\\r\\n84 138 10 57 184 16 9 11 15 2 176 33 43 6 91 158 194 27 18 31 141 167 193 150 102 41 53 197 191 94 66 49 ...', 'output': ['339']}, {'input': '200\\r\\n2 2 3 1 3 2 2 3 3 1 2 3 1 1 2 1 3 3 2 3 3 3 3 3 3 2 2 1 3 1 1 1 2 3 3 1 1 3 1 2 3 3 3 1 2 1 3 3 2 1 3 2 1 3 2 2 3 3 1 3 3 1 2 2 2 2 3 3 1 1 2 3 3 1 1 3 1 1 2 3 2 2 3 3 1 2 1 3 3 1 1 3 2 2 2 1 2 1 1 3 2 1 2 3 3 3 3 1 1 3 1 1 1 2 3 1 2 2 3 1 1 2 3 3 1 3 3 3 2 1 1 2 2 3 3 1 3 3 1 1 1 3 2 1 2 2 2 3 3 1 1 1 3 2 3 3 2 3 3 2 3 2 1 1 3 2 1 3 3 1 2 2 2 3 1 1 2 3 2 2 3 2 1 2 2 1 1 2 2 1 3 2 3 2 1 2 1 2 2 3\\r\\n0\\r\\n43 1 121 139 184 5 124 152 43 197 25 149 186 23 94 80 188 91 187 68 49 176 153 169 36 110 26 38 3 195 ...', 'output': ['387']}, {'input': '200\\r\\n2 3 1 2 3 2 3 2 2 3 2 2 1 2 3 1 1 2 3 2 3 1 1 1 2 1 3 1 1 1 3 3 3 2 3 1 2 2 2 3 2 3 3 3 2 1 3 1 2 1 1 1 3 3 2 3 2 2 3 2 3 3 3 2 2 3 3 2 2 3 1 3 3 2 3 1 2 1 2 1 3 3 2 1 1 2 3 3 2 1 2 1 2 1 1 3 2 2 1 3 3 3 2 1 1 3 2 3 1 1 3 3 2 1 3 1 2 2 2 1 3 3 3 1 1 2 2 1 1 2 3 3 1 3 3 3 3 2 3 1 3 2 1 3 1 1 3 1 2 2 1 3 3 2 1 3 1 2 2 1 2 2 1 1 1 1 1 1 2 2 2 1 3 2 1 3 1 3 1 2 2 2 1 2 1 2 3 3 1 3 2 3 1 2 1 2 3 1 3 1\\r\\n48 98 53 140 115 193 33 91 105 9 19 143 72 194 84 88 90 17 30 52 71 36 118 23 21 180 51 27 81 178 95 43 9...', 'output': ['411']}, {'input': '200\\r\\n1 1 1 3 2 3 1 2 2 3 2 3 2 3 2 3 2 3 2 1 3 2 2 2 2 1 1 3 1 1 3 2 3 2 1 1 3 1 3 3 1 2 1 3 3 3 2 1 2 2 3 1 1 2 3 3 1 1 1 3 2 2 1 3 2 3 3 1 2 1 1 3 1 3 1 3 2 2 1 1 2 1 2 3 2 1 3 3 3 1 2 1 3 3 1 3 2 3 3 1 3 1 1 3 2 3 2 3 1 3 3 3 2 2 3 2 1 2 2 3 2 1 3 3 2 2 2 2 3 3 1 1 2 2 3 2 2 2 2 1 1 2 3 1 2 2 1 1 2 2 2 2 1 2 3 2 1 1 1 2 3 2 3 1 3 3 2 1 1 2 2 3 1 3 3 2 2 1 2 2 3 1 2 1 2 3 2 2 3 1 3 1 2 1 3 3 2 2 1 2\\r\\n85 58 117 3 98 12 35 75 167 155 18 169 88 22 145 132 49 29 71 184 161 9 142 153 189 67 118 112 26 92 139 ...', 'output': ['381']}, {'input': '200\\r\\n2 1 2 2 2 2 1 3 2 3 1 3 3 1 3 3 2 2 2 2 1 3 1 1 2 1 3 2 3 2 2 1 1 1 2 1 2 2 2 1 3 1 1 1 1 1 2 2 1 1 3 1 1 2 1 1 3 2 2 2 3 2 1 1 2 3 1 1 2 1 3 1 3 1 1 2 1 2 3 3 3 3 2 2 2 2 1 3 2 1 3 1 2 3 3 1 3 2 1 1 2 3 2 1 3 2 3 3 3 3 1 2 1 2 3 2 2 1 1 3 1 2 3 2 3 2 1 1 1 3 2 3 1 2 1 1 2 1 3 1 2 1 1 2 3 1 3 3 1 3 2 3 1 1 1 3 1 3 1 1 2 1 2 3 2 3 3 3 2 3 1 3 1 2 3 1 3 1 1 1 3 1 2 3 1 1 2 3 3 1 1 2 2 1 3 2 3 1 2 1\\r\\n131 141 103 74 113 45 96 142 55 196 126 6 77 139 102 15 194 34 105 158 145 187 134 27 162 100 57 8 183 29...', 'output': ['391']}, {'input': '200\\r\\n3 1 3 3 1 3 3 2 1 2 2 3 3 2 1 1 1 2 2 2 2 2 3 1 1 3 1 1 1 3 3 3 2 2 3 3 3 1 1 1 1 3 1 3 3 2 1 3 2 3 3 3 2 2 3 1 2 3 1 2 3 2 2 2 3 2 1 3 2 1 2 3 1 2 1 2 2 3 3 3 2 1 1 3 2 1 1 2 2 1 1 3 2 3 2 2 3 1 3 2 2 1 1 3 2 1 1 2 2 1 2 2 2 2 1 3 2 2 1 1 2 1 1 1 2 1 1 2 3 1 3 1 3 3 3 2 3 1 3 3 2 2 2 3 1 2 1 2 3 2 1 2 2 2 1 3 2 2 1 2 2 3 2 2 3 3 1 1 3 1 2 2 2 3 1 2 3 3 2 3 3 2 3 2 3 2 3 2 2 3 1 2 1 1 2 3 3 1 1 2\\r\\n28 123 137 3 177 73 48 126 94 112 66 186 197 78 26 181 180 187 117 142 29 189 31 191 24 125 45 200 140\\r\\n1...', 'output': ['390']}, {'input': '200\\r\\n1 1 1 2 3 1 3 2 1 1 1 1 1 3 2 3 1 2 2 1 2 2 2 1 1 2 2 2 2 3 3 3 3 3 2 3 1 3 1 1 3 3 2 1 2 2 3 2 1 2 1 3 3 3 2 2 1 2 1 1 1 2 2 1 3 3 3 1 1 2 1 2 1 3 2 1 2 2 2 3 3 1 2 2 2 1 2 3 2 3 1 2 1 3 2 3 1 2 1 3 3 2 1 3 1 2 2 2 1 2 1 2 3 3 3 3 1 3 1 2 1 1 1 2 2 1 2 3 3 1 1 2 3 3 3 2 3 1 1 3 1 1 3 3 3 1 1 3 1 2 3 3 2 3 3 3 2 1 1 1 1 2 3 2 3 3 2 1 3 1 2 3 2 1 1 3 3 2 1 3 3 1 1 1 2 3 1 3 1 3 3 2 3 3 1 1 1 3 3 1\\r\\n141 15 147 168 123 32 99 115 22 9 10 125 79 96 145 126 59 17 20 188 124 21 172 23 14 177 26 112 150 54 47...', 'output': ['383']}, {'input': '200\\r\\n3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 2 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 2 3 1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n...', 'output': ['202']}, {'input': '200\\r\\n3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 3\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n...', 'output': ['201']}, {'input': '200\\r\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2\\r\\n0\\r\\n1 1\\r\\n1 2\\r\\n1 2\\r\\n1 1\\r\\n1 5\\r\\n1 5\\r\\n1 6\\r\\n1 7\\r\\n1 8\\r\\n1 5\\r\\n1 8\\r\\n1 6\\r\\n1 12\\r\\n1 14\\r\\n1 2\\r\\n1 12\\r\\n1 4\\r\\n1 9\\r\\n1 2\\r\\n1 17...', 'output': ['214']}, {'input': '4\\r\\n1 1 2 3\\r\\n1 2\\r\\n1 3\\r\\n0\\r\\n1 1\\r\\n', 'output': ['8']}, {'input': '15\\r\\n3 2 2 2 1 1 2 1 1 2 2 3 3 3 2\\r\\n1 13\\r\\n4 13 1 8 14\\r\\n10 5 13 1 8 14 4 2 11 15 10\\r\\n6 5 13 1 8 9 14\\r\\n0\\r\\n11 5 13 1 8 14 4 2 11 10 3 12\\r\\n11 13 1 8 14 4 2 11 15 10 3 6\\r\\n2 13 1\\r\\n4 5 13 1 8\\r\\n8 5 13 1 8 14 2 11 15\\r\\n6 5 13 1 8 14 2\\r\\n10 5 13 1 8 14 2 11 15 10 3\\r\\n0...', 'output': ['23']}, {'input': '17\\r\\n2 3 1 3 3 3 1 1 1 2 2 2 3 2 3 3 2\\r\\n5 4 14 2 11 7\\r\\n3 13 4 14\\r\\n7 6 4 14 2 1 10 12\\r\\n2 6 13\\r\\n9 4 2 9 8 7 17 1 10 12\\r\\n0\\r\\n5 4 14 2 9 11\\r\\n4 13 4 2 11\\r\\n4 13 4 14 2\\r\\n7 13 4 2 11 8 7 1\\r\\n4 13 4 14 2\\r\\n8 6 4 2 8 7 17 1 10\\r\\n0\\r\\n1 4\\r\\n7 13 4 14 2 9 8 7\\r\\n6 4 2 17 1 10 ...', 'output': ['27']}, {'input': '18\\r\\n1 2 3 3 2 2 1 1 3 1 2 3 2 3 1 2 2 3\\r\\n5 9 3 14 12 2\\r\\n7 9 4 3 14 16 7 12\\r\\n1 9\\r\\n1 9\\r\\n6 9 14 12 1 6 15\\r\\n6 9 14 12 2 1 11\\r\\n2 9 14\\r\\n7 9 14 7 12 2 1 6\\r\\n0\\r\\n6 9 18 14 7 1 6\\r\\n4 9 14 7 1\\r\\n2 9 14\\r\\n6 9 3 14 7 1 6\\r\\n2 9 3\\r\\n9 9 3 14 16 12 2 1 6 17\\r\\n4 9 4 18 14\\r\\n8 9 1...', 'output': ['26']}, {'input': '19\\r\\n2 3 3 2 3 1 3 1 2 2 2 1 1 1 2 2 1 3 3\\r\\n0\\r\\n3 1 10 6\\r\\n8 1 6 2 17 18 12 15 7\\r\\n5 6 2 9 17 18\\r\\n6 6 2 17 18 12 16\\r\\n1 11\\r\\n9 1 11 6 2 17 18 4 12 15\\r\\n3 1 6 2\\r\\n4 1 6 2 8\\r\\n0\\r\\n1 1\\r\\n5 1 6 2 17 18\\r\\n12 1 10 6 2 8 17 18 4 12 15 7 3\\r\\n10 11 6 2 17 18 4 12 16 15 7\\r\\n8 1 ...', 'output': ['30']}, {'input': '20\\r\\n2 2 3 2 3 1 1 3 1 1 1 1 1 3 2 1 3 1 1 1\\r\\n1 7\\r\\n13 7 1 11 4 6 16 20 12 5 18 19 15 10\\r\\n8 7 1 11 4 6 17 8 16\\r\\n3 7 1 11\\r\\n9 7 1 11 4 6 8 20 12 3\\r\\n4 7 1 11 4\\r\\n0\\r\\n6 7 1 11 4 6 17\\r\\n4 7 1 11 4\\r\\n7 7 1 11 4 6 17 5\\r\\n2 7 1\\r\\n9 7 1 11 4 6 17 8 14 20\\r\\n11 7 1 11 4 6 20...', 'output': ['35']}, {'input': '200\\r\\n3 3 3 1 3 1 3 1 1 1 3 2 1 1 3 1 3 3 2 2 2 2 3 3 1 3 2 3 1 2 3 3 2 2 1 2 3 3 1 3 1 3 3 3 1 2 1 3 3 1 2 1 2 3 2 2 3 2 2 3 2 3 1 1 1 2 2 2 1 3 1 2 1 3 2 3 2 1 2 2 1 1 2 2 1 3 3 2 2 1 3 2 3 2 3 1 2 2 2 3 3 2 2 3 2 3 3 3 3 3 2 2 3 3 2 3 2 1 2 3 2 3 2 1 2 ...', 'output': ['224']}, {'input': '200\\r\\n1 2 3 2 1 1 3 3 3 3 2 1 1 2 3 3 1 3 2 3 1 3 3 1 2 3 3 2 2 1 3 3 3 3 1 1 2 2 2 2 2 1 1 2 3 2 3 3 3 2 2 1 2 3 2 1 1 1 1 1 3 2 2 2 2 1 3 1 2 2 3 1 1 2 1 1 1 1 2 2 2 1 3 2 1 1 2 2 2 1 1 3 1 3 3 1 3 3 2 3 2 2 3 1 3 3 1 3 3 3 3 2 1 3 1 3 2 2 1 3 2 2 3 1 2 ...', 'output': ['220']}, {'input': '200\\r\\n1 3 2 3 2 3 3 3 2 2 3 2 3 1 1 3 3 2 2 2 1 1 3 3 3 1 1 1 1 2 2 3 1 3 2 3 3 2 1 2 3 2 2 1 2 1 3 3 3 1 3 3 3 2 2 1 3 3 1 1 2 1 2 2 3 3 3 2 1 2 2 2 2 3 2 1 3 1 3 2 2 2 1 3 2 2 3 3 1 3 3 1 3 1 1 2 3 1 1 2 3 1 3 2 1 1 2 2 2 1 1 3 3 1 1 3 1 1 2 1 3 2 1 2 2 ...', 'output': ['219']}, {'input': '200\\r\\n1 3 3 1 1 2 1 3 2 2 3 2 2 1 3 1 1 3 3 2 3 3 2 3 2 3 1 2 3 3 2 2 3 3 1 3 3 1 1 1 2 1 1 1 2 2 2 3 2 3 2 1 1 3 2 3 2 1 1 3 3 1 3 1 3 3 3 3 1 2 3 2 1 1 1 2 1 3 2 3 2 1 3 3 2 2 3 3 1 2 1 3 1 2 2 1 1 3 3 3 3 2 1 1 2 1 3 1 3 3 1 2 1 2 1 2 2 1 3 1 2 3 2 3 2 ...', 'output': ['222']}, {'input': '200\\r\\n3 1 2 3 2 1 3 2 2 1 3 1 1 1 3 1 3 3 1 1 3 1 2 2 2 1 3 3 2 1 3 2 3 3 3 2 2 1 3 1 2 1 3 2 2 2 2 1 1 2 2 3 1 2 1 3 2 3 2 1 2 1 2 3 3 2 2 2 2 1 2 2 1 2 3 1 1 1 3 3 1 3 2 3 1 2 2 1 2 2 3 3 1 1 1 2 1 1 3 1 3 2 2 1 3 1 2 3 1 3 2 3 3 3 1 3 1 2 3 3 2 2 2 2 2 ...', 'output': ['223']}, {'input': '200\\r\\n3 2 2 1 3 2 2 3 1 1 2 3 3 1 2 2 3 3 1 1 3 3 3 1 1 3 2 3 2 3 3 2 2 1 3 2 1 2 3 1 1 3 3 2 3 1 1 2 3 2 1 3 2 2 3 3 1 1 1 3 2 1 3 1 2 1 2 1 2 3 1 3 2 2 1 1 1 1 3 2 1 1 1 1 3 1 3 1 3 3 1 2 2 2 1 2 3 1 2 3 1 1 2 3 3 3 1 3 2 2 2 2 2 2 3 1 1 3 1 3 1 1 3 3 1 ...', 'output': ['222']}, {'input': '200\\r\\n1 2 3 3 1 2 1 1 2 1 1 1 1 2 3 3 3 1 2 2 2 2 3 2 1 2 2 3 3 1 1 3 1 1 1 3 1 3 3 2 2 3 3 3 2 3 1 1 1 1 2 3 2 3 3 3 1 1 3 3 1 2 3 1 3 1 3 2 3 2 1 3 1 1 1 2 1 3 2 2 2 3 2 2 2 2 1 3 3 3 3 1 3 1 2 1 2 1 2 1 2 3 2 3 1 3 1 2 1 1 2 3 3 1 2 1 1 1 1 2 3 1 1 1 2 ...', 'output': ['219']}, {'input': '200\\r\\n3 1 3 3 2 1 2 1 1 3 3 3 2 3 2 3 3 2 1 1 2 3 2 2 1 1 2 2 2 3 3 2 2 3 2 1 2 3 1 1 3 1 1 2 2 2 3 3 2 2 3 2 3 1 2 2 2 1 3 1 3 3 3 2 3 2 2 1 2 1 1 3 2 2 3 3 2 3 2 1 2 3 3 3 3 1 2 1 1 3 1 3 1 2 2 1 3 1 1 2 2 3 1 3 1 2 3 3 2 1 2 1 2 1 2 3 2 1 1 2 1 3 1 3 1 ...', 'output': ['221']}, {'input': '200\\r\\n2 1 1 3 2 1 3 2 1 2 2 2 3 1 3 1 3 3 2 2 2 3 1 2 1 2 1 2 1 3 1 3 2 2 2 2 2 2 3 2 3 2 3 2 2 3 2 3 2 3 2 3 3 1 1 3 2 3 3 1 3 2 1 1 1 3 1 2 2 2 2 1 2 3 2 1 1 3 1 1 3 2 1 3 2 2 1 2 1 2 1 3 2 2 2 1 2 1 2 3 3 3 1 1 2 2 3 3 3 3 1 3 1 2 1 3 1 2 2 2 2 1 2 1 2 ...', 'output': ['216']}, {'input': '200\\r\\n1 2 1 3 2 1 1 3 3 3 1 3 1 2 1 1 3 2 2 3 2 3 1 2 2 3 2 3 2 3 2 1 3 1 3 3 3 3 2 3 2 2 3 3 2 3 2 2 1 3 2 2 2 1 2 1 2 3 3 1 3 1 2 1 1 2 2 1 1 2 3 3 2 2 1 3 1 2 2 2 1 2 2 3 3 2 1 1 1 1 2 1 3 1 3 2 1 3 3 2 1 2 3 1 3 2 2 2 3 3 2 1 3 3 2 2 3 1 3 1 2 2 3 1 3 ...', 'output': ['219']}, {'input': '200\\r\\n3 3 2 3 2 3 1 3 2 2 1 3 2 2 1 3 1 3 3 3 2 2 2 2 1 1 3 1 1 2 1 3 1 3 2 1 1 2 3 3 2 3 1 1 3 2 2 2 3 2 1 3 3 2 3 2 2 2 3 3 2 3 2 3 1 2 2 3 3 2 3 3 1 3 1 3 1 1 1 3 1 1 2 3 2 1 1 1 2 2 2 2 3 2 1 2 3 1 3 3 1 2 2 1 2 1 1 3 3 3 1 1 2 3 1 2 3 2 2 1 2 2 3 1 3 ...', 'output': ['213']}, {'input': '200\\r\\n3 2 2 2 2 3 1 1 1 2 2 2 3 2 3 3 3 1 3 2 3 1 2 2 1 1 1 3 1 3 1 1 1 1 2 3 3 1 3 1 2 2 1 2 3 2 1 2 2 1 1 2 1 2 3 1 3 1 1 2 1 3 2 3 1 2 2 3 1 3 2 2 2 1 1 2 1 1 2 2 1 2 2 2 2 2 3 1 3 2 2 1 3 2 2 2 3 1 3 1 3 1 1 1 2 1 1 3 3 1 3 2 3 3 1 3 3 2 1 1 3 1 1 2 3 ...', 'output': ['210']}, {'input': '200\\r\\n2 1 2 3 2 2 1 2 2 2 1 3 2 2 2 2 1 1 3 2 2 2 3 3 3 1 2 3 2 1 2 2 1 3 3 2 1 3 3 1 1 2 2 2 3 1 2 3 1 1 3 3 1 1 1 1 2 2 1 2 2 2 3 2 2 1 2 3 3 2 2 3 3 3 2 1 1 2 1 1 1 2 3 3 2 3 1 2 3 1 3 1 1 1 3 1 1 1 1 3 2 3 3 2 2 1 1 2 2 1 1 1 2 3 1 3 3 2 2 1 1 3 1 1 2 ...', 'output': ['210']}, {'input': '200\\r\\n3 1 1 1 3 3 3 1 3 3 1 3 1 2 3 3 3 2 1 2 2 3 3 1 1 3 2 1 3 2 1 2 3 2 2 1 1 2 2 1 1 3 2 2 1 2 2 1 2 2 1 3 1 2 3 1 3 3 1 3 1 3 2 3 2 2 1 2 3 2 1 3 2 3 1 1 1 1 1 1 2 2 3 2 3 3 3 1 3 1 2 3 1 1 3 2 3 2 1 1 3 2 2 2 3 2 1 3 2 1 3 2 3 2 2 1 2 1 2 1 3 2 1 2 1 ...', 'output': ['212']}, {'input': '200\\r\\n1 1 3 3 2 2 2 2 2 3 2 3 1 1 1 2 2 2 3 3 1 1 2 1 3 1 3 2 2 2 3 1 3 2 3 2 2 3 1 1 3 3 2 3 3 3 2 2 1 2 3 3 2 2 1 3 2 1 2 3 1 3 2 1 1 1 2 1 3 1 1 3 2 3 1 2 3 3 2 1 2 1 2 3 3 3 1 1 3 3 2 3 3 1 2 2 3 1 3 3 2 1 3 3 2 2 3 2 2 3 1 2 2 3 2 3 2 3 1 3 1 1 3 2 2 ...', 'output': ['208']}, {'input': '200\\r\\n2 2 2 3 2 1 1 2 3 1 3 2 1 1 1 2 2 2 3 1 3 3 2 1 1 2 1 3 1 3 3 1 1 3 2 1 3 2 2 3 1 2 3 2 2 2 3 3 1 1 3 3 1 2 3 2 3 2 1 1 2 3 3 2 3 3 2 1 3 2 2 3 1 2 2 2 2 2 3 2 3 3 2 3 3 3 3 1 2 2 2 1 3 2 1 1 2 1 3 1 1 3 3 1 1 2 1 2 2 3 1 1 2 1 1 1 2 3 2 2 1 1 1 1 3 ...', 'output': ['213']}, {'input': '200\\r\\n3 3 1 3 2 3 2 3 1 3 3 1 1 2 3 1 2 2 2 3 2 2 2 2 1 3 3 2 2 2 3 3 3 3 1 1 3 1 3 1 2 1 2 3 2 2 3 3 3 3 1 3 1 3 1 3 3 3 2 2 1 1 2 1 2 2 2 2 1 2 1 1 2 3 2 3 2 2 2 3 3 3 3 3 2 2 1 1 1 2 1 1 2 3 2 3 1 3 1 1 1 3 3 2 3 2 1 3 1 3 1 2 2 2 2 1 1 2 2 3 2 1 2 2 3 ...', 'output': ['215']}, {'input': '200\\r\\n1 2 3 1 1 1 2 2 2 2 1 2 1 2 3 2 2 3 2 1 2 1 1 2 2 1 2 2 3 1 2 3 3 3 1 1 1 2 1 1 1 1 1 1 1 2 3 2 1 1 3 2 1 2 1 1 3 3 1 3 2 3 2 1 3 3 3 3 1 1 3 3 3 1 2 1 1 1 1 1 1 1 1 2 1 3 3 1 2 1 2 1 2 2 1 2 1 2 3 3 2 2 2 1 1 2 2 3 3 1 1 1 2 2 3 1 3 2 1 3 1 2 1 1 2 ...', 'output': ['213']}, {'input': '200\\r\\n2 3 1 2 1 3 2 1 1 2 1 2 3 3 1 2 1 3 3 2 1 1 3 1 2 3 3 3 1 1 3 1 1 1 2 3 3 3 1 2 3 2 2 1 2 3 3 1 1 2 1 3 3 1 2 3 3 2 2 1 2 1 2 1 3 2 2 3 2 2 1 1 3 3 2 2 1 1 3 1 1 1 3 1 3 1 1 3 1 3 2 3 1 3 1 1 3 2 3 2 2 1 3 3 2 2 2 2 3 3 1 1 1 1 2 1 1 1 3 1 3 2 1 2 1 ...', 'output': ['212']}, {'input': '200\\r\\n2 3 3 1 1 1 3 3 3 3 1 1 1 1 2 2 2 2 2 1 3 1 2 3 1 1 1 3 2 2 1 2 2 3 3 2 3 2 2 2 3 2 3 3 2 2 1 2 3 3 1 1 1 2 2 3 1 2 1 3 3 2 1 3 3 3 2 2 1 2 3 2 2 1 2 1 2 2 1 3 3 2 2 3 3 2 3 1 3 3 1 2 1 1 1 3 1 2 1 2 3 1 3 2 2 1 2 3 1 2 3 3 1 2 1 1 2 2 2 1 3 2 3 3 2 ...', 'output': ['215']}, {'input': '200\\r\\n3 3 2 2 3 2 1 1 1 1 3 3 1 2 2 2 1 1 3 1 3 3 1 2 3 1 3 2 3 2 2 3 2 2 2 3 1 2 2 1 1 3 3 1 3 3 2 1 3 2 1 1 3 3 2 1 3 1 1 2 3 2 1 2 3 1 2 2 3 1 2 1 1 3 1 3 2 3 1 3 1 3 2 2 2 1 2 1 2 2 2 2 3 1 2 1 1 2 3 3 1 2 1 2 1 2 2 3 2 2 3 2 1 3 2 1 1 1 3 3 3 2 2 3 2 ...', 'output': ['346']}, {'input': '200\\r\\n1 1 1 3 2 3 1 2 2 2 1 1 1 3 2 2 3 1 1 2 1 2 1 2 2 3 2 2 2 2 1 3 1 1 1 3 2 2 3 2 3 3 1 2 1 1 2 3 1 1 2 3 2 3 1 1 2 1 2 1 2 3 2 3 1 1 2 1 1 3 2 2 1 1 1 2 1 1 1 1 1 3 1 1 3 3 3 1 3 2 1 2 1 1 1 3 1 1 3 2 3 1 1 3 3 1 1 1 1 1 3 2 2 3 1 1 2 3 3 1 1 3 3 2 3 ...', 'output': ['338']}, {'input': '200\\r\\n3 2 3 1 2 1 2 3 3 1 3 2 3 1 1 3 3 2 2 2 1 2 2 3 1 1 1 2 3 3 2 3 3 2 3 2 2 1 3 3 2 1 3 3 2 2 1 1 1 2 3 1 3 3 2 3 1 3 3 3 3 3 3 2 2 1 2 3 3 1 2 1 1 1 3 1 1 3 1 1 2 2 2 2 3 3 3 1 1 2 3 2 1 3 2 2 1 2 3 1 2 3 3 3 3 3 2 1 1 3 3 2 3 1 3 3 3 1 2 1 2 2 1 1 3 ...', 'output': ['335']}, {'input': '200\\r\\n2 2 3 3 3 1 3 3 1 3 2 3 2 3 2 3 1 1 1 3 3 3 2 2 3 3 2 1 3 1 1 3 3 3 3 3 1 2 3 2 3 2 1 1 1 3 3 2 2 3 2 1 2 3 1 2 2 2 3 3 3 2 3 2 3 3 3 1 2 2 1 2 3 3 3 1 1 3 3 1 2 1 1 3 3 1 2 3 1 3 3 2 2 3 2 3 1 1 2 1 1 3 1 3 2 2 2 3 1 2 1 1 2 3 2 2 1 1 3 1 1 3 1 2 1 ...', 'output': ['339']}, {'input': '200\\r\\n2 2 3 1 3 2 2 3 3 1 2 3 1 1 2 1 3 3 2 3 3 3 3 3 3 2 2 1 3 1 1 1 2 3 3 1 1 3 1 2 3 3 3 1 2 1 3 3 2 1 3 2 1 3 2 2 3 3 1 3 3 1 2 2 2 2 3 3 1 1 2 3 3 1 1 3 1 1 2 3 2 2 3 3 1 2 1 3 3 1 1 3 2 2 2 1 2 1 1 3 2 1 2 3 3 3 3 1 1 3 1 1 1 2 3 1 2 2 3 1 1 2 3 3 1 ...', 'output': ['387']}, {'input': '200\\r\\n2 3 1 2 3 2 3 2 2 3 2 2 1 2 3 1 1 2 3 2 3 1 1 1 2 1 3 1 1 1 3 3 3 2 3 1 2 2 2 3 2 3 3 3 2 1 3 1 2 1 1 1 3 3 2 3 2 2 3 2 3 3 3 2 2 3 3 2 2 3 1 3 3 2 3 1 2 1 2 1 3 3 2 1 1 2 3 3 2 1 2 1 2 1 1 3 2 2 1 3 3 3 2 1 1 3 2 3 1 1 3 3 2 1 3 1 2 2 2 1 3 3 3 1 1 ...', 'output': ['411']}, {'input': '200\\r\\n1 1 1 3 2 3 1 2 2 3 2 3 2 3 2 3 2 3 2 1 3 2 2 2 2 1 1 3 1 1 3 2 3 2 1 1 3 1 3 3 1 2 1 3 3 3 2 1 2 2 3 1 1 2 3 3 1 1 1 3 2 2 1 3 2 3 3 1 2 1 1 3 1 3 1 3 2 2 1 1 2 1 2 3 2 1 3 3 3 1 2 1 3 3 1 3 2 3 3 1 3 1 1 3 2 3 2 3 1 3 3 3 2 2 3 2 1 2 2 3 2 1 3 3 2 ...', 'output': ['381']}, {'input': '200\\r\\n2 1 2 2 2 2 1 3 2 3 1 3 3 1 3 3 2 2 2 2 1 3 1 1 2 1 3 2 3 2 2 1 1 1 2 1 2 2 2 1 3 1 1 1 1 1 2 2 1 1 3 1 1 2 1 1 3 2 2 2 3 2 1 1 2 3 1 1 2 1 3 1 3 1 1 2 1 2 3 3 3 3 2 2 2 2 1 3 2 1 3 1 2 3 3 1 3 2 1 1 2 3 2 1 3 2 3 3 3 3 1 2 1 2 3 2 2 1 1 3 1 2 3 2 3 ...', 'output': ['391']}, {'input': '200\\r\\n3 1 3 3 1 3 3 2 1 2 2 3 3 2 1 1 1 2 2 2 2 2 3 1 1 3 1 1 1 3 3 3 2 2 3 3 3 1 1 1 1 3 1 3 3 2 1 3 2 3 3 3 2 2 3 1 2 3 1 2 3 2 2 2 3 2 1 3 2 1 2 3 1 2 1 2 2 3 3 3 2 1 1 3 2 1 1 2 2 1 1 3 2 3 2 2 3 1 3 2 2 1 1 3 2 1 1 2 2 1 2 2 2 2 1 3 2 2 1 1 2 1 1 1 2 ...', 'output': ['390']}, {'input': '200\\r\\n1 1 1 2 3 1 3 2 1 1 1 1 1 3 2 3 1 2 2 1 2 2 2 1 1 2 2 2 2 3 3 3 3 3 2 3 1 3 1 1 3 3 2 1 2 2 3 2 1 2 1 3 3 3 2 2 1 2 1 1 1 2 2 1 3 3 3 1 1 2 1 2 1 3 2 1 2 2 2 3 3 1 2 2 2 1 2 3 2 3 1 2 1 3 2 3 1 2 1 3 3 2 1 3 1 2 2 2 1 2 1 2 3 3 3 3 1 3 1 2 1 1 1 2 2 ...', 'output': ['383']}, {'input': '200\\r\\n3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 ...', 'output': ['201', '202']}, {'input': '200\\r\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 ...', 'output': ['214']}]", "source_code": "import java.util.*;\n\npublic class Solution {\n\t\n    static class Reader \n    { \n        final private int BUFFER_SIZE = 1 << 16; \n        private DataInputStream din; \n        private byte[] buffer; \n        private int bufferPointer, bytesRead; \n  \n        public Reader() \n        { \n            din = new DataInputStream(System.in); \n            buffer = new byte[BUFFER_SIZE]; \n            bufferPointer = bytesRead = 0; \n        } \n  \n        public Reader(String file_name) throws IOException \n        { \n            din = new DataInputStream(new FileInputStream(file_name)); \n            buffer = new byte[BUFFER_SIZE]; \n            bufferPointer = bytesRead = 0; \n        } \n  \n        public String readLine() throws IOException \n        { \n            byte[] buf = new byte[64]; // line length \n            int cnt = 0, c; \n            while ((c = read())!= -1) \n            { \n                if (c == '\\n') \n                    break; \n                buf[cnt++] = (byte) c; \n            } \n            return new String(buf, 0, cnt); \n        } \n  \n        public int nextInt() throws IOException \n        { \n            int ret = 0; \n            byte c = read(); \n            while (c <='') \n                c = read(); \n            boolean neg = (c == '-'); \n            if (neg) \n                c = read(); \n            do\n            { \n                ret *= 10; \n                ret += c - '0'; \n            }  while ((c = read()) >= '0' && c <= '9'); \n            if (neg) \n                return -ret; \n            return ret; \n        } \n  \n        public long nextLong() throws IOException \n        { \n            long ret = 0; \n            byte c = read(); \n            while (c <='') \n                c = read(); \n            boolean neg = (c == '-'); \n            if (neg) \n                c = read(); \n            do\n            { \n                ret *= 10; \n                ret += c - '0'; \n            } \n            while ((c = read()) >= '0' && c <= '9'); \n            if (neg) \n                return -ret; \n            return ret; \n        } \n  \n        public double nextDouble() throws IOException \n        { \n            double ret = 0, div = 1; \n            byte c = read(); \n            while (c <='') \n                c = read(); \n            boolean neg = (c == '-'); \n            if (neg) \n                c = read(); \n  \n            do { \n                ret = ret * 10 + c - '0'; \n            } \n            while ((c = read()) >= '0' && c <= '9'); \n  \n            if (c == -1 || c == -2 || c == '.') \n            { \n                while (((c = read()) >= '0' && c <= '9')) \n                { \n                    ret += (c - '0') / (div *= 10); \n                } \n            } \n  \n            if (neg) \n                return -ret; \n            return ret; \n        } \n  \n        private void fillBuffer() throws IOException \n        { \n            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE); \n            if (bytesRead == -1) \n                buffer[0] = -1; \n        } \n  \n        private byte read() throws IOException \n        { \n            if (bufferPointer == bytesRead) \n                fillBuffer(); \n            return buffer[bufferPointer++]; \n        } \n  \n        public void close() throws IOException \n        { \n            if (din == null) \n                return; \n            din.close(); \n        } \n    }\n\n\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\tReader.init(System.in);\n\t\tint n = Reader.nextInt();"}
{"src_uid": "be42e213ff43e303e475d77a9560367f", "id": 107, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1700, "testcases": "[{'input': '1\\r\\n1\\r\\n0\\r\\n', 'output': ['1']}, {'input': '5\\r\\n2 2 1 1 3\\r\\n1 5\\r\\n2 5 1\\r\\n2 5 4\\r\\n1 5\\r\\n0\\r\\n', 'output': ['7']}, {'input': '7\\r\\n1 3 3 1 2 1 1\\r\\n0\\r\\n1 1\\r\\n1 1\\r\\n2 1 6\\r\\n3 1 2 7\\r\\n1 1\\r\\n1 1\\r\\n', 'output': ['11']}, {'input': '2\\r\\n2 1\\r\\n0\\r\\n1 1\\r\\n', 'output': ['4']}, {'input': '3\\r\\n2 1 2\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['4']}, {'input': '4\\r\\n2 1 1 1\\r\\n0\\r\\n0\\r\\n1 1\\r\\n1 3\\r\\n', 'output': ['6']}, {'input': '6\\r\\n1 1 2 3 3 1\\r\\n2 2 3\\r\\n0\\r\\n0\\r\\n0\\r\\n2 2 1\\r\\n1 1\\r\\n', 'output': ['10']}, {'input': '8\\r\\n2 2 2 1 1 2 1 1\\r\\n3 5 6 7\\r\\n1 5\\r\\n2 5 6\\r\\n1 5\\r\\n0\\r\\n1 5\\r\\n1 5\\r\\n2 5 6\\r\\n', 'output': ['11']}, {'input': '9\\r\\n3 3 2 1 3 1 2 2 1\\r\\n2 4 3\\r\\n0\\r\\n2 4 2\\r\\n0\\r\\n1 4\\r\\n2 4 2\\r\\n0\\r\\n1 4\\r\\n3 4 3 8\\r\\n', 'output': ['13']}, {'input': '10\\r\\n3 1 2 2 2 1 2 1 1 1\\r\\n0\\r\\n2 6 9\\r\\n0\\r\\n1 9\\r\\n0\\r\\n1 3\\r\\n4 3 6 5 2\\r\\n3 6 4 2\\r\\n0\\r\\n1 3\\r\\n', 'output': ['14']}, {'input': '11\\r\\n1 2 2 3 3 2 2 2 2 3 1\\r\\n1 4\\r\\n2 7 11\\r\\n0\\r\\n0\\r\\n1 2\\r\\n1 11\\r\\n0\\r\\n1 2\\r\\n3 7 11 2\\r\\n3 3 2 9\\r\\n0\\r\\n', 'output': ['14']}, {'input': '12\\r\\n1 3 2 2 1 3 2 1 3 2 2 2\\r\\n2 3 4\\r\\n3 12 11 10\\r\\n1 8\\r\\n2 8 7\\r\\n2 9 10\\r\\n1 3\\r\\n0\\r\\n0\\r\\n1 4\\r\\n4 3 1 12 9\\r\\n3 8 3 4\\r\\n1 4\\r\\n', 'output': ['18']}, {'input': '13\\r\\n3 3 2 2 1 3 1 1 1 1 2 1 2\\r\\n5 6 3 11 13 12\\r\\n1 6\\r\\n2 10 6\\r\\n3 6 3 11\\r\\n1 6\\r\\n1 10\\r\\n3 6 2 3\\r\\n4 6 3 9 11\\r\\n3 6 2 3\\r\\n0\\r\\n3 6 2 3\\r\\n4 6 3 4 13\\r\\n2 6 3\\r\\n', 'output': ['21']}, {'input': '14\\r\\n3 2 2 1 2 1 1 3 1 2 2 3 1 1\\r\\n2 9 13\\r\\n3 9 13 8\\r\\n2 9 6\\r\\n3 9 6 13\\r\\n1 9\\r\\n1 9\\r\\n3 9 6 13\\r\\n2 9 13\\r\\n0\\r\\n4 9 3 13 4\\r\\n4 9 6 13 2\\r\\n2 9 13\\r\\n1 9\\r\\n8 9 5 6 3 13 7 4 11\\r\\n', 'output': ['20']}, {'input': '15\\r\\n1 2 3 2 3 2 2 2 3 3 3 2 3 1 3\\r\\n5 2 7 4 3 6\\r\\n0\\r\\n2 7 4\\r\\n2 2 15\\r\\n1 7\\r\\n1 7\\r\\n0\\r\\n2 4 6\\r\\n1 6\\r\\n2 15 3\\r\\n4 12 2 15 7\\r\\n0\\r\\n3 2 5 6\\r\\n3 2 4 6\\r\\n1 2\\r\\n', 'output': ['20']}, {'input': '16\\r\\n3 3 1 3 2 3 2 2 3 1 2 3 2 2 2 3\\r\\n1 14\\r\\n4 14 10 13 6\\r\\n3 14 15 6\\r\\n1 14\\r\\n4 14 10 9 7\\r\\n4 14 10 13 9\\r\\n4 14 10 13 6\\r\\n4 14 4 12 3\\r\\n2 14 4\\r\\n1 14\\r\\n1 14\\r\\n2 14 1\\r\\n4 14 10 4 1\\r\\n0\\r\\n2 14 10\\r\\n1 14\\r\\n', 'output': ['22']}, {'input': '17\\r\\n3 2 3 2 2 2 1 3 3 3 3 2 3 3 3 1 1\\r\\n0\\r\\n0\\r\\n2 8 10\\r\\n4 12 8 6 16\\r\\n0\\r\\n2 8 13\\r\\n3 2 8 10\\r\\n1 12\\r\\n4 8 17 3 16\\r\\n2 2 8\\r\\n0\\r\\n1 2\\r\\n2 8 10\\r\\n2 12 8\\r\\n2 8 10\\r\\n1 8\\r\\n2 12 8\\r\\n', 'output': ['21']}, {'input': '18\\r\\n2 1 1 3 2 1 3 2 3 3 2 2 1 1 3 1 1 3\\r\\n3 16 8 6\\r\\n3 16 6 1\\r\\n4 6 13 5 7\\r\\n2 6 2\\r\\n4 16 6 17 1\\r\\n2 16 8\\r\\n3 6 17 12\\r\\n1 16\\r\\n0\\r\\n3 6 15 1\\r\\n3 16 6 12\\r\\n7 16 9 8 6 13 17 14\\r\\n1 6\\r\\n1 6\\r\\n3 8 6 13\\r\\n0\\r\\n1 6\\r\\n3 9 6 13\\r\\n', 'output': ['26']}, {'input': '19\\r\\n2 1 2 3 3 3 2 1 1 1 1 3 3 1 1 1 2 2 3\\r\\n0\\r\\n2 1 7\\r\\n0\\r\\n4 3 2 17 13\\r\\n1 17\\r\\n1 3\\r\\n3 1 3 6\\r\\n4 1 17 9 13\\r\\n3 1 16 17\\r\\n0\\r\\n3 3 6 17\\r\\n1 6\\r\\n6 10 6 7 17 9 11\\r\\n3 10 17 13\\r\\n4 3 17 13 8\\r\\n1 3\\r\\n3 6 7 16\\r\\n0\\r\\n6 1 7 17 11 13 15\\r\\n', 'output': ['29']}, {'input': '20\\r\\n1 2 2 2 1 3 3 2 2 1 2 2 3 1 2 2 2 1 1 1\\r\\n2 10 8\\r\\n5 10 12 3 20 7\\r\\n0\\r\\n3 10 15 3\\r\\n0\\r\\n3 14 17 3\\r\\n2 12 20\\r\\n0\\r\\n3 17 10 12\\r\\n1 17\\r\\n1 5\\r\\n1 5\\r\\n0\\r\\n1 18\\r\\n3 18 5 12\\r\\n5 5 12 8 3 19\\r\\n0\\r\\n0\\r\\n1 12\\r\\n1 18\\r\\n', 'output': ['24']}, {'input': '11\\r\\n3 1 3 2 3 2 3 2 3 1 3\\r\\n6 2 3 9 5 7 10\\r\\n1 6\\r\\n2 6 2\\r\\n5 6 2 3 9 5\\r\\n2 3 9\\r\\n0\\r\\n5 3 9 5 8 4\\r\\n4 2 3 9 5\\r\\n2 2 3\\r\\n8 6 2 3 9 5 4 11 7\\r\\n4 2 3 9 5\\r\\n', 'output': ['21']}, {'input': '12\\r\\n2 3 3 1 1 3 2 2 3 1 3 3\\r\\n1 9\\r\\n1 1\\r\\n2 2 11\\r\\n5 1 2 11 5 8\\r\\n4 9 10 1 11\\r\\n5 9 10 12 11 5\\r\\n4 1 12 11 5\\r\\n5 10 1 2 12 11\\r\\n0\\r\\n1 9\\r\\n1 12\\r\\n0\\r\\n', 'output': ['19']}, {'input': '13\\r\\n3 2 2 1 3 3 2 3 2 2 1 2 3\\r\\n7 4 3 2 5 9 8 13\\r\\n1 4\\r\\n1 4\\r\\n0\\r\\n3 4 2 6\\r\\n2 4 2\\r\\n4 4 3 2 9\\r\\n5 4 2 6 9 7\\r\\n3 4 2 6\\r\\n6 4 3 2 5 9 7\\r\\n6 4 3 2 6 9 7\\r\\n8 4 2 6 5 9 8 11 10\\r\\n7 4 3 2 6 9 8 11\\r\\n', 'output': ['21']}, {'input': '14\\r\\n2 3 1 3 1 1 1 2 2 3 1 1 3 1\\r\\n4 14 9 8 5\\r\\n4 4 8 5 1\\r\\n9 4 14 9 8 1 2 13 7 12\\r\\n0\\r\\n2 14 8\\r\\n2 4 14\\r\\n7 9 6 10 8 1 2 13\\r\\n2 4 6\\r\\n1 14\\r\\n1 9\\r\\n8 4 6 10 8 5 1 2 3\\r\\n7 14 6 10 8 1 2 7\\r\\n5 10 8 5 1 2\\r\\n0\\r\\n', 'output': ['21']}, {'input': '15\\r\\n3 2 2 2 1 1 2 1 1 2 2 3 3 3 2\\r\\n1 13\\r\\n4 13 1 8 14\\r\\n10 5 13 1 8 14 4 2 11 15 10\\r\\n6 5 13 1 8 9 14\\r\\n0\\r\\n11 5 13 1 8 14 4 2 11 10 3 12\\r\\n11 13 1 8 14 4 2 11 15 10 3 6\\r\\n2 13 1\\r\\n4 5 13 1 8\\r\\n8 5 13 1 8 14 2 11 15\\r\\n6 5 13 1 8 14 2\\r\\n10 5 13 1 8 14 2 11 15 10 3\\r\\n0\\r\\n4 13 1 8 9\\r\\n8 5 13 1 8 9 14 2 11\\r\\n', 'output': ['23']}, {'input': '16\\r\\n3 1 2 3 3 2 3 1 3 2 2 1 2 2 1 2\\r\\n0\\r\\n0\\r\\n7 2 8 4 12 5 9 11\\r\\n1 1\\r\\n4 1 8 4 12\\r\\n5 2 4 12 5 11\\r\\n4 4 12 5 10\\r\\n0\\r\\n5 1 8 4 12 5\\r\\n6 1 4 12 5 9 11\\r\\n6 2 1 8 4 12 5\\r\\n2 4 13\\r\\n3 1 8 4\\r\\n8 1 4 13 12 5 10 3 6\\r\\n4 4 12 5 6\\r\\n8 8 4 13 12 5 9 6 14\\r\\n', 'output': ['26']}, {'input': '17\\r\\n2 3 1 3 3 3 1 1 1 2 2 2 3 2 3 3 2\\r\\n5 4 14 2 11 7\\r\\n3 13 4 14\\r\\n7 6 4 14 2 1 10 12\\r\\n2 6 13\\r\\n9 4 2 9 8 7 17 1 10 12\\r\\n0\\r\\n5 4 14 2 9 11\\r\\n4 13 4 2 11\\r\\n4 13 4 14 2\\r\\n7 13 4 2 11 8 7 1\\r\\n4 13 4 14 2\\r\\n8 6 4 2 8 7 17 1 10\\r\\n0\\r\\n1 4\\r\\n7 13 4 14 2 9 8 7\\r\\n6 4 2 17 1 10 12\\r\\n5 13 4 2 9 8\\r\\n', 'output': ['27']}, {'input': '18\\r\\n1 2 3 3 2 2 1 1 3 1 2 3 2 3 1 2 2 3\\r\\n5 9 3 14 12 2\\r\\n7 9 4 3 14 16 7 12\\r\\n1 9\\r\\n1 9\\r\\n6 9 14 12 1 6 15\\r\\n6 9 14 12 2 1 11\\r\\n2 9 14\\r\\n7 9 14 7 12 2 1 6\\r\\n0\\r\\n6 9 18 14 7 1 6\\r\\n4 9 14 7 1\\r\\n2 9 14\\r\\n6 9 3 14 7 1 6\\r\\n2 9 3\\r\\n9 9 3 14 16 12 2 1 6 17\\r\\n4 9 4 18 14\\r\\n8 9 18 14 12 1 11 6 13\\r\\n2 9 4\\r\\n', 'output': ['26']}, {'input': '19\\r\\n2 3 3 2 3 1 3 1 2 2 2 1 1 1 2 2 1 3 3\\r\\n0\\r\\n3 1 10 6\\r\\n8 1 6 2 17 18 12 15 7\\r\\n5 6 2 9 17 18\\r\\n6 6 2 17 18 12 16\\r\\n1 11\\r\\n9 1 11 6 2 17 18 4 12 15\\r\\n3 1 6 2\\r\\n4 1 6 2 8\\r\\n0\\r\\n1 1\\r\\n5 1 6 2 17 18\\r\\n12 1 10 6 2 8 17 18 4 12 15 7 3\\r\\n10 11 6 2 17 18 4 12 16 15 7\\r\\n8 1 6 2 8 17 18 12 16\\r\\n8 11 6 2 9 17 18 4 12\\r\\n3 11 6 2\\r\\n5 10 6 2 9 17\\r\\n10 1 6 2 17 18 12 5 15 7 3\\r\\n', 'output': ['30']}, {'input': '20\\r\\n2 2 3 2 3 1 1 3 1 1 1 1 1 3 2 1 3 1 1 1\\r\\n1 7\\r\\n13 7 1 11 4 6 16 20 12 5 18 19 15 10\\r\\n8 7 1 11 4 6 17 8 16\\r\\n3 7 1 11\\r\\n9 7 1 11 4 6 8 20 12 3\\r\\n4 7 1 11 4\\r\\n0\\r\\n6 7 1 11 4 6 17\\r\\n4 7 1 11 4\\r\\n7 7 1 11 4 6 17 5\\r\\n2 7 1\\r\\n9 7 1 11 4 6 17 8 14 20\\r\\n11 7 1 11 4 6 20 3 5 15 10 2\\r\\n5 7 1 11 4 6\\r\\n9 7 1 11 4 6 8 16 14 5\\r\\n5 7 1 11 4 6\\r\\n5 7 1 11 4 6\\r\\n11 7 1 11 4 9 6 17 8 20 3 5\\r\\n11 7 1 11 4 6 17 16 20 12 5 18\\r\\n6 7 1 11 4 6 14\\r\\n', 'output': ['35']}, {'input': '21\\r\\n1 2 1 3 3 3 1 1 2 2 3 1 3 1 3 3 1 1 1 2 2\\r\\n1 5\\r\\n0\\r\\n1 11\\r\\n0\\r\\n0\\r\\n0\\r\\n1 8\\r\\n0\\r\\n1 11\\r\\n1 1\\r\\n1 19\\r\\n0\\r\\n1 2\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 19\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['25']}, {'input': '22\\r\\n2 3 2 3 3 2 1 2 3 3 1 3 1 1 2 2 3 3 1 3 2 2\\r\\n0\\r\\n1 8\\r\\n1 22\\r\\n1 12\\r\\n0\\r\\n1 14\\r\\n0\\r\\n0\\r\\n0\\r\\n2 22 14\\r\\n1 12\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 16\\r\\n1 13\\r\\n0\\r\\n', 'output': ['25']}, {'input': '23\\r\\n3 1 3 3 2 2 2 1 3 2 3 1 1 1 1 2 3 1 2 1 3 1 1\\r\\n0\\r\\n1 11\\r\\n1 11\\r\\n2 11 16\\r\\n1 2\\r\\n3 11 1 12\\r\\n2 11 16\\r\\n2 12 2\\r\\n1 13\\r\\n2 12 2\\r\\n0\\r\\n0\\r\\n0\\r\\n2 13 11\\r\\n0\\r\\n1 11\\r\\n2 12 2\\r\\n3 16 6 21\\r\\n1 11\\r\\n0\\r\\n0\\r\\n2 11 12\\r\\n0\\r\\n', 'output': ['27']}, {'input': '24\\r\\n1 2 1 1 2 2 1 1 3 2 3 1 3 2 3 3 1 1 3 2 3 2 1 2\\r\\n1 16\\r\\n0\\r\\n0\\r\\n1 2\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 2\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n2 12 24\\r\\n0\\r\\n0\\r\\n1 11\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['27']}, {'input': '25\\r\\n3 3 1 1 1 2 2 2 3 1 2 3 2 1 2 2 2 3 2 1 2 3 2 1 1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 12\\r\\n0\\r\\n1 19\\r\\n0\\r\\n2 12 21\\r\\n2 3 10\\r\\n0\\r\\n1 21\\r\\n0\\r\\n1 9\\r\\n1 3\\r\\n0\\r\\n0\\r\\n2 3 2\\r\\n0\\r\\n1 12\\r\\n0\\r\\n1 3\\r\\n2 21 9\\r\\n', 'output': ['29']}, {'input': '26\\r\\n1 2 2 1 1 2 1 1 2 1 3 1 3 1 2 3 3 3 2 1 2 1 3 3 2 2\\r\\n1 9\\r\\n1 1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 5\\r\\n0\\r\\n2 15 12\\r\\n1 8\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n2 3 26\\r\\n0\\r\\n0\\r\\n0\\r\\n1 22\\r\\n0\\r\\n1 8\\r\\n', 'output': ['30']}, {'input': '27\\r\\n2 1 1 3 2 1 1 2 3 1 1 2 2 2 1 2 1 1 3 3 3 1 1 1 3 1 1\\r\\n0\\r\\n0\\r\\n0\\r\\n1 12\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 26\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 27\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 5\\r\\n0\\r\\n2 20 27\\r\\n1 18\\r\\n0\\r\\n', 'output': ['30']}, {'input': '28\\r\\n2 1 1 3 2 3 2 2 1 3 2 3 3 2 3 1 2 2 3 3 3 3 1 3 2 1 3 3\\r\\n0\\r\\n1 7\\r\\n0\\r\\n2 28 18\\r\\n1 28\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n2 10 18\\r\\n3 8 10 18\\r\\n0\\r\\n2 1 20\\r\\n0\\r\\n1 18\\r\\n1 27\\r\\n2 27 18\\r\\n0\\r\\n0\\r\\n1 28\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 28\\r\\n1 9\\r\\n', 'output': ['33']}, {'input': '29\\r\\n3 3 3 3 3 1 1 1 3 2 2 1 1 3 1 1 1 2 1 2 3 1 1 2 1 3 1 2 3\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 1\\r\\n0\\r\\n0\\r\\n2 28 15\\r\\n0\\r\\n0\\r\\n0\\r\\n2 24 23\\r\\n1 28\\r\\n0\\r\\n1 28\\r\\n1 20\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 28\\r\\n0\\r\\n0\\r\\n2 23 16\\r\\n0\\r\\n0\\r\\n1 7\\r\\n1 28\\r\\n', 'output': ['32']}, {'input': '30\\r\\n1 3 3 3 2 3 1 3 3 3 3 2 3 1 3 2 1 1 1 1 2 3 2 1 1 3 3 2 2 2\\r\\n0\\r\\n1 20\\r\\n0\\r\\n1 7\\r\\n2 6 9\\r\\n1 20\\r\\n1 20\\r\\n3 7 6 9\\r\\n2 10 6\\r\\n0\\r\\n0\\r\\n2 6 9\\r\\n0\\r\\n0\\r\\n1 20\\r\\n2 6 9\\r\\n2 6 9\\r\\n0\\r\\n2 6 9\\r\\n0\\r\\n2 6 9\\r\\n3 27 6 9\\r\\n2 6 9\\r\\n2 6 9\\r\\n0\\r\\n0\\r\\n0\\r\\n2 6 9\\r\\n3 6 9 19\\r\\n3 27 6 9\\r\\n', 'output': ['34']}, {'input': '200\\r\\n3 3 3 1 3 1 3 1 1 1 3 2 1 1 3 1 3 3 2 2 2 2 3 3 1 3 2 3 1 2 3 3 2 2 1 2 3 3 1 3 1 3 3 3 1 2 1 3 3 1 2 1 2 3 2 2 3 2 2 3 2 3 1 1 1 2 2 2 1 3 1 2 1 3 2 3 2 1 2 2 1 1 2 2 1 3 3 2 2 1 3 2 3 2 3 1 2 2 2 3 3 2 2 3 2 3 3 3 3 3 2 2 3 3 2 3 2 1 2 3 2 3 2 1 2 3 3 1 2 3 2 2 3 3 3 1 2 3 3 2 3 3 3 3 3 1 2 1 3 3 1 1 2 1 2 3 1 3 2 3 1 1 2 3 3 2 2 1 3 3 1 3 1 2 1 2 3 1 1 3 2 1 1 1 2 1 1 2 2 2 3 1 2 1 1 1 1 2 1 2\\r\\n19 52 113 18 109 125 8 150 180 173 174 116 130 79 122 112 19 80 110 121\\r\\n2 52 124\\r\\n13 52 129 148 125 150 ...', 'output': ['224']}, {'input': '200\\r\\n1 2 3 2 1 1 3 3 3 3 2 1 1 2 3 3 1 3 2 3 1 3 3 1 2 3 3 2 2 1 3 3 3 3 1 1 2 2 2 2 2 1 1 2 3 2 3 3 3 2 2 1 2 3 2 1 1 1 1 1 3 2 2 2 2 1 3 1 2 2 3 1 1 2 1 1 1 1 2 2 2 1 3 2 1 1 2 2 2 1 1 3 1 3 3 1 3 3 2 3 2 2 3 1 3 3 1 3 3 3 3 2 1 3 1 3 2 2 1 3 2 2 3 1 2 1 2 3 1 3 1 2 1 2 2 3 2 3 2 2 3 2 2 2 3 1 3 3 1 1 2 3 1 2 3 2 2 2 1 3 2 1 1 3 2 1 3 2 1 1 3 2 3 3 2 1 2 3 2 1 3 2 2 3 1 3 3 3 2 1 3 2 3 2 3 3 2 1 1 1\\r\\n16 96 58 20 140 86 51 130 57 66 64 112 177 54 123 62 155\\r\\n0\\r\\n0\\r\\n9 3 125 15 94 46 124 51 130 121\\r\\n4 56 124...', 'output': ['220']}, {'input': '200\\r\\n1 3 2 3 2 3 3 3 2 2 3 2 3 1 1 3 3 2 2 2 1 1 3 3 3 1 1 1 1 2 2 3 1 3 2 3 3 2 1 2 3 2 2 1 2 1 3 3 3 1 3 3 3 2 2 1 3 3 1 1 2 1 2 2 3 3 3 2 1 2 2 2 2 3 2 1 3 1 3 2 2 2 1 3 2 2 3 3 1 3 3 1 3 1 1 2 3 1 1 2 3 1 3 2 1 1 2 2 2 1 1 3 3 1 1 3 1 1 2 1 3 2 1 2 2 3 2 2 3 3 3 1 2 3 3 1 2 3 2 3 2 1 1 2 2 1 3 1 3 3 3 3 3 2 3 3 1 1 1 1 3 1 2 3 1 2 3 3 3 1 3 2 3 3 3 3 3 3 3 1 2 1 3 1 3 1 1 1 1 3 3 2 2 3 1 3 2 3 2 2\\r\\n0\\r\\n0\\r\\n3 193 176 85\\r\\n0\\r\\n1 193\\r\\n3 83 167 85\\r\\n0\\r\\n1 193\\r\\n5 161 193 85 16 44\\r\\n5 83 38 158 85 141\\r\\n7 120 4 158 ...', 'output': ['219']}, {'input': '200\\r\\n1 3 3 1 1 2 1 3 2 2 3 2 2 1 3 1 1 3 3 2 3 3 2 3 2 3 1 2 3 3 2 2 3 3 1 3 3 1 1 1 2 1 1 1 2 2 2 3 2 3 2 1 1 3 2 3 2 1 1 3 3 1 3 1 3 3 3 3 1 2 3 2 1 1 1 2 1 3 2 3 2 1 3 3 2 2 3 3 1 2 1 3 1 2 2 1 1 3 3 3 3 2 1 1 2 1 3 1 3 3 1 2 1 2 1 2 2 1 3 1 2 3 2 3 2 1 1 1 3 3 1 3 2 2 1 1 3 1 3 2 1 3 3 1 1 3 2 2 3 1 2 3 3 1 1 2 1 2 3 1 2 2 3 1 1 1 1 2 2 3 1 1 3 2 3 3 3 3 2 2 3 3 2 3 2 3 1 2 3 1 1 2 3 2 1 1 3 2 3 1\\r\\n3 4 164 15\\r\\n8 15 35 25 18 32 168 10 118\\r\\n3 50 15 35\\r\\n0\\r\\n0\\r\\n2 4 15\\r\\n0\\r\\n5 50 15 44 84 120\\r\\n5 15 111 91 66 1...', 'output': ['222']}, {'input': '200\\r\\n3 1 2 3 2 1 3 2 2 1 3 1 1 1 3 1 3 3 1 1 3 1 2 2 2 1 3 3 2 1 3 2 3 3 3 2 2 1 3 1 2 1 3 2 2 2 2 1 1 2 2 3 1 2 1 3 2 3 2 1 2 1 2 3 3 2 2 2 2 1 2 2 1 2 3 1 1 1 3 3 1 3 2 3 1 2 2 1 2 2 3 3 1 1 1 2 1 1 3 1 3 2 2 1 3 1 2 3 1 3 2 3 3 3 1 3 1 2 3 3 2 2 2 2 2 3 2 3 3 3 3 2 3 2 3 2 1 3 2 1 3 2 1 1 3 1 3 1 2 2 2 2 1 1 1 1 3 2 1 3 3 1 1 2 1 3 3 1 1 3 1 3 2 2 2 3 2 3 2 3 1 2 3 2 3 3 2 3 3 1 1 2 2 2 3 1 2 2 2 2\\r\\n0\\r\\n0\\r\\n11 153 175 47 143 18 78 79 113 170 35 49\\r\\n8 45 153 67 74 161 162 122 170\\r\\n4 153 137 67 72\\r\\n2 153 10...', 'output': ['223']}, {'input': '200\\r\\n3 2 2 1 3 2 2 3 1 1 2 3 3 1 2 2 3 3 1 1 3 3 3 1 1 3 2 3 2 3 3 2 2 1 3 2 1 2 3 1 1 3 3 2 3 1 1 2 3 2 1 3 2 2 3 3 1 1 1 3 2 1 3 1 2 1 2 1 2 3 1 3 2 2 1 1 1 1 3 2 1 1 1 1 3 1 3 1 3 3 1 2 2 2 1 2 3 1 2 3 1 1 2 3 3 3 1 3 2 2 2 2 2 2 3 1 1 3 1 3 1 1 3 3 1 2 1 3 3 2 1 2 2 1 1 2 3 1 3 3 3 2 2 1 1 1 3 3 1 2 3 1 1 3 2 3 2 1 3 3 2 1 3 1 1 1 2 1 1 2 3 2 3 2 3 1 3 1 3 1 3 3 1 2 2 3 3 3 2 1 3 1 1 2 2 2 3 3 1 1\\r\\n0\\r\\n3 96 43 53\\r\\n3 43 156 199\\r\\n1 43\\r\\n3 1 43 33\\r\\n6 43 50 191 21 57 168\\r\\n10 43 194 185 192 83 101 152 80 191 ...', 'output': ['222']}, {'input': '200\\r\\n1 2 3 3 1 2 1 1 2 1 1 1 1 2 3 3 3 1 2 2 2 2 3 2 1 2 2 3 3 1 1 3 1 1 1 3 1 3 3 2 2 3 3 3 2 3 1 1 1 1 2 3 2 3 3 3 1 1 3 3 1 2 3 1 3 1 3 2 3 2 1 3 1 1 1 2 1 3 2 2 2 3 2 2 2 2 1 3 3 3 3 1 3 1 2 1 2 1 2 1 2 3 2 3 1 3 1 2 1 1 2 3 3 1 2 1 1 1 1 2 3 1 1 1 2 3 2 1 1 2 3 3 2 3 3 3 1 3 1 2 3 2 3 2 1 2 3 2 2 2 3 1 2 3 2 1 2 3 1 1 1 3 1 2 3 2 3 1 3 2 1 2 3 1 1 1 1 2 2 2 1 2 1 2 3 3 2 1 3 3 2 2 3 1 1 2 1 3 1 2\\r\\n11 164 21 199 71 131 112 110 4 146 192 179\\r\\n4 71 127 60 14\\r\\n14 193 144 133 70 97 71 53 110 145 113 57 166...', 'output': ['219']}, {'input': '200\\r\\n3 1 3 3 2 1 2 1 1 3 3 3 2 3 2 3 3 2 1 1 2 3 2 2 1 1 2 2 2 3 3 2 2 3 2 1 2 3 1 1 3 1 1 2 2 2 3 3 2 2 3 2 3 1 2 2 2 1 3 1 3 3 3 2 3 2 2 1 2 1 1 3 2 2 3 3 2 3 2 1 2 3 3 3 3 1 2 1 1 3 1 3 1 2 2 1 3 1 1 2 2 3 1 3 1 2 3 3 2 1 2 1 2 1 2 3 2 1 1 2 1 3 1 3 1 3 2 1 2 1 3 3 1 1 1 2 1 2 3 3 1 2 2 1 1 3 1 1 1 3 2 3 1 2 2 3 1 2 1 1 1 1 1 3 3 3 1 1 2 2 3 3 2 2 2 1 3 1 1 3 2 1 1 3 3 3 2 2 1 1 1 1 2 3 3 3 2 2 1 3\\r\\n7 132 13 75 196 148 170 110\\r\\n10 132 16 77 192 46 146 55 75 99 98\\r\\n1 132\\r\\n1 132\\r\\n5 132 103 73 119 13\\r\\n6 13...', 'output': ['221']}, {'input': '200\\r\\n2 1 1 3 2 1 3 2 1 2 2 2 3 1 3 1 3 3 2 2 2 3 1 2 1 2 1 2 1 3 1 3 2 2 2 2 2 2 3 2 3 2 3 2 2 3 2 3 2 3 2 3 3 1 1 3 2 3 3 1 3 2 1 1 1 3 1 2 2 2 2 1 2 3 2 1 1 3 1 1 3 2 1 3 2 2 1 2 1 2 1 3 2 2 2 1 2 1 2 3 3 3 1 1 2 2 3 3 3 3 1 3 1 2 1 3 1 2 2 2 2 1 2 1 2 1 2 1 2 1 1 3 1 2 3 1 2 1 3 1 3 1 2 1 3 3 1 2 1 1 3 3 3 3 3 2 3 2 2 2 2 1 3 3 3 3 3 2 1 1 3 3 3 3 2 1 2 2 2 2 2 1 2 1 2 1 2 1 3 3 2 2 3 1 1 2 2 3 2 2\\r\\n6 84 74 147 109 151 78\\r\\n13 157 14 38 43 55 12 96 111 138 30 76 146 108\\r\\n7 7 12 60 139 159 199 2\\r\\n6 7 14 5...', 'output': ['216']}, {'input': '200\\r\\n1 2 1 3 2 1 1 3 3 3 1 3 1 2 1 1 3 2 2 3 2 3 1 2 2 3 2 3 2 3 2 1 3 1 3 3 3 3 2 3 2 2 3 3 2 3 2 2 1 3 2 2 2 1 2 1 2 3 3 1 3 1 2 1 1 2 2 1 1 2 3 3 2 2 1 3 1 2 2 2 1 2 2 3 3 2 1 1 1 1 2 1 3 1 3 2 1 3 3 2 1 2 3 1 3 2 2 2 3 3 2 1 3 3 2 2 3 1 3 1 2 2 3 1 3 2 1 3 3 2 2 2 1 1 3 1 2 3 2 1 2 3 2 2 3 2 1 3 2 2 3 2 3 2 3 2 2 2 2 2 1 3 1 3 3 3 1 3 1 3 1 2 2 3 2 3 1 3 1 3 3 3 1 1 2 2 1 1 2 1 1 3 1 1 2 3 2 2 2 2\\r\\n11 120 34 23 75 191 50 115 196 15 134 160\\r\\n8 105 34 167 25 191 50 43 15\\r\\n1 55\\r\\n1 42\\r\\n8 159 31 122 25 191 ...', 'output': ['219']}, {'input': '200\\r\\n3 3 2 3 2 3 1 3 2 2 1 3 2 2 1 3 1 3 3 3 2 2 2 2 1 1 3 1 1 2 1 3 1 3 2 1 1 2 3 3 2 3 1 1 3 2 2 2 3 2 1 3 3 2 3 2 2 2 3 3 2 3 2 3 1 2 2 3 3 2 3 3 1 3 1 3 1 1 1 3 1 1 2 3 2 1 1 1 2 2 2 2 3 2 1 2 3 1 3 3 1 2 2 1 2 1 1 3 3 3 1 1 2 3 1 2 3 2 2 1 2 2 3 1 3 3 1 1 2 2 1 1 2 2 3 3 2 3 2 2 3 3 2 3 3 1 2 1 3 1 2 1 1 3 2 3 2 2 2 2 2 3 1 1 2 1 1 3 2 2 1 3 3 1 2 3 2 1 2 3 3 1 1 1 2 2 1 2 1 2 2 2 3 1 3 3 3 2 3 3\\r\\n5 188 126 156 182 91\\r\\n3 102 139 93\\r\\n4 139 56 152 126\\r\\n0\\r\\n5 35 127 37 93 174\\r\\n4 55 21 154 91\\r\\n4 10 93 126 ...', 'output': ['213']}, {'input': '200\\r\\n3 2 2 2 2 3 1 1 1 2 2 2 3 2 3 3 3 1 3 2 3 1 2 2 1 1 1 3 1 3 1 1 1 1 2 3 3 1 3 1 2 2 1 2 3 2 1 2 2 1 1 2 1 2 3 1 3 1 1 2 1 3 2 3 1 2 2 3 1 3 2 2 2 1 1 2 1 1 2 2 1 2 2 2 2 2 3 1 3 2 2 1 3 2 2 2 3 1 3 1 3 1 1 1 2 1 1 3 3 1 3 2 3 3 1 3 3 2 1 1 3 1 1 2 3 3 3 2 1 3 3 1 2 3 3 2 2 3 2 3 1 1 3 1 3 2 2 2 2 3 1 1 2 1 1 2 1 2 3 2 3 3 1 2 3 2 2 2 2 3 1 2 3 3 2 3 3 2 3 1 3 3 2 1 1 1 2 2 2 3 3 1 2 2 1 2 3 2 2 1\\r\\n1 125\\r\\n0\\r\\n2 125 34\\r\\n1 116\\r\\n3 76 100 59\\r\\n0\\r\\n5 176 175 126 80 142\\r\\n3 19 172 116\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n4 125 116 200 ...', 'output': ['210']}, {'input': '200\\r\\n2 1 2 3 2 2 1 2 2 2 1 3 2 2 2 2 1 1 3 2 2 2 3 3 3 1 2 3 2 1 2 2 1 3 3 2 1 3 3 1 1 2 2 2 3 1 2 3 1 1 3 3 1 1 1 1 2 2 1 2 2 2 3 2 2 1 2 3 3 2 2 3 3 3 2 1 1 2 1 1 1 2 3 3 2 3 1 2 3 1 3 1 1 1 3 1 1 1 1 3 2 3 3 2 2 1 1 2 2 1 1 1 2 3 1 3 3 2 2 1 1 3 1 1 2 2 2 1 3 3 3 2 2 2 2 3 1 3 2 3 1 3 3 2 2 1 1 2 1 1 3 2 1 1 2 3 2 2 2 3 1 2 3 2 1 1 2 2 2 3 1 3 2 1 1 1 3 2 1 1 1 1 2 2 2 3 1 2 3 3 2 1 1 1 3 3 2 2 2 1\\r\\n4 15 85 52 111\\r\\n0\\r\\n0\\r\\n2 190 140\\r\\n4 74 52 124 64\\r\\n4 29 181 52 167\\r\\n2 52 184\\r\\n1 31\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n2 21 184\\r\\n0...', 'output': ['210']}, {'input': '200\\r\\n3 1 1 1 3 3 3 1 3 3 1 3 1 2 3 3 3 2 1 2 2 3 3 1 1 3 2 1 3 2 1 2 3 2 2 1 1 2 2 1 1 3 2 2 1 2 2 1 2 2 1 3 1 2 3 1 3 3 1 3 1 3 2 3 2 2 1 2 3 2 1 3 2 3 1 1 1 1 1 1 2 2 3 2 3 3 3 1 3 1 2 3 1 1 3 2 3 2 1 1 3 2 2 2 3 2 1 3 2 1 3 2 3 2 2 1 2 1 2 1 3 2 1 2 1 3 2 2 1 3 3 3 2 2 2 1 2 3 1 1 1 2 1 2 1 2 3 1 1 3 3 2 2 1 1 3 3 1 1 1 1 2 3 1 3 3 3 2 1 3 3 1 3 3 1 2 1 2 1 1 2 3 2 2 1 1 1 1 3 3 3 3 3 3 3 1 3 3 3 2\\r\\n5 200 120 25 2 163\\r\\n5 200 120 21 25 90\\r\\n6 200 120 25 189 2 76\\r\\n3 200 120 25\\r\\n5 200 120 115 25 28\\r\\n4 200 1...', 'output': ['212']}, {'input': '200\\r\\n1 1 3 3 2 2 2 2 2 3 2 3 1 1 1 2 2 2 3 3 1 1 2 1 3 1 3 2 2 2 3 1 3 2 3 2 2 3 1 1 3 3 2 3 3 3 2 2 1 2 3 3 2 2 1 3 2 1 2 3 1 3 2 1 1 1 2 1 3 1 1 3 2 3 1 2 3 3 2 1 2 1 2 3 3 3 1 1 3 3 2 3 3 1 2 2 3 1 3 3 2 1 3 3 2 2 3 2 2 3 1 2 2 3 2 3 2 3 1 3 1 1 3 2 2 2 3 2 2 3 2 3 1 2 3 1 1 2 3 2 1 2 2 3 1 1 3 1 1 1 1 2 2 1 1 3 1 2 3 3 1 2 3 1 2 2 3 2 2 1 1 2 2 1 2 1 3 1 1 1 2 3 2 2 2 2 3 2 2 2 3 1 3 3 1 1 1 3 2 2\\r\\n3 159 22 96\\r\\n2 100 148\\r\\n3 180 22 123\\r\\n3 44 80 22\\r\\n4 102 111 180 22\\r\\n1 39\\r\\n9 112 180 186 185 42 159 22 36 ...', 'output': ['208']}, {'input': '200\\r\\n2 2 2 3 2 1 1 2 3 1 3 2 1 1 1 2 2 2 3 1 3 3 2 1 1 2 1 3 1 3 3 1 1 3 2 1 3 2 2 3 1 2 3 2 2 2 3 3 1 1 3 3 1 2 3 2 3 2 1 1 2 3 3 2 3 3 2 1 3 2 2 3 1 2 2 2 2 2 3 2 3 3 2 3 3 3 3 1 2 2 2 1 3 2 1 1 2 1 3 1 1 3 3 1 1 2 1 2 2 3 1 1 2 1 1 1 2 3 2 2 1 1 1 1 3 2 1 1 2 3 2 2 3 2 2 2 1 3 3 3 3 2 1 1 1 3 2 3 1 3 2 2 2 1 3 2 1 2 1 2 1 2 1 1 1 1 3 1 2 2 1 2 3 2 3 3 2 3 1 3 3 3 2 2 2 1 2 1 1 1 2 2 3 1 2 2 3 3 2 2\\r\\n2 105 58\\r\\n5 3 105 174 47 138\\r\\n0\\r\\n1 3\\r\\n0\\r\\n1 105\\r\\n3 3 105 8\\r\\n2 162 105\\r\\n3 105 174 44\\r\\n4 3 98 105 174\\r\\n1 56\\r...', 'output': ['213']}, {'input': '200\\r\\n3 3 1 3 2 3 2 3 1 3 3 1 1 2 3 1 2 2 2 3 2 2 2 2 1 3 3 2 2 2 3 3 3 3 1 1 3 1 3 1 2 1 2 3 2 2 3 3 3 3 1 3 1 3 1 3 3 3 2 2 1 1 2 1 2 2 2 2 1 2 1 1 2 3 2 3 2 2 2 3 3 3 3 3 2 2 1 1 1 2 1 1 2 3 2 3 1 3 1 1 1 3 3 2 3 2 1 3 1 3 1 2 2 2 2 1 1 2 2 3 2 1 2 2 3 3 1 1 3 3 3 3 1 1 1 3 1 3 2 1 1 3 2 1 1 2 3 3 3 3 2 2 1 2 3 2 2 2 1 3 2 1 2 1 3 2 3 3 1 3 3 3 2 1 3 3 2 2 1 2 2 1 1 3 2 1 3 3 2 1 1 2 3 1 2 2 2 2 3 1\\r\\n0\\r\\n3 7 146 123\\r\\n1 71\\r\\n4 62 140 24 93\\r\\n0\\r\\n7 41 186 144 104 10 32 189\\r\\n1 71\\r\\n1 71\\r\\n0\\r\\n6 71 62 24 72 123 104...', 'output': ['215']}, {'input': '200\\r\\n1 2 3 1 1 1 2 2 2 2 1 2 1 2 3 2 2 3 2 1 2 1 1 2 2 1 2 2 3 1 2 3 3 3 1 1 1 2 1 1 1 1 1 1 1 2 3 2 1 1 3 2 1 2 1 1 3 3 1 3 2 3 2 1 3 3 3 3 1 1 3 3 3 1 2 1 1 1 1 1 1 1 1 2 1 3 3 1 2 1 2 1 2 2 1 2 1 2 3 3 2 2 2 1 1 2 2 3 3 1 1 1 2 2 3 1 3 2 1 3 1 2 1 1 2 1 2 3 1 1 1 2 2 2 3 3 2 3 3 3 3 1 1 2 3 3 3 1 1 1 1 1 3 2 1 3 2 2 2 3 3 2 3 2 2 1 2 2 3 1 2 2 1 1 1 3 3 1 3 1 1 2 1 3 1 2 3 1 1 2 2 2 3 1 2 2 2 1 2 3\\r\\n2 49 38\\r\\n3 200 49 38\\r\\n5 159 38 94 182 192\\r\\n4 49 38 94 148\\r\\n2 200 159\\r\\n7 9 38 111 89 94 92 125\\r\\n8 38 68 17...', 'output': ['213']}, {'input': '200\\r\\n2 3 1 2 1 3 2 1 1 2 1 2 3 3 1 2 1 3 3 2 1 1 3 1 2 3 3 3 1 1 3 1 1 1 2 3 3 3 1 2 3 2 2 1 2 3 3 1 1 2 1 3 3 1 2 3 3 2 2 1 2 1 2 1 3 2 2 3 2 2 1 1 3 3 2 2 1 1 3 1 1 1 3 1 3 1 1 3 1 3 2 3 1 3 1 1 3 2 3 2 2 1 3 3 2 2 2 2 3 3 1 1 1 1 2 1 1 1 3 1 3 2 1 2 1 3 3 2 2 2 1 2 2 2 1 3 2 1 3 2 1 2 2 2 2 1 1 3 2 1 1 2 1 1 1 1 1 3 1 2 2 2 3 2 3 2 3 3 2 3 2 3 2 1 3 3 3 3 3 2 1 3 1 3 1 3 1 1 3 2 1 3 1 3 1 2 1 3 3 1\\r\\n5 38 67 92 180 132\\r\\n4 119 69 116 67\\r\\n0\\r\\n1 135\\r\\n9 193 67 122 7 15 45 2 180 129\\r\\n2 143 195\\r\\n3 176 38 175\\r\\n0...', 'output': ['212']}, {'input': '200\\r\\n2 3 3 1 1 1 3 3 3 3 1 1 1 1 2 2 2 2 2 1 3 1 2 3 1 1 1 3 2 2 1 2 2 3 3 2 3 2 2 2 3 2 3 3 2 2 1 2 3 3 1 1 1 2 2 3 1 2 1 3 3 2 1 3 3 3 2 2 1 2 3 2 2 1 2 1 2 2 1 3 3 2 2 3 3 2 3 1 3 3 1 2 1 1 1 3 1 2 1 2 3 1 3 2 2 1 2 3 1 2 3 3 1 2 1 1 2 2 2 1 3 2 3 3 2 1 2 3 3 3 1 2 3 1 1 1 2 1 3 3 2 3 1 1 2 2 1 3 3 3 3 2 3 2 2 1 1 2 3 1 3 1 3 3 3 3 1 3 2 3 2 2 3 2 3 1 2 2 2 3 2 2 1 1 1 3 1 3 1 2 1 3 1 1 3 2 2 2 3 1\\r\\n2 14 181\\r\\n3 83 181 61\\r\\n3 59 181 60\\r\\n4 181 164 72 138\\r\\n2 109 181\\r\\n3 176 181 79\\r\\n5 118 109 181 135 142\\r\\n2 1...', 'output': ['215']}, {'input': '200\\r\\n3 3 2 2 3 2 1 1 1 1 3 3 1 2 2 2 1 1 3 1 3 3 1 2 3 1 3 2 3 2 2 3 2 2 2 3 1 2 2 1 1 3 3 1 3 3 2 1 3 2 1 1 3 3 2 1 3 1 1 2 3 2 1 2 3 1 2 2 3 1 2 1 1 3 1 3 2 3 1 3 1 3 2 2 2 1 2 1 2 2 2 2 3 1 2 1 1 2 3 3 1 2 1 2 1 2 2 3 2 2 3 2 1 3 2 1 1 1 3 3 3 2 2 3 2 2 3 3 2 1 1 2 1 1 3 3 2 2 3 1 1 2 2 2 3 1 3 2 3 2 2 1 2 1 3 2 2 3 1 2 1 2 2 1 3 3 2 2 3 2 3 2 3 2 1 1 1 3 2 2 1 3 2 2 1 1 2 3 1 1 1 1 2 2 1 2 3 3 1 3\\r\\n110 6 89 9 11 54 82 39 183 22 93 96 109 24 42 45 104 75 190 147 90 68 188 133 62 117 139 154 91 177 44 92...', 'output': ['346']}, {'input': '200\\r\\n1 1 1 3 2 3 1 2 2 2 1 1 1 3 2 2 3 1 1 2 1 2 1 2 2 3 2 2 2 2 1 3 1 1 1 3 2 2 3 2 3 3 1 2 1 1 2 3 1 1 2 3 2 3 1 1 2 1 2 1 2 3 2 3 1 1 2 1 1 3 2 2 1 1 1 2 1 1 1 1 1 3 1 1 3 3 3 1 3 2 1 2 1 1 1 3 1 1 3 2 3 1 1 3 3 1 1 1 1 1 3 2 2 3 1 1 2 3 3 1 1 3 3 2 3 2 2 1 2 3 3 1 1 1 1 3 3 2 3 2 3 3 3 2 3 1 2 2 3 1 3 2 1 3 1 2 3 3 1 1 2 2 2 3 2 3 2 1 3 3 2 1 3 1 3 2 2 2 2 1 2 2 1 1 2 3 1 2 3 2 1 2 1 1 2 2 1 3 2 3\\r\\n23 109 172 111 25 46 157 144 72 156 94 110 22 60 98 118 171 189 86 42 117 186 8 161\\r\\n43 111 25 197 46 157...', 'output': ['338']}, {'input': '200\\r\\n3 2 3 1 2 1 2 3 3 1 3 2 3 1 1 3 3 2 2 2 1 2 2 3 1 1 1 2 3 3 2 3 3 2 3 2 2 1 3 3 2 1 3 3 2 2 1 1 1 2 3 1 3 3 2 3 1 3 3 3 3 3 3 2 2 1 2 3 3 1 2 1 1 1 3 1 1 3 1 1 2 2 2 2 3 3 3 1 1 2 3 2 1 3 2 2 1 2 3 1 2 3 3 3 3 3 2 1 1 3 3 2 3 1 3 3 3 1 2 1 2 2 1 1 3 2 1 1 1 3 3 3 3 2 2 1 3 2 1 2 3 2 1 1 1 1 3 2 3 1 2 1 1 3 2 2 3 1 3 1 2 3 1 1 3 2 2 1 3 2 2 3 1 1 2 2 2 1 1 2 3 1 1 1 2 2 2 2 2 2 1 3 3 2 1 3 2 3 3 1\\r\\n25 200 2 127 5 69 99 52 174 194 19 169 106 163 40 177 84 178 108 112 21 17 42 162 33 122\\r\\n1 200\\r\\n46 200 2...', 'output': ['335']}, {'input': '200\\r\\n2 2 3 3 3 1 3 3 1 3 2 3 2 3 2 3 1 1 1 3 3 3 2 2 3 3 2 1 3 1 1 3 3 3 3 3 1 2 3 2 3 2 1 1 1 3 3 2 2 3 2 1 2 3 1 2 2 2 3 3 3 2 3 2 3 3 3 1 2 2 1 2 3 3 3 1 1 3 3 1 2 1 1 3 3 1 2 3 1 3 3 2 2 3 2 3 1 1 2 1 1 3 1 3 2 2 2 3 1 2 1 1 2 3 2 2 1 1 3 1 1 3 1 2 1 1 3 1 2 3 1 2 3 2 3 1 1 3 1 1 2 1 1 2 3 3 1 3 1 1 3 1 3 2 3 1 2 2 1 2 1 2 3 3 3 1 2 3 2 1 3 3 3 1 1 3 2 3 2 3 1 2 2 3 1 3 1 2 2 1 2 3 1 3 2 1 3 3 3 2\\r\\n84 138 10 57 184 16 9 11 15 2 176 33 43 6 91 158 194 27 18 31 141 167 193 150 102 41 53 197 191 94 66 49 ...', 'output': ['339']}, {'input': '200\\r\\n2 2 3 1 3 2 2 3 3 1 2 3 1 1 2 1 3 3 2 3 3 3 3 3 3 2 2 1 3 1 1 1 2 3 3 1 1 3 1 2 3 3 3 1 2 1 3 3 2 1 3 2 1 3 2 2 3 3 1 3 3 1 2 2 2 2 3 3 1 1 2 3 3 1 1 3 1 1 2 3 2 2 3 3 1 2 1 3 3 1 1 3 2 2 2 1 2 1 1 3 2 1 2 3 3 3 3 1 1 3 1 1 1 2 3 1 2 2 3 1 1 2 3 3 1 3 3 3 2 1 1 2 2 3 3 1 3 3 1 1 1 3 2 1 2 2 2 3 3 1 1 1 3 2 3 3 2 3 3 2 3 2 1 1 3 2 1 3 3 1 2 2 2 3 1 1 2 3 2 2 3 2 1 2 2 1 1 2 2 1 3 2 3 2 1 2 1 2 2 3\\r\\n0\\r\\n43 1 121 139 184 5 124 152 43 197 25 149 186 23 94 80 188 91 187 68 49 176 153 169 36 110 26 38 3 195 ...', 'output': ['387']}, {'input': '200\\r\\n2 3 1 2 3 2 3 2 2 3 2 2 1 2 3 1 1 2 3 2 3 1 1 1 2 1 3 1 1 1 3 3 3 2 3 1 2 2 2 3 2 3 3 3 2 1 3 1 2 1 1 1 3 3 2 3 2 2 3 2 3 3 3 2 2 3 3 2 2 3 1 3 3 2 3 1 2 1 2 1 3 3 2 1 1 2 3 3 2 1 2 1 2 1 1 3 2 2 1 3 3 3 2 1 1 3 2 3 1 1 3 3 2 1 3 1 2 2 2 1 3 3 3 1 1 2 2 1 1 2 3 3 1 3 3 3 3 2 3 1 3 2 1 3 1 1 3 1 2 2 1 3 3 2 1 3 1 2 2 1 2 2 1 1 1 1 1 1 2 2 2 1 3 2 1 3 1 3 1 2 2 2 1 2 1 2 3 3 1 3 2 3 1 2 1 2 3 1 3 1\\r\\n48 98 53 140 115 193 33 91 105 9 19 143 72 194 84 88 90 17 30 52 71 36 118 23 21 180 51 27 81 178 95 43 9...', 'output': ['411']}, {'input': '200\\r\\n1 1 1 3 2 3 1 2 2 3 2 3 2 3 2 3 2 3 2 1 3 2 2 2 2 1 1 3 1 1 3 2 3 2 1 1 3 1 3 3 1 2 1 3 3 3 2 1 2 2 3 1 1 2 3 3 1 1 1 3 2 2 1 3 2 3 3 1 2 1 1 3 1 3 1 3 2 2 1 1 2 1 2 3 2 1 3 3 3 1 2 1 3 3 1 3 2 3 3 1 3 1 1 3 2 3 2 3 1 3 3 3 2 2 3 2 1 2 2 3 2 1 3 3 2 2 2 2 3 3 1 1 2 2 3 2 2 2 2 1 1 2 3 1 2 2 1 1 2 2 2 2 1 2 3 2 1 1 1 2 3 2 3 1 3 3 2 1 1 2 2 3 1 3 3 2 2 1 2 2 3 1 2 1 2 3 2 2 3 1 3 1 2 1 3 3 2 2 1 2\\r\\n85 58 117 3 98 12 35 75 167 155 18 169 88 22 145 132 49 29 71 184 161 9 142 153 189 67 118 112 26 92 139 ...', 'output': ['381']}, {'input': '200\\r\\n2 1 2 2 2 2 1 3 2 3 1 3 3 1 3 3 2 2 2 2 1 3 1 1 2 1 3 2 3 2 2 1 1 1 2 1 2 2 2 1 3 1 1 1 1 1 2 2 1 1 3 1 1 2 1 1 3 2 2 2 3 2 1 1 2 3 1 1 2 1 3 1 3 1 1 2 1 2 3 3 3 3 2 2 2 2 1 3 2 1 3 1 2 3 3 1 3 2 1 1 2 3 2 1 3 2 3 3 3 3 1 2 1 2 3 2 2 1 1 3 1 2 3 2 3 2 1 1 1 3 2 3 1 2 1 1 2 1 3 1 2 1 1 2 3 1 3 3 1 3 2 3 1 1 1 3 1 3 1 1 2 1 2 3 2 3 3 3 2 3 1 3 1 2 3 1 3 1 1 1 3 1 2 3 1 1 2 3 3 1 1 2 2 1 3 2 3 1 2 1\\r\\n131 141 103 74 113 45 96 142 55 196 126 6 77 139 102 15 194 34 105 158 145 187 134 27 162 100 57 8 183 29...', 'output': ['391']}, {'input': '200\\r\\n3 1 3 3 1 3 3 2 1 2 2 3 3 2 1 1 1 2 2 2 2 2 3 1 1 3 1 1 1 3 3 3 2 2 3 3 3 1 1 1 1 3 1 3 3 2 1 3 2 3 3 3 2 2 3 1 2 3 1 2 3 2 2 2 3 2 1 3 2 1 2 3 1 2 1 2 2 3 3 3 2 1 1 3 2 1 1 2 2 1 1 3 2 3 2 2 3 1 3 2 2 1 1 3 2 1 1 2 2 1 2 2 2 2 1 3 2 2 1 1 2 1 1 1 2 1 1 2 3 1 3 1 3 3 3 2 3 1 3 3 2 2 2 3 1 2 1 2 3 2 1 2 2 2 1 3 2 2 1 2 2 3 2 2 3 3 1 1 3 1 2 2 2 3 1 2 3 3 2 3 3 2 3 2 3 2 3 2 2 3 1 2 1 1 2 3 3 1 1 2\\r\\n28 123 137 3 177 73 48 126 94 112 66 186 197 78 26 181 180 187 117 142 29 189 31 191 24 125 45 200 140\\r\\n1...', 'output': ['390']}, {'input': '200\\r\\n1 1 1 2 3 1 3 2 1 1 1 1 1 3 2 3 1 2 2 1 2 2 2 1 1 2 2 2 2 3 3 3 3 3 2 3 1 3 1 1 3 3 2 1 2 2 3 2 1 2 1 3 3 3 2 2 1 2 1 1 1 2 2 1 3 3 3 1 1 2 1 2 1 3 2 1 2 2 2 3 3 1 2 2 2 1 2 3 2 3 1 2 1 3 2 3 1 2 1 3 3 2 1 3 1 2 2 2 1 2 1 2 3 3 3 3 1 3 1 2 1 1 1 2 2 1 2 3 3 1 1 2 3 3 3 2 3 1 1 3 1 1 3 3 3 1 1 3 1 2 3 3 2 3 3 3 2 1 1 1 1 2 3 2 3 3 2 1 3 1 2 3 2 1 1 3 3 2 1 3 3 1 1 1 2 3 1 3 1 3 3 2 3 3 1 1 1 3 3 1\\r\\n141 15 147 168 123 32 99 115 22 9 10 125 79 96 145 126 59 17 20 188 124 21 172 23 14 177 26 112 150 54 47...', 'output': ['383']}, {'input': '200\\r\\n3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 2 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 2 3 1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n...', 'output': ['202']}, {'input': '200\\r\\n3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 3\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n...', 'output': ['201']}, {'input': '200\\r\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2\\r\\n0\\r\\n1 1\\r\\n1 2\\r\\n1 2\\r\\n1 1\\r\\n1 5\\r\\n1 5\\r\\n1 6\\r\\n1 7\\r\\n1 8\\r\\n1 5\\r\\n1 8\\r\\n1 6\\r\\n1 12\\r\\n1 14\\r\\n1 2\\r\\n1 12\\r\\n1 4\\r\\n1 9\\r\\n1 2\\r\\n1 17...', 'output': ['214']}, {'input': '4\\r\\n1 1 2 3\\r\\n1 2\\r\\n1 3\\r\\n0\\r\\n1 1\\r\\n', 'output': ['8']}, {'input': '15\\r\\n3 2 2 2 1 1 2 1 1 2 2 3 3 3 2\\r\\n1 13\\r\\n4 13 1 8 14\\r\\n10 5 13 1 8 14 4 2 11 15 10\\r\\n6 5 13 1 8 9 14\\r\\n0\\r\\n11 5 13 1 8 14 4 2 11 10 3 12\\r\\n11 13 1 8 14 4 2 11 15 10 3 6\\r\\n2 13 1\\r\\n4 5 13 1 8\\r\\n8 5 13 1 8 14 2 11 15\\r\\n6 5 13 1 8 14 2\\r\\n10 5 13 1 8 14 2 11 15 10 3\\r\\n0...', 'output': ['23']}, {'input': '17\\r\\n2 3 1 3 3 3 1 1 1 2 2 2 3 2 3 3 2\\r\\n5 4 14 2 11 7\\r\\n3 13 4 14\\r\\n7 6 4 14 2 1 10 12\\r\\n2 6 13\\r\\n9 4 2 9 8 7 17 1 10 12\\r\\n0\\r\\n5 4 14 2 9 11\\r\\n4 13 4 2 11\\r\\n4 13 4 14 2\\r\\n7 13 4 2 11 8 7 1\\r\\n4 13 4 14 2\\r\\n8 6 4 2 8 7 17 1 10\\r\\n0\\r\\n1 4\\r\\n7 13 4 14 2 9 8 7\\r\\n6 4 2 17 1 10 ...', 'output': ['27']}, {'input': '18\\r\\n1 2 3 3 2 2 1 1 3 1 2 3 2 3 1 2 2 3\\r\\n5 9 3 14 12 2\\r\\n7 9 4 3 14 16 7 12\\r\\n1 9\\r\\n1 9\\r\\n6 9 14 12 1 6 15\\r\\n6 9 14 12 2 1 11\\r\\n2 9 14\\r\\n7 9 14 7 12 2 1 6\\r\\n0\\r\\n6 9 18 14 7 1 6\\r\\n4 9 14 7 1\\r\\n2 9 14\\r\\n6 9 3 14 7 1 6\\r\\n2 9 3\\r\\n9 9 3 14 16 12 2 1 6 17\\r\\n4 9 4 18 14\\r\\n8 9 1...', 'output': ['26']}, {'input': '19\\r\\n2 3 3 2 3 1 3 1 2 2 2 1 1 1 2 2 1 3 3\\r\\n0\\r\\n3 1 10 6\\r\\n8 1 6 2 17 18 12 15 7\\r\\n5 6 2 9 17 18\\r\\n6 6 2 17 18 12 16\\r\\n1 11\\r\\n9 1 11 6 2 17 18 4 12 15\\r\\n3 1 6 2\\r\\n4 1 6 2 8\\r\\n0\\r\\n1 1\\r\\n5 1 6 2 17 18\\r\\n12 1 10 6 2 8 17 18 4 12 15 7 3\\r\\n10 11 6 2 17 18 4 12 16 15 7\\r\\n8 1 ...', 'output': ['30']}, {'input': '20\\r\\n2 2 3 2 3 1 1 3 1 1 1 1 1 3 2 1 3 1 1 1\\r\\n1 7\\r\\n13 7 1 11 4 6 16 20 12 5 18 19 15 10\\r\\n8 7 1 11 4 6 17 8 16\\r\\n3 7 1 11\\r\\n9 7 1 11 4 6 8 20 12 3\\r\\n4 7 1 11 4\\r\\n0\\r\\n6 7 1 11 4 6 17\\r\\n4 7 1 11 4\\r\\n7 7 1 11 4 6 17 5\\r\\n2 7 1\\r\\n9 7 1 11 4 6 17 8 14 20\\r\\n11 7 1 11 4 6 20...', 'output': ['35']}, {'input': '200\\r\\n3 3 3 1 3 1 3 1 1 1 3 2 1 1 3 1 3 3 2 2 2 2 3 3 1 3 2 3 1 2 3 3 2 2 1 2 3 3 1 3 1 3 3 3 1 2 1 3 3 1 2 1 2 3 2 2 3 2 2 3 2 3 1 1 1 2 2 2 1 3 1 2 1 3 2 3 2 1 2 2 1 1 2 2 1 3 3 2 2 1 3 2 3 2 3 1 2 2 2 3 3 2 2 3 2 3 3 3 3 3 2 2 3 3 2 3 2 1 2 3 2 3 2 1 2 ...', 'output': ['224']}, {'input': '200\\r\\n1 2 3 2 1 1 3 3 3 3 2 1 1 2 3 3 1 3 2 3 1 3 3 1 2 3 3 2 2 1 3 3 3 3 1 1 2 2 2 2 2 1 1 2 3 2 3 3 3 2 2 1 2 3 2 1 1 1 1 1 3 2 2 2 2 1 3 1 2 2 3 1 1 2 1 1 1 1 2 2 2 1 3 2 1 1 2 2 2 1 1 3 1 3 3 1 3 3 2 3 2 2 3 1 3 3 1 3 3 3 3 2 1 3 1 3 2 2 1 3 2 2 3 1 2 ...', 'output': ['220']}, {'input': '200\\r\\n1 3 2 3 2 3 3 3 2 2 3 2 3 1 1 3 3 2 2 2 1 1 3 3 3 1 1 1 1 2 2 3 1 3 2 3 3 2 1 2 3 2 2 1 2 1 3 3 3 1 3 3 3 2 2 1 3 3 1 1 2 1 2 2 3 3 3 2 1 2 2 2 2 3 2 1 3 1 3 2 2 2 1 3 2 2 3 3 1 3 3 1 3 1 1 2 3 1 1 2 3 1 3 2 1 1 2 2 2 1 1 3 3 1 1 3 1 1 2 1 3 2 1 2 2 ...', 'output': ['219']}, {'input': '200\\r\\n1 3 3 1 1 2 1 3 2 2 3 2 2 1 3 1 1 3 3 2 3 3 2 3 2 3 1 2 3 3 2 2 3 3 1 3 3 1 1 1 2 1 1 1 2 2 2 3 2 3 2 1 1 3 2 3 2 1 1 3 3 1 3 1 3 3 3 3 1 2 3 2 1 1 1 2 1 3 2 3 2 1 3 3 2 2 3 3 1 2 1 3 1 2 2 1 1 3 3 3 3 2 1 1 2 1 3 1 3 3 1 2 1 2 1 2 2 1 3 1 2 3 2 3 2 ...', 'output': ['222']}, {'input': '200\\r\\n3 1 2 3 2 1 3 2 2 1 3 1 1 1 3 1 3 3 1 1 3 1 2 2 2 1 3 3 2 1 3 2 3 3 3 2 2 1 3 1 2 1 3 2 2 2 2 1 1 2 2 3 1 2 1 3 2 3 2 1 2 1 2 3 3 2 2 2 2 1 2 2 1 2 3 1 1 1 3 3 1 3 2 3 1 2 2 1 2 2 3 3 1 1 1 2 1 1 3 1 3 2 2 1 3 1 2 3 1 3 2 3 3 3 1 3 1 2 3 3 2 2 2 2 2 ...', 'output': ['223']}, {'input': '200\\r\\n3 2 2 1 3 2 2 3 1 1 2 3 3 1 2 2 3 3 1 1 3 3 3 1 1 3 2 3 2 3 3 2 2 1 3 2 1 2 3 1 1 3 3 2 3 1 1 2 3 2 1 3 2 2 3 3 1 1 1 3 2 1 3 1 2 1 2 1 2 3 1 3 2 2 1 1 1 1 3 2 1 1 1 1 3 1 3 1 3 3 1 2 2 2 1 2 3 1 2 3 1 1 2 3 3 3 1 3 2 2 2 2 2 2 3 1 1 3 1 3 1 1 3 3 1 ...', 'output': ['222']}, {'input': '200\\r\\n1 2 3 3 1 2 1 1 2 1 1 1 1 2 3 3 3 1 2 2 2 2 3 2 1 2 2 3 3 1 1 3 1 1 1 3 1 3 3 2 2 3 3 3 2 3 1 1 1 1 2 3 2 3 3 3 1 1 3 3 1 2 3 1 3 1 3 2 3 2 1 3 1 1 1 2 1 3 2 2 2 3 2 2 2 2 1 3 3 3 3 1 3 1 2 1 2 1 2 1 2 3 2 3 1 3 1 2 1 1 2 3 3 1 2 1 1 1 1 2 3 1 1 1 2 ...', 'output': ['219']}, {'input': '200\\r\\n3 1 3 3 2 1 2 1 1 3 3 3 2 3 2 3 3 2 1 1 2 3 2 2 1 1 2 2 2 3 3 2 2 3 2 1 2 3 1 1 3 1 1 2 2 2 3 3 2 2 3 2 3 1 2 2 2 1 3 1 3 3 3 2 3 2 2 1 2 1 1 3 2 2 3 3 2 3 2 1 2 3 3 3 3 1 2 1 1 3 1 3 1 2 2 1 3 1 1 2 2 3 1 3 1 2 3 3 2 1 2 1 2 1 2 3 2 1 1 2 1 3 1 3 1 ...', 'output': ['221']}, {'input': '200\\r\\n2 1 1 3 2 1 3 2 1 2 2 2 3 1 3 1 3 3 2 2 2 3 1 2 1 2 1 2 1 3 1 3 2 2 2 2 2 2 3 2 3 2 3 2 2 3 2 3 2 3 2 3 3 1 1 3 2 3 3 1 3 2 1 1 1 3 1 2 2 2 2 1 2 3 2 1 1 3 1 1 3 2 1 3 2 2 1 2 1 2 1 3 2 2 2 1 2 1 2 3 3 3 1 1 2 2 3 3 3 3 1 3 1 2 1 3 1 2 2 2 2 1 2 1 2 ...', 'output': ['216']}, {'input': '200\\r\\n1 2 1 3 2 1 1 3 3 3 1 3 1 2 1 1 3 2 2 3 2 3 1 2 2 3 2 3 2 3 2 1 3 1 3 3 3 3 2 3 2 2 3 3 2 3 2 2 1 3 2 2 2 1 2 1 2 3 3 1 3 1 2 1 1 2 2 1 1 2 3 3 2 2 1 3 1 2 2 2 1 2 2 3 3 2 1 1 1 1 2 1 3 1 3 2 1 3 3 2 1 2 3 1 3 2 2 2 3 3 2 1 3 3 2 2 3 1 3 1 2 2 3 1 3 ...', 'output': ['219']}, {'input': '200\\r\\n3 3 2 3 2 3 1 3 2 2 1 3 2 2 1 3 1 3 3 3 2 2 2 2 1 1 3 1 1 2 1 3 1 3 2 1 1 2 3 3 2 3 1 1 3 2 2 2 3 2 1 3 3 2 3 2 2 2 3 3 2 3 2 3 1 2 2 3 3 2 3 3 1 3 1 3 1 1 1 3 1 1 2 3 2 1 1 1 2 2 2 2 3 2 1 2 3 1 3 3 1 2 2 1 2 1 1 3 3 3 1 1 2 3 1 2 3 2 2 1 2 2 3 1 3 ...', 'output': ['213']}, {'input': '200\\r\\n3 2 2 2 2 3 1 1 1 2 2 2 3 2 3 3 3 1 3 2 3 1 2 2 1 1 1 3 1 3 1 1 1 1 2 3 3 1 3 1 2 2 1 2 3 2 1 2 2 1 1 2 1 2 3 1 3 1 1 2 1 3 2 3 1 2 2 3 1 3 2 2 2 1 1 2 1 1 2 2 1 2 2 2 2 2 3 1 3 2 2 1 3 2 2 2 3 1 3 1 3 1 1 1 2 1 1 3 3 1 3 2 3 3 1 3 3 2 1 1 3 1 1 2 3 ...', 'output': ['210']}, {'input': '200\\r\\n2 1 2 3 2 2 1 2 2 2 1 3 2 2 2 2 1 1 3 2 2 2 3 3 3 1 2 3 2 1 2 2 1 3 3 2 1 3 3 1 1 2 2 2 3 1 2 3 1 1 3 3 1 1 1 1 2 2 1 2 2 2 3 2 2 1 2 3 3 2 2 3 3 3 2 1 1 2 1 1 1 2 3 3 2 3 1 2 3 1 3 1 1 1 3 1 1 1 1 3 2 3 3 2 2 1 1 2 2 1 1 1 2 3 1 3 3 2 2 1 1 3 1 1 2 ...', 'output': ['210']}, {'input': '200\\r\\n3 1 1 1 3 3 3 1 3 3 1 3 1 2 3 3 3 2 1 2 2 3 3 1 1 3 2 1 3 2 1 2 3 2 2 1 1 2 2 1 1 3 2 2 1 2 2 1 2 2 1 3 1 2 3 1 3 3 1 3 1 3 2 3 2 2 1 2 3 2 1 3 2 3 1 1 1 1 1 1 2 2 3 2 3 3 3 1 3 1 2 3 1 1 3 2 3 2 1 1 3 2 2 2 3 2 1 3 2 1 3 2 3 2 2 1 2 1 2 1 3 2 1 2 1 ...', 'output': ['212']}, {'input': '200\\r\\n1 1 3 3 2 2 2 2 2 3 2 3 1 1 1 2 2 2 3 3 1 1 2 1 3 1 3 2 2 2 3 1 3 2 3 2 2 3 1 1 3 3 2 3 3 3 2 2 1 2 3 3 2 2 1 3 2 1 2 3 1 3 2 1 1 1 2 1 3 1 1 3 2 3 1 2 3 3 2 1 2 1 2 3 3 3 1 1 3 3 2 3 3 1 2 2 3 1 3 3 2 1 3 3 2 2 3 2 2 3 1 2 2 3 2 3 2 3 1 3 1 1 3 2 2 ...', 'output': ['208']}, {'input': '200\\r\\n2 2 2 3 2 1 1 2 3 1 3 2 1 1 1 2 2 2 3 1 3 3 2 1 1 2 1 3 1 3 3 1 1 3 2 1 3 2 2 3 1 2 3 2 2 2 3 3 1 1 3 3 1 2 3 2 3 2 1 1 2 3 3 2 3 3 2 1 3 2 2 3 1 2 2 2 2 2 3 2 3 3 2 3 3 3 3 1 2 2 2 1 3 2 1 1 2 1 3 1 1 3 3 1 1 2 1 2 2 3 1 1 2 1 1 1 2 3 2 2 1 1 1 1 3 ...', 'output': ['213']}, {'input': '200\\r\\n3 3 1 3 2 3 2 3 1 3 3 1 1 2 3 1 2 2 2 3 2 2 2 2 1 3 3 2 2 2 3 3 3 3 1 1 3 1 3 1 2 1 2 3 2 2 3 3 3 3 1 3 1 3 1 3 3 3 2 2 1 1 2 1 2 2 2 2 1 2 1 1 2 3 2 3 2 2 2 3 3 3 3 3 2 2 1 1 1 2 1 1 2 3 2 3 1 3 1 1 1 3 3 2 3 2 1 3 1 3 1 2 2 2 2 1 1 2 2 3 2 1 2 2 3 ...', 'output': ['215']}, {'input': '200\\r\\n1 2 3 1 1 1 2 2 2 2 1 2 1 2 3 2 2 3 2 1 2 1 1 2 2 1 2 2 3 1 2 3 3 3 1 1 1 2 1 1 1 1 1 1 1 2 3 2 1 1 3 2 1 2 1 1 3 3 1 3 2 3 2 1 3 3 3 3 1 1 3 3 3 1 2 1 1 1 1 1 1 1 1 2 1 3 3 1 2 1 2 1 2 2 1 2 1 2 3 3 2 2 2 1 1 2 2 3 3 1 1 1 2 2 3 1 3 2 1 3 1 2 1 1 2 ...', 'output': ['213']}, {'input': '200\\r\\n2 3 1 2 1 3 2 1 1 2 1 2 3 3 1 2 1 3 3 2 1 1 3 1 2 3 3 3 1 1 3 1 1 1 2 3 3 3 1 2 3 2 2 1 2 3 3 1 1 2 1 3 3 1 2 3 3 2 2 1 2 1 2 1 3 2 2 3 2 2 1 1 3 3 2 2 1 1 3 1 1 1 3 1 3 1 1 3 1 3 2 3 1 3 1 1 3 2 3 2 2 1 3 3 2 2 2 2 3 3 1 1 1 1 2 1 1 1 3 1 3 2 1 2 1 ...', 'output': ['212']}, {'input': '200\\r\\n2 3 3 1 1 1 3 3 3 3 1 1 1 1 2 2 2 2 2 1 3 1 2 3 1 1 1 3 2 2 1 2 2 3 3 2 3 2 2 2 3 2 3 3 2 2 1 2 3 3 1 1 1 2 2 3 1 2 1 3 3 2 1 3 3 3 2 2 1 2 3 2 2 1 2 1 2 2 1 3 3 2 2 3 3 2 3 1 3 3 1 2 1 1 1 3 1 2 1 2 3 1 3 2 2 1 2 3 1 2 3 3 1 2 1 1 2 2 2 1 3 2 3 3 2 ...', 'output': ['215']}, {'input': '200\\r\\n3 3 2 2 3 2 1 1 1 1 3 3 1 2 2 2 1 1 3 1 3 3 1 2 3 1 3 2 3 2 2 3 2 2 2 3 1 2 2 1 1 3 3 1 3 3 2 1 3 2 1 1 3 3 2 1 3 1 1 2 3 2 1 2 3 1 2 2 3 1 2 1 1 3 1 3 2 3 1 3 1 3 2 2 2 1 2 1 2 2 2 2 3 1 2 1 1 2 3 3 1 2 1 2 1 2 2 3 2 2 3 2 1 3 2 1 1 1 3 3 3 2 2 3 2 ...', 'output': ['346']}, {'input': '200\\r\\n1 1 1 3 2 3 1 2 2 2 1 1 1 3 2 2 3 1 1 2 1 2 1 2 2 3 2 2 2 2 1 3 1 1 1 3 2 2 3 2 3 3 1 2 1 1 2 3 1 1 2 3 2 3 1 1 2 1 2 1 2 3 2 3 1 1 2 1 1 3 2 2 1 1 1 2 1 1 1 1 1 3 1 1 3 3 3 1 3 2 1 2 1 1 1 3 1 1 3 2 3 1 1 3 3 1 1 1 1 1 3 2 2 3 1 1 2 3 3 1 1 3 3 2 3 ...', 'output': ['338']}, {'input': '200\\r\\n3 2 3 1 2 1 2 3 3 1 3 2 3 1 1 3 3 2 2 2 1 2 2 3 1 1 1 2 3 3 2 3 3 2 3 2 2 1 3 3 2 1 3 3 2 2 1 1 1 2 3 1 3 3 2 3 1 3 3 3 3 3 3 2 2 1 2 3 3 1 2 1 1 1 3 1 1 3 1 1 2 2 2 2 3 3 3 1 1 2 3 2 1 3 2 2 1 2 3 1 2 3 3 3 3 3 2 1 1 3 3 2 3 1 3 3 3 1 2 1 2 2 1 1 3 ...', 'output': ['335']}, {'input': '200\\r\\n2 2 3 3 3 1 3 3 1 3 2 3 2 3 2 3 1 1 1 3 3 3 2 2 3 3 2 1 3 1 1 3 3 3 3 3 1 2 3 2 3 2 1 1 1 3 3 2 2 3 2 1 2 3 1 2 2 2 3 3 3 2 3 2 3 3 3 1 2 2 1 2 3 3 3 1 1 3 3 1 2 1 1 3 3 1 2 3 1 3 3 2 2 3 2 3 1 1 2 1 1 3 1 3 2 2 2 3 1 2 1 1 2 3 2 2 1 1 3 1 1 3 1 2 1 ...', 'output': ['339']}, {'input': '200\\r\\n2 2 3 1 3 2 2 3 3 1 2 3 1 1 2 1 3 3 2 3 3 3 3 3 3 2 2 1 3 1 1 1 2 3 3 1 1 3 1 2 3 3 3 1 2 1 3 3 2 1 3 2 1 3 2 2 3 3 1 3 3 1 2 2 2 2 3 3 1 1 2 3 3 1 1 3 1 1 2 3 2 2 3 3 1 2 1 3 3 1 1 3 2 2 2 1 2 1 1 3 2 1 2 3 3 3 3 1 1 3 1 1 1 2 3 1 2 2 3 1 1 2 3 3 1 ...', 'output': ['387']}, {'input': '200\\r\\n2 3 1 2 3 2 3 2 2 3 2 2 1 2 3 1 1 2 3 2 3 1 1 1 2 1 3 1 1 1 3 3 3 2 3 1 2 2 2 3 2 3 3 3 2 1 3 1 2 1 1 1 3 3 2 3 2 2 3 2 3 3 3 2 2 3 3 2 2 3 1 3 3 2 3 1 2 1 2 1 3 3 2 1 1 2 3 3 2 1 2 1 2 1 1 3 2 2 1 3 3 3 2 1 1 3 2 3 1 1 3 3 2 1 3 1 2 2 2 1 3 3 3 1 1 ...', 'output': ['411']}, {'input': '200\\r\\n1 1 1 3 2 3 1 2 2 3 2 3 2 3 2 3 2 3 2 1 3 2 2 2 2 1 1 3 1 1 3 2 3 2 1 1 3 1 3 3 1 2 1 3 3 3 2 1 2 2 3 1 1 2 3 3 1 1 1 3 2 2 1 3 2 3 3 1 2 1 1 3 1 3 1 3 2 2 1 1 2 1 2 3 2 1 3 3 3 1 2 1 3 3 1 3 2 3 3 1 3 1 1 3 2 3 2 3 1 3 3 3 2 2 3 2 1 2 2 3 2 1 3 3 2 ...', 'output': ['381']}, {'input': '200\\r\\n2 1 2 2 2 2 1 3 2 3 1 3 3 1 3 3 2 2 2 2 1 3 1 1 2 1 3 2 3 2 2 1 1 1 2 1 2 2 2 1 3 1 1 1 1 1 2 2 1 1 3 1 1 2 1 1 3 2 2 2 3 2 1 1 2 3 1 1 2 1 3 1 3 1 1 2 1 2 3 3 3 3 2 2 2 2 1 3 2 1 3 1 2 3 3 1 3 2 1 1 2 3 2 1 3 2 3 3 3 3 1 2 1 2 3 2 2 1 1 3 1 2 3 2 3 ...', 'output': ['391']}, {'input': '200\\r\\n3 1 3 3 1 3 3 2 1 2 2 3 3 2 1 1 1 2 2 2 2 2 3 1 1 3 1 1 1 3 3 3 2 2 3 3 3 1 1 1 1 3 1 3 3 2 1 3 2 3 3 3 2 2 3 1 2 3 1 2 3 2 2 2 3 2 1 3 2 1 2 3 1 2 1 2 2 3 3 3 2 1 1 3 2 1 1 2 2 1 1 3 2 3 2 2 3 1 3 2 2 1 1 3 2 1 1 2 2 1 2 2 2 2 1 3 2 2 1 1 2 1 1 1 2 ...', 'output': ['390']}, {'input': '200\\r\\n1 1 1 2 3 1 3 2 1 1 1 1 1 3 2 3 1 2 2 1 2 2 2 1 1 2 2 2 2 3 3 3 3 3 2 3 1 3 1 1 3 3 2 1 2 2 3 2 1 2 1 3 3 3 2 2 1 2 1 1 1 2 2 1 3 3 3 1 1 2 1 2 1 3 2 1 2 2 2 3 3 1 2 2 2 1 2 3 2 3 1 2 1 3 2 3 1 2 1 3 3 2 1 3 1 2 2 2 1 2 1 2 3 3 3 3 1 3 1 2 1 1 1 2 2 ...', 'output': ['383']}, {'input': '200\\r\\n3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 ...', 'output': ['201', '202']}, {'input': '200\\r\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 ...', 'output': ['214']}]", "source_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport java.util.stream.Collectors;\nimport static java.util.stream.Collectors.toList;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class JavaApplication2 {\n\n    \n    public static void main(String[] args) throws IOException {\n        int n;\n        int time = 0 ; \n        int c = 0;\n        int[][] list ; \n        int c1 ; \n        int c2 ; \n        int comp ; \n        boolean check = true ;\n        int cost ;\n        int a = 0 ; \n        int min = 10000 ; \n        int mini ; \n        int min1 = 100 ; \n        int x  ;\n        boolean flag = true ; \n        int max ; \n        int[] f ; \n        int maxi ; \n        int m1 ; \n        int m2 ;\n        int minn ;\n        int min2 = 100 ; \n        int k ;\n        String[] split ;\n        String[] split2 ; \n        int maxx = 0 ; \n        int m3 ; \n        String[] split3 ;\n        int minn2 = 10000000 ; \n        int m = 0 ;\n        int min22 = 0 ; \n        int[] t ; \n        int min3 ; \n        int y = 100 ; \n        int i ; \n        int j = 0 ; \n        int[] num ; \n        String[] str ; \n        int h ;\n        int count = 0 ; \n        int count2 = 0 ; \n        int x2 ; \n        int max2 = 0 ; \n        int z ; \n        int max3 ; \n        int m4 ; \n        int minn1 = 10000 ; \n        int min5 = 10000 ; \n        int maxx2 ; \n        int maxxx ; \n        int minn3 = 10000 ; \n        int min4 ; \n        int minm ; \n        int m6 ; \n        int m5 ;\n        int maxx1 ; \n        int m7 ; \n        int maxx3 ; \n        int maxx4 ; \n        int maxx5 ; \n        int maxx6 ; \n        int maxx7 ; \n        int count4 ; \n        int z2 ;\n        int m8 ; \n        int m9 ; \n        int z3 ;\n        int z4 ; \n        int l ; \n        int z5 ;\n        int[] k1 ; \n        int a1 ; \n        int c3 ; \n        int c22 = 0 ; \n        int c4 ; \n        int c5 ; \n        int c6 ; \n        int c7 ;\n        int c8 ; \n        int c9 ; \n        int c10 ;\n        int maxx8 ; \n        int maxx9 ; \n        int m10 ; \n        int maxx10 ; \n        int minx ; \n        int minx2 ; \n        int m11 ; \n        int maxx11 ; \n        int minn6 = 10000 ; \n        int minn7 = 10000 ; \n        int minn5 = 10000 ; \n        int count3 ; \n        int count5 ; \n        int count6 ; \n        int[] q ; \n        int[] q1 ; \n        int[] q2 ; \n        int maxx12 ; \n        int maxx13 ; \n        int maxx14 ; \n        int maxx15 ; \n        int minx3 ;\n        int minx4 ; \n        int maxx16 ;\n        int maxx17 ; \n        int maxx18"}
{"src_uid": "be42e213ff43e303e475d77a9560367f", "id": 107, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1700, "testcases": "[{'input': '1\\r\\n1\\r\\n0\\r\\n', 'output': ['1']}, {'input': '5\\r\\n2 2 1 1 3\\r\\n1 5\\r\\n2 5 1\\r\\n2 5 4\\r\\n1 5\\r\\n0\\r\\n', 'output': ['7']}, {'input': '7\\r\\n1 3 3 1 2 1 1\\r\\n0\\r\\n1 1\\r\\n1 1\\r\\n2 1 6\\r\\n3 1 2 7\\r\\n1 1\\r\\n1 1\\r\\n', 'output': ['11']}, {'input': '2\\r\\n2 1\\r\\n0\\r\\n1 1\\r\\n', 'output': ['4']}, {'input': '3\\r\\n2 1 2\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['4']}, {'input': '4\\r\\n2 1 1 1\\r\\n0\\r\\n0\\r\\n1 1\\r\\n1 3\\r\\n', 'output': ['6']}, {'input': '6\\r\\n1 1 2 3 3 1\\r\\n2 2 3\\r\\n0\\r\\n0\\r\\n0\\r\\n2 2 1\\r\\n1 1\\r\\n', 'output': ['10']}, {'input': '8\\r\\n2 2 2 1 1 2 1 1\\r\\n3 5 6 7\\r\\n1 5\\r\\n2 5 6\\r\\n1 5\\r\\n0\\r\\n1 5\\r\\n1 5\\r\\n2 5 6\\r\\n', 'output': ['11']}, {'input': '9\\r\\n3 3 2 1 3 1 2 2 1\\r\\n2 4 3\\r\\n0\\r\\n2 4 2\\r\\n0\\r\\n1 4\\r\\n2 4 2\\r\\n0\\r\\n1 4\\r\\n3 4 3 8\\r\\n', 'output': ['13']}, {'input': '10\\r\\n3 1 2 2 2 1 2 1 1 1\\r\\n0\\r\\n2 6 9\\r\\n0\\r\\n1 9\\r\\n0\\r\\n1 3\\r\\n4 3 6 5 2\\r\\n3 6 4 2\\r\\n0\\r\\n1 3\\r\\n', 'output': ['14']}, {'input': '11\\r\\n1 2 2 3 3 2 2 2 2 3 1\\r\\n1 4\\r\\n2 7 11\\r\\n0\\r\\n0\\r\\n1 2\\r\\n1 11\\r\\n0\\r\\n1 2\\r\\n3 7 11 2\\r\\n3 3 2 9\\r\\n0\\r\\n', 'output': ['14']}, {'input': '12\\r\\n1 3 2 2 1 3 2 1 3 2 2 2\\r\\n2 3 4\\r\\n3 12 11 10\\r\\n1 8\\r\\n2 8 7\\r\\n2 9 10\\r\\n1 3\\r\\n0\\r\\n0\\r\\n1 4\\r\\n4 3 1 12 9\\r\\n3 8 3 4\\r\\n1 4\\r\\n', 'output': ['18']}, {'input': '13\\r\\n3 3 2 2 1 3 1 1 1 1 2 1 2\\r\\n5 6 3 11 13 12\\r\\n1 6\\r\\n2 10 6\\r\\n3 6 3 11\\r\\n1 6\\r\\n1 10\\r\\n3 6 2 3\\r\\n4 6 3 9 11\\r\\n3 6 2 3\\r\\n0\\r\\n3 6 2 3\\r\\n4 6 3 4 13\\r\\n2 6 3\\r\\n', 'output': ['21']}, {'input': '14\\r\\n3 2 2 1 2 1 1 3 1 2 2 3 1 1\\r\\n2 9 13\\r\\n3 9 13 8\\r\\n2 9 6\\r\\n3 9 6 13\\r\\n1 9\\r\\n1 9\\r\\n3 9 6 13\\r\\n2 9 13\\r\\n0\\r\\n4 9 3 13 4\\r\\n4 9 6 13 2\\r\\n2 9 13\\r\\n1 9\\r\\n8 9 5 6 3 13 7 4 11\\r\\n', 'output': ['20']}, {'input': '15\\r\\n1 2 3 2 3 2 2 2 3 3 3 2 3 1 3\\r\\n5 2 7 4 3 6\\r\\n0\\r\\n2 7 4\\r\\n2 2 15\\r\\n1 7\\r\\n1 7\\r\\n0\\r\\n2 4 6\\r\\n1 6\\r\\n2 15 3\\r\\n4 12 2 15 7\\r\\n0\\r\\n3 2 5 6\\r\\n3 2 4 6\\r\\n1 2\\r\\n', 'output': ['20']}, {'input': '16\\r\\n3 3 1 3 2 3 2 2 3 1 2 3 2 2 2 3\\r\\n1 14\\r\\n4 14 10 13 6\\r\\n3 14 15 6\\r\\n1 14\\r\\n4 14 10 9 7\\r\\n4 14 10 13 9\\r\\n4 14 10 13 6\\r\\n4 14 4 12 3\\r\\n2 14 4\\r\\n1 14\\r\\n1 14\\r\\n2 14 1\\r\\n4 14 10 4 1\\r\\n0\\r\\n2 14 10\\r\\n1 14\\r\\n', 'output': ['22']}, {'input': '17\\r\\n3 2 3 2 2 2 1 3 3 3 3 2 3 3 3 1 1\\r\\n0\\r\\n0\\r\\n2 8 10\\r\\n4 12 8 6 16\\r\\n0\\r\\n2 8 13\\r\\n3 2 8 10\\r\\n1 12\\r\\n4 8 17 3 16\\r\\n2 2 8\\r\\n0\\r\\n1 2\\r\\n2 8 10\\r\\n2 12 8\\r\\n2 8 10\\r\\n1 8\\r\\n2 12 8\\r\\n', 'output': ['21']}, {'input': '18\\r\\n2 1 1 3 2 1 3 2 3 3 2 2 1 1 3 1 1 3\\r\\n3 16 8 6\\r\\n3 16 6 1\\r\\n4 6 13 5 7\\r\\n2 6 2\\r\\n4 16 6 17 1\\r\\n2 16 8\\r\\n3 6 17 12\\r\\n1 16\\r\\n0\\r\\n3 6 15 1\\r\\n3 16 6 12\\r\\n7 16 9 8 6 13 17 14\\r\\n1 6\\r\\n1 6\\r\\n3 8 6 13\\r\\n0\\r\\n1 6\\r\\n3 9 6 13\\r\\n', 'output': ['26']}, {'input': '19\\r\\n2 1 2 3 3 3 2 1 1 1 1 3 3 1 1 1 2 2 3\\r\\n0\\r\\n2 1 7\\r\\n0\\r\\n4 3 2 17 13\\r\\n1 17\\r\\n1 3\\r\\n3 1 3 6\\r\\n4 1 17 9 13\\r\\n3 1 16 17\\r\\n0\\r\\n3 3 6 17\\r\\n1 6\\r\\n6 10 6 7 17 9 11\\r\\n3 10 17 13\\r\\n4 3 17 13 8\\r\\n1 3\\r\\n3 6 7 16\\r\\n0\\r\\n6 1 7 17 11 13 15\\r\\n', 'output': ['29']}, {'input': '20\\r\\n1 2 2 2 1 3 3 2 2 1 2 2 3 1 2 2 2 1 1 1\\r\\n2 10 8\\r\\n5 10 12 3 20 7\\r\\n0\\r\\n3 10 15 3\\r\\n0\\r\\n3 14 17 3\\r\\n2 12 20\\r\\n0\\r\\n3 17 10 12\\r\\n1 17\\r\\n1 5\\r\\n1 5\\r\\n0\\r\\n1 18\\r\\n3 18 5 12\\r\\n5 5 12 8 3 19\\r\\n0\\r\\n0\\r\\n1 12\\r\\n1 18\\r\\n', 'output': ['24']}, {'input': '11\\r\\n3 1 3 2 3 2 3 2 3 1 3\\r\\n6 2 3 9 5 7 10\\r\\n1 6\\r\\n2 6 2\\r\\n5 6 2 3 9 5\\r\\n2 3 9\\r\\n0\\r\\n5 3 9 5 8 4\\r\\n4 2 3 9 5\\r\\n2 2 3\\r\\n8 6 2 3 9 5 4 11 7\\r\\n4 2 3 9 5\\r\\n', 'output': ['21']}, {'input': '12\\r\\n2 3 3 1 1 3 2 2 3 1 3 3\\r\\n1 9\\r\\n1 1\\r\\n2 2 11\\r\\n5 1 2 11 5 8\\r\\n4 9 10 1 11\\r\\n5 9 10 12 11 5\\r\\n4 1 12 11 5\\r\\n5 10 1 2 12 11\\r\\n0\\r\\n1 9\\r\\n1 12\\r\\n0\\r\\n', 'output': ['19']}, {'input': '13\\r\\n3 2 2 1 3 3 2 3 2 2 1 2 3\\r\\n7 4 3 2 5 9 8 13\\r\\n1 4\\r\\n1 4\\r\\n0\\r\\n3 4 2 6\\r\\n2 4 2\\r\\n4 4 3 2 9\\r\\n5 4 2 6 9 7\\r\\n3 4 2 6\\r\\n6 4 3 2 5 9 7\\r\\n6 4 3 2 6 9 7\\r\\n8 4 2 6 5 9 8 11 10\\r\\n7 4 3 2 6 9 8 11\\r\\n', 'output': ['21']}, {'input': '14\\r\\n2 3 1 3 1 1 1 2 2 3 1 1 3 1\\r\\n4 14 9 8 5\\r\\n4 4 8 5 1\\r\\n9 4 14 9 8 1 2 13 7 12\\r\\n0\\r\\n2 14 8\\r\\n2 4 14\\r\\n7 9 6 10 8 1 2 13\\r\\n2 4 6\\r\\n1 14\\r\\n1 9\\r\\n8 4 6 10 8 5 1 2 3\\r\\n7 14 6 10 8 1 2 7\\r\\n5 10 8 5 1 2\\r\\n0\\r\\n', 'output': ['21']}, {'input': '15\\r\\n3 2 2 2 1 1 2 1 1 2 2 3 3 3 2\\r\\n1 13\\r\\n4 13 1 8 14\\r\\n10 5 13 1 8 14 4 2 11 15 10\\r\\n6 5 13 1 8 9 14\\r\\n0\\r\\n11 5 13 1 8 14 4 2 11 10 3 12\\r\\n11 13 1 8 14 4 2 11 15 10 3 6\\r\\n2 13 1\\r\\n4 5 13 1 8\\r\\n8 5 13 1 8 14 2 11 15\\r\\n6 5 13 1 8 14 2\\r\\n10 5 13 1 8 14 2 11 15 10 3\\r\\n0\\r\\n4 13 1 8 9\\r\\n8 5 13 1 8 9 14 2 11\\r\\n', 'output': ['23']}, {'input': '16\\r\\n3 1 2 3 3 2 3 1 3 2 2 1 2 2 1 2\\r\\n0\\r\\n0\\r\\n7 2 8 4 12 5 9 11\\r\\n1 1\\r\\n4 1 8 4 12\\r\\n5 2 4 12 5 11\\r\\n4 4 12 5 10\\r\\n0\\r\\n5 1 8 4 12 5\\r\\n6 1 4 12 5 9 11\\r\\n6 2 1 8 4 12 5\\r\\n2 4 13\\r\\n3 1 8 4\\r\\n8 1 4 13 12 5 10 3 6\\r\\n4 4 12 5 6\\r\\n8 8 4 13 12 5 9 6 14\\r\\n', 'output': ['26']}, {'input': '17\\r\\n2 3 1 3 3 3 1 1 1 2 2 2 3 2 3 3 2\\r\\n5 4 14 2 11 7\\r\\n3 13 4 14\\r\\n7 6 4 14 2 1 10 12\\r\\n2 6 13\\r\\n9 4 2 9 8 7 17 1 10 12\\r\\n0\\r\\n5 4 14 2 9 11\\r\\n4 13 4 2 11\\r\\n4 13 4 14 2\\r\\n7 13 4 2 11 8 7 1\\r\\n4 13 4 14 2\\r\\n8 6 4 2 8 7 17 1 10\\r\\n0\\r\\n1 4\\r\\n7 13 4 14 2 9 8 7\\r\\n6 4 2 17 1 10 12\\r\\n5 13 4 2 9 8\\r\\n', 'output': ['27']}, {'input': '18\\r\\n1 2 3 3 2 2 1 1 3 1 2 3 2 3 1 2 2 3\\r\\n5 9 3 14 12 2\\r\\n7 9 4 3 14 16 7 12\\r\\n1 9\\r\\n1 9\\r\\n6 9 14 12 1 6 15\\r\\n6 9 14 12 2 1 11\\r\\n2 9 14\\r\\n7 9 14 7 12 2 1 6\\r\\n0\\r\\n6 9 18 14 7 1 6\\r\\n4 9 14 7 1\\r\\n2 9 14\\r\\n6 9 3 14 7 1 6\\r\\n2 9 3\\r\\n9 9 3 14 16 12 2 1 6 17\\r\\n4 9 4 18 14\\r\\n8 9 18 14 12 1 11 6 13\\r\\n2 9 4\\r\\n', 'output': ['26']}, {'input': '19\\r\\n2 3 3 2 3 1 3 1 2 2 2 1 1 1 2 2 1 3 3\\r\\n0\\r\\n3 1 10 6\\r\\n8 1 6 2 17 18 12 15 7\\r\\n5 6 2 9 17 18\\r\\n6 6 2 17 18 12 16\\r\\n1 11\\r\\n9 1 11 6 2 17 18 4 12 15\\r\\n3 1 6 2\\r\\n4 1 6 2 8\\r\\n0\\r\\n1 1\\r\\n5 1 6 2 17 18\\r\\n12 1 10 6 2 8 17 18 4 12 15 7 3\\r\\n10 11 6 2 17 18 4 12 16 15 7\\r\\n8 1 6 2 8 17 18 12 16\\r\\n8 11 6 2 9 17 18 4 12\\r\\n3 11 6 2\\r\\n5 10 6 2 9 17\\r\\n10 1 6 2 17 18 12 5 15 7 3\\r\\n', 'output': ['30']}, {'input': '20\\r\\n2 2 3 2 3 1 1 3 1 1 1 1 1 3 2 1 3 1 1 1\\r\\n1 7\\r\\n13 7 1 11 4 6 16 20 12 5 18 19 15 10\\r\\n8 7 1 11 4 6 17 8 16\\r\\n3 7 1 11\\r\\n9 7 1 11 4 6 8 20 12 3\\r\\n4 7 1 11 4\\r\\n0\\r\\n6 7 1 11 4 6 17\\r\\n4 7 1 11 4\\r\\n7 7 1 11 4 6 17 5\\r\\n2 7 1\\r\\n9 7 1 11 4 6 17 8 14 20\\r\\n11 7 1 11 4 6 20 3 5 15 10 2\\r\\n5 7 1 11 4 6\\r\\n9 7 1 11 4 6 8 16 14 5\\r\\n5 7 1 11 4 6\\r\\n5 7 1 11 4 6\\r\\n11 7 1 11 4 9 6 17 8 20 3 5\\r\\n11 7 1 11 4 6 17 16 20 12 5 18\\r\\n6 7 1 11 4 6 14\\r\\n', 'output': ['35']}, {'input': '21\\r\\n1 2 1 3 3 3 1 1 2 2 3 1 3 1 3 3 1 1 1 2 2\\r\\n1 5\\r\\n0\\r\\n1 11\\r\\n0\\r\\n0\\r\\n0\\r\\n1 8\\r\\n0\\r\\n1 11\\r\\n1 1\\r\\n1 19\\r\\n0\\r\\n1 2\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 19\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['25']}, {'input': '22\\r\\n2 3 2 3 3 2 1 2 3 3 1 3 1 1 2 2 3 3 1 3 2 2\\r\\n0\\r\\n1 8\\r\\n1 22\\r\\n1 12\\r\\n0\\r\\n1 14\\r\\n0\\r\\n0\\r\\n0\\r\\n2 22 14\\r\\n1 12\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 16\\r\\n1 13\\r\\n0\\r\\n', 'output': ['25']}, {'input': '23\\r\\n3 1 3 3 2 2 2 1 3 2 3 1 1 1 1 2 3 1 2 1 3 1 1\\r\\n0\\r\\n1 11\\r\\n1 11\\r\\n2 11 16\\r\\n1 2\\r\\n3 11 1 12\\r\\n2 11 16\\r\\n2 12 2\\r\\n1 13\\r\\n2 12 2\\r\\n0\\r\\n0\\r\\n0\\r\\n2 13 11\\r\\n0\\r\\n1 11\\r\\n2 12 2\\r\\n3 16 6 21\\r\\n1 11\\r\\n0\\r\\n0\\r\\n2 11 12\\r\\n0\\r\\n', 'output': ['27']}, {'input': '24\\r\\n1 2 1 1 2 2 1 1 3 2 3 1 3 2 3 3 1 1 3 2 3 2 1 2\\r\\n1 16\\r\\n0\\r\\n0\\r\\n1 2\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 2\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n2 12 24\\r\\n0\\r\\n0\\r\\n1 11\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n', 'output': ['27']}, {'input': '25\\r\\n3 3 1 1 1 2 2 2 3 1 2 3 2 1 2 2 2 3 2 1 2 3 2 1 1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 12\\r\\n0\\r\\n1 19\\r\\n0\\r\\n2 12 21\\r\\n2 3 10\\r\\n0\\r\\n1 21\\r\\n0\\r\\n1 9\\r\\n1 3\\r\\n0\\r\\n0\\r\\n2 3 2\\r\\n0\\r\\n1 12\\r\\n0\\r\\n1 3\\r\\n2 21 9\\r\\n', 'output': ['29']}, {'input': '26\\r\\n1 2 2 1 1 2 1 1 2 1 3 1 3 1 2 3 3 3 2 1 2 1 3 3 2 2\\r\\n1 9\\r\\n1 1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 5\\r\\n0\\r\\n2 15 12\\r\\n1 8\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n2 3 26\\r\\n0\\r\\n0\\r\\n0\\r\\n1 22\\r\\n0\\r\\n1 8\\r\\n', 'output': ['30']}, {'input': '27\\r\\n2 1 1 3 2 1 1 2 3 1 1 2 2 2 1 2 1 1 3 3 3 1 1 1 3 1 1\\r\\n0\\r\\n0\\r\\n0\\r\\n1 12\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 26\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 27\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 5\\r\\n0\\r\\n2 20 27\\r\\n1 18\\r\\n0\\r\\n', 'output': ['30']}, {'input': '28\\r\\n2 1 1 3 2 3 2 2 1 3 2 3 3 2 3 1 2 2 3 3 3 3 1 3 2 1 3 3\\r\\n0\\r\\n1 7\\r\\n0\\r\\n2 28 18\\r\\n1 28\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n2 10 18\\r\\n3 8 10 18\\r\\n0\\r\\n2 1 20\\r\\n0\\r\\n1 18\\r\\n1 27\\r\\n2 27 18\\r\\n0\\r\\n0\\r\\n1 28\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 28\\r\\n1 9\\r\\n', 'output': ['33']}, {'input': '29\\r\\n3 3 3 3 3 1 1 1 3 2 2 1 1 3 1 1 1 2 1 2 3 1 1 2 1 3 1 2 3\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 1\\r\\n0\\r\\n0\\r\\n2 28 15\\r\\n0\\r\\n0\\r\\n0\\r\\n2 24 23\\r\\n1 28\\r\\n0\\r\\n1 28\\r\\n1 20\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1 28\\r\\n0\\r\\n0\\r\\n2 23 16\\r\\n0\\r\\n0\\r\\n1 7\\r\\n1 28\\r\\n', 'output': ['32']}, {'input': '30\\r\\n1 3 3 3 2 3 1 3 3 3 3 2 3 1 3 2 1 1 1 1 2 3 2 1 1 3 3 2 2 2\\r\\n0\\r\\n1 20\\r\\n0\\r\\n1 7\\r\\n2 6 9\\r\\n1 20\\r\\n1 20\\r\\n3 7 6 9\\r\\n2 10 6\\r\\n0\\r\\n0\\r\\n2 6 9\\r\\n0\\r\\n0\\r\\n1 20\\r\\n2 6 9\\r\\n2 6 9\\r\\n0\\r\\n2 6 9\\r\\n0\\r\\n2 6 9\\r\\n3 27 6 9\\r\\n2 6 9\\r\\n2 6 9\\r\\n0\\r\\n0\\r\\n0\\r\\n2 6 9\\r\\n3 6 9 19\\r\\n3 27 6 9\\r\\n', 'output': ['34']}, {'input': '200\\r\\n3 3 3 1 3 1 3 1 1 1 3 2 1 1 3 1 3 3 2 2 2 2 3 3 1 3 2 3 1 2 3 3 2 2 1 2 3 3 1 3 1 3 3 3 1 2 1 3 3 1 2 1 2 3 2 2 3 2 2 3 2 3 1 1 1 2 2 2 1 3 1 2 1 3 2 3 2 1 2 2 1 1 2 2 1 3 3 2 2 1 3 2 3 2 3 1 2 2 2 3 3 2 2 3 2 3 3 3 3 3 2 2 3 3 2 3 2 1 2 3 2 3 2 1 2 3 3 1 2 3 2 2 3 3 3 1 2 3 3 2 3 3 3 3 3 1 2 1 3 3 1 1 2 1 2 3 1 3 2 3 1 1 2 3 3 2 2 1 3 3 1 3 1 2 1 2 3 1 1 3 2 1 1 1 2 1 1 2 2 2 3 1 2 1 1 1 1 2 1 2\\r\\n19 52 113 18 109 125 8 150 180 173 174 116 130 79 122 112 19 80 110 121\\r\\n2 52 124\\r\\n13 52 129 148 125 150 ...', 'output': ['224']}, {'input': '200\\r\\n1 2 3 2 1 1 3 3 3 3 2 1 1 2 3 3 1 3 2 3 1 3 3 1 2 3 3 2 2 1 3 3 3 3 1 1 2 2 2 2 2 1 1 2 3 2 3 3 3 2 2 1 2 3 2 1 1 1 1 1 3 2 2 2 2 1 3 1 2 2 3 1 1 2 1 1 1 1 2 2 2 1 3 2 1 1 2 2 2 1 1 3 1 3 3 1 3 3 2 3 2 2 3 1 3 3 1 3 3 3 3 2 1 3 1 3 2 2 1 3 2 2 3 1 2 1 2 3 1 3 1 2 1 2 2 3 2 3 2 2 3 2 2 2 3 1 3 3 1 1 2 3 1 2 3 2 2 2 1 3 2 1 1 3 2 1 3 2 1 1 3 2 3 3 2 1 2 3 2 1 3 2 2 3 1 3 3 3 2 1 3 2 3 2 3 3 2 1 1 1\\r\\n16 96 58 20 140 86 51 130 57 66 64 112 177 54 123 62 155\\r\\n0\\r\\n0\\r\\n9 3 125 15 94 46 124 51 130 121\\r\\n4 56 124...', 'output': ['220']}, {'input': '200\\r\\n1 3 2 3 2 3 3 3 2 2 3 2 3 1 1 3 3 2 2 2 1 1 3 3 3 1 1 1 1 2 2 3 1 3 2 3 3 2 1 2 3 2 2 1 2 1 3 3 3 1 3 3 3 2 2 1 3 3 1 1 2 1 2 2 3 3 3 2 1 2 2 2 2 3 2 1 3 1 3 2 2 2 1 3 2 2 3 3 1 3 3 1 3 1 1 2 3 1 1 2 3 1 3 2 1 1 2 2 2 1 1 3 3 1 1 3 1 1 2 1 3 2 1 2 2 3 2 2 3 3 3 1 2 3 3 1 2 3 2 3 2 1 1 2 2 1 3 1 3 3 3 3 3 2 3 3 1 1 1 1 3 1 2 3 1 2 3 3 3 1 3 2 3 3 3 3 3 3 3 1 2 1 3 1 3 1 1 1 1 3 3 2 2 3 1 3 2 3 2 2\\r\\n0\\r\\n0\\r\\n3 193 176 85\\r\\n0\\r\\n1 193\\r\\n3 83 167 85\\r\\n0\\r\\n1 193\\r\\n5 161 193 85 16 44\\r\\n5 83 38 158 85 141\\r\\n7 120 4 158 ...', 'output': ['219']}, {'input': '200\\r\\n1 3 3 1 1 2 1 3 2 2 3 2 2 1 3 1 1 3 3 2 3 3 2 3 2 3 1 2 3 3 2 2 3 3 1 3 3 1 1 1 2 1 1 1 2 2 2 3 2 3 2 1 1 3 2 3 2 1 1 3 3 1 3 1 3 3 3 3 1 2 3 2 1 1 1 2 1 3 2 3 2 1 3 3 2 2 3 3 1 2 1 3 1 2 2 1 1 3 3 3 3 2 1 1 2 1 3 1 3 3 1 2 1 2 1 2 2 1 3 1 2 3 2 3 2 1 1 1 3 3 1 3 2 2 1 1 3 1 3 2 1 3 3 1 1 3 2 2 3 1 2 3 3 1 1 2 1 2 3 1 2 2 3 1 1 1 1 2 2 3 1 1 3 2 3 3 3 3 2 2 3 3 2 3 2 3 1 2 3 1 1 2 3 2 1 1 3 2 3 1\\r\\n3 4 164 15\\r\\n8 15 35 25 18 32 168 10 118\\r\\n3 50 15 35\\r\\n0\\r\\n0\\r\\n2 4 15\\r\\n0\\r\\n5 50 15 44 84 120\\r\\n5 15 111 91 66 1...', 'output': ['222']}, {'input': '200\\r\\n3 1 2 3 2 1 3 2 2 1 3 1 1 1 3 1 3 3 1 1 3 1 2 2 2 1 3 3 2 1 3 2 3 3 3 2 2 1 3 1 2 1 3 2 2 2 2 1 1 2 2 3 1 2 1 3 2 3 2 1 2 1 2 3 3 2 2 2 2 1 2 2 1 2 3 1 1 1 3 3 1 3 2 3 1 2 2 1 2 2 3 3 1 1 1 2 1 1 3 1 3 2 2 1 3 1 2 3 1 3 2 3 3 3 1 3 1 2 3 3 2 2 2 2 2 3 2 3 3 3 3 2 3 2 3 2 1 3 2 1 3 2 1 1 3 1 3 1 2 2 2 2 1 1 1 1 3 2 1 3 3 1 1 2 1 3 3 1 1 3 1 3 2 2 2 3 2 3 2 3 1 2 3 2 3 3 2 3 3 1 1 2 2 2 3 1 2 2 2 2\\r\\n0\\r\\n0\\r\\n11 153 175 47 143 18 78 79 113 170 35 49\\r\\n8 45 153 67 74 161 162 122 170\\r\\n4 153 137 67 72\\r\\n2 153 10...', 'output': ['223']}, {'input': '200\\r\\n3 2 2 1 3 2 2 3 1 1 2 3 3 1 2 2 3 3 1 1 3 3 3 1 1 3 2 3 2 3 3 2 2 1 3 2 1 2 3 1 1 3 3 2 3 1 1 2 3 2 1 3 2 2 3 3 1 1 1 3 2 1 3 1 2 1 2 1 2 3 1 3 2 2 1 1 1 1 3 2 1 1 1 1 3 1 3 1 3 3 1 2 2 2 1 2 3 1 2 3 1 1 2 3 3 3 1 3 2 2 2 2 2 2 3 1 1 3 1 3 1 1 3 3 1 2 1 3 3 2 1 2 2 1 1 2 3 1 3 3 3 2 2 1 1 1 3 3 1 2 3 1 1 3 2 3 2 1 3 3 2 1 3 1 1 1 2 1 1 2 3 2 3 2 3 1 3 1 3 1 3 3 1 2 2 3 3 3 2 1 3 1 1 2 2 2 3 3 1 1\\r\\n0\\r\\n3 96 43 53\\r\\n3 43 156 199\\r\\n1 43\\r\\n3 1 43 33\\r\\n6 43 50 191 21 57 168\\r\\n10 43 194 185 192 83 101 152 80 191 ...', 'output': ['222']}, {'input': '200\\r\\n1 2 3 3 1 2 1 1 2 1 1 1 1 2 3 3 3 1 2 2 2 2 3 2 1 2 2 3 3 1 1 3 1 1 1 3 1 3 3 2 2 3 3 3 2 3 1 1 1 1 2 3 2 3 3 3 1 1 3 3 1 2 3 1 3 1 3 2 3 2 1 3 1 1 1 2 1 3 2 2 2 3 2 2 2 2 1 3 3 3 3 1 3 1 2 1 2 1 2 1 2 3 2 3 1 3 1 2 1 1 2 3 3 1 2 1 1 1 1 2 3 1 1 1 2 3 2 1 1 2 3 3 2 3 3 3 1 3 1 2 3 2 3 2 1 2 3 2 2 2 3 1 2 3 2 1 2 3 1 1 1 3 1 2 3 2 3 1 3 2 1 2 3 1 1 1 1 2 2 2 1 2 1 2 3 3 2 1 3 3 2 2 3 1 1 2 1 3 1 2\\r\\n11 164 21 199 71 131 112 110 4 146 192 179\\r\\n4 71 127 60 14\\r\\n14 193 144 133 70 97 71 53 110 145 113 57 166...', 'output': ['219']}, {'input': '200\\r\\n3 1 3 3 2 1 2 1 1 3 3 3 2 3 2 3 3 2 1 1 2 3 2 2 1 1 2 2 2 3 3 2 2 3 2 1 2 3 1 1 3 1 1 2 2 2 3 3 2 2 3 2 3 1 2 2 2 1 3 1 3 3 3 2 3 2 2 1 2 1 1 3 2 2 3 3 2 3 2 1 2 3 3 3 3 1 2 1 1 3 1 3 1 2 2 1 3 1 1 2 2 3 1 3 1 2 3 3 2 1 2 1 2 1 2 3 2 1 1 2 1 3 1 3 1 3 2 1 2 1 3 3 1 1 1 2 1 2 3 3 1 2 2 1 1 3 1 1 1 3 2 3 1 2 2 3 1 2 1 1 1 1 1 3 3 3 1 1 2 2 3 3 2 2 2 1 3 1 1 3 2 1 1 3 3 3 2 2 1 1 1 1 2 3 3 3 2 2 1 3\\r\\n7 132 13 75 196 148 170 110\\r\\n10 132 16 77 192 46 146 55 75 99 98\\r\\n1 132\\r\\n1 132\\r\\n5 132 103 73 119 13\\r\\n6 13...', 'output': ['221']}, {'input': '200\\r\\n2 1 1 3 2 1 3 2 1 2 2 2 3 1 3 1 3 3 2 2 2 3 1 2 1 2 1 2 1 3 1 3 2 2 2 2 2 2 3 2 3 2 3 2 2 3 2 3 2 3 2 3 3 1 1 3 2 3 3 1 3 2 1 1 1 3 1 2 2 2 2 1 2 3 2 1 1 3 1 1 3 2 1 3 2 2 1 2 1 2 1 3 2 2 2 1 2 1 2 3 3 3 1 1 2 2 3 3 3 3 1 3 1 2 1 3 1 2 2 2 2 1 2 1 2 1 2 1 2 1 1 3 1 2 3 1 2 1 3 1 3 1 2 1 3 3 1 2 1 1 3 3 3 3 3 2 3 2 2 2 2 1 3 3 3 3 3 2 1 1 3 3 3 3 2 1 2 2 2 2 2 1 2 1 2 1 2 1 3 3 2 2 3 1 1 2 2 3 2 2\\r\\n6 84 74 147 109 151 78\\r\\n13 157 14 38 43 55 12 96 111 138 30 76 146 108\\r\\n7 7 12 60 139 159 199 2\\r\\n6 7 14 5...', 'output': ['216']}, {'input': '200\\r\\n1 2 1 3 2 1 1 3 3 3 1 3 1 2 1 1 3 2 2 3 2 3 1 2 2 3 2 3 2 3 2 1 3 1 3 3 3 3 2 3 2 2 3 3 2 3 2 2 1 3 2 2 2 1 2 1 2 3 3 1 3 1 2 1 1 2 2 1 1 2 3 3 2 2 1 3 1 2 2 2 1 2 2 3 3 2 1 1 1 1 2 1 3 1 3 2 1 3 3 2 1 2 3 1 3 2 2 2 3 3 2 1 3 3 2 2 3 1 3 1 2 2 3 1 3 2 1 3 3 2 2 2 1 1 3 1 2 3 2 1 2 3 2 2 3 2 1 3 2 2 3 2 3 2 3 2 2 2 2 2 1 3 1 3 3 3 1 3 1 3 1 2 2 3 2 3 1 3 1 3 3 3 1 1 2 2 1 1 2 1 1 3 1 1 2 3 2 2 2 2\\r\\n11 120 34 23 75 191 50 115 196 15 134 160\\r\\n8 105 34 167 25 191 50 43 15\\r\\n1 55\\r\\n1 42\\r\\n8 159 31 122 25 191 ...', 'output': ['219']}, {'input': '200\\r\\n3 3 2 3 2 3 1 3 2 2 1 3 2 2 1 3 1 3 3 3 2 2 2 2 1 1 3 1 1 2 1 3 1 3 2 1 1 2 3 3 2 3 1 1 3 2 2 2 3 2 1 3 3 2 3 2 2 2 3 3 2 3 2 3 1 2 2 3 3 2 3 3 1 3 1 3 1 1 1 3 1 1 2 3 2 1 1 1 2 2 2 2 3 2 1 2 3 1 3 3 1 2 2 1 2 1 1 3 3 3 1 1 2 3 1 2 3 2 2 1 2 2 3 1 3 3 1 1 2 2 1 1 2 2 3 3 2 3 2 2 3 3 2 3 3 1 2 1 3 1 2 1 1 3 2 3 2 2 2 2 2 3 1 1 2 1 1 3 2 2 1 3 3 1 2 3 2 1 2 3 3 1 1 1 2 2 1 2 1 2 2 2 3 1 3 3 3 2 3 3\\r\\n5 188 126 156 182 91\\r\\n3 102 139 93\\r\\n4 139 56 152 126\\r\\n0\\r\\n5 35 127 37 93 174\\r\\n4 55 21 154 91\\r\\n4 10 93 126 ...', 'output': ['213']}, {'input': '200\\r\\n3 2 2 2 2 3 1 1 1 2 2 2 3 2 3 3 3 1 3 2 3 1 2 2 1 1 1 3 1 3 1 1 1 1 2 3 3 1 3 1 2 2 1 2 3 2 1 2 2 1 1 2 1 2 3 1 3 1 1 2 1 3 2 3 1 2 2 3 1 3 2 2 2 1 1 2 1 1 2 2 1 2 2 2 2 2 3 1 3 2 2 1 3 2 2 2 3 1 3 1 3 1 1 1 2 1 1 3 3 1 3 2 3 3 1 3 3 2 1 1 3 1 1 2 3 3 3 2 1 3 3 1 2 3 3 2 2 3 2 3 1 1 3 1 3 2 2 2 2 3 1 1 2 1 1 2 1 2 3 2 3 3 1 2 3 2 2 2 2 3 1 2 3 3 2 3 3 2 3 1 3 3 2 1 1 1 2 2 2 3 3 1 2 2 1 2 3 2 2 1\\r\\n1 125\\r\\n0\\r\\n2 125 34\\r\\n1 116\\r\\n3 76 100 59\\r\\n0\\r\\n5 176 175 126 80 142\\r\\n3 19 172 116\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n4 125 116 200 ...', 'output': ['210']}, {'input': '200\\r\\n2 1 2 3 2 2 1 2 2 2 1 3 2 2 2 2 1 1 3 2 2 2 3 3 3 1 2 3 2 1 2 2 1 3 3 2 1 3 3 1 1 2 2 2 3 1 2 3 1 1 3 3 1 1 1 1 2 2 1 2 2 2 3 2 2 1 2 3 3 2 2 3 3 3 2 1 1 2 1 1 1 2 3 3 2 3 1 2 3 1 3 1 1 1 3 1 1 1 1 3 2 3 3 2 2 1 1 2 2 1 1 1 2 3 1 3 3 2 2 1 1 3 1 1 2 2 2 1 3 3 3 2 2 2 2 3 1 3 2 3 1 3 3 2 2 1 1 2 1 1 3 2 1 1 2 3 2 2 2 3 1 2 3 2 1 1 2 2 2 3 1 3 2 1 1 1 3 2 1 1 1 1 2 2 2 3 1 2 3 3 2 1 1 1 3 3 2 2 2 1\\r\\n4 15 85 52 111\\r\\n0\\r\\n0\\r\\n2 190 140\\r\\n4 74 52 124 64\\r\\n4 29 181 52 167\\r\\n2 52 184\\r\\n1 31\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n2 21 184\\r\\n0...', 'output': ['210']}, {'input': '200\\r\\n3 1 1 1 3 3 3 1 3 3 1 3 1 2 3 3 3 2 1 2 2 3 3 1 1 3 2 1 3 2 1 2 3 2 2 1 1 2 2 1 1 3 2 2 1 2 2 1 2 2 1 3 1 2 3 1 3 3 1 3 1 3 2 3 2 2 1 2 3 2 1 3 2 3 1 1 1 1 1 1 2 2 3 2 3 3 3 1 3 1 2 3 1 1 3 2 3 2 1 1 3 2 2 2 3 2 1 3 2 1 3 2 3 2 2 1 2 1 2 1 3 2 1 2 1 3 2 2 1 3 3 3 2 2 2 1 2 3 1 1 1 2 1 2 1 2 3 1 1 3 3 2 2 1 1 3 3 1 1 1 1 2 3 1 3 3 3 2 1 3 3 1 3 3 1 2 1 2 1 1 2 3 2 2 1 1 1 1 3 3 3 3 3 3 3 1 3 3 3 2\\r\\n5 200 120 25 2 163\\r\\n5 200 120 21 25 90\\r\\n6 200 120 25 189 2 76\\r\\n3 200 120 25\\r\\n5 200 120 115 25 28\\r\\n4 200 1...', 'output': ['212']}, {'input': '200\\r\\n1 1 3 3 2 2 2 2 2 3 2 3 1 1 1 2 2 2 3 3 1 1 2 1 3 1 3 2 2 2 3 1 3 2 3 2 2 3 1 1 3 3 2 3 3 3 2 2 1 2 3 3 2 2 1 3 2 1 2 3 1 3 2 1 1 1 2 1 3 1 1 3 2 3 1 2 3 3 2 1 2 1 2 3 3 3 1 1 3 3 2 3 3 1 2 2 3 1 3 3 2 1 3 3 2 2 3 2 2 3 1 2 2 3 2 3 2 3 1 3 1 1 3 2 2 2 3 2 2 3 2 3 1 2 3 1 1 2 3 2 1 2 2 3 1 1 3 1 1 1 1 2 2 1 1 3 1 2 3 3 1 2 3 1 2 2 3 2 2 1 1 2 2 1 2 1 3 1 1 1 2 3 2 2 2 2 3 2 2 2 3 1 3 3 1 1 1 3 2 2\\r\\n3 159 22 96\\r\\n2 100 148\\r\\n3 180 22 123\\r\\n3 44 80 22\\r\\n4 102 111 180 22\\r\\n1 39\\r\\n9 112 180 186 185 42 159 22 36 ...', 'output': ['208']}, {'input': '200\\r\\n2 2 2 3 2 1 1 2 3 1 3 2 1 1 1 2 2 2 3 1 3 3 2 1 1 2 1 3 1 3 3 1 1 3 2 1 3 2 2 3 1 2 3 2 2 2 3 3 1 1 3 3 1 2 3 2 3 2 1 1 2 3 3 2 3 3 2 1 3 2 2 3 1 2 2 2 2 2 3 2 3 3 2 3 3 3 3 1 2 2 2 1 3 2 1 1 2 1 3 1 1 3 3 1 1 2 1 2 2 3 1 1 2 1 1 1 2 3 2 2 1 1 1 1 3 2 1 1 2 3 2 2 3 2 2 2 1 3 3 3 3 2 1 1 1 3 2 3 1 3 2 2 2 1 3 2 1 2 1 2 1 2 1 1 1 1 3 1 2 2 1 2 3 2 3 3 2 3 1 3 3 3 2 2 2 1 2 1 1 1 2 2 3 1 2 2 3 3 2 2\\r\\n2 105 58\\r\\n5 3 105 174 47 138\\r\\n0\\r\\n1 3\\r\\n0\\r\\n1 105\\r\\n3 3 105 8\\r\\n2 162 105\\r\\n3 105 174 44\\r\\n4 3 98 105 174\\r\\n1 56\\r...', 'output': ['213']}, {'input': '200\\r\\n3 3 1 3 2 3 2 3 1 3 3 1 1 2 3 1 2 2 2 3 2 2 2 2 1 3 3 2 2 2 3 3 3 3 1 1 3 1 3 1 2 1 2 3 2 2 3 3 3 3 1 3 1 3 1 3 3 3 2 2 1 1 2 1 2 2 2 2 1 2 1 1 2 3 2 3 2 2 2 3 3 3 3 3 2 2 1 1 1 2 1 1 2 3 2 3 1 3 1 1 1 3 3 2 3 2 1 3 1 3 1 2 2 2 2 1 1 2 2 3 2 1 2 2 3 3 1 1 3 3 3 3 1 1 1 3 1 3 2 1 1 3 2 1 1 2 3 3 3 3 2 2 1 2 3 2 2 2 1 3 2 1 2 1 3 2 3 3 1 3 3 3 2 1 3 3 2 2 1 2 2 1 1 3 2 1 3 3 2 1 1 2 3 1 2 2 2 2 3 1\\r\\n0\\r\\n3 7 146 123\\r\\n1 71\\r\\n4 62 140 24 93\\r\\n0\\r\\n7 41 186 144 104 10 32 189\\r\\n1 71\\r\\n1 71\\r\\n0\\r\\n6 71 62 24 72 123 104...', 'output': ['215']}, {'input': '200\\r\\n1 2 3 1 1 1 2 2 2 2 1 2 1 2 3 2 2 3 2 1 2 1 1 2 2 1 2 2 3 1 2 3 3 3 1 1 1 2 1 1 1 1 1 1 1 2 3 2 1 1 3 2 1 2 1 1 3 3 1 3 2 3 2 1 3 3 3 3 1 1 3 3 3 1 2 1 1 1 1 1 1 1 1 2 1 3 3 1 2 1 2 1 2 2 1 2 1 2 3 3 2 2 2 1 1 2 2 3 3 1 1 1 2 2 3 1 3 2 1 3 1 2 1 1 2 1 2 3 1 1 1 2 2 2 3 3 2 3 3 3 3 1 1 2 3 3 3 1 1 1 1 1 3 2 1 3 2 2 2 3 3 2 3 2 2 1 2 2 3 1 2 2 1 1 1 3 3 1 3 1 1 2 1 3 1 2 3 1 1 2 2 2 3 1 2 2 2 1 2 3\\r\\n2 49 38\\r\\n3 200 49 38\\r\\n5 159 38 94 182 192\\r\\n4 49 38 94 148\\r\\n2 200 159\\r\\n7 9 38 111 89 94 92 125\\r\\n8 38 68 17...', 'output': ['213']}, {'input': '200\\r\\n2 3 1 2 1 3 2 1 1 2 1 2 3 3 1 2 1 3 3 2 1 1 3 1 2 3 3 3 1 1 3 1 1 1 2 3 3 3 1 2 3 2 2 1 2 3 3 1 1 2 1 3 3 1 2 3 3 2 2 1 2 1 2 1 3 2 2 3 2 2 1 1 3 3 2 2 1 1 3 1 1 1 3 1 3 1 1 3 1 3 2 3 1 3 1 1 3 2 3 2 2 1 3 3 2 2 2 2 3 3 1 1 1 1 2 1 1 1 3 1 3 2 1 2 1 3 3 2 2 2 1 2 2 2 1 3 2 1 3 2 1 2 2 2 2 1 1 3 2 1 1 2 1 1 1 1 1 3 1 2 2 2 3 2 3 2 3 3 2 3 2 3 2 1 3 3 3 3 3 2 1 3 1 3 1 3 1 1 3 2 1 3 1 3 1 2 1 3 3 1\\r\\n5 38 67 92 180 132\\r\\n4 119 69 116 67\\r\\n0\\r\\n1 135\\r\\n9 193 67 122 7 15 45 2 180 129\\r\\n2 143 195\\r\\n3 176 38 175\\r\\n0...', 'output': ['212']}, {'input': '200\\r\\n2 3 3 1 1 1 3 3 3 3 1 1 1 1 2 2 2 2 2 1 3 1 2 3 1 1 1 3 2 2 1 2 2 3 3 2 3 2 2 2 3 2 3 3 2 2 1 2 3 3 1 1 1 2 2 3 1 2 1 3 3 2 1 3 3 3 2 2 1 2 3 2 2 1 2 1 2 2 1 3 3 2 2 3 3 2 3 1 3 3 1 2 1 1 1 3 1 2 1 2 3 1 3 2 2 1 2 3 1 2 3 3 1 2 1 1 2 2 2 1 3 2 3 3 2 1 2 3 3 3 1 2 3 1 1 1 2 1 3 3 2 3 1 1 2 2 1 3 3 3 3 2 3 2 2 1 1 2 3 1 3 1 3 3 3 3 1 3 2 3 2 2 3 2 3 1 2 2 2 3 2 2 1 1 1 3 1 3 1 2 1 3 1 1 3 2 2 2 3 1\\r\\n2 14 181\\r\\n3 83 181 61\\r\\n3 59 181 60\\r\\n4 181 164 72 138\\r\\n2 109 181\\r\\n3 176 181 79\\r\\n5 118 109 181 135 142\\r\\n2 1...', 'output': ['215']}, {'input': '200\\r\\n3 3 2 2 3 2 1 1 1 1 3 3 1 2 2 2 1 1 3 1 3 3 1 2 3 1 3 2 3 2 2 3 2 2 2 3 1 2 2 1 1 3 3 1 3 3 2 1 3 2 1 1 3 3 2 1 3 1 1 2 3 2 1 2 3 1 2 2 3 1 2 1 1 3 1 3 2 3 1 3 1 3 2 2 2 1 2 1 2 2 2 2 3 1 2 1 1 2 3 3 1 2 1 2 1 2 2 3 2 2 3 2 1 3 2 1 1 1 3 3 3 2 2 3 2 2 3 3 2 1 1 2 1 1 3 3 2 2 3 1 1 2 2 2 3 1 3 2 3 2 2 1 2 1 3 2 2 3 1 2 1 2 2 1 3 3 2 2 3 2 3 2 3 2 1 1 1 3 2 2 1 3 2 2 1 1 2 3 1 1 1 1 2 2 1 2 3 3 1 3\\r\\n110 6 89 9 11 54 82 39 183 22 93 96 109 24 42 45 104 75 190 147 90 68 188 133 62 117 139 154 91 177 44 92...', 'output': ['346']}, {'input': '200\\r\\n1 1 1 3 2 3 1 2 2 2 1 1 1 3 2 2 3 1 1 2 1 2 1 2 2 3 2 2 2 2 1 3 1 1 1 3 2 2 3 2 3 3 1 2 1 1 2 3 1 1 2 3 2 3 1 1 2 1 2 1 2 3 2 3 1 1 2 1 1 3 2 2 1 1 1 2 1 1 1 1 1 3 1 1 3 3 3 1 3 2 1 2 1 1 1 3 1 1 3 2 3 1 1 3 3 1 1 1 1 1 3 2 2 3 1 1 2 3 3 1 1 3 3 2 3 2 2 1 2 3 3 1 1 1 1 3 3 2 3 2 3 3 3 2 3 1 2 2 3 1 3 2 1 3 1 2 3 3 1 1 2 2 2 3 2 3 2 1 3 3 2 1 3 1 3 2 2 2 2 1 2 2 1 1 2 3 1 2 3 2 1 2 1 1 2 2 1 3 2 3\\r\\n23 109 172 111 25 46 157 144 72 156 94 110 22 60 98 118 171 189 86 42 117 186 8 161\\r\\n43 111 25 197 46 157...', 'output': ['338']}, {'input': '200\\r\\n3 2 3 1 2 1 2 3 3 1 3 2 3 1 1 3 3 2 2 2 1 2 2 3 1 1 1 2 3 3 2 3 3 2 3 2 2 1 3 3 2 1 3 3 2 2 1 1 1 2 3 1 3 3 2 3 1 3 3 3 3 3 3 2 2 1 2 3 3 1 2 1 1 1 3 1 1 3 1 1 2 2 2 2 3 3 3 1 1 2 3 2 1 3 2 2 1 2 3 1 2 3 3 3 3 3 2 1 1 3 3 2 3 1 3 3 3 1 2 1 2 2 1 1 3 2 1 1 1 3 3 3 3 2 2 1 3 2 1 2 3 2 1 1 1 1 3 2 3 1 2 1 1 3 2 2 3 1 3 1 2 3 1 1 3 2 2 1 3 2 2 3 1 1 2 2 2 1 1 2 3 1 1 1 2 2 2 2 2 2 1 3 3 2 1 3 2 3 3 1\\r\\n25 200 2 127 5 69 99 52 174 194 19 169 106 163 40 177 84 178 108 112 21 17 42 162 33 122\\r\\n1 200\\r\\n46 200 2...', 'output': ['335']}, {'input': '200\\r\\n2 2 3 3 3 1 3 3 1 3 2 3 2 3 2 3 1 1 1 3 3 3 2 2 3 3 2 1 3 1 1 3 3 3 3 3 1 2 3 2 3 2 1 1 1 3 3 2 2 3 2 1 2 3 1 2 2 2 3 3 3 2 3 2 3 3 3 1 2 2 1 2 3 3 3 1 1 3 3 1 2 1 1 3 3 1 2 3 1 3 3 2 2 3 2 3 1 1 2 1 1 3 1 3 2 2 2 3 1 2 1 1 2 3 2 2 1 1 3 1 1 3 1 2 1 1 3 1 2 3 1 2 3 2 3 1 1 3 1 1 2 1 1 2 3 3 1 3 1 1 3 1 3 2 3 1 2 2 1 2 1 2 3 3 3 1 2 3 2 1 3 3 3 1 1 3 2 3 2 3 1 2 2 3 1 3 1 2 2 1 2 3 1 3 2 1 3 3 3 2\\r\\n84 138 10 57 184 16 9 11 15 2 176 33 43 6 91 158 194 27 18 31 141 167 193 150 102 41 53 197 191 94 66 49 ...', 'output': ['339']}, {'input': '200\\r\\n2 2 3 1 3 2 2 3 3 1 2 3 1 1 2 1 3 3 2 3 3 3 3 3 3 2 2 1 3 1 1 1 2 3 3 1 1 3 1 2 3 3 3 1 2 1 3 3 2 1 3 2 1 3 2 2 3 3 1 3 3 1 2 2 2 2 3 3 1 1 2 3 3 1 1 3 1 1 2 3 2 2 3 3 1 2 1 3 3 1 1 3 2 2 2 1 2 1 1 3 2 1 2 3 3 3 3 1 1 3 1 1 1 2 3 1 2 2 3 1 1 2 3 3 1 3 3 3 2 1 1 2 2 3 3 1 3 3 1 1 1 3 2 1 2 2 2 3 3 1 1 1 3 2 3 3 2 3 3 2 3 2 1 1 3 2 1 3 3 1 2 2 2 3 1 1 2 3 2 2 3 2 1 2 2 1 1 2 2 1 3 2 3 2 1 2 1 2 2 3\\r\\n0\\r\\n43 1 121 139 184 5 124 152 43 197 25 149 186 23 94 80 188 91 187 68 49 176 153 169 36 110 26 38 3 195 ...', 'output': ['387']}, {'input': '200\\r\\n2 3 1 2 3 2 3 2 2 3 2 2 1 2 3 1 1 2 3 2 3 1 1 1 2 1 3 1 1 1 3 3 3 2 3 1 2 2 2 3 2 3 3 3 2 1 3 1 2 1 1 1 3 3 2 3 2 2 3 2 3 3 3 2 2 3 3 2 2 3 1 3 3 2 3 1 2 1 2 1 3 3 2 1 1 2 3 3 2 1 2 1 2 1 1 3 2 2 1 3 3 3 2 1 1 3 2 3 1 1 3 3 2 1 3 1 2 2 2 1 3 3 3 1 1 2 2 1 1 2 3 3 1 3 3 3 3 2 3 1 3 2 1 3 1 1 3 1 2 2 1 3 3 2 1 3 1 2 2 1 2 2 1 1 1 1 1 1 2 2 2 1 3 2 1 3 1 3 1 2 2 2 1 2 1 2 3 3 1 3 2 3 1 2 1 2 3 1 3 1\\r\\n48 98 53 140 115 193 33 91 105 9 19 143 72 194 84 88 90 17 30 52 71 36 118 23 21 180 51 27 81 178 95 43 9...', 'output': ['411']}, {'input': '200\\r\\n1 1 1 3 2 3 1 2 2 3 2 3 2 3 2 3 2 3 2 1 3 2 2 2 2 1 1 3 1 1 3 2 3 2 1 1 3 1 3 3 1 2 1 3 3 3 2 1 2 2 3 1 1 2 3 3 1 1 1 3 2 2 1 3 2 3 3 1 2 1 1 3 1 3 1 3 2 2 1 1 2 1 2 3 2 1 3 3 3 1 2 1 3 3 1 3 2 3 3 1 3 1 1 3 2 3 2 3 1 3 3 3 2 2 3 2 1 2 2 3 2 1 3 3 2 2 2 2 3 3 1 1 2 2 3 2 2 2 2 1 1 2 3 1 2 2 1 1 2 2 2 2 1 2 3 2 1 1 1 2 3 2 3 1 3 3 2 1 1 2 2 3 1 3 3 2 2 1 2 2 3 1 2 1 2 3 2 2 3 1 3 1 2 1 3 3 2 2 1 2\\r\\n85 58 117 3 98 12 35 75 167 155 18 169 88 22 145 132 49 29 71 184 161 9 142 153 189 67 118 112 26 92 139 ...', 'output': ['381']}, {'input': '200\\r\\n2 1 2 2 2 2 1 3 2 3 1 3 3 1 3 3 2 2 2 2 1 3 1 1 2 1 3 2 3 2 2 1 1 1 2 1 2 2 2 1 3 1 1 1 1 1 2 2 1 1 3 1 1 2 1 1 3 2 2 2 3 2 1 1 2 3 1 1 2 1 3 1 3 1 1 2 1 2 3 3 3 3 2 2 2 2 1 3 2 1 3 1 2 3 3 1 3 2 1 1 2 3 2 1 3 2 3 3 3 3 1 2 1 2 3 2 2 1 1 3 1 2 3 2 3 2 1 1 1 3 2 3 1 2 1 1 2 1 3 1 2 1 1 2 3 1 3 3 1 3 2 3 1 1 1 3 1 3 1 1 2 1 2 3 2 3 3 3 2 3 1 3 1 2 3 1 3 1 1 1 3 1 2 3 1 1 2 3 3 1 1 2 2 1 3 2 3 1 2 1\\r\\n131 141 103 74 113 45 96 142 55 196 126 6 77 139 102 15 194 34 105 158 145 187 134 27 162 100 57 8 183 29...', 'output': ['391']}, {'input': '200\\r\\n3 1 3 3 1 3 3 2 1 2 2 3 3 2 1 1 1 2 2 2 2 2 3 1 1 3 1 1 1 3 3 3 2 2 3 3 3 1 1 1 1 3 1 3 3 2 1 3 2 3 3 3 2 2 3 1 2 3 1 2 3 2 2 2 3 2 1 3 2 1 2 3 1 2 1 2 2 3 3 3 2 1 1 3 2 1 1 2 2 1 1 3 2 3 2 2 3 1 3 2 2 1 1 3 2 1 1 2 2 1 2 2 2 2 1 3 2 2 1 1 2 1 1 1 2 1 1 2 3 1 3 1 3 3 3 2 3 1 3 3 2 2 2 3 1 2 1 2 3 2 1 2 2 2 1 3 2 2 1 2 2 3 2 2 3 3 1 1 3 1 2 2 2 3 1 2 3 3 2 3 3 2 3 2 3 2 3 2 2 3 1 2 1 1 2 3 3 1 1 2\\r\\n28 123 137 3 177 73 48 126 94 112 66 186 197 78 26 181 180 187 117 142 29 189 31 191 24 125 45 200 140\\r\\n1...', 'output': ['390']}, {'input': '200\\r\\n1 1 1 2 3 1 3 2 1 1 1 1 1 3 2 3 1 2 2 1 2 2 2 1 1 2 2 2 2 3 3 3 3 3 2 3 1 3 1 1 3 3 2 1 2 2 3 2 1 2 1 3 3 3 2 2 1 2 1 1 1 2 2 1 3 3 3 1 1 2 1 2 1 3 2 1 2 2 2 3 3 1 2 2 2 1 2 3 2 3 1 2 1 3 2 3 1 2 1 3 3 2 1 3 1 2 2 2 1 2 1 2 3 3 3 3 1 3 1 2 1 1 1 2 2 1 2 3 3 1 1 2 3 3 3 2 3 1 1 3 1 1 3 3 3 1 1 3 1 2 3 3 2 3 3 3 2 1 1 1 1 2 3 2 3 3 2 1 3 1 2 3 2 1 1 3 3 2 1 3 3 1 1 1 2 3 1 3 1 3 3 2 3 3 1 1 1 3 3 1\\r\\n141 15 147 168 123 32 99 115 22 9 10 125 79 96 145 126 59 17 20 188 124 21 172 23 14 177 26 112 150 54 47...', 'output': ['383']}, {'input': '200\\r\\n3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 2 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 2 3 1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n...', 'output': ['202']}, {'input': '200\\r\\n3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 3\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n...', 'output': ['201']}, {'input': '200\\r\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2\\r\\n0\\r\\n1 1\\r\\n1 2\\r\\n1 2\\r\\n1 1\\r\\n1 5\\r\\n1 5\\r\\n1 6\\r\\n1 7\\r\\n1 8\\r\\n1 5\\r\\n1 8\\r\\n1 6\\r\\n1 12\\r\\n1 14\\r\\n1 2\\r\\n1 12\\r\\n1 4\\r\\n1 9\\r\\n1 2\\r\\n1 17...', 'output': ['214']}, {'input': '4\\r\\n1 1 2 3\\r\\n1 2\\r\\n1 3\\r\\n0\\r\\n1 1\\r\\n', 'output': ['8']}, {'input': '15\\r\\n3 2 2 2 1 1 2 1 1 2 2 3 3 3 2\\r\\n1 13\\r\\n4 13 1 8 14\\r\\n10 5 13 1 8 14 4 2 11 15 10\\r\\n6 5 13 1 8 9 14\\r\\n0\\r\\n11 5 13 1 8 14 4 2 11 10 3 12\\r\\n11 13 1 8 14 4 2 11 15 10 3 6\\r\\n2 13 1\\r\\n4 5 13 1 8\\r\\n8 5 13 1 8 14 2 11 15\\r\\n6 5 13 1 8 14 2\\r\\n10 5 13 1 8 14 2 11 15 10 3\\r\\n0...', 'output': ['23']}, {'input': '17\\r\\n2 3 1 3 3 3 1 1 1 2 2 2 3 2 3 3 2\\r\\n5 4 14 2 11 7\\r\\n3 13 4 14\\r\\n7 6 4 14 2 1 10 12\\r\\n2 6 13\\r\\n9 4 2 9 8 7 17 1 10 12\\r\\n0\\r\\n5 4 14 2 9 11\\r\\n4 13 4 2 11\\r\\n4 13 4 14 2\\r\\n7 13 4 2 11 8 7 1\\r\\n4 13 4 14 2\\r\\n8 6 4 2 8 7 17 1 10\\r\\n0\\r\\n1 4\\r\\n7 13 4 14 2 9 8 7\\r\\n6 4 2 17 1 10 ...', 'output': ['27']}, {'input': '18\\r\\n1 2 3 3 2 2 1 1 3 1 2 3 2 3 1 2 2 3\\r\\n5 9 3 14 12 2\\r\\n7 9 4 3 14 16 7 12\\r\\n1 9\\r\\n1 9\\r\\n6 9 14 12 1 6 15\\r\\n6 9 14 12 2 1 11\\r\\n2 9 14\\r\\n7 9 14 7 12 2 1 6\\r\\n0\\r\\n6 9 18 14 7 1 6\\r\\n4 9 14 7 1\\r\\n2 9 14\\r\\n6 9 3 14 7 1 6\\r\\n2 9 3\\r\\n9 9 3 14 16 12 2 1 6 17\\r\\n4 9 4 18 14\\r\\n8 9 1...', 'output': ['26']}, {'input': '19\\r\\n2 3 3 2 3 1 3 1 2 2 2 1 1 1 2 2 1 3 3\\r\\n0\\r\\n3 1 10 6\\r\\n8 1 6 2 17 18 12 15 7\\r\\n5 6 2 9 17 18\\r\\n6 6 2 17 18 12 16\\r\\n1 11\\r\\n9 1 11 6 2 17 18 4 12 15\\r\\n3 1 6 2\\r\\n4 1 6 2 8\\r\\n0\\r\\n1 1\\r\\n5 1 6 2 17 18\\r\\n12 1 10 6 2 8 17 18 4 12 15 7 3\\r\\n10 11 6 2 17 18 4 12 16 15 7\\r\\n8 1 ...', 'output': ['30']}, {'input': '20\\r\\n2 2 3 2 3 1 1 3 1 1 1 1 1 3 2 1 3 1 1 1\\r\\n1 7\\r\\n13 7 1 11 4 6 16 20 12 5 18 19 15 10\\r\\n8 7 1 11 4 6 17 8 16\\r\\n3 7 1 11\\r\\n9 7 1 11 4 6 8 20 12 3\\r\\n4 7 1 11 4\\r\\n0\\r\\n6 7 1 11 4 6 17\\r\\n4 7 1 11 4\\r\\n7 7 1 11 4 6 17 5\\r\\n2 7 1\\r\\n9 7 1 11 4 6 17 8 14 20\\r\\n11 7 1 11 4 6 20...', 'output': ['35']}, {'input': '200\\r\\n3 3 3 1 3 1 3 1 1 1 3 2 1 1 3 1 3 3 2 2 2 2 3 3 1 3 2 3 1 2 3 3 2 2 1 2 3 3 1 3 1 3 3 3 1 2 1 3 3 1 2 1 2 3 2 2 3 2 2 3 2 3 1 1 1 2 2 2 1 3 1 2 1 3 2 3 2 1 2 2 1 1 2 2 1 3 3 2 2 1 3 2 3 2 3 1 2 2 2 3 3 2 2 3 2 3 3 3 3 3 2 2 3 3 2 3 2 1 2 3 2 3 2 1 2 ...', 'output': ['224']}, {'input': '200\\r\\n1 2 3 2 1 1 3 3 3 3 2 1 1 2 3 3 1 3 2 3 1 3 3 1 2 3 3 2 2 1 3 3 3 3 1 1 2 2 2 2 2 1 1 2 3 2 3 3 3 2 2 1 2 3 2 1 1 1 1 1 3 2 2 2 2 1 3 1 2 2 3 1 1 2 1 1 1 1 2 2 2 1 3 2 1 1 2 2 2 1 1 3 1 3 3 1 3 3 2 3 2 2 3 1 3 3 1 3 3 3 3 2 1 3 1 3 2 2 1 3 2 2 3 1 2 ...', 'output': ['220']}, {'input': '200\\r\\n1 3 2 3 2 3 3 3 2 2 3 2 3 1 1 3 3 2 2 2 1 1 3 3 3 1 1 1 1 2 2 3 1 3 2 3 3 2 1 2 3 2 2 1 2 1 3 3 3 1 3 3 3 2 2 1 3 3 1 1 2 1 2 2 3 3 3 2 1 2 2 2 2 3 2 1 3 1 3 2 2 2 1 3 2 2 3 3 1 3 3 1 3 1 1 2 3 1 1 2 3 1 3 2 1 1 2 2 2 1 1 3 3 1 1 3 1 1 2 1 3 2 1 2 2 ...', 'output': ['219']}, {'input': '200\\r\\n1 3 3 1 1 2 1 3 2 2 3 2 2 1 3 1 1 3 3 2 3 3 2 3 2 3 1 2 3 3 2 2 3 3 1 3 3 1 1 1 2 1 1 1 2 2 2 3 2 3 2 1 1 3 2 3 2 1 1 3 3 1 3 1 3 3 3 3 1 2 3 2 1 1 1 2 1 3 2 3 2 1 3 3 2 2 3 3 1 2 1 3 1 2 2 1 1 3 3 3 3 2 1 1 2 1 3 1 3 3 1 2 1 2 1 2 2 1 3 1 2 3 2 3 2 ...', 'output': ['222']}, {'input': '200\\r\\n3 1 2 3 2 1 3 2 2 1 3 1 1 1 3 1 3 3 1 1 3 1 2 2 2 1 3 3 2 1 3 2 3 3 3 2 2 1 3 1 2 1 3 2 2 2 2 1 1 2 2 3 1 2 1 3 2 3 2 1 2 1 2 3 3 2 2 2 2 1 2 2 1 2 3 1 1 1 3 3 1 3 2 3 1 2 2 1 2 2 3 3 1 1 1 2 1 1 3 1 3 2 2 1 3 1 2 3 1 3 2 3 3 3 1 3 1 2 3 3 2 2 2 2 2 ...', 'output': ['223']}, {'input': '200\\r\\n3 2 2 1 3 2 2 3 1 1 2 3 3 1 2 2 3 3 1 1 3 3 3 1 1 3 2 3 2 3 3 2 2 1 3 2 1 2 3 1 1 3 3 2 3 1 1 2 3 2 1 3 2 2 3 3 1 1 1 3 2 1 3 1 2 1 2 1 2 3 1 3 2 2 1 1 1 1 3 2 1 1 1 1 3 1 3 1 3 3 1 2 2 2 1 2 3 1 2 3 1 1 2 3 3 3 1 3 2 2 2 2 2 2 3 1 1 3 1 3 1 1 3 3 1 ...', 'output': ['222']}, {'input': '200\\r\\n1 2 3 3 1 2 1 1 2 1 1 1 1 2 3 3 3 1 2 2 2 2 3 2 1 2 2 3 3 1 1 3 1 1 1 3 1 3 3 2 2 3 3 3 2 3 1 1 1 1 2 3 2 3 3 3 1 1 3 3 1 2 3 1 3 1 3 2 3 2 1 3 1 1 1 2 1 3 2 2 2 3 2 2 2 2 1 3 3 3 3 1 3 1 2 1 2 1 2 1 2 3 2 3 1 3 1 2 1 1 2 3 3 1 2 1 1 1 1 2 3 1 1 1 2 ...', 'output': ['219']}, {'input': '200\\r\\n3 1 3 3 2 1 2 1 1 3 3 3 2 3 2 3 3 2 1 1 2 3 2 2 1 1 2 2 2 3 3 2 2 3 2 1 2 3 1 1 3 1 1 2 2 2 3 3 2 2 3 2 3 1 2 2 2 1 3 1 3 3 3 2 3 2 2 1 2 1 1 3 2 2 3 3 2 3 2 1 2 3 3 3 3 1 2 1 1 3 1 3 1 2 2 1 3 1 1 2 2 3 1 3 1 2 3 3 2 1 2 1 2 1 2 3 2 1 1 2 1 3 1 3 1 ...', 'output': ['221']}, {'input': '200\\r\\n2 1 1 3 2 1 3 2 1 2 2 2 3 1 3 1 3 3 2 2 2 3 1 2 1 2 1 2 1 3 1 3 2 2 2 2 2 2 3 2 3 2 3 2 2 3 2 3 2 3 2 3 3 1 1 3 2 3 3 1 3 2 1 1 1 3 1 2 2 2 2 1 2 3 2 1 1 3 1 1 3 2 1 3 2 2 1 2 1 2 1 3 2 2 2 1 2 1 2 3 3 3 1 1 2 2 3 3 3 3 1 3 1 2 1 3 1 2 2 2 2 1 2 1 2 ...', 'output': ['216']}, {'input': '200\\r\\n1 2 1 3 2 1 1 3 3 3 1 3 1 2 1 1 3 2 2 3 2 3 1 2 2 3 2 3 2 3 2 1 3 1 3 3 3 3 2 3 2 2 3 3 2 3 2 2 1 3 2 2 2 1 2 1 2 3 3 1 3 1 2 1 1 2 2 1 1 2 3 3 2 2 1 3 1 2 2 2 1 2 2 3 3 2 1 1 1 1 2 1 3 1 3 2 1 3 3 2 1 2 3 1 3 2 2 2 3 3 2 1 3 3 2 2 3 1 3 1 2 2 3 1 3 ...', 'output': ['219']}, {'input': '200\\r\\n3 3 2 3 2 3 1 3 2 2 1 3 2 2 1 3 1 3 3 3 2 2 2 2 1 1 3 1 1 2 1 3 1 3 2 1 1 2 3 3 2 3 1 1 3 2 2 2 3 2 1 3 3 2 3 2 2 2 3 3 2 3 2 3 1 2 2 3 3 2 3 3 1 3 1 3 1 1 1 3 1 1 2 3 2 1 1 1 2 2 2 2 3 2 1 2 3 1 3 3 1 2 2 1 2 1 1 3 3 3 1 1 2 3 1 2 3 2 2 1 2 2 3 1 3 ...', 'output': ['213']}, {'input': '200\\r\\n3 2 2 2 2 3 1 1 1 2 2 2 3 2 3 3 3 1 3 2 3 1 2 2 1 1 1 3 1 3 1 1 1 1 2 3 3 1 3 1 2 2 1 2 3 2 1 2 2 1 1 2 1 2 3 1 3 1 1 2 1 3 2 3 1 2 2 3 1 3 2 2 2 1 1 2 1 1 2 2 1 2 2 2 2 2 3 1 3 2 2 1 3 2 2 2 3 1 3 1 3 1 1 1 2 1 1 3 3 1 3 2 3 3 1 3 3 2 1 1 3 1 1 2 3 ...', 'output': ['210']}, {'input': '200\\r\\n2 1 2 3 2 2 1 2 2 2 1 3 2 2 2 2 1 1 3 2 2 2 3 3 3 1 2 3 2 1 2 2 1 3 3 2 1 3 3 1 1 2 2 2 3 1 2 3 1 1 3 3 1 1 1 1 2 2 1 2 2 2 3 2 2 1 2 3 3 2 2 3 3 3 2 1 1 2 1 1 1 2 3 3 2 3 1 2 3 1 3 1 1 1 3 1 1 1 1 3 2 3 3 2 2 1 1 2 2 1 1 1 2 3 1 3 3 2 2 1 1 3 1 1 2 ...', 'output': ['210']}, {'input': '200\\r\\n3 1 1 1 3 3 3 1 3 3 1 3 1 2 3 3 3 2 1 2 2 3 3 1 1 3 2 1 3 2 1 2 3 2 2 1 1 2 2 1 1 3 2 2 1 2 2 1 2 2 1 3 1 2 3 1 3 3 1 3 1 3 2 3 2 2 1 2 3 2 1 3 2 3 1 1 1 1 1 1 2 2 3 2 3 3 3 1 3 1 2 3 1 1 3 2 3 2 1 1 3 2 2 2 3 2 1 3 2 1 3 2 3 2 2 1 2 1 2 1 3 2 1 2 1 ...', 'output': ['212']}, {'input': '200\\r\\n1 1 3 3 2 2 2 2 2 3 2 3 1 1 1 2 2 2 3 3 1 1 2 1 3 1 3 2 2 2 3 1 3 2 3 2 2 3 1 1 3 3 2 3 3 3 2 2 1 2 3 3 2 2 1 3 2 1 2 3 1 3 2 1 1 1 2 1 3 1 1 3 2 3 1 2 3 3 2 1 2 1 2 3 3 3 1 1 3 3 2 3 3 1 2 2 3 1 3 3 2 1 3 3 2 2 3 2 2 3 1 2 2 3 2 3 2 3 1 3 1 1 3 2 2 ...', 'output': ['208']}, {'input': '200\\r\\n2 2 2 3 2 1 1 2 3 1 3 2 1 1 1 2 2 2 3 1 3 3 2 1 1 2 1 3 1 3 3 1 1 3 2 1 3 2 2 3 1 2 3 2 2 2 3 3 1 1 3 3 1 2 3 2 3 2 1 1 2 3 3 2 3 3 2 1 3 2 2 3 1 2 2 2 2 2 3 2 3 3 2 3 3 3 3 1 2 2 2 1 3 2 1 1 2 1 3 1 1 3 3 1 1 2 1 2 2 3 1 1 2 1 1 1 2 3 2 2 1 1 1 1 3 ...', 'output': ['213']}, {'input': '200\\r\\n3 3 1 3 2 3 2 3 1 3 3 1 1 2 3 1 2 2 2 3 2 2 2 2 1 3 3 2 2 2 3 3 3 3 1 1 3 1 3 1 2 1 2 3 2 2 3 3 3 3 1 3 1 3 1 3 3 3 2 2 1 1 2 1 2 2 2 2 1 2 1 1 2 3 2 3 2 2 2 3 3 3 3 3 2 2 1 1 1 2 1 1 2 3 2 3 1 3 1 1 1 3 3 2 3 2 1 3 1 3 1 2 2 2 2 1 1 2 2 3 2 1 2 2 3 ...', 'output': ['215']}, {'input': '200\\r\\n1 2 3 1 1 1 2 2 2 2 1 2 1 2 3 2 2 3 2 1 2 1 1 2 2 1 2 2 3 1 2 3 3 3 1 1 1 2 1 1 1 1 1 1 1 2 3 2 1 1 3 2 1 2 1 1 3 3 1 3 2 3 2 1 3 3 3 3 1 1 3 3 3 1 2 1 1 1 1 1 1 1 1 2 1 3 3 1 2 1 2 1 2 2 1 2 1 2 3 3 2 2 2 1 1 2 2 3 3 1 1 1 2 2 3 1 3 2 1 3 1 2 1 1 2 ...', 'output': ['213']}, {'input': '200\\r\\n2 3 1 2 1 3 2 1 1 2 1 2 3 3 1 2 1 3 3 2 1 1 3 1 2 3 3 3 1 1 3 1 1 1 2 3 3 3 1 2 3 2 2 1 2 3 3 1 1 2 1 3 3 1 2 3 3 2 2 1 2 1 2 1 3 2 2 3 2 2 1 1 3 3 2 2 1 1 3 1 1 1 3 1 3 1 1 3 1 3 2 3 1 3 1 1 3 2 3 2 2 1 3 3 2 2 2 2 3 3 1 1 1 1 2 1 1 1 3 1 3 2 1 2 1 ...', 'output': ['212']}, {'input': '200\\r\\n2 3 3 1 1 1 3 3 3 3 1 1 1 1 2 2 2 2 2 1 3 1 2 3 1 1 1 3 2 2 1 2 2 3 3 2 3 2 2 2 3 2 3 3 2 2 1 2 3 3 1 1 1 2 2 3 1 2 1 3 3 2 1 3 3 3 2 2 1 2 3 2 2 1 2 1 2 2 1 3 3 2 2 3 3 2 3 1 3 3 1 2 1 1 1 3 1 2 1 2 3 1 3 2 2 1 2 3 1 2 3 3 1 2 1 1 2 2 2 1 3 2 3 3 2 ...', 'output': ['215']}, {'input': '200\\r\\n3 3 2 2 3 2 1 1 1 1 3 3 1 2 2 2 1 1 3 1 3 3 1 2 3 1 3 2 3 2 2 3 2 2 2 3 1 2 2 1 1 3 3 1 3 3 2 1 3 2 1 1 3 3 2 1 3 1 1 2 3 2 1 2 3 1 2 2 3 1 2 1 1 3 1 3 2 3 1 3 1 3 2 2 2 1 2 1 2 2 2 2 3 1 2 1 1 2 3 3 1 2 1 2 1 2 2 3 2 2 3 2 1 3 2 1 1 1 3 3 3 2 2 3 2 ...', 'output': ['346']}, {'input': '200\\r\\n1 1 1 3 2 3 1 2 2 2 1 1 1 3 2 2 3 1 1 2 1 2 1 2 2 3 2 2 2 2 1 3 1 1 1 3 2 2 3 2 3 3 1 2 1 1 2 3 1 1 2 3 2 3 1 1 2 1 2 1 2 3 2 3 1 1 2 1 1 3 2 2 1 1 1 2 1 1 1 1 1 3 1 1 3 3 3 1 3 2 1 2 1 1 1 3 1 1 3 2 3 1 1 3 3 1 1 1 1 1 3 2 2 3 1 1 2 3 3 1 1 3 3 2 3 ...', 'output': ['338']}, {'input': '200\\r\\n3 2 3 1 2 1 2 3 3 1 3 2 3 1 1 3 3 2 2 2 1 2 2 3 1 1 1 2 3 3 2 3 3 2 3 2 2 1 3 3 2 1 3 3 2 2 1 1 1 2 3 1 3 3 2 3 1 3 3 3 3 3 3 2 2 1 2 3 3 1 2 1 1 1 3 1 1 3 1 1 2 2 2 2 3 3 3 1 1 2 3 2 1 3 2 2 1 2 3 1 2 3 3 3 3 3 2 1 1 3 3 2 3 1 3 3 3 1 2 1 2 2 1 1 3 ...', 'output': ['335']}, {'input': '200\\r\\n2 2 3 3 3 1 3 3 1 3 2 3 2 3 2 3 1 1 1 3 3 3 2 2 3 3 2 1 3 1 1 3 3 3 3 3 1 2 3 2 3 2 1 1 1 3 3 2 2 3 2 1 2 3 1 2 2 2 3 3 3 2 3 2 3 3 3 1 2 2 1 2 3 3 3 1 1 3 3 1 2 1 1 3 3 1 2 3 1 3 3 2 2 3 2 3 1 1 2 1 1 3 1 3 2 2 2 3 1 2 1 1 2 3 2 2 1 1 3 1 1 3 1 2 1 ...', 'output': ['339']}, {'input': '200\\r\\n2 2 3 1 3 2 2 3 3 1 2 3 1 1 2 1 3 3 2 3 3 3 3 3 3 2 2 1 3 1 1 1 2 3 3 1 1 3 1 2 3 3 3 1 2 1 3 3 2 1 3 2 1 3 2 2 3 3 1 3 3 1 2 2 2 2 3 3 1 1 2 3 3 1 1 3 1 1 2 3 2 2 3 3 1 2 1 3 3 1 1 3 2 2 2 1 2 1 1 3 2 1 2 3 3 3 3 1 1 3 1 1 1 2 3 1 2 2 3 1 1 2 3 3 1 ...', 'output': ['387']}, {'input': '200\\r\\n2 3 1 2 3 2 3 2 2 3 2 2 1 2 3 1 1 2 3 2 3 1 1 1 2 1 3 1 1 1 3 3 3 2 3 1 2 2 2 3 2 3 3 3 2 1 3 1 2 1 1 1 3 3 2 3 2 2 3 2 3 3 3 2 2 3 3 2 2 3 1 3 3 2 3 1 2 1 2 1 3 3 2 1 1 2 3 3 2 1 2 1 2 1 1 3 2 2 1 3 3 3 2 1 1 3 2 3 1 1 3 3 2 1 3 1 2 2 2 1 3 3 3 1 1 ...', 'output': ['411']}, {'input': '200\\r\\n1 1 1 3 2 3 1 2 2 3 2 3 2 3 2 3 2 3 2 1 3 2 2 2 2 1 1 3 1 1 3 2 3 2 1 1 3 1 3 3 1 2 1 3 3 3 2 1 2 2 3 1 1 2 3 3 1 1 1 3 2 2 1 3 2 3 3 1 2 1 1 3 1 3 1 3 2 2 1 1 2 1 2 3 2 1 3 3 3 1 2 1 3 3 1 3 2 3 3 1 3 1 1 3 2 3 2 3 1 3 3 3 2 2 3 2 1 2 2 3 2 1 3 3 2 ...', 'output': ['381']}, {'input': '200\\r\\n2 1 2 2 2 2 1 3 2 3 1 3 3 1 3 3 2 2 2 2 1 3 1 1 2 1 3 2 3 2 2 1 1 1 2 1 2 2 2 1 3 1 1 1 1 1 2 2 1 1 3 1 1 2 1 1 3 2 2 2 3 2 1 1 2 3 1 1 2 1 3 1 3 1 1 2 1 2 3 3 3 3 2 2 2 2 1 3 2 1 3 1 2 3 3 1 3 2 1 1 2 3 2 1 3 2 3 3 3 3 1 2 1 2 3 2 2 1 1 3 1 2 3 2 3 ...', 'output': ['391']}, {'input': '200\\r\\n3 1 3 3 1 3 3 2 1 2 2 3 3 2 1 1 1 2 2 2 2 2 3 1 1 3 1 1 1 3 3 3 2 2 3 3 3 1 1 1 1 3 1 3 3 2 1 3 2 3 3 3 2 2 3 1 2 3 1 2 3 2 2 2 3 2 1 3 2 1 2 3 1 2 1 2 2 3 3 3 2 1 1 3 2 1 1 2 2 1 1 3 2 3 2 2 3 1 3 2 2 1 1 3 2 1 1 2 2 1 2 2 2 2 1 3 2 2 1 1 2 1 1 1 2 ...', 'output': ['390']}, {'input': '200\\r\\n1 1 1 2 3 1 3 2 1 1 1 1 1 3 2 3 1 2 2 1 2 2 2 1 1 2 2 2 2 3 3 3 3 3 2 3 1 3 1 1 3 3 2 1 2 2 3 2 1 2 1 3 3 3 2 2 1 2 1 1 1 2 2 1 3 3 3 1 1 2 1 2 1 3 2 1 2 2 2 3 3 1 2 2 2 1 2 3 2 3 1 2 1 3 2 3 1 2 1 3 3 2 1 3 1 2 2 2 1 2 1 2 3 3 3 3 1 3 1 2 1 1 1 2 2 ...', 'output': ['383']}, {'input': '200\\r\\n3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 ...', 'output': ['201', '202']}, {'input': '200\\r\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 ...', 'output': ['214']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class RubikGame {\n\t\n\t\n\tpublic static void main(String [] args) throws IOException {\n\t\tInputStreamReader isr = new InputStreamReader(System.in);\n\t\tBufferedReader br = new BufferedReader(isr);\n\t\t\n\t\tint n = Integer.parseInt(br.readLine()), start = 1, index, min = Integer.MAX_VALUE, cost[] = new int[n],\n\t\t\t\tnext[][] = new int[n][3];\n\t\tboolean[] visited = new boolean[n];\n\t\tString str[][] = new String[n][3], arr[];\n\t\t\n\t\tarr = br.readLine().split(\" \");\n\t\t\n\t\tfor(int i = 0 ; i < n ; i++) {\n\t\t\tnext[i][Integer.parseInt(arr[i]) - 1] = i;\n\t\t}\n\t\tfor(int i = 0 ; i < n ; i++){\n\t\t\tstr[i] = br.readLine().split(\" \");\n\t\t\tindex = Integer.parseInt(str[i][0]) - 1;\n\t\t\tfor(int j = 1 ; j <= 2 ; j++){\n\t\t\t\tnext[i][j - 1] = Integer.parseInt(str[index][j]) - 1;\n\t\t\t}\n\t\t}\n\t\tcost[0] = 0;\n\t\tfor(int i = 0 ; i < n ; i++){\n\t\t\tfor(int j = 0 ; j < 3 ; j++){\n\t\t\t\tif(!visited[i]) {\n\t\t\t\t\tcost[i] = cost[i] + 1;\n\t\t\t\t\tindex = next[i][j];\n\t\t\t\t\tvisited[i] = true;\n\t\t\t\t\twhile(!visited[index]) {\n\t\t\t\t\t\tvisited[index] = true;\n\t\t\t\t\t\tcost[i] = cost[i] + 1;\n\t\t\t\t\t\tindex = next[index][(j + 1) % 3];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0 ; i < n ; i++) {\n\t\t\tif(min > cost[i]) {\n\t\t\t\tmin = cost[i];\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0 ; i < n ; i++) {\n\t\t\tif(min == cost[i]) {\n\t\t\t\tcost[i] = (cost[i] + cost[start]);\n\t\t\t}else {\n\t\t\t\tcost[i] = (cost[i] + cost[start] - 1);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(cost[0]);\n\t}\n}\n"}
{"src_uid": "1c74a21045b2d312f68565bdaaaa8a7b", "id": 108, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2100, "testcases": "[{'input': '5\\r\\n8 2 7 3 1\\r\\n', 'output': ['3\\r\\n']}, {'input': '3\\r\\n5 2 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n2 1\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\n1 3 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n16 8 4 2 1\\r\\n', 'output': ['4\\r\\n']}, {'input': '6\\r\\n5 5 2 3 5 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n4 4 4 4 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '10\\r\\n5 4 2 13 5 2 21 2 20 1\\r\\n', 'output': ['5\\r\\n']}, {'input': '10\\r\\n10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['7\\r\\n']}, {'input': '12\\r\\n5 1 3 2 3 3 2 2 2 1 3 2\\r\\n', 'output': ['7\\r\\n']}, {'input': '10\\r\\n1 2 4 8 1 2 8 16 4 1\\r\\n', 'output': ['4\\r\\n']}, {'input': '10\\r\\n6 6 6 6 4 4 4 3 3 2\\r\\n', 'output': ['4\\r\\n']}, {'input': '17\\r\\n8 6 1 2 3 6 2 2 2 6 6 1 1 1 1 1 1\\r\\n', 'output': ['12\\r\\n']}, {'input': '10\\r\\n982 825 689 538 970 73 40 735 930 719\\r\\n', 'output': ['6\\r\\n']}, {'input': '20\\r\\n131 883 492 278 77 934 244 539 929 253 442 84 862 282 141 4 13 843 287 646\\r\\n', 'output': ['15\\r\\n']}, {'input': '30\\r\\n632 292 647 666 184 442 449 695 281 786 52 576 124 927 273 771 217 56 135 624 162 406 341 30 343 137 658 318 394 71\\r\\n', 'output': ['23\\r\\n']}, {'input': '40\\r\\n780 349 449 406 290 950 653 500 281 320 14 67 386 572 404 538 421 270 983 602 464 611 718 636 912 678 697 203 775 309 764 132 59 801 713 826 759 51 945 742\\r\\n', 'output': ['30\\r\\n']}, {'input': '50\\r\\n929 406 604 146 397 811 858 656 632 853 624 559 648 216 183 305 977 483 831 228 117 465 95 891 834 219 88 440 156 547 319 920 540 15 513 371 473 129 290 462 315 815 470 511 151 851 96 52 259 825\\r\\n', 'output': ['40\\r\\n']}, {'input': '100\\r\\n981 756 746 449 425 692 211 546 943 980 556 784 426 943 496 742 488 515 753 435 188 875 373 618 415 506 660 446 82 398 244 987 442 588 32 351 832 802 195 104 724 167 109 183 253 847 329 906 640 691 739 639 987 341 560 627 573 809 443 411 180 550 881 154 450 100 435 946 164 688 174 798 1000 275 976 627 779 457 408 262 989 44 26 392 938 857 55 111 885 938 941 206 339 251 904 245 425 872 980 811\\r\\n', 'output': ['85\\r\\n']}, {'input': '17\\r\\n65536 32768 16384 8192 4096 2048 1024 512 256 128 64 32 16 8 4 2 1\\r\\n', 'output': ['16\\r\\n']}, {'input': '5\\r\\n5 1 3 3 6\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.io.*;\nimport java.util.*;\nimport java.util.Map.Entry;\nimport static java.util.stream.Collectors.toMap;\nimport java.util.Arrays;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class JavaApplication9 {\n\n    static class Reader {\n        final private int BUFFER_SIZE = 1 << 16;\n        private DataInputStream din;\n        private byte[] buffer;\n        private int bufferPointer, bytesRead;\n\n        public Reader() {\n            din = new DataInputStream(System.in);\n            buffer = new byte[BUFFER_SIZE];\n            bufferPointer = bytesRead = 0;\n        }\n\n        public Reader(String file_name) throws IOException {\n            din = new DataInputStream(new FileInputStream(file_name));\n            buffer = new byte[BUFFER_SIZE];\n            bufferPointer = bytesRead = 0;\n        }\n\n        public String readLine() throws IOException {\n            byte[] buf = new byte[64]; // line length\n            int cnt = 0, c;\n            while ((c = read())!= -1) {\n                if (c == '\\n') {\n                    break;\n                }\n                buf[cnt++] = (byte) c;\n            }\n            return new String(buf, 0, cnt);\n        }\n\n        public int nextInt() throws IOException {\n            int ret = 0;\n            byte c = read();\n            while (c <='') {\n                c = read();\n            }\n            boolean neg = (c == '-');\n            if (neg) {\n                c = read();\n            }\n            do {\n                ret = ret * 10 + c - '0';\n            }  while ((c = read()) >= '0' && c <= '9');\n            if (neg) {\n                return -ret;\n            }\n            return ret;\n        }\n\n        public long nextLong() throws IOException {\n            long ret = 0;\n            byte c = read();\n            while (c <='') { c = read(); }\n            boolean neg = (c == '-');\n            if (neg) { c = read(); }\n            do {\n                ret = ret * 10 + c - '0';\n            }\n            while ((c = read()) >= '0' && c <= '9');\n            if (neg) { return -ret; }\n            return ret;\n        }\n\n        public double nextDouble() throws IOException {\n            double ret = 0, div = 1;\n            byte c = read();\n            while (c <='') { c = read(); }\n            boolean neg = (c == '-');\n            if (neg) { c = read(); }\n\n            do {\n                ret = ret * 10 + c - '0';\n            }\n            while ((c = read()) >= '0' && c <= '9');\n\n            if (c == '.') {\n                while ((c = read()) >= '0' && c <= '9') {\n                    ret += (c - '0') / (div *= 10);\n                }\n            }\n\n            if (neg) { return -ret; }\n            return ret;\n        }\n\n        private void fillBuffer() throws IOException {\n            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);\n            if (bytesRead == -1) {\n                buffer[0] = -1;\n            }\n        }\n\n        private byte read() throws IOException {\n            if (bufferPointer == bytesRead) {\n                fillBuffer();\n            }\n            return buffer[bufferPointer++];\n        }\n\n        public void close() throws IOException {\n            if (din == null) {\n                return;\n            }\n            din.close();\n        }\n    }\n    private static Reader fileReader = new Reader();\n\n    public static int nextInt() throws IOException {\n        return fileReader.nextInt();\n    }\n\n    public static long nextLong() throws IOException {\n        return fileReader.nextLong();\n    }\n\n    public static void main(String[] args) throws IOException {\n        int n = nextInt();\n        int[] arr = new int[n];\n        for(int i=0;i"}
{"src_uid": "1c74a21045b2d312f68565bdaaaa8a7b", "id": 108, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2100, "testcases": "[{'input': '5\\r\\n8 2 7 3 1\\r\\n', 'output': ['3\\r\\n']}, {'input': '3\\r\\n5 2 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n2 1\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\n1 3 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n16 8 4 2 1\\r\\n', 'output': ['4\\r\\n']}, {'input': '6\\r\\n5 5 2 3 5 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n4 4 4 4 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '10\\r\\n5 4 2 13 5 2 21 2 20 1\\r\\n', 'output': ['5\\r\\n']}, {'input': '10\\r\\n10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['7\\r\\n']}, {'input': '12\\r\\n5 1 3 2 3 3 2 2 2 1 3 2\\r\\n', 'output': ['7\\r\\n']}, {'input': '10\\r\\n1 2 4 8 1 2 8 16 4 1\\r\\n', 'output': ['4\\r\\n']}, {'input': '10\\r\\n6 6 6 6 4 4 4 3 3 2\\r\\n', 'output': ['4\\r\\n']}, {'input': '17\\r\\n8 6 1 2 3 6 2 2 2 6 6 1 1 1 1 1 1\\r\\n', 'output': ['12\\r\\n']}, {'input': '10\\r\\n982 825 689 538 970 73 40 735 930 719\\r\\n', 'output': ['6\\r\\n']}, {'input': '20\\r\\n131 883 492 278 77 934 244 539 929 253 442 84 862 282 141 4 13 843 287 646\\r\\n', 'output': ['15\\r\\n']}, {'input': '30\\r\\n632 292 647 666 184 442 449 695 281 786 52 576 124 927 273 771 217 56 135 624 162 406 341 30 343 137 658 318 394 71\\r\\n', 'output': ['23\\r\\n']}, {'input': '40\\r\\n780 349 449 406 290 950 653 500 281 320 14 67 386 572 404 538 421 270 983 602 464 611 718 636 912 678 697 203 775 309 764 132 59 801 713 826 759 51 945 742\\r\\n', 'output': ['30\\r\\n']}, {'input': '50\\r\\n929 406 604 146 397 811 858 656 632 853 624 559 648 216 183 305 977 483 831 228 117 465 95 891 834 219 88 440 156 547 319 920 540 15 513 371 473 129 290 462 315 815 470 511 151 851 96 52 259 825\\r\\n', 'output': ['40\\r\\n']}, {'input': '100\\r\\n981 756 746 449 425 692 211 546 943 980 556 784 426 943 496 742 488 515 753 435 188 875 373 618 415 506 660 446 82 398 244 987 442 588 32 351 832 802 195 104 724 167 109 183 253 847 329 906 640 691 739 639 987 341 560 627 573 809 443 411 180 550 881 154 450 100 435 946 164 688 174 798 1000 275 976 627 779 457 408 262 989 44 26 392 938 857 55 111 885 938 941 206 339 251 904 245 425 872 980 811\\r\\n', 'output': ['85\\r\\n']}, {'input': '17\\r\\n65536 32768 16384 8192 4096 2048 1024 512 256 128 64 32 16 8 4 2 1\\r\\n', 'output': ['16\\r\\n']}, {'input': '5\\r\\n5 1 3 3 6\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "/* package whatever; // don't place package name! */\n\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\nimport java.math.BigDecimal;\nimport static java.util.Collections.reverseOrder;\nimport static java.util.Collections.reverseOrder;\nimport static java.util.Collections.reverseOrder;\nimport static java.util.Collections.reverseOrder;\nimport static java.util.Collections.reverseOrder;\nimport static java.util.Collections.reverseOrder;\nimport static java.util.Collections.reverseOrder;\nimport static java.util.Collections.reverseOrder;\nimport static java.util.Collections.reverseOrder;\n/* static class Reader {\n\tfinal private int BUFFER_SIZE = 1 << 16;\n\tprivate DataInputStream din;\n\tprivate byte[] buffer;\n\tprivate int bufferPointer, bytesRead;\n \n\tpublic Reader() {\n\t\tdin = new DataInputStream(System.in);\n\t\tbuffer = new byte[BUFFER_SIZE];\n\t\tbufferPointer = bytesRead = 0;\n\t}\n \n\tpublic Reader(String file_name) throws IOException {\n\t\tdin = new DataInputStream(new FileInputStream(file_name));\n\t\tbuffer = new byte[BUFFER_SIZE];\n\t\tbufferPointer = bytesRead = 0;\n\t}\n \n\tpublic String next() throws IOException {\n\t\twhile (bufferPointer == bytesRead) {\n\t\t\tbytesRead = din.read(buffer);\n\t\t\tif (bytesRead == -1) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tbufferPointer = 0;\n\t\t}\n\t\tbyte b = buffer[bufferPointer];\n\t\tif (b == 13) {\n\t\t\t++bufferPointer;\n\t\t}\n\t\twhile (bufferPointer < bytesRead && b!= 32) {\n\t\t\tb = buffer[++bufferPointer];\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tsb.append(buffer[bufferPointer]);\n\t\twhile (bufferPointer < bytesRead && b == 32) {\n\t\t\tb = buffer[++bufferPointer];\n\t\t\tsb.append(b);\n\t\t}\n\t\treturn sb.toString();\n\t}\n \n\tpublic int nextInt() throws IOException {\n\t\tint result = 0;\n\t\tint b = 0;\n\t\twhile (b == 0 || b > 127) {\n\t\t\tb = nextByte();\n\t\t\tif (b == -1) {\n\t\t\t\treturn Integer.MIN_VALUE;\n\t\t\t}\n\t\t\telse if (b >= '0' && b <= '9') {\n\t\t\t\tresult *= 10;\n\t\t\t\tresult += b - '0';\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n \n\tpublic long nextLong() throws IOException {\n\t\tlong result = 0;\n\t\tlong b = 0;\n\t\twhile (b == 0 || b > 127) {\n\t\t\tb = nextByte();\n\t\t\tif (b == -1) {\n\t\t\t\treturn Long.MIN_VALUE;\n\t\t\t}\n\t\t\telse if (b >= '0' && b <= '9') {\n\t\t\t\tresult *= 10;\n\t\t\t\tresult += b - '0';\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n \n\tpublic int nextByte() throws IOException {\n\t\t\tif (bufferPointer < bytesRead) {\n\t\t\t\t\treturn buffer[bufferPointer++];\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\tbufferPointer = 0;\n\t\t\t\t\tbytesRead = din.read(buffer);\n\t\t\t\t\tif (bytesRead <= 0) {\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t}\n\t\t\treturn buffer[bufferPointer++];\n\t}\n} */\n// import java.util.*;\npublic class crane {\n    public static void main (String[] args) throws java.lang.Exception\n    {\n     \n      \n       \n\t  \n\t  int n = new Reader().nextInt();\n\t  int h[] = new int[n];"}
{"src_uid": "1c74a21045b2d312f68565bdaaaa8a7b", "id": 108, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2100, "testcases": "[{'input': '5\\r\\n8 2 7 3 1\\r\\n', 'output': ['3\\r\\n']}, {'input': '3\\r\\n5 2 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n2 1\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\n1 3 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n16 8 4 2 1\\r\\n', 'output': ['4\\r\\n']}, {'input': '6\\r\\n5 5 2 3 5 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n4 4 4 4 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '10\\r\\n5 4 2 13 5 2 21 2 20 1\\r\\n', 'output': ['5\\r\\n']}, {'input': '10\\r\\n10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['7\\r\\n']}, {'input': '12\\r\\n5 1 3 2 3 3 2 2 2 1 3 2\\r\\n', 'output': ['7\\r\\n']}, {'input': '10\\r\\n1 2 4 8 1 2 8 16 4 1\\r\\n', 'output': ['4\\r\\n']}, {'input': '10\\r\\n6 6 6 6 4 4 4 3 3 2\\r\\n', 'output': ['4\\r\\n']}, {'input': '17\\r\\n8 6 1 2 3 6 2 2 2 6 6 1 1 1 1 1 1\\r\\n', 'output': ['12\\r\\n']}, {'input': '10\\r\\n982 825 689 538 970 73 40 735 930 719\\r\\n', 'output': ['6\\r\\n']}, {'input': '20\\r\\n131 883 492 278 77 934 244 539 929 253 442 84 862 282 141 4 13 843 287 646\\r\\n', 'output': ['15\\r\\n']}, {'input': '30\\r\\n632 292 647 666 184 442 449 695 281 786 52 576 124 927 273 771 217 56 135 624 162 406 341 30 343 137 658 318 394 71\\r\\n', 'output': ['23\\r\\n']}, {'input': '40\\r\\n780 349 449 406 290 950 653 500 281 320 14 67 386 572 404 538 421 270 983 602 464 611 718 636 912 678 697 203 775 309 764 132 59 801 713 826 759 51 945 742\\r\\n', 'output': ['30\\r\\n']}, {'input': '50\\r\\n929 406 604 146 397 811 858 656 632 853 624 559 648 216 183 305 977 483 831 228 117 465 95 891 834 219 88 440 156 547 319 920 540 15 513 371 473 129 290 462 315 815 470 511 151 851 96 52 259 825\\r\\n', 'output': ['40\\r\\n']}, {'input': '100\\r\\n981 756 746 449 425 692 211 546 943 980 556 784 426 943 496 742 488 515 753 435 188 875 373 618 415 506 660 446 82 398 244 987 442 588 32 351 832 802 195 104 724 167 109 183 253 847 329 906 640 691 739 639 987 341 560 627 573 809 443 411 180 550 881 154 450 100 435 946 164 688 174 798 1000 275 976 627 779 457 408 262 989 44 26 392 938 857 55 111 885 938 941 206 339 251 904 245 425 872 980 811\\r\\n', 'output': ['85\\r\\n']}, {'input': '17\\r\\n65536 32768 16384 8192 4096 2048 1024 512 256 128 64 32 16 8 4 2 1\\r\\n', 'output': ['16\\r\\n']}, {'input': '5\\r\\n5 1 3 3 6\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Solution{\n    static long[] arr, dp;\n    static int n;\n    \n    public static void main(String[] args){\n        \n        Scanner in = new Scanner(System.in);\n        \n        n = in.nextInt();\n        arr = new long[n];\n        dp = new long[n];\n        \n        for(int i = 0 ; i < n ; i++)\n            arr[i] = in.nextLong();\n        \n        for(int i = 1 ; i < n ; i++)\n            dp[i] = Math.min(dp[i - 1] + 1, (long)1 + arr[i - 1] + dp[i]);\n        \n        System.out.println(n - (int)(dp[n - 1]));\n        \n    }\n}"}
{"src_uid": "1c74a21045b2d312f68565bdaaaa8a7b", "id": 108, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2100, "testcases": "[{'input': '5\\r\\n8 2 7 3 1\\r\\n', 'output': ['3\\r\\n']}, {'input': '3\\r\\n5 2 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n2 1\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\n1 3 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n16 8 4 2 1\\r\\n', 'output': ['4\\r\\n']}, {'input': '6\\r\\n5 5 2 3 5 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n4 4 4 4 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '10\\r\\n5 4 2 13 5 2 21 2 20 1\\r\\n', 'output': ['5\\r\\n']}, {'input': '10\\r\\n10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['7\\r\\n']}, {'input': '12\\r\\n5 1 3 2 3 3 2 2 2 1 3 2\\r\\n', 'output': ['7\\r\\n']}, {'input': '10\\r\\n1 2 4 8 1 2 8 16 4 1\\r\\n', 'output': ['4\\r\\n']}, {'input': '10\\r\\n6 6 6 6 4 4 4 3 3 2\\r\\n', 'output': ['4\\r\\n']}, {'input': '17\\r\\n8 6 1 2 3 6 2 2 2 6 6 1 1 1 1 1 1\\r\\n', 'output': ['12\\r\\n']}, {'input': '10\\r\\n982 825 689 538 970 73 40 735 930 719\\r\\n', 'output': ['6\\r\\n']}, {'input': '20\\r\\n131 883 492 278 77 934 244 539 929 253 442 84 862 282 141 4 13 843 287 646\\r\\n', 'output': ['15\\r\\n']}, {'input': '30\\r\\n632 292 647 666 184 442 449 695 281 786 52 576 124 927 273 771 217 56 135 624 162 406 341 30 343 137 658 318 394 71\\r\\n', 'output': ['23\\r\\n']}, {'input': '40\\r\\n780 349 449 406 290 950 653 500 281 320 14 67 386 572 404 538 421 270 983 602 464 611 718 636 912 678 697 203 775 309 764 132 59 801 713 826 759 51 945 742\\r\\n', 'output': ['30\\r\\n']}, {'input': '50\\r\\n929 406 604 146 397 811 858 656 632 853 624 559 648 216 183 305 977 483 831 228 117 465 95 891 834 219 88 440 156 547 319 920 540 15 513 371 473 129 290 462 315 815 470 511 151 851 96 52 259 825\\r\\n', 'output': ['40\\r\\n']}, {'input': '100\\r\\n981 756 746 449 425 692 211 546 943 980 556 784 426 943 496 742 488 515 753 435 188 875 373 618 415 506 660 446 82 398 244 987 442 588 32 351 832 802 195 104 724 167 109 183 253 847 329 906 640 691 739 639 987 341 560 627 573 809 443 411 180 550 881 154 450 100 435 946 164 688 174 798 1000 275 976 627 779 457 408 262 989 44 26 392 938 857 55 111 885 938 941 206 339 251 904 245 425 872 980 811\\r\\n', 'output': ['85\\r\\n']}, {'input': '17\\r\\n65536 32768 16384 8192 4096 2048 1024 512 256 128 64 32 16 8 4 2 1\\r\\n', 'output': ['16\\r\\n']}, {'input': '5\\r\\n5 1 3 3 6\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n\npublic class Solution {\n    \n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt(), c = 0; int a[] = new int[n]; int r; \n        for(int i = 0 ;i<n;i++) a[i] = sc.nextInt();\n        for(int j = n-2 ; j >= 0 ;j++){\n            r = j;\n            while(a[r+1] > a[r]) r++;\n            if(a[r] > a[j]){\n                c += r-j+1;\n                a[r] = a[j] + a[r+1];\n                r++;\n                for(int k = r; k<n ;k++) a[k] = a[k+1];\n                n--;\n                j--;\n            }\n        }\n        System.out.println(c);\n    }\n}\n"}
{"src_uid": "1c74a21045b2d312f68565bdaaaa8a7b", "id": 108, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2100, "testcases": "[{'input': '5\\r\\n8 2 7 3 1\\r\\n', 'output': ['3\\r\\n']}, {'input': '3\\r\\n5 2 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n2 1\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\n1 3 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n16 8 4 2 1\\r\\n', 'output': ['4\\r\\n']}, {'input': '6\\r\\n5 5 2 3 5 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n4 4 4 4 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '10\\r\\n5 4 2 13 5 2 21 2 20 1\\r\\n', 'output': ['5\\r\\n']}, {'input': '10\\r\\n10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['7\\r\\n']}, {'input': '12\\r\\n5 1 3 2 3 3 2 2 2 1 3 2\\r\\n', 'output': ['7\\r\\n']}, {'input': '10\\r\\n1 2 4 8 1 2 8 16 4 1\\r\\n', 'output': ['4\\r\\n']}, {'input': '10\\r\\n6 6 6 6 4 4 4 3 3 2\\r\\n', 'output': ['4\\r\\n']}, {'input': '17\\r\\n8 6 1 2 3 6 2 2 2 6 6 1 1 1 1 1 1\\r\\n', 'output': ['12\\r\\n']}, {'input': '10\\r\\n982 825 689 538 970 73 40 735 930 719\\r\\n', 'output': ['6\\r\\n']}, {'input': '20\\r\\n131 883 492 278 77 934 244 539 929 253 442 84 862 282 141 4 13 843 287 646\\r\\n', 'output': ['15\\r\\n']}, {'input': '30\\r\\n632 292 647 666 184 442 449 695 281 786 52 576 124 927 273 771 217 56 135 624 162 406 341 30 343 137 658 318 394 71\\r\\n', 'output': ['23\\r\\n']}, {'input': '40\\r\\n780 349 449 406 290 950 653 500 281 320 14 67 386 572 404 538 421 270 983 602 464 611 718 636 912 678 697 203 775 309 764 132 59 801 713 826 759 51 945 742\\r\\n', 'output': ['30\\r\\n']}, {'input': '50\\r\\n929 406 604 146 397 811 858 656 632 853 624 559 648 216 183 305 977 483 831 228 117 465 95 891 834 219 88 440 156 547 319 920 540 15 513 371 473 129 290 462 315 815 470 511 151 851 96 52 259 825\\r\\n', 'output': ['40\\r\\n']}, {'input': '100\\r\\n981 756 746 449 425 692 211 546 943 980 556 784 426 943 496 742 488 515 753 435 188 875 373 618 415 506 660 446 82 398 244 987 442 588 32 351 832 802 195 104 724 167 109 183 253 847 329 906 640 691 739 639 987 341 560 627 573 809 443 411 180 550 881 154 450 100 435 946 164 688 174 798 1000 275 976 627 779 457 408 262 989 44 26 392 938 857 55 111 885 938 941 206 339 251 904 245 425 872 980 811\\r\\n', 'output': ['85\\r\\n']}, {'input': '17\\r\\n65536 32768 16384 8192 4096 2048 1024 512 256 128 64 32 16 8 4 2 1\\r\\n', 'output': ['16\\r\\n']}, {'input': '5\\r\\n5 1 3 3 6\\r\\n', 'output': ['2\\r\\n']}]", "source_code": "\nimport java.util.*;\npublic class helloWorld {\n \n\tpublic static void main(String[] args) {\n\t\tScanner stdin = new Scanner(System.in);\n\t\tint n = stdin.nextInt();\n\t\tint array[] = new int[n];\n\t\tint result = 0;\n\t\tlong time = System.currentTimeMillis();\n\t\tfor (int i = 0; i < n; i++){\n\t\t\tarray[i] = stdin.nextInt();\n\t\t}\n\t\tint index = 0;\n\t\tint min = 0;\n\t\twhile (index < n-1){\n\t\t\tmin = Integer.MAX_VALUE;\n\t\t\tfor (int j = index; j <= n-1; j++){\n\t\t\t\tif(array[j]<min){\n\t\t\t\t\tmin = array[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int k = 0; k < n-1; k++){\n\t\t\t\tif(array[k] == min){\n\t\t\t\t\tarray[k] = 0;\n\t\t\t\t\tarray[k+1] = array[k+1] + min;\n\t\t\t\t\tresult++;\n\t\t\t\t\tj=n;\n\t\t\t\t\tk=n;\n\t\t\t\t\tmin = Integer.MAX_VALUE;\n\t\t\t\t}\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\t\tSystem.out.println(result);\n\t}\n}"}
{"src_uid": "3791d1a504b39eb2e72472bcfd9a7e22", "id": 109, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '5 3\\r\\n6 3 4 0 2\\r\\n', 'output': ['3 4\\r\\n']}, {'input': '3 4\\r\\n5 5 5\\r\\n', 'output': ['3 5\\r\\n']}, {'input': '5 3\\r\\n3 1 2 2 1\\r\\n', 'output': ['4 2\\r\\n']}, {'input': '6 0\\r\\n3 2 3 2 3 2\\r\\n', 'output': ['3 2\\r\\n']}, {'input': '10 15\\r\\n1 1 1 4 4 1 4 4 1 4\\r\\n', 'output': ['10 4\\r\\n']}, {'input': '5 100000\\r\\n0 5 5 4 3\\r\\n', 'output': ['5 5\\r\\n']}, {'input': '20 10\\r\\n-12 28 0 -27 16 25 -17 -25 9 -15 -38 19 33 20 -18 22 14 36 33 29\\r\\n', 'output': ['4 33\\r\\n']}, {'input': '100 100\\r\\n92 -6 67 92 65 -32 67 -31 91 -63 52 -81 -98 -12 48 86 -72 95 -50 66 79 89 -1 0 -33 -27 -23 -71 1 19 14 -61 -39 33 61 -64 91 -99 74 -18 -85 -39 84 74 -23 0 14 25 100 -52 -94 28 18 -81 34 39 -28 0 -25 49 -56 0 57 -2 36 -27 0 -91 -40 12 0 0 73 93 72 -82 47 58 15 0 -71 -58 28 100 -96 12 89 45 97 -79 85 38 -60 0 0 49 32 -30 -68 -93\\r\\n', 'output': ['17 0\\r\\n']}, {'input': '100 1000\\r\\n-281 191 -27 -286 -497 462 0 889 0 -350 -720 -507 916 0 -648 -942 -140 0 0 -877 66 576 -278 410 -792 -607 713 712 296 -828 -488 -129 508 -106 470 -263 -865 -506 -604 334 591 -40 220 0 0 198 -435 374 -34 254 970 0 549 100 555 326 91 0 -361 -835 472 823 -663 -456 0 91 295 126 383 141 476 609 518 545 840 -451 -93 -16 -453 381 647 334 -454 -708 -711 334 -78 -936 462 728 960 725 -424 649 0 246 -310 42 -559 -980\\r\\n', 'output': ['21 0\\r\\n']}, {'input': '1 268900446\\r\\n999999987\\r\\n', 'output': ['1 999999987\\r\\n']}, {'input': '10 93519867\\r\\n-316 313 -318 -307 -305 314 -302 -304 -320 -313\\r\\n', 'output': ['10 314\\r\\n']}, {'input': '100 415583658\\r\\n-90 -91 91 80 94 99 86 -89 89 98 93 -80 99 84 99 90 90 88 85 80 80 -99 84 84 -86 83 83 87 98 97 85 82 81 98 82 80 84 92 -93 98 82 93 90 85 91 90 85 91 -89 88 -84 -85 90 89 89 -93 88 -83 96 88 -86 95 80 92 -92 87 98 83 95 91 83 97 84 82 93 88 96 97 -85 -86 82 98 89 -84 98 81 83 -88 87 97 87 88 93 -99 88 80 90 97 95 90\\r\\n', 'output': ['100 99\\r\\n']}, {'input': '4 100\\r\\n1 1 1 1000000000\\r\\n', 'output': ['3 1\\r\\n']}, {'input': '5 1000\\r\\n1 1 1 1000000000 998756787\\r\\n', 'output': ['3 1\\r\\n']}, {'input': '5 1000000000\\r\\n0 1 2 999999999 999999999\\r\\n', 'output': ['3 2\\r\\n']}, {'input': '4 1000000000\\r\\n0 0 0 1000000000\\r\\n', 'output': ['3 0\\r\\n']}, {'input': '1 0\\r\\n0\\r\\n', 'output': ['1 0\\r\\n']}, {'input': '7 999999990\\r\\n999999999 999999999 999999999 3 4 2 1\\r\\n', 'output': ['4 4\\r\\n']}, {'input': '52 1000000000\\r\\n-1000000000 1000000000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n', 'output': ['51 0\\r\\n']}, {'input': '10 1000000000\\r\\n2 2 2 2 2 2 2 2 2 1000000000\\r\\n', 'output': ['9 2\\r\\n']}]", "source_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt(), k = sc.nextInt();\n        int max = 0, m = 0;\n        int arr[] = new int[n];\n        for(int i = 0; i < n; i++)\n            arr[i] = sc.nextInt();\n        for(int i = 0; i < n; i++){\n            int cnt = 0;\n            for(int j = 0; j < n; j++){\n                if(arr[i] >= arr[j])\n                    cnt += k + 1 - arr[j];\n            }\n            if(cnt > max){\n                max = cnt;\n                m = arr[i];\n            }\n        }\n        System.out.println(max + \" \" + m);\n    }\n}"}
{"src_uid": "3791d1a504b39eb2e72472bcfd9a7e22", "id": 109, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '5 3\\r\\n6 3 4 0 2\\r\\n', 'output': ['3 4\\r\\n']}, {'input': '3 4\\r\\n5 5 5\\r\\n', 'output': ['3 5\\r\\n']}, {'input': '5 3\\r\\n3 1 2 2 1\\r\\n', 'output': ['4 2\\r\\n']}, {'input': '6 0\\r\\n3 2 3 2 3 2\\r\\n', 'output': ['3 2\\r\\n']}, {'input': '10 15\\r\\n1 1 1 4 4 1 4 4 1 4\\r\\n', 'output': ['10 4\\r\\n']}, {'input': '5 100000\\r\\n0 5 5 4 3\\r\\n', 'output': ['5 5\\r\\n']}, {'input': '20 10\\r\\n-12 28 0 -27 16 25 -17 -25 9 -15 -38 19 33 20 -18 22 14 36 33 29\\r\\n', 'output': ['4 33\\r\\n']}, {'input': '100 100\\r\\n92 -6 67 92 65 -32 67 -31 91 -63 52 -81 -98 -12 48 86 -72 95 -50 66 79 89 -1 0 -33 -27 -23 -71 1 19 14 -61 -39 33 61 -64 91 -99 74 -18 -85 -39 84 74 -23 0 14 25 100 -52 -94 28 18 -81 34 39 -28 0 -25 49 -56 0 57 -2 36 -27 0 -91 -40 12 0 0 73 93 72 -82 47 58 15 0 -71 -58 28 100 -96 12 89 45 97 -79 85 38 -60 0 0 49 32 -30 -68 -93\\r\\n', 'output': ['17 0\\r\\n']}, {'input': '100 1000\\r\\n-281 191 -27 -286 -497 462 0 889 0 -350 -720 -507 916 0 -648 -942 -140 0 0 -877 66 576 -278 410 -792 -607 713 712 296 -828 -488 -129 508 -106 470 -263 -865 -506 -604 334 591 -40 220 0 0 198 -435 374 -34 254 970 0 549 100 555 326 91 0 -361 -835 472 823 -663 -456 0 91 295 126 383 141 476 609 518 545 840 -451 -93 -16 -453 381 647 334 -454 -708 -711 334 -78 -936 462 728 960 725 -424 649 0 246 -310 42 -559 -980\\r\\n', 'output': ['21 0\\r\\n']}, {'input': '1 268900446\\r\\n999999987\\r\\n', 'output': ['1 999999987\\r\\n']}, {'input': '10 93519867\\r\\n-316 313 -318 -307 -305 314 -302 -304 -320 -313\\r\\n', 'output': ['10 314\\r\\n']}, {'input': '100 415583658\\r\\n-90 -91 91 80 94 99 86 -89 89 98 93 -80 99 84 99 90 90 88 85 80 80 -99 84 84 -86 83 83 87 98 97 85 82 81 98 82 80 84 92 -93 98 82 93 90 85 91 90 85 91 -89 88 -84 -85 90 89 89 -93 88 -83 96 88 -86 95 80 92 -92 87 98 83 95 91 83 97 84 82 93 88 96 97 -85 -86 82 98 89 -84 98 81 83 -88 87 97 87 88 93 -99 88 80 90 97 95 90\\r\\n', 'output': ['100 99\\r\\n']}, {'input': '4 100\\r\\n1 1 1 1000000000\\r\\n', 'output': ['3 1\\r\\n']}, {'input': '5 1000\\r\\n1 1 1 1000000000 998756787\\r\\n', 'output': ['3 1\\r\\n']}, {'input': '5 1000000000\\r\\n0 1 2 999999999 999999999\\r\\n', 'output': ['3 2\\r\\n']}, {'input': '4 1000000000\\r\\n0 0 0 1000000000\\r\\n', 'output': ['3 0\\r\\n']}, {'input': '1 0\\r\\n0\\r\\n', 'output': ['1 0\\r\\n']}, {'input': '7 999999990\\r\\n999999999 999999999 999999999 3 4 2 1\\r\\n', 'output': ['4 4\\r\\n']}, {'input': '52 1000000000\\r\\n-1000000000 1000000000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n', 'output': ['51 0\\r\\n']}, {'input': '10 1000000000\\r\\n2 2 2 2 2 2 2 2 2 1000000000\\r\\n', 'output': ['9 2\\r\\n']}]", "source_code": "//package main;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class A{\n\tstatic void run(){\n\t\tint n=sc.nextInt(),k=sc.nextInt(),a[]=new int[n];\n\t\tfor(int i=0;i<n;i++)\n\t\t\ta[i]=sc.nextInt();\n\t\tint min=k/n,max=-1;\n\t\tif(k%n==0)\n\t\t\tmin++;\n\t\tfor(int i=1;i<=min;i++){\n\t\t\tint count[]=new int[a.length];\n\t\t\tfor(int j=0;j<n;j++){\n\t\t\t\tcount[j]=(a[j]/i);\n\t\t\t}\n\t\t\tint sum=0,index=0;\n\t\t\tfor(int j=0;j<count.length;j++){\n\t\t\t\tsum+=count[j];\n\t\t\t\tif(count[j]>count[index]){\n\t\t\t\t\tindex=j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(sum<=k)\n\t\t\t\tmax=Math.max(max,(a[index]/i));\n\t\t}\n\t\tout.println(max+\" \"+(max+min*n));\n\t\tout.close();\n\t\tsc.close();\n\t}\n\t\n\tstatic InputStream \t input;\n\tstatic PrintStream    out;\n\tstatic Input\t \t sc;\n\t\n\tstatic void solve() throws IOException{run();}\n\t\n\tpublic static void main(String[] args) throws IOException {\n\t\tinput=System.in;\n\t\tout=System.out;\n\t\tsc=new StandardInput();\n\t\tsolve();\n\t}\n\t\n\tstatic class StandardInput extends InputStream{\n\t\tprivate final InputStream in=System.in;\n\t\tprivate final ByteArrayOutputStream byteArray=new ByteArrayOutputStream();\n\t\tprivate final DataInputStream dataIn;\n\t\t\n\t\tprivate final byte[] buff=new byte[1024];\n\t\t\n\t\tprivate int nextByte() throws IOException{\n\t\t\tif(byteArray.size()>0){\n\t\t\t\treturn byteArray.read();\n\t\t\t}else{\n\t\t\t\tint b=in.read();\n\t\t\t\tif(b!=-1)\n\t\t\t\t\tbyteArray.write(b);\n\t\t\t\treturn b;\n\t\t\t}\n\t\t}\n\t\t\n\t\tprivate boolean hasNextByte() throws IOException{\n\t\t\tint b=byteArray.size();\n\t\t\tif(b>0){\n\t\t\t\treturn true;\n\t\t\t}else{\n\t\t\t\tb=in.read();\n\t\t\t\tif(b!=-1){\n\t\t\t\t\tbyteArray.write(b);\n\t\t\t\t\treturn true;\n\t\t\t\t}else{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tprivate int read() throws IOException{\n\t\t\twhile(hasNextByte()){\n\t\t\t\tint b=nextByte();\n\t\t\t\tif((char)(b)=='\\n'||(char)(b)=='\\r'){\n\t\t\t\t\treturn b;\n\t\t\t\t}else{\n\t\t\t\t\tbyteArray.write(b);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\t\t\n\t\tprivate int read(byte[] cbuf) throws IOException{\n\t\t\tint l=cbuf.length;\n\t\t\tint n=0;\n\t\t\twhile(hasNextByte()){\n\t\t\t\tint b=nextByte();\n\t\t\t\tif((char)(b)=='\\n'||(char)(b)=='\\r'){\n\t\t\t\t\treturn n;\n\t\t\t\t}else{\n\t\t\t\t\tcbuf[n++]=b;\n\t\t\t\t\tif(n==l){\n\t\t\t\t\t\treturn n;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn n;\n\t\t}\n\t\t\n\t\tpublic int readInt() throws IOException{\n"}
{"src_uid": "3791d1a504b39eb2e72472bcfd9a7e22", "id": 109, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '5 3\\r\\n6 3 4 0 2\\r\\n', 'output': ['3 4\\r\\n']}, {'input': '3 4\\r\\n5 5 5\\r\\n', 'output': ['3 5\\r\\n']}, {'input': '5 3\\r\\n3 1 2 2 1\\r\\n', 'output': ['4 2\\r\\n']}, {'input': '6 0\\r\\n3 2 3 2 3 2\\r\\n', 'output': ['3 2\\r\\n']}, {'input': '10 15\\r\\n1 1 1 4 4 1 4 4 1 4\\r\\n', 'output': ['10 4\\r\\n']}, {'input': '5 100000\\r\\n0 5 5 4 3\\r\\n', 'output': ['5 5\\r\\n']}, {'input': '20 10\\r\\n-12 28 0 -27 16 25 -17 -25 9 -15 -38 19 33 20 -18 22 14 36 33 29\\r\\n', 'output': ['4 33\\r\\n']}, {'input': '100 100\\r\\n92 -6 67 92 65 -32 67 -31 91 -63 52 -81 -98 -12 48 86 -72 95 -50 66 79 89 -1 0 -33 -27 -23 -71 1 19 14 -61 -39 33 61 -64 91 -99 74 -18 -85 -39 84 74 -23 0 14 25 100 -52 -94 28 18 -81 34 39 -28 0 -25 49 -56 0 57 -2 36 -27 0 -91 -40 12 0 0 73 93 72 -82 47 58 15 0 -71 -58 28 100 -96 12 89 45 97 -79 85 38 -60 0 0 49 32 -30 -68 -93\\r\\n', 'output': ['17 0\\r\\n']}, {'input': '100 1000\\r\\n-281 191 -27 -286 -497 462 0 889 0 -350 -720 -507 916 0 -648 -942 -140 0 0 -877 66 576 -278 410 -792 -607 713 712 296 -828 -488 -129 508 -106 470 -263 -865 -506 -604 334 591 -40 220 0 0 198 -435 374 -34 254 970 0 549 100 555 326 91 0 -361 -835 472 823 -663 -456 0 91 295 126 383 141 476 609 518 545 840 -451 -93 -16 -453 381 647 334 -454 -708 -711 334 -78 -936 462 728 960 725 -424 649 0 246 -310 42 -559 -980\\r\\n', 'output': ['21 0\\r\\n']}, {'input': '1 268900446\\r\\n999999987\\r\\n', 'output': ['1 999999987\\r\\n']}, {'input': '10 93519867\\r\\n-316 313 -318 -307 -305 314 -302 -304 -320 -313\\r\\n', 'output': ['10 314\\r\\n']}, {'input': '100 415583658\\r\\n-90 -91 91 80 94 99 86 -89 89 98 93 -80 99 84 99 90 90 88 85 80 80 -99 84 84 -86 83 83 87 98 97 85 82 81 98 82 80 84 92 -93 98 82 93 90 85 91 90 85 91 -89 88 -84 -85 90 89 89 -93 88 -83 96 88 -86 95 80 92 -92 87 98 83 95 91 83 97 84 82 93 88 96 97 -85 -86 82 98 89 -84 98 81 83 -88 87 97 87 88 93 -99 88 80 90 97 95 90\\r\\n', 'output': ['100 99\\r\\n']}, {'input': '4 100\\r\\n1 1 1 1000000000\\r\\n', 'output': ['3 1\\r\\n']}, {'input': '5 1000\\r\\n1 1 1 1000000000 998756787\\r\\n', 'output': ['3 1\\r\\n']}, {'input': '5 1000000000\\r\\n0 1 2 999999999 999999999\\r\\n', 'output': ['3 2\\r\\n']}, {'input': '4 1000000000\\r\\n0 0 0 1000000000\\r\\n', 'output': ['3 0\\r\\n']}, {'input': '1 0\\r\\n0\\r\\n', 'output': ['1 0\\r\\n']}, {'input': '7 999999990\\r\\n999999999 999999999 999999999 3 4 2 1\\r\\n', 'output': ['4 4\\r\\n']}, {'input': '52 1000000000\\r\\n-1000000000 1000000000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n', 'output': ['51 0\\r\\n']}, {'input': '10 1000000000\\r\\n2 2 2 2 2 2 2 2 2 1000000000\\r\\n', 'output': ['9 2\\r\\n']}]", "source_code": "import java.util.*;\nimport java.io.*;\n\n\npublic class Main {\n\tpublic static void main(String[] args) throws Exception {\n\t\t\n\t\t\n\t\tFastScanner scanner = new FastScanner();\n\t\tint n = scanner.nextInt();\n\t\tint k = scanner.nextInt();\n\t\tint arr[] = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tarr[i]=scanner.nextInt();\n\t\t}\n\t\tint min = 0, max = 0;\n\t\tint count[] = new int [100001];\n\t\t\n\t\tfor(int j = 0 ; j < 100001 ; j++){\n\t\t\tcount[j] = 0 ;\n\t\t}\n\t\t\n\t\t\n\t\tfor(int i = 0 ; i < n ; i++){\n\t\t\tcount[arr[i]] += 1 ;\n\t\t\tif(k == 0){\n\t\t\t\tif(count[arr[i]] > max){\n\t\t\t\t\tmax = count[arr[i]];\n\t\t\t\t\tmin = arr[i];\n\t\t\t\t}\n\t\t\t\telse if(count[arr[i]] == max){\n\t\t\t\t\tif(arr[i] < min){\n\t\t\t\t\t\tmin = arr[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(k == 0){\n\t\t\tSystem.out.println(max + \" \" + min);\n\t\t}\n\t\telse{\n\t\t\tint maxCount = 0 ;\n\t\t\tint minNum = 0 ;\n\t\t\tfor(int i = 0 ; i < count.length ; i++){\n\t\t\t\tmaxCount = count[i];\n\t\t\t\tminNum = i ;\n\t\t\t\tfor(int j = i+1 ; j < count.length ; j++){\n\t\t\t\t\tif(count[j] > maxCount){\n\t\t\t\t\t\tmaxCount = count[j];\n\t\t\t\t\t\tminNum = j ;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcount[i] = maxCount ;\n\t\t\t\tmaxCount = count[i];\n\t\t\t\tcount[j] = minNum ;\n\t\t\t}\n\t\t\t\n\t\t\tfor(int j = 0 ; j < n ; j++){\n\t\t\t\tif(arr[j] == count[0]){\n\t\t\t\t\tarr[j] = count[0] + 1 ;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tk = k + 1 ;\n\t\t\tmax = 0 ;\n\t\t\t\n\t\t\tfor(int j = 0 ; j < n ; j++){\n\t\t\t\tif(k >= arr[j]){\n\t\t\t\t\tk = k - arr[j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tmax = max + 1 ;\n\t\t\t\t\tk = 0 ;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tSystem.out.println(max + \" \" + count[0]);\n\t\t}\n\t}\n\n\tprivate static class FastScanner {\n\t\tprivate final InputStream in = System.in;\n\t\tprivate final byte[] buffer = new byte[1024];\n\t\tprivate int ptr = 0;\n\t\tprivate int buflen = 0;\n\t\tprivate boolean hasNextByte() {\n\t\t\t\tif (ptr < buflen) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t}else{\n\t\t\t\t\t\tptr = 0;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tbuflen = in.read(buffer);\n\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (buflen <= 0) {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t"}
{"src_uid": "3791d1a504b39eb2e72472bcfd9a7e22", "id": 109, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '5 3\\r\\n6 3 4 0 2\\r\\n', 'output': ['3 4\\r\\n']}, {'input': '3 4\\r\\n5 5 5\\r\\n', 'output': ['3 5\\r\\n']}, {'input': '5 3\\r\\n3 1 2 2 1\\r\\n', 'output': ['4 2\\r\\n']}, {'input': '6 0\\r\\n3 2 3 2 3 2\\r\\n', 'output': ['3 2\\r\\n']}, {'input': '10 15\\r\\n1 1 1 4 4 1 4 4 1 4\\r\\n', 'output': ['10 4\\r\\n']}, {'input': '5 100000\\r\\n0 5 5 4 3\\r\\n', 'output': ['5 5\\r\\n']}, {'input': '20 10\\r\\n-12 28 0 -27 16 25 -17 -25 9 -15 -38 19 33 20 -18 22 14 36 33 29\\r\\n', 'output': ['4 33\\r\\n']}, {'input': '100 100\\r\\n92 -6 67 92 65 -32 67 -31 91 -63 52 -81 -98 -12 48 86 -72 95 -50 66 79 89 -1 0 -33 -27 -23 -71 1 19 14 -61 -39 33 61 -64 91 -99 74 -18 -85 -39 84 74 -23 0 14 25 100 -52 -94 28 18 -81 34 39 -28 0 -25 49 -56 0 57 -2 36 -27 0 -91 -40 12 0 0 73 93 72 -82 47 58 15 0 -71 -58 28 100 -96 12 89 45 97 -79 85 38 -60 0 0 49 32 -30 -68 -93\\r\\n', 'output': ['17 0\\r\\n']}, {'input': '100 1000\\r\\n-281 191 -27 -286 -497 462 0 889 0 -350 -720 -507 916 0 -648 -942 -140 0 0 -877 66 576 -278 410 -792 -607 713 712 296 -828 -488 -129 508 -106 470 -263 -865 -506 -604 334 591 -40 220 0 0 198 -435 374 -34 254 970 0 549 100 555 326 91 0 -361 -835 472 823 -663 -456 0 91 295 126 383 141 476 609 518 545 840 -451 -93 -16 -453 381 647 334 -454 -708 -711 334 -78 -936 462 728 960 725 -424 649 0 246 -310 42 -559 -980\\r\\n', 'output': ['21 0\\r\\n']}, {'input': '1 268900446\\r\\n999999987\\r\\n', 'output': ['1 999999987\\r\\n']}, {'input': '10 93519867\\r\\n-316 313 -318 -307 -305 314 -302 -304 -320 -313\\r\\n', 'output': ['10 314\\r\\n']}, {'input': '100 415583658\\r\\n-90 -91 91 80 94 99 86 -89 89 98 93 -80 99 84 99 90 90 88 85 80 80 -99 84 84 -86 83 83 87 98 97 85 82 81 98 82 80 84 92 -93 98 82 93 90 85 91 90 85 91 -89 88 -84 -85 90 89 89 -93 88 -83 96 88 -86 95 80 92 -92 87 98 83 95 91 83 97 84 82 93 88 96 97 -85 -86 82 98 89 -84 98 81 83 -88 87 97 87 88 93 -99 88 80 90 97 95 90\\r\\n', 'output': ['100 99\\r\\n']}, {'input': '4 100\\r\\n1 1 1 1000000000\\r\\n', 'output': ['3 1\\r\\n']}, {'input': '5 1000\\r\\n1 1 1 1000000000 998756787\\r\\n', 'output': ['3 1\\r\\n']}, {'input': '5 1000000000\\r\\n0 1 2 999999999 999999999\\r\\n', 'output': ['3 2\\r\\n']}, {'input': '4 1000000000\\r\\n0 0 0 1000000000\\r\\n', 'output': ['3 0\\r\\n']}, {'input': '1 0\\r\\n0\\r\\n', 'output': ['1 0\\r\\n']}, {'input': '7 999999990\\r\\n999999999 999999999 999999999 3 4 2 1\\r\\n', 'output': ['4 4\\r\\n']}, {'input': '52 1000000000\\r\\n-1000000000 1000000000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n', 'output': ['51 0\\r\\n']}, {'input': '10 1000000000\\r\\n2 2 2 2 2 2 2 2 2 1000000000\\r\\n', 'output': ['9 2\\r\\n']}]", "source_code": "\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class Main {\n\tstatic Scanner sc = new Scanner(System.in);\n\n\tpublic static void main(String[] args) {\n\t\tint n = sc.nextInt(), k = sc.nextInt();\n\t\tint[] a = new int[n], b = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tb = a.clone();\n\t\tint min = 0, max = 0, m = 0;\n\t\tfor (int j = 1; j <= k; j++) {\n\t\t\tmin = 100000001;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif (a[i] < min)\n\t\t\t\t\tmin = a[i];\n\t\t\t}\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif (a[i] == min) {\n\t\t\t\t\ta[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint c = 0;\n\t\t\twhile ((b[i] = a[i]) == (b[++c] = a[c])) {\n\t\t\t}\n\t\t\tif ((max = c) == 0)\n\t\t\t\tm++;\n\t\t}\n\t\tint max2 = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (max2 < b[i]) {\n\t\t\t\tmax2 = b[i];\n\t\t\t}\n\t\t}\n\t\tif (m == 0)\n\t\t\tSystem.out.println(max + \" \" + max2);\n\t\telse\n\t\t\tSystem.out.println(max + \" \" + b[0]);\n\t}\n}"}
{"src_uid": "3791d1a504b39eb2e72472bcfd9a7e22", "id": 109, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '5 3\\r\\n6 3 4 0 2\\r\\n', 'output': ['3 4\\r\\n']}, {'input': '3 4\\r\\n5 5 5\\r\\n', 'output': ['3 5\\r\\n']}, {'input': '5 3\\r\\n3 1 2 2 1\\r\\n', 'output': ['4 2\\r\\n']}, {'input': '6 0\\r\\n3 2 3 2 3 2\\r\\n', 'output': ['3 2\\r\\n']}, {'input': '10 15\\r\\n1 1 1 4 4 1 4 4 1 4\\r\\n', 'output': ['10 4\\r\\n']}, {'input': '5 100000\\r\\n0 5 5 4 3\\r\\n', 'output': ['5 5\\r\\n']}, {'input': '20 10\\r\\n-12 28 0 -27 16 25 -17 -25 9 -15 -38 19 33 20 -18 22 14 36 33 29\\r\\n', 'output': ['4 33\\r\\n']}, {'input': '100 100\\r\\n92 -6 67 92 65 -32 67 -31 91 -63 52 -81 -98 -12 48 86 -72 95 -50 66 79 89 -1 0 -33 -27 -23 -71 1 19 14 -61 -39 33 61 -64 91 -99 74 -18 -85 -39 84 74 -23 0 14 25 100 -52 -94 28 18 -81 34 39 -28 0 -25 49 -56 0 57 -2 36 -27 0 -91 -40 12 0 0 73 93 72 -82 47 58 15 0 -71 -58 28 100 -96 12 89 45 97 -79 85 38 -60 0 0 49 32 -30 -68 -93\\r\\n', 'output': ['17 0\\r\\n']}, {'input': '100 1000\\r\\n-281 191 -27 -286 -497 462 0 889 0 -350 -720 -507 916 0 -648 -942 -140 0 0 -877 66 576 -278 410 -792 -607 713 712 296 -828 -488 -129 508 -106 470 -263 -865 -506 -604 334 591 -40 220 0 0 198 -435 374 -34 254 970 0 549 100 555 326 91 0 -361 -835 472 823 -663 -456 0 91 295 126 383 141 476 609 518 545 840 -451 -93 -16 -453 381 647 334 -454 -708 -711 334 -78 -936 462 728 960 725 -424 649 0 246 -310 42 -559 -980\\r\\n', 'output': ['21 0\\r\\n']}, {'input': '1 268900446\\r\\n999999987\\r\\n', 'output': ['1 999999987\\r\\n']}, {'input': '10 93519867\\r\\n-316 313 -318 -307 -305 314 -302 -304 -320 -313\\r\\n', 'output': ['10 314\\r\\n']}, {'input': '100 415583658\\r\\n-90 -91 91 80 94 99 86 -89 89 98 93 -80 99 84 99 90 90 88 85 80 80 -99 84 84 -86 83 83 87 98 97 85 82 81 98 82 80 84 92 -93 98 82 93 90 85 91 90 85 91 -89 88 -84 -85 90 89 89 -93 88 -83 96 88 -86 95 80 92 -92 87 98 83 95 91 83 97 84 82 93 88 96 97 -85 -86 82 98 89 -84 98 81 83 -88 87 97 87 88 93 -99 88 80 90 97 95 90\\r\\n', 'output': ['100 99\\r\\n']}, {'input': '4 100\\r\\n1 1 1 1000000000\\r\\n', 'output': ['3 1\\r\\n']}, {'input': '5 1000\\r\\n1 1 1 1000000000 998756787\\r\\n', 'output': ['3 1\\r\\n']}, {'input': '5 1000000000\\r\\n0 1 2 999999999 999999999\\r\\n', 'output': ['3 2\\r\\n']}, {'input': '4 1000000000\\r\\n0 0 0 1000000000\\r\\n', 'output': ['3 0\\r\\n']}, {'input': '1 0\\r\\n0\\r\\n', 'output': ['1 0\\r\\n']}, {'input': '7 999999990\\r\\n999999999 999999999 999999999 3 4 2 1\\r\\n', 'output': ['4 4\\r\\n']}, {'input': '52 1000000000\\r\\n-1000000000 1000000000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n', 'output': ['51 0\\r\\n']}, {'input': '10 1000000000\\r\\n2 2 2 2 2 2 2 2 2 1000000000\\r\\n', 'output': ['9 2\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Number {\n\tpublic static void main(String[] args) {\n\t\tScanner in=new Scanner(System.in);\n\t\tint n=in.nextInt(),k=in.nextInt(),a[][]=new int[2][n];\n\t\tfor(int i=0;i<n;i++)a[0][i]=in.nextInt();\n\t\tint min=Integer.MAX_VALUE;\n\t\tint count=0,max=Integer.MIN_VALUE;\n\t\twhile(k-->0) {\n\t\t\tfor(int j=0;j<n;j++) {\n\t\t\t\tif(a[0][j]<a[1][j]) {\n\t\t\t\t\tcount=0;\n\t\t\t\t\tfor(int l=0;l<n;l++) {\n\t\t\t\t\t\tif(a[0][l]==a[1][j])count++;\n\t\t\t\t\t}\n\t\t\t\t\tif(count>max) {\n\t\t\t\t\t\tmax=count;\n\t\t\t\t\t\tmin=a[1][j];\n\t\t\t\t\t}\n\t\t\t\t\ta[1][j]+=1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int q=0;q<n;q++)a[0][q]=a[1][q];\n\t\t\tcount=0;\n\t\t}\n\t\tfor(int q=0;q<n;q++) {\n\t\t\tif(a[0][q]==min)count++;\n\t\t}\n\t\tSystem.out.println(count+\" \"+min);\n\t}\n}\n"}
{"src_uid": "a6cba17c5ddb93f6741e00280fb6c54c", "id": 110, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '6 10\\r\\nalloc 5\\r\\nalloc 3\\r\\nerase 1\\r\\nalloc 6\\r\\ndefragment\\r\\nalloc 6\\r\\n', 'output': ['1\\r\\n2\\r\\nNULL\\r\\n3\\r\\n']}, {'input': '6 1\\r\\ndefragment\\r\\nalloc 10\\r\\nalloc 1\\r\\nerase -1\\r\\nerase 1\\r\\nerase 1\\r\\n', 'output': ['NULL\\r\\n1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '14 100\\r\\nalloc 99\\r\\nalloc 1\\r\\nalloc 1\\r\\nerase 2\\r\\nalloc 1\\r\\nerase 4\\r\\nerase 1\\r\\nalloc 100\\r\\nalloc 1\\r\\nalloc 99\\r\\ndefragment\\r\\nerase 4\\r\\nalloc 100\\r\\nalloc 99\\r\\n', 'output': ['1\\r\\n2\\r\\nNULL\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n4\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\n']}, {'input': '26 25\\r\\ndefragment\\r\\nerase 1\\r\\nerase -1560200883\\r\\nalloc 44\\r\\ndefragment\\r\\nalloc 75\\r\\nalloc 22\\r\\ndefragment\\r\\nerase 4\\r\\ndefragment\\r\\nalloc 57\\r\\nalloc 53\\r\\nerase 4\\r\\nerase -1639632026\\r\\nerase -2121605039\\r\\nerase 3\\r\\nalloc 51\\r\\nalloc 65\\r\\ndefragment\\r\\nerase 2\\r\\nerase 4\\r\\nalloc 52\\r\\nerase 3\\r\\ndefragment\\r\\nerase -1842529282\\r\\nerase 3\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\n1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '22 9\\r\\nerase 1\\r\\nalloc 6\\r\\nalloc 65\\r\\nerase 1\\r\\nalloc 87\\r\\nerase -1638927047\\r\\nalloc 5\\r\\nerase 2\\r\\nalloc 70\\r\\ndefragment\\r\\nalloc 20\\r\\nalloc 48\\r\\nerase -69401977\\r\\nalloc 20\\r\\ndefragment\\r\\nerase 7\\r\\ndefragment\\r\\nerase 9\\r\\nerase 7\\r\\nerase 4\\r\\ndefragment\\r\\nalloc 66\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\n1\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n']}, {'input': '12 40\\r\\nerase 1\\r\\nalloc 21\\r\\nalloc 5\\r\\nalloc 7\\r\\ndefragment\\r\\ndefragment\\r\\nerase 2\\r\\nalloc 83\\r\\nerase 4\\r\\ndefragment\\r\\nalloc 59\\r\\ndefragment\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\n1\\r\\n2\\r\\n3\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n']}, {'input': '38 18\\r\\nalloc 72\\r\\nerase 2\\r\\nalloc 50\\r\\ndefragment\\r\\nerase 3\\r\\ndefragment\\r\\nalloc 43\\r\\nalloc 41\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 26\\r\\nalloc 46\\r\\nalloc 16\\r\\nalloc 15\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 95\\r\\nerase 7\\r\\nerase 7\\r\\nerase 5\\r\\nerase 2\\r\\nerase 9\\r\\nerase 7\\r\\nalloc 43\\r\\ndefragment\\r\\nerase 7\\r\\ndefragment\\r\\nalloc 48\\r\\nalloc 77\\r\\nerase 10\\r\\nerase 11\\r\\nalloc 16\\r\\nalloc 84\\r\\nerase 1\\r\\ndefragment\\r\\nalloc 86\\r\\ndefragment\\r\\nerase 13\\r\\n', 'output': ['NULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\n1\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '37 74\\r\\nalloc 11\\r\\ndefragment\\r\\nerase 1\\r\\ndefragment\\r\\nerase 2\\r\\ndefragment\\r\\nalloc 90\\r\\nerase 3\\r\\nerase 2\\r\\nerase 3\\r\\nerase 1\\r\\nerase 1\\r\\nalloc 38\\r\\nalloc 19\\r\\nerase 1\\r\\nerase 3\\r\\ndefragment\\r\\nalloc 93\\r\\nerase 5\\r\\nerase 4\\r\\nalloc 66\\r\\nalloc 71\\r\\nerase 5\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nerase 7\\r\\nalloc 47\\r\\nerase -95616683\\r\\nerase 2\\r\\nalloc 28\\r\\nalloc 32\\r\\nerase 11\\r\\nalloc 50\\r\\ndefragment\\r\\ndefragment\\r\\n', 'output': ['1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n4\\r\\n5\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n']}, {'input': '16 49\\r\\nerase -751005193\\r\\ndefragment\\r\\nalloc 37\\r\\nalloc 82\\r\\nerase 3\\r\\nerase 1\\r\\nalloc 80\\r\\nalloc 51\\r\\ndefragment\\r\\nalloc 74\\r\\nerase 1\\r\\nalloc 91\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 98\\r\\ndefragment\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\n1\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\n']}, {'input': '42 98\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 5\\r\\nalloc 66\\r\\ndefragment\\r\\nerase 3\\r\\nalloc 53\\r\\ndefragment\\r\\nerase 4\\r\\nerase 2\\r\\nalloc 70\\r\\nerase 3\\r\\ndefragment\\r\\ndefragment\\r\\nerase 2\\r\\nerase 3\\r\\nerase -1327931832\\r\\nalloc 93\\r\\nalloc 64\\r\\nerase 7\\r\\nerase 6\\r\\nerase 3\\r\\nalloc 61\\r\\nalloc 12\\r\\nalloc 65\\r\\nerase 2\\r\\nalloc 46\\r\\nerase 11\\r\\nerase 9\\r\\nerase 9\\r\\nerase 6\\r\\nalloc 2\\r\\nalloc 78\\r\\ndefragment\\r\\nerase 13\\r\\nerase 6\\r\\nerase 10\\r\\nalloc 53\\r\\nalloc 46\\r\\n', 'output': ['1\\r\\n2\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n4\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\n']}, {'input': '19 46\\r\\nalloc 21\\r\\nerase 2\\r\\nerase 1\\r\\ndefragment\\r\\nalloc 4\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 40\\r\\nerase 1\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 68\\r\\nerase -388966015\\r\\nalloc 85\\r\\nalloc 53\\r\\nerase 4\\r\\ndefragment\\r\\nalloc 49\\r\\nalloc 88\\r\\n', 'output': ['1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\n']}, {'input': '44 46\\r\\nalloc 28\\r\\nalloc 36\\r\\ndefragment\\r\\nerase -937404236\\r\\nalloc 71\\r\\ndefragment\\r\\nalloc 81\\r\\nalloc 51\\r\\nerase 3\\r\\ndefragment\\r\\nalloc 48\\r\\nerase 1\\r\\ndefragment\\r\\nalloc 36\\r\\ndefragment\\r\\ndefragment\\r\\nerase 1\\r\\ndefragment\\r\\ndefragment\\r\\nerase -1173350787\\r\\nalloc 94\\r\\nerase 5\\r\\ndefragment\\r\\nerase 9\\r\\nalloc 98\\r\\nerase 7\\r\\ndefragment\\r\\nerase 5\\r\\nerase 1\\r\\ndefragment\\r\\nerase 2\\r\\ndefragment\\r\\nerase 4\\r\\ndefragment\\r\\nerase 9\\r\\nalloc 8\\r\\ndefragment\\r\\nerase 9\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nerase 1\\r\\nalloc 70\\r\\nerase 9\\r\\n', 'output': ['1\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n2\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '26 25\\r\\nalloc 25\\r\\nerase 1\\r\\nalloc 24\\r\\nerase 2\\r\\nalloc 23\\r\\nerase 3\\r\\nalloc 24\\r\\nerase 4\\r\\nalloc 24\\r\\nerase 5\\r\\nalloc 21\\r\\nerase 6\\r\\nalloc 24\\r\\nerase 7\\r\\nalloc 25\\r\\nerase 8\\r\\nalloc 25\\r\\nerase 9\\r\\nalloc 24\\r\\nerase 10\\r\\nalloc 25\\r\\nerase 11\\r\\nalloc 25\\r\\nerase 12\\r\\nalloc 25\\r\\nerase 13\\r\\n', 'output': ['1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\n6\\r\\n7\\r\\n8\\r\\n9\\r\\n10\\r\\n11\\r\\n12\\r\\n13\\r\\n']}, {'input': '22 9\\r\\nalloc 9\\r\\nerase 1\\r\\nalloc 9\\r\\nerase 2\\r\\nalloc 9\\r\\nerase 3\\r\\nalloc 9\\r\\nerase 4\\r\\nalloc 9\\r\\nerase 5\\r\\nalloc 9\\r\\nerase 6\\r\\nalloc 9\\r\\nerase 7\\r\\nalloc 9\\r\\nerase 8\\r\\nalloc 9\\r\\nerase 9\\r\\nalloc 9\\r\\nerase 10\\r\\nalloc 9\\r\\nerase 11\\r\\n', 'output': ['1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\n6\\r\\n7\\r\\n8\\r\\n9\\r\\n10\\r\\n11\\r\\n']}, {'input': '7 6\\r\\nalloc 1\\r\\nalloc 2\\r\\nalloc 3\\r\\nerase 1\\r\\ndefragment\\r\\nerase 3\\r\\nalloc 4\\r\\n', 'output': ['1\\r\\n2\\r\\n3\\r\\n4\\r\\n']}, {'input': '3 1\\r\\nerase -1\\r\\nerase 0\\r\\nerase -2147483648\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '7 100\\r\\nalloc 100\\r\\nerase 2147483647\\r\\nerase 1\\r\\nalloc 50\\r\\nalloc 50\\r\\nerase 3\\r\\nerase -2147483648\\r\\n', 'output': ['1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '12 10\\r\\nalloc 6\\r\\nalloc 2\\r\\nerase 1\\r\\nalloc 4\\r\\nalloc 2\\r\\nerase 3\\r\\nalloc 2\\r\\nalloc 3\\r\\nalloc 1\\r\\nalloc 1\\r\\nalloc 1\\r\\nalloc 1\\r\\n', 'output': ['1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\nNULL\\r\\n6\\r\\n7\\r\\n8\\r\\n9\\r\\n']}, {'input': '8 50\\r\\nalloc 51\\r\\ndefragment\\r\\nalloc 100\\r\\ndefragment\\r\\nerase 1\\r\\nalloc 50\\r\\ndefragment\\r\\nalloc 50\\r\\n', 'output': ['NULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n1\\r\\nNULL\\r\\n']}, {'input': '10 10\\r\\nalloc 10\\r\\nerase -1\\r\\nerase 1\\r\\nalloc 5\\r\\nerase -1\\r\\nalloc 5\\r\\nerase 0\\r\\nalloc 5\\r\\nerase 0\\r\\nalloc 5\\r\\n', 'output': ['1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n']}, {'input': '16 10\\r\\nalloc 10\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 10\\r\\nerase 1\\r\\nerase 2\\r\\nalloc 6\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 4\\r\\ndefragment\\r\\ndefragment\\r\\nerase 3\\r\\ndefragment\\r\\nalloc 6\\r\\n', 'output': ['1\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\nNULL\\r\\n']}, {'input': '16 10\\r\\nalloc 10\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 10\\r\\nerase 1\\r\\nerase 2\\r\\nalloc 6\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 4\\r\\ndefragment\\r\\ndefragment\\r\\nerase 2\\r\\ndefragment\\r\\nalloc 6\\r\\n', 'output': ['1\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\n4\\r\\n']}]", "source_code": "import java.io.*;\n\nclass Reader \n{ \n  static BufferedReader reader; \n  static StringTokenizer tokenizer; \n\n  //call this method to initialize reader for InputStream \n  static void init(InputStream input) throws IOException \n  { \n    reader = new BufferedReader(new InputStreamReader(input)); \n    tokenizer = new StringTokenizer(\"\"); \n  } \n\n  //get next word \n  static String next() throws IOException \n  { \n    while (tokenizer.hasMoreTokens() == false) \n    { \n      //TODO add check for eof if necessary \n      tokenizer = new StringTokenizer(reader.readLine()); \n    } \n    return tokenizer.nextToken(); \n  } \n\n  static int nextInt() throws IOException \n  { \n    return Integer.parseInt(next()); \n  } \n\n  static double nextDouble() throws IOException \n  { \n    return Double.parseDouble(next()); \n  } \n} \n\nclass Memory \n{ \n  static int n,t,mem[];\n  static String s,m,e,s1=\"alloc\",s2=\"erase\",s3=\"defragment\";\n  \n  public static void main(String[] args) throws IOException \n  { \n    // TODO Auto-generated method stub \n    Reader.init(System.in);\n    \n    n=Reader.nextInt();\n    t=Reader.nextInt();\n    mem=new int[t+1];\n    for(int i=0;i<=t;i++){\n    \tmem[i]=-1;\n    }\n    \n    for(int i=0;i<n;i++){\n      s=Reader.next();\n      if(s.equals(s1)){\n      \tm=Reader.next();\n      \tint s3,s4;\n      \ts3=Integer.parseInt(m);\n      \tif(s3>0&&s3<=t){\n      \t\ts4=mem[s3];\n      \t\tif(s4!=-1)\n      \t\t\tSystem.out.println((s4-1));\n      \t\telse{\n      \t\t\tif((s3+s3)<=t)\n      \t\t\t\tmem[s3]=mem[s3+s3];\n      \t\t\tmem[s3]=s3+1;\n      \t\t\tSystem.out.println(s3+1);\n      \t\t}\n      }\n      \telse\n      \t\tSystem.out.println(\"NULL\");\n      }\n      else if(s.equals(s2)){\n      \tm=Reader.next();\n      \te=Integer.parseInt(m);\n      \tif(mem[e]!=-1){\n      \t\tmem[e]=-1;\n      \t\tSystem.out.println(\"\");\n      \t}\n      \telse\n      \t\tSystem.out.println(\"ILLEGAL_ERASE_ARGUMENT\");\n      }\n      else if(s.equals(s3)){\n      \tfor(int j=1;j<mem.length;j++){\n      \t\tif(mem[j]!=-1)\n      \t\t\tmem[j]=mem[j+1];\n      \t\tmem[t-j+1]=-1;\n      \t}\n      \tfor(int j=1;j<=t;j++){\n      \t\tif(mem[j]!=-1)\n      \t\t\tmem[j]=(j+mem[j])+1;\n      \t\telse\n      \t\t\tmem[j]=-1;\n      \t}\n      }\n    } \n  } \n}\n"}
{"src_uid": "a6cba17c5ddb93f6741e00280fb6c54c", "id": 110, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '6 10\\r\\nalloc 5\\r\\nalloc 3\\r\\nerase 1\\r\\nalloc 6\\r\\ndefragment\\r\\nalloc 6\\r\\n', 'output': ['1\\r\\n2\\r\\nNULL\\r\\n3\\r\\n']}, {'input': '6 1\\r\\ndefragment\\r\\nalloc 10\\r\\nalloc 1\\r\\nerase -1\\r\\nerase 1\\r\\nerase 1\\r\\n', 'output': ['NULL\\r\\n1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '14 100\\r\\nalloc 99\\r\\nalloc 1\\r\\nalloc 1\\r\\nerase 2\\r\\nalloc 1\\r\\nerase 4\\r\\nerase 1\\r\\nalloc 100\\r\\nalloc 1\\r\\nalloc 99\\r\\ndefragment\\r\\nerase 4\\r\\nalloc 100\\r\\nalloc 99\\r\\n', 'output': ['1\\r\\n2\\r\\nNULL\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n4\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\n']}, {'input': '26 25\\r\\ndefragment\\r\\nerase 1\\r\\nerase -1560200883\\r\\nalloc 44\\r\\ndefragment\\r\\nalloc 75\\r\\nalloc 22\\r\\ndefragment\\r\\nerase 4\\r\\ndefragment\\r\\nalloc 57\\r\\nalloc 53\\r\\nerase 4\\r\\nerase -1639632026\\r\\nerase -2121605039\\r\\nerase 3\\r\\nalloc 51\\r\\nalloc 65\\r\\ndefragment\\r\\nerase 2\\r\\nerase 4\\r\\nalloc 52\\r\\nerase 3\\r\\ndefragment\\r\\nerase -1842529282\\r\\nerase 3\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\n1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '22 9\\r\\nerase 1\\r\\nalloc 6\\r\\nalloc 65\\r\\nerase 1\\r\\nalloc 87\\r\\nerase -1638927047\\r\\nalloc 5\\r\\nerase 2\\r\\nalloc 70\\r\\ndefragment\\r\\nalloc 20\\r\\nalloc 48\\r\\nerase -69401977\\r\\nalloc 20\\r\\ndefragment\\r\\nerase 7\\r\\ndefragment\\r\\nerase 9\\r\\nerase 7\\r\\nerase 4\\r\\ndefragment\\r\\nalloc 66\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\n1\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n']}, {'input': '12 40\\r\\nerase 1\\r\\nalloc 21\\r\\nalloc 5\\r\\nalloc 7\\r\\ndefragment\\r\\ndefragment\\r\\nerase 2\\r\\nalloc 83\\r\\nerase 4\\r\\ndefragment\\r\\nalloc 59\\r\\ndefragment\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\n1\\r\\n2\\r\\n3\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n']}, {'input': '38 18\\r\\nalloc 72\\r\\nerase 2\\r\\nalloc 50\\r\\ndefragment\\r\\nerase 3\\r\\ndefragment\\r\\nalloc 43\\r\\nalloc 41\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 26\\r\\nalloc 46\\r\\nalloc 16\\r\\nalloc 15\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 95\\r\\nerase 7\\r\\nerase 7\\r\\nerase 5\\r\\nerase 2\\r\\nerase 9\\r\\nerase 7\\r\\nalloc 43\\r\\ndefragment\\r\\nerase 7\\r\\ndefragment\\r\\nalloc 48\\r\\nalloc 77\\r\\nerase 10\\r\\nerase 11\\r\\nalloc 16\\r\\nalloc 84\\r\\nerase 1\\r\\ndefragment\\r\\nalloc 86\\r\\ndefragment\\r\\nerase 13\\r\\n', 'output': ['NULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\n1\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '37 74\\r\\nalloc 11\\r\\ndefragment\\r\\nerase 1\\r\\ndefragment\\r\\nerase 2\\r\\ndefragment\\r\\nalloc 90\\r\\nerase 3\\r\\nerase 2\\r\\nerase 3\\r\\nerase 1\\r\\nerase 1\\r\\nalloc 38\\r\\nalloc 19\\r\\nerase 1\\r\\nerase 3\\r\\ndefragment\\r\\nalloc 93\\r\\nerase 5\\r\\nerase 4\\r\\nalloc 66\\r\\nalloc 71\\r\\nerase 5\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nerase 7\\r\\nalloc 47\\r\\nerase -95616683\\r\\nerase 2\\r\\nalloc 28\\r\\nalloc 32\\r\\nerase 11\\r\\nalloc 50\\r\\ndefragment\\r\\ndefragment\\r\\n', 'output': ['1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n4\\r\\n5\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n']}, {'input': '16 49\\r\\nerase -751005193\\r\\ndefragment\\r\\nalloc 37\\r\\nalloc 82\\r\\nerase 3\\r\\nerase 1\\r\\nalloc 80\\r\\nalloc 51\\r\\ndefragment\\r\\nalloc 74\\r\\nerase 1\\r\\nalloc 91\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 98\\r\\ndefragment\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\n1\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\n']}, {'input': '42 98\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 5\\r\\nalloc 66\\r\\ndefragment\\r\\nerase 3\\r\\nalloc 53\\r\\ndefragment\\r\\nerase 4\\r\\nerase 2\\r\\nalloc 70\\r\\nerase 3\\r\\ndefragment\\r\\ndefragment\\r\\nerase 2\\r\\nerase 3\\r\\nerase -1327931832\\r\\nalloc 93\\r\\nalloc 64\\r\\nerase 7\\r\\nerase 6\\r\\nerase 3\\r\\nalloc 61\\r\\nalloc 12\\r\\nalloc 65\\r\\nerase 2\\r\\nalloc 46\\r\\nerase 11\\r\\nerase 9\\r\\nerase 9\\r\\nerase 6\\r\\nalloc 2\\r\\nalloc 78\\r\\ndefragment\\r\\nerase 13\\r\\nerase 6\\r\\nerase 10\\r\\nalloc 53\\r\\nalloc 46\\r\\n', 'output': ['1\\r\\n2\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n4\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\n']}, {'input': '19 46\\r\\nalloc 21\\r\\nerase 2\\r\\nerase 1\\r\\ndefragment\\r\\nalloc 4\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 40\\r\\nerase 1\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 68\\r\\nerase -388966015\\r\\nalloc 85\\r\\nalloc 53\\r\\nerase 4\\r\\ndefragment\\r\\nalloc 49\\r\\nalloc 88\\r\\n', 'output': ['1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\n']}, {'input': '44 46\\r\\nalloc 28\\r\\nalloc 36\\r\\ndefragment\\r\\nerase -937404236\\r\\nalloc 71\\r\\ndefragment\\r\\nalloc 81\\r\\nalloc 51\\r\\nerase 3\\r\\ndefragment\\r\\nalloc 48\\r\\nerase 1\\r\\ndefragment\\r\\nalloc 36\\r\\ndefragment\\r\\ndefragment\\r\\nerase 1\\r\\ndefragment\\r\\ndefragment\\r\\nerase -1173350787\\r\\nalloc 94\\r\\nerase 5\\r\\ndefragment\\r\\nerase 9\\r\\nalloc 98\\r\\nerase 7\\r\\ndefragment\\r\\nerase 5\\r\\nerase 1\\r\\ndefragment\\r\\nerase 2\\r\\ndefragment\\r\\nerase 4\\r\\ndefragment\\r\\nerase 9\\r\\nalloc 8\\r\\ndefragment\\r\\nerase 9\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nerase 1\\r\\nalloc 70\\r\\nerase 9\\r\\n', 'output': ['1\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n2\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '26 25\\r\\nalloc 25\\r\\nerase 1\\r\\nalloc 24\\r\\nerase 2\\r\\nalloc 23\\r\\nerase 3\\r\\nalloc 24\\r\\nerase 4\\r\\nalloc 24\\r\\nerase 5\\r\\nalloc 21\\r\\nerase 6\\r\\nalloc 24\\r\\nerase 7\\r\\nalloc 25\\r\\nerase 8\\r\\nalloc 25\\r\\nerase 9\\r\\nalloc 24\\r\\nerase 10\\r\\nalloc 25\\r\\nerase 11\\r\\nalloc 25\\r\\nerase 12\\r\\nalloc 25\\r\\nerase 13\\r\\n', 'output': ['1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\n6\\r\\n7\\r\\n8\\r\\n9\\r\\n10\\r\\n11\\r\\n12\\r\\n13\\r\\n']}, {'input': '22 9\\r\\nalloc 9\\r\\nerase 1\\r\\nalloc 9\\r\\nerase 2\\r\\nalloc 9\\r\\nerase 3\\r\\nalloc 9\\r\\nerase 4\\r\\nalloc 9\\r\\nerase 5\\r\\nalloc 9\\r\\nerase 6\\r\\nalloc 9\\r\\nerase 7\\r\\nalloc 9\\r\\nerase 8\\r\\nalloc 9\\r\\nerase 9\\r\\nalloc 9\\r\\nerase 10\\r\\nalloc 9\\r\\nerase 11\\r\\n', 'output': ['1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\n6\\r\\n7\\r\\n8\\r\\n9\\r\\n10\\r\\n11\\r\\n']}, {'input': '7 6\\r\\nalloc 1\\r\\nalloc 2\\r\\nalloc 3\\r\\nerase 1\\r\\ndefragment\\r\\nerase 3\\r\\nalloc 4\\r\\n', 'output': ['1\\r\\n2\\r\\n3\\r\\n4\\r\\n']}, {'input': '3 1\\r\\nerase -1\\r\\nerase 0\\r\\nerase -2147483648\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '7 100\\r\\nalloc 100\\r\\nerase 2147483647\\r\\nerase 1\\r\\nalloc 50\\r\\nalloc 50\\r\\nerase 3\\r\\nerase -2147483648\\r\\n', 'output': ['1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '12 10\\r\\nalloc 6\\r\\nalloc 2\\r\\nerase 1\\r\\nalloc 4\\r\\nalloc 2\\r\\nerase 3\\r\\nalloc 2\\r\\nalloc 3\\r\\nalloc 1\\r\\nalloc 1\\r\\nalloc 1\\r\\nalloc 1\\r\\n', 'output': ['1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\nNULL\\r\\n6\\r\\n7\\r\\n8\\r\\n9\\r\\n']}, {'input': '8 50\\r\\nalloc 51\\r\\ndefragment\\r\\nalloc 100\\r\\ndefragment\\r\\nerase 1\\r\\nalloc 50\\r\\ndefragment\\r\\nalloc 50\\r\\n', 'output': ['NULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n1\\r\\nNULL\\r\\n']}, {'input': '10 10\\r\\nalloc 10\\r\\nerase -1\\r\\nerase 1\\r\\nalloc 5\\r\\nerase -1\\r\\nalloc 5\\r\\nerase 0\\r\\nalloc 5\\r\\nerase 0\\r\\nalloc 5\\r\\n', 'output': ['1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n']}, {'input': '16 10\\r\\nalloc 10\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 10\\r\\nerase 1\\r\\nerase 2\\r\\nalloc 6\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 4\\r\\ndefragment\\r\\ndefragment\\r\\nerase 3\\r\\ndefragment\\r\\nalloc 6\\r\\n', 'output': ['1\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\nNULL\\r\\n']}, {'input': '16 10\\r\\nalloc 10\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 10\\r\\nerase 1\\r\\nerase 2\\r\\nalloc 6\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 4\\r\\ndefragment\\r\\ndefragment\\r\\nerase 2\\r\\ndefragment\\r\\nalloc 6\\r\\n', 'output': ['1\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\n4\\r\\n']}]", "source_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws NumberFormatException,\n\t\t\tIOException {\n\t\t\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t\n\t\tString [] temp = br.readLine().split(\" \");\n\t\tint t = Integer.valueOf(temp[0]);\n\t\tint m = Integer.valueOf(temp[1]);\n\t\tint [] usedBlock = new int [m/10];\n\t\tfor(int k = 0; k < usedBlock.length; k++){\n\t\t\tusedBlock[k] = 0;\n\t\t}\n\t\tboolean flag = true;\n\t\tfor(int i = 0; i < t; i++){\n\t\t\ttemp = br.readLine().split(\" \");\n\t\t\t\n\t\t\tif(temp[0].equals(\"alloc\")){\n\t\t\t\tint n = Integer.valueOf(temp[1]);\n\t\t\t\tint flag2 = 1;\n\t\t\t\tfor(int j = 0; j < usedBlock.length; j++){\n\t\t\t\t\tif(flag && n <= 10 && usedBlock[j] == 0){\n\t\t\t\t\t\tSystem.out.println(j+1);\n\t\t\t\t\t\tflag = false;\n\t\t\t\t\t\tusedBlock[j] = n;\n\t\t\t\t\t\tflag2 = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}else if( n <= 10 && usedBlock[j]!= 0 && usedBlock[j] >= n && usedBlock[j] < usedBlock[k]){\n\t\t\t\t\t\tSystem.out.println(j+1);\n\t\t\t\t\t\tusedBlock[j] = n;\n\t\t\t\t\t\tflag2 = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tif(flag2 == 1){\n\t\t\t\t\tSystem.out.println(\"NULL\");\n\t\t\t\t}\n\t\t\t}else if(temp[0].equals(\"erase\")){\n\t\t\t\tint kk = Integer.valueOf(temp[1]);\n\t\t\t\tboolean flag1 = true;\n\t\t\t\tfor(int j = 0; j < usedBlock.length; j++){\n\t\t\t\t\tif(kk == j+1){\n\t\t\t\t\t\tif(usedBlock[j]!= 0){\n\t\t\t\t\t\t\tflag1 = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(flag1 == true){\n\t\t\t\t\tSystem.out.println(\"ILLEGAL_ERASE_ARGUMENT\");\n\t\t\t\t}else{\n\t\t\t\t\tfor(int j = 0; j < usedBlock.length; j++){\n\t\t\t\t\t\tif(usedBlock[j]!= 0 && usedBlock[j] < usedBlock[k]){\n\t\t\t\t\t\t\tusedBlock[j] = usedBlock[j] + usedBlock[k];\n\t\t\t\t\t\t\tusedBlock[k] = 0;\n\t\t\t\t\t\t}else if(usedBlock[j]!= 0){\n\t\t\t\t\t\t\tusedBlock[k] = usedBlock[j];\n\t\t\t\t\t\t\tusedBlock[j] = 0;\n\t\t\t\t\t\t\tk = j;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tfor(int j = 0; j < usedBlock.length; j++){\n\t\t\t\t\tusedBlock[j] = 0;\n\t\t\t\t}\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n"}
{"src_uid": "a6cba17c5ddb93f6741e00280fb6c54c", "id": 110, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '6 10\\r\\nalloc 5\\r\\nalloc 3\\r\\nerase 1\\r\\nalloc 6\\r\\ndefragment\\r\\nalloc 6\\r\\n', 'output': ['1\\r\\n2\\r\\nNULL\\r\\n3\\r\\n']}, {'input': '6 1\\r\\ndefragment\\r\\nalloc 10\\r\\nalloc 1\\r\\nerase -1\\r\\nerase 1\\r\\nerase 1\\r\\n', 'output': ['NULL\\r\\n1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '14 100\\r\\nalloc 99\\r\\nalloc 1\\r\\nalloc 1\\r\\nerase 2\\r\\nalloc 1\\r\\nerase 4\\r\\nerase 1\\r\\nalloc 100\\r\\nalloc 1\\r\\nalloc 99\\r\\ndefragment\\r\\nerase 4\\r\\nalloc 100\\r\\nalloc 99\\r\\n', 'output': ['1\\r\\n2\\r\\nNULL\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n4\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\n']}, {'input': '26 25\\r\\ndefragment\\r\\nerase 1\\r\\nerase -1560200883\\r\\nalloc 44\\r\\ndefragment\\r\\nalloc 75\\r\\nalloc 22\\r\\ndefragment\\r\\nerase 4\\r\\ndefragment\\r\\nalloc 57\\r\\nalloc 53\\r\\nerase 4\\r\\nerase -1639632026\\r\\nerase -2121605039\\r\\nerase 3\\r\\nalloc 51\\r\\nalloc 65\\r\\ndefragment\\r\\nerase 2\\r\\nerase 4\\r\\nalloc 52\\r\\nerase 3\\r\\ndefragment\\r\\nerase -1842529282\\r\\nerase 3\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\n1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '22 9\\r\\nerase 1\\r\\nalloc 6\\r\\nalloc 65\\r\\nerase 1\\r\\nalloc 87\\r\\nerase -1638927047\\r\\nalloc 5\\r\\nerase 2\\r\\nalloc 70\\r\\ndefragment\\r\\nalloc 20\\r\\nalloc 48\\r\\nerase -69401977\\r\\nalloc 20\\r\\ndefragment\\r\\nerase 7\\r\\ndefragment\\r\\nerase 9\\r\\nerase 7\\r\\nerase 4\\r\\ndefragment\\r\\nalloc 66\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\n1\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n']}, {'input': '12 40\\r\\nerase 1\\r\\nalloc 21\\r\\nalloc 5\\r\\nalloc 7\\r\\ndefragment\\r\\ndefragment\\r\\nerase 2\\r\\nalloc 83\\r\\nerase 4\\r\\ndefragment\\r\\nalloc 59\\r\\ndefragment\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\n1\\r\\n2\\r\\n3\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n']}, {'input': '38 18\\r\\nalloc 72\\r\\nerase 2\\r\\nalloc 50\\r\\ndefragment\\r\\nerase 3\\r\\ndefragment\\r\\nalloc 43\\r\\nalloc 41\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 26\\r\\nalloc 46\\r\\nalloc 16\\r\\nalloc 15\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 95\\r\\nerase 7\\r\\nerase 7\\r\\nerase 5\\r\\nerase 2\\r\\nerase 9\\r\\nerase 7\\r\\nalloc 43\\r\\ndefragment\\r\\nerase 7\\r\\ndefragment\\r\\nalloc 48\\r\\nalloc 77\\r\\nerase 10\\r\\nerase 11\\r\\nalloc 16\\r\\nalloc 84\\r\\nerase 1\\r\\ndefragment\\r\\nalloc 86\\r\\ndefragment\\r\\nerase 13\\r\\n', 'output': ['NULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\n1\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '37 74\\r\\nalloc 11\\r\\ndefragment\\r\\nerase 1\\r\\ndefragment\\r\\nerase 2\\r\\ndefragment\\r\\nalloc 90\\r\\nerase 3\\r\\nerase 2\\r\\nerase 3\\r\\nerase 1\\r\\nerase 1\\r\\nalloc 38\\r\\nalloc 19\\r\\nerase 1\\r\\nerase 3\\r\\ndefragment\\r\\nalloc 93\\r\\nerase 5\\r\\nerase 4\\r\\nalloc 66\\r\\nalloc 71\\r\\nerase 5\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nerase 7\\r\\nalloc 47\\r\\nerase -95616683\\r\\nerase 2\\r\\nalloc 28\\r\\nalloc 32\\r\\nerase 11\\r\\nalloc 50\\r\\ndefragment\\r\\ndefragment\\r\\n', 'output': ['1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n4\\r\\n5\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n']}, {'input': '16 49\\r\\nerase -751005193\\r\\ndefragment\\r\\nalloc 37\\r\\nalloc 82\\r\\nerase 3\\r\\nerase 1\\r\\nalloc 80\\r\\nalloc 51\\r\\ndefragment\\r\\nalloc 74\\r\\nerase 1\\r\\nalloc 91\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 98\\r\\ndefragment\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\n1\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\n']}, {'input': '42 98\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 5\\r\\nalloc 66\\r\\ndefragment\\r\\nerase 3\\r\\nalloc 53\\r\\ndefragment\\r\\nerase 4\\r\\nerase 2\\r\\nalloc 70\\r\\nerase 3\\r\\ndefragment\\r\\ndefragment\\r\\nerase 2\\r\\nerase 3\\r\\nerase -1327931832\\r\\nalloc 93\\r\\nalloc 64\\r\\nerase 7\\r\\nerase 6\\r\\nerase 3\\r\\nalloc 61\\r\\nalloc 12\\r\\nalloc 65\\r\\nerase 2\\r\\nalloc 46\\r\\nerase 11\\r\\nerase 9\\r\\nerase 9\\r\\nerase 6\\r\\nalloc 2\\r\\nalloc 78\\r\\ndefragment\\r\\nerase 13\\r\\nerase 6\\r\\nerase 10\\r\\nalloc 53\\r\\nalloc 46\\r\\n', 'output': ['1\\r\\n2\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n4\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\n']}, {'input': '19 46\\r\\nalloc 21\\r\\nerase 2\\r\\nerase 1\\r\\ndefragment\\r\\nalloc 4\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 40\\r\\nerase 1\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 68\\r\\nerase -388966015\\r\\nalloc 85\\r\\nalloc 53\\r\\nerase 4\\r\\ndefragment\\r\\nalloc 49\\r\\nalloc 88\\r\\n', 'output': ['1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\n']}, {'input': '44 46\\r\\nalloc 28\\r\\nalloc 36\\r\\ndefragment\\r\\nerase -937404236\\r\\nalloc 71\\r\\ndefragment\\r\\nalloc 81\\r\\nalloc 51\\r\\nerase 3\\r\\ndefragment\\r\\nalloc 48\\r\\nerase 1\\r\\ndefragment\\r\\nalloc 36\\r\\ndefragment\\r\\ndefragment\\r\\nerase 1\\r\\ndefragment\\r\\ndefragment\\r\\nerase -1173350787\\r\\nalloc 94\\r\\nerase 5\\r\\ndefragment\\r\\nerase 9\\r\\nalloc 98\\r\\nerase 7\\r\\ndefragment\\r\\nerase 5\\r\\nerase 1\\r\\ndefragment\\r\\nerase 2\\r\\ndefragment\\r\\nerase 4\\r\\ndefragment\\r\\nerase 9\\r\\nalloc 8\\r\\ndefragment\\r\\nerase 9\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nerase 1\\r\\nalloc 70\\r\\nerase 9\\r\\n', 'output': ['1\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n2\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '26 25\\r\\nalloc 25\\r\\nerase 1\\r\\nalloc 24\\r\\nerase 2\\r\\nalloc 23\\r\\nerase 3\\r\\nalloc 24\\r\\nerase 4\\r\\nalloc 24\\r\\nerase 5\\r\\nalloc 21\\r\\nerase 6\\r\\nalloc 24\\r\\nerase 7\\r\\nalloc 25\\r\\nerase 8\\r\\nalloc 25\\r\\nerase 9\\r\\nalloc 24\\r\\nerase 10\\r\\nalloc 25\\r\\nerase 11\\r\\nalloc 25\\r\\nerase 12\\r\\nalloc 25\\r\\nerase 13\\r\\n', 'output': ['1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\n6\\r\\n7\\r\\n8\\r\\n9\\r\\n10\\r\\n11\\r\\n12\\r\\n13\\r\\n']}, {'input': '22 9\\r\\nalloc 9\\r\\nerase 1\\r\\nalloc 9\\r\\nerase 2\\r\\nalloc 9\\r\\nerase 3\\r\\nalloc 9\\r\\nerase 4\\r\\nalloc 9\\r\\nerase 5\\r\\nalloc 9\\r\\nerase 6\\r\\nalloc 9\\r\\nerase 7\\r\\nalloc 9\\r\\nerase 8\\r\\nalloc 9\\r\\nerase 9\\r\\nalloc 9\\r\\nerase 10\\r\\nalloc 9\\r\\nerase 11\\r\\n', 'output': ['1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\n6\\r\\n7\\r\\n8\\r\\n9\\r\\n10\\r\\n11\\r\\n']}, {'input': '7 6\\r\\nalloc 1\\r\\nalloc 2\\r\\nalloc 3\\r\\nerase 1\\r\\ndefragment\\r\\nerase 3\\r\\nalloc 4\\r\\n', 'output': ['1\\r\\n2\\r\\n3\\r\\n4\\r\\n']}, {'input': '3 1\\r\\nerase -1\\r\\nerase 0\\r\\nerase -2147483648\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '7 100\\r\\nalloc 100\\r\\nerase 2147483647\\r\\nerase 1\\r\\nalloc 50\\r\\nalloc 50\\r\\nerase 3\\r\\nerase -2147483648\\r\\n', 'output': ['1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '12 10\\r\\nalloc 6\\r\\nalloc 2\\r\\nerase 1\\r\\nalloc 4\\r\\nalloc 2\\r\\nerase 3\\r\\nalloc 2\\r\\nalloc 3\\r\\nalloc 1\\r\\nalloc 1\\r\\nalloc 1\\r\\nalloc 1\\r\\n', 'output': ['1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\nNULL\\r\\n6\\r\\n7\\r\\n8\\r\\n9\\r\\n']}, {'input': '8 50\\r\\nalloc 51\\r\\ndefragment\\r\\nalloc 100\\r\\ndefragment\\r\\nerase 1\\r\\nalloc 50\\r\\ndefragment\\r\\nalloc 50\\r\\n', 'output': ['NULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n1\\r\\nNULL\\r\\n']}, {'input': '10 10\\r\\nalloc 10\\r\\nerase -1\\r\\nerase 1\\r\\nalloc 5\\r\\nerase -1\\r\\nalloc 5\\r\\nerase 0\\r\\nalloc 5\\r\\nerase 0\\r\\nalloc 5\\r\\n', 'output': ['1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n']}, {'input': '16 10\\r\\nalloc 10\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 10\\r\\nerase 1\\r\\nerase 2\\r\\nalloc 6\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 4\\r\\ndefragment\\r\\ndefragment\\r\\nerase 3\\r\\ndefragment\\r\\nalloc 6\\r\\n', 'output': ['1\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\nNULL\\r\\n']}, {'input': '16 10\\r\\nalloc 10\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 10\\r\\nerase 1\\r\\nerase 2\\r\\nalloc 6\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 4\\r\\ndefragment\\r\\ndefragment\\r\\nerase 2\\r\\ndefragment\\r\\nalloc 6\\r\\n', 'output': ['1\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\n4\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int m = sc.nextInt(), t = sc.nextInt(), x = 1;\n        while (x <= m) {\n            String s = sc.next();\n            int n = sc.nextInt();\n            if (s.equals(\"alloc\")) {\n                for (int i = x; i <= m; i++) {\n                    if (m - i + 1 >= n) {\n                        System.out.println(x);\n                        x += n;\n                        m -= n;\n                        break;\n                    }\n                }\n                if (x > m)\n                    System.out.println(\"NULL\");\n            } else if (s.equals(\"erase\")) {\n                int nn = sc.nextInt();\n                if (nn <= x && nn + n - 1 <= m && nn % 4 == 0) {\n                    m += n;\n                    m -= nn;\n                    x -= nn;\n                } else {\n                    System.out.println(\"ILLEGAL_ERASE_ARGUMENT\");\n                }\n            } else {\n                m = x;\n                x = 1;\n            }\n        }\n    }\n}"}
{"src_uid": "a6cba17c5ddb93f6741e00280fb6c54c", "id": 110, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '6 10\\r\\nalloc 5\\r\\nalloc 3\\r\\nerase 1\\r\\nalloc 6\\r\\ndefragment\\r\\nalloc 6\\r\\n', 'output': ['1\\r\\n2\\r\\nNULL\\r\\n3\\r\\n']}, {'input': '6 1\\r\\ndefragment\\r\\nalloc 10\\r\\nalloc 1\\r\\nerase -1\\r\\nerase 1\\r\\nerase 1\\r\\n', 'output': ['NULL\\r\\n1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '14 100\\r\\nalloc 99\\r\\nalloc 1\\r\\nalloc 1\\r\\nerase 2\\r\\nalloc 1\\r\\nerase 4\\r\\nerase 1\\r\\nalloc 100\\r\\nalloc 1\\r\\nalloc 99\\r\\ndefragment\\r\\nerase 4\\r\\nalloc 100\\r\\nalloc 99\\r\\n', 'output': ['1\\r\\n2\\r\\nNULL\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n4\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\n']}, {'input': '26 25\\r\\ndefragment\\r\\nerase 1\\r\\nerase -1560200883\\r\\nalloc 44\\r\\ndefragment\\r\\nalloc 75\\r\\nalloc 22\\r\\ndefragment\\r\\nerase 4\\r\\ndefragment\\r\\nalloc 57\\r\\nalloc 53\\r\\nerase 4\\r\\nerase -1639632026\\r\\nerase -2121605039\\r\\nerase 3\\r\\nalloc 51\\r\\nalloc 65\\r\\ndefragment\\r\\nerase 2\\r\\nerase 4\\r\\nalloc 52\\r\\nerase 3\\r\\ndefragment\\r\\nerase -1842529282\\r\\nerase 3\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\n1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '22 9\\r\\nerase 1\\r\\nalloc 6\\r\\nalloc 65\\r\\nerase 1\\r\\nalloc 87\\r\\nerase -1638927047\\r\\nalloc 5\\r\\nerase 2\\r\\nalloc 70\\r\\ndefragment\\r\\nalloc 20\\r\\nalloc 48\\r\\nerase -69401977\\r\\nalloc 20\\r\\ndefragment\\r\\nerase 7\\r\\ndefragment\\r\\nerase 9\\r\\nerase 7\\r\\nerase 4\\r\\ndefragment\\r\\nalloc 66\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\n1\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n']}, {'input': '12 40\\r\\nerase 1\\r\\nalloc 21\\r\\nalloc 5\\r\\nalloc 7\\r\\ndefragment\\r\\ndefragment\\r\\nerase 2\\r\\nalloc 83\\r\\nerase 4\\r\\ndefragment\\r\\nalloc 59\\r\\ndefragment\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\n1\\r\\n2\\r\\n3\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n']}, {'input': '38 18\\r\\nalloc 72\\r\\nerase 2\\r\\nalloc 50\\r\\ndefragment\\r\\nerase 3\\r\\ndefragment\\r\\nalloc 43\\r\\nalloc 41\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 26\\r\\nalloc 46\\r\\nalloc 16\\r\\nalloc 15\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 95\\r\\nerase 7\\r\\nerase 7\\r\\nerase 5\\r\\nerase 2\\r\\nerase 9\\r\\nerase 7\\r\\nalloc 43\\r\\ndefragment\\r\\nerase 7\\r\\ndefragment\\r\\nalloc 48\\r\\nalloc 77\\r\\nerase 10\\r\\nerase 11\\r\\nalloc 16\\r\\nalloc 84\\r\\nerase 1\\r\\ndefragment\\r\\nalloc 86\\r\\ndefragment\\r\\nerase 13\\r\\n', 'output': ['NULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\n1\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '37 74\\r\\nalloc 11\\r\\ndefragment\\r\\nerase 1\\r\\ndefragment\\r\\nerase 2\\r\\ndefragment\\r\\nalloc 90\\r\\nerase 3\\r\\nerase 2\\r\\nerase 3\\r\\nerase 1\\r\\nerase 1\\r\\nalloc 38\\r\\nalloc 19\\r\\nerase 1\\r\\nerase 3\\r\\ndefragment\\r\\nalloc 93\\r\\nerase 5\\r\\nerase 4\\r\\nalloc 66\\r\\nalloc 71\\r\\nerase 5\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nerase 7\\r\\nalloc 47\\r\\nerase -95616683\\r\\nerase 2\\r\\nalloc 28\\r\\nalloc 32\\r\\nerase 11\\r\\nalloc 50\\r\\ndefragment\\r\\ndefragment\\r\\n', 'output': ['1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n4\\r\\n5\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n']}, {'input': '16 49\\r\\nerase -751005193\\r\\ndefragment\\r\\nalloc 37\\r\\nalloc 82\\r\\nerase 3\\r\\nerase 1\\r\\nalloc 80\\r\\nalloc 51\\r\\ndefragment\\r\\nalloc 74\\r\\nerase 1\\r\\nalloc 91\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 98\\r\\ndefragment\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\n1\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\n']}, {'input': '42 98\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 5\\r\\nalloc 66\\r\\ndefragment\\r\\nerase 3\\r\\nalloc 53\\r\\ndefragment\\r\\nerase 4\\r\\nerase 2\\r\\nalloc 70\\r\\nerase 3\\r\\ndefragment\\r\\ndefragment\\r\\nerase 2\\r\\nerase 3\\r\\nerase -1327931832\\r\\nalloc 93\\r\\nalloc 64\\r\\nerase 7\\r\\nerase 6\\r\\nerase 3\\r\\nalloc 61\\r\\nalloc 12\\r\\nalloc 65\\r\\nerase 2\\r\\nalloc 46\\r\\nerase 11\\r\\nerase 9\\r\\nerase 9\\r\\nerase 6\\r\\nalloc 2\\r\\nalloc 78\\r\\ndefragment\\r\\nerase 13\\r\\nerase 6\\r\\nerase 10\\r\\nalloc 53\\r\\nalloc 46\\r\\n', 'output': ['1\\r\\n2\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n4\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\n']}, {'input': '19 46\\r\\nalloc 21\\r\\nerase 2\\r\\nerase 1\\r\\ndefragment\\r\\nalloc 4\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 40\\r\\nerase 1\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 68\\r\\nerase -388966015\\r\\nalloc 85\\r\\nalloc 53\\r\\nerase 4\\r\\ndefragment\\r\\nalloc 49\\r\\nalloc 88\\r\\n', 'output': ['1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\n']}, {'input': '44 46\\r\\nalloc 28\\r\\nalloc 36\\r\\ndefragment\\r\\nerase -937404236\\r\\nalloc 71\\r\\ndefragment\\r\\nalloc 81\\r\\nalloc 51\\r\\nerase 3\\r\\ndefragment\\r\\nalloc 48\\r\\nerase 1\\r\\ndefragment\\r\\nalloc 36\\r\\ndefragment\\r\\ndefragment\\r\\nerase 1\\r\\ndefragment\\r\\ndefragment\\r\\nerase -1173350787\\r\\nalloc 94\\r\\nerase 5\\r\\ndefragment\\r\\nerase 9\\r\\nalloc 98\\r\\nerase 7\\r\\ndefragment\\r\\nerase 5\\r\\nerase 1\\r\\ndefragment\\r\\nerase 2\\r\\ndefragment\\r\\nerase 4\\r\\ndefragment\\r\\nerase 9\\r\\nalloc 8\\r\\ndefragment\\r\\nerase 9\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nerase 1\\r\\nalloc 70\\r\\nerase 9\\r\\n', 'output': ['1\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n2\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '26 25\\r\\nalloc 25\\r\\nerase 1\\r\\nalloc 24\\r\\nerase 2\\r\\nalloc 23\\r\\nerase 3\\r\\nalloc 24\\r\\nerase 4\\r\\nalloc 24\\r\\nerase 5\\r\\nalloc 21\\r\\nerase 6\\r\\nalloc 24\\r\\nerase 7\\r\\nalloc 25\\r\\nerase 8\\r\\nalloc 25\\r\\nerase 9\\r\\nalloc 24\\r\\nerase 10\\r\\nalloc 25\\r\\nerase 11\\r\\nalloc 25\\r\\nerase 12\\r\\nalloc 25\\r\\nerase 13\\r\\n', 'output': ['1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\n6\\r\\n7\\r\\n8\\r\\n9\\r\\n10\\r\\n11\\r\\n12\\r\\n13\\r\\n']}, {'input': '22 9\\r\\nalloc 9\\r\\nerase 1\\r\\nalloc 9\\r\\nerase 2\\r\\nalloc 9\\r\\nerase 3\\r\\nalloc 9\\r\\nerase 4\\r\\nalloc 9\\r\\nerase 5\\r\\nalloc 9\\r\\nerase 6\\r\\nalloc 9\\r\\nerase 7\\r\\nalloc 9\\r\\nerase 8\\r\\nalloc 9\\r\\nerase 9\\r\\nalloc 9\\r\\nerase 10\\r\\nalloc 9\\r\\nerase 11\\r\\n', 'output': ['1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\n6\\r\\n7\\r\\n8\\r\\n9\\r\\n10\\r\\n11\\r\\n']}, {'input': '7 6\\r\\nalloc 1\\r\\nalloc 2\\r\\nalloc 3\\r\\nerase 1\\r\\ndefragment\\r\\nerase 3\\r\\nalloc 4\\r\\n', 'output': ['1\\r\\n2\\r\\n3\\r\\n4\\r\\n']}, {'input': '3 1\\r\\nerase -1\\r\\nerase 0\\r\\nerase -2147483648\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '7 100\\r\\nalloc 100\\r\\nerase 2147483647\\r\\nerase 1\\r\\nalloc 50\\r\\nalloc 50\\r\\nerase 3\\r\\nerase -2147483648\\r\\n', 'output': ['1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '12 10\\r\\nalloc 6\\r\\nalloc 2\\r\\nerase 1\\r\\nalloc 4\\r\\nalloc 2\\r\\nerase 3\\r\\nalloc 2\\r\\nalloc 3\\r\\nalloc 1\\r\\nalloc 1\\r\\nalloc 1\\r\\nalloc 1\\r\\n', 'output': ['1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\nNULL\\r\\n6\\r\\n7\\r\\n8\\r\\n9\\r\\n']}, {'input': '8 50\\r\\nalloc 51\\r\\ndefragment\\r\\nalloc 100\\r\\ndefragment\\r\\nerase 1\\r\\nalloc 50\\r\\ndefragment\\r\\nalloc 50\\r\\n', 'output': ['NULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n1\\r\\nNULL\\r\\n']}, {'input': '10 10\\r\\nalloc 10\\r\\nerase -1\\r\\nerase 1\\r\\nalloc 5\\r\\nerase -1\\r\\nalloc 5\\r\\nerase 0\\r\\nalloc 5\\r\\nerase 0\\r\\nalloc 5\\r\\n', 'output': ['1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n']}, {'input': '16 10\\r\\nalloc 10\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 10\\r\\nerase 1\\r\\nerase 2\\r\\nalloc 6\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 4\\r\\ndefragment\\r\\ndefragment\\r\\nerase 3\\r\\ndefragment\\r\\nalloc 6\\r\\n', 'output': ['1\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\nNULL\\r\\n']}, {'input': '16 10\\r\\nalloc 10\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 10\\r\\nerase 1\\r\\nerase 2\\r\\nalloc 6\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 4\\r\\ndefragment\\r\\ndefragment\\r\\nerase 2\\r\\ndefragment\\r\\nalloc 6\\r\\n', 'output': ['1\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\n4\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class test{\n\tstatic int t,m,a,b;\n\tstatic String [] s;\n\tpublic static void main(String [] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tt = sc.nextInt(); m = sc.nextInt();\n\t\ts = new String[t];\n\t\ta = 0;\n\t\tfor(int i = 0 ; i < t ; i++){\n\t\t\ts[i] = sc.next();\n\t\t}\n\t\tfor(int i = 0 ; i < t ; i++){\n\t\t\tString temp = s[i];\n\t\t\tint x = temp.length();\n\t\t\tchar ch = temp.charAt(0);\n\t\t\t\n\t\t\tif(ch == 'a'){\n\t\t\t\tint n = sc.nextInt();\n\t\t\t\tif(n <= m)\n\t\t\t\t\tSystem.out.println((a+=n) - n + 1);\n\t\t\t\telse\n\t\t\t\t\tSystem.out.println(\"NULL\");\n\t\t\t}\n\t\t\telse if(ch == 'e'){\n\t\t\t\tint n = sc.nextInt();\n\t\t\t\t\n\t\t\t\tif(n == a){\n\t\t\t\t\ta -= n;\n\t\t\t\t\tSystem.out.println(\"NULL\");\n\t\t\t\t}\n\t\t\t\telse if(n <= a){\n\t\t\t\t\ta -= n;\n\t\t\t\t\tSystem.out.println(ILLEGAL_ERASE_ARGUMENT);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ta -= n;\n\t\t\t\t\tSystem.out.println(ILLEGAL_ERASE_ARGUMENT);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfor(int j = 0 ; j < a ; j+=n){\n\t\t\t\t\tfor(int k = j ; k < a ; ++k){\n\t\t\t\t\t\tif(k!= a-n && memory[j] == 0 && memory[k] == 0){\n\t\t\t\t\t\t\tmemory[j] = memory[k];\n\t\t\t\t\t\t\tmemory[k] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tmemory[j+n] = memory[j];\n\t\t\t\t\tmemory[j] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tstatic final int ILLEGAL_ERASE_ARGUMENT = -1;\n\tstatic int memory[] = new int [101];\n}"}
{"src_uid": "a6cba17c5ddb93f6741e00280fb6c54c", "id": 110, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1600, "testcases": "[{'input': '6 10\\r\\nalloc 5\\r\\nalloc 3\\r\\nerase 1\\r\\nalloc 6\\r\\ndefragment\\r\\nalloc 6\\r\\n', 'output': ['1\\r\\n2\\r\\nNULL\\r\\n3\\r\\n']}, {'input': '6 1\\r\\ndefragment\\r\\nalloc 10\\r\\nalloc 1\\r\\nerase -1\\r\\nerase 1\\r\\nerase 1\\r\\n', 'output': ['NULL\\r\\n1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '14 100\\r\\nalloc 99\\r\\nalloc 1\\r\\nalloc 1\\r\\nerase 2\\r\\nalloc 1\\r\\nerase 4\\r\\nerase 1\\r\\nalloc 100\\r\\nalloc 1\\r\\nalloc 99\\r\\ndefragment\\r\\nerase 4\\r\\nalloc 100\\r\\nalloc 99\\r\\n', 'output': ['1\\r\\n2\\r\\nNULL\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n4\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\n']}, {'input': '26 25\\r\\ndefragment\\r\\nerase 1\\r\\nerase -1560200883\\r\\nalloc 44\\r\\ndefragment\\r\\nalloc 75\\r\\nalloc 22\\r\\ndefragment\\r\\nerase 4\\r\\ndefragment\\r\\nalloc 57\\r\\nalloc 53\\r\\nerase 4\\r\\nerase -1639632026\\r\\nerase -2121605039\\r\\nerase 3\\r\\nalloc 51\\r\\nalloc 65\\r\\ndefragment\\r\\nerase 2\\r\\nerase 4\\r\\nalloc 52\\r\\nerase 3\\r\\ndefragment\\r\\nerase -1842529282\\r\\nerase 3\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\n1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '22 9\\r\\nerase 1\\r\\nalloc 6\\r\\nalloc 65\\r\\nerase 1\\r\\nalloc 87\\r\\nerase -1638927047\\r\\nalloc 5\\r\\nerase 2\\r\\nalloc 70\\r\\ndefragment\\r\\nalloc 20\\r\\nalloc 48\\r\\nerase -69401977\\r\\nalloc 20\\r\\ndefragment\\r\\nerase 7\\r\\ndefragment\\r\\nerase 9\\r\\nerase 7\\r\\nerase 4\\r\\ndefragment\\r\\nalloc 66\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\n1\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n']}, {'input': '12 40\\r\\nerase 1\\r\\nalloc 21\\r\\nalloc 5\\r\\nalloc 7\\r\\ndefragment\\r\\ndefragment\\r\\nerase 2\\r\\nalloc 83\\r\\nerase 4\\r\\ndefragment\\r\\nalloc 59\\r\\ndefragment\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\n1\\r\\n2\\r\\n3\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n']}, {'input': '38 18\\r\\nalloc 72\\r\\nerase 2\\r\\nalloc 50\\r\\ndefragment\\r\\nerase 3\\r\\ndefragment\\r\\nalloc 43\\r\\nalloc 41\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 26\\r\\nalloc 46\\r\\nalloc 16\\r\\nalloc 15\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 95\\r\\nerase 7\\r\\nerase 7\\r\\nerase 5\\r\\nerase 2\\r\\nerase 9\\r\\nerase 7\\r\\nalloc 43\\r\\ndefragment\\r\\nerase 7\\r\\ndefragment\\r\\nalloc 48\\r\\nalloc 77\\r\\nerase 10\\r\\nerase 11\\r\\nalloc 16\\r\\nalloc 84\\r\\nerase 1\\r\\ndefragment\\r\\nalloc 86\\r\\ndefragment\\r\\nerase 13\\r\\n', 'output': ['NULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\n1\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '37 74\\r\\nalloc 11\\r\\ndefragment\\r\\nerase 1\\r\\ndefragment\\r\\nerase 2\\r\\ndefragment\\r\\nalloc 90\\r\\nerase 3\\r\\nerase 2\\r\\nerase 3\\r\\nerase 1\\r\\nerase 1\\r\\nalloc 38\\r\\nalloc 19\\r\\nerase 1\\r\\nerase 3\\r\\ndefragment\\r\\nalloc 93\\r\\nerase 5\\r\\nerase 4\\r\\nalloc 66\\r\\nalloc 71\\r\\nerase 5\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nerase 7\\r\\nalloc 47\\r\\nerase -95616683\\r\\nerase 2\\r\\nalloc 28\\r\\nalloc 32\\r\\nerase 11\\r\\nalloc 50\\r\\ndefragment\\r\\ndefragment\\r\\n', 'output': ['1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n4\\r\\n5\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n']}, {'input': '16 49\\r\\nerase -751005193\\r\\ndefragment\\r\\nalloc 37\\r\\nalloc 82\\r\\nerase 3\\r\\nerase 1\\r\\nalloc 80\\r\\nalloc 51\\r\\ndefragment\\r\\nalloc 74\\r\\nerase 1\\r\\nalloc 91\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 98\\r\\ndefragment\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\n1\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\n']}, {'input': '42 98\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 5\\r\\nalloc 66\\r\\ndefragment\\r\\nerase 3\\r\\nalloc 53\\r\\ndefragment\\r\\nerase 4\\r\\nerase 2\\r\\nalloc 70\\r\\nerase 3\\r\\ndefragment\\r\\ndefragment\\r\\nerase 2\\r\\nerase 3\\r\\nerase -1327931832\\r\\nalloc 93\\r\\nalloc 64\\r\\nerase 7\\r\\nerase 6\\r\\nerase 3\\r\\nalloc 61\\r\\nalloc 12\\r\\nalloc 65\\r\\nerase 2\\r\\nalloc 46\\r\\nerase 11\\r\\nerase 9\\r\\nerase 9\\r\\nerase 6\\r\\nalloc 2\\r\\nalloc 78\\r\\ndefragment\\r\\nerase 13\\r\\nerase 6\\r\\nerase 10\\r\\nalloc 53\\r\\nalloc 46\\r\\n', 'output': ['1\\r\\n2\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n4\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\n']}, {'input': '19 46\\r\\nalloc 21\\r\\nerase 2\\r\\nerase 1\\r\\ndefragment\\r\\nalloc 4\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 40\\r\\nerase 1\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 68\\r\\nerase -388966015\\r\\nalloc 85\\r\\nalloc 53\\r\\nerase 4\\r\\ndefragment\\r\\nalloc 49\\r\\nalloc 88\\r\\n', 'output': ['1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\n']}, {'input': '44 46\\r\\nalloc 28\\r\\nalloc 36\\r\\ndefragment\\r\\nerase -937404236\\r\\nalloc 71\\r\\ndefragment\\r\\nalloc 81\\r\\nalloc 51\\r\\nerase 3\\r\\ndefragment\\r\\nalloc 48\\r\\nerase 1\\r\\ndefragment\\r\\nalloc 36\\r\\ndefragment\\r\\ndefragment\\r\\nerase 1\\r\\ndefragment\\r\\ndefragment\\r\\nerase -1173350787\\r\\nalloc 94\\r\\nerase 5\\r\\ndefragment\\r\\nerase 9\\r\\nalloc 98\\r\\nerase 7\\r\\ndefragment\\r\\nerase 5\\r\\nerase 1\\r\\ndefragment\\r\\nerase 2\\r\\ndefragment\\r\\nerase 4\\r\\ndefragment\\r\\nerase 9\\r\\nalloc 8\\r\\ndefragment\\r\\nerase 9\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nerase 1\\r\\nalloc 70\\r\\nerase 9\\r\\n', 'output': ['1\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nNULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n2\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '26 25\\r\\nalloc 25\\r\\nerase 1\\r\\nalloc 24\\r\\nerase 2\\r\\nalloc 23\\r\\nerase 3\\r\\nalloc 24\\r\\nerase 4\\r\\nalloc 24\\r\\nerase 5\\r\\nalloc 21\\r\\nerase 6\\r\\nalloc 24\\r\\nerase 7\\r\\nalloc 25\\r\\nerase 8\\r\\nalloc 25\\r\\nerase 9\\r\\nalloc 24\\r\\nerase 10\\r\\nalloc 25\\r\\nerase 11\\r\\nalloc 25\\r\\nerase 12\\r\\nalloc 25\\r\\nerase 13\\r\\n', 'output': ['1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\n6\\r\\n7\\r\\n8\\r\\n9\\r\\n10\\r\\n11\\r\\n12\\r\\n13\\r\\n']}, {'input': '22 9\\r\\nalloc 9\\r\\nerase 1\\r\\nalloc 9\\r\\nerase 2\\r\\nalloc 9\\r\\nerase 3\\r\\nalloc 9\\r\\nerase 4\\r\\nalloc 9\\r\\nerase 5\\r\\nalloc 9\\r\\nerase 6\\r\\nalloc 9\\r\\nerase 7\\r\\nalloc 9\\r\\nerase 8\\r\\nalloc 9\\r\\nerase 9\\r\\nalloc 9\\r\\nerase 10\\r\\nalloc 9\\r\\nerase 11\\r\\n', 'output': ['1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\n6\\r\\n7\\r\\n8\\r\\n9\\r\\n10\\r\\n11\\r\\n']}, {'input': '7 6\\r\\nalloc 1\\r\\nalloc 2\\r\\nalloc 3\\r\\nerase 1\\r\\ndefragment\\r\\nerase 3\\r\\nalloc 4\\r\\n', 'output': ['1\\r\\n2\\r\\n3\\r\\n4\\r\\n']}, {'input': '3 1\\r\\nerase -1\\r\\nerase 0\\r\\nerase -2147483648\\r\\n', 'output': ['ILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '7 100\\r\\nalloc 100\\r\\nerase 2147483647\\r\\nerase 1\\r\\nalloc 50\\r\\nalloc 50\\r\\nerase 3\\r\\nerase -2147483648\\r\\n', 'output': ['1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n']}, {'input': '12 10\\r\\nalloc 6\\r\\nalloc 2\\r\\nerase 1\\r\\nalloc 4\\r\\nalloc 2\\r\\nerase 3\\r\\nalloc 2\\r\\nalloc 3\\r\\nalloc 1\\r\\nalloc 1\\r\\nalloc 1\\r\\nalloc 1\\r\\n', 'output': ['1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\nNULL\\r\\n6\\r\\n7\\r\\n8\\r\\n9\\r\\n']}, {'input': '8 50\\r\\nalloc 51\\r\\ndefragment\\r\\nalloc 100\\r\\ndefragment\\r\\nerase 1\\r\\nalloc 50\\r\\ndefragment\\r\\nalloc 50\\r\\n', 'output': ['NULL\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n1\\r\\nNULL\\r\\n']}, {'input': '10 10\\r\\nalloc 10\\r\\nerase -1\\r\\nerase 1\\r\\nalloc 5\\r\\nerase -1\\r\\nalloc 5\\r\\nerase 0\\r\\nalloc 5\\r\\nerase 0\\r\\nalloc 5\\r\\n', 'output': ['1\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n3\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\nNULL\\r\\n']}, {'input': '16 10\\r\\nalloc 10\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 10\\r\\nerase 1\\r\\nerase 2\\r\\nalloc 6\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 4\\r\\ndefragment\\r\\ndefragment\\r\\nerase 3\\r\\ndefragment\\r\\nalloc 6\\r\\n', 'output': ['1\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\nNULL\\r\\n']}, {'input': '16 10\\r\\nalloc 10\\r\\ndefragment\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 10\\r\\nerase 1\\r\\nerase 2\\r\\nalloc 6\\r\\ndefragment\\r\\ndefragment\\r\\nalloc 4\\r\\ndefragment\\r\\ndefragment\\r\\nerase 2\\r\\ndefragment\\r\\nalloc 6\\r\\n', 'output': ['1\\r\\nNULL\\r\\nILLEGAL_ERASE_ARGUMENT\\r\\n2\\r\\n3\\r\\n4\\r\\n']}]", "source_code": "import java.util.*;\nimport java.io.*;\n\npublic class Main implements Runnable{\n  private void solve() throws IOException {\n    int T = nextInt(), M = nextInt();\n    int[] mem = new int[M + 1];\n    Arrays.fill(mem, 1);\n\n    for(int tc = 0; tc < T; tc++){\n      String op = next();\n      int x;\n      if(op.equals(\"alloc\")){\n        x = nextInt();\n        for(int i = 0; i < M; i += x){\n          if(mem[i] == 0){\n            mem[i] = ++tc;\n            out.print(tc + \"\\n\");\n            break;\n          }\n        }\n      } else if(op.equals(\"erase\")){\n        x = nextInt();\n        if(mem[x-1]!= 0) mem[x-1] = 0;\n        else out.print(\"ILLEGAL_ERASE_ARGUMENT\\n\");\n      } else if(op.equals(\"defragment\")){\n        for(int i = 0; i <= M; i++){\n          if(mem[i]!= 0){\n            for(int j = 0; j < i; j++){\n              if(mem[j] == 0){\n                mem[j] = mem[i];\n                mem[i] = 0;\n                break;\n              }\n            }\n          }\n        }\n      } else out.print(\"ILLEGAL_COMMAND\\n\");\n    }\n  }\n\n  private void run() throws IOException { solve(); }\n\n  public static void main(String[] args) throws IOException {\n    try(Input reader = new StandardInput(); PrintWriter out = new PrintWriter(System.out)) {\n      new Main().run();\n    }\n  }\n\n  interface Input extends Closeable {\n    String next() throws IOException;\n    default int nextInt() throws IOException { return Integer.parseInt(next()); }\n    default long nextLong() throws IOException { return Long.parseLong(next()); }\n    default double nextDouble() throws IOException { return Double.parseDouble(next()); }\n    default int[] readIntArray() throws IOException { return readIntArray(nextInt()); }\n    default int[] readIntArray(int size) throws IOException { return readIntArray(size, x -> x); }\n    default int[] readIntArray(int size, IntUnaryOperator op) throws IOException {\n      int[] array = new int[size];\n      for(int i = 0; i < array.length; i++) { array[i] = op.applyAsInt(nextInt()); }\n      return array;\n    }\n    default long[] readLongArray(int size) throws IOException { return readLongArray(size, x -> x); }\n    default long[] readLongArray(int size, LongUnaryOperator op) throws IOException {\n      long[] array = new long[size];\n      for(int i = 0; i < array.length; i++) { array[i] = op.applyAsLong(nextLong()); }\n      return array;\n    }\n    default double[] readDoubleArray(int size) throws IOException { return readDoubleArray(size, x -> x); }\n    default double[] readDoubleArray(int size, DoubleUnaryOperator op) throws IOException {\n      double[] array = new double[size];\n      for(int i = 0; i < array.length; i++) { array[i] = op.applyAsDouble(nextDouble()); }\n      return array;\n    }\n  }\n\n  private interface IntUnaryOperator { int applyAsInt(int operand) throws IOException; }\n  private interface LongUnaryOperator { long applyAsLong(long operand) throws IOException; }\n  private interface DoubleUnaryOperator { double applyAsDouble(double operand) throws IOException; }\n\n  private static class StandardInput implements Input {\n    private final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    private StringTokenizer stringTokenizer;\n    @Override public void close() throws IOException { reader.close(); }\n\n    @Override public String next() throws IOException {\n      if(stringTokenizer == null ||!stringTokenizer.hasMoreTokens()) stringTokenizer = new StringTokenizer(reader.readLine());\n      return stringTokenizer.nextToken"}
{"src_uid": "97999cd7c6de79a4e39f56a41ff59e7a", "id": 111, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': '800 600 4 3\\r\\n', 'output': ['800 600']}, {'input': '1920 1200 16 9\\r\\n', 'output': ['1920 1080']}, {'input': '1 1 1 2\\r\\n', 'output': ['0 0']}, {'input': '1002105126 227379125 179460772 1295256518\\r\\n', 'output': ['0 0']}, {'input': '625166755 843062051 1463070160 1958300154\\r\\n', 'output': ['0 0']}, {'input': '248228385 1458744978 824699604 1589655888\\r\\n', 'output': ['206174901 397413972']}, {'input': '186329049 1221011622 90104472 1769702163\\r\\n', 'output': ['60069648 1179801442']}, {'input': '511020182 242192314 394753578 198572007\\r\\n', 'output': ['394753578 198572007']}, {'input': '134081812 857875240 82707261 667398699\\r\\n', 'output': ['105411215 850606185']}, {'input': '721746595 799202881 143676564 380427290\\r\\n', 'output': ['287353128 760854580']}, {'input': '912724694 1268739154 440710604 387545692\\r\\n', 'output': ['881421208 775091384']}, {'input': '1103702793 1095784840 788679477 432619528\\r\\n', 'output': ['788679477 432619528']}, {'input': '548893795 861438648 131329677 177735812\\r\\n', 'output': ['525318708 710943248']}, {'input': '652586118 1793536161 127888702 397268645\\r\\n', 'output': ['511554808 1589074580']}, {'input': '756278440 578150025 96644319 26752094\\r\\n', 'output': ['676510233 187264658']}, {'input': '859970763 1510247537 37524734 97452508\\r\\n', 'output': ['562871010 1461787620']}, {'input': '547278097 1977241684 51768282 183174370\\r\\n', 'output': ['543566961 1923330885']}, {'input': '62256611 453071697 240966 206678\\r\\n', 'output': ['62169228 53322924']}, {'input': '1979767797 878430446 5812753 3794880\\r\\n', 'output': ['1342745943 876617280']}, {'input': '1143276347 1875662241 178868040 116042960\\r\\n', 'output': ['1140283755 739773870']}, {'input': '435954880 1740366589 19415065 185502270\\r\\n', 'output': ['182099920 1739883360']}, {'input': '664035593 983601098 4966148 2852768\\r\\n', 'output': ['664032908 381448928']}, {'input': '1461963719 350925487 135888396 83344296\\r\\n', 'output': ['572153868 350918568']}, {'input': '754199095 348965411 161206703 67014029\\r\\n', 'output': ['754119492 313489356']}, {'input': '166102153 494841162 14166516 76948872\\r\\n', 'output': ['91096406 494812252']}, {'input': '1243276346 1975662240 38441120 291740200\\r\\n', 'output': ['259477560 1969246350']}, {'input': '535954879 1840366588 26278959 73433046\\r\\n', 'output': ['535849118 1497358892']}, {'input': '764035592 1083601097 1192390 7267738\\r\\n', 'output': ['177777265 1083570463']}, {'input': '1561963718 450925486 475523188 136236856\\r\\n', 'output': ['1561914768 447486816']}, {'input': '854199094 448965410 364102983 125971431\\r\\n', 'output': ['853687785 295356745']}, {'input': '266102152 594841161 15854566 13392106\\r\\n', 'output': ['266043102 224722482']}, {'input': '1 1 2 1\\r\\n', 'output': ['0 0']}, {'input': '2000000000 2000000000 1 1999999999\\r\\n', 'output': ['1 1999999999']}, {'input': '2000000000 2000000000 1999999999 1\\r\\n', 'output': ['1999999999 1']}, {'input': '2000000000 2000000000 2 1999999999\\r\\n', 'output': ['2 1999999999']}, {'input': '1000000000 1000000000 999999999 2\\r\\n', 'output': ['999999999 2']}, {'input': '2000000000 2000000000 1999999999 2\\r\\n', 'output': ['1999999999 2']}, {'input': '2000000000 2000000000 1999999999 1999999998\\r\\n', 'output': ['1999999999 1999999998']}, {'input': '2000000000 2000000000 1999999998 1999999999\\r\\n', 'output': ['1999999998 1999999999']}, {'input': '1002105126 227379125 101440715 179460772\\r\\n', 'output': ['101440715 179460772']}, {'input': '18773663 74427904 186329049 1221011622\\r\\n', 'output': ['0 0']}, {'input': '912724694 21235685 356014460 15587143\\r\\n', 'output': ['356014460 15587143']}]", "source_code": "import java.util.*;\n\npublic class Main\n{\n\tpublic static void main (String[] args)\n\t{\n\t\tScanner sc = new Scanner(System.in);\n\t\tint a = sc.nextInt(), b = sc.nextInt(), x = sc.nextInt(), y = sc.nextInt(), xy = 0;\n\t\tint k, m, A = 0, B = 0;\n\t\tfor (k = a ; k > 0 ; k--)\n\t\t{\n\t\t\tm = b * k;\n\t\t\tif (m % x == 0)\n\t\t\t{\n\t\t\t\txy = m / x;\n\t\t\t\tif (xy % y == 0)\n\t\t\t\t{\n\t\t\t\t\tif (A == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tA = k;\n\t\t\t\t\t\tB = m / y;\n\t\t\t\t\t}\n\t\t\t\t\telse if (xy * B > A * m)\n\t\t\t\t\t{\n\t\t\t\t\t\tA = k;\n\t\t\t\t\t\tB = m / y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (A == 0)\n\t\t{\n\t\t\tSystem.out.println(\"0 0\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSystem.out.println((A) + \" \" + (B));\n\t\t}\n\t}\n}"}
{"src_uid": "97999cd7c6de79a4e39f56a41ff59e7a", "id": 111, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': '800 600 4 3\\r\\n', 'output': ['800 600']}, {'input': '1920 1200 16 9\\r\\n', 'output': ['1920 1080']}, {'input': '1 1 1 2\\r\\n', 'output': ['0 0']}, {'input': '1002105126 227379125 179460772 1295256518\\r\\n', 'output': ['0 0']}, {'input': '625166755 843062051 1463070160 1958300154\\r\\n', 'output': ['0 0']}, {'input': '248228385 1458744978 824699604 1589655888\\r\\n', 'output': ['206174901 397413972']}, {'input': '186329049 1221011622 90104472 1769702163\\r\\n', 'output': ['60069648 1179801442']}, {'input': '511020182 242192314 394753578 198572007\\r\\n', 'output': ['394753578 198572007']}, {'input': '134081812 857875240 82707261 667398699\\r\\n', 'output': ['105411215 850606185']}, {'input': '721746595 799202881 143676564 380427290\\r\\n', 'output': ['287353128 760854580']}, {'input': '912724694 1268739154 440710604 387545692\\r\\n', 'output': ['881421208 775091384']}, {'input': '1103702793 1095784840 788679477 432619528\\r\\n', 'output': ['788679477 432619528']}, {'input': '548893795 861438648 131329677 177735812\\r\\n', 'output': ['525318708 710943248']}, {'input': '652586118 1793536161 127888702 397268645\\r\\n', 'output': ['511554808 1589074580']}, {'input': '756278440 578150025 96644319 26752094\\r\\n', 'output': ['676510233 187264658']}, {'input': '859970763 1510247537 37524734 97452508\\r\\n', 'output': ['562871010 1461787620']}, {'input': '547278097 1977241684 51768282 183174370\\r\\n', 'output': ['543566961 1923330885']}, {'input': '62256611 453071697 240966 206678\\r\\n', 'output': ['62169228 53322924']}, {'input': '1979767797 878430446 5812753 3794880\\r\\n', 'output': ['1342745943 876617280']}, {'input': '1143276347 1875662241 178868040 116042960\\r\\n', 'output': ['1140283755 739773870']}, {'input': '435954880 1740366589 19415065 185502270\\r\\n', 'output': ['182099920 1739883360']}, {'input': '664035593 983601098 4966148 2852768\\r\\n', 'output': ['664032908 381448928']}, {'input': '1461963719 350925487 135888396 83344296\\r\\n', 'output': ['572153868 350918568']}, {'input': '754199095 348965411 161206703 67014029\\r\\n', 'output': ['754119492 313489356']}, {'input': '166102153 494841162 14166516 76948872\\r\\n', 'output': ['91096406 494812252']}, {'input': '1243276346 1975662240 38441120 291740200\\r\\n', 'output': ['259477560 1969246350']}, {'input': '535954879 1840366588 26278959 73433046\\r\\n', 'output': ['535849118 1497358892']}, {'input': '764035592 1083601097 1192390 7267738\\r\\n', 'output': ['177777265 1083570463']}, {'input': '1561963718 450925486 475523188 136236856\\r\\n', 'output': ['1561914768 447486816']}, {'input': '854199094 448965410 364102983 125971431\\r\\n', 'output': ['853687785 295356745']}, {'input': '266102152 594841161 15854566 13392106\\r\\n', 'output': ['266043102 224722482']}, {'input': '1 1 2 1\\r\\n', 'output': ['0 0']}, {'input': '2000000000 2000000000 1 1999999999\\r\\n', 'output': ['1 1999999999']}, {'input': '2000000000 2000000000 1999999999 1\\r\\n', 'output': ['1999999999 1']}, {'input': '2000000000 2000000000 2 1999999999\\r\\n', 'output': ['2 1999999999']}, {'input': '1000000000 1000000000 999999999 2\\r\\n', 'output': ['999999999 2']}, {'input': '2000000000 2000000000 1999999999 2\\r\\n', 'output': ['1999999999 2']}, {'input': '2000000000 2000000000 1999999999 1999999998\\r\\n', 'output': ['1999999999 1999999998']}, {'input': '2000000000 2000000000 1999999998 1999999999\\r\\n', 'output': ['1999999998 1999999999']}, {'input': '1002105126 227379125 101440715 179460772\\r\\n', 'output': ['101440715 179460772']}, {'input': '18773663 74427904 186329049 1221011622\\r\\n', 'output': ['0 0']}, {'input': '912724694 21235685 356014460 15587143\\r\\n', 'output': ['356014460 15587143']}]", "source_code": "import java.util.Scanner;\n\n/**\n * 1528A: Reduced Size\n *\n * */\npublic class Main {\n\n    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        int a = in.nextInt(), b = in.nextInt(), x = in.nextInt(), y = in.nextInt();\n        boolean result = false;\n        long r = 0;\n        while(r * y <= b){\n            r = (a * y + b - x * y) / (x + y);\n            if(r * x >= a && r >= b/x){\n                result = true;\n                a = r;\n                b = b - r * y;\n            }\n            else{\n                r = 0;\n            }\n        }\n        if(result){\n            System.out.println((int) a + \" \" + (int) b);\n        }\n        else{\n            System.out.println(\"0 0\");\n        }\n    }\n}\n"}
{"src_uid": "97999cd7c6de79a4e39f56a41ff59e7a", "id": 111, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': '800 600 4 3\\r\\n', 'output': ['800 600']}, {'input': '1920 1200 16 9\\r\\n', 'output': ['1920 1080']}, {'input': '1 1 1 2\\r\\n', 'output': ['0 0']}, {'input': '1002105126 227379125 179460772 1295256518\\r\\n', 'output': ['0 0']}, {'input': '625166755 843062051 1463070160 1958300154\\r\\n', 'output': ['0 0']}, {'input': '248228385 1458744978 824699604 1589655888\\r\\n', 'output': ['206174901 397413972']}, {'input': '186329049 1221011622 90104472 1769702163\\r\\n', 'output': ['60069648 1179801442']}, {'input': '511020182 242192314 394753578 198572007\\r\\n', 'output': ['394753578 198572007']}, {'input': '134081812 857875240 82707261 667398699\\r\\n', 'output': ['105411215 850606185']}, {'input': '721746595 799202881 143676564 380427290\\r\\n', 'output': ['287353128 760854580']}, {'input': '912724694 1268739154 440710604 387545692\\r\\n', 'output': ['881421208 775091384']}, {'input': '1103702793 1095784840 788679477 432619528\\r\\n', 'output': ['788679477 432619528']}, {'input': '548893795 861438648 131329677 177735812\\r\\n', 'output': ['525318708 710943248']}, {'input': '652586118 1793536161 127888702 397268645\\r\\n', 'output': ['511554808 1589074580']}, {'input': '756278440 578150025 96644319 26752094\\r\\n', 'output': ['676510233 187264658']}, {'input': '859970763 1510247537 37524734 97452508\\r\\n', 'output': ['562871010 1461787620']}, {'input': '547278097 1977241684 51768282 183174370\\r\\n', 'output': ['543566961 1923330885']}, {'input': '62256611 453071697 240966 206678\\r\\n', 'output': ['62169228 53322924']}, {'input': '1979767797 878430446 5812753 3794880\\r\\n', 'output': ['1342745943 876617280']}, {'input': '1143276347 1875662241 178868040 116042960\\r\\n', 'output': ['1140283755 739773870']}, {'input': '435954880 1740366589 19415065 185502270\\r\\n', 'output': ['182099920 1739883360']}, {'input': '664035593 983601098 4966148 2852768\\r\\n', 'output': ['664032908 381448928']}, {'input': '1461963719 350925487 135888396 83344296\\r\\n', 'output': ['572153868 350918568']}, {'input': '754199095 348965411 161206703 67014029\\r\\n', 'output': ['754119492 313489356']}, {'input': '166102153 494841162 14166516 76948872\\r\\n', 'output': ['91096406 494812252']}, {'input': '1243276346 1975662240 38441120 291740200\\r\\n', 'output': ['259477560 1969246350']}, {'input': '535954879 1840366588 26278959 73433046\\r\\n', 'output': ['535849118 1497358892']}, {'input': '764035592 1083601097 1192390 7267738\\r\\n', 'output': ['177777265 1083570463']}, {'input': '1561963718 450925486 475523188 136236856\\r\\n', 'output': ['1561914768 447486816']}, {'input': '854199094 448965410 364102983 125971431\\r\\n', 'output': ['853687785 295356745']}, {'input': '266102152 594841161 15854566 13392106\\r\\n', 'output': ['266043102 224722482']}, {'input': '1 1 2 1\\r\\n', 'output': ['0 0']}, {'input': '2000000000 2000000000 1 1999999999\\r\\n', 'output': ['1 1999999999']}, {'input': '2000000000 2000000000 1999999999 1\\r\\n', 'output': ['1999999999 1']}, {'input': '2000000000 2000000000 2 1999999999\\r\\n', 'output': ['2 1999999999']}, {'input': '1000000000 1000000000 999999999 2\\r\\n', 'output': ['999999999 2']}, {'input': '2000000000 2000000000 1999999999 2\\r\\n', 'output': ['1999999999 2']}, {'input': '2000000000 2000000000 1999999999 1999999998\\r\\n', 'output': ['1999999999 1999999998']}, {'input': '2000000000 2000000000 1999999998 1999999999\\r\\n', 'output': ['1999999998 1999999999']}, {'input': '1002105126 227379125 101440715 179460772\\r\\n', 'output': ['101440715 179460772']}, {'input': '18773663 74427904 186329049 1221011622\\r\\n', 'output': ['0 0']}, {'input': '912724694 21235685 356014460 15587143\\r\\n', 'output': ['356014460 15587143']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Reca {\n\n    private static class FastScanner {\n        private final InputStream in = System.in;\n        private final DataInputStream sin = new DataInputStream(in);\n        private StringTokenizer tok = null;\n\n        private FastScanner() { }\n\n        private String next() {\n            if (tok == null ||!tok.hasMoreTokens()) {\n                try {\n                    tok = new StringTokenizer(sin.readLine());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if (tok.hasMoreTokens())\n                return tok.nextToken();\n            else\n                throw new NoSuchElementException();\n        }\n\n        private long nextLong() throws IOException {\n            return Long.parseLong(next());\n        }\n\n        private int nextInt() throws IOException {\n            return Integer.parseInt(next());\n        }\n\n        private double nextDouble() throws IOException {\n            return Double.parseDouble(next());\n        }\n    }\n\n    public static void main(String[] args) {\n        FastScanner scanner = new FastScanner();\n\n        int a = (int)scanner.nextInt();\n        int b = (int)scanner.nextInt();\n        int x = (int)scanner.nextInt();\n        int y = (int)scanner.nextInt();\n        int a2 = 0;\n        int b2 = 0;\n\n        if (a%x==0) {\n            a2 = a;\n            b2 = b;\n        }\n        else {\n            for (int i = 0; i <= 1000; i++) {\n                int temp = b/y;\n                int checker = temp*y;\n\n                if (checker == b) {\n                    int temp2 = temp*x;\n                    if (temp2 > a) {\n                        int temp3 = temp2-a;\n                        int temp4 = temp3/i;\n                        temp2 = temp2-temp3/i;\n                        if (temp4*y+temp2 > b) {\n                            if ((temp2*x+a) > (a2*x+b2)) {\n                                a2 = temp2;\n                                b2 = a*y/x;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (a2 == 0) System.out.println(\"0 0\");\n        else System.out.println(a2+\" \"+b2);\n\n    }\n}\n"}
{"src_uid": "97999cd7c6de79a4e39f56a41ff59e7a", "id": 111, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': '800 600 4 3\\r\\n', 'output': ['800 600']}, {'input': '1920 1200 16 9\\r\\n', 'output': ['1920 1080']}, {'input': '1 1 1 2\\r\\n', 'output': ['0 0']}, {'input': '1002105126 227379125 179460772 1295256518\\r\\n', 'output': ['0 0']}, {'input': '625166755 843062051 1463070160 1958300154\\r\\n', 'output': ['0 0']}, {'input': '248228385 1458744978 824699604 1589655888\\r\\n', 'output': ['206174901 397413972']}, {'input': '186329049 1221011622 90104472 1769702163\\r\\n', 'output': ['60069648 1179801442']}, {'input': '511020182 242192314 394753578 198572007\\r\\n', 'output': ['394753578 198572007']}, {'input': '134081812 857875240 82707261 667398699\\r\\n', 'output': ['105411215 850606185']}, {'input': '721746595 799202881 143676564 380427290\\r\\n', 'output': ['287353128 760854580']}, {'input': '912724694 1268739154 440710604 387545692\\r\\n', 'output': ['881421208 775091384']}, {'input': '1103702793 1095784840 788679477 432619528\\r\\n', 'output': ['788679477 432619528']}, {'input': '548893795 861438648 131329677 177735812\\r\\n', 'output': ['525318708 710943248']}, {'input': '652586118 1793536161 127888702 397268645\\r\\n', 'output': ['511554808 1589074580']}, {'input': '756278440 578150025 96644319 26752094\\r\\n', 'output': ['676510233 187264658']}, {'input': '859970763 1510247537 37524734 97452508\\r\\n', 'output': ['562871010 1461787620']}, {'input': '547278097 1977241684 51768282 183174370\\r\\n', 'output': ['543566961 1923330885']}, {'input': '62256611 453071697 240966 206678\\r\\n', 'output': ['62169228 53322924']}, {'input': '1979767797 878430446 5812753 3794880\\r\\n', 'output': ['1342745943 876617280']}, {'input': '1143276347 1875662241 178868040 116042960\\r\\n', 'output': ['1140283755 739773870']}, {'input': '435954880 1740366589 19415065 185502270\\r\\n', 'output': ['182099920 1739883360']}, {'input': '664035593 983601098 4966148 2852768\\r\\n', 'output': ['664032908 381448928']}, {'input': '1461963719 350925487 135888396 83344296\\r\\n', 'output': ['572153868 350918568']}, {'input': '754199095 348965411 161206703 67014029\\r\\n', 'output': ['754119492 313489356']}, {'input': '166102153 494841162 14166516 76948872\\r\\n', 'output': ['91096406 494812252']}, {'input': '1243276346 1975662240 38441120 291740200\\r\\n', 'output': ['259477560 1969246350']}, {'input': '535954879 1840366588 26278959 73433046\\r\\n', 'output': ['535849118 1497358892']}, {'input': '764035592 1083601097 1192390 7267738\\r\\n', 'output': ['177777265 1083570463']}, {'input': '1561963718 450925486 475523188 136236856\\r\\n', 'output': ['1561914768 447486816']}, {'input': '854199094 448965410 364102983 125971431\\r\\n', 'output': ['853687785 295356745']}, {'input': '266102152 594841161 15854566 13392106\\r\\n', 'output': ['266043102 224722482']}, {'input': '1 1 2 1\\r\\n', 'output': ['0 0']}, {'input': '2000000000 2000000000 1 1999999999\\r\\n', 'output': ['1 1999999999']}, {'input': '2000000000 2000000000 1999999999 1\\r\\n', 'output': ['1999999999 1']}, {'input': '2000000000 2000000000 2 1999999999\\r\\n', 'output': ['2 1999999999']}, {'input': '1000000000 1000000000 999999999 2\\r\\n', 'output': ['999999999 2']}, {'input': '2000000000 2000000000 1999999999 2\\r\\n', 'output': ['1999999999 2']}, {'input': '2000000000 2000000000 1999999999 1999999998\\r\\n', 'output': ['1999999999 1999999998']}, {'input': '2000000000 2000000000 1999999998 1999999999\\r\\n', 'output': ['1999999998 1999999999']}, {'input': '1002105126 227379125 101440715 179460772\\r\\n', 'output': ['101440715 179460772']}, {'input': '18773663 74427904 186329049 1221011622\\r\\n', 'output': ['0 0']}, {'input': '912724694 21235685 356014460 15587143\\r\\n', 'output': ['356014460 15587143']}]", "source_code": "import java.util.*;\npublic class Screens {\n    static class Bound{\n        long x;\n        long y;\n        public Bound(long x, long y){\n            this.x=x;\n            this.y=y;\n        }\n        boolean is(long x, long y){\n            return x<=this.x && y<=this.y;\n        }\n    }\n    public static void main(String[] args) {\n        Scanner in=new Scanner(System.in);\n        long a = in.nextInt();\n        long b = in.nextInt();\n        long x = in.nextInt();\n        long y = in.nextInt();\n        Bound ab = new Bound(a,b);\n        Bound xy = new Bound(x,y);\n        Bound max=new Bound(0,0);\n        for (long b1 = 0 ; b1 < a ; b1++){\n            if(b1>0 && a%b1==0)\n            {\n                long a1 = a/b1;\n                if(xy.is(a1,b1))\n                {\n                    max = new Bound(a1,b1);\n                }\n                else if(xy.is(b1,a1))\n                {\n                    max = new Bound(b1,a1);\n                }\n            }\n        }\n        if(max.x>0 && max.y>0){\n            for (long a1 = 0 ; a1 < max.x ; a1++){\n                if(max.x%a1==0){\n                    long b1 = max.x/a1;\n                    if(ab.is(a1,b1)){\n                        System.out.println(a1+\" \"+b1);\n                        break;\n                    }\n                }\n            }\n        }\n        else\n        {\n            System.out.println(\"0 0\");\n        }\n    }\n}"}
{"src_uid": "97999cd7c6de79a4e39f56a41ff59e7a", "id": 111, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': '800 600 4 3\\r\\n', 'output': ['800 600']}, {'input': '1920 1200 16 9\\r\\n', 'output': ['1920 1080']}, {'input': '1 1 1 2\\r\\n', 'output': ['0 0']}, {'input': '1002105126 227379125 179460772 1295256518\\r\\n', 'output': ['0 0']}, {'input': '625166755 843062051 1463070160 1958300154\\r\\n', 'output': ['0 0']}, {'input': '248228385 1458744978 824699604 1589655888\\r\\n', 'output': ['206174901 397413972']}, {'input': '186329049 1221011622 90104472 1769702163\\r\\n', 'output': ['60069648 1179801442']}, {'input': '511020182 242192314 394753578 198572007\\r\\n', 'output': ['394753578 198572007']}, {'input': '134081812 857875240 82707261 667398699\\r\\n', 'output': ['105411215 850606185']}, {'input': '721746595 799202881 143676564 380427290\\r\\n', 'output': ['287353128 760854580']}, {'input': '912724694 1268739154 440710604 387545692\\r\\n', 'output': ['881421208 775091384']}, {'input': '1103702793 1095784840 788679477 432619528\\r\\n', 'output': ['788679477 432619528']}, {'input': '548893795 861438648 131329677 177735812\\r\\n', 'output': ['525318708 710943248']}, {'input': '652586118 1793536161 127888702 397268645\\r\\n', 'output': ['511554808 1589074580']}, {'input': '756278440 578150025 96644319 26752094\\r\\n', 'output': ['676510233 187264658']}, {'input': '859970763 1510247537 37524734 97452508\\r\\n', 'output': ['562871010 1461787620']}, {'input': '547278097 1977241684 51768282 183174370\\r\\n', 'output': ['543566961 1923330885']}, {'input': '62256611 453071697 240966 206678\\r\\n', 'output': ['62169228 53322924']}, {'input': '1979767797 878430446 5812753 3794880\\r\\n', 'output': ['1342745943 876617280']}, {'input': '1143276347 1875662241 178868040 116042960\\r\\n', 'output': ['1140283755 739773870']}, {'input': '435954880 1740366589 19415065 185502270\\r\\n', 'output': ['182099920 1739883360']}, {'input': '664035593 983601098 4966148 2852768\\r\\n', 'output': ['664032908 381448928']}, {'input': '1461963719 350925487 135888396 83344296\\r\\n', 'output': ['572153868 350918568']}, {'input': '754199095 348965411 161206703 67014029\\r\\n', 'output': ['754119492 313489356']}, {'input': '166102153 494841162 14166516 76948872\\r\\n', 'output': ['91096406 494812252']}, {'input': '1243276346 1975662240 38441120 291740200\\r\\n', 'output': ['259477560 1969246350']}, {'input': '535954879 1840366588 26278959 73433046\\r\\n', 'output': ['535849118 1497358892']}, {'input': '764035592 1083601097 1192390 7267738\\r\\n', 'output': ['177777265 1083570463']}, {'input': '1561963718 450925486 475523188 136236856\\r\\n', 'output': ['1561914768 447486816']}, {'input': '854199094 448965410 364102983 125971431\\r\\n', 'output': ['853687785 295356745']}, {'input': '266102152 594841161 15854566 13392106\\r\\n', 'output': ['266043102 224722482']}, {'input': '1 1 2 1\\r\\n', 'output': ['0 0']}, {'input': '2000000000 2000000000 1 1999999999\\r\\n', 'output': ['1 1999999999']}, {'input': '2000000000 2000000000 1999999999 1\\r\\n', 'output': ['1999999999 1']}, {'input': '2000000000 2000000000 2 1999999999\\r\\n', 'output': ['2 1999999999']}, {'input': '1000000000 1000000000 999999999 2\\r\\n', 'output': ['999999999 2']}, {'input': '2000000000 2000000000 1999999999 2\\r\\n', 'output': ['1999999999 2']}, {'input': '2000000000 2000000000 1999999999 1999999998\\r\\n', 'output': ['1999999999 1999999998']}, {'input': '2000000000 2000000000 1999999998 1999999999\\r\\n', 'output': ['1999999998 1999999999']}, {'input': '1002105126 227379125 101440715 179460772\\r\\n', 'output': ['101440715 179460772']}, {'input': '18773663 74427904 186329049 1221011622\\r\\n', 'output': ['0 0']}, {'input': '912724694 21235685 356014460 15587143\\r\\n', 'output': ['356014460 15587143']}]", "source_code": "import java.util.*;\n\npublic class Reduced_monitor {\n\n    public static void main(String[] args) {\n\n        Scanner input = new Scanner(System.in);\n        long a = input.nextLong();\n        long b = input.nextLong();\n        long x = input.nextLong();\n        long y = input.nextLong();\n\n        long n = 2*1000000001;\n        for(long c = (long)(a * 1.0 / x + 1); c >= 1 ; --c ){\n            for(long d = 1 ; d <= (long)(b * 1.0 / y) ; ++d ){\n                if(  c * x <= a && d * y <= b && (a * b) % (c * d) == 0 && (a * b) / (c * d) >= n ){\n                    a = c;\n                    b = d;\n                    n = a * b / (c * d);\n                }\n            }\n        }\n        System.out.println(a + \" \" + b );\n    }\n}"}
{"src_uid": "4de8b72f9ce12554cae8b6a83b3f023e", "id": 112, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': '2 4\\r\\nABDC\\r\\nABDC\\r\\n', 'output': ['3\\r\\n2 1\\r\\n']}, {'input': '2 6\\r\\nABCCBA\\r\\nABCCBA\\r\\n', 'output': ['1\\r\\n2 6\\r\\n']}, {'input': '2 2\\r\\nAB\\r\\nCD\\r\\n', 'output': ['4\\r\\n1 1\\r\\n']}, {'input': '4 6\\r\\nABABAC\\r\\nBABABC\\r\\nABABAC\\r\\nCCCCCA\\r\\n', 'output': ['4\\r\\n2 3\\r\\n']}, {'input': '1 12\\r\\nABAAADCAAABX\\r\\n', 'output': ['4\\r\\n1 3\\r\\n']}, {'input': '4 6\\r\\nABCDEF\\r\\nGHIJKL\\r\\nMNOPQR\\r\\nSTUVWX\\r\\n', 'output': ['12\\r\\n1 1\\r\\n']}, {'input': '5 5\\r\\nABAAA\\r\\nBBBAA\\r\\nABABA\\r\\nBBABB\\r\\nBAAAB\\r\\n', 'output': ['3\\r\\n1 5\\r\\n']}, {'input': '5 6\\r\\nBBBABB\\r\\nAAAABB\\r\\nABABAA\\r\\nABBBAA\\r\\nBABBBA\\r\\n', 'output': ['4\\r\\n1 6\\r\\n']}, {'input': '7 7\\r\\nBBAAABB\\r\\nAABBBBA\\r\\nAABABBA\\r\\nAABABAB\\r\\nAABBBAA\\r\\nBAAAABA\\r\\nBBABBBB\\r\\n', 'output': ['3\\r\\n1 7\\r\\n']}, {'input': '8 7\\r\\nBABABBB\\r\\nABABABA\\r\\nAABBABA\\r\\nABBABAA\\r\\nBABAAAB\\r\\nAABBBBA\\r\\nABBBBAB\\r\\nBBAAABA\\r\\n', 'output': ['5\\r\\n1 7\\r\\n']}, {'input': '8 9\\r\\nBAABABAAB\\r\\nBAABAAAAB\\r\\nBBBBBAABB\\r\\nAAAAAAAAB\\r\\nBABBABBAA\\r\\nBBABABBBB\\r\\nBABABBAAA\\r\\nAABAABBBB\\r\\n', 'output': ['7\\r\\n8 1\\r\\n']}, {'input': '10 10\\r\\nABBAABAABB\\r\\nABAAAAAABA\\r\\nBAABABABAA\\r\\nBAAAAAAAAB\\r\\nBABABBBAAB\\r\\nABBABBBBBA\\r\\nAABABAAAAA\\r\\nBAAAABAABA\\r\\nABABAABBAA\\r\\nBBABBABABB\\r\\n', 'output': ['9\\r\\n1 10\\r\\n']}, {'input': '10 11\\r\\nABBBAABABBB\\r\\nBBAABABBAAB\\r\\nAABBBBBAAAA\\r\\nBBABABAAABA\\r\\nAABABBBAABB\\r\\nAAABABAABAB\\r\\nBBABBBABBBB\\r\\nBBABABABBAA\\r\\nBBABABAAABB\\r\\nBABAABAABAB\\r\\n', 'output': ['5\\r\\n10 1\\r\\n']}, {'input': '12 11\\r\\nBBAAAABBAAB\\r\\nBBABBABBABB\\r\\nBAABABBABBA\\r\\nBABBBAAAABA\\r\\nABBAABBBBBA\\r\\nABBABBABABB\\r\\nAAABBBABBBB\\r\\nBAABAAABAAA\\r\\nAAAABBBBABA\\r\\nAAABAAABBBB\\r\\nBAAAAABABAB\\r\\nABBBBABABBB\\r\\n', 'output': ['7\\r\\n1 11\\r\\n']}, {'input': '12 13\\r\\nBBABABAAAAABA\\r\\nABAAAAAAAABBA\\r\\nABBBABAAAAABA\\r\\nBBBAABABBABBB\\r\\nABABAAABABABB\\r\\nABBAABAABBAAA\\r\\nAABABBAAABBAB\\r\\nABBBBBABBAABA\\r\\nBBBBBABBABBAA\\r\\nAAAAAAABBBAAB\\r\\nBAABBBAABAAAA\\r\\nBBBBBBABABABA\\r\\n', 'output': ['7\\r\\n12 1\\r\\n']}, {'input': '14 12\\r\\nBBAAABBBAAAB\\r\\nBBABAAAAABAA\\r\\nAABBABBBABBA\\r\\nBABAABAABBBB\\r\\nBBBABBBBABAA\\r\\nABBAABBAAABA\\r\\nABAAAAABBBAB\\r\\nBBAABBABBBAA\\r\\nBAABABAAABAB\\r\\nAAABBBABBABA\\r\\nBABBBBAABBBA\\r\\nAAAAABABBAAB\\r\\nBABBBABBBBBA\\r\\nBAAAABAABAAA\\r\\n', 'output': ['14\\r\\n1 12\\r\\n']}, {'input': '14 10\\r\\nABBAAABBAA\\r\\nBBBBBABBAA\\r\\nBABABBABAB\\r\\nAAABABBAAB\\r\\nBBABABBBAB\\r\\nBBABBABABB\\r\\nAABBBBABAA\\r\\nABBBAAAABB\\r\\nABBABAABAA\\r\\nABABABABBA\\r\\nABAABBBAAB\\r\\nAAAAAAAAAA\\r\\nABABBAABAA\\r\\nBABAABABBB\\r\\n', 'output': ['10\\r\\n1 10\\r\\n']}, {'input': '16 15\\r\\nABBBBAAABABBABB\\r\\nABBBAAABBABBBBB\\r\\nBABABAABBBABABB\\r\\nAAABBBBBABBABBB\\r\\nBAABAABAABAABBA\\r\\nABBBBAAAAAAAABB\\r\\nBAABBBABABAAAAB\\r\\nAAAABBAABBAABAA\\r\\nABBABABAAABABBB\\r\\nAAABBBABAABABAA\\r\\nBAABABBAAABBAAA\\r\\nAAAAAAABABBBAAA\\r\\nBABBAABBABAAAAB\\r\\nABABAAABBBBBAAB\\r\\nBBABBAABABAABBB\\r\\nBAAAABBBABABBBA\\r\\n', 'output': ['12\\r\\n4 3\\r\\n']}, {'input': '16 16\\r\\nABBABBABBAABBBAB\\r\\nBABABBAABAABBAAA\\r\\nBAAABBAABAABBBAA\\r\\nAABAAAABAAAABBBA\\r\\nBAAAABAABBBABBAA\\r\\nAABBABABABAABBBA\\r\\nBABBBABAAAAABABB\\r\\nBABBBBBBBBABBBAB\\r\\nBAAAABBBABAABBBA\\r\\nBABBBABBAABABBAA\\r\\nBBBBBBAABBBABBBA\\r\\nBABAAAABAABAABBB\\r\\nAAAAABBAAABABAAA\\r\\nBABBABABABAAABAB\\r\\nBAAAAAAAABBABAAA\\r\\nBAAAAABABBBBAAAA\\r\\n', 'output': ['15\\r\\n1 16\\r\\n']}, {'input': '18 18\\r\\nBBBBBBBABABBBABABA\\r\\nBAAABAAABBBABABBBB\\r\\nBABBAAABAAABAAABAA\\r\\nAABBABBBABBBBBAAAB\\r\\nBBBAAAAABBABBAAAAA\\r\\nAABBAABABABBBABABA\\r\\nBAABBAAAABABAABABB\\r\\nBABBABBBAAAABAABBA\\r\\nBBBBAABAAABAAABBBA\\r\\nABABBAAABBBBBABABA\\r\\nABABAABBBBBABBBBBB\\r\\nABAAABBABBABAAAABA\\r\\nBABAAABABABBBABBBB\\r\\nBBBBABBBABBBBBBBBA\\r\\nBAAABAABABABBBBAAB\\r\\nBABBAABABBABAABBBB\\r\\nBAABABAAAABBABBAAA\\r\\nBAAABBBAABABBABBAB\\r\\n', 'output': ['23\\r\\n2 6\\r\\n']}, {'input': '17 17\\r\\nBBAABAABBBBBAABBB\\r\\nBBABABBBBABAAABBB\\r\\nAAAABAAAABABABBAA\\r\\nBBABAAABBABBAAABA\\r\\nAAABBBBBAABABBBAB\\r\\nAABBBBBABABABABBB\\r\\nBAABAAABAAABBAABB\\r\\nBBAAAAAABABABBAAB\\r\\nAAAAABAABBAAAABAA\\r\\nBABAABABABABABBBB\\r\\nBAABABBAAABBAAABB\\r\\nABBAAABBBBAAAABAB\\r\\nBBABAABAAAAAABBBB\\r\\nAAABBABBAAAAABBBB\\r\\nAABAABBAABBABAABB\\r\\nABABAAABBABAAABAB\\r\\nBBABABBBAAAAAAABA\\r\\n', 'output': ['3\\r\\n1 17\\r\\n']}, {'input': '20 20\\r\\nABBBAAABABAAAAABBABB\\r\\nBABABBAABAABBAAABABB\\r\\nBABBBAABAABBABBBBABA\\r\\nBAAABBAAABABBABBAAAA\\r\\nABBAABAABBBBAAABBBAA\\r\\nBAAAAAAAABABBAAAAABB\\r\\nAAAAAAABABBBBBAABAAB\\r\\nABBBBABAABBAAAAABAAA\\r\\nBAAAAABBABAAAAABAAAB\\r\\nABABAABABBBABBAABBAA\\r\\nBAAABBBAAAABBBBBABAA\\r\\nAAABBABABAABBABAABAB\\r\\nABBABABABABAAABABABA\\r\\nBAABAAAAABBAABBBAAAB\\r\\nABAAABBABAABBBABAABA\\r\\nBAABBBBBABBBABBBABAB\\r\\nBABBABABBBBBBBBABAAA\\r\\nABAAABAAABAAABABABAA\\r\\nBAABBBBAABBAAAAAABBA\\r\\nABAABBABAAABBABABAAA\\r\\n', 'output': ['23\\r\\n1 10\\r\\n']}, {'input': '1 1\\r\\nC\\r\\n', 'output': ['1\\r\\n1 1\\r\\n']}, {'input': '2 2\\r\\nCC\\r\\nBB\\r\\n', 'output': ['2\\r\\n1 2\\r\\n']}, {'input': '3 3\\r\\nACA\\r\\nCCA\\r\\nACB\\r\\n', 'output': ['3\\r\\n1 3\\r\\n']}, {'input': '4 4\\r\\nACAC\\r\\nCBCC\\r\\nABBC\\r\\nCCAC\\r\\n', 'output': ['5\\r\\n1 4\\r\\n']}, {'input': '5 5\\r\\nBBCAB\\r\\nBCBAC\\r\\nCAAAB\\r\\nACBBA\\r\\nCAACB\\r\\n', 'output': ['3\\r\\n1 5\\r\\n']}, {'input': '14 16\\r\\nCBCCCABCBBBAAACC\\r\\nAABAACBACBCBACCA\\r\\nABBBABAACCACCCCC\\r\\nBBACACACCCCBBBAC\\r\\nBBCAABACBAACBCAA\\r\\nAAACCACBBCABABCB\\r\\nABCBCAAAAACBABBA\\r\\nAAABBBCCBAACBBCA\\r\\nBBAACBABBBCCBAAC\\r\\nBAABCCBAAABAACAC\\r\\nABBBBCBAACACCBCB\\r\\nBCABACBBBCAACACC\\r\\nACCCCABCCCBBCAAC\\r\\nBCBBCCCBCBCCACAA\\r\\n', 'output': ['15\\r\\n7 1\\r\\n']}, {'input': '16 16\\r\\nACABBCCBAABCCCCB\\r\\nAABCACCAAACACABB\\r\\nBCCCAABBAACBACAA\\r\\nBCACAABBBCAAAABA\\r\\nACCBABCCACABBCCC\\r\\nCCAAACACACBCABCA\\r\\nBCAACBBBCACBBCAB\\r\\nBABBCBBBCCCBAACC\\r\\nBBBBBABACBABBCBA\\r\\nABAACBACCACBBABA\\r\\nABAACBACCBCBCCBB\\r\\nBCACCCAABCBBCBCB\\r\\nBBBCCCBCCBCBACCA\\r\\nAABCBBBBACCACCBB\\r\\nBCABCCCBCBBBCBCC\\r\\nACCCCCCBBBAABACC\\r\\n', 'output': ['17\\r\\n4 2\\r\\n']}, {'input': '17 17\\r\\nBCBAAABAABCCCAAAC\\r\\nBBAABCABBAACCACBB\\r\\nABCCBAABBCCABBBAB\\r\\nAACCBBACCAAACCACA\\r\\nABBACBAAAABBABCAA\\r\\nACBACCCABAABBCABB\\r\\nCBCCCBCACBABCAAAA\\r\\nAAABACACABABCCCBC\\r\\nCABABBABBBABBBCAB\\r\\nBCBCBAAACCCACACBA\\r\\nBBACABACAAABCCBBC\\r\\nABAABBABCCAABBCCA\\r\\nAABBACBCBCCBAACBB\\r\\nBBABCBBCCCBCACBCB\\r\\nBABCBBCCABCABBAAA\\r\\nAABAABBBBAACAABCC\\r\\nBACCCBBCCABBBACBB\\r\\n', 'output': ['3\\r\\n1 17\\r\\n']}, {'input': '19 19\\r\\nACCACBCABACABCACCAA\\r\\nBCACAAAACCACCCCBCCB\\r\\nCBACBBCBCBCABCABACA\\r\\nAACCAABBBCAAABACAAC\\r\\nACACCCBBBACACCAAABA\\r\\nAACAABCACCBCACCABBA\\r\\nAABBCCABACCACABACAA\\r\\nACBCCACBACCACABCABC\\r\\nAACAABCAACCBBAACBCA\\r\\nAAACACBAABCBACCAAAB\\r\\nAABACABBABCACAACBCA\\r\\nBABAAABCACBABACBBBC\\r\\nBAABCAAABCAABBCCAAC\\r\\nBCABCCBCCBCBABCBCCA\\r\\nBACACBACBCABBCBCABB\\r\\nABCACCBBBBCBBCABAAC\\r\\nBBBBCCBCBACAACBCBCA\\r\\nAAABBBBCACCACCAAACC\\r\\nCCCCCBAABAAAACCCBBA\\r\\n', 'output': ['3\\r\\n1 19\\r\\n']}, {'input': '20 18\\r\\nAABCAACCBBCBABBBBB\\r\\nBBCBAACCBCAACBBCCB\\r\\nACCBABABACBBACBBAB\\r\\nACBBBCBAAACAAAAABB\\r\\nBCBABABAACCCABBBCC\\r\\nBAAAAAACACABBCCCAC\\r\\nCBACCBCBACACAAACBC\\r\\nCBACAACBCBCAACACCA\\r\\nCCCBACCBACACCCBCCB\\r\\nCACABBBBBBCCBACCBA\\r\\nCCBCACABCBACABBCCB\\r\\nAACACCCCCABAABCACC\\r\\nCBBACCBBCBCBBCCAAB\\r\\nCABBABACCABACAABAB\\r\\nBBBABBCBCBACBCCABA\\r\\nBCCAACBCBCAAAABACA\\r\\nAAABACBBCCCACACBAC\\r\\nBABAAAACCBACBACAAA\\r\\nAABBABCBBBACAACBAB\\r\\nBBABBAABACBAABCCBB\\r\\n', 'output': ['27\\r\\n4 2\\r\\n']}, {'input': '1 1\\r\\nZ\\r\\n', 'output': ['1\\r\\n1 1\\r\\n']}, {'input': '2 2\\r\\nML\\r\\nWQ\\r\\n', 'output': ['4\\r\\n1 1\\r\\n']}, {'input': '3 3\\r\\nBXP\\r\\nUJF\\r\\nAQT\\r\\n', 'output': ['4\\r\\n1 1\\r\\n']}, {'input': '4 3\\r\\nOKJ\\r\\nXTV\\r\\nDVW\\r\\nHMK\\r\\n', 'output': ['5\\r\\n2 1\\r\\n']}, {'input': '5 5\\r\\nDZEZF\\r\\nOHZZC\\r\\nCNDOX\\r\\nNVYDP\\r\\nUCIAX\\r\\n', 'output': ['3\\r\\n1 5\\r\\n']}, {'input': '6 6\\r\\nQLXBOE\\r\\nKEEYTR\\r\\nZLPMSP\\r\\nWOKAHN\\r\\nLYXBXU\\r\\nSZOEZV\\r\\n', 'output': ['14\\r\\n2 1\\r\\n']}, {'input': '6 7\\r\\nGYSGYUL\\r\\nKGTJUVI\\r\\nFNRHOND\\r\\nZGZAFYZ\\r\\nQVCRZCA\\r\\nJCCXKGV\\r\\n', 'output': ['7\\r\\n2 1\\r\\n']}, {'input': '8 8\\r\\nTNMIIMOP\\r\\nJOAXSHVN\\r\\nQYHMVXGM\\r\\nQOXAIUMI\\r\\nLAAXNKCH\\r\\nORWESZUV\\r\\nPMIXHLEA\\r\\nAENPGVYK\\r\\n', 'output': ['13\\r\\n1 4\\r\\n']}, {'input': '9 9\\r\\nIZHKRCRTM\\r\\nLQBOENMNQ\\r\\nYLNVFBFUY\\r\\nACTTYWABL\\r\\nYSEGWNQHC\\r\\nTZASWPPAG\\r\\nLLZTKFPMV\\r\\nGXBETPPPN\\r\\nUCPEFNJKN\\r\\n', 'output': ['8\\r\\n1 3\\r\\n']}, {'input': '9 10\\r\\nXHPCDAAFPZ\\r\\nJRZCDTQBYP\\r\\nZBTAMDPIFY\\r\\nXBKTMXNIWM\\r\\nDAIONPEBYF\\r\\nAFHBCBDTKB\\r\\nKRVEBSUXRM\\r\\nWGMEZTWDBX\\r\\nNOJUCDZPZY\\r\\n', 'output': ['10\\r\\n3 1\\r\\n']}, {'input': '12 13\\r\\nTHSGJEPTDFEIJ\\r\\nOWPJGXSXJRYGD\\r\\nVYENWXFWSOSMX\\r\\nFZDFXFPWEIYYV\\r\\nOEODFOGQWJEEU\\r\\nSQRNSBTAMLQRU\\r\\nLXGZERSWTJWQK\\r\\nLGRJJMDTZVZWJ\\r\\nDWVBTSZKFUAHT\\r\\nHSSZHXAWVWMHB\\r\\nJZOCNFUHTHQYV\\r\\nTUHDMTZAQVWDL\\r\\n', 'output': ['10\\r\\n3 1\\r\\n']}, {'input': '14 13\\r\\nBGBALYLHQYMFM\\r\\nRLFOZFDFMRFEN\\r\\nGDWROOMXUVBOW\\r\\nDPXWRDPCEFMRQ\\r\\nJOSEGKGMHGHFC\\r\\nJHXUBTPOZOYGJ\\r\\nFHUUMHWSQRNEP\\r\\nVGWYMTMWHWGIL\\r\\nVMWDTBDJGEVZI\\r\\nLEJSIHTQKYDXY\\r\\nOLUOIWECMZVAI\\r\\nVDXSGRPMCCJEM\\r\\nMYWMDDAQAPBSG\\r\\nXQWPFRAPVEOYO\\r\\n', 'output': ['6\\r\\n7 1\\r\\n']}, {'input': '14 15\\r\\nJFLSOQHVDRTCPWZ\\r\\nWSROLOOQOCWPJNX\\r\\nEEUZVBLQXBFQKNA\\r\\nQIGZDIMDXVCHJFJ\\r\\nUDJGIZWDBMMMBJR\\r\\nEWXAQHPRYBQOYDT\\r\\nUDEAPOBVZOXNVMK\\r\\nAYEVKFIKNRUVRQC\\r\\nNLTLJBXWMUQXAZD\\r\\nKOXESBBUYLMIDOI\\r\\nZOJWEOJFCYTILHE\\r\\nRQDNTBZZXPKNCEN\\r\\nSYGFASAQUSMYYRP\\r\\nUOYCFYUDACJDTAD\\r\\n', 'output': ['13\\r\\n1 5\\r\\n']}, {'input': '16 15\\r\\nPFUMRKDISIBBVYP\\r\\nMZKXWWSQXADAPEB\\r\\nVTBYXGWQYZTHBHY\\r\\nONGURZKWHZDKIDF\\r\\nGCMHQQNJJXHHPVU\\r\\nNLMUXXKZOFNMFTG\\r\\nANDDDPHEDVWVHLC\\r\\nOYGXUHIMYPNIXCT\\r\\nILCGDQZNCSTIILX\\r\\nZVSYMJBHAUEXZMY\\r\\nMYOKFPJKKJLKVWI\\r\\nUEMUOOAJSNTOLEN\\r\\nLKIROZUNWRZBMZP\\r\\nYYWCXLGHLZQVPOB\\r\\nFMHPKABCBAAYCFA\\r\\nNRGFEWPLKNORSZR\\r\\n', 'output': ['18\\r\\n1 3\\r\\n']}, {'input': '14 17\\r\\nXGFETCAWEBHYYDECE\\r\\nCGFEUQEYMLSVHNKJA\\r\\nZMGSXZJASBUPTHRFQ\\r\\nGQREDKHDBTZPGWHEO\\r\\nQGACDHZVBAOGLHHEL\\r\\nLKLKVFVDHSRQNEDXC\\r\\nVNREYHZDJHPJKHXDO\\r\\nKBOMZYHZEUOYUOXSQ\\r\\nFNQGOBVDBTMUJPAKU\\r\\nXFPGQQXBPELKWSXCJ\\r\\nABUKLBPTFOGUJFDEQ\\r\\nKXPJEZJQCHTENYSKY\\r\\nXXOKEXESEVLQMFDZG\\r\\nVPGUBSJLGBWZWAMFZ\\r\\n', 'output': ['6\\r\\n7 1\\r\\n']}, {'input': '16 17\\r\\nFFOYWWWJRUPVBGSSJ\\r\\nVPOMWQMWUWYMMDAPB\\r\\nARQUYXZTHVSQZHMVJ\\r\\nCJAGELECYEXSHEYTU\\r\\nXRSZPRCBQPJQACNWR\\r\\nJISALKDCKJUWWHMYH\\r\\nGMISALZMLGRRGALJA\\r\\nCWPYTQYBXKLBGWKNF\\r\\nMJJYWBIHJLARHFNWB\\r\\nKEREXXISTPANXGGJG\\r\\nLECEJLPAFOZHLRTJM\\r\\nHBOWFNSQFRRGEJFMJ\\r\\nVEGIRVEXACMJVKFYN\\r\\nSCGOPQKUHEDNIPIRE\\r\\nLENRPPYJBEVDTOPOY\\r\\nFHJOESUHLIJRFPVBK\\r\\n', 'output': ['8\\r\\n4 1\\r\\n']}, {'input': '18 19\\r\\nLEXQWPUXGOWSELHIQPY\\r\\nZUYPTUDHEEQVRWBCXBU\\r\\nZUPMYQQQFHGKZZDMLFM\\r\\nCASSUVIKQKCEALUDDFK\\r\\nFDBZOXULVGFARYPNAQY\\r\\nWEFLTZOSOAGAMBWNGVC\\r\\nEVAPNTSSIMKNBOAHFSC\\r\\nUHTWEBRCEUJSARNEWYI\\r\\nGXGSDCDUIWYQRZUPQBZ\\r\\nFMYJUOHENURMDINJGCN\\r\\nHIBATJCOGWWRQWTLXDH\\r\\nRDDXJNZHQGUWPNGIDRO\\r\\nAJGHDUCGGLPYYDYSFRS\\r\\nAZGBVLJYYZWSQGBFJVU\\r\\nQJJRSHZFOECHGRGALML\\r\\nJKDMLPREFTISSSAJKJN\\r\\nGRHGVYSVQLYKCIMBIKA\\r\\nMSHRBZJJLDHBCAWAJBN\\r\\n', 'output': ['10\\r\\n3 1\\r\\n']}, {'input': '20 18\\r\\nNLBILWYVJJLCACSMUA\\r\\nAAMAWVGEZDTWUUZNMM\\r\\nWWNOTPPFXJSWWSPPRB\\r\\nYUJXZSHHNFGKXIXEJN\\r\\nLTKNJOJALEQURSYVBI\\r\\nSVXHFTUYWTLBXWFDXD\\r\\nLQUEBPXELRNAXFIKFT\\r\\nZGZEPWGVLVNMQVRMJM\\r\\nWTMIPWRNQCWKZACSKQ\\r\\nYGUREEGHTVMICOCUHE\\r\\nUNIJGNPINIFWCIHGIQ\\r\\nIRGJEHFRUJOHIXRSLF\\r\\nDQVCPHUSKYEHFGWBPS\\r\\nJIIGNJKTRAAPRBOGMQ\\r\\nHFNGDLVBUVECUMQDMT\\r\\nGEGCSOPRXQAEMDQAYO\\r\\nOHSBTADOWBVKZINKXC\\r\\nIIPWCAZSNDFVBMTGMI\\r\\nOZZTLUOFRYDNTPIAVA\\r\\nTFBGPAMJPIWLEZOKXB\\r\\n', 'output': ['33\\r\\n1 3\\r\\n']}, {'input': '2 4\\r\\nABAA\\r\\nABBB\\r\\n', 'output': ['2\\r\\n1 4\\r\\n']}, {'input': '6 6\\r\\nCCABCA\\r\\nBCBCBC\\r\\nBAAAAA\\r\\nCBBCAA\\r\\nACBBCA\\r\\nCCAABA\\r\\n', 'output': ['10\\r\\n1 6\\r\\n']}, {'input': '16 4\\r\\nBAAC\\r\\nBACA\\r\\nACBC\\r\\nABCC\\r\\nCCAC\\r\\nBBCC\\r\\nCCAB\\r\\nABCC\\r\\nCBCA\\r\\nBCBC\\r\\nBCBC\\r\\nCBBB\\r\\nBBAA\\r\\nBACA\\r\\nABCB\\r\\nAABA\\r\\n', 'output': ['9\\r\\n2 4\\r\\n']}, {'input': '2 14\\r\\nAABACBACBCBBCB\\r\\nBACCBBBCBAABBC\\r\\n', 'output': ['4\\r\\n1 7\\r\\n']}, {'input': '4 8\\r\\nCACABCCA\\r\\nABCBAACA\\r\\nACABBBCC\\r\\nAACCBCBB\\r\\n', 'output': ['8\\r\\n1 4\\r\\n']}, {'input': '12 18\\r\\nCBBCAACABACCACABBC\\r\\nABCAACABAABCBCBCCC\\r\\nBCAACCCBBBABBACBBA\\r\\nACCBCBBBAABACCACCC\\r\\nCAABCCCACACCBACACC\\r\\nBBBCBCACCABCCBCBBB\\r\\nBAABBCACAAAAACCBCB\\r\\nBAABAABACBCABACBCA\\r\\nAABCBCCBCCABACCCAC\\r\\nCCBBBAACCCBCACCCBB\\r\\nCBABACBBBABCBACCCB\\r\\nAABACCCBCCACBCACCB\\r\\n', 'output': ['24\\r\\n4 2\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Solution {\n\n    static int n;\n    static int m;\n    static char [][] c;\n    static boolean [][] use;\n    static boolean [][] v;\n    static int [][] count;\n    static int [][] dp;\n\n    static void solve(int x, int y){\n        int xx = (n - x + 1);\n        int yy = (m - y + 1);\n\n        if(x > n || y > m){\n            return;\n        }\n\n        for(int i = 0 ; i < xx ; i++){\n            for(int j = 0 ; j < yy ; j++){\n                use[i][j] = true;\n            }\n        }\n\n        for(int i = 0 ; i < xx ; i++){\n            for(int j = 0 ; j < yy ; j++){\n                if(c[i][j]!= c[x + i][y + j]){\n                    use[i][j] = false;\n                }\n            }\n        }\n\n        for(int i = 1 ; i < xx ; i++){\n            for(int j = 1 ; j < yy ; j++){\n                if(use[i][j]){\n                    v[i][j] = true;\n                    count[i][j] = count[i - 1][j - 1] + 1;\n                }else{\n                    v[i][j] = false;\n                    count[i][j] = 0;\n                }\n            }\n        }\n\n        for(int i = 0 ; i < xx ; i++){\n            for(int j = 0 ; j < yy ; j++){\n                if(use[i][j]){\n                    dp[i][j] = Math.min(count[i][j], Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }else{\n                    dp[i][j] = 0;\n                }\n            }\n        }\n\n        dp[xx - 1][yy - 1] = (x * y) / ((n / x) * (m / y));\n        if(dp[xx - 1][yy - 1] * x == n && dp[xx - 1][yy - 1] * y == m){\n            System.out.print(1 + \" \");\n            System.out.print((x) + \" \");\n            System.out.print((y) + \"\\n\");\n        }\n    }\n\n    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        n = in.nextInt();\n        m = in.nextInt();\n        c = new char [n][m];\n        use = new boolean [n][m];\n        v = new boolean [n][m];\n        count = new int [n][m];\n        dp = new int [n][m];\n        int max = 0;\n        int min = 100;\n\n        for(int i = 0 ; i < n ; i++){\n            c[i] = in.next().toCharArray();\n        }\n\n        for(int y = 1 ; y <= Math.min(n, m) / 2 ; y++){\n            for(int x = 1 ; x < y ; x++){\n                solve(x, y);\n            }\n            for(int x = 0 ; x < n - y + 1 ; x++){\n                solve(x, y);\n            }\n            for(int x = n - y + 1 ; x > 0 ; x--){\n                solve(x, y);\n            }\n        }\n        System.out.print((dp[0][0]) + \" \");\n        System.out.print((n) + \" \");\n        System.out.print((m) + \"\\n\");\n    }\n}"}
{"src_uid": "4de8b72f9ce12554cae8b6a83b3f023e", "id": 112, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': '2 4\\r\\nABDC\\r\\nABDC\\r\\n', 'output': ['3\\r\\n2 1\\r\\n']}, {'input': '2 6\\r\\nABCCBA\\r\\nABCCBA\\r\\n', 'output': ['1\\r\\n2 6\\r\\n']}, {'input': '2 2\\r\\nAB\\r\\nCD\\r\\n', 'output': ['4\\r\\n1 1\\r\\n']}, {'input': '4 6\\r\\nABABAC\\r\\nBABABC\\r\\nABABAC\\r\\nCCCCCA\\r\\n', 'output': ['4\\r\\n2 3\\r\\n']}, {'input': '1 12\\r\\nABAAADCAAABX\\r\\n', 'output': ['4\\r\\n1 3\\r\\n']}, {'input': '4 6\\r\\nABCDEF\\r\\nGHIJKL\\r\\nMNOPQR\\r\\nSTUVWX\\r\\n', 'output': ['12\\r\\n1 1\\r\\n']}, {'input': '5 5\\r\\nABAAA\\r\\nBBBAA\\r\\nABABA\\r\\nBBABB\\r\\nBAAAB\\r\\n', 'output': ['3\\r\\n1 5\\r\\n']}, {'input': '5 6\\r\\nBBBABB\\r\\nAAAABB\\r\\nABABAA\\r\\nABBBAA\\r\\nBABBBA\\r\\n', 'output': ['4\\r\\n1 6\\r\\n']}, {'input': '7 7\\r\\nBBAAABB\\r\\nAABBBBA\\r\\nAABABBA\\r\\nAABABAB\\r\\nAABBBAA\\r\\nBAAAABA\\r\\nBBABBBB\\r\\n', 'output': ['3\\r\\n1 7\\r\\n']}, {'input': '8 7\\r\\nBABABBB\\r\\nABABABA\\r\\nAABBABA\\r\\nABBABAA\\r\\nBABAAAB\\r\\nAABBBBA\\r\\nABBBBAB\\r\\nBBAAABA\\r\\n', 'output': ['5\\r\\n1 7\\r\\n']}, {'input': '8 9\\r\\nBAABABAAB\\r\\nBAABAAAAB\\r\\nBBBBBAABB\\r\\nAAAAAAAAB\\r\\nBABBABBAA\\r\\nBBABABBBB\\r\\nBABABBAAA\\r\\nAABAABBBB\\r\\n', 'output': ['7\\r\\n8 1\\r\\n']}, {'input': '10 10\\r\\nABBAABAABB\\r\\nABAAAAAABA\\r\\nBAABABABAA\\r\\nBAAAAAAAAB\\r\\nBABABBBAAB\\r\\nABBABBBBBA\\r\\nAABABAAAAA\\r\\nBAAAABAABA\\r\\nABABAABBAA\\r\\nBBABBABABB\\r\\n', 'output': ['9\\r\\n1 10\\r\\n']}, {'input': '10 11\\r\\nABBBAABABBB\\r\\nBBAABABBAAB\\r\\nAABBBBBAAAA\\r\\nBBABABAAABA\\r\\nAABABBBAABB\\r\\nAAABABAABAB\\r\\nBBABBBABBBB\\r\\nBBABABABBAA\\r\\nBBABABAAABB\\r\\nBABAABAABAB\\r\\n', 'output': ['5\\r\\n10 1\\r\\n']}, {'input': '12 11\\r\\nBBAAAABBAAB\\r\\nBBABBABBABB\\r\\nBAABABBABBA\\r\\nBABBBAAAABA\\r\\nABBAABBBBBA\\r\\nABBABBABABB\\r\\nAAABBBABBBB\\r\\nBAABAAABAAA\\r\\nAAAABBBBABA\\r\\nAAABAAABBBB\\r\\nBAAAAABABAB\\r\\nABBBBABABBB\\r\\n', 'output': ['7\\r\\n1 11\\r\\n']}, {'input': '12 13\\r\\nBBABABAAAAABA\\r\\nABAAAAAAAABBA\\r\\nABBBABAAAAABA\\r\\nBBBAABABBABBB\\r\\nABABAAABABABB\\r\\nABBAABAABBAAA\\r\\nAABABBAAABBAB\\r\\nABBBBBABBAABA\\r\\nBBBBBABBABBAA\\r\\nAAAAAAABBBAAB\\r\\nBAABBBAABAAAA\\r\\nBBBBBBABABABA\\r\\n', 'output': ['7\\r\\n12 1\\r\\n']}, {'input': '14 12\\r\\nBBAAABBBAAAB\\r\\nBBABAAAAABAA\\r\\nAABBABBBABBA\\r\\nBABAABAABBBB\\r\\nBBBABBBBABAA\\r\\nABBAABBAAABA\\r\\nABAAAAABBBAB\\r\\nBBAABBABBBAA\\r\\nBAABABAAABAB\\r\\nAAABBBABBABA\\r\\nBABBBBAABBBA\\r\\nAAAAABABBAAB\\r\\nBABBBABBBBBA\\r\\nBAAAABAABAAA\\r\\n', 'output': ['14\\r\\n1 12\\r\\n']}, {'input': '14 10\\r\\nABBAAABBAA\\r\\nBBBBBABBAA\\r\\nBABABBABAB\\r\\nAAABABBAAB\\r\\nBBABABBBAB\\r\\nBBABBABABB\\r\\nAABBBBABAA\\r\\nABBBAAAABB\\r\\nABBABAABAA\\r\\nABABABABBA\\r\\nABAABBBAAB\\r\\nAAAAAAAAAA\\r\\nABABBAABAA\\r\\nBABAABABBB\\r\\n', 'output': ['10\\r\\n1 10\\r\\n']}, {'input': '16 15\\r\\nABBBBAAABABBABB\\r\\nABBBAAABBABBBBB\\r\\nBABABAABBBABABB\\r\\nAAABBBBBABBABBB\\r\\nBAABAABAABAABBA\\r\\nABBBBAAAAAAAABB\\r\\nBAABBBABABAAAAB\\r\\nAAAABBAABBAABAA\\r\\nABBABABAAABABBB\\r\\nAAABBBABAABABAA\\r\\nBAABABBAAABBAAA\\r\\nAAAAAAABABBBAAA\\r\\nBABBAABBABAAAAB\\r\\nABABAAABBBBBAAB\\r\\nBBABBAABABAABBB\\r\\nBAAAABBBABABBBA\\r\\n', 'output': ['12\\r\\n4 3\\r\\n']}, {'input': '16 16\\r\\nABBABBABBAABBBAB\\r\\nBABABBAABAABBAAA\\r\\nBAAABBAABAABBBAA\\r\\nAABAAAABAAAABBBA\\r\\nBAAAABAABBBABBAA\\r\\nAABBABABABAABBBA\\r\\nBABBBABAAAAABABB\\r\\nBABBBBBBBBABBBAB\\r\\nBAAAABBBABAABBBA\\r\\nBABBBABBAABABBAA\\r\\nBBBBBBAABBBABBBA\\r\\nBABAAAABAABAABBB\\r\\nAAAAABBAAABABAAA\\r\\nBABBABABABAAABAB\\r\\nBAAAAAAAABBABAAA\\r\\nBAAAAABABBBBAAAA\\r\\n', 'output': ['15\\r\\n1 16\\r\\n']}, {'input': '18 18\\r\\nBBBBBBBABABBBABABA\\r\\nBAAABAAABBBABABBBB\\r\\nBABBAAABAAABAAABAA\\r\\nAABBABBBABBBBBAAAB\\r\\nBBBAAAAABBABBAAAAA\\r\\nAABBAABABABBBABABA\\r\\nBAABBAAAABABAABABB\\r\\nBABBABBBAAAABAABBA\\r\\nBBBBAABAAABAAABBBA\\r\\nABABBAAABBBBBABABA\\r\\nABABAABBBBBABBBBBB\\r\\nABAAABBABBABAAAABA\\r\\nBABAAABABABBBABBBB\\r\\nBBBBABBBABBBBBBBBA\\r\\nBAAABAABABABBBBAAB\\r\\nBABBAABABBABAABBBB\\r\\nBAABABAAAABBABBAAA\\r\\nBAAABBBAABABBABBAB\\r\\n', 'output': ['23\\r\\n2 6\\r\\n']}, {'input': '17 17\\r\\nBBAABAABBBBBAABBB\\r\\nBBABABBBBABAAABBB\\r\\nAAAABAAAABABABBAA\\r\\nBBABAAABBABBAAABA\\r\\nAAABBBBBAABABBBAB\\r\\nAABBBBBABABABABBB\\r\\nBAABAAABAAABBAABB\\r\\nBBAAAAAABABABBAAB\\r\\nAAAAABAABBAAAABAA\\r\\nBABAABABABABABBBB\\r\\nBAABABBAAABBAAABB\\r\\nABBAAABBBBAAAABAB\\r\\nBBABAABAAAAAABBBB\\r\\nAAABBABBAAAAABBBB\\r\\nAABAABBAABBABAABB\\r\\nABABAAABBABAAABAB\\r\\nBBABABBBAAAAAAABA\\r\\n', 'output': ['3\\r\\n1 17\\r\\n']}, {'input': '20 20\\r\\nABBBAAABABAAAAABBABB\\r\\nBABABBAABAABBAAABABB\\r\\nBABBBAABAABBABBBBABA\\r\\nBAAABBAAABABBABBAAAA\\r\\nABBAABAABBBBAAABBBAA\\r\\nBAAAAAAAABABBAAAAABB\\r\\nAAAAAAABABBBBBAABAAB\\r\\nABBBBABAABBAAAAABAAA\\r\\nBAAAAABBABAAAAABAAAB\\r\\nABABAABABBBABBAABBAA\\r\\nBAAABBBAAAABBBBBABAA\\r\\nAAABBABABAABBABAABAB\\r\\nABBABABABABAAABABABA\\r\\nBAABAAAAABBAABBBAAAB\\r\\nABAAABBABAABBBABAABA\\r\\nBAABBBBBABBBABBBABAB\\r\\nBABBABABBBBBBBBABAAA\\r\\nABAAABAAABAAABABABAA\\r\\nBAABBBBAABBAAAAAABBA\\r\\nABAABBABAAABBABABAAA\\r\\n', 'output': ['23\\r\\n1 10\\r\\n']}, {'input': '1 1\\r\\nC\\r\\n', 'output': ['1\\r\\n1 1\\r\\n']}, {'input': '2 2\\r\\nCC\\r\\nBB\\r\\n', 'output': ['2\\r\\n1 2\\r\\n']}, {'input': '3 3\\r\\nACA\\r\\nCCA\\r\\nACB\\r\\n', 'output': ['3\\r\\n1 3\\r\\n']}, {'input': '4 4\\r\\nACAC\\r\\nCBCC\\r\\nABBC\\r\\nCCAC\\r\\n', 'output': ['5\\r\\n1 4\\r\\n']}, {'input': '5 5\\r\\nBBCAB\\r\\nBCBAC\\r\\nCAAAB\\r\\nACBBA\\r\\nCAACB\\r\\n', 'output': ['3\\r\\n1 5\\r\\n']}, {'input': '14 16\\r\\nCBCCCABCBBBAAACC\\r\\nAABAACBACBCBACCA\\r\\nABBBABAACCACCCCC\\r\\nBBACACACCCCBBBAC\\r\\nBBCAABACBAACBCAA\\r\\nAAACCACBBCABABCB\\r\\nABCBCAAAAACBABBA\\r\\nAAABBBCCBAACBBCA\\r\\nBBAACBABBBCCBAAC\\r\\nBAABCCBAAABAACAC\\r\\nABBBBCBAACACCBCB\\r\\nBCABACBBBCAACACC\\r\\nACCCCABCCCBBCAAC\\r\\nBCBBCCCBCBCCACAA\\r\\n', 'output': ['15\\r\\n7 1\\r\\n']}, {'input': '16 16\\r\\nACABBCCBAABCCCCB\\r\\nAABCACCAAACACABB\\r\\nBCCCAABBAACBACAA\\r\\nBCACAABBBCAAAABA\\r\\nACCBABCCACABBCCC\\r\\nCCAAACACACBCABCA\\r\\nBCAACBBBCACBBCAB\\r\\nBABBCBBBCCCBAACC\\r\\nBBBBBABACBABBCBA\\r\\nABAACBACCACBBABA\\r\\nABAACBACCBCBCCBB\\r\\nBCACCCAABCBBCBCB\\r\\nBBBCCCBCCBCBACCA\\r\\nAABCBBBBACCACCBB\\r\\nBCABCCCBCBBBCBCC\\r\\nACCCCCCBBBAABACC\\r\\n', 'output': ['17\\r\\n4 2\\r\\n']}, {'input': '17 17\\r\\nBCBAAABAABCCCAAAC\\r\\nBBAABCABBAACCACBB\\r\\nABCCBAABBCCABBBAB\\r\\nAACCBBACCAAACCACA\\r\\nABBACBAAAABBABCAA\\r\\nACBACCCABAABBCABB\\r\\nCBCCCBCACBABCAAAA\\r\\nAAABACACABABCCCBC\\r\\nCABABBABBBABBBCAB\\r\\nBCBCBAAACCCACACBA\\r\\nBBACABACAAABCCBBC\\r\\nABAABBABCCAABBCCA\\r\\nAABBACBCBCCBAACBB\\r\\nBBABCBBCCCBCACBCB\\r\\nBABCBBCCABCABBAAA\\r\\nAABAABBBBAACAABCC\\r\\nBACCCBBCCABBBACBB\\r\\n', 'output': ['3\\r\\n1 17\\r\\n']}, {'input': '19 19\\r\\nACCACBCABACABCACCAA\\r\\nBCACAAAACCACCCCBCCB\\r\\nCBACBBCBCBCABCABACA\\r\\nAACCAABBBCAAABACAAC\\r\\nACACCCBBBACACCAAABA\\r\\nAACAABCACCBCACCABBA\\r\\nAABBCCABACCACABACAA\\r\\nACBCCACBACCACABCABC\\r\\nAACAABCAACCBBAACBCA\\r\\nAAACACBAABCBACCAAAB\\r\\nAABACABBABCACAACBCA\\r\\nBABAAABCACBABACBBBC\\r\\nBAABCAAABCAABBCCAAC\\r\\nBCABCCBCCBCBABCBCCA\\r\\nBACACBACBCABBCBCABB\\r\\nABCACCBBBBCBBCABAAC\\r\\nBBBBCCBCBACAACBCBCA\\r\\nAAABBBBCACCACCAAACC\\r\\nCCCCCBAABAAAACCCBBA\\r\\n', 'output': ['3\\r\\n1 19\\r\\n']}, {'input': '20 18\\r\\nAABCAACCBBCBABBBBB\\r\\nBBCBAACCBCAACBBCCB\\r\\nACCBABABACBBACBBAB\\r\\nACBBBCBAAACAAAAABB\\r\\nBCBABABAACCCABBBCC\\r\\nBAAAAAACACABBCCCAC\\r\\nCBACCBCBACACAAACBC\\r\\nCBACAACBCBCAACACCA\\r\\nCCCBACCBACACCCBCCB\\r\\nCACABBBBBBCCBACCBA\\r\\nCCBCACABCBACABBCCB\\r\\nAACACCCCCABAABCACC\\r\\nCBBACCBBCBCBBCCAAB\\r\\nCABBABACCABACAABAB\\r\\nBBBABBCBCBACBCCABA\\r\\nBCCAACBCBCAAAABACA\\r\\nAAABACBBCCCACACBAC\\r\\nBABAAAACCBACBACAAA\\r\\nAABBABCBBBACAACBAB\\r\\nBBABBAABACBAABCCBB\\r\\n', 'output': ['27\\r\\n4 2\\r\\n']}, {'input': '1 1\\r\\nZ\\r\\n', 'output': ['1\\r\\n1 1\\r\\n']}, {'input': '2 2\\r\\nML\\r\\nWQ\\r\\n', 'output': ['4\\r\\n1 1\\r\\n']}, {'input': '3 3\\r\\nBXP\\r\\nUJF\\r\\nAQT\\r\\n', 'output': ['4\\r\\n1 1\\r\\n']}, {'input': '4 3\\r\\nOKJ\\r\\nXTV\\r\\nDVW\\r\\nHMK\\r\\n', 'output': ['5\\r\\n2 1\\r\\n']}, {'input': '5 5\\r\\nDZEZF\\r\\nOHZZC\\r\\nCNDOX\\r\\nNVYDP\\r\\nUCIAX\\r\\n', 'output': ['3\\r\\n1 5\\r\\n']}, {'input': '6 6\\r\\nQLXBOE\\r\\nKEEYTR\\r\\nZLPMSP\\r\\nWOKAHN\\r\\nLYXBXU\\r\\nSZOEZV\\r\\n', 'output': ['14\\r\\n2 1\\r\\n']}, {'input': '6 7\\r\\nGYSGYUL\\r\\nKGTJUVI\\r\\nFNRHOND\\r\\nZGZAFYZ\\r\\nQVCRZCA\\r\\nJCCXKGV\\r\\n', 'output': ['7\\r\\n2 1\\r\\n']}, {'input': '8 8\\r\\nTNMIIMOP\\r\\nJOAXSHVN\\r\\nQYHMVXGM\\r\\nQOXAIUMI\\r\\nLAAXNKCH\\r\\nORWESZUV\\r\\nPMIXHLEA\\r\\nAENPGVYK\\r\\n', 'output': ['13\\r\\n1 4\\r\\n']}, {'input': '9 9\\r\\nIZHKRCRTM\\r\\nLQBOENMNQ\\r\\nYLNVFBFUY\\r\\nACTTYWABL\\r\\nYSEGWNQHC\\r\\nTZASWPPAG\\r\\nLLZTKFPMV\\r\\nGXBETPPPN\\r\\nUCPEFNJKN\\r\\n', 'output': ['8\\r\\n1 3\\r\\n']}, {'input': '9 10\\r\\nXHPCDAAFPZ\\r\\nJRZCDTQBYP\\r\\nZBTAMDPIFY\\r\\nXBKTMXNIWM\\r\\nDAIONPEBYF\\r\\nAFHBCBDTKB\\r\\nKRVEBSUXRM\\r\\nWGMEZTWDBX\\r\\nNOJUCDZPZY\\r\\n', 'output': ['10\\r\\n3 1\\r\\n']}, {'input': '12 13\\r\\nTHSGJEPTDFEIJ\\r\\nOWPJGXSXJRYGD\\r\\nVYENWXFWSOSMX\\r\\nFZDFXFPWEIYYV\\r\\nOEODFOGQWJEEU\\r\\nSQRNSBTAMLQRU\\r\\nLXGZERSWTJWQK\\r\\nLGRJJMDTZVZWJ\\r\\nDWVBTSZKFUAHT\\r\\nHSSZHXAWVWMHB\\r\\nJZOCNFUHTHQYV\\r\\nTUHDMTZAQVWDL\\r\\n', 'output': ['10\\r\\n3 1\\r\\n']}, {'input': '14 13\\r\\nBGBALYLHQYMFM\\r\\nRLFOZFDFMRFEN\\r\\nGDWROOMXUVBOW\\r\\nDPXWRDPCEFMRQ\\r\\nJOSEGKGMHGHFC\\r\\nJHXUBTPOZOYGJ\\r\\nFHUUMHWSQRNEP\\r\\nVGWYMTMWHWGIL\\r\\nVMWDTBDJGEVZI\\r\\nLEJSIHTQKYDXY\\r\\nOLUOIWECMZVAI\\r\\nVDXSGRPMCCJEM\\r\\nMYWMDDAQAPBSG\\r\\nXQWPFRAPVEOYO\\r\\n', 'output': ['6\\r\\n7 1\\r\\n']}, {'input': '14 15\\r\\nJFLSOQHVDRTCPWZ\\r\\nWSROLOOQOCWPJNX\\r\\nEEUZVBLQXBFQKNA\\r\\nQIGZDIMDXVCHJFJ\\r\\nUDJGIZWDBMMMBJR\\r\\nEWXAQHPRYBQOYDT\\r\\nUDEAPOBVZOXNVMK\\r\\nAYEVKFIKNRUVRQC\\r\\nNLTLJBXWMUQXAZD\\r\\nKOXESBBUYLMIDOI\\r\\nZOJWEOJFCYTILHE\\r\\nRQDNTBZZXPKNCEN\\r\\nSYGFASAQUSMYYRP\\r\\nUOYCFYUDACJDTAD\\r\\n', 'output': ['13\\r\\n1 5\\r\\n']}, {'input': '16 15\\r\\nPFUMRKDISIBBVYP\\r\\nMZKXWWSQXADAPEB\\r\\nVTBYXGWQYZTHBHY\\r\\nONGURZKWHZDKIDF\\r\\nGCMHQQNJJXHHPVU\\r\\nNLMUXXKZOFNMFTG\\r\\nANDDDPHEDVWVHLC\\r\\nOYGXUHIMYPNIXCT\\r\\nILCGDQZNCSTIILX\\r\\nZVSYMJBHAUEXZMY\\r\\nMYOKFPJKKJLKVWI\\r\\nUEMUOOAJSNTOLEN\\r\\nLKIROZUNWRZBMZP\\r\\nYYWCXLGHLZQVPOB\\r\\nFMHPKABCBAAYCFA\\r\\nNRGFEWPLKNORSZR\\r\\n', 'output': ['18\\r\\n1 3\\r\\n']}, {'input': '14 17\\r\\nXGFETCAWEBHYYDECE\\r\\nCGFEUQEYMLSVHNKJA\\r\\nZMGSXZJASBUPTHRFQ\\r\\nGQREDKHDBTZPGWHEO\\r\\nQGACDHZVBAOGLHHEL\\r\\nLKLKVFVDHSRQNEDXC\\r\\nVNREYHZDJHPJKHXDO\\r\\nKBOMZYHZEUOYUOXSQ\\r\\nFNQGOBVDBTMUJPAKU\\r\\nXFPGQQXBPELKWSXCJ\\r\\nABUKLBPTFOGUJFDEQ\\r\\nKXPJEZJQCHTENYSKY\\r\\nXXOKEXESEVLQMFDZG\\r\\nVPGUBSJLGBWZWAMFZ\\r\\n', 'output': ['6\\r\\n7 1\\r\\n']}, {'input': '16 17\\r\\nFFOYWWWJRUPVBGSSJ\\r\\nVPOMWQMWUWYMMDAPB\\r\\nARQUYXZTHVSQZHMVJ\\r\\nCJAGELECYEXSHEYTU\\r\\nXRSZPRCBQPJQACNWR\\r\\nJISALKDCKJUWWHMYH\\r\\nGMISALZMLGRRGALJA\\r\\nCWPYTQYBXKLBGWKNF\\r\\nMJJYWBIHJLARHFNWB\\r\\nKEREXXISTPANXGGJG\\r\\nLECEJLPAFOZHLRTJM\\r\\nHBOWFNSQFRRGEJFMJ\\r\\nVEGIRVEXACMJVKFYN\\r\\nSCGOPQKUHEDNIPIRE\\r\\nLENRPPYJBEVDTOPOY\\r\\nFHJOESUHLIJRFPVBK\\r\\n', 'output': ['8\\r\\n4 1\\r\\n']}, {'input': '18 19\\r\\nLEXQWPUXGOWSELHIQPY\\r\\nZUYPTUDHEEQVRWBCXBU\\r\\nZUPMYQQQFHGKZZDMLFM\\r\\nCASSUVIKQKCEALUDDFK\\r\\nFDBZOXULVGFARYPNAQY\\r\\nWEFLTZOSOAGAMBWNGVC\\r\\nEVAPNTSSIMKNBOAHFSC\\r\\nUHTWEBRCEUJSARNEWYI\\r\\nGXGSDCDUIWYQRZUPQBZ\\r\\nFMYJUOHENURMDINJGCN\\r\\nHIBATJCOGWWRQWTLXDH\\r\\nRDDXJNZHQGUWPNGIDRO\\r\\nAJGHDUCGGLPYYDYSFRS\\r\\nAZGBVLJYYZWSQGBFJVU\\r\\nQJJRSHZFOECHGRGALML\\r\\nJKDMLPREFTISSSAJKJN\\r\\nGRHGVYSVQLYKCIMBIKA\\r\\nMSHRBZJJLDHBCAWAJBN\\r\\n', 'output': ['10\\r\\n3 1\\r\\n']}, {'input': '20 18\\r\\nNLBILWYVJJLCACSMUA\\r\\nAAMAWVGEZDTWUUZNMM\\r\\nWWNOTPPFXJSWWSPPRB\\r\\nYUJXZSHHNFGKXIXEJN\\r\\nLTKNJOJALEQURSYVBI\\r\\nSVXHFTUYWTLBXWFDXD\\r\\nLQUEBPXELRNAXFIKFT\\r\\nZGZEPWGVLVNMQVRMJM\\r\\nWTMIPWRNQCWKZACSKQ\\r\\nYGUREEGHTVMICOCUHE\\r\\nUNIJGNPINIFWCIHGIQ\\r\\nIRGJEHFRUJOHIXRSLF\\r\\nDQVCPHUSKYEHFGWBPS\\r\\nJIIGNJKTRAAPRBOGMQ\\r\\nHFNGDLVBUVECUMQDMT\\r\\nGEGCSOPRXQAEMDQAYO\\r\\nOHSBTADOWBVKZINKXC\\r\\nIIPWCAZSNDFVBMTGMI\\r\\nOZZTLUOFRYDNTPIAVA\\r\\nTFBGPAMJPIWLEZOKXB\\r\\n', 'output': ['33\\r\\n1 3\\r\\n']}, {'input': '2 4\\r\\nABAA\\r\\nABBB\\r\\n', 'output': ['2\\r\\n1 4\\r\\n']}, {'input': '6 6\\r\\nCCABCA\\r\\nBCBCBC\\r\\nBAAAAA\\r\\nCBBCAA\\r\\nACBBCA\\r\\nCCAABA\\r\\n', 'output': ['10\\r\\n1 6\\r\\n']}, {'input': '16 4\\r\\nBAAC\\r\\nBACA\\r\\nACBC\\r\\nABCC\\r\\nCCAC\\r\\nBBCC\\r\\nCCAB\\r\\nABCC\\r\\nCBCA\\r\\nBCBC\\r\\nBCBC\\r\\nCBBB\\r\\nBBAA\\r\\nBACA\\r\\nABCB\\r\\nAABA\\r\\n', 'output': ['9\\r\\n2 4\\r\\n']}, {'input': '2 14\\r\\nAABACBACBCBBCB\\r\\nBACCBBBCBAABBC\\r\\n', 'output': ['4\\r\\n1 7\\r\\n']}, {'input': '4 8\\r\\nCACABCCA\\r\\nABCBAACA\\r\\nACABBBCC\\r\\nAACCBCBB\\r\\n', 'output': ['8\\r\\n1 4\\r\\n']}, {'input': '12 18\\r\\nCBBCAACABACCACABBC\\r\\nABCAACABAABCBCBCCC\\r\\nBCAACCCBBBABBACBBA\\r\\nACCBCBBBAABACCACCC\\r\\nCAABCCCACACCBACACC\\r\\nBBBCBCACCABCCBCBBB\\r\\nBAABBCACAAAAACCBCB\\r\\nBAABAABACBCABACBCA\\r\\nAABCBCCBCCABACCCAC\\r\\nCCBBBAACCCBCACCCBB\\r\\nCBABACBBBABCBACCCB\\r\\nAABACCCBCCACBCACCB\\r\\n', 'output': ['24\\r\\n4 2\\r\\n']}]", "source_code": "import java.util.*;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class Puzzle {\n    static int a,b;\n    static char[][] c;\n    static int min,max,count,X,Y;\n    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        a = in.nextInt();\n        b = in.nextInt();\n        c = new char[a][b];\n        min = 999;\n        for(int i = 0 ; i < a ; i++)\n        {\n            c[i] = in.next().toCharArray();\n        }\n        for(int x = 1 ; x <= a/2 ; x++)\n        {\n            for(int y = 1 ; y <= b/2 ; y++)\n            {\n                max = 0;\n                for(int j = 0 ; j < a ; j++)\n                {\n                    for(int k = 0 ; k < b ; k++)\n                    {\n                        if(c[j][k]!= c[j+x][k] && c[j][k]!= c[j][k+y] && \n                                c[j][k]!= c[j+x][k+y] && c[j+x][k]!= c[j+x][k+y] && c[j+x][k+y]!= c[j][k+y])\n                        {\n                            max++;\n                        }\n                    }\n                }\n                if(max < min)\n                {\n                    min = max;\n                    X = x;\n                    Y = y;\n                }\n            }\n        }\n        max = 0;\n        count = 0;\n        for(int i = 0 ; i < a ; i++)\n        {\n            for(int j = 0 ; j < b ; j++)\n            {\n                if(c[i][j] == c[(i+X)%a][(j+Y)%b])\n                {\n                    max++;\n                }\n            }\n        }\n        if(max > 0)\n        {\n            count = 0;\n        }\n        else\n        {\n            count = 1;\n        }\n        System.out.println(count);\n        System.out.println((a/X)*(b/Y)+(max == 0?1:0));\n    }\n}\n"}
{"src_uid": "4de8b72f9ce12554cae8b6a83b3f023e", "id": 112, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': '2 4\\r\\nABDC\\r\\nABDC\\r\\n', 'output': ['3\\r\\n2 1\\r\\n']}, {'input': '2 6\\r\\nABCCBA\\r\\nABCCBA\\r\\n', 'output': ['1\\r\\n2 6\\r\\n']}, {'input': '2 2\\r\\nAB\\r\\nCD\\r\\n', 'output': ['4\\r\\n1 1\\r\\n']}, {'input': '4 6\\r\\nABABAC\\r\\nBABABC\\r\\nABABAC\\r\\nCCCCCA\\r\\n', 'output': ['4\\r\\n2 3\\r\\n']}, {'input': '1 12\\r\\nABAAADCAAABX\\r\\n', 'output': ['4\\r\\n1 3\\r\\n']}, {'input': '4 6\\r\\nABCDEF\\r\\nGHIJKL\\r\\nMNOPQR\\r\\nSTUVWX\\r\\n', 'output': ['12\\r\\n1 1\\r\\n']}, {'input': '5 5\\r\\nABAAA\\r\\nBBBAA\\r\\nABABA\\r\\nBBABB\\r\\nBAAAB\\r\\n', 'output': ['3\\r\\n1 5\\r\\n']}, {'input': '5 6\\r\\nBBBABB\\r\\nAAAABB\\r\\nABABAA\\r\\nABBBAA\\r\\nBABBBA\\r\\n', 'output': ['4\\r\\n1 6\\r\\n']}, {'input': '7 7\\r\\nBBAAABB\\r\\nAABBBBA\\r\\nAABABBA\\r\\nAABABAB\\r\\nAABBBAA\\r\\nBAAAABA\\r\\nBBABBBB\\r\\n', 'output': ['3\\r\\n1 7\\r\\n']}, {'input': '8 7\\r\\nBABABBB\\r\\nABABABA\\r\\nAABBABA\\r\\nABBABAA\\r\\nBABAAAB\\r\\nAABBBBA\\r\\nABBBBAB\\r\\nBBAAABA\\r\\n', 'output': ['5\\r\\n1 7\\r\\n']}, {'input': '8 9\\r\\nBAABABAAB\\r\\nBAABAAAAB\\r\\nBBBBBAABB\\r\\nAAAAAAAAB\\r\\nBABBABBAA\\r\\nBBABABBBB\\r\\nBABABBAAA\\r\\nAABAABBBB\\r\\n', 'output': ['7\\r\\n8 1\\r\\n']}, {'input': '10 10\\r\\nABBAABAABB\\r\\nABAAAAAABA\\r\\nBAABABABAA\\r\\nBAAAAAAAAB\\r\\nBABABBBAAB\\r\\nABBABBBBBA\\r\\nAABABAAAAA\\r\\nBAAAABAABA\\r\\nABABAABBAA\\r\\nBBABBABABB\\r\\n', 'output': ['9\\r\\n1 10\\r\\n']}, {'input': '10 11\\r\\nABBBAABABBB\\r\\nBBAABABBAAB\\r\\nAABBBBBAAAA\\r\\nBBABABAAABA\\r\\nAABABBBAABB\\r\\nAAABABAABAB\\r\\nBBABBBABBBB\\r\\nBBABABABBAA\\r\\nBBABABAAABB\\r\\nBABAABAABAB\\r\\n', 'output': ['5\\r\\n10 1\\r\\n']}, {'input': '12 11\\r\\nBBAAAABBAAB\\r\\nBBABBABBABB\\r\\nBAABABBABBA\\r\\nBABBBAAAABA\\r\\nABBAABBBBBA\\r\\nABBABBABABB\\r\\nAAABBBABBBB\\r\\nBAABAAABAAA\\r\\nAAAABBBBABA\\r\\nAAABAAABBBB\\r\\nBAAAAABABAB\\r\\nABBBBABABBB\\r\\n', 'output': ['7\\r\\n1 11\\r\\n']}, {'input': '12 13\\r\\nBBABABAAAAABA\\r\\nABAAAAAAAABBA\\r\\nABBBABAAAAABA\\r\\nBBBAABABBABBB\\r\\nABABAAABABABB\\r\\nABBAABAABBAAA\\r\\nAABABBAAABBAB\\r\\nABBBBBABBAABA\\r\\nBBBBBABBABBAA\\r\\nAAAAAAABBBAAB\\r\\nBAABBBAABAAAA\\r\\nBBBBBBABABABA\\r\\n', 'output': ['7\\r\\n12 1\\r\\n']}, {'input': '14 12\\r\\nBBAAABBBAAAB\\r\\nBBABAAAAABAA\\r\\nAABBABBBABBA\\r\\nBABAABAABBBB\\r\\nBBBABBBBABAA\\r\\nABBAABBAAABA\\r\\nABAAAAABBBAB\\r\\nBBAABBABBBAA\\r\\nBAABABAAABAB\\r\\nAAABBBABBABA\\r\\nBABBBBAABBBA\\r\\nAAAAABABBAAB\\r\\nBABBBABBBBBA\\r\\nBAAAABAABAAA\\r\\n', 'output': ['14\\r\\n1 12\\r\\n']}, {'input': '14 10\\r\\nABBAAABBAA\\r\\nBBBBBABBAA\\r\\nBABABBABAB\\r\\nAAABABBAAB\\r\\nBBABABBBAB\\r\\nBBABBABABB\\r\\nAABBBBABAA\\r\\nABBBAAAABB\\r\\nABBABAABAA\\r\\nABABABABBA\\r\\nABAABBBAAB\\r\\nAAAAAAAAAA\\r\\nABABBAABAA\\r\\nBABAABABBB\\r\\n', 'output': ['10\\r\\n1 10\\r\\n']}, {'input': '16 15\\r\\nABBBBAAABABBABB\\r\\nABBBAAABBABBBBB\\r\\nBABABAABBBABABB\\r\\nAAABBBBBABBABBB\\r\\nBAABAABAABAABBA\\r\\nABBBBAAAAAAAABB\\r\\nBAABBBABABAAAAB\\r\\nAAAABBAABBAABAA\\r\\nABBABABAAABABBB\\r\\nAAABBBABAABABAA\\r\\nBAABABBAAABBAAA\\r\\nAAAAAAABABBBAAA\\r\\nBABBAABBABAAAAB\\r\\nABABAAABBBBBAAB\\r\\nBBABBAABABAABBB\\r\\nBAAAABBBABABBBA\\r\\n', 'output': ['12\\r\\n4 3\\r\\n']}, {'input': '16 16\\r\\nABBABBABBAABBBAB\\r\\nBABABBAABAABBAAA\\r\\nBAAABBAABAABBBAA\\r\\nAABAAAABAAAABBBA\\r\\nBAAAABAABBBABBAA\\r\\nAABBABABABAABBBA\\r\\nBABBBABAAAAABABB\\r\\nBABBBBBBBBABBBAB\\r\\nBAAAABBBABAABBBA\\r\\nBABBBABBAABABBAA\\r\\nBBBBBBAABBBABBBA\\r\\nBABAAAABAABAABBB\\r\\nAAAAABBAAABABAAA\\r\\nBABBABABABAAABAB\\r\\nBAAAAAAAABBABAAA\\r\\nBAAAAABABBBBAAAA\\r\\n', 'output': ['15\\r\\n1 16\\r\\n']}, {'input': '18 18\\r\\nBBBBBBBABABBBABABA\\r\\nBAAABAAABBBABABBBB\\r\\nBABBAAABAAABAAABAA\\r\\nAABBABBBABBBBBAAAB\\r\\nBBBAAAAABBABBAAAAA\\r\\nAABBAABABABBBABABA\\r\\nBAABBAAAABABAABABB\\r\\nBABBABBBAAAABAABBA\\r\\nBBBBAABAAABAAABBBA\\r\\nABABBAAABBBBBABABA\\r\\nABABAABBBBBABBBBBB\\r\\nABAAABBABBABAAAABA\\r\\nBABAAABABABBBABBBB\\r\\nBBBBABBBABBBBBBBBA\\r\\nBAAABAABABABBBBAAB\\r\\nBABBAABABBABAABBBB\\r\\nBAABABAAAABBABBAAA\\r\\nBAAABBBAABABBABBAB\\r\\n', 'output': ['23\\r\\n2 6\\r\\n']}, {'input': '17 17\\r\\nBBAABAABBBBBAABBB\\r\\nBBABABBBBABAAABBB\\r\\nAAAABAAAABABABBAA\\r\\nBBABAAABBABBAAABA\\r\\nAAABBBBBAABABBBAB\\r\\nAABBBBBABABABABBB\\r\\nBAABAAABAAABBAABB\\r\\nBBAAAAAABABABBAAB\\r\\nAAAAABAABBAAAABAA\\r\\nBABAABABABABABBBB\\r\\nBAABABBAAABBAAABB\\r\\nABBAAABBBBAAAABAB\\r\\nBBABAABAAAAAABBBB\\r\\nAAABBABBAAAAABBBB\\r\\nAABAABBAABBABAABB\\r\\nABABAAABBABAAABAB\\r\\nBBABABBBAAAAAAABA\\r\\n', 'output': ['3\\r\\n1 17\\r\\n']}, {'input': '20 20\\r\\nABBBAAABABAAAAABBABB\\r\\nBABABBAABAABBAAABABB\\r\\nBABBBAABAABBABBBBABA\\r\\nBAAABBAAABABBABBAAAA\\r\\nABBAABAABBBBAAABBBAA\\r\\nBAAAAAAAABABBAAAAABB\\r\\nAAAAAAABABBBBBAABAAB\\r\\nABBBBABAABBAAAAABAAA\\r\\nBAAAAABBABAAAAABAAAB\\r\\nABABAABABBBABBAABBAA\\r\\nBAAABBBAAAABBBBBABAA\\r\\nAAABBABABAABBABAABAB\\r\\nABBABABABABAAABABABA\\r\\nBAABAAAAABBAABBBAAAB\\r\\nABAAABBABAABBBABAABA\\r\\nBAABBBBBABBBABBBABAB\\r\\nBABBABABBBBBBBBABAAA\\r\\nABAAABAAABAAABABABAA\\r\\nBAABBBBAABBAAAAAABBA\\r\\nABAABBABAAABBABABAAA\\r\\n', 'output': ['23\\r\\n1 10\\r\\n']}, {'input': '1 1\\r\\nC\\r\\n', 'output': ['1\\r\\n1 1\\r\\n']}, {'input': '2 2\\r\\nCC\\r\\nBB\\r\\n', 'output': ['2\\r\\n1 2\\r\\n']}, {'input': '3 3\\r\\nACA\\r\\nCCA\\r\\nACB\\r\\n', 'output': ['3\\r\\n1 3\\r\\n']}, {'input': '4 4\\r\\nACAC\\r\\nCBCC\\r\\nABBC\\r\\nCCAC\\r\\n', 'output': ['5\\r\\n1 4\\r\\n']}, {'input': '5 5\\r\\nBBCAB\\r\\nBCBAC\\r\\nCAAAB\\r\\nACBBA\\r\\nCAACB\\r\\n', 'output': ['3\\r\\n1 5\\r\\n']}, {'input': '14 16\\r\\nCBCCCABCBBBAAACC\\r\\nAABAACBACBCBACCA\\r\\nABBBABAACCACCCCC\\r\\nBBACACACCCCBBBAC\\r\\nBBCAABACBAACBCAA\\r\\nAAACCACBBCABABCB\\r\\nABCBCAAAAACBABBA\\r\\nAAABBBCCBAACBBCA\\r\\nBBAACBABBBCCBAAC\\r\\nBAABCCBAAABAACAC\\r\\nABBBBCBAACACCBCB\\r\\nBCABACBBBCAACACC\\r\\nACCCCABCCCBBCAAC\\r\\nBCBBCCCBCBCCACAA\\r\\n', 'output': ['15\\r\\n7 1\\r\\n']}, {'input': '16 16\\r\\nACABBCCBAABCCCCB\\r\\nAABCACCAAACACABB\\r\\nBCCCAABBAACBACAA\\r\\nBCACAABBBCAAAABA\\r\\nACCBABCCACABBCCC\\r\\nCCAAACACACBCABCA\\r\\nBCAACBBBCACBBCAB\\r\\nBABBCBBBCCCBAACC\\r\\nBBBBBABACBABBCBA\\r\\nABAACBACCACBBABA\\r\\nABAACBACCBCBCCBB\\r\\nBCACCCAABCBBCBCB\\r\\nBBBCCCBCCBCBACCA\\r\\nAABCBBBBACCACCBB\\r\\nBCABCCCBCBBBCBCC\\r\\nACCCCCCBBBAABACC\\r\\n', 'output': ['17\\r\\n4 2\\r\\n']}, {'input': '17 17\\r\\nBCBAAABAABCCCAAAC\\r\\nBBAABCABBAACCACBB\\r\\nABCCBAABBCCABBBAB\\r\\nAACCBBACCAAACCACA\\r\\nABBACBAAAABBABCAA\\r\\nACBACCCABAABBCABB\\r\\nCBCCCBCACBABCAAAA\\r\\nAAABACACABABCCCBC\\r\\nCABABBABBBABBBCAB\\r\\nBCBCBAAACCCACACBA\\r\\nBBACABACAAABCCBBC\\r\\nABAABBABCCAABBCCA\\r\\nAABBACBCBCCBAACBB\\r\\nBBABCBBCCCBCACBCB\\r\\nBABCBBCCABCABBAAA\\r\\nAABAABBBBAACAABCC\\r\\nBACCCBBCCABBBACBB\\r\\n', 'output': ['3\\r\\n1 17\\r\\n']}, {'input': '19 19\\r\\nACCACBCABACABCACCAA\\r\\nBCACAAAACCACCCCBCCB\\r\\nCBACBBCBCBCABCABACA\\r\\nAACCAABBBCAAABACAAC\\r\\nACACCCBBBACACCAAABA\\r\\nAACAABCACCBCACCABBA\\r\\nAABBCCABACCACABACAA\\r\\nACBCCACBACCACABCABC\\r\\nAACAABCAACCBBAACBCA\\r\\nAAACACBAABCBACCAAAB\\r\\nAABACABBABCACAACBCA\\r\\nBABAAABCACBABACBBBC\\r\\nBAABCAAABCAABBCCAAC\\r\\nBCABCCBCCBCBABCBCCA\\r\\nBACACBACBCABBCBCABB\\r\\nABCACCBBBBCBBCABAAC\\r\\nBBBBCCBCBACAACBCBCA\\r\\nAAABBBBCACCACCAAACC\\r\\nCCCCCBAABAAAACCCBBA\\r\\n', 'output': ['3\\r\\n1 19\\r\\n']}, {'input': '20 18\\r\\nAABCAACCBBCBABBBBB\\r\\nBBCBAACCBCAACBBCCB\\r\\nACCBABABACBBACBBAB\\r\\nACBBBCBAAACAAAAABB\\r\\nBCBABABAACCCABBBCC\\r\\nBAAAAAACACABBCCCAC\\r\\nCBACCBCBACACAAACBC\\r\\nCBACAACBCBCAACACCA\\r\\nCCCBACCBACACCCBCCB\\r\\nCACABBBBBBCCBACCBA\\r\\nCCBCACABCBACABBCCB\\r\\nAACACCCCCABAABCACC\\r\\nCBBACCBBCBCBBCCAAB\\r\\nCABBABACCABACAABAB\\r\\nBBBABBCBCBACBCCABA\\r\\nBCCAACBCBCAAAABACA\\r\\nAAABACBBCCCACACBAC\\r\\nBABAAAACCBACBACAAA\\r\\nAABBABCBBBACAACBAB\\r\\nBBABBAABACBAABCCBB\\r\\n', 'output': ['27\\r\\n4 2\\r\\n']}, {'input': '1 1\\r\\nZ\\r\\n', 'output': ['1\\r\\n1 1\\r\\n']}, {'input': '2 2\\r\\nML\\r\\nWQ\\r\\n', 'output': ['4\\r\\n1 1\\r\\n']}, {'input': '3 3\\r\\nBXP\\r\\nUJF\\r\\nAQT\\r\\n', 'output': ['4\\r\\n1 1\\r\\n']}, {'input': '4 3\\r\\nOKJ\\r\\nXTV\\r\\nDVW\\r\\nHMK\\r\\n', 'output': ['5\\r\\n2 1\\r\\n']}, {'input': '5 5\\r\\nDZEZF\\r\\nOHZZC\\r\\nCNDOX\\r\\nNVYDP\\r\\nUCIAX\\r\\n', 'output': ['3\\r\\n1 5\\r\\n']}, {'input': '6 6\\r\\nQLXBOE\\r\\nKEEYTR\\r\\nZLPMSP\\r\\nWOKAHN\\r\\nLYXBXU\\r\\nSZOEZV\\r\\n', 'output': ['14\\r\\n2 1\\r\\n']}, {'input': '6 7\\r\\nGYSGYUL\\r\\nKGTJUVI\\r\\nFNRHOND\\r\\nZGZAFYZ\\r\\nQVCRZCA\\r\\nJCCXKGV\\r\\n', 'output': ['7\\r\\n2 1\\r\\n']}, {'input': '8 8\\r\\nTNMIIMOP\\r\\nJOAXSHVN\\r\\nQYHMVXGM\\r\\nQOXAIUMI\\r\\nLAAXNKCH\\r\\nORWESZUV\\r\\nPMIXHLEA\\r\\nAENPGVYK\\r\\n', 'output': ['13\\r\\n1 4\\r\\n']}, {'input': '9 9\\r\\nIZHKRCRTM\\r\\nLQBOENMNQ\\r\\nYLNVFBFUY\\r\\nACTTYWABL\\r\\nYSEGWNQHC\\r\\nTZASWPPAG\\r\\nLLZTKFPMV\\r\\nGXBETPPPN\\r\\nUCPEFNJKN\\r\\n', 'output': ['8\\r\\n1 3\\r\\n']}, {'input': '9 10\\r\\nXHPCDAAFPZ\\r\\nJRZCDTQBYP\\r\\nZBTAMDPIFY\\r\\nXBKTMXNIWM\\r\\nDAIONPEBYF\\r\\nAFHBCBDTKB\\r\\nKRVEBSUXRM\\r\\nWGMEZTWDBX\\r\\nNOJUCDZPZY\\r\\n', 'output': ['10\\r\\n3 1\\r\\n']}, {'input': '12 13\\r\\nTHSGJEPTDFEIJ\\r\\nOWPJGXSXJRYGD\\r\\nVYENWXFWSOSMX\\r\\nFZDFXFPWEIYYV\\r\\nOEODFOGQWJEEU\\r\\nSQRNSBTAMLQRU\\r\\nLXGZERSWTJWQK\\r\\nLGRJJMDTZVZWJ\\r\\nDWVBTSZKFUAHT\\r\\nHSSZHXAWVWMHB\\r\\nJZOCNFUHTHQYV\\r\\nTUHDMTZAQVWDL\\r\\n', 'output': ['10\\r\\n3 1\\r\\n']}, {'input': '14 13\\r\\nBGBALYLHQYMFM\\r\\nRLFOZFDFMRFEN\\r\\nGDWROOMXUVBOW\\r\\nDPXWRDPCEFMRQ\\r\\nJOSEGKGMHGHFC\\r\\nJHXUBTPOZOYGJ\\r\\nFHUUMHWSQRNEP\\r\\nVGWYMTMWHWGIL\\r\\nVMWDTBDJGEVZI\\r\\nLEJSIHTQKYDXY\\r\\nOLUOIWECMZVAI\\r\\nVDXSGRPMCCJEM\\r\\nMYWMDDAQAPBSG\\r\\nXQWPFRAPVEOYO\\r\\n', 'output': ['6\\r\\n7 1\\r\\n']}, {'input': '14 15\\r\\nJFLSOQHVDRTCPWZ\\r\\nWSROLOOQOCWPJNX\\r\\nEEUZVBLQXBFQKNA\\r\\nQIGZDIMDXVCHJFJ\\r\\nUDJGIZWDBMMMBJR\\r\\nEWXAQHPRYBQOYDT\\r\\nUDEAPOBVZOXNVMK\\r\\nAYEVKFIKNRUVRQC\\r\\nNLTLJBXWMUQXAZD\\r\\nKOXESBBUYLMIDOI\\r\\nZOJWEOJFCYTILHE\\r\\nRQDNTBZZXPKNCEN\\r\\nSYGFASAQUSMYYRP\\r\\nUOYCFYUDACJDTAD\\r\\n', 'output': ['13\\r\\n1 5\\r\\n']}, {'input': '16 15\\r\\nPFUMRKDISIBBVYP\\r\\nMZKXWWSQXADAPEB\\r\\nVTBYXGWQYZTHBHY\\r\\nONGURZKWHZDKIDF\\r\\nGCMHQQNJJXHHPVU\\r\\nNLMUXXKZOFNMFTG\\r\\nANDDDPHEDVWVHLC\\r\\nOYGXUHIMYPNIXCT\\r\\nILCGDQZNCSTIILX\\r\\nZVSYMJBHAUEXZMY\\r\\nMYOKFPJKKJLKVWI\\r\\nUEMUOOAJSNTOLEN\\r\\nLKIROZUNWRZBMZP\\r\\nYYWCXLGHLZQVPOB\\r\\nFMHPKABCBAAYCFA\\r\\nNRGFEWPLKNORSZR\\r\\n', 'output': ['18\\r\\n1 3\\r\\n']}, {'input': '14 17\\r\\nXGFETCAWEBHYYDECE\\r\\nCGFEUQEYMLSVHNKJA\\r\\nZMGSXZJASBUPTHRFQ\\r\\nGQREDKHDBTZPGWHEO\\r\\nQGACDHZVBAOGLHHEL\\r\\nLKLKVFVDHSRQNEDXC\\r\\nVNREYHZDJHPJKHXDO\\r\\nKBOMZYHZEUOYUOXSQ\\r\\nFNQGOBVDBTMUJPAKU\\r\\nXFPGQQXBPELKWSXCJ\\r\\nABUKLBPTFOGUJFDEQ\\r\\nKXPJEZJQCHTENYSKY\\r\\nXXOKEXESEVLQMFDZG\\r\\nVPGUBSJLGBWZWAMFZ\\r\\n', 'output': ['6\\r\\n7 1\\r\\n']}, {'input': '16 17\\r\\nFFOYWWWJRUPVBGSSJ\\r\\nVPOMWQMWUWYMMDAPB\\r\\nARQUYXZTHVSQZHMVJ\\r\\nCJAGELECYEXSHEYTU\\r\\nXRSZPRCBQPJQACNWR\\r\\nJISALKDCKJUWWHMYH\\r\\nGMISALZMLGRRGALJA\\r\\nCWPYTQYBXKLBGWKNF\\r\\nMJJYWBIHJLARHFNWB\\r\\nKEREXXISTPANXGGJG\\r\\nLECEJLPAFOZHLRTJM\\r\\nHBOWFNSQFRRGEJFMJ\\r\\nVEGIRVEXACMJVKFYN\\r\\nSCGOPQKUHEDNIPIRE\\r\\nLENRPPYJBEVDTOPOY\\r\\nFHJOESUHLIJRFPVBK\\r\\n', 'output': ['8\\r\\n4 1\\r\\n']}, {'input': '18 19\\r\\nLEXQWPUXGOWSELHIQPY\\r\\nZUYPTUDHEEQVRWBCXBU\\r\\nZUPMYQQQFHGKZZDMLFM\\r\\nCASSUVIKQKCEALUDDFK\\r\\nFDBZOXULVGFARYPNAQY\\r\\nWEFLTZOSOAGAMBWNGVC\\r\\nEVAPNTSSIMKNBOAHFSC\\r\\nUHTWEBRCEUJSARNEWYI\\r\\nGXGSDCDUIWYQRZUPQBZ\\r\\nFMYJUOHENURMDINJGCN\\r\\nHIBATJCOGWWRQWTLXDH\\r\\nRDDXJNZHQGUWPNGIDRO\\r\\nAJGHDUCGGLPYYDYSFRS\\r\\nAZGBVLJYYZWSQGBFJVU\\r\\nQJJRSHZFOECHGRGALML\\r\\nJKDMLPREFTISSSAJKJN\\r\\nGRHGVYSVQLYKCIMBIKA\\r\\nMSHRBZJJLDHBCAWAJBN\\r\\n', 'output': ['10\\r\\n3 1\\r\\n']}, {'input': '20 18\\r\\nNLBILWYVJJLCACSMUA\\r\\nAAMAWVGEZDTWUUZNMM\\r\\nWWNOTPPFXJSWWSPPRB\\r\\nYUJXZSHHNFGKXIXEJN\\r\\nLTKNJOJALEQURSYVBI\\r\\nSVXHFTUYWTLBXWFDXD\\r\\nLQUEBPXELRNAXFIKFT\\r\\nZGZEPWGVLVNMQVRMJM\\r\\nWTMIPWRNQCWKZACSKQ\\r\\nYGUREEGHTVMICOCUHE\\r\\nUNIJGNPINIFWCIHGIQ\\r\\nIRGJEHFRUJOHIXRSLF\\r\\nDQVCPHUSKYEHFGWBPS\\r\\nJIIGNJKTRAAPRBOGMQ\\r\\nHFNGDLVBUVECUMQDMT\\r\\nGEGCSOPRXQAEMDQAYO\\r\\nOHSBTADOWBVKZINKXC\\r\\nIIPWCAZSNDFVBMTGMI\\r\\nOZZTLUOFRYDNTPIAVA\\r\\nTFBGPAMJPIWLEZOKXB\\r\\n', 'output': ['33\\r\\n1 3\\r\\n']}, {'input': '2 4\\r\\nABAA\\r\\nABBB\\r\\n', 'output': ['2\\r\\n1 4\\r\\n']}, {'input': '6 6\\r\\nCCABCA\\r\\nBCBCBC\\r\\nBAAAAA\\r\\nCBBCAA\\r\\nACBBCA\\r\\nCCAABA\\r\\n', 'output': ['10\\r\\n1 6\\r\\n']}, {'input': '16 4\\r\\nBAAC\\r\\nBACA\\r\\nACBC\\r\\nABCC\\r\\nCCAC\\r\\nBBCC\\r\\nCCAB\\r\\nABCC\\r\\nCBCA\\r\\nBCBC\\r\\nBCBC\\r\\nCBBB\\r\\nBBAA\\r\\nBACA\\r\\nABCB\\r\\nAABA\\r\\n', 'output': ['9\\r\\n2 4\\r\\n']}, {'input': '2 14\\r\\nAABACBACBCBBCB\\r\\nBACCBBBCBAABBC\\r\\n', 'output': ['4\\r\\n1 7\\r\\n']}, {'input': '4 8\\r\\nCACABCCA\\r\\nABCBAACA\\r\\nACABBBCC\\r\\nAACCBCBB\\r\\n', 'output': ['8\\r\\n1 4\\r\\n']}, {'input': '12 18\\r\\nCBBCAACABACCACABBC\\r\\nABCAACABAABCBCBCCC\\r\\nBCAACCCBBBABBACBBA\\r\\nACCBCBBBAABACCACCC\\r\\nCAABCCCACACCBACACC\\r\\nBBBCBCACCABCCBCBBB\\r\\nBAABBCACAAAAACCBCB\\r\\nBAABAABACBCABACBCA\\r\\nAABCBCCBCCABACCCAC\\r\\nCCBBBAACCCBCACCCBB\\r\\nCBABACBBBABCBACCCB\\r\\nAABACCCBCCACBCACCB\\r\\n', 'output': ['24\\r\\n4 2\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class CF9{\n\tpublic static void main(String[] args){\n\t\tFastScanner scanner = new FastScanner();\n\t\tint a = scanner.nextInt();\n\t\tint b = scanner.nextInt();\n\t\tint maxr = 0;\n\t\tint maxc = 0;\n\t\tint minr = 0;\n\t\tint minc = 0;\n\t\tint c = 0;\n\t\tString[] s = new String[a];\n\t\tfor(int i = 0 ; i < a ; i ++){\n\t\t\ts[i] = scanner.next();\n\t\t}\n\t\tfor(int x = 1 ; x <= a / 2 ; x ++){\n\t\t\tfor(int y = 1 ; y <= b / 2 ; y ++){\n\t\t\t\tc = 0;\n\t\t\t\tmaxr = x;\n\t\t\t\tmaxc = y;\n\t\t\t\tminr = a / x;\n\t\t\t\tminc = b / y;\n\t\t\t\tif(minr > a / x){\n\t\t\t\t\tminr = a / x;\n\t\t\t\t}\n\t\t\t\tif(minc > b / y){\n\t\t\t\t\tminc = b / y;\n\t\t\t\t}\n\t\t\t\tif(minr < maxr){\n\t\t\t\t\tmaxr = minr;\n\t\t\t\t}\n\t\t\t\tif(minc < maxc){\n\t\t\t\t\tmaxc = minc;\n\t\t\t\t}\n\t\t\t\tfor(int i = 0 ; i < a ; i += x){\n\t\t\t\t\tfor(int j = 0 ; j < b ; j += y){\n\t\t\t\t\t\tfor(int ii = i ; ii < i + x ; ii ++){\n\t\t\t\t\t\t\tfor(int jj = j ; jj < j + y ; jj ++){\n\t\t\t\t\t\t\t\tif(ii == i || ii == i + x - 1 || jj == j || jj == j + y - 1){\n\t\t\t\t\t\t\t\t\tif(s[i][j]!= s[ii][jj]){\n\t\t\t\t\t\t\t\t\t\tc ++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}else if(s[i][j] == s[ii][jj]){\n\t\t\t\t\t\t\t\t\tc ++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(c == 0){\n\t\t\t\t\tSystem.out.println((a / x) * (b / y));\n\t\t\t\t\tSystem.out.print(x + \" \" + y);\n\t\t\t\t\tSystem.exit(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(1);\n\t\tSystem.out.print(a + \" \" + b);\n\t}\n\n\tprivate static class FastScanner {\n\t\tprivate final InputStream in = System.in;\n\t\tprivate final byte[] buffer = new byte[1024];\n\t\tprivate int ptr = 0;\n\t\tprivate int buflen = 0;\n\t\tprivate boolean hasNextByte() {\n\t\t\t\t\t\t\tif (ptr < buflen) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t\t\tptr = 0;\n\t\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbuflen = in.read(buffer);\n\t\t\t\t\t\t\t\t\t\t\t\t} catch (java.io.IOException e) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tif (buflen <= 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"src_uid": "4de8b72f9ce12554cae8b6a83b3f023e", "id": 112, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': '2 4\\r\\nABDC\\r\\nABDC\\r\\n', 'output': ['3\\r\\n2 1\\r\\n']}, {'input': '2 6\\r\\nABCCBA\\r\\nABCCBA\\r\\n', 'output': ['1\\r\\n2 6\\r\\n']}, {'input': '2 2\\r\\nAB\\r\\nCD\\r\\n', 'output': ['4\\r\\n1 1\\r\\n']}, {'input': '4 6\\r\\nABABAC\\r\\nBABABC\\r\\nABABAC\\r\\nCCCCCA\\r\\n', 'output': ['4\\r\\n2 3\\r\\n']}, {'input': '1 12\\r\\nABAAADCAAABX\\r\\n', 'output': ['4\\r\\n1 3\\r\\n']}, {'input': '4 6\\r\\nABCDEF\\r\\nGHIJKL\\r\\nMNOPQR\\r\\nSTUVWX\\r\\n', 'output': ['12\\r\\n1 1\\r\\n']}, {'input': '5 5\\r\\nABAAA\\r\\nBBBAA\\r\\nABABA\\r\\nBBABB\\r\\nBAAAB\\r\\n', 'output': ['3\\r\\n1 5\\r\\n']}, {'input': '5 6\\r\\nBBBABB\\r\\nAAAABB\\r\\nABABAA\\r\\nABBBAA\\r\\nBABBBA\\r\\n', 'output': ['4\\r\\n1 6\\r\\n']}, {'input': '7 7\\r\\nBBAAABB\\r\\nAABBBBA\\r\\nAABABBA\\r\\nAABABAB\\r\\nAABBBAA\\r\\nBAAAABA\\r\\nBBABBBB\\r\\n', 'output': ['3\\r\\n1 7\\r\\n']}, {'input': '8 7\\r\\nBABABBB\\r\\nABABABA\\r\\nAABBABA\\r\\nABBABAA\\r\\nBABAAAB\\r\\nAABBBBA\\r\\nABBBBAB\\r\\nBBAAABA\\r\\n', 'output': ['5\\r\\n1 7\\r\\n']}, {'input': '8 9\\r\\nBAABABAAB\\r\\nBAABAAAAB\\r\\nBBBBBAABB\\r\\nAAAAAAAAB\\r\\nBABBABBAA\\r\\nBBABABBBB\\r\\nBABABBAAA\\r\\nAABAABBBB\\r\\n', 'output': ['7\\r\\n8 1\\r\\n']}, {'input': '10 10\\r\\nABBAABAABB\\r\\nABAAAAAABA\\r\\nBAABABABAA\\r\\nBAAAAAAAAB\\r\\nBABABBBAAB\\r\\nABBABBBBBA\\r\\nAABABAAAAA\\r\\nBAAAABAABA\\r\\nABABAABBAA\\r\\nBBABBABABB\\r\\n', 'output': ['9\\r\\n1 10\\r\\n']}, {'input': '10 11\\r\\nABBBAABABBB\\r\\nBBAABABBAAB\\r\\nAABBBBBAAAA\\r\\nBBABABAAABA\\r\\nAABABBBAABB\\r\\nAAABABAABAB\\r\\nBBABBBABBBB\\r\\nBBABABABBAA\\r\\nBBABABAAABB\\r\\nBABAABAABAB\\r\\n', 'output': ['5\\r\\n10 1\\r\\n']}, {'input': '12 11\\r\\nBBAAAABBAAB\\r\\nBBABBABBABB\\r\\nBAABABBABBA\\r\\nBABBBAAAABA\\r\\nABBAABBBBBA\\r\\nABBABBABABB\\r\\nAAABBBABBBB\\r\\nBAABAAABAAA\\r\\nAAAABBBBABA\\r\\nAAABAAABBBB\\r\\nBAAAAABABAB\\r\\nABBBBABABBB\\r\\n', 'output': ['7\\r\\n1 11\\r\\n']}, {'input': '12 13\\r\\nBBABABAAAAABA\\r\\nABAAAAAAAABBA\\r\\nABBBABAAAAABA\\r\\nBBBAABABBABBB\\r\\nABABAAABABABB\\r\\nABBAABAABBAAA\\r\\nAABABBAAABBAB\\r\\nABBBBBABBAABA\\r\\nBBBBBABBABBAA\\r\\nAAAAAAABBBAAB\\r\\nBAABBBAABAAAA\\r\\nBBBBBBABABABA\\r\\n', 'output': ['7\\r\\n12 1\\r\\n']}, {'input': '14 12\\r\\nBBAAABBBAAAB\\r\\nBBABAAAAABAA\\r\\nAABBABBBABBA\\r\\nBABAABAABBBB\\r\\nBBBABBBBABAA\\r\\nABBAABBAAABA\\r\\nABAAAAABBBAB\\r\\nBBAABBABBBAA\\r\\nBAABABAAABAB\\r\\nAAABBBABBABA\\r\\nBABBBBAABBBA\\r\\nAAAAABABBAAB\\r\\nBABBBABBBBBA\\r\\nBAAAABAABAAA\\r\\n', 'output': ['14\\r\\n1 12\\r\\n']}, {'input': '14 10\\r\\nABBAAABBAA\\r\\nBBBBBABBAA\\r\\nBABABBABAB\\r\\nAAABABBAAB\\r\\nBBABABBBAB\\r\\nBBABBABABB\\r\\nAABBBBABAA\\r\\nABBBAAAABB\\r\\nABBABAABAA\\r\\nABABABABBA\\r\\nABAABBBAAB\\r\\nAAAAAAAAAA\\r\\nABABBAABAA\\r\\nBABAABABBB\\r\\n', 'output': ['10\\r\\n1 10\\r\\n']}, {'input': '16 15\\r\\nABBBBAAABABBABB\\r\\nABBBAAABBABBBBB\\r\\nBABABAABBBABABB\\r\\nAAABBBBBABBABBB\\r\\nBAABAABAABAABBA\\r\\nABBBBAAAAAAAABB\\r\\nBAABBBABABAAAAB\\r\\nAAAABBAABBAABAA\\r\\nABBABABAAABABBB\\r\\nAAABBBABAABABAA\\r\\nBAABABBAAABBAAA\\r\\nAAAAAAABABBBAAA\\r\\nBABBAABBABAAAAB\\r\\nABABAAABBBBBAAB\\r\\nBBABBAABABAABBB\\r\\nBAAAABBBABABBBA\\r\\n', 'output': ['12\\r\\n4 3\\r\\n']}, {'input': '16 16\\r\\nABBABBABBAABBBAB\\r\\nBABABBAABAABBAAA\\r\\nBAAABBAABAABBBAA\\r\\nAABAAAABAAAABBBA\\r\\nBAAAABAABBBABBAA\\r\\nAABBABABABAABBBA\\r\\nBABBBABAAAAABABB\\r\\nBABBBBBBBBABBBAB\\r\\nBAAAABBBABAABBBA\\r\\nBABBBABBAABABBAA\\r\\nBBBBBBAABBBABBBA\\r\\nBABAAAABAABAABBB\\r\\nAAAAABBAAABABAAA\\r\\nBABBABABABAAABAB\\r\\nBAAAAAAAABBABAAA\\r\\nBAAAAABABBBBAAAA\\r\\n', 'output': ['15\\r\\n1 16\\r\\n']}, {'input': '18 18\\r\\nBBBBBBBABABBBABABA\\r\\nBAAABAAABBBABABBBB\\r\\nBABBAAABAAABAAABAA\\r\\nAABBABBBABBBBBAAAB\\r\\nBBBAAAAABBABBAAAAA\\r\\nAABBAABABABBBABABA\\r\\nBAABBAAAABABAABABB\\r\\nBABBABBBAAAABAABBA\\r\\nBBBBAABAAABAAABBBA\\r\\nABABBAAABBBBBABABA\\r\\nABABAABBBBBABBBBBB\\r\\nABAAABBABBABAAAABA\\r\\nBABAAABABABBBABBBB\\r\\nBBBBABBBABBBBBBBBA\\r\\nBAAABAABABABBBBAAB\\r\\nBABBAABABBABAABBBB\\r\\nBAABABAAAABBABBAAA\\r\\nBAAABBBAABABBABBAB\\r\\n', 'output': ['23\\r\\n2 6\\r\\n']}, {'input': '17 17\\r\\nBBAABAABBBBBAABBB\\r\\nBBABABBBBABAAABBB\\r\\nAAAABAAAABABABBAA\\r\\nBBABAAABBABBAAABA\\r\\nAAABBBBBAABABBBAB\\r\\nAABBBBBABABABABBB\\r\\nBAABAAABAAABBAABB\\r\\nBBAAAAAABABABBAAB\\r\\nAAAAABAABBAAAABAA\\r\\nBABAABABABABABBBB\\r\\nBAABABBAAABBAAABB\\r\\nABBAAABBBBAAAABAB\\r\\nBBABAABAAAAAABBBB\\r\\nAAABBABBAAAAABBBB\\r\\nAABAABBAABBABAABB\\r\\nABABAAABBABAAABAB\\r\\nBBABABBBAAAAAAABA\\r\\n', 'output': ['3\\r\\n1 17\\r\\n']}, {'input': '20 20\\r\\nABBBAAABABAAAAABBABB\\r\\nBABABBAABAABBAAABABB\\r\\nBABBBAABAABBABBBBABA\\r\\nBAAABBAAABABBABBAAAA\\r\\nABBAABAABBBBAAABBBAA\\r\\nBAAAAAAAABABBAAAAABB\\r\\nAAAAAAABABBBBBAABAAB\\r\\nABBBBABAABBAAAAABAAA\\r\\nBAAAAABBABAAAAABAAAB\\r\\nABABAABABBBABBAABBAA\\r\\nBAAABBBAAAABBBBBABAA\\r\\nAAABBABABAABBABAABAB\\r\\nABBABABABABAAABABABA\\r\\nBAABAAAAABBAABBBAAAB\\r\\nABAAABBABAABBBABAABA\\r\\nBAABBBBBABBBABBBABAB\\r\\nBABBABABBBBBBBBABAAA\\r\\nABAAABAAABAAABABABAA\\r\\nBAABBBBAABBAAAAAABBA\\r\\nABAABBABAAABBABABAAA\\r\\n', 'output': ['23\\r\\n1 10\\r\\n']}, {'input': '1 1\\r\\nC\\r\\n', 'output': ['1\\r\\n1 1\\r\\n']}, {'input': '2 2\\r\\nCC\\r\\nBB\\r\\n', 'output': ['2\\r\\n1 2\\r\\n']}, {'input': '3 3\\r\\nACA\\r\\nCCA\\r\\nACB\\r\\n', 'output': ['3\\r\\n1 3\\r\\n']}, {'input': '4 4\\r\\nACAC\\r\\nCBCC\\r\\nABBC\\r\\nCCAC\\r\\n', 'output': ['5\\r\\n1 4\\r\\n']}, {'input': '5 5\\r\\nBBCAB\\r\\nBCBAC\\r\\nCAAAB\\r\\nACBBA\\r\\nCAACB\\r\\n', 'output': ['3\\r\\n1 5\\r\\n']}, {'input': '14 16\\r\\nCBCCCABCBBBAAACC\\r\\nAABAACBACBCBACCA\\r\\nABBBABAACCACCCCC\\r\\nBBACACACCCCBBBAC\\r\\nBBCAABACBAACBCAA\\r\\nAAACCACBBCABABCB\\r\\nABCBCAAAAACBABBA\\r\\nAAABBBCCBAACBBCA\\r\\nBBAACBABBBCCBAAC\\r\\nBAABCCBAAABAACAC\\r\\nABBBBCBAACACCBCB\\r\\nBCABACBBBCAACACC\\r\\nACCCCABCCCBBCAAC\\r\\nBCBBCCCBCBCCACAA\\r\\n', 'output': ['15\\r\\n7 1\\r\\n']}, {'input': '16 16\\r\\nACABBCCBAABCCCCB\\r\\nAABCACCAAACACABB\\r\\nBCCCAABBAACBACAA\\r\\nBCACAABBBCAAAABA\\r\\nACCBABCCACABBCCC\\r\\nCCAAACACACBCABCA\\r\\nBCAACBBBCACBBCAB\\r\\nBABBCBBBCCCBAACC\\r\\nBBBBBABACBABBCBA\\r\\nABAACBACCACBBABA\\r\\nABAACBACCBCBCCBB\\r\\nBCACCCAABCBBCBCB\\r\\nBBBCCCBCCBCBACCA\\r\\nAABCBBBBACCACCBB\\r\\nBCABCCCBCBBBCBCC\\r\\nACCCCCCBBBAABACC\\r\\n', 'output': ['17\\r\\n4 2\\r\\n']}, {'input': '17 17\\r\\nBCBAAABAABCCCAAAC\\r\\nBBAABCABBAACCACBB\\r\\nABCCBAABBCCABBBAB\\r\\nAACCBBACCAAACCACA\\r\\nABBACBAAAABBABCAA\\r\\nACBACCCABAABBCABB\\r\\nCBCCCBCACBABCAAAA\\r\\nAAABACACABABCCCBC\\r\\nCABABBABBBABBBCAB\\r\\nBCBCBAAACCCACACBA\\r\\nBBACABACAAABCCBBC\\r\\nABAABBABCCAABBCCA\\r\\nAABBACBCBCCBAACBB\\r\\nBBABCBBCCCBCACBCB\\r\\nBABCBBCCABCABBAAA\\r\\nAABAABBBBAACAABCC\\r\\nBACCCBBCCABBBACBB\\r\\n', 'output': ['3\\r\\n1 17\\r\\n']}, {'input': '19 19\\r\\nACCACBCABACABCACCAA\\r\\nBCACAAAACCACCCCBCCB\\r\\nCBACBBCBCBCABCABACA\\r\\nAACCAABBBCAAABACAAC\\r\\nACACCCBBBACACCAAABA\\r\\nAACAABCACCBCACCABBA\\r\\nAABBCCABACCACABACAA\\r\\nACBCCACBACCACABCABC\\r\\nAACAABCAACCBBAACBCA\\r\\nAAACACBAABCBACCAAAB\\r\\nAABACABBABCACAACBCA\\r\\nBABAAABCACBABACBBBC\\r\\nBAABCAAABCAABBCCAAC\\r\\nBCABCCBCCBCBABCBCCA\\r\\nBACACBACBCABBCBCABB\\r\\nABCACCBBBBCBBCABAAC\\r\\nBBBBCCBCBACAACBCBCA\\r\\nAAABBBBCACCACCAAACC\\r\\nCCCCCBAABAAAACCCBBA\\r\\n', 'output': ['3\\r\\n1 19\\r\\n']}, {'input': '20 18\\r\\nAABCAACCBBCBABBBBB\\r\\nBBCBAACCBCAACBBCCB\\r\\nACCBABABACBBACBBAB\\r\\nACBBBCBAAACAAAAABB\\r\\nBCBABABAACCCABBBCC\\r\\nBAAAAAACACABBCCCAC\\r\\nCBACCBCBACACAAACBC\\r\\nCBACAACBCBCAACACCA\\r\\nCCCBACCBACACCCBCCB\\r\\nCACABBBBBBCCBACCBA\\r\\nCCBCACABCBACABBCCB\\r\\nAACACCCCCABAABCACC\\r\\nCBBACCBBCBCBBCCAAB\\r\\nCABBABACCABACAABAB\\r\\nBBBABBCBCBACBCCABA\\r\\nBCCAACBCBCAAAABACA\\r\\nAAABACBBCCCACACBAC\\r\\nBABAAAACCBACBACAAA\\r\\nAABBABCBBBACAACBAB\\r\\nBBABBAABACBAABCCBB\\r\\n', 'output': ['27\\r\\n4 2\\r\\n']}, {'input': '1 1\\r\\nZ\\r\\n', 'output': ['1\\r\\n1 1\\r\\n']}, {'input': '2 2\\r\\nML\\r\\nWQ\\r\\n', 'output': ['4\\r\\n1 1\\r\\n']}, {'input': '3 3\\r\\nBXP\\r\\nUJF\\r\\nAQT\\r\\n', 'output': ['4\\r\\n1 1\\r\\n']}, {'input': '4 3\\r\\nOKJ\\r\\nXTV\\r\\nDVW\\r\\nHMK\\r\\n', 'output': ['5\\r\\n2 1\\r\\n']}, {'input': '5 5\\r\\nDZEZF\\r\\nOHZZC\\r\\nCNDOX\\r\\nNVYDP\\r\\nUCIAX\\r\\n', 'output': ['3\\r\\n1 5\\r\\n']}, {'input': '6 6\\r\\nQLXBOE\\r\\nKEEYTR\\r\\nZLPMSP\\r\\nWOKAHN\\r\\nLYXBXU\\r\\nSZOEZV\\r\\n', 'output': ['14\\r\\n2 1\\r\\n']}, {'input': '6 7\\r\\nGYSGYUL\\r\\nKGTJUVI\\r\\nFNRHOND\\r\\nZGZAFYZ\\r\\nQVCRZCA\\r\\nJCCXKGV\\r\\n', 'output': ['7\\r\\n2 1\\r\\n']}, {'input': '8 8\\r\\nTNMIIMOP\\r\\nJOAXSHVN\\r\\nQYHMVXGM\\r\\nQOXAIUMI\\r\\nLAAXNKCH\\r\\nORWESZUV\\r\\nPMIXHLEA\\r\\nAENPGVYK\\r\\n', 'output': ['13\\r\\n1 4\\r\\n']}, {'input': '9 9\\r\\nIZHKRCRTM\\r\\nLQBOENMNQ\\r\\nYLNVFBFUY\\r\\nACTTYWABL\\r\\nYSEGWNQHC\\r\\nTZASWPPAG\\r\\nLLZTKFPMV\\r\\nGXBETPPPN\\r\\nUCPEFNJKN\\r\\n', 'output': ['8\\r\\n1 3\\r\\n']}, {'input': '9 10\\r\\nXHPCDAAFPZ\\r\\nJRZCDTQBYP\\r\\nZBTAMDPIFY\\r\\nXBKTMXNIWM\\r\\nDAIONPEBYF\\r\\nAFHBCBDTKB\\r\\nKRVEBSUXRM\\r\\nWGMEZTWDBX\\r\\nNOJUCDZPZY\\r\\n', 'output': ['10\\r\\n3 1\\r\\n']}, {'input': '12 13\\r\\nTHSGJEPTDFEIJ\\r\\nOWPJGXSXJRYGD\\r\\nVYENWXFWSOSMX\\r\\nFZDFXFPWEIYYV\\r\\nOEODFOGQWJEEU\\r\\nSQRNSBTAMLQRU\\r\\nLXGZERSWTJWQK\\r\\nLGRJJMDTZVZWJ\\r\\nDWVBTSZKFUAHT\\r\\nHSSZHXAWVWMHB\\r\\nJZOCNFUHTHQYV\\r\\nTUHDMTZAQVWDL\\r\\n', 'output': ['10\\r\\n3 1\\r\\n']}, {'input': '14 13\\r\\nBGBALYLHQYMFM\\r\\nRLFOZFDFMRFEN\\r\\nGDWROOMXUVBOW\\r\\nDPXWRDPCEFMRQ\\r\\nJOSEGKGMHGHFC\\r\\nJHXUBTPOZOYGJ\\r\\nFHUUMHWSQRNEP\\r\\nVGWYMTMWHWGIL\\r\\nVMWDTBDJGEVZI\\r\\nLEJSIHTQKYDXY\\r\\nOLUOIWECMZVAI\\r\\nVDXSGRPMCCJEM\\r\\nMYWMDDAQAPBSG\\r\\nXQWPFRAPVEOYO\\r\\n', 'output': ['6\\r\\n7 1\\r\\n']}, {'input': '14 15\\r\\nJFLSOQHVDRTCPWZ\\r\\nWSROLOOQOCWPJNX\\r\\nEEUZVBLQXBFQKNA\\r\\nQIGZDIMDXVCHJFJ\\r\\nUDJGIZWDBMMMBJR\\r\\nEWXAQHPRYBQOYDT\\r\\nUDEAPOBVZOXNVMK\\r\\nAYEVKFIKNRUVRQC\\r\\nNLTLJBXWMUQXAZD\\r\\nKOXESBBUYLMIDOI\\r\\nZOJWEOJFCYTILHE\\r\\nRQDNTBZZXPKNCEN\\r\\nSYGFASAQUSMYYRP\\r\\nUOYCFYUDACJDTAD\\r\\n', 'output': ['13\\r\\n1 5\\r\\n']}, {'input': '16 15\\r\\nPFUMRKDISIBBVYP\\r\\nMZKXWWSQXADAPEB\\r\\nVTBYXGWQYZTHBHY\\r\\nONGURZKWHZDKIDF\\r\\nGCMHQQNJJXHHPVU\\r\\nNLMUXXKZOFNMFTG\\r\\nANDDDPHEDVWVHLC\\r\\nOYGXUHIMYPNIXCT\\r\\nILCGDQZNCSTIILX\\r\\nZVSYMJBHAUEXZMY\\r\\nMYOKFPJKKJLKVWI\\r\\nUEMUOOAJSNTOLEN\\r\\nLKIROZUNWRZBMZP\\r\\nYYWCXLGHLZQVPOB\\r\\nFMHPKABCBAAYCFA\\r\\nNRGFEWPLKNORSZR\\r\\n', 'output': ['18\\r\\n1 3\\r\\n']}, {'input': '14 17\\r\\nXGFETCAWEBHYYDECE\\r\\nCGFEUQEYMLSVHNKJA\\r\\nZMGSXZJASBUPTHRFQ\\r\\nGQREDKHDBTZPGWHEO\\r\\nQGACDHZVBAOGLHHEL\\r\\nLKLKVFVDHSRQNEDXC\\r\\nVNREYHZDJHPJKHXDO\\r\\nKBOMZYHZEUOYUOXSQ\\r\\nFNQGOBVDBTMUJPAKU\\r\\nXFPGQQXBPELKWSXCJ\\r\\nABUKLBPTFOGUJFDEQ\\r\\nKXPJEZJQCHTENYSKY\\r\\nXXOKEXESEVLQMFDZG\\r\\nVPGUBSJLGBWZWAMFZ\\r\\n', 'output': ['6\\r\\n7 1\\r\\n']}, {'input': '16 17\\r\\nFFOYWWWJRUPVBGSSJ\\r\\nVPOMWQMWUWYMMDAPB\\r\\nARQUYXZTHVSQZHMVJ\\r\\nCJAGELECYEXSHEYTU\\r\\nXRSZPRCBQPJQACNWR\\r\\nJISALKDCKJUWWHMYH\\r\\nGMISALZMLGRRGALJA\\r\\nCWPYTQYBXKLBGWKNF\\r\\nMJJYWBIHJLARHFNWB\\r\\nKEREXXISTPANXGGJG\\r\\nLECEJLPAFOZHLRTJM\\r\\nHBOWFNSQFRRGEJFMJ\\r\\nVEGIRVEXACMJVKFYN\\r\\nSCGOPQKUHEDNIPIRE\\r\\nLENRPPYJBEVDTOPOY\\r\\nFHJOESUHLIJRFPVBK\\r\\n', 'output': ['8\\r\\n4 1\\r\\n']}, {'input': '18 19\\r\\nLEXQWPUXGOWSELHIQPY\\r\\nZUYPTUDHEEQVRWBCXBU\\r\\nZUPMYQQQFHGKZZDMLFM\\r\\nCASSUVIKQKCEALUDDFK\\r\\nFDBZOXULVGFARYPNAQY\\r\\nWEFLTZOSOAGAMBWNGVC\\r\\nEVAPNTSSIMKNBOAHFSC\\r\\nUHTWEBRCEUJSARNEWYI\\r\\nGXGSDCDUIWYQRZUPQBZ\\r\\nFMYJUOHENURMDINJGCN\\r\\nHIBATJCOGWWRQWTLXDH\\r\\nRDDXJNZHQGUWPNGIDRO\\r\\nAJGHDUCGGLPYYDYSFRS\\r\\nAZGBVLJYYZWSQGBFJVU\\r\\nQJJRSHZFOECHGRGALML\\r\\nJKDMLPREFTISSSAJKJN\\r\\nGRHGVYSVQLYKCIMBIKA\\r\\nMSHRBZJJLDHBCAWAJBN\\r\\n', 'output': ['10\\r\\n3 1\\r\\n']}, {'input': '20 18\\r\\nNLBILWYVJJLCACSMUA\\r\\nAAMAWVGEZDTWUUZNMM\\r\\nWWNOTPPFXJSWWSPPRB\\r\\nYUJXZSHHNFGKXIXEJN\\r\\nLTKNJOJALEQURSYVBI\\r\\nSVXHFTUYWTLBXWFDXD\\r\\nLQUEBPXELRNAXFIKFT\\r\\nZGZEPWGVLVNMQVRMJM\\r\\nWTMIPWRNQCWKZACSKQ\\r\\nYGUREEGHTVMICOCUHE\\r\\nUNIJGNPINIFWCIHGIQ\\r\\nIRGJEHFRUJOHIXRSLF\\r\\nDQVCPHUSKYEHFGWBPS\\r\\nJIIGNJKTRAAPRBOGMQ\\r\\nHFNGDLVBUVECUMQDMT\\r\\nGEGCSOPRXQAEMDQAYO\\r\\nOHSBTADOWBVKZINKXC\\r\\nIIPWCAZSNDFVBMTGMI\\r\\nOZZTLUOFRYDNTPIAVA\\r\\nTFBGPAMJPIWLEZOKXB\\r\\n', 'output': ['33\\r\\n1 3\\r\\n']}, {'input': '2 4\\r\\nABAA\\r\\nABBB\\r\\n', 'output': ['2\\r\\n1 4\\r\\n']}, {'input': '6 6\\r\\nCCABCA\\r\\nBCBCBC\\r\\nBAAAAA\\r\\nCBBCAA\\r\\nACBBCA\\r\\nCCAABA\\r\\n', 'output': ['10\\r\\n1 6\\r\\n']}, {'input': '16 4\\r\\nBAAC\\r\\nBACA\\r\\nACBC\\r\\nABCC\\r\\nCCAC\\r\\nBBCC\\r\\nCCAB\\r\\nABCC\\r\\nCBCA\\r\\nBCBC\\r\\nBCBC\\r\\nCBBB\\r\\nBBAA\\r\\nBACA\\r\\nABCB\\r\\nAABA\\r\\n', 'output': ['9\\r\\n2 4\\r\\n']}, {'input': '2 14\\r\\nAABACBACBCBBCB\\r\\nBACCBBBCBAABBC\\r\\n', 'output': ['4\\r\\n1 7\\r\\n']}, {'input': '4 8\\r\\nCACABCCA\\r\\nABCBAACA\\r\\nACABBBCC\\r\\nAACCBCBB\\r\\n', 'output': ['8\\r\\n1 4\\r\\n']}, {'input': '12 18\\r\\nCBBCAACABACCACABBC\\r\\nABCAACABAABCBCBCCC\\r\\nBCAACCCBBBABBACBBA\\r\\nACCBCBBBAABACCACCC\\r\\nCAABCCCACACCBACACC\\r\\nBBBCBCACCABCCBCBBB\\r\\nBAABBCACAAAAACCBCB\\r\\nBAABAABACBCABACBCA\\r\\nAABCBCCBCCABACCCAC\\r\\nCCBBBAACCCBCACCCBB\\r\\nCBABACBBBABCBACCCB\\r\\nAABACCCBCCACBCACCB\\r\\n', 'output': ['24\\r\\n4 2\\r\\n']}]", "source_code": "//package main;\nimport java.io.*;\n\npublic class Puzzle{\n    public static void main (String[] args) throws IOException {\n        StreamTokenizer in = new StreamTokenizer(new InputStreamReader(System.in));\n        int a = readInt(in), b = readInt(in);\n        char[][] pic = new char[a][b];\n        for(int i = 0; i < a; ++i){\n            pic[i] = readString(in).toCharArray();\n        }\n        int minSize = a/2;\n        for(int x = 2; x <= a; ++x){\n            for(int y = 2; y <= b/x; ++y){\n                boolean good = true;\n                for(int i = 0; i < a-x; ++i){\n                    for(int j = 0; j < b-y; ++j){\n                        if(pic[i][j] == pic[i+x][j] && pic[i][j] == pic[i][j+y])\n                            good = false;\n                    }\n                }\n                if(good){\n                    minSize = Math.min(minSize, x+y);\n                }\n            }\n        }\n        System.out.println((a-1)*(b-1)/minSize + 1);\n        System.out.println(minSize + \" \" + (b/minSize));\n    }\n    public static String readString(StreamTokenizer in) throws IOException {\n        String res = \"\";\n        in.nextToken();\n        if(in.ttype!= StreamTokenizer.TT_EOL){\n            res = res + (char)in.ttype;\n            while(in.nextToken()!= StreamTokenizer.TT_EOL){\n                res += (char)in.ttype;\n            }\n        }\n        return res;\n    }\n    public static int readInt(StreamTokenizer in) throws IOException {\n        in.nextToken();\n        int res = 0;\n        if(in.ttype!= StreamTokenizer.TT_EOF){\n            res = (int)in.nval;\n            in.nextToken();\n        }\n        return res;\n    }\n}\n"}
{"src_uid": "4de8b72f9ce12554cae8b6a83b3f023e", "id": 112, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1800, "testcases": "[{'input': '2 4\\r\\nABDC\\r\\nABDC\\r\\n', 'output': ['3\\r\\n2 1\\r\\n']}, {'input': '2 6\\r\\nABCCBA\\r\\nABCCBA\\r\\n', 'output': ['1\\r\\n2 6\\r\\n']}, {'input': '2 2\\r\\nAB\\r\\nCD\\r\\n', 'output': ['4\\r\\n1 1\\r\\n']}, {'input': '4 6\\r\\nABABAC\\r\\nBABABC\\r\\nABABAC\\r\\nCCCCCA\\r\\n', 'output': ['4\\r\\n2 3\\r\\n']}, {'input': '1 12\\r\\nABAAADCAAABX\\r\\n', 'output': ['4\\r\\n1 3\\r\\n']}, {'input': '4 6\\r\\nABCDEF\\r\\nGHIJKL\\r\\nMNOPQR\\r\\nSTUVWX\\r\\n', 'output': ['12\\r\\n1 1\\r\\n']}, {'input': '5 5\\r\\nABAAA\\r\\nBBBAA\\r\\nABABA\\r\\nBBABB\\r\\nBAAAB\\r\\n', 'output': ['3\\r\\n1 5\\r\\n']}, {'input': '5 6\\r\\nBBBABB\\r\\nAAAABB\\r\\nABABAA\\r\\nABBBAA\\r\\nBABBBA\\r\\n', 'output': ['4\\r\\n1 6\\r\\n']}, {'input': '7 7\\r\\nBBAAABB\\r\\nAABBBBA\\r\\nAABABBA\\r\\nAABABAB\\r\\nAABBBAA\\r\\nBAAAABA\\r\\nBBABBBB\\r\\n', 'output': ['3\\r\\n1 7\\r\\n']}, {'input': '8 7\\r\\nBABABBB\\r\\nABABABA\\r\\nAABBABA\\r\\nABBABAA\\r\\nBABAAAB\\r\\nAABBBBA\\r\\nABBBBAB\\r\\nBBAAABA\\r\\n', 'output': ['5\\r\\n1 7\\r\\n']}, {'input': '8 9\\r\\nBAABABAAB\\r\\nBAABAAAAB\\r\\nBBBBBAABB\\r\\nAAAAAAAAB\\r\\nBABBABBAA\\r\\nBBABABBBB\\r\\nBABABBAAA\\r\\nAABAABBBB\\r\\n', 'output': ['7\\r\\n8 1\\r\\n']}, {'input': '10 10\\r\\nABBAABAABB\\r\\nABAAAAAABA\\r\\nBAABABABAA\\r\\nBAAAAAAAAB\\r\\nBABABBBAAB\\r\\nABBABBBBBA\\r\\nAABABAAAAA\\r\\nBAAAABAABA\\r\\nABABAABBAA\\r\\nBBABBABABB\\r\\n', 'output': ['9\\r\\n1 10\\r\\n']}, {'input': '10 11\\r\\nABBBAABABBB\\r\\nBBAABABBAAB\\r\\nAABBBBBAAAA\\r\\nBBABABAAABA\\r\\nAABABBBAABB\\r\\nAAABABAABAB\\r\\nBBABBBABBBB\\r\\nBBABABABBAA\\r\\nBBABABAAABB\\r\\nBABAABAABAB\\r\\n', 'output': ['5\\r\\n10 1\\r\\n']}, {'input': '12 11\\r\\nBBAAAABBAAB\\r\\nBBABBABBABB\\r\\nBAABABBABBA\\r\\nBABBBAAAABA\\r\\nABBAABBBBBA\\r\\nABBABBABABB\\r\\nAAABBBABBBB\\r\\nBAABAAABAAA\\r\\nAAAABBBBABA\\r\\nAAABAAABBBB\\r\\nBAAAAABABAB\\r\\nABBBBABABBB\\r\\n', 'output': ['7\\r\\n1 11\\r\\n']}, {'input': '12 13\\r\\nBBABABAAAAABA\\r\\nABAAAAAAAABBA\\r\\nABBBABAAAAABA\\r\\nBBBAABABBABBB\\r\\nABABAAABABABB\\r\\nABBAABAABBAAA\\r\\nAABABBAAABBAB\\r\\nABBBBBABBAABA\\r\\nBBBBBABBABBAA\\r\\nAAAAAAABBBAAB\\r\\nBAABBBAABAAAA\\r\\nBBBBBBABABABA\\r\\n', 'output': ['7\\r\\n12 1\\r\\n']}, {'input': '14 12\\r\\nBBAAABBBAAAB\\r\\nBBABAAAAABAA\\r\\nAABBABBBABBA\\r\\nBABAABAABBBB\\r\\nBBBABBBBABAA\\r\\nABBAABBAAABA\\r\\nABAAAAABBBAB\\r\\nBBAABBABBBAA\\r\\nBAABABAAABAB\\r\\nAAABBBABBABA\\r\\nBABBBBAABBBA\\r\\nAAAAABABBAAB\\r\\nBABBBABBBBBA\\r\\nBAAAABAABAAA\\r\\n', 'output': ['14\\r\\n1 12\\r\\n']}, {'input': '14 10\\r\\nABBAAABBAA\\r\\nBBBBBABBAA\\r\\nBABABBABAB\\r\\nAAABABBAAB\\r\\nBBABABBBAB\\r\\nBBABBABABB\\r\\nAABBBBABAA\\r\\nABBBAAAABB\\r\\nABBABAABAA\\r\\nABABABABBA\\r\\nABAABBBAAB\\r\\nAAAAAAAAAA\\r\\nABABBAABAA\\r\\nBABAABABBB\\r\\n', 'output': ['10\\r\\n1 10\\r\\n']}, {'input': '16 15\\r\\nABBBBAAABABBABB\\r\\nABBBAAABBABBBBB\\r\\nBABABAABBBABABB\\r\\nAAABBBBBABBABBB\\r\\nBAABAABAABAABBA\\r\\nABBBBAAAAAAAABB\\r\\nBAABBBABABAAAAB\\r\\nAAAABBAABBAABAA\\r\\nABBABABAAABABBB\\r\\nAAABBBABAABABAA\\r\\nBAABABBAAABBAAA\\r\\nAAAAAAABABBBAAA\\r\\nBABBAABBABAAAAB\\r\\nABABAAABBBBBAAB\\r\\nBBABBAABABAABBB\\r\\nBAAAABBBABABBBA\\r\\n', 'output': ['12\\r\\n4 3\\r\\n']}, {'input': '16 16\\r\\nABBABBABBAABBBAB\\r\\nBABABBAABAABBAAA\\r\\nBAAABBAABAABBBAA\\r\\nAABAAAABAAAABBBA\\r\\nBAAAABAABBBABBAA\\r\\nAABBABABABAABBBA\\r\\nBABBBABAAAAABABB\\r\\nBABBBBBBBBABBBAB\\r\\nBAAAABBBABAABBBA\\r\\nBABBBABBAABABBAA\\r\\nBBBBBBAABBBABBBA\\r\\nBABAAAABAABAABBB\\r\\nAAAAABBAAABABAAA\\r\\nBABBABABABAAABAB\\r\\nBAAAAAAAABBABAAA\\r\\nBAAAAABABBBBAAAA\\r\\n', 'output': ['15\\r\\n1 16\\r\\n']}, {'input': '18 18\\r\\nBBBBBBBABABBBABABA\\r\\nBAAABAAABBBABABBBB\\r\\nBABBAAABAAABAAABAA\\r\\nAABBABBBABBBBBAAAB\\r\\nBBBAAAAABBABBAAAAA\\r\\nAABBAABABABBBABABA\\r\\nBAABBAAAABABAABABB\\r\\nBABBABBBAAAABAABBA\\r\\nBBBBAABAAABAAABBBA\\r\\nABABBAAABBBBBABABA\\r\\nABABAABBBBBABBBBBB\\r\\nABAAABBABBABAAAABA\\r\\nBABAAABABABBBABBBB\\r\\nBBBBABBBABBBBBBBBA\\r\\nBAAABAABABABBBBAAB\\r\\nBABBAABABBABAABBBB\\r\\nBAABABAAAABBABBAAA\\r\\nBAAABBBAABABBABBAB\\r\\n', 'output': ['23\\r\\n2 6\\r\\n']}, {'input': '17 17\\r\\nBBAABAABBBBBAABBB\\r\\nBBABABBBBABAAABBB\\r\\nAAAABAAAABABABBAA\\r\\nBBABAAABBABBAAABA\\r\\nAAABBBBBAABABBBAB\\r\\nAABBBBBABABABABBB\\r\\nBAABAAABAAABBAABB\\r\\nBBAAAAAABABABBAAB\\r\\nAAAAABAABBAAAABAA\\r\\nBABAABABABABABBBB\\r\\nBAABABBAAABBAAABB\\r\\nABBAAABBBBAAAABAB\\r\\nBBABAABAAAAAABBBB\\r\\nAAABBABBAAAAABBBB\\r\\nAABAABBAABBABAABB\\r\\nABABAAABBABAAABAB\\r\\nBBABABBBAAAAAAABA\\r\\n', 'output': ['3\\r\\n1 17\\r\\n']}, {'input': '20 20\\r\\nABBBAAABABAAAAABBABB\\r\\nBABABBAABAABBAAABABB\\r\\nBABBBAABAABBABBBBABA\\r\\nBAAABBAAABABBABBAAAA\\r\\nABBAABAABBBBAAABBBAA\\r\\nBAAAAAAAABABBAAAAABB\\r\\nAAAAAAABABBBBBAABAAB\\r\\nABBBBABAABBAAAAABAAA\\r\\nBAAAAABBABAAAAABAAAB\\r\\nABABAABABBBABBAABBAA\\r\\nBAAABBBAAAABBBBBABAA\\r\\nAAABBABABAABBABAABAB\\r\\nABBABABABABAAABABABA\\r\\nBAABAAAAABBAABBBAAAB\\r\\nABAAABBABAABBBABAABA\\r\\nBAABBBBBABBBABBBABAB\\r\\nBABBABABBBBBBBBABAAA\\r\\nABAAABAAABAAABABABAA\\r\\nBAABBBBAABBAAAAAABBA\\r\\nABAABBABAAABBABABAAA\\r\\n', 'output': ['23\\r\\n1 10\\r\\n']}, {'input': '1 1\\r\\nC\\r\\n', 'output': ['1\\r\\n1 1\\r\\n']}, {'input': '2 2\\r\\nCC\\r\\nBB\\r\\n', 'output': ['2\\r\\n1 2\\r\\n']}, {'input': '3 3\\r\\nACA\\r\\nCCA\\r\\nACB\\r\\n', 'output': ['3\\r\\n1 3\\r\\n']}, {'input': '4 4\\r\\nACAC\\r\\nCBCC\\r\\nABBC\\r\\nCCAC\\r\\n', 'output': ['5\\r\\n1 4\\r\\n']}, {'input': '5 5\\r\\nBBCAB\\r\\nBCBAC\\r\\nCAAAB\\r\\nACBBA\\r\\nCAACB\\r\\n', 'output': ['3\\r\\n1 5\\r\\n']}, {'input': '14 16\\r\\nCBCCCABCBBBAAACC\\r\\nAABAACBACBCBACCA\\r\\nABBBABAACCACCCCC\\r\\nBBACACACCCCBBBAC\\r\\nBBCAABACBAACBCAA\\r\\nAAACCACBBCABABCB\\r\\nABCBCAAAAACBABBA\\r\\nAAABBBCCBAACBBCA\\r\\nBBAACBABBBCCBAAC\\r\\nBAABCCBAAABAACAC\\r\\nABBBBCBAACACCBCB\\r\\nBCABACBBBCAACACC\\r\\nACCCCABCCCBBCAAC\\r\\nBCBBCCCBCBCCACAA\\r\\n', 'output': ['15\\r\\n7 1\\r\\n']}, {'input': '16 16\\r\\nACABBCCBAABCCCCB\\r\\nAABCACCAAACACABB\\r\\nBCCCAABBAACBACAA\\r\\nBCACAABBBCAAAABA\\r\\nACCBABCCACABBCCC\\r\\nCCAAACACACBCABCA\\r\\nBCAACBBBCACBBCAB\\r\\nBABBCBBBCCCBAACC\\r\\nBBBBBABACBABBCBA\\r\\nABAACBACCACBBABA\\r\\nABAACBACCBCBCCBB\\r\\nBCACCCAABCBBCBCB\\r\\nBBBCCCBCCBCBACCA\\r\\nAABCBBBBACCACCBB\\r\\nBCABCCCBCBBBCBCC\\r\\nACCCCCCBBBAABACC\\r\\n', 'output': ['17\\r\\n4 2\\r\\n']}, {'input': '17 17\\r\\nBCBAAABAABCCCAAAC\\r\\nBBAABCABBAACCACBB\\r\\nABCCBAABBCCABBBAB\\r\\nAACCBBACCAAACCACA\\r\\nABBACBAAAABBABCAA\\r\\nACBACCCABAABBCABB\\r\\nCBCCCBCACBABCAAAA\\r\\nAAABACACABABCCCBC\\r\\nCABABBABBBABBBCAB\\r\\nBCBCBAAACCCACACBA\\r\\nBBACABACAAABCCBBC\\r\\nABAABBABCCAABBCCA\\r\\nAABBACBCBCCBAACBB\\r\\nBBABCBBCCCBCACBCB\\r\\nBABCBBCCABCABBAAA\\r\\nAABAABBBBAACAABCC\\r\\nBACCCBBCCABBBACBB\\r\\n', 'output': ['3\\r\\n1 17\\r\\n']}, {'input': '19 19\\r\\nACCACBCABACABCACCAA\\r\\nBCACAAAACCACCCCBCCB\\r\\nCBACBBCBCBCABCABACA\\r\\nAACCAABBBCAAABACAAC\\r\\nACACCCBBBACACCAAABA\\r\\nAACAABCACCBCACCABBA\\r\\nAABBCCABACCACABACAA\\r\\nACBCCACBACCACABCABC\\r\\nAACAABCAACCBBAACBCA\\r\\nAAACACBAABCBACCAAAB\\r\\nAABACABBABCACAACBCA\\r\\nBABAAABCACBABACBBBC\\r\\nBAABCAAABCAABBCCAAC\\r\\nBCABCCBCCBCBABCBCCA\\r\\nBACACBACBCABBCBCABB\\r\\nABCACCBBBBCBBCABAAC\\r\\nBBBBCCBCBACAACBCBCA\\r\\nAAABBBBCACCACCAAACC\\r\\nCCCCCBAABAAAACCCBBA\\r\\n', 'output': ['3\\r\\n1 19\\r\\n']}, {'input': '20 18\\r\\nAABCAACCBBCBABBBBB\\r\\nBBCBAACCBCAACBBCCB\\r\\nACCBABABACBBACBBAB\\r\\nACBBBCBAAACAAAAABB\\r\\nBCBABABAACCCABBBCC\\r\\nBAAAAAACACABBCCCAC\\r\\nCBACCBCBACACAAACBC\\r\\nCBACAACBCBCAACACCA\\r\\nCCCBACCBACACCCBCCB\\r\\nCACABBBBBBCCBACCBA\\r\\nCCBCACABCBACABBCCB\\r\\nAACACCCCCABAABCACC\\r\\nCBBACCBBCBCBBCCAAB\\r\\nCABBABACCABACAABAB\\r\\nBBBABBCBCBACBCCABA\\r\\nBCCAACBCBCAAAABACA\\r\\nAAABACBBCCCACACBAC\\r\\nBABAAAACCBACBACAAA\\r\\nAABBABCBBBACAACBAB\\r\\nBBABBAABACBAABCCBB\\r\\n', 'output': ['27\\r\\n4 2\\r\\n']}, {'input': '1 1\\r\\nZ\\r\\n', 'output': ['1\\r\\n1 1\\r\\n']}, {'input': '2 2\\r\\nML\\r\\nWQ\\r\\n', 'output': ['4\\r\\n1 1\\r\\n']}, {'input': '3 3\\r\\nBXP\\r\\nUJF\\r\\nAQT\\r\\n', 'output': ['4\\r\\n1 1\\r\\n']}, {'input': '4 3\\r\\nOKJ\\r\\nXTV\\r\\nDVW\\r\\nHMK\\r\\n', 'output': ['5\\r\\n2 1\\r\\n']}, {'input': '5 5\\r\\nDZEZF\\r\\nOHZZC\\r\\nCNDOX\\r\\nNVYDP\\r\\nUCIAX\\r\\n', 'output': ['3\\r\\n1 5\\r\\n']}, {'input': '6 6\\r\\nQLXBOE\\r\\nKEEYTR\\r\\nZLPMSP\\r\\nWOKAHN\\r\\nLYXBXU\\r\\nSZOEZV\\r\\n', 'output': ['14\\r\\n2 1\\r\\n']}, {'input': '6 7\\r\\nGYSGYUL\\r\\nKGTJUVI\\r\\nFNRHOND\\r\\nZGZAFYZ\\r\\nQVCRZCA\\r\\nJCCXKGV\\r\\n', 'output': ['7\\r\\n2 1\\r\\n']}, {'input': '8 8\\r\\nTNMIIMOP\\r\\nJOAXSHVN\\r\\nQYHMVXGM\\r\\nQOXAIUMI\\r\\nLAAXNKCH\\r\\nORWESZUV\\r\\nPMIXHLEA\\r\\nAENPGVYK\\r\\n', 'output': ['13\\r\\n1 4\\r\\n']}, {'input': '9 9\\r\\nIZHKRCRTM\\r\\nLQBOENMNQ\\r\\nYLNVFBFUY\\r\\nACTTYWABL\\r\\nYSEGWNQHC\\r\\nTZASWPPAG\\r\\nLLZTKFPMV\\r\\nGXBETPPPN\\r\\nUCPEFNJKN\\r\\n', 'output': ['8\\r\\n1 3\\r\\n']}, {'input': '9 10\\r\\nXHPCDAAFPZ\\r\\nJRZCDTQBYP\\r\\nZBTAMDPIFY\\r\\nXBKTMXNIWM\\r\\nDAIONPEBYF\\r\\nAFHBCBDTKB\\r\\nKRVEBSUXRM\\r\\nWGMEZTWDBX\\r\\nNOJUCDZPZY\\r\\n', 'output': ['10\\r\\n3 1\\r\\n']}, {'input': '12 13\\r\\nTHSGJEPTDFEIJ\\r\\nOWPJGXSXJRYGD\\r\\nVYENWXFWSOSMX\\r\\nFZDFXFPWEIYYV\\r\\nOEODFOGQWJEEU\\r\\nSQRNSBTAMLQRU\\r\\nLXGZERSWTJWQK\\r\\nLGRJJMDTZVZWJ\\r\\nDWVBTSZKFUAHT\\r\\nHSSZHXAWVWMHB\\r\\nJZOCNFUHTHQYV\\r\\nTUHDMTZAQVWDL\\r\\n', 'output': ['10\\r\\n3 1\\r\\n']}, {'input': '14 13\\r\\nBGBALYLHQYMFM\\r\\nRLFOZFDFMRFEN\\r\\nGDWROOMXUVBOW\\r\\nDPXWRDPCEFMRQ\\r\\nJOSEGKGMHGHFC\\r\\nJHXUBTPOZOYGJ\\r\\nFHUUMHWSQRNEP\\r\\nVGWYMTMWHWGIL\\r\\nVMWDTBDJGEVZI\\r\\nLEJSIHTQKYDXY\\r\\nOLUOIWECMZVAI\\r\\nVDXSGRPMCCJEM\\r\\nMYWMDDAQAPBSG\\r\\nXQWPFRAPVEOYO\\r\\n', 'output': ['6\\r\\n7 1\\r\\n']}, {'input': '14 15\\r\\nJFLSOQHVDRTCPWZ\\r\\nWSROLOOQOCWPJNX\\r\\nEEUZVBLQXBFQKNA\\r\\nQIGZDIMDXVCHJFJ\\r\\nUDJGIZWDBMMMBJR\\r\\nEWXAQHPRYBQOYDT\\r\\nUDEAPOBVZOXNVMK\\r\\nAYEVKFIKNRUVRQC\\r\\nNLTLJBXWMUQXAZD\\r\\nKOXESBBUYLMIDOI\\r\\nZOJWEOJFCYTILHE\\r\\nRQDNTBZZXPKNCEN\\r\\nSYGFASAQUSMYYRP\\r\\nUOYCFYUDACJDTAD\\r\\n', 'output': ['13\\r\\n1 5\\r\\n']}, {'input': '16 15\\r\\nPFUMRKDISIBBVYP\\r\\nMZKXWWSQXADAPEB\\r\\nVTBYXGWQYZTHBHY\\r\\nONGURZKWHZDKIDF\\r\\nGCMHQQNJJXHHPVU\\r\\nNLMUXXKZOFNMFTG\\r\\nANDDDPHEDVWVHLC\\r\\nOYGXUHIMYPNIXCT\\r\\nILCGDQZNCSTIILX\\r\\nZVSYMJBHAUEXZMY\\r\\nMYOKFPJKKJLKVWI\\r\\nUEMUOOAJSNTOLEN\\r\\nLKIROZUNWRZBMZP\\r\\nYYWCXLGHLZQVPOB\\r\\nFMHPKABCBAAYCFA\\r\\nNRGFEWPLKNORSZR\\r\\n', 'output': ['18\\r\\n1 3\\r\\n']}, {'input': '14 17\\r\\nXGFETCAWEBHYYDECE\\r\\nCGFEUQEYMLSVHNKJA\\r\\nZMGSXZJASBUPTHRFQ\\r\\nGQREDKHDBTZPGWHEO\\r\\nQGACDHZVBAOGLHHEL\\r\\nLKLKVFVDHSRQNEDXC\\r\\nVNREYHZDJHPJKHXDO\\r\\nKBOMZYHZEUOYUOXSQ\\r\\nFNQGOBVDBTMUJPAKU\\r\\nXFPGQQXBPELKWSXCJ\\r\\nABUKLBPTFOGUJFDEQ\\r\\nKXPJEZJQCHTENYSKY\\r\\nXXOKEXESEVLQMFDZG\\r\\nVPGUBSJLGBWZWAMFZ\\r\\n', 'output': ['6\\r\\n7 1\\r\\n']}, {'input': '16 17\\r\\nFFOYWWWJRUPVBGSSJ\\r\\nVPOMWQMWUWYMMDAPB\\r\\nARQUYXZTHVSQZHMVJ\\r\\nCJAGELECYEXSHEYTU\\r\\nXRSZPRCBQPJQACNWR\\r\\nJISALKDCKJUWWHMYH\\r\\nGMISALZMLGRRGALJA\\r\\nCWPYTQYBXKLBGWKNF\\r\\nMJJYWBIHJLARHFNWB\\r\\nKEREXXISTPANXGGJG\\r\\nLECEJLPAFOZHLRTJM\\r\\nHBOWFNSQFRRGEJFMJ\\r\\nVEGIRVEXACMJVKFYN\\r\\nSCGOPQKUHEDNIPIRE\\r\\nLENRPPYJBEVDTOPOY\\r\\nFHJOESUHLIJRFPVBK\\r\\n', 'output': ['8\\r\\n4 1\\r\\n']}, {'input': '18 19\\r\\nLEXQWPUXGOWSELHIQPY\\r\\nZUYPTUDHEEQVRWBCXBU\\r\\nZUPMYQQQFHGKZZDMLFM\\r\\nCASSUVIKQKCEALUDDFK\\r\\nFDBZOXULVGFARYPNAQY\\r\\nWEFLTZOSOAGAMBWNGVC\\r\\nEVAPNTSSIMKNBOAHFSC\\r\\nUHTWEBRCEUJSARNEWYI\\r\\nGXGSDCDUIWYQRZUPQBZ\\r\\nFMYJUOHENURMDINJGCN\\r\\nHIBATJCOGWWRQWTLXDH\\r\\nRDDXJNZHQGUWPNGIDRO\\r\\nAJGHDUCGGLPYYDYSFRS\\r\\nAZGBVLJYYZWSQGBFJVU\\r\\nQJJRSHZFOECHGRGALML\\r\\nJKDMLPREFTISSSAJKJN\\r\\nGRHGVYSVQLYKCIMBIKA\\r\\nMSHRBZJJLDHBCAWAJBN\\r\\n', 'output': ['10\\r\\n3 1\\r\\n']}, {'input': '20 18\\r\\nNLBILWYVJJLCACSMUA\\r\\nAAMAWVGEZDTWUUZNMM\\r\\nWWNOTPPFXJSWWSPPRB\\r\\nYUJXZSHHNFGKXIXEJN\\r\\nLTKNJOJALEQURSYVBI\\r\\nSVXHFTUYWTLBXWFDXD\\r\\nLQUEBPXELRNAXFIKFT\\r\\nZGZEPWGVLVNMQVRMJM\\r\\nWTMIPWRNQCWKZACSKQ\\r\\nYGUREEGHTVMICOCUHE\\r\\nUNIJGNPINIFWCIHGIQ\\r\\nIRGJEHFRUJOHIXRSLF\\r\\nDQVCPHUSKYEHFGWBPS\\r\\nJIIGNJKTRAAPRBOGMQ\\r\\nHFNGDLVBUVECUMQDMT\\r\\nGEGCSOPRXQAEMDQAYO\\r\\nOHSBTADOWBVKZINKXC\\r\\nIIPWCAZSNDFVBMTGMI\\r\\nOZZTLUOFRYDNTPIAVA\\r\\nTFBGPAMJPIWLEZOKXB\\r\\n', 'output': ['33\\r\\n1 3\\r\\n']}, {'input': '2 4\\r\\nABAA\\r\\nABBB\\r\\n', 'output': ['2\\r\\n1 4\\r\\n']}, {'input': '6 6\\r\\nCCABCA\\r\\nBCBCBC\\r\\nBAAAAA\\r\\nCBBCAA\\r\\nACBBCA\\r\\nCCAABA\\r\\n', 'output': ['10\\r\\n1 6\\r\\n']}, {'input': '16 4\\r\\nBAAC\\r\\nBACA\\r\\nACBC\\r\\nABCC\\r\\nCCAC\\r\\nBBCC\\r\\nCCAB\\r\\nABCC\\r\\nCBCA\\r\\nBCBC\\r\\nBCBC\\r\\nCBBB\\r\\nBBAA\\r\\nBACA\\r\\nABCB\\r\\nAABA\\r\\n', 'output': ['9\\r\\n2 4\\r\\n']}, {'input': '2 14\\r\\nAABACBACBCBBCB\\r\\nBACCBBBCBAABBC\\r\\n', 'output': ['4\\r\\n1 7\\r\\n']}, {'input': '4 8\\r\\nCACABCCA\\r\\nABCBAACA\\r\\nACABBBCC\\r\\nAACCBCBB\\r\\n', 'output': ['8\\r\\n1 4\\r\\n']}, {'input': '12 18\\r\\nCBBCAACABACCACABBC\\r\\nABCAACABAABCBCBCCC\\r\\nBCAACCCBBBABBACBBA\\r\\nACCBCBBBAABACCACCC\\r\\nCAABCCCACACCBACACC\\r\\nBBBCBCACCABCCBCBBB\\r\\nBAABBCACAAAAACCBCB\\r\\nBAABAABACBCABACBCA\\r\\nAABCBCCBCCABACCCAC\\r\\nCCBBBAACCCBCACCCBB\\r\\nCBABACBBBABCBACCCB\\r\\nAABACCCBCCACBCACCB\\r\\n', 'output': ['24\\r\\n4 2\\r\\n']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\n/**\n * This class prints \"Hello World\"\n * to the console/stdout.\n */\npublic class HelloWorld {\n    public static void main(String[] args) throws IOException {\n        //System.out.println(\"Hello World\");\n        MyFile file = new MyFile();\n        file.open(\"F:\\\\Hoge\\\\test.txt\");\n        //file.printline(\"hoge\");\n        String a[][] = new String [10][10];\n        int x = file.nextInt();\n        int y = file.nextInt();\n        int check[][] = new int [x][y];\n        for(int i = 0 ; i < x ; i++ )\n        {\n            for(int j = 0 ; j < y ; j++ )\n            {\n                a[i][j] = file.next();\n            }\n        }\n        for(int i = 0 ; i < x ; i++ )\n        {\n            for(int j = 0 ; j < y ; j++ )\n            {\n                check[i][j] = 0;\n            }\n        }\n        int ok = 0, mini = x;\n        for(int i = 0 ; i < x-1 ; i++ )\n        {\n            for(int j = 0 ; j < y-1 ; j++ )\n            {\n                if( a[i][j].equals(a[i+1][j]) ) check[i][j] = 1;\n                else if( a[i][j+1].equals(a[i+1][j+1]) ) check[i][j] = 2;\n                else if( a[i][j].equals(a[i][j+1]) ) check[i][j] = 3;\n                else if( a[i+1][j].equals(a[i+1][j+1]) ) check[i][j] = 4;\n            }\n        }\n        for(int i = 0 ; i < x ; i++ )\n        {\n            for(int j = 0 ; j < y ; j++ )\n            {\n                if( check[i][j] == 0 ) ok++;\n            }\n        }\n        System.out.println(ok + 1);\n        for(int i = 0 ; i < x ; i++ )\n        {\n            for(int j = 0 ; j < y ; j++ )\n            {\n                if( check[i][j] == 0 )\n                {\n                    for(int l = 1 ; l <= y-1 ; l++ )\n                    {\n                        for(int k = 1 ; k <= x-1 ; k++ )\n                        {\n                            if( a[i][j].equals(a[i+k][j+l]) ) check[i][j] = 10;\n                        }\n                    }\n                }\n            }\n        }\n        for(int i = 0 ; i < x ; i++ )\n        {\n            for(int j = 0 ; j < y ; j++ )\n            {\n                if( check[i][j] == 0 && x%i==0 && y%j==0 && mini > (i*j) )\n                {\n                    mini = i*j;\n                }\n            }\n        }\n        System.out.println((x/mini) + \" \" + (y/mini));\n    }\n}\nclass MyFile\n{\n    private BufferedReader reader;\n    private StringTokenizer tokenizer;\n\n    public MyFile() throws IOException\n    {\n        reader = new BufferedReader(new InputStreamReader(System.in));\n    }\n    public MyFile(String fileName) throws IOException\n    {\n        reader = new BufferedReader(new FileReader(fileName));\n    }\n\n    public void open(String fileName) throws IOException\n    {\n        reader = new BufferedReader(new FileReader(fileName));\n    }\n\n    public void close() throws IOException\n    {\n        reader.close();\n    }\n\n    public String nextLine() throws IOException\n    {\n        return reader.readLine();\n    }\n\n    public void printline(String str) throws IOException\n    {\n        reader.write(str+\"\\n\");\n    }\n\n    public int nextInt() throws IOException\n   "}
{"src_uid": "73291724a4609ddd4cc8a92c77e8496f", "id": 113, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2600, "testcases": "[{'input': '3 3\\r\\nWBW\\r\\nBWB\\r\\nWBW\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 3\\r\\nBBB\\r\\nBWB\\r\\n', 'output': ['1\\r\\n']}, {'input': '9 29\\r\\nBWBBBBBBBBBWBWWBBBWBWBBBWWBWW\\r\\nWBWBBWBBWBWWBWBBBWBWWWBWBBBBB\\r\\nBWBBBBWWBBBWBWBBWWBBWBBBBBBBB\\r\\nBBBWWBBWWBBBWBWBBBWWWWWWBBBBW\\r\\nBBWWWWBBBBBBBBBWBBBBBBBBBBWBW\\r\\nBBBWWBBBBWBBBWWBBBWBBBBWBBWBW\\r\\nBBBBBWBWBBBWWBBWBBBBBBBBBBBBW\\r\\nWWBBBWWBWBWBBBBWBBBBWWWBBBBBB\\r\\nBWWBWBBBBBWBBWBBBBBBBWBWBBBWW\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 5\\r\\nBBBBB\\r\\nBWWBB\\r\\nWWBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '17 22\\r\\nBBWBBWWWBBWWWBBBBBBWWW\\r\\nWWBWBWWBBWBBBWWBBBBBWW\\r\\nBBBWBWBBWBWBWBWWBWWBBB\\r\\nBWBBBBWBBBWBWBBBBBWBWW\\r\\nBBWWWWWBBBBBWBWBBBBBBB\\r\\nBBBWBBWWWWBBWWBWBWWBBW\\r\\nBBBWWWWWWWBWWWBBBWWWWW\\r\\nBBBBWBBBWBWBBWBBBWWWBB\\r\\nBWWWWBBBWWWBBBBBBWBWWW\\r\\nBBBBWBWBWBWBBBWWBWBBBB\\r\\nBBWBWWBWWWBWBWWBWBBBBW\\r\\nWWBWWBBBBWBWBWBWWBBBBB\\r\\nWWWWBWBBBWBBBWWBBWWBBW\\r\\nBBBBBWWBBBBWWWWBWBBBWW\\r\\nBBBBBWBBWBWBBWBWWBBBBW\\r\\nWWBBBWBWBBWWWBBBWWBBBW\\r\\nWWBWBBBBWBBBWBBBWBBBBB\\r\\n', 'output': ['4\\r\\n']}, {'input': '23 12\\r\\nBWWWBBWWWWWW\\r\\nWWWWBWWWBWWW\\r\\nBWBWWWWBBWWB\\r\\nWBWWWWBWWBWW\\r\\nBWWWWWWWWWWW\\r\\nWWWWWWBWWWWW\\r\\nWWWWWBWBWWBB\\r\\nWBBWWWWWWWWW\\r\\nWWBWBBWWWBBW\\r\\nWWWWWWWWWWWW\\r\\nWWWWWWWWWWWW\\r\\nWWWWWWBWWWWW\\r\\nBWWWWBBWBWWB\\r\\nBWBWWWWWWBWW\\r\\nWWWWWWWBWWWW\\r\\nWWBBWWWBWWBW\\r\\nBBWBWBWWWWWW\\r\\nWWBWBBWWWBBW\\r\\nWBWWWWWBWWBW\\r\\nWWWWBBBWWWWW\\r\\nWWWWBWWBBWWW\\r\\nWWWBBWWWWWWW\\r\\nWWWBWWBWWWBW\\r\\n', 'output': ['2\\r\\n']}, {'input': '41 6\\r\\nWBBBWB\\r\\nWWBWBW\\r\\nBBBBWB\\r\\nBBWBBB\\r\\nBBBWWW\\r\\nBBBWBB\\r\\nBBWBBB\\r\\nBBWWBB\\r\\nWBBBBB\\r\\nWBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nWBBBBB\\r\\nBBBBBW\\r\\nBWBWBW\\r\\nBBBBBB\\r\\nWWWBWW\\r\\nBBBBBB\\r\\nWBBBWB\\r\\nBBBWBB\\r\\nBBWBBB\\r\\nBWBWBB\\r\\nBWBBBB\\r\\nWBWBBB\\r\\nBBWWBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBWB\\r\\nBBBBBB\\r\\nBBBBBW\\r\\nBWBWBW\\r\\nBBBBWB\\r\\nWBBWBB\\r\\nWBWBBW\\r\\nBBWBWW\\r\\nBBBWWB\\r\\nBBWWBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '2 7\\r\\nBBBBBBB\\r\\nBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '7 28\\r\\nWWWWWWWWWBBWWWBBWBWWBWWBWWWW\\r\\nWWBBBWWWWWWWBWBBBWWWWBBWBWBW\\r\\nBWWWBBWWBWBWWBWWWWWWBBWWWWWW\\r\\nWBWWWWWWWBBBBWBBWWWWWWWBWWBB\\r\\nWWWBWBWWWWWBBWBWWWWBWWBWWBWW\\r\\nWWBWWWBWWWBWWBBWBWWWWWWBWWWB\\r\\nBWWWWBWWWWWWWWWBWBWWBWWWWWWW\\r\\n', 'output': ['3\\r\\n']}, {'input': '25 6\\r\\nWWWWWB\\r\\nWWBBWW\\r\\nBWBWWB\\r\\nBBWWWW\\r\\nBWWWWW\\r\\nWWWWWW\\r\\nWWWWWW\\r\\nWWWBWW\\r\\nWBWWWW\\r\\nWWWWWW\\r\\nWWBWWW\\r\\nWWWWWW\\r\\nWWBWWW\\r\\nWWWWWW\\r\\nWWWBWW\\r\\nWWWBWW\\r\\nWWWBWB\\r\\nWWWWWW\\r\\nWWWWWW\\r\\nWBWWWB\\r\\nBWWWWW\\r\\nBWBWWB\\r\\nWBWWWB\\r\\nWWWBWB\\r\\nWWWWBW\\r\\n', 'output': ['2\\r\\n']}, {'input': '42 1\\r\\nW\\r\\nW\\r\\nW\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\n', 'output': ['11\\r\\n']}, {'input': '42 8\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBWBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBWB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBWBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBWBBB\\r\\nBBBBBBBB\\r\\nBBWBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nWBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBWW\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBWBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 38\\r\\nWWWWWBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWW\\r\\nWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW\\r\\nWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW\\r\\nWWBWWWWWWWWWWWWWWBWWWWWWWWWWWWWWWWWWWW\\r\\n', 'output': ['2\\r\\n']}, {'input': '9 10\\r\\nWWWWWWBWWW\\r\\nWWWBWWWWWW\\r\\nWBWWWWBWWW\\r\\nWBWBWWWWWW\\r\\nWBWWWWWWWW\\r\\nWWWWWWWWWW\\r\\nWWWWWWWWWB\\r\\nWWWWWWWWBB\\r\\nWWBBWWBWWW\\r\\n', 'output': ['2\\r\\n']}, {'input': '7 47\\r\\nWBWBWWWWBBBBBBWWWWBBBWBWBWBWBBWWWWBBBBWWWWBBWWB\\r\\nWBBBWBWWBBWBWWBWWBWBBBBWWBWBWWBBBBBBBBBWBWBBBBW\\r\\nBBBBWBWBWWBBWWBBBBBWWBBBWWBWBWWWBWWWWBWBBWWBBBW\\r\\nBWBBBBWBBWWWWBWBBWBWBBBBBBWWWWWBBBBBBWWBBBWWBWB\\r\\nBWBBBBBBBBBWBBBBWBWWBWWBBWBBWBBBBBBBWBBBWBBBBWB\\r\\nBBWBBWWWBBWBBBBBWWBBBWWBWBBBWBBBBWWWWBWWBBBWBWB\\r\\nBBBWBBBBWWBWBBWBWBWWBBBBBBBWBBBBBWWBWBBBBBWBWBW\\r\\n', 'output': ['6\\r\\n']}, {'input': '42 1\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\n', 'output': ['10\\r\\n']}, {'input': '25 10\\r\\nWWWWBBBWWW\\r\\nBBBWWBWWBB\\r\\nWBWWBWWWWB\\r\\nBWBWWWBBWB\\r\\nWBWWBWWWBW\\r\\nWBWWBWBBWW\\r\\nWWWWBBWBWW\\r\\nBWBWWWWBBB\\r\\nBBBWWBWWWW\\r\\nBWWWBWBBBW\\r\\nBBWBBBWBBB\\r\\nWBBWWBWWBW\\r\\nBBBBWWWWBW\\r\\nWWWWWWWWWB\\r\\nBWBBWBWBBB\\r\\nBBWWWBBWWW\\r\\nWBWWBWWWWW\\r\\nBWWBBWWWWB\\r\\nWWWWBBBWWW\\r\\nWBBWWWWWWB\\r\\nWBBWWWBBWB\\r\\nWBWWWBBWBW\\r\\nWWBWWWWWBW\\r\\nBWWBWWWBBW\\r\\nBWWWBBBBBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '4 35\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '39 1\\r\\nB\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\n', 'output': ['10\\r\\n']}, {'input': '18 11\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBWBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBWBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBWBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '7 20\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBWB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '45 9\\r\\nBBWBWBBBW\\r\\nWBBBBWBWB\\r\\nBWWBBWWWW\\r\\nBBBBWWBBB\\r\\nWBBBBWWWB\\r\\nWWBWWBBBW\\r\\nBBWBBWBBB\\r\\nWBBBBWBWW\\r\\nBBBWBWBWW\\r\\nBWBWBBWWB\\r\\nBWBWBBWBW\\r\\nBWBBBWBWB\\r\\nBBWBBWWBB\\r\\nWBBBBWBBB\\r\\nWWBWBBBWB\\r\\nBWWBWWBBB\\r\\nBBWBWBWWB\\r\\nWBWWWWBBW\\r\\nBBBWBWBBB\\r\\nWBWWWBBBB\\r\\nBBBWWBWBB\\r\\nWWBBBBBWB\\r\\nBWBBBWWBB\\r\\nBBBWWBWWW\\r\\nBBWBBBBBW\\r\\nWBBWWWBBW\\r\\nBWBWBWWBB\\r\\nBBWBWBBWB\\r\\nBWWBBBBBB\\r\\nBBBBBBBWB\\r\\nBBBBBWWBB\\r\\nWWWBBBBBB\\r\\nWWWBBBBBW\\r\\nWWBBBBBWW\\r\\nWBWBWBWBB\\r\\nBBBBBBBWB\\r\\nBBWBBWBBB\\r\\nBBBWBBBWW\\r\\nWBWWWWWBW\\r\\nBBBBBBWBB\\r\\nBBWBBBWBW\\r\\nBWBBBBWWW\\r\\nBWWBWBBBB\\r\\nBWBBBBBBB\\r\\nBWBWBBBWW\\r\\n', 'output': ['6\\r\\n']}, {'input': '19 9\\r\\nWWWWBWWBW\\r\\nWBWBWBBWB\\r\\nWWBBWWWBB\\r\\nWWBWWWBWW\\r\\nBWBWBWWWW\\r\\nBBBBWBWWB\\r\\nWWWBBBWBW\\r\\nBWWWBWWWB\\r\\nBBBBWWBWW\\r\\nWWWBBBBBB\\r\\nWBWBWBWWW\\r\\nWBBWWWWBB\\r\\nWWBBWBWWB\\r\\nBBWBBBBWB\\r\\nWBWBBWWWB\\r\\nBWBWWBWBW\\r\\nWWBBBWWBW\\r\\nWBBWBWBWB\\r\\nBBWBBWBBB\\r\\n', 'output': ['5\\r\\n']}, {'input': '2 23\\r\\nBBBBWBBBBBBBBBBBWBBBBBW\\r\\nWBBBBWBWBBBBBBWBWBBBWBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '11 1\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 39\\r\\nBBBBBBWWBBWBBBBBBBBBBBBBBWBBBBBBBBBBBBB\\r\\nBBBBBWBBBBBBBBBBWBWWBBWBBBBBBBBBBWBBBBB\\r\\n', 'output': ['2\\r\\n']}, {'input': '36 3\\r\\nBBB\\r\\nBBB\\r\\nWWB\\r\\nBBB\\r\\nBBB\\r\\nBWW\\r\\nWBB\\r\\nBBW\\r\\nWBW\\r\\nBBB\\r\\nBBB\\r\\nBBW\\r\\nBWW\\r\\nWBB\\r\\nBWB\\r\\nWWB\\r\\nBBW\\r\\nWBB\\r\\nBBW\\r\\nWBB\\r\\nBBB\\r\\nWWB\\r\\nWBW\\r\\nBBB\\r\\nBWW\\r\\nBBW\\r\\nWBB\\r\\nWBW\\r\\nWWW\\r\\nBWW\\r\\nBWB\\r\\nWBW\\r\\nBWB\\r\\nBBB\\r\\nBBB\\r\\nWBB\\r\\n', 'output': ['7\\r\\n']}, {'input': '5 20\\r\\nWWBBBBWWWWWBWBWBWWBW\\r\\nWBWWWWWWWWWBWWBWWWBW\\r\\nWBWWBWWBWWWWWBBWWWBW\\r\\nWBWBWWWWWBBWWWWBWWWW\\r\\nWBBWBWWBBWBWBWBBWWWW\\r\\n', 'output': ['3\\r\\n']}, {'input': '19 11\\r\\nWWWBWWBBBBB\\r\\nBWBWBWBWWBW\\r\\nWBBWBBBWWBB\\r\\nWWBBBWBBWWW\\r\\nWWWBBWBWBWW\\r\\nBBWBWBWBBBB\\r\\nBWWBWWWBWBB\\r\\nBWBWWBBWBBW\\r\\nBWBWBWWBWWW\\r\\nWWBWBWWWBWB\\r\\nBBBWWWBWWWW\\r\\nBWBWWWWWBBB\\r\\nBWWWBBBWWBB\\r\\nWWWBWBWWBWB\\r\\nWWWWBWWBWWB\\r\\nBWWWBWBWBBB\\r\\nBBWWWWWWWBW\\r\\nWBWWWBWBBWW\\r\\nWBWWWWBWBWB\\r\\n', 'output': ['4\\r\\n']}, {'input': '6 33\\r\\nWBBWWWWWWWWWBBBWWWWWWWWWWWWWWWBWW\\r\\nWBWWBBWBBWWBWWWWWBBBBBBBWWWBWBWBW\\r\\nWBBBBBBWBBWBWWBBWBBBWBWWBBBWWWWWW\\r\\nWWBWBWBBWBWWBWBWBWBBWWWBWWWWWWWWW\\r\\nWWBWWWWBWBBBBWWWWWWWWWBBWWWBWBWWW\\r\\nBWBWWBBBWBWWBWBBBBWBWBBBWWWWBBWWW\\r\\n', 'output': ['4\\r\\n']}, {'input': '22 17\\r\\nBBBBBWBBWWBBBWBBB\\r\\nBBBBBBBBBBBBWBBBB\\r\\nWBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBB\\r\\nBBBBWBWBBBBWBBBBW\\r\\nBBBBBWBBWBBBWWBBB\\r\\nBBBWBWBBBBBBBBBBB\\r\\nBBBWBBBBBBBBBBBBB\\r\\nBWBBWWBBBBBBBBBBB\\r\\nBWBBWBBWBBBBBBBBW\\r\\nBBBBBBWWWBWBBBWWW\\r\\nBWBBWBBBBBBWBBWBB\\r\\nBWWBBBBBBBBBBBBBB\\r\\nBBBBBBBBWBWBWBBBB\\r\\nBBBBBBBBWBBBBBBBB\\r\\nBBBBBBBBBBBBBBWBB\\r\\nBBBWWBBBBBBWWBBBB\\r\\nBBBBBBBWBBBBBBBBB\\r\\nBBBWBBBBBBWBBBBBB\\r\\nWBWBWBBBBBBBWBBBB\\r\\nBBBBBWBBBBBBBBBBB\\r\\nBBBWBBBBBBBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '36 6\\r\\nBWWWBW\\r\\nBBBBWB\\r\\nBWWBBB\\r\\nBWBWBB\\r\\nBBBBBB\\r\\nBWWBBW\\r\\nBWBWBW\\r\\nWBBBBB\\r\\nWBBBBB\\r\\nBBWBBB\\r\\nBWBBWB\\r\\nBBWWWB\\r\\nWBBBBB\\r\\nBWBWBB\\r\\nBBBBBW\\r\\nBWWWWB\\r\\nBBBBWB\\r\\nBBBBBB\\r\\nBWBBBB\\r\\nWBWBWB\\r\\nBBBBWW\\r\\nBWBBWB\\r\\nWBBBBW\\r\\nBBBWWW\\r\\nWBBBBB\\r\\nBBBBBW\\r\\nBBBBBW\\r\\nBBBBWW\\r\\nBBBWBW\\r\\nBWBBBB\\r\\nBWBBBW\\r\\nWWBBBW\\r\\nWBWBWB\\r\\nBBBWBW\\r\\nBBWBBB\\r\\nBBBBBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '24 1\\r\\nW\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\n', 'output': ['3\\r\\n']}, {'input': '7 7\\r\\nBBBBBBB\\r\\nBWWWWWB\\r\\nBWBBBWB\\r\\nBWBWBWB\\r\\nBWBBBWB\\r\\nBWWWWWB\\r\\nBBBBBBB\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 4\\r\\nBWWW\\r\\nWBWB\\r\\nBWBW\\r\\nWBWB\\r\\n', 'output': ['3\\r\\n']}, {'input': '5 5\\r\\nWBWWW\\r\\nBWBWW\\r\\nWBWWB\\r\\nWWBBW\\r\\nWWBWB\\r\\n', 'output': ['3\\r\\n']}, {'input': '10 10\\r\\nBBWWBBBBBW\\r\\nBWWWWBWBWB\\r\\nWBWBWBBBBW\\r\\nWWBBWBBBBW\\r\\nBBBBBBBBBW\\r\\nBBBWWBBWWB\\r\\nWBBWBWWWWB\\r\\nWWWBBBBBWW\\r\\nWBBBBBWBBB\\r\\nWBWWBWWBBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '7 7\\r\\nWBWBBBW\\r\\nBBBWBBW\\r\\nWWWWBWB\\r\\nBBWWBBW\\r\\nWWBWBWW\\r\\nBWWBBWW\\r\\nWWBWBWW\\r\\n', 'output': ['3\\r\\n']}, {'input': '6 6\\r\\nWWWWBB\\r\\nWBWBWW\\r\\nBBBWBW\\r\\nBWWWWB\\r\\nWBBBBW\\r\\nBBWWWB\\r\\n', 'output': ['3\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Sol{\n    public static void main(String[] args){\n      Scanner sc = new Scanner(System.in);\n      int n = sc.nextInt(), m = sc.nextInt(), count = 0, min = 6;\n      int[][] matrix = new int[n][m], side_visit = new int [n][m], \n      row_visit = new int [n], col_visit = new int [m];\n      boolean flag = false;\n\n      for(int i = 0; i < n; i++){\n          String str = sc.next();\n          for(int j = 0; j < m; j++){\n              matrix[i][j] = str.charAt(j) - 87; \n          }\n      }\n\n      for(int i = 0; i < n; i++){\n          for(int j = 0; j < m; j++){\n              if(matrix[i][j]!= matrix[i][j + 1]){\n                  matrix[i][j]++;\n                  matrix[i][j + 1] += 2;\n              }\n              if(j!= m - 1 && matrix[i][j]!= matrix[i][j + 2]){\n                  matrix[i][j]++;\n                  matrix[i][j + 2] += 2;\n              }\n          }\n      }\n\n      for(int j = 0; j < m; j++){\n          if(matrix[0][j]!= matrix[1][j]){\n              matrix[0][j]++;\n              matrix[1][j] += 2;\n          }\n      }\n\n      for(int i = 0; i < n; i++){\n          for(int j = 0; j < m; j++){\n              if(matrix[i][j] == 0 || matrix[i][j] == 2){\n                  count++;\n                  continue;\n              }\n              if(i!= n - 1 && matrix[i][j] == matrix[i + 1][j]){\n                  matrix[i][j]++;\n                  matrix[i + 1][j] += 2;\n              }\n              if(j!= 0 && matrix[i][j] == matrix[i][j - 1]){\n                  matrix[i][j]++;\n                  matrix[i][j - 1] += 2;\n              }\n              side_visit[i][j] = count + 1;\n              side_visit[i - 1][j]++;\n              side_visit[i][j - 1]++;\n              side_visit[i - 1][j - 1]++;\n              if(j!= 0 && matrix[i][j - 1]!= matrix[i + 1][j - 1]) side_visit[i][j - 1]--;\n              if(i!= n - 1 && matrix[i + 1][j]!= matrix[i + 1][j - 1]) side_visit[i + 1][j]--;\n          }\n          min = (int)(Math.min(min, side_visit[i][0]));\n      }\n\n      for(int i = 0; i < n; i++){\n          for(int j = 0; j < m; j++){\n              if(matrix[i][j]!= 1){\n                  continue;\n              }\n              if(i!= n - 1 && matrix[i + 1][j] == 3){\n                  col_visit[j] = count + 1;\n              }\n          }\n          min = (int)(Math.min(min, col_visit[0]));\n      }\n\n      for(int i = 0; i < m; i++){\n          if(matrix[0][i]!= 1){\n              continue;\n          }\n          row_visit[i] = count + 1;\n          for(int j = 1; j < n; j++){\n              if(matrix[j][i] == 3){\n                  row_visit[i]++;\n              }\n          }\n          min = (int)(Math.min(min, row_visit[i]));\n      }\n      System.out.println(min);\n   "}
{"src_uid": "73291724a4609ddd4cc8a92c77e8496f", "id": 113, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2600, "testcases": "[{'input': '3 3\\r\\nWBW\\r\\nBWB\\r\\nWBW\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 3\\r\\nBBB\\r\\nBWB\\r\\n', 'output': ['1\\r\\n']}, {'input': '9 29\\r\\nBWBBBBBBBBBWBWWBBBWBWBBBWWBWW\\r\\nWBWBBWBBWBWWBWBBBWBWWWBWBBBBB\\r\\nBWBBBBWWBBBWBWBBWWBBWBBBBBBBB\\r\\nBBBWWBBWWBBBWBWBBBWWWWWWBBBBW\\r\\nBBWWWWBBBBBBBBBWBBBBBBBBBBWBW\\r\\nBBBWWBBBBWBBBWWBBBWBBBBWBBWBW\\r\\nBBBBBWBWBBBWWBBWBBBBBBBBBBBBW\\r\\nWWBBBWWBWBWBBBBWBBBBWWWBBBBBB\\r\\nBWWBWBBBBBWBBWBBBBBBBWBWBBBWW\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 5\\r\\nBBBBB\\r\\nBWWBB\\r\\nWWBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '17 22\\r\\nBBWBBWWWBBWWWBBBBBBWWW\\r\\nWWBWBWWBBWBBBWWBBBBBWW\\r\\nBBBWBWBBWBWBWBWWBWWBBB\\r\\nBWBBBBWBBBWBWBBBBBWBWW\\r\\nBBWWWWWBBBBBWBWBBBBBBB\\r\\nBBBWBBWWWWBBWWBWBWWBBW\\r\\nBBBWWWWWWWBWWWBBBWWWWW\\r\\nBBBBWBBBWBWBBWBBBWWWBB\\r\\nBWWWWBBBWWWBBBBBBWBWWW\\r\\nBBBBWBWBWBWBBBWWBWBBBB\\r\\nBBWBWWBWWWBWBWWBWBBBBW\\r\\nWWBWWBBBBWBWBWBWWBBBBB\\r\\nWWWWBWBBBWBBBWWBBWWBBW\\r\\nBBBBBWWBBBBWWWWBWBBBWW\\r\\nBBBBBWBBWBWBBWBWWBBBBW\\r\\nWWBBBWBWBBWWWBBBWWBBBW\\r\\nWWBWBBBBWBBBWBBBWBBBBB\\r\\n', 'output': ['4\\r\\n']}, {'input': '23 12\\r\\nBWWWBBWWWWWW\\r\\nWWWWBWWWBWWW\\r\\nBWBWWWWBBWWB\\r\\nWBWWWWBWWBWW\\r\\nBWWWWWWWWWWW\\r\\nWWWWWWBWWWWW\\r\\nWWWWWBWBWWBB\\r\\nWBBWWWWWWWWW\\r\\nWWBWBBWWWBBW\\r\\nWWWWWWWWWWWW\\r\\nWWWWWWWWWWWW\\r\\nWWWWWWBWWWWW\\r\\nBWWWWBBWBWWB\\r\\nBWBWWWWWWBWW\\r\\nWWWWWWWBWWWW\\r\\nWWBBWWWBWWBW\\r\\nBBWBWBWWWWWW\\r\\nWWBWBBWWWBBW\\r\\nWBWWWWWBWWBW\\r\\nWWWWBBBWWWWW\\r\\nWWWWBWWBBWWW\\r\\nWWWBBWWWWWWW\\r\\nWWWBWWBWWWBW\\r\\n', 'output': ['2\\r\\n']}, {'input': '41 6\\r\\nWBBBWB\\r\\nWWBWBW\\r\\nBBBBWB\\r\\nBBWBBB\\r\\nBBBWWW\\r\\nBBBWBB\\r\\nBBWBBB\\r\\nBBWWBB\\r\\nWBBBBB\\r\\nWBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nWBBBBB\\r\\nBBBBBW\\r\\nBWBWBW\\r\\nBBBBBB\\r\\nWWWBWW\\r\\nBBBBBB\\r\\nWBBBWB\\r\\nBBBWBB\\r\\nBBWBBB\\r\\nBWBWBB\\r\\nBWBBBB\\r\\nWBWBBB\\r\\nBBWWBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBWB\\r\\nBBBBBB\\r\\nBBBBBW\\r\\nBWBWBW\\r\\nBBBBWB\\r\\nWBBWBB\\r\\nWBWBBW\\r\\nBBWBWW\\r\\nBBBWWB\\r\\nBBWWBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '2 7\\r\\nBBBBBBB\\r\\nBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '7 28\\r\\nWWWWWWWWWBBWWWBBWBWWBWWBWWWW\\r\\nWWBBBWWWWWWWBWBBBWWWWBBWBWBW\\r\\nBWWWBBWWBWBWWBWWWWWWBBWWWWWW\\r\\nWBWWWWWWWBBBBWBBWWWWWWWBWWBB\\r\\nWWWBWBWWWWWBBWBWWWWBWWBWWBWW\\r\\nWWBWWWBWWWBWWBBWBWWWWWWBWWWB\\r\\nBWWWWBWWWWWWWWWBWBWWBWWWWWWW\\r\\n', 'output': ['3\\r\\n']}, {'input': '25 6\\r\\nWWWWWB\\r\\nWWBBWW\\r\\nBWBWWB\\r\\nBBWWWW\\r\\nBWWWWW\\r\\nWWWWWW\\r\\nWWWWWW\\r\\nWWWBWW\\r\\nWBWWWW\\r\\nWWWWWW\\r\\nWWBWWW\\r\\nWWWWWW\\r\\nWWBWWW\\r\\nWWWWWW\\r\\nWWWBWW\\r\\nWWWBWW\\r\\nWWWBWB\\r\\nWWWWWW\\r\\nWWWWWW\\r\\nWBWWWB\\r\\nBWWWWW\\r\\nBWBWWB\\r\\nWBWWWB\\r\\nWWWBWB\\r\\nWWWWBW\\r\\n', 'output': ['2\\r\\n']}, {'input': '42 1\\r\\nW\\r\\nW\\r\\nW\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\n', 'output': ['11\\r\\n']}, {'input': '42 8\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBWBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBWB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBWBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBWBBB\\r\\nBBBBBBBB\\r\\nBBWBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nWBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBWW\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBWBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 38\\r\\nWWWWWBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWW\\r\\nWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW\\r\\nWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW\\r\\nWWBWWWWWWWWWWWWWWBWWWWWWWWWWWWWWWWWWWW\\r\\n', 'output': ['2\\r\\n']}, {'input': '9 10\\r\\nWWWWWWBWWW\\r\\nWWWBWWWWWW\\r\\nWBWWWWBWWW\\r\\nWBWBWWWWWW\\r\\nWBWWWWWWWW\\r\\nWWWWWWWWWW\\r\\nWWWWWWWWWB\\r\\nWWWWWWWWBB\\r\\nWWBBWWBWWW\\r\\n', 'output': ['2\\r\\n']}, {'input': '7 47\\r\\nWBWBWWWWBBBBBBWWWWBBBWBWBWBWBBWWWWBBBBWWWWBBWWB\\r\\nWBBBWBWWBBWBWWBWWBWBBBBWWBWBWWBBBBBBBBBWBWBBBBW\\r\\nBBBBWBWBWWBBWWBBBBBWWBBBWWBWBWWWBWWWWBWBBWWBBBW\\r\\nBWBBBBWBBWWWWBWBBWBWBBBBBBWWWWWBBBBBBWWBBBWWBWB\\r\\nBWBBBBBBBBBWBBBBWBWWBWWBBWBBWBBBBBBBWBBBWBBBBWB\\r\\nBBWBBWWWBBWBBBBBWWBBBWWBWBBBWBBBBWWWWBWWBBBWBWB\\r\\nBBBWBBBBWWBWBBWBWBWWBBBBBBBWBBBBBWWBWBBBBBWBWBW\\r\\n', 'output': ['6\\r\\n']}, {'input': '42 1\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\n', 'output': ['10\\r\\n']}, {'input': '25 10\\r\\nWWWWBBBWWW\\r\\nBBBWWBWWBB\\r\\nWBWWBWWWWB\\r\\nBWBWWWBBWB\\r\\nWBWWBWWWBW\\r\\nWBWWBWBBWW\\r\\nWWWWBBWBWW\\r\\nBWBWWWWBBB\\r\\nBBBWWBWWWW\\r\\nBWWWBWBBBW\\r\\nBBWBBBWBBB\\r\\nWBBWWBWWBW\\r\\nBBBBWWWWBW\\r\\nWWWWWWWWWB\\r\\nBWBBWBWBBB\\r\\nBBWWWBBWWW\\r\\nWBWWBWWWWW\\r\\nBWWBBWWWWB\\r\\nWWWWBBBWWW\\r\\nWBBWWWWWWB\\r\\nWBBWWWBBWB\\r\\nWBWWWBBWBW\\r\\nWWBWWWWWBW\\r\\nBWWBWWWBBW\\r\\nBWWWBBBBBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '4 35\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '39 1\\r\\nB\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\n', 'output': ['10\\r\\n']}, {'input': '18 11\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBWBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBWBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBWBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '7 20\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBWB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '45 9\\r\\nBBWBWBBBW\\r\\nWBBBBWBWB\\r\\nBWWBBWWWW\\r\\nBBBBWWBBB\\r\\nWBBBBWWWB\\r\\nWWBWWBBBW\\r\\nBBWBBWBBB\\r\\nWBBBBWBWW\\r\\nBBBWBWBWW\\r\\nBWBWBBWWB\\r\\nBWBWBBWBW\\r\\nBWBBBWBWB\\r\\nBBWBBWWBB\\r\\nWBBBBWBBB\\r\\nWWBWBBBWB\\r\\nBWWBWWBBB\\r\\nBBWBWBWWB\\r\\nWBWWWWBBW\\r\\nBBBWBWBBB\\r\\nWBWWWBBBB\\r\\nBBBWWBWBB\\r\\nWWBBBBBWB\\r\\nBWBBBWWBB\\r\\nBBBWWBWWW\\r\\nBBWBBBBBW\\r\\nWBBWWWBBW\\r\\nBWBWBWWBB\\r\\nBBWBWBBWB\\r\\nBWWBBBBBB\\r\\nBBBBBBBWB\\r\\nBBBBBWWBB\\r\\nWWWBBBBBB\\r\\nWWWBBBBBW\\r\\nWWBBBBBWW\\r\\nWBWBWBWBB\\r\\nBBBBBBBWB\\r\\nBBWBBWBBB\\r\\nBBBWBBBWW\\r\\nWBWWWWWBW\\r\\nBBBBBBWBB\\r\\nBBWBBBWBW\\r\\nBWBBBBWWW\\r\\nBWWBWBBBB\\r\\nBWBBBBBBB\\r\\nBWBWBBBWW\\r\\n', 'output': ['6\\r\\n']}, {'input': '19 9\\r\\nWWWWBWWBW\\r\\nWBWBWBBWB\\r\\nWWBBWWWBB\\r\\nWWBWWWBWW\\r\\nBWBWBWWWW\\r\\nBBBBWBWWB\\r\\nWWWBBBWBW\\r\\nBWWWBWWWB\\r\\nBBBBWWBWW\\r\\nWWWBBBBBB\\r\\nWBWBWBWWW\\r\\nWBBWWWWBB\\r\\nWWBBWBWWB\\r\\nBBWBBBBWB\\r\\nWBWBBWWWB\\r\\nBWBWWBWBW\\r\\nWWBBBWWBW\\r\\nWBBWBWBWB\\r\\nBBWBBWBBB\\r\\n', 'output': ['5\\r\\n']}, {'input': '2 23\\r\\nBBBBWBBBBBBBBBBBWBBBBBW\\r\\nWBBBBWBWBBBBBBWBWBBBWBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '11 1\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 39\\r\\nBBBBBBWWBBWBBBBBBBBBBBBBBWBBBBBBBBBBBBB\\r\\nBBBBBWBBBBBBBBBBWBWWBBWBBBBBBBBBBWBBBBB\\r\\n', 'output': ['2\\r\\n']}, {'input': '36 3\\r\\nBBB\\r\\nBBB\\r\\nWWB\\r\\nBBB\\r\\nBBB\\r\\nBWW\\r\\nWBB\\r\\nBBW\\r\\nWBW\\r\\nBBB\\r\\nBBB\\r\\nBBW\\r\\nBWW\\r\\nWBB\\r\\nBWB\\r\\nWWB\\r\\nBBW\\r\\nWBB\\r\\nBBW\\r\\nWBB\\r\\nBBB\\r\\nWWB\\r\\nWBW\\r\\nBBB\\r\\nBWW\\r\\nBBW\\r\\nWBB\\r\\nWBW\\r\\nWWW\\r\\nBWW\\r\\nBWB\\r\\nWBW\\r\\nBWB\\r\\nBBB\\r\\nBBB\\r\\nWBB\\r\\n', 'output': ['7\\r\\n']}, {'input': '5 20\\r\\nWWBBBBWWWWWBWBWBWWBW\\r\\nWBWWWWWWWWWBWWBWWWBW\\r\\nWBWWBWWBWWWWWBBWWWBW\\r\\nWBWBWWWWWBBWWWWBWWWW\\r\\nWBBWBWWBBWBWBWBBWWWW\\r\\n', 'output': ['3\\r\\n']}, {'input': '19 11\\r\\nWWWBWWBBBBB\\r\\nBWBWBWBWWBW\\r\\nWBBWBBBWWBB\\r\\nWWBBBWBBWWW\\r\\nWWWBBWBWBWW\\r\\nBBWBWBWBBBB\\r\\nBWWBWWWBWBB\\r\\nBWBWWBBWBBW\\r\\nBWBWBWWBWWW\\r\\nWWBWBWWWBWB\\r\\nBBBWWWBWWWW\\r\\nBWBWWWWWBBB\\r\\nBWWWBBBWWBB\\r\\nWWWBWBWWBWB\\r\\nWWWWBWWBWWB\\r\\nBWWWBWBWBBB\\r\\nBBWWWWWWWBW\\r\\nWBWWWBWBBWW\\r\\nWBWWWWBWBWB\\r\\n', 'output': ['4\\r\\n']}, {'input': '6 33\\r\\nWBBWWWWWWWWWBBBWWWWWWWWWWWWWWWBWW\\r\\nWBWWBBWBBWWBWWWWWBBBBBBBWWWBWBWBW\\r\\nWBBBBBBWBBWBWWBBWBBBWBWWBBBWWWWWW\\r\\nWWBWBWBBWBWWBWBWBWBBWWWBWWWWWWWWW\\r\\nWWBWWWWBWBBBBWWWWWWWWWBBWWWBWBWWW\\r\\nBWBWWBBBWBWWBWBBBBWBWBBBWWWWBBWWW\\r\\n', 'output': ['4\\r\\n']}, {'input': '22 17\\r\\nBBBBBWBBWWBBBWBBB\\r\\nBBBBBBBBBBBBWBBBB\\r\\nWBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBB\\r\\nBBBBWBWBBBBWBBBBW\\r\\nBBBBBWBBWBBBWWBBB\\r\\nBBBWBWBBBBBBBBBBB\\r\\nBBBWBBBBBBBBBBBBB\\r\\nBWBBWWBBBBBBBBBBB\\r\\nBWBBWBBWBBBBBBBBW\\r\\nBBBBBBWWWBWBBBWWW\\r\\nBWBBWBBBBBBWBBWBB\\r\\nBWWBBBBBBBBBBBBBB\\r\\nBBBBBBBBWBWBWBBBB\\r\\nBBBBBBBBWBBBBBBBB\\r\\nBBBBBBBBBBBBBBWBB\\r\\nBBBWWBBBBBBWWBBBB\\r\\nBBBBBBBWBBBBBBBBB\\r\\nBBBWBBBBBBWBBBBBB\\r\\nWBWBWBBBBBBBWBBBB\\r\\nBBBBBWBBBBBBBBBBB\\r\\nBBBWBBBBBBBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '36 6\\r\\nBWWWBW\\r\\nBBBBWB\\r\\nBWWBBB\\r\\nBWBWBB\\r\\nBBBBBB\\r\\nBWWBBW\\r\\nBWBWBW\\r\\nWBBBBB\\r\\nWBBBBB\\r\\nBBWBBB\\r\\nBWBBWB\\r\\nBBWWWB\\r\\nWBBBBB\\r\\nBWBWBB\\r\\nBBBBBW\\r\\nBWWWWB\\r\\nBBBBWB\\r\\nBBBBBB\\r\\nBWBBBB\\r\\nWBWBWB\\r\\nBBBBWW\\r\\nBWBBWB\\r\\nWBBBBW\\r\\nBBBWWW\\r\\nWBBBBB\\r\\nBBBBBW\\r\\nBBBBBW\\r\\nBBBBWW\\r\\nBBBWBW\\r\\nBWBBBB\\r\\nBWBBBW\\r\\nWWBBBW\\r\\nWBWBWB\\r\\nBBBWBW\\r\\nBBWBBB\\r\\nBBBBBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '24 1\\r\\nW\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\n', 'output': ['3\\r\\n']}, {'input': '7 7\\r\\nBBBBBBB\\r\\nBWWWWWB\\r\\nBWBBBWB\\r\\nBWBWBWB\\r\\nBWBBBWB\\r\\nBWWWWWB\\r\\nBBBBBBB\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 4\\r\\nBWWW\\r\\nWBWB\\r\\nBWBW\\r\\nWBWB\\r\\n', 'output': ['3\\r\\n']}, {'input': '5 5\\r\\nWBWWW\\r\\nBWBWW\\r\\nWBWWB\\r\\nWWBBW\\r\\nWWBWB\\r\\n', 'output': ['3\\r\\n']}, {'input': '10 10\\r\\nBBWWBBBBBW\\r\\nBWWWWBWBWB\\r\\nWBWBWBBBBW\\r\\nWWBBWBBBBW\\r\\nBBBBBBBBBW\\r\\nBBBWWBBWWB\\r\\nWBBWBWWWWB\\r\\nWWWBBBBBWW\\r\\nWBBBBBWBBB\\r\\nWBWWBWWBBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '7 7\\r\\nWBWBBBW\\r\\nBBBWBBW\\r\\nWWWWBWB\\r\\nBBWWBBW\\r\\nWWBWBWW\\r\\nBWWBBWW\\r\\nWWBWBWW\\r\\n', 'output': ['3\\r\\n']}, {'input': '6 6\\r\\nWWWWBB\\r\\nWBWBWW\\r\\nBBBWBW\\r\\nBWWWWB\\r\\nWBBBBW\\r\\nBBWWWB\\r\\n', 'output': ['3\\r\\n']}]", "source_code": "/* package whatever; // don't place package name! */\n\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\nimport static java.util.Arrays.*;\nimport static java.util.Collections.*;\n\n/* Name of the class has to be \"Main\" only if the class is public. */\npublic final class main\n{\n\tpublic static void main (String[] args) throws java.lang.Exception\n\t{\n\t\t// your code goes here\n\t\t//System.out.println(\"Hello World\");\n\t\t//FileReader fr = new FileReader(\"/home/shuangjun/input.txt\");\n\t\t//BufferedReader br = new BufferedReader(fr);\n\t\t//String str;\n\t\tStringBuffer out = new StringBuffer();\n\t\tint n,m;\n\t\tString color[][] = new String[55][55];\n\t\tchar c;\n\t\tint lnk[][] = new int[55][55];\n\t\tint i,j,k;\n\t\tint min;\n\t\tboolean visited[][] = new boolean[55][55];\n\t\tfor(i = 1;i<51;i++){\n\t\t\tfor(j=1;j<51;j++){\n\t\t\t\tlnk[i][j] = 0;\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\t//str = br.readLine();\n\t\t//int n = Integer.valueOf(str.split(\" \")[0]);\n\t\t//int m = Integer.valueOf(str.split(\" \")[1]);\n\t\t//color = new String[n][m];\n\t\tfor(int z = 0;z<51;z++){\n\t\t\tfor(int zz = 0;zz<51;zz++){\n\t\t\t\tvisited[z][zz] = false;\n\t\t\t}\n\t\t}\n\t\tScanner in = new Scanner(System.in);\n\t\tn = in.nextInt();\n\t\tm = in.nextInt();\n\t\tfor(i=1;i<=n;i++){\n\t\t\tstr = in.nextLine();\n\t\t\tfor(j=1;j<=m;j++){\n\t\t\t\t//color[i-1][j-1] = str.charAt(j-1);\n\t\t\t\tcolor[i][j] = str.charAt(j-1);\n\t\t\t\t//System.out.println(i+\" \"+j);\n\t\t\t}\n\t\t}\n\t\tfor(i = 1;i<=n;i++){\n\t\t\tfor(j=1;j<=m;j++){\n\t\t\t\tif(color[i][j].equals(\"W\") &&!visited[i][j]){\n\t\t\t\t\tvisited[i][j] = true;\n\t\t\t\t\tfor(k = i-1 ; k<=i+1;k++){\n\t\t\t\t\t\tfor(int l = j-1;l<=j+1;l++){\n\t\t\t\t\t\t\tlnk[i][j]++;\n\t\t\t\t\t\t\tvisited[k][l] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//System.out.println(\"I :\"+i+\" J :\"+j);\n\t\t\t\t\t//System.out.println(\"Ans :\"+ans);\n\t\t\t\t\t//System.out.println(\"link :\"+lnk[i][j]);\n\t\t\t\t\tans+=lnk[i][j];\n\t\t\t\t}\n\t\t\t\tlnk[i][j] = 0;\n\t\t\t}\n\t\t}\n\t\t//System.out.println(\"Ans :\"+ans);\n\t\tSystem.out.print(ans);\n\t}\n}"}
{"src_uid": "73291724a4609ddd4cc8a92c77e8496f", "id": 113, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2600, "testcases": "[{'input': '3 3\\r\\nWBW\\r\\nBWB\\r\\nWBW\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 3\\r\\nBBB\\r\\nBWB\\r\\n', 'output': ['1\\r\\n']}, {'input': '9 29\\r\\nBWBBBBBBBBBWBWWBBBWBWBBBWWBWW\\r\\nWBWBBWBBWBWWBWBBBWBWWWBWBBBBB\\r\\nBWBBBBWWBBBWBWBBWWBBWBBBBBBBB\\r\\nBBBWWBBWWBBBWBWBBBWWWWWWBBBBW\\r\\nBBWWWWBBBBBBBBBWBBBBBBBBBBWBW\\r\\nBBBWWBBBBWBBBWWBBBWBBBBWBBWBW\\r\\nBBBBBWBWBBBWWBBWBBBBBBBBBBBBW\\r\\nWWBBBWWBWBWBBBBWBBBBWWWBBBBBB\\r\\nBWWBWBBBBBWBBWBBBBBBBWBWBBBWW\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 5\\r\\nBBBBB\\r\\nBWWBB\\r\\nWWBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '17 22\\r\\nBBWBBWWWBBWWWBBBBBBWWW\\r\\nWWBWBWWBBWBBBWWBBBBBWW\\r\\nBBBWBWBBWBWBWBWWBWWBBB\\r\\nBWBBBBWBBBWBWBBBBBWBWW\\r\\nBBWWWWWBBBBBWBWBBBBBBB\\r\\nBBBWBBWWWWBBWWBWBWWBBW\\r\\nBBBWWWWWWWBWWWBBBWWWWW\\r\\nBBBBWBBBWBWBBWBBBWWWBB\\r\\nBWWWWBBBWWWBBBBBBWBWWW\\r\\nBBBBWBWBWBWBBBWWBWBBBB\\r\\nBBWBWWBWWWBWBWWBWBBBBW\\r\\nWWBWWBBBBWBWBWBWWBBBBB\\r\\nWWWWBWBBBWBBBWWBBWWBBW\\r\\nBBBBBWWBBBBWWWWBWBBBWW\\r\\nBBBBBWBBWBWBBWBWWBBBBW\\r\\nWWBBBWBWBBWWWBBBWWBBBW\\r\\nWWBWBBBBWBBBWBBBWBBBBB\\r\\n', 'output': ['4\\r\\n']}, {'input': '23 12\\r\\nBWWWBBWWWWWW\\r\\nWWWWBWWWBWWW\\r\\nBWBWWWWBBWWB\\r\\nWBWWWWBWWBWW\\r\\nBWWWWWWWWWWW\\r\\nWWWWWWBWWWWW\\r\\nWWWWWBWBWWBB\\r\\nWBBWWWWWWWWW\\r\\nWWBWBBWWWBBW\\r\\nWWWWWWWWWWWW\\r\\nWWWWWWWWWWWW\\r\\nWWWWWWBWWWWW\\r\\nBWWWWBBWBWWB\\r\\nBWBWWWWWWBWW\\r\\nWWWWWWWBWWWW\\r\\nWWBBWWWBWWBW\\r\\nBBWBWBWWWWWW\\r\\nWWBWBBWWWBBW\\r\\nWBWWWWWBWWBW\\r\\nWWWWBBBWWWWW\\r\\nWWWWBWWBBWWW\\r\\nWWWBBWWWWWWW\\r\\nWWWBWWBWWWBW\\r\\n', 'output': ['2\\r\\n']}, {'input': '41 6\\r\\nWBBBWB\\r\\nWWBWBW\\r\\nBBBBWB\\r\\nBBWBBB\\r\\nBBBWWW\\r\\nBBBWBB\\r\\nBBWBBB\\r\\nBBWWBB\\r\\nWBBBBB\\r\\nWBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nWBBBBB\\r\\nBBBBBW\\r\\nBWBWBW\\r\\nBBBBBB\\r\\nWWWBWW\\r\\nBBBBBB\\r\\nWBBBWB\\r\\nBBBWBB\\r\\nBBWBBB\\r\\nBWBWBB\\r\\nBWBBBB\\r\\nWBWBBB\\r\\nBBWWBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBWB\\r\\nBBBBBB\\r\\nBBBBBW\\r\\nBWBWBW\\r\\nBBBBWB\\r\\nWBBWBB\\r\\nWBWBBW\\r\\nBBWBWW\\r\\nBBBWWB\\r\\nBBWWBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '2 7\\r\\nBBBBBBB\\r\\nBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '7 28\\r\\nWWWWWWWWWBBWWWBBWBWWBWWBWWWW\\r\\nWWBBBWWWWWWWBWBBBWWWWBBWBWBW\\r\\nBWWWBBWWBWBWWBWWWWWWBBWWWWWW\\r\\nWBWWWWWWWBBBBWBBWWWWWWWBWWBB\\r\\nWWWBWBWWWWWBBWBWWWWBWWBWWBWW\\r\\nWWBWWWBWWWBWWBBWBWWWWWWBWWWB\\r\\nBWWWWBWWWWWWWWWBWBWWBWWWWWWW\\r\\n', 'output': ['3\\r\\n']}, {'input': '25 6\\r\\nWWWWWB\\r\\nWWBBWW\\r\\nBWBWWB\\r\\nBBWWWW\\r\\nBWWWWW\\r\\nWWWWWW\\r\\nWWWWWW\\r\\nWWWBWW\\r\\nWBWWWW\\r\\nWWWWWW\\r\\nWWBWWW\\r\\nWWWWWW\\r\\nWWBWWW\\r\\nWWWWWW\\r\\nWWWBWW\\r\\nWWWBWW\\r\\nWWWBWB\\r\\nWWWWWW\\r\\nWWWWWW\\r\\nWBWWWB\\r\\nBWWWWW\\r\\nBWBWWB\\r\\nWBWWWB\\r\\nWWWBWB\\r\\nWWWWBW\\r\\n', 'output': ['2\\r\\n']}, {'input': '42 1\\r\\nW\\r\\nW\\r\\nW\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\n', 'output': ['11\\r\\n']}, {'input': '42 8\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBWBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBWB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBWBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBWBBB\\r\\nBBBBBBBB\\r\\nBBWBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nWBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBWW\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBWBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 38\\r\\nWWWWWBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWW\\r\\nWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW\\r\\nWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW\\r\\nWWBWWWWWWWWWWWWWWBWWWWWWWWWWWWWWWWWWWW\\r\\n', 'output': ['2\\r\\n']}, {'input': '9 10\\r\\nWWWWWWBWWW\\r\\nWWWBWWWWWW\\r\\nWBWWWWBWWW\\r\\nWBWBWWWWWW\\r\\nWBWWWWWWWW\\r\\nWWWWWWWWWW\\r\\nWWWWWWWWWB\\r\\nWWWWWWWWBB\\r\\nWWBBWWBWWW\\r\\n', 'output': ['2\\r\\n']}, {'input': '7 47\\r\\nWBWBWWWWBBBBBBWWWWBBBWBWBWBWBBWWWWBBBBWWWWBBWWB\\r\\nWBBBWBWWBBWBWWBWWBWBBBBWWBWBWWBBBBBBBBBWBWBBBBW\\r\\nBBBBWBWBWWBBWWBBBBBWWBBBWWBWBWWWBWWWWBWBBWWBBBW\\r\\nBWBBBBWBBWWWWBWBBWBWBBBBBBWWWWWBBBBBBWWBBBWWBWB\\r\\nBWBBBBBBBBBWBBBBWBWWBWWBBWBBWBBBBBBBWBBBWBBBBWB\\r\\nBBWBBWWWBBWBBBBBWWBBBWWBWBBBWBBBBWWWWBWWBBBWBWB\\r\\nBBBWBBBBWWBWBBWBWBWWBBBBBBBWBBBBBWWBWBBBBBWBWBW\\r\\n', 'output': ['6\\r\\n']}, {'input': '42 1\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\n', 'output': ['10\\r\\n']}, {'input': '25 10\\r\\nWWWWBBBWWW\\r\\nBBBWWBWWBB\\r\\nWBWWBWWWWB\\r\\nBWBWWWBBWB\\r\\nWBWWBWWWBW\\r\\nWBWWBWBBWW\\r\\nWWWWBBWBWW\\r\\nBWBWWWWBBB\\r\\nBBBWWBWWWW\\r\\nBWWWBWBBBW\\r\\nBBWBBBWBBB\\r\\nWBBWWBWWBW\\r\\nBBBBWWWWBW\\r\\nWWWWWWWWWB\\r\\nBWBBWBWBBB\\r\\nBBWWWBBWWW\\r\\nWBWWBWWWWW\\r\\nBWWBBWWWWB\\r\\nWWWWBBBWWW\\r\\nWBBWWWWWWB\\r\\nWBBWWWBBWB\\r\\nWBWWWBBWBW\\r\\nWWBWWWWWBW\\r\\nBWWBWWWBBW\\r\\nBWWWBBBBBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '4 35\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '39 1\\r\\nB\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\n', 'output': ['10\\r\\n']}, {'input': '18 11\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBWBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBWBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBWBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '7 20\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBWB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '45 9\\r\\nBBWBWBBBW\\r\\nWBBBBWBWB\\r\\nBWWBBWWWW\\r\\nBBBBWWBBB\\r\\nWBBBBWWWB\\r\\nWWBWWBBBW\\r\\nBBWBBWBBB\\r\\nWBBBBWBWW\\r\\nBBBWBWBWW\\r\\nBWBWBBWWB\\r\\nBWBWBBWBW\\r\\nBWBBBWBWB\\r\\nBBWBBWWBB\\r\\nWBBBBWBBB\\r\\nWWBWBBBWB\\r\\nBWWBWWBBB\\r\\nBBWBWBWWB\\r\\nWBWWWWBBW\\r\\nBBBWBWBBB\\r\\nWBWWWBBBB\\r\\nBBBWWBWBB\\r\\nWWBBBBBWB\\r\\nBWBBBWWBB\\r\\nBBBWWBWWW\\r\\nBBWBBBBBW\\r\\nWBBWWWBBW\\r\\nBWBWBWWBB\\r\\nBBWBWBBWB\\r\\nBWWBBBBBB\\r\\nBBBBBBBWB\\r\\nBBBBBWWBB\\r\\nWWWBBBBBB\\r\\nWWWBBBBBW\\r\\nWWBBBBBWW\\r\\nWBWBWBWBB\\r\\nBBBBBBBWB\\r\\nBBWBBWBBB\\r\\nBBBWBBBWW\\r\\nWBWWWWWBW\\r\\nBBBBBBWBB\\r\\nBBWBBBWBW\\r\\nBWBBBBWWW\\r\\nBWWBWBBBB\\r\\nBWBBBBBBB\\r\\nBWBWBBBWW\\r\\n', 'output': ['6\\r\\n']}, {'input': '19 9\\r\\nWWWWBWWBW\\r\\nWBWBWBBWB\\r\\nWWBBWWWBB\\r\\nWWBWWWBWW\\r\\nBWBWBWWWW\\r\\nBBBBWBWWB\\r\\nWWWBBBWBW\\r\\nBWWWBWWWB\\r\\nBBBBWWBWW\\r\\nWWWBBBBBB\\r\\nWBWBWBWWW\\r\\nWBBWWWWBB\\r\\nWWBBWBWWB\\r\\nBBWBBBBWB\\r\\nWBWBBWWWB\\r\\nBWBWWBWBW\\r\\nWWBBBWWBW\\r\\nWBBWBWBWB\\r\\nBBWBBWBBB\\r\\n', 'output': ['5\\r\\n']}, {'input': '2 23\\r\\nBBBBWBBBBBBBBBBBWBBBBBW\\r\\nWBBBBWBWBBBBBBWBWBBBWBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '11 1\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 39\\r\\nBBBBBBWWBBWBBBBBBBBBBBBBBWBBBBBBBBBBBBB\\r\\nBBBBBWBBBBBBBBBBWBWWBBWBBBBBBBBBBWBBBBB\\r\\n', 'output': ['2\\r\\n']}, {'input': '36 3\\r\\nBBB\\r\\nBBB\\r\\nWWB\\r\\nBBB\\r\\nBBB\\r\\nBWW\\r\\nWBB\\r\\nBBW\\r\\nWBW\\r\\nBBB\\r\\nBBB\\r\\nBBW\\r\\nBWW\\r\\nWBB\\r\\nBWB\\r\\nWWB\\r\\nBBW\\r\\nWBB\\r\\nBBW\\r\\nWBB\\r\\nBBB\\r\\nWWB\\r\\nWBW\\r\\nBBB\\r\\nBWW\\r\\nBBW\\r\\nWBB\\r\\nWBW\\r\\nWWW\\r\\nBWW\\r\\nBWB\\r\\nWBW\\r\\nBWB\\r\\nBBB\\r\\nBBB\\r\\nWBB\\r\\n', 'output': ['7\\r\\n']}, {'input': '5 20\\r\\nWWBBBBWWWWWBWBWBWWBW\\r\\nWBWWWWWWWWWBWWBWWWBW\\r\\nWBWWBWWBWWWWWBBWWWBW\\r\\nWBWBWWWWWBBWWWWBWWWW\\r\\nWBBWBWWBBWBWBWBBWWWW\\r\\n', 'output': ['3\\r\\n']}, {'input': '19 11\\r\\nWWWBWWBBBBB\\r\\nBWBWBWBWWBW\\r\\nWBBWBBBWWBB\\r\\nWWBBBWBBWWW\\r\\nWWWBBWBWBWW\\r\\nBBWBWBWBBBB\\r\\nBWWBWWWBWBB\\r\\nBWBWWBBWBBW\\r\\nBWBWBWWBWWW\\r\\nWWBWBWWWBWB\\r\\nBBBWWWBWWWW\\r\\nBWBWWWWWBBB\\r\\nBWWWBBBWWBB\\r\\nWWWBWBWWBWB\\r\\nWWWWBWWBWWB\\r\\nBWWWBWBWBBB\\r\\nBBWWWWWWWBW\\r\\nWBWWWBWBBWW\\r\\nWBWWWWBWBWB\\r\\n', 'output': ['4\\r\\n']}, {'input': '6 33\\r\\nWBBWWWWWWWWWBBBWWWWWWWWWWWWWWWBWW\\r\\nWBWWBBWBBWWBWWWWWBBBBBBBWWWBWBWBW\\r\\nWBBBBBBWBBWBWWBBWBBBWBWWBBBWWWWWW\\r\\nWWBWBWBBWBWWBWBWBWBBWWWBWWWWWWWWW\\r\\nWWBWWWWBWBBBBWWWWWWWWWBBWWWBWBWWW\\r\\nBWBWWBBBWBWWBWBBBBWBWBBBWWWWBBWWW\\r\\n', 'output': ['4\\r\\n']}, {'input': '22 17\\r\\nBBBBBWBBWWBBBWBBB\\r\\nBBBBBBBBBBBBWBBBB\\r\\nWBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBB\\r\\nBBBBWBWBBBBWBBBBW\\r\\nBBBBBWBBWBBBWWBBB\\r\\nBBBWBWBBBBBBBBBBB\\r\\nBBBWBBBBBBBBBBBBB\\r\\nBWBBWWBBBBBBBBBBB\\r\\nBWBBWBBWBBBBBBBBW\\r\\nBBBBBBWWWBWBBBWWW\\r\\nBWBBWBBBBBBWBBWBB\\r\\nBWWBBBBBBBBBBBBBB\\r\\nBBBBBBBBWBWBWBBBB\\r\\nBBBBBBBBWBBBBBBBB\\r\\nBBBBBBBBBBBBBBWBB\\r\\nBBBWWBBBBBBWWBBBB\\r\\nBBBBBBBWBBBBBBBBB\\r\\nBBBWBBBBBBWBBBBBB\\r\\nWBWBWBBBBBBBWBBBB\\r\\nBBBBBWBBBBBBBBBBB\\r\\nBBBWBBBBBBBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '36 6\\r\\nBWWWBW\\r\\nBBBBWB\\r\\nBWWBBB\\r\\nBWBWBB\\r\\nBBBBBB\\r\\nBWWBBW\\r\\nBWBWBW\\r\\nWBBBBB\\r\\nWBBBBB\\r\\nBBWBBB\\r\\nBWBBWB\\r\\nBBWWWB\\r\\nWBBBBB\\r\\nBWBWBB\\r\\nBBBBBW\\r\\nBWWWWB\\r\\nBBBBWB\\r\\nBBBBBB\\r\\nBWBBBB\\r\\nWBWBWB\\r\\nBBBBWW\\r\\nBWBBWB\\r\\nWBBBBW\\r\\nBBBWWW\\r\\nWBBBBB\\r\\nBBBBBW\\r\\nBBBBBW\\r\\nBBBBWW\\r\\nBBBWBW\\r\\nBWBBBB\\r\\nBWBBBW\\r\\nWWBBBW\\r\\nWBWBWB\\r\\nBBBWBW\\r\\nBBWBBB\\r\\nBBBBBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '24 1\\r\\nW\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\n', 'output': ['3\\r\\n']}, {'input': '7 7\\r\\nBBBBBBB\\r\\nBWWWWWB\\r\\nBWBBBWB\\r\\nBWBWBWB\\r\\nBWBBBWB\\r\\nBWWWWWB\\r\\nBBBBBBB\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 4\\r\\nBWWW\\r\\nWBWB\\r\\nBWBW\\r\\nWBWB\\r\\n', 'output': ['3\\r\\n']}, {'input': '5 5\\r\\nWBWWW\\r\\nBWBWW\\r\\nWBWWB\\r\\nWWBBW\\r\\nWWBWB\\r\\n', 'output': ['3\\r\\n']}, {'input': '10 10\\r\\nBBWWBBBBBW\\r\\nBWWWWBWBWB\\r\\nWBWBWBBBBW\\r\\nWWBBWBBBBW\\r\\nBBBBBBBBBW\\r\\nBBBWWBBWWB\\r\\nWBBWBWWWWB\\r\\nWWWBBBBBWW\\r\\nWBBBBBWBBB\\r\\nWBWWBWWBBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '7 7\\r\\nWBWBBBW\\r\\nBBBWBBW\\r\\nWWWWBWB\\r\\nBBWWBBW\\r\\nWWBWBWW\\r\\nBWWBBWW\\r\\nWWBWBWW\\r\\n', 'output': ['3\\r\\n']}, {'input': '6 6\\r\\nWWWWBB\\r\\nWBWBWW\\r\\nBBBWBW\\r\\nBWWWWB\\r\\nWBBBBW\\r\\nBBWWWB\\r\\n', 'output': ['3\\r\\n']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\tstatic class FastScanner {\n\t\tprivate final InputStream in = System.in;\n\t\tprivate final byte[] buffer = new byte[1024];\n\t\tprivate int ptr = 0;\n\t\tprivate int buflen = 0;\n\t\tprivate boolean hasNextByte() {\n\t\t\t\tif (ptr < buflen) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t}else{\n\t\t\t\t\t\tptr = 0;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tbuflen = in.read(buffer);\n\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (buflen <= 0) {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t}\n\t\tprivate int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n\t\tprivate static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n\t\tpublic boolean hasNext() { while(hasNextByte() &&!isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\n\t\tpublic String next() {\n\t\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\tint b = readByte();\n\t\t\t\twhile(isPrintableChar(b)) {\n\t\t\t\t\t\tsb.appendCodePoint(b);\n\t\t\t\t\t\tb = readByte();\n\t\t\t\t}\n\t\t\t\treturn sb.toString();\n\t\t}\n\t\tpublic long nextLong() {\n\t\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\t\tlong n = 0;\n\t\t\t\tboolean minus = false;\n\t\t\t\tint b = readByte();\n\t\t\t\tif (b == '-') {\n\t\t\t\t\t\tminus = true;\n\t\t\t\t\t\tb = readByte();\n\t\t\t\t}\n\t\t\t\tif (b < '0' || '9' < b) {\n\t\t\t\t\t\tthrow new NumberFormatException();\n\t\t\t\t}\n\t\t\t\twhile(true){\n\t\t\t\t\t\tif ('0' <= b && b <= '9') {\n\t\t\t\t\t\t\t\tn *= 10;\n\t\t\t\t\t\t\t\tn += b - '0';\n\t\t\t\t\t\t}else if(b == -1 ||!isPrintableChar(b)){\n\t\t\t\t\t\t\t\treturn minus? -n : n;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tthrow new NumberFormatException();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tb = readByte();\n\t\t\t\t}\n\t\t}\n\t\tpublic int nextInt() {\n\t\t\t\tlong nl = nextLong();\n\t\t\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) throw new NumberFormatException();\n\t\t\t\treturn (int) nl;\n\t\t}\n\t\tpublic double nextDouble() { return Double.parseDouble(next());}\n\t}\n\n\tstatic char[][] s;\n\tstatic boolean[][] v = new boolean[55][55];\n\tstatic int n, m;\n\tstatic int count;\n\tstatic int[] di = new int[]{-1, 0, 0, 1};\n\tstatic int[] dj = new int[]{0, -1, 1, 0};\n\tstatic int bc = 0;\n\n\tstatic void DFS(int i, int j) {\n\t\tif (0 <= i && i < n && 0 <= j && j < m &&!v[i][j]) {\n\t\t\tv[i][j] = true;\n\t\t\tif (s[i][j] == bc) {\n\t\t\t\tcount++;\n\t\t\t\tfor (int k = 0; k < 4; k"}
{"src_uid": "73291724a4609ddd4cc8a92c77e8496f", "id": 113, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2600, "testcases": "[{'input': '3 3\\r\\nWBW\\r\\nBWB\\r\\nWBW\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 3\\r\\nBBB\\r\\nBWB\\r\\n', 'output': ['1\\r\\n']}, {'input': '9 29\\r\\nBWBBBBBBBBBWBWWBBBWBWBBBWWBWW\\r\\nWBWBBWBBWBWWBWBBBWBWWWBWBBBBB\\r\\nBWBBBBWWBBBWBWBBWWBBWBBBBBBBB\\r\\nBBBWWBBWWBBBWBWBBBWWWWWWBBBBW\\r\\nBBWWWWBBBBBBBBBWBBBBBBBBBBWBW\\r\\nBBBWWBBBBWBBBWWBBBWBBBBWBBWBW\\r\\nBBBBBWBWBBBWWBBWBBBBBBBBBBBBW\\r\\nWWBBBWWBWBWBBBBWBBBBWWWBBBBBB\\r\\nBWWBWBBBBBWBBWBBBBBBBWBWBBBWW\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 5\\r\\nBBBBB\\r\\nBWWBB\\r\\nWWBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '17 22\\r\\nBBWBBWWWBBWWWBBBBBBWWW\\r\\nWWBWBWWBBWBBBWWBBBBBWW\\r\\nBBBWBWBBWBWBWBWWBWWBBB\\r\\nBWBBBBWBBBWBWBBBBBWBWW\\r\\nBBWWWWWBBBBBWBWBBBBBBB\\r\\nBBBWBBWWWWBBWWBWBWWBBW\\r\\nBBBWWWWWWWBWWWBBBWWWWW\\r\\nBBBBWBBBWBWBBWBBBWWWBB\\r\\nBWWWWBBBWWWBBBBBBWBWWW\\r\\nBBBBWBWBWBWBBBWWBWBBBB\\r\\nBBWBWWBWWWBWBWWBWBBBBW\\r\\nWWBWWBBBBWBWBWBWWBBBBB\\r\\nWWWWBWBBBWBBBWWBBWWBBW\\r\\nBBBBBWWBBBBWWWWBWBBBWW\\r\\nBBBBBWBBWBWBBWBWWBBBBW\\r\\nWWBBBWBWBBWWWBBBWWBBBW\\r\\nWWBWBBBBWBBBWBBBWBBBBB\\r\\n', 'output': ['4\\r\\n']}, {'input': '23 12\\r\\nBWWWBBWWWWWW\\r\\nWWWWBWWWBWWW\\r\\nBWBWWWWBBWWB\\r\\nWBWWWWBWWBWW\\r\\nBWWWWWWWWWWW\\r\\nWWWWWWBWWWWW\\r\\nWWWWWBWBWWBB\\r\\nWBBWWWWWWWWW\\r\\nWWBWBBWWWBBW\\r\\nWWWWWWWWWWWW\\r\\nWWWWWWWWWWWW\\r\\nWWWWWWBWWWWW\\r\\nBWWWWBBWBWWB\\r\\nBWBWWWWWWBWW\\r\\nWWWWWWWBWWWW\\r\\nWWBBWWWBWWBW\\r\\nBBWBWBWWWWWW\\r\\nWWBWBBWWWBBW\\r\\nWBWWWWWBWWBW\\r\\nWWWWBBBWWWWW\\r\\nWWWWBWWBBWWW\\r\\nWWWBBWWWWWWW\\r\\nWWWBWWBWWWBW\\r\\n', 'output': ['2\\r\\n']}, {'input': '41 6\\r\\nWBBBWB\\r\\nWWBWBW\\r\\nBBBBWB\\r\\nBBWBBB\\r\\nBBBWWW\\r\\nBBBWBB\\r\\nBBWBBB\\r\\nBBWWBB\\r\\nWBBBBB\\r\\nWBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nWBBBBB\\r\\nBBBBBW\\r\\nBWBWBW\\r\\nBBBBBB\\r\\nWWWBWW\\r\\nBBBBBB\\r\\nWBBBWB\\r\\nBBBWBB\\r\\nBBWBBB\\r\\nBWBWBB\\r\\nBWBBBB\\r\\nWBWBBB\\r\\nBBWWBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBWB\\r\\nBBBBBB\\r\\nBBBBBW\\r\\nBWBWBW\\r\\nBBBBWB\\r\\nWBBWBB\\r\\nWBWBBW\\r\\nBBWBWW\\r\\nBBBWWB\\r\\nBBWWBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '2 7\\r\\nBBBBBBB\\r\\nBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '7 28\\r\\nWWWWWWWWWBBWWWBBWBWWBWWBWWWW\\r\\nWWBBBWWWWWWWBWBBBWWWWBBWBWBW\\r\\nBWWWBBWWBWBWWBWWWWWWBBWWWWWW\\r\\nWBWWWWWWWBBBBWBBWWWWWWWBWWBB\\r\\nWWWBWBWWWWWBBWBWWWWBWWBWWBWW\\r\\nWWBWWWBWWWBWWBBWBWWWWWWBWWWB\\r\\nBWWWWBWWWWWWWWWBWBWWBWWWWWWW\\r\\n', 'output': ['3\\r\\n']}, {'input': '25 6\\r\\nWWWWWB\\r\\nWWBBWW\\r\\nBWBWWB\\r\\nBBWWWW\\r\\nBWWWWW\\r\\nWWWWWW\\r\\nWWWWWW\\r\\nWWWBWW\\r\\nWBWWWW\\r\\nWWWWWW\\r\\nWWBWWW\\r\\nWWWWWW\\r\\nWWBWWW\\r\\nWWWWWW\\r\\nWWWBWW\\r\\nWWWBWW\\r\\nWWWBWB\\r\\nWWWWWW\\r\\nWWWWWW\\r\\nWBWWWB\\r\\nBWWWWW\\r\\nBWBWWB\\r\\nWBWWWB\\r\\nWWWBWB\\r\\nWWWWBW\\r\\n', 'output': ['2\\r\\n']}, {'input': '42 1\\r\\nW\\r\\nW\\r\\nW\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\n', 'output': ['11\\r\\n']}, {'input': '42 8\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBWBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBWB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBWBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBWBBB\\r\\nBBBBBBBB\\r\\nBBWBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nWBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBWW\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBWBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 38\\r\\nWWWWWBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWW\\r\\nWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW\\r\\nWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW\\r\\nWWBWWWWWWWWWWWWWWBWWWWWWWWWWWWWWWWWWWW\\r\\n', 'output': ['2\\r\\n']}, {'input': '9 10\\r\\nWWWWWWBWWW\\r\\nWWWBWWWWWW\\r\\nWBWWWWBWWW\\r\\nWBWBWWWWWW\\r\\nWBWWWWWWWW\\r\\nWWWWWWWWWW\\r\\nWWWWWWWWWB\\r\\nWWWWWWWWBB\\r\\nWWBBWWBWWW\\r\\n', 'output': ['2\\r\\n']}, {'input': '7 47\\r\\nWBWBWWWWBBBBBBWWWWBBBWBWBWBWBBWWWWBBBBWWWWBBWWB\\r\\nWBBBWBWWBBWBWWBWWBWBBBBWWBWBWWBBBBBBBBBWBWBBBBW\\r\\nBBBBWBWBWWBBWWBBBBBWWBBBWWBWBWWWBWWWWBWBBWWBBBW\\r\\nBWBBBBWBBWWWWBWBBWBWBBBBBBWWWWWBBBBBBWWBBBWWBWB\\r\\nBWBBBBBBBBBWBBBBWBWWBWWBBWBBWBBBBBBBWBBBWBBBBWB\\r\\nBBWBBWWWBBWBBBBBWWBBBWWBWBBBWBBBBWWWWBWWBBBWBWB\\r\\nBBBWBBBBWWBWBBWBWBWWBBBBBBBWBBBBBWWBWBBBBBWBWBW\\r\\n', 'output': ['6\\r\\n']}, {'input': '42 1\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\n', 'output': ['10\\r\\n']}, {'input': '25 10\\r\\nWWWWBBBWWW\\r\\nBBBWWBWWBB\\r\\nWBWWBWWWWB\\r\\nBWBWWWBBWB\\r\\nWBWWBWWWBW\\r\\nWBWWBWBBWW\\r\\nWWWWBBWBWW\\r\\nBWBWWWWBBB\\r\\nBBBWWBWWWW\\r\\nBWWWBWBBBW\\r\\nBBWBBBWBBB\\r\\nWBBWWBWWBW\\r\\nBBBBWWWWBW\\r\\nWWWWWWWWWB\\r\\nBWBBWBWBBB\\r\\nBBWWWBBWWW\\r\\nWBWWBWWWWW\\r\\nBWWBBWWWWB\\r\\nWWWWBBBWWW\\r\\nWBBWWWWWWB\\r\\nWBBWWWBBWB\\r\\nWBWWWBBWBW\\r\\nWWBWWWWWBW\\r\\nBWWBWWWBBW\\r\\nBWWWBBBBBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '4 35\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '39 1\\r\\nB\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\n', 'output': ['10\\r\\n']}, {'input': '18 11\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBWBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBWBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBWBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '7 20\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBWB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '45 9\\r\\nBBWBWBBBW\\r\\nWBBBBWBWB\\r\\nBWWBBWWWW\\r\\nBBBBWWBBB\\r\\nWBBBBWWWB\\r\\nWWBWWBBBW\\r\\nBBWBBWBBB\\r\\nWBBBBWBWW\\r\\nBBBWBWBWW\\r\\nBWBWBBWWB\\r\\nBWBWBBWBW\\r\\nBWBBBWBWB\\r\\nBBWBBWWBB\\r\\nWBBBBWBBB\\r\\nWWBWBBBWB\\r\\nBWWBWWBBB\\r\\nBBWBWBWWB\\r\\nWBWWWWBBW\\r\\nBBBWBWBBB\\r\\nWBWWWBBBB\\r\\nBBBWWBWBB\\r\\nWWBBBBBWB\\r\\nBWBBBWWBB\\r\\nBBBWWBWWW\\r\\nBBWBBBBBW\\r\\nWBBWWWBBW\\r\\nBWBWBWWBB\\r\\nBBWBWBBWB\\r\\nBWWBBBBBB\\r\\nBBBBBBBWB\\r\\nBBBBBWWBB\\r\\nWWWBBBBBB\\r\\nWWWBBBBBW\\r\\nWWBBBBBWW\\r\\nWBWBWBWBB\\r\\nBBBBBBBWB\\r\\nBBWBBWBBB\\r\\nBBBWBBBWW\\r\\nWBWWWWWBW\\r\\nBBBBBBWBB\\r\\nBBWBBBWBW\\r\\nBWBBBBWWW\\r\\nBWWBWBBBB\\r\\nBWBBBBBBB\\r\\nBWBWBBBWW\\r\\n', 'output': ['6\\r\\n']}, {'input': '19 9\\r\\nWWWWBWWBW\\r\\nWBWBWBBWB\\r\\nWWBBWWWBB\\r\\nWWBWWWBWW\\r\\nBWBWBWWWW\\r\\nBBBBWBWWB\\r\\nWWWBBBWBW\\r\\nBWWWBWWWB\\r\\nBBBBWWBWW\\r\\nWWWBBBBBB\\r\\nWBWBWBWWW\\r\\nWBBWWWWBB\\r\\nWWBBWBWWB\\r\\nBBWBBBBWB\\r\\nWBWBBWWWB\\r\\nBWBWWBWBW\\r\\nWWBBBWWBW\\r\\nWBBWBWBWB\\r\\nBBWBBWBBB\\r\\n', 'output': ['5\\r\\n']}, {'input': '2 23\\r\\nBBBBWBBBBBBBBBBBWBBBBBW\\r\\nWBBBBWBWBBBBBBWBWBBBWBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '11 1\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 39\\r\\nBBBBBBWWBBWBBBBBBBBBBBBBBWBBBBBBBBBBBBB\\r\\nBBBBBWBBBBBBBBBBWBWWBBWBBBBBBBBBBWBBBBB\\r\\n', 'output': ['2\\r\\n']}, {'input': '36 3\\r\\nBBB\\r\\nBBB\\r\\nWWB\\r\\nBBB\\r\\nBBB\\r\\nBWW\\r\\nWBB\\r\\nBBW\\r\\nWBW\\r\\nBBB\\r\\nBBB\\r\\nBBW\\r\\nBWW\\r\\nWBB\\r\\nBWB\\r\\nWWB\\r\\nBBW\\r\\nWBB\\r\\nBBW\\r\\nWBB\\r\\nBBB\\r\\nWWB\\r\\nWBW\\r\\nBBB\\r\\nBWW\\r\\nBBW\\r\\nWBB\\r\\nWBW\\r\\nWWW\\r\\nBWW\\r\\nBWB\\r\\nWBW\\r\\nBWB\\r\\nBBB\\r\\nBBB\\r\\nWBB\\r\\n', 'output': ['7\\r\\n']}, {'input': '5 20\\r\\nWWBBBBWWWWWBWBWBWWBW\\r\\nWBWWWWWWWWWBWWBWWWBW\\r\\nWBWWBWWBWWWWWBBWWWBW\\r\\nWBWBWWWWWBBWWWWBWWWW\\r\\nWBBWBWWBBWBWBWBBWWWW\\r\\n', 'output': ['3\\r\\n']}, {'input': '19 11\\r\\nWWWBWWBBBBB\\r\\nBWBWBWBWWBW\\r\\nWBBWBBBWWBB\\r\\nWWBBBWBBWWW\\r\\nWWWBBWBWBWW\\r\\nBBWBWBWBBBB\\r\\nBWWBWWWBWBB\\r\\nBWBWWBBWBBW\\r\\nBWBWBWWBWWW\\r\\nWWBWBWWWBWB\\r\\nBBBWWWBWWWW\\r\\nBWBWWWWWBBB\\r\\nBWWWBBBWWBB\\r\\nWWWBWBWWBWB\\r\\nWWWWBWWBWWB\\r\\nBWWWBWBWBBB\\r\\nBBWWWWWWWBW\\r\\nWBWWWBWBBWW\\r\\nWBWWWWBWBWB\\r\\n', 'output': ['4\\r\\n']}, {'input': '6 33\\r\\nWBBWWWWWWWWWBBBWWWWWWWWWWWWWWWBWW\\r\\nWBWWBBWBBWWBWWWWWBBBBBBBWWWBWBWBW\\r\\nWBBBBBBWBBWBWWBBWBBBWBWWBBBWWWWWW\\r\\nWWBWBWBBWBWWBWBWBWBBWWWBWWWWWWWWW\\r\\nWWBWWWWBWBBBBWWWWWWWWWBBWWWBWBWWW\\r\\nBWBWWBBBWBWWBWBBBBWBWBBBWWWWBBWWW\\r\\n', 'output': ['4\\r\\n']}, {'input': '22 17\\r\\nBBBBBWBBWWBBBWBBB\\r\\nBBBBBBBBBBBBWBBBB\\r\\nWBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBB\\r\\nBBBBWBWBBBBWBBBBW\\r\\nBBBBBWBBWBBBWWBBB\\r\\nBBBWBWBBBBBBBBBBB\\r\\nBBBWBBBBBBBBBBBBB\\r\\nBWBBWWBBBBBBBBBBB\\r\\nBWBBWBBWBBBBBBBBW\\r\\nBBBBBBWWWBWBBBWWW\\r\\nBWBBWBBBBBBWBBWBB\\r\\nBWWBBBBBBBBBBBBBB\\r\\nBBBBBBBBWBWBWBBBB\\r\\nBBBBBBBBWBBBBBBBB\\r\\nBBBBBBBBBBBBBBWBB\\r\\nBBBWWBBBBBBWWBBBB\\r\\nBBBBBBBWBBBBBBBBB\\r\\nBBBWBBBBBBWBBBBBB\\r\\nWBWBWBBBBBBBWBBBB\\r\\nBBBBBWBBBBBBBBBBB\\r\\nBBBWBBBBBBBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '36 6\\r\\nBWWWBW\\r\\nBBBBWB\\r\\nBWWBBB\\r\\nBWBWBB\\r\\nBBBBBB\\r\\nBWWBBW\\r\\nBWBWBW\\r\\nWBBBBB\\r\\nWBBBBB\\r\\nBBWBBB\\r\\nBWBBWB\\r\\nBBWWWB\\r\\nWBBBBB\\r\\nBWBWBB\\r\\nBBBBBW\\r\\nBWWWWB\\r\\nBBBBWB\\r\\nBBBBBB\\r\\nBWBBBB\\r\\nWBWBWB\\r\\nBBBBWW\\r\\nBWBBWB\\r\\nWBBBBW\\r\\nBBBWWW\\r\\nWBBBBB\\r\\nBBBBBW\\r\\nBBBBBW\\r\\nBBBBWW\\r\\nBBBWBW\\r\\nBWBBBB\\r\\nBWBBBW\\r\\nWWBBBW\\r\\nWBWBWB\\r\\nBBBWBW\\r\\nBBWBBB\\r\\nBBBBBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '24 1\\r\\nW\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\n', 'output': ['3\\r\\n']}, {'input': '7 7\\r\\nBBBBBBB\\r\\nBWWWWWB\\r\\nBWBBBWB\\r\\nBWBWBWB\\r\\nBWBBBWB\\r\\nBWWWWWB\\r\\nBBBBBBB\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 4\\r\\nBWWW\\r\\nWBWB\\r\\nBWBW\\r\\nWBWB\\r\\n', 'output': ['3\\r\\n']}, {'input': '5 5\\r\\nWBWWW\\r\\nBWBWW\\r\\nWBWWB\\r\\nWWBBW\\r\\nWWBWB\\r\\n', 'output': ['3\\r\\n']}, {'input': '10 10\\r\\nBBWWBBBBBW\\r\\nBWWWWBWBWB\\r\\nWBWBWBBBBW\\r\\nWWBBWBBBBW\\r\\nBBBBBBBBBW\\r\\nBBBWWBBWWB\\r\\nWBBWBWWWWB\\r\\nWWWBBBBBWW\\r\\nWBBBBBWBBB\\r\\nWBWWBWWBBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '7 7\\r\\nWBWBBBW\\r\\nBBBWBBW\\r\\nWWWWBWB\\r\\nBBWWBBW\\r\\nWWBWBWW\\r\\nBWWBBWW\\r\\nWWBWBWW\\r\\n', 'output': ['3\\r\\n']}, {'input': '6 6\\r\\nWWWWBB\\r\\nWBWBWW\\r\\nBBBWBW\\r\\nBWWWWB\\r\\nWBBBBW\\r\\nBBWWWB\\r\\n', 'output': ['3\\r\\n']}]", "source_code": "import java.util.*;\n\n\npublic class NewClass1 {\n\n\tprivate static Scanner sc = new Scanner(System.in);\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tString[] s = new String[n];\n\t\tfor(int i = 0 ; i < n ; i++){\n\t\t\ts[i] = sc.next();\n\t\t}\n\t\tint min = 10;\n\t\tfor(int i = 0 ; i < n-1 ; i++){\n\t\t\tfor(int j = i+1 ; j < n ; j++){\n\t\t\t\tint c = 0;\n\t\t\t\tfor(int k = 0 ; k < m ; k++){\n\t\t\t\t\tif(s[i].charAt(k)!= s[j].charAt(k)){\n\t\t\t\t\t\tc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(c < min){\n\t\t\t\t\tmin = c;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(min);\n\t}\n\n}"}
{"src_uid": "73291724a4609ddd4cc8a92c77e8496f", "id": 113, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2600, "testcases": "[{'input': '3 3\\r\\nWBW\\r\\nBWB\\r\\nWBW\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 3\\r\\nBBB\\r\\nBWB\\r\\n', 'output': ['1\\r\\n']}, {'input': '9 29\\r\\nBWBBBBBBBBBWBWWBBBWBWBBBWWBWW\\r\\nWBWBBWBBWBWWBWBBBWBWWWBWBBBBB\\r\\nBWBBBBWWBBBWBWBBWWBBWBBBBBBBB\\r\\nBBBWWBBWWBBBWBWBBBWWWWWWBBBBW\\r\\nBBWWWWBBBBBBBBBWBBBBBBBBBBWBW\\r\\nBBBWWBBBBWBBBWWBBBWBBBBWBBWBW\\r\\nBBBBBWBWBBBWWBBWBBBBBBBBBBBBW\\r\\nWWBBBWWBWBWBBBBWBBBBWWWBBBBBB\\r\\nBWWBWBBBBBWBBWBBBBBBBWBWBBBWW\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 5\\r\\nBBBBB\\r\\nBWWBB\\r\\nWWBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '17 22\\r\\nBBWBBWWWBBWWWBBBBBBWWW\\r\\nWWBWBWWBBWBBBWWBBBBBWW\\r\\nBBBWBWBBWBWBWBWWBWWBBB\\r\\nBWBBBBWBBBWBWBBBBBWBWW\\r\\nBBWWWWWBBBBBWBWBBBBBBB\\r\\nBBBWBBWWWWBBWWBWBWWBBW\\r\\nBBBWWWWWWWBWWWBBBWWWWW\\r\\nBBBBWBBBWBWBBWBBBWWWBB\\r\\nBWWWWBBBWWWBBBBBBWBWWW\\r\\nBBBBWBWBWBWBBBWWBWBBBB\\r\\nBBWBWWBWWWBWBWWBWBBBBW\\r\\nWWBWWBBBBWBWBWBWWBBBBB\\r\\nWWWWBWBBBWBBBWWBBWWBBW\\r\\nBBBBBWWBBBBWWWWBWBBBWW\\r\\nBBBBBWBBWBWBBWBWWBBBBW\\r\\nWWBBBWBWBBWWWBBBWWBBBW\\r\\nWWBWBBBBWBBBWBBBWBBBBB\\r\\n', 'output': ['4\\r\\n']}, {'input': '23 12\\r\\nBWWWBBWWWWWW\\r\\nWWWWBWWWBWWW\\r\\nBWBWWWWBBWWB\\r\\nWBWWWWBWWBWW\\r\\nBWWWWWWWWWWW\\r\\nWWWWWWBWWWWW\\r\\nWWWWWBWBWWBB\\r\\nWBBWWWWWWWWW\\r\\nWWBWBBWWWBBW\\r\\nWWWWWWWWWWWW\\r\\nWWWWWWWWWWWW\\r\\nWWWWWWBWWWWW\\r\\nBWWWWBBWBWWB\\r\\nBWBWWWWWWBWW\\r\\nWWWWWWWBWWWW\\r\\nWWBBWWWBWWBW\\r\\nBBWBWBWWWWWW\\r\\nWWBWBBWWWBBW\\r\\nWBWWWWWBWWBW\\r\\nWWWWBBBWWWWW\\r\\nWWWWBWWBBWWW\\r\\nWWWBBWWWWWWW\\r\\nWWWBWWBWWWBW\\r\\n', 'output': ['2\\r\\n']}, {'input': '41 6\\r\\nWBBBWB\\r\\nWWBWBW\\r\\nBBBBWB\\r\\nBBWBBB\\r\\nBBBWWW\\r\\nBBBWBB\\r\\nBBWBBB\\r\\nBBWWBB\\r\\nWBBBBB\\r\\nWBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nWBBBBB\\r\\nBBBBBW\\r\\nBWBWBW\\r\\nBBBBBB\\r\\nWWWBWW\\r\\nBBBBBB\\r\\nWBBBWB\\r\\nBBBWBB\\r\\nBBWBBB\\r\\nBWBWBB\\r\\nBWBBBB\\r\\nWBWBBB\\r\\nBBWWBB\\r\\nBBBBBB\\r\\nBBBBBB\\r\\nBBBBWB\\r\\nBBBBBB\\r\\nBBBBBW\\r\\nBWBWBW\\r\\nBBBBWB\\r\\nWBBWBB\\r\\nWBWBBW\\r\\nBBWBWW\\r\\nBBBWWB\\r\\nBBWWBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '2 7\\r\\nBBBBBBB\\r\\nBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '7 28\\r\\nWWWWWWWWWBBWWWBBWBWWBWWBWWWW\\r\\nWWBBBWWWWWWWBWBBBWWWWBBWBWBW\\r\\nBWWWBBWWBWBWWBWWWWWWBBWWWWWW\\r\\nWBWWWWWWWBBBBWBBWWWWWWWBWWBB\\r\\nWWWBWBWWWWWBBWBWWWWBWWBWWBWW\\r\\nWWBWWWBWWWBWWBBWBWWWWWWBWWWB\\r\\nBWWWWBWWWWWWWWWBWBWWBWWWWWWW\\r\\n', 'output': ['3\\r\\n']}, {'input': '25 6\\r\\nWWWWWB\\r\\nWWBBWW\\r\\nBWBWWB\\r\\nBBWWWW\\r\\nBWWWWW\\r\\nWWWWWW\\r\\nWWWWWW\\r\\nWWWBWW\\r\\nWBWWWW\\r\\nWWWWWW\\r\\nWWBWWW\\r\\nWWWWWW\\r\\nWWBWWW\\r\\nWWWWWW\\r\\nWWWBWW\\r\\nWWWBWW\\r\\nWWWBWB\\r\\nWWWWWW\\r\\nWWWWWW\\r\\nWBWWWB\\r\\nBWWWWW\\r\\nBWBWWB\\r\\nWBWWWB\\r\\nWWWBWB\\r\\nWWWWBW\\r\\n', 'output': ['2\\r\\n']}, {'input': '42 1\\r\\nW\\r\\nW\\r\\nW\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\n', 'output': ['11\\r\\n']}, {'input': '42 8\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBWBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBWB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBWBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBWBBB\\r\\nBBBBBBBB\\r\\nBBWBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nWBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBWW\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBWBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '4 38\\r\\nWWWWWBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWW\\r\\nWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW\\r\\nWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW\\r\\nWWBWWWWWWWWWWWWWWBWWWWWWWWWWWWWWWWWWWW\\r\\n', 'output': ['2\\r\\n']}, {'input': '9 10\\r\\nWWWWWWBWWW\\r\\nWWWBWWWWWW\\r\\nWBWWWWBWWW\\r\\nWBWBWWWWWW\\r\\nWBWWWWWWWW\\r\\nWWWWWWWWWW\\r\\nWWWWWWWWWB\\r\\nWWWWWWWWBB\\r\\nWWBBWWBWWW\\r\\n', 'output': ['2\\r\\n']}, {'input': '7 47\\r\\nWBWBWWWWBBBBBBWWWWBBBWBWBWBWBBWWWWBBBBWWWWBBWWB\\r\\nWBBBWBWWBBWBWWBWWBWBBBBWWBWBWWBBBBBBBBBWBWBBBBW\\r\\nBBBBWBWBWWBBWWBBBBBWWBBBWWBWBWWWBWWWWBWBBWWBBBW\\r\\nBWBBBBWBBWWWWBWBBWBWBBBBBBWWWWWBBBBBBWWBBBWWBWB\\r\\nBWBBBBBBBBBWBBBBWBWWBWWBBWBBWBBBBBBBWBBBWBBBBWB\\r\\nBBWBBWWWBBWBBBBBWWBBBWWBWBBBWBBBBWWWWBWWBBBWBWB\\r\\nBBBWBBBBWWBWBBWBWBWWBBBBBBBWBBBBBWWBWBBBBBWBWBW\\r\\n', 'output': ['6\\r\\n']}, {'input': '42 1\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\n', 'output': ['10\\r\\n']}, {'input': '25 10\\r\\nWWWWBBBWWW\\r\\nBBBWWBWWBB\\r\\nWBWWBWWWWB\\r\\nBWBWWWBBWB\\r\\nWBWWBWWWBW\\r\\nWBWWBWBBWW\\r\\nWWWWBBWBWW\\r\\nBWBWWWWBBB\\r\\nBBBWWBWWWW\\r\\nBWWWBWBBBW\\r\\nBBWBBBWBBB\\r\\nWBBWWBWWBW\\r\\nBBBBWWWWBW\\r\\nWWWWWWWWWB\\r\\nBWBBWBWBBB\\r\\nBBWWWBBWWW\\r\\nWBWWBWWWWW\\r\\nBWWBBWWWWB\\r\\nWWWWBBBWWW\\r\\nWBBWWWWWWB\\r\\nWBBWWWBBWB\\r\\nWBWWWBBWBW\\r\\nWWBWWWWWBW\\r\\nBWWBWWWBBW\\r\\nBWWWBBBBBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '4 35\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '39 1\\r\\nB\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\n', 'output': ['10\\r\\n']}, {'input': '18 11\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBWBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBWBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBWBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\nBBBBBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '7 20\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBWB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '45 9\\r\\nBBWBWBBBW\\r\\nWBBBBWBWB\\r\\nBWWBBWWWW\\r\\nBBBBWWBBB\\r\\nWBBBBWWWB\\r\\nWWBWWBBBW\\r\\nBBWBBWBBB\\r\\nWBBBBWBWW\\r\\nBBBWBWBWW\\r\\nBWBWBBWWB\\r\\nBWBWBBWBW\\r\\nBWBBBWBWB\\r\\nBBWBBWWBB\\r\\nWBBBBWBBB\\r\\nWWBWBBBWB\\r\\nBWWBWWBBB\\r\\nBBWBWBWWB\\r\\nWBWWWWBBW\\r\\nBBBWBWBBB\\r\\nWBWWWBBBB\\r\\nBBBWWBWBB\\r\\nWWBBBBBWB\\r\\nBWBBBWWBB\\r\\nBBBWWBWWW\\r\\nBBWBBBBBW\\r\\nWBBWWWBBW\\r\\nBWBWBWWBB\\r\\nBBWBWBBWB\\r\\nBWWBBBBBB\\r\\nBBBBBBBWB\\r\\nBBBBBWWBB\\r\\nWWWBBBBBB\\r\\nWWWBBBBBW\\r\\nWWBBBBBWW\\r\\nWBWBWBWBB\\r\\nBBBBBBBWB\\r\\nBBWBBWBBB\\r\\nBBBWBBBWW\\r\\nWBWWWWWBW\\r\\nBBBBBBWBB\\r\\nBBWBBBWBW\\r\\nBWBBBBWWW\\r\\nBWWBWBBBB\\r\\nBWBBBBBBB\\r\\nBWBWBBBWW\\r\\n', 'output': ['6\\r\\n']}, {'input': '19 9\\r\\nWWWWBWWBW\\r\\nWBWBWBBWB\\r\\nWWBBWWWBB\\r\\nWWBWWWBWW\\r\\nBWBWBWWWW\\r\\nBBBBWBWWB\\r\\nWWWBBBWBW\\r\\nBWWWBWWWB\\r\\nBBBBWWBWW\\r\\nWWWBBBBBB\\r\\nWBWBWBWWW\\r\\nWBBWWWWBB\\r\\nWWBBWBWWB\\r\\nBBWBBBBWB\\r\\nWBWBBWWWB\\r\\nBWBWWBWBW\\r\\nWWBBBWWBW\\r\\nWBBWBWBWB\\r\\nBBWBBWBBB\\r\\n', 'output': ['5\\r\\n']}, {'input': '2 23\\r\\nBBBBWBBBBBBBBBBBWBBBBBW\\r\\nWBBBBWBWBBBBBBWBWBBBWBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '11 1\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\nW\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 39\\r\\nBBBBBBWWBBWBBBBBBBBBBBBBBWBBBBBBBBBBBBB\\r\\nBBBBBWBBBBBBBBBBWBWWBBWBBBBBBBBBBWBBBBB\\r\\n', 'output': ['2\\r\\n']}, {'input': '36 3\\r\\nBBB\\r\\nBBB\\r\\nWWB\\r\\nBBB\\r\\nBBB\\r\\nBWW\\r\\nWBB\\r\\nBBW\\r\\nWBW\\r\\nBBB\\r\\nBBB\\r\\nBBW\\r\\nBWW\\r\\nWBB\\r\\nBWB\\r\\nWWB\\r\\nBBW\\r\\nWBB\\r\\nBBW\\r\\nWBB\\r\\nBBB\\r\\nWWB\\r\\nWBW\\r\\nBBB\\r\\nBWW\\r\\nBBW\\r\\nWBB\\r\\nWBW\\r\\nWWW\\r\\nBWW\\r\\nBWB\\r\\nWBW\\r\\nBWB\\r\\nBBB\\r\\nBBB\\r\\nWBB\\r\\n', 'output': ['7\\r\\n']}, {'input': '5 20\\r\\nWWBBBBWWWWWBWBWBWWBW\\r\\nWBWWWWWWWWWBWWBWWWBW\\r\\nWBWWBWWBWWWWWBBWWWBW\\r\\nWBWBWWWWWBBWWWWBWWWW\\r\\nWBBWBWWBBWBWBWBBWWWW\\r\\n', 'output': ['3\\r\\n']}, {'input': '19 11\\r\\nWWWBWWBBBBB\\r\\nBWBWBWBWWBW\\r\\nWBBWBBBWWBB\\r\\nWWBBBWBBWWW\\r\\nWWWBBWBWBWW\\r\\nBBWBWBWBBBB\\r\\nBWWBWWWBWBB\\r\\nBWBWWBBWBBW\\r\\nBWBWBWWBWWW\\r\\nWWBWBWWWBWB\\r\\nBBBWWWBWWWW\\r\\nBWBWWWWWBBB\\r\\nBWWWBBBWWBB\\r\\nWWWBWBWWBWB\\r\\nWWWWBWWBWWB\\r\\nBWWWBWBWBBB\\r\\nBBWWWWWWWBW\\r\\nWBWWWBWBBWW\\r\\nWBWWWWBWBWB\\r\\n', 'output': ['4\\r\\n']}, {'input': '6 33\\r\\nWBBWWWWWWWWWBBBWWWWWWWWWWWWWWWBWW\\r\\nWBWWBBWBBWWBWWWWWBBBBBBBWWWBWBWBW\\r\\nWBBBBBBWBBWBWWBBWBBBWBWWBBBWWWWWW\\r\\nWWBWBWBBWBWWBWBWBWBBWWWBWWWWWWWWW\\r\\nWWBWWWWBWBBBBWWWWWWWWWBBWWWBWBWWW\\r\\nBWBWWBBBWBWWBWBBBBWBWBBBWWWWBBWWW\\r\\n', 'output': ['4\\r\\n']}, {'input': '22 17\\r\\nBBBBBWBBWWBBBWBBB\\r\\nBBBBBBBBBBBBWBBBB\\r\\nWBBBBBBBBBBBBBBBB\\r\\nBBBBBBBBBBBBBBBBB\\r\\nBBBBWBWBBBBWBBBBW\\r\\nBBBBBWBBWBBBWWBBB\\r\\nBBBWBWBBBBBBBBBBB\\r\\nBBBWBBBBBBBBBBBBB\\r\\nBWBBWWBBBBBBBBBBB\\r\\nBWBBWBBWBBBBBBBBW\\r\\nBBBBBBWWWBWBBBWWW\\r\\nBWBBWBBBBBBWBBWBB\\r\\nBWWBBBBBBBBBBBBBB\\r\\nBBBBBBBBWBWBWBBBB\\r\\nBBBBBBBBWBBBBBBBB\\r\\nBBBBBBBBBBBBBBWBB\\r\\nBBBWWBBBBBBWWBBBB\\r\\nBBBBBBBWBBBBBBBBB\\r\\nBBBWBBBBBBWBBBBBB\\r\\nWBWBWBBBBBBBWBBBB\\r\\nBBBBBWBBBBBBBBBBB\\r\\nBBBWBBBBBBBBBBBBB\\r\\n', 'output': ['1\\r\\n']}, {'input': '36 6\\r\\nBWWWBW\\r\\nBBBBWB\\r\\nBWWBBB\\r\\nBWBWBB\\r\\nBBBBBB\\r\\nBWWBBW\\r\\nBWBWBW\\r\\nWBBBBB\\r\\nWBBBBB\\r\\nBBWBBB\\r\\nBWBBWB\\r\\nBBWWWB\\r\\nWBBBBB\\r\\nBWBWBB\\r\\nBBBBBW\\r\\nBWWWWB\\r\\nBBBBWB\\r\\nBBBBBB\\r\\nBWBBBB\\r\\nWBWBWB\\r\\nBBBBWW\\r\\nBWBBWB\\r\\nWBBBBW\\r\\nBBBWWW\\r\\nWBBBBB\\r\\nBBBBBW\\r\\nBBBBBW\\r\\nBBBBWW\\r\\nBBBWBW\\r\\nBWBBBB\\r\\nBWBBBW\\r\\nWWBBBW\\r\\nWBWBWB\\r\\nBBBWBW\\r\\nBBWBBB\\r\\nBBBBBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '24 1\\r\\nW\\r\\nB\\r\\nW\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nW\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\nB\\r\\n', 'output': ['3\\r\\n']}, {'input': '7 7\\r\\nBBBBBBB\\r\\nBWWWWWB\\r\\nBWBBBWB\\r\\nBWBWBWB\\r\\nBWBBBWB\\r\\nBWWWWWB\\r\\nBBBBBBB\\r\\n', 'output': ['2\\r\\n']}, {'input': '4 4\\r\\nBWWW\\r\\nWBWB\\r\\nBWBW\\r\\nWBWB\\r\\n', 'output': ['3\\r\\n']}, {'input': '5 5\\r\\nWBWWW\\r\\nBWBWW\\r\\nWBWWB\\r\\nWWBBW\\r\\nWWBWB\\r\\n', 'output': ['3\\r\\n']}, {'input': '10 10\\r\\nBBWWBBBBBW\\r\\nBWWWWBWBWB\\r\\nWBWBWBBBBW\\r\\nWWBBWBBBBW\\r\\nBBBBBBBBBW\\r\\nBBBWWBBWWB\\r\\nWBBWBWWWWB\\r\\nWWWBBBBBWW\\r\\nWBBBBBWBBB\\r\\nWBWWBWWBBB\\r\\n', 'output': ['3\\r\\n']}, {'input': '7 7\\r\\nWBWBBBW\\r\\nBBBWBBW\\r\\nWWWWBWB\\r\\nBBWWBBW\\r\\nWWBWBWW\\r\\nBWWBBWW\\r\\nWWBWBWW\\r\\n', 'output': ['3\\r\\n']}, {'input': '6 6\\r\\nWWWWBB\\r\\nWBWBWW\\r\\nBBBWBW\\r\\nBWWWWB\\r\\nWBBBBW\\r\\nBBWWWB\\r\\n', 'output': ['3\\r\\n']}]", "source_code": "import java.io.*;\n\n\npublic class repaint {\n\tpublic static void main (String [] args){\n\t\tFastScanner fs = new FastScanner();\n\t\tint n = fs.nextInt(), m = fs.nextInt(), x = 0;\n\t\tboolean f[][] = new boolean[n][m];\n\t\tchar g[][] = new char[n][m];\n\t\tfor(int i = 0 ; i < n ; ++i){\n\t\t\tg[i] = fs.next().toCharArray();\n\t\t}\n\t\tfor(int i = 0 ; i < n ; ++i){\n\t\t\tfor(int j = 0 ; j < m ; ++j){\n\t\t\t\tif(i + 1 < n && g[i][j] == g[i + 1][j]){\n\t\t\t\t\tf[i][j] = f[i + 1][j] = true;\n\t\t\t\t}\n\t\t\t\tif(j + 1 < m && g[i][j] == g[i][j + 1]){\n\t\t\t\t\tf[i][j] = f[i][j + 1] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0 ; i < n ; ++i){\n\t\t\tfor(int j = 0 ; j < m ; ++j){\n\t\t\t\tif(f[i][j])\n\t\t\t\t\t++x;\n\t\t\t\telse if(g[i][j] == 'W')\n\t\t\t\t\t++x;\n\t\t\t}\n\t\t}\n\t\tSystem.out.print(x);\n\t}\n\t\n\tprivate static class FastScanner {\n\t\tprivate final InputStream in = System.in;\n\t\tprivate final byte[] buffer = new byte[1024];\n\t\tprivate int ptr = 0;\n\t\tprivate int buflen = 0;\n\t\tprivate boolean hasNextByte() {\n\t\t\t\t\t\t\t\tif (ptr < buflen) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tptr = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbuflen = in.read(buffer);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (buflen <= 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn true;\n\t\t}\n\t\tprivate int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n\t\tprivate static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n\t\tpublic boolean hasNext() { while(hasNextByte() &&!isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\n\t\tpublic String next() {\n\t\t\t\t\t\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\t\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\t\t\t\tint b = readByte();\n\t\t\t\t\t\t\t\twhile(isPrintableChar(b)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsb.appendCodePoint(b);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tb = readByte();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn sb.toString();\n\t\t}\n\t\tpublic long nextLong() {\n\t\t\t\t\t\t\t\tif (!hasNext()) throw new"}
{"src_uid": "1670a3d7dba83e29e98f0ac6fe4acb18", "id": 114, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '3\\r\\n1 2 3\\r\\n', 'output': ['YES\\r\\n0\\r\\n10\\r\\n110\\r\\n']}, {'input': '3\\r\\n1 1 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10\\r\\n4 4 4 4 4 4 4 4 4 4\\r\\n', 'output': ['YES\\r\\n0000\\r\\n0001\\r\\n0010\\r\\n0011\\r\\n0100\\r\\n0101\\r\\n0110\\r\\n0111\\r\\n1000\\r\\n1001\\r\\n']}, {'input': '20\\r\\n6 7 7 7 7 6 7 7 7 7 7 7 7 7 7 7 7 7 6 7\\r\\n', 'output': ['YES\\r\\n000000\\r\\n0000110\\r\\n0000111\\r\\n0001000\\r\\n0001001\\r\\n000001\\r\\n0001010\\r\\n0001011\\r\\n0001100\\r\\n0001101\\r\\n0001110\\r\\n0001111\\r\\n0010000\\r\\n0010001\\r\\n0010010\\r\\n0010011\\r\\n0010100\\r\\n0010101\\r\\n000010\\r\\n0010110\\r\\n']}, {'input': '30\\r\\n9 10 8 10 10 10 10 10 7 7 10 10 10 10 10 10 10 10 10 10 9 10 10 10 10 10 10 10 4 3\\r\\n', 'output': ['YES\\r\\n001101010\\r\\n0011011000\\r\\n00110100\\r\\n0011011001\\r\\n0011011010\\r\\n0011011011\\r\\n0011011100\\r\\n0011011101\\r\\n0011000\\r\\n0011001\\r\\n0011011110\\r\\n0011011111\\r\\n0011100000\\r\\n0011100001\\r\\n0011100010\\r\\n0011100011\\r\\n0011100100\\r\\n0011100101\\r\\n0011100110\\r\\n0011100111\\r\\n001101011\\r\\n0011101000\\r\\n0011101001\\r\\n0011101010\\r\\n0011101011\\r\\n0011101100\\r\\n0011101101\\r\\n0011101110\\r\\n0010\\r\\n000\\r\\n']}, {'input': '20\\r\\n4 4 3 4 4 4 4 4 4 4 4 3 3 2 1 4 4 3 3 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '30\\r\\n6 7 7 6 7 7 7 7 7 7 7 7 7 7 7 5 7 7 7 7 2 1 5 3 7 3 2 7 5 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '65\\r\\n7 8 6 9 10 9 10 10 9 10 10 10 10 10 10 9 9 10 9 10 10 6 9 7 7 6 8 10 10 8 4 5 2 3 5 3 6 5 2 4 10 4 2 8 10 1 1 4 5 3 8 5 6 7 6 1 10 5 2 8 4 9 1 2 7\\r\\n', 'output': ['NO\\r\\n']}, {'input': '85\\r\\n7 9 8 9 5 6 9 8 10 10 9 10 10 10 10 7 7 4 8 7 7 7 9 10 10 9 10 9 10 10 10 8 8 10 10 10 10 10 10 10 10 10 10 10 10 10 10 9 7 10 4 2 9 3 3 6 2 6 5 6 4 1 7 3 7 7 5 8 4 5 4 1 10 2 9 3 1 4 2 9 9 3 5 6 8\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10\\r\\n4 4 4 4 4 4 4 4 2 2\\r\\n', 'output': ['YES\\r\\n1000\\r\\n1001\\r\\n1010\\r\\n1011\\r\\n1100\\r\\n1101\\r\\n1110\\r\\n1111\\r\\n00\\r\\n01\\r\\n']}, {'input': '20\\r\\n5 4 5 5 5 6 5 6 4 5 6 4 5 4 2 4 6 4 4 5\\r\\n', 'output': ['YES\\r\\n10110\\r\\n0100\\r\\n10111\\r\\n11000\\r\\n11001\\r\\n111100\\r\\n11010\\r\\n111101\\r\\n0101\\r\\n11011\\r\\n111110\\r\\n0110\\r\\n11100\\r\\n0111\\r\\n00\\r\\n1000\\r\\n111111\\r\\n1001\\r\\n1010\\r\\n11101\\r\\n']}, {'input': '30\\r\\n7 8 6 4 2 8 8 7 7 10 4 6 4 7 4 4 7 6 7 9 7 3 5 5 10 4 5 8 5 8\\r\\n', 'output': ['YES\\r\\n1110110\\r\\n11111010\\r\\n111000\\r\\n0110\\r\\n00\\r\\n11111011\\r\\n11111100\\r\\n1110111\\r\\n1111000\\r\\n1111111110\\r\\n0111\\r\\n111001\\r\\n1000\\r\\n1111001\\r\\n1001\\r\\n1010\\r\\n1111010\\r\\n111010\\r\\n1111011\\r\\n111111110\\r\\n1111100\\r\\n010\\r\\n11000\\r\\n11001\\r\\n1111111111\\r\\n1011\\r\\n11010\\r\\n11111101\\r\\n11011\\r\\n11111110\\r\\n']}, {'input': '50\\r\\n4 7 9 7 7 5 5 5 8 9 9 7 9 7 7 6 5 6 4 9 6 5 6 6 5 7 7 6 6 6 5 8 2 7 8 7 6 5 7 9 8 7 5 6 6 8 6 6 7 7\\r\\n', 'output': ['YES\\r\\n0100\\r\\n1101110\\r\\n111111010\\r\\n1101111\\r\\n1110000\\r\\n01100\\r\\n01101\\r\\n01110\\r\\n11111000\\r\\n111111011\\r\\n111111100\\r\\n1110001\\r\\n111111101\\r\\n1110010\\r\\n1110011\\r\\n101010\\r\\n01111\\r\\n101011\\r\\n0101\\r\\n111111110\\r\\n101100\\r\\n10000\\r\\n101101\\r\\n101110\\r\\n10001\\r\\n1110100\\r\\n1110101\\r\\n101111\\r\\n110000\\r\\n110001\\r\\n10010\\r\\n11111001\\r\\n00\\r\\n1110110\\r\\n11111010\\r\\n1110111\\r\\n110010\\r\\n10011\\r\\n1111000\\r\\n111111111\\r\\n11111011\\r\\n1111001\\r\\n10100\\r\\n110011\\r\\n110100\\r\\n11111100\\r\\n110101\\r\\n110110\\r\\n1111010\\r\\n1111011\\r\\n']}, {'input': '20\\r\\n2 3 4 4 2 4 4 2 4 4 3 4 4 3 1 3 3 3 2 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '30\\r\\n6 6 6 5 6 7 3 4 6 5 2 4 6 4 5 4 6 5 4 4 6 6 2 1 4 4 6 1 6 7\\r\\n', 'output': ['NO\\r\\n']}, {'input': '65\\r\\n9 7 8 6 6 10 3 9 10 4 8 3 2 8 9 1 6 3 2 7 9 7 8 10 10 4 5 6 8 8 7 10 10 8 6 6 4 8 8 7 6 9 10 7 8 7 3 3 10 8 9 10 1 9 6 9 2 7 9 10 8 10 3 7 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '85\\r\\n9 10 4 5 10 4 10 4 5 7 4 8 10 10 9 6 10 10 7 1 10 8 4 4 7 6 3 9 4 4 9 6 3 3 8 9 8 8 10 6 10 10 4 9 6 9 4 3 4 5 8 6 1 5 9 9 9 7 10 10 7 10 4 4 8 2 1 8 10 10 7 1 3 10 7 10 4 5 10 1 10 8 6 2 10\\r\\n', 'output': ['NO\\r\\n']}, {'input': '200\\r\\n11 23 6 1 15 6 5 9 8 9 13 11 7 21 14 17 8 8 12 6 18 4 9 20 3 9 6 9 9 12 18 5 22 5 16 20 11 6 22 10 5 6 8 19 9 12 14 2 10 6 7 7 18 17 4 16 9 13 3 10 15 8 8 9 13 7 8 18 12 12 13 14 9 8 5 5 22 19 23 15 11 7 23 7 5 3 9 3 15 9 22 9 2 11 21 8 12 7 6 8 10 6 12 9 11 8 7 6 5 7 8 9 10 7 19 12 14 9 6 7 2 7 8 4 12 21 14 4 11 12 9 13 17 4 10 8 17 3 9 5 11 6 4 11 1 13 10 10 8 10 14 23 17 8 20 23 23 23 14 7 18 5 10 21 9 7 7 7 4 23 13 8 9 22 7 4 8 12 8 19 17 11 10 8 8 7 7 13 6 13 14 14 22 2 10 11 5 1 14 13\\r\\n', 'output': ['NO\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['YES\\r\\n0\\r\\n']}, {'input': '2\\r\\n1 1\\r\\n', 'output': ['YES\\r\\n0\\r\\n1\\r\\n']}, {'input': '3\\r\\n1 1 2\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.io.*;\n\npublic class Main {\n    private static final String INPUT = \"input.txt\";\n    private static final String OUTPUT = \"output.txt\";\n    private static final String YES = \"YES\";\n    private static final String NO = \"NO\";\n\n    public static void main (String[] args) throws IOException {\n        InputStream is = System.in;\n        if (args.length > 0) {\n            is = new FileInputStream(new File(args[0]));\n        } else if (args.length > 1) {\n            is = new FileInputStream(new File(args[0]));\n        } else {\n            try {\n                is = new FileInputStream(new File(INPUT));\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n        }\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {\n            int n = Integer.parseInt(reader.readLine());\n            String[] lengths = reader.readLine().split(\" \");\n            String[][] words = new String[n][lengths.length];\n            String[][] nextWords = new String[n][lengths.length];\n            boolean[] valid = new boolean[n];\n            boolean[] used = new boolean[n];\n            String[] ans = new String[n];\n            int i;\n            int j;\n            for (i = 0; i < n; i++) {\n                valid[i] = true;\n                used[i] = false;\n                for (j = 0; j < lengths.length; j++) {\n                    words[i][j] = reader.readLine();\n                }\n            }\n            String word;\n            int index = 0;\n            while (index < n) {\n                if (valid[index]) {\n                    valid[index] = false;\n                    used[index] = true;\n                    word = words[index][0];\n                    for (i = 0; i < n; i++) {\n                        if (used[i]) continue;\n                        if (lengths[i].equals(\"1\")) {\n                            if (words[i][1].equals(word)) {\n                                valid[i] = false;\n                                used[i] = true;\n                                word += words[i][0];\n                            }\n                        } else if (lengths[i].equals(\"2\")) {\n                            if (words[i][1].equals(word) || words[i][2].equals(word)) {\n                                valid[i] = false;\n                                used[i] = true;\n                                word += words[i][1];\n                            }\n                        }\n                    }\n                    ans[index] = word;\n                    index++;\n                }\n                index++;\n            }\n            if (index!= n) {\n                System.out.println(NO);\n            } else {\n                System.out.println(YES);\n                for (i = 0; i < ans.length; i++) {\n                    System.out.println(ans[i]);\n                }\n            }\n        }\n    }\n}"}
{"src_uid": "1670a3d7dba83e29e98f0ac6fe4acb18", "id": 114, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '3\\r\\n1 2 3\\r\\n', 'output': ['YES\\r\\n0\\r\\n10\\r\\n110\\r\\n']}, {'input': '3\\r\\n1 1 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10\\r\\n4 4 4 4 4 4 4 4 4 4\\r\\n', 'output': ['YES\\r\\n0000\\r\\n0001\\r\\n0010\\r\\n0011\\r\\n0100\\r\\n0101\\r\\n0110\\r\\n0111\\r\\n1000\\r\\n1001\\r\\n']}, {'input': '20\\r\\n6 7 7 7 7 6 7 7 7 7 7 7 7 7 7 7 7 7 6 7\\r\\n', 'output': ['YES\\r\\n000000\\r\\n0000110\\r\\n0000111\\r\\n0001000\\r\\n0001001\\r\\n000001\\r\\n0001010\\r\\n0001011\\r\\n0001100\\r\\n0001101\\r\\n0001110\\r\\n0001111\\r\\n0010000\\r\\n0010001\\r\\n0010010\\r\\n0010011\\r\\n0010100\\r\\n0010101\\r\\n000010\\r\\n0010110\\r\\n']}, {'input': '30\\r\\n9 10 8 10 10 10 10 10 7 7 10 10 10 10 10 10 10 10 10 10 9 10 10 10 10 10 10 10 4 3\\r\\n', 'output': ['YES\\r\\n001101010\\r\\n0011011000\\r\\n00110100\\r\\n0011011001\\r\\n0011011010\\r\\n0011011011\\r\\n0011011100\\r\\n0011011101\\r\\n0011000\\r\\n0011001\\r\\n0011011110\\r\\n0011011111\\r\\n0011100000\\r\\n0011100001\\r\\n0011100010\\r\\n0011100011\\r\\n0011100100\\r\\n0011100101\\r\\n0011100110\\r\\n0011100111\\r\\n001101011\\r\\n0011101000\\r\\n0011101001\\r\\n0011101010\\r\\n0011101011\\r\\n0011101100\\r\\n0011101101\\r\\n0011101110\\r\\n0010\\r\\n000\\r\\n']}, {'input': '20\\r\\n4 4 3 4 4 4 4 4 4 4 4 3 3 2 1 4 4 3 3 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '30\\r\\n6 7 7 6 7 7 7 7 7 7 7 7 7 7 7 5 7 7 7 7 2 1 5 3 7 3 2 7 5 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '65\\r\\n7 8 6 9 10 9 10 10 9 10 10 10 10 10 10 9 9 10 9 10 10 6 9 7 7 6 8 10 10 8 4 5 2 3 5 3 6 5 2 4 10 4 2 8 10 1 1 4 5 3 8 5 6 7 6 1 10 5 2 8 4 9 1 2 7\\r\\n', 'output': ['NO\\r\\n']}, {'input': '85\\r\\n7 9 8 9 5 6 9 8 10 10 9 10 10 10 10 7 7 4 8 7 7 7 9 10 10 9 10 9 10 10 10 8 8 10 10 10 10 10 10 10 10 10 10 10 10 10 10 9 7 10 4 2 9 3 3 6 2 6 5 6 4 1 7 3 7 7 5 8 4 5 4 1 10 2 9 3 1 4 2 9 9 3 5 6 8\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10\\r\\n4 4 4 4 4 4 4 4 2 2\\r\\n', 'output': ['YES\\r\\n1000\\r\\n1001\\r\\n1010\\r\\n1011\\r\\n1100\\r\\n1101\\r\\n1110\\r\\n1111\\r\\n00\\r\\n01\\r\\n']}, {'input': '20\\r\\n5 4 5 5 5 6 5 6 4 5 6 4 5 4 2 4 6 4 4 5\\r\\n', 'output': ['YES\\r\\n10110\\r\\n0100\\r\\n10111\\r\\n11000\\r\\n11001\\r\\n111100\\r\\n11010\\r\\n111101\\r\\n0101\\r\\n11011\\r\\n111110\\r\\n0110\\r\\n11100\\r\\n0111\\r\\n00\\r\\n1000\\r\\n111111\\r\\n1001\\r\\n1010\\r\\n11101\\r\\n']}, {'input': '30\\r\\n7 8 6 4 2 8 8 7 7 10 4 6 4 7 4 4 7 6 7 9 7 3 5 5 10 4 5 8 5 8\\r\\n', 'output': ['YES\\r\\n1110110\\r\\n11111010\\r\\n111000\\r\\n0110\\r\\n00\\r\\n11111011\\r\\n11111100\\r\\n1110111\\r\\n1111000\\r\\n1111111110\\r\\n0111\\r\\n111001\\r\\n1000\\r\\n1111001\\r\\n1001\\r\\n1010\\r\\n1111010\\r\\n111010\\r\\n1111011\\r\\n111111110\\r\\n1111100\\r\\n010\\r\\n11000\\r\\n11001\\r\\n1111111111\\r\\n1011\\r\\n11010\\r\\n11111101\\r\\n11011\\r\\n11111110\\r\\n']}, {'input': '50\\r\\n4 7 9 7 7 5 5 5 8 9 9 7 9 7 7 6 5 6 4 9 6 5 6 6 5 7 7 6 6 6 5 8 2 7 8 7 6 5 7 9 8 7 5 6 6 8 6 6 7 7\\r\\n', 'output': ['YES\\r\\n0100\\r\\n1101110\\r\\n111111010\\r\\n1101111\\r\\n1110000\\r\\n01100\\r\\n01101\\r\\n01110\\r\\n11111000\\r\\n111111011\\r\\n111111100\\r\\n1110001\\r\\n111111101\\r\\n1110010\\r\\n1110011\\r\\n101010\\r\\n01111\\r\\n101011\\r\\n0101\\r\\n111111110\\r\\n101100\\r\\n10000\\r\\n101101\\r\\n101110\\r\\n10001\\r\\n1110100\\r\\n1110101\\r\\n101111\\r\\n110000\\r\\n110001\\r\\n10010\\r\\n11111001\\r\\n00\\r\\n1110110\\r\\n11111010\\r\\n1110111\\r\\n110010\\r\\n10011\\r\\n1111000\\r\\n111111111\\r\\n11111011\\r\\n1111001\\r\\n10100\\r\\n110011\\r\\n110100\\r\\n11111100\\r\\n110101\\r\\n110110\\r\\n1111010\\r\\n1111011\\r\\n']}, {'input': '20\\r\\n2 3 4 4 2 4 4 2 4 4 3 4 4 3 1 3 3 3 2 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '30\\r\\n6 6 6 5 6 7 3 4 6 5 2 4 6 4 5 4 6 5 4 4 6 6 2 1 4 4 6 1 6 7\\r\\n', 'output': ['NO\\r\\n']}, {'input': '65\\r\\n9 7 8 6 6 10 3 9 10 4 8 3 2 8 9 1 6 3 2 7 9 7 8 10 10 4 5 6 8 8 7 10 10 8 6 6 4 8 8 7 6 9 10 7 8 7 3 3 10 8 9 10 1 9 6 9 2 7 9 10 8 10 3 7 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '85\\r\\n9 10 4 5 10 4 10 4 5 7 4 8 10 10 9 6 10 10 7 1 10 8 4 4 7 6 3 9 4 4 9 6 3 3 8 9 8 8 10 6 10 10 4 9 6 9 4 3 4 5 8 6 1 5 9 9 9 7 10 10 7 10 4 4 8 2 1 8 10 10 7 1 3 10 7 10 4 5 10 1 10 8 6 2 10\\r\\n', 'output': ['NO\\r\\n']}, {'input': '200\\r\\n11 23 6 1 15 6 5 9 8 9 13 11 7 21 14 17 8 8 12 6 18 4 9 20 3 9 6 9 9 12 18 5 22 5 16 20 11 6 22 10 5 6 8 19 9 12 14 2 10 6 7 7 18 17 4 16 9 13 3 10 15 8 8 9 13 7 8 18 12 12 13 14 9 8 5 5 22 19 23 15 11 7 23 7 5 3 9 3 15 9 22 9 2 11 21 8 12 7 6 8 10 6 12 9 11 8 7 6 5 7 8 9 10 7 19 12 14 9 6 7 2 7 8 4 12 21 14 4 11 12 9 13 17 4 10 8 17 3 9 5 11 6 4 11 1 13 10 10 8 10 14 23 17 8 20 23 23 23 14 7 18 5 10 21 9 7 7 7 4 23 13 8 9 22 7 4 8 12 8 19 17 11 10 8 8 7 7 13 6 13 14 14 22 2 10 11 5 1 14 13\\r\\n', 'output': ['NO\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['YES\\r\\n0\\r\\n']}, {'input': '2\\r\\n1 1\\r\\n', 'output': ['YES\\r\\n0\\r\\n1\\r\\n']}, {'input': '3\\r\\n1 1 2\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Solution implements Runnable {\n  private void solve() throws IOException {\n    int n = nextInt();\n    int[] l = new int[n];\n    for (int i = 0; i < l.length; ++i)\n      l[i] = nextInt();\n    int[] max = new int[n];\n    max[n - 1] = l[n - 1];\n    for (int i = n - 2; i >= 0; --i) {\n      max[i] = l[i + 1];\n      if (max[i] < l[i])\n        max[i] = l[i];\n    }\n    int min = 0;\n    while (min + 1 < max[min]) ++min;\n    if (max[min] < min + 1) {\n      out.println(\"NO\");\n      return;\n    }\n    out.println(\"YES\");\n    char[][] ans = new char[n][max[0]];\n    ans[n - 1] = (\"0\").toCharArray();\n    for (int i = n - 2; i >= 0; --i) {\n      ans[i] = (\"0\" + (\"0\" + ans[i + 1]).substring(max[i + 1] - l[i + 1])).toCharArray();\n    }\n    for (int i = 0; i < n; ++i)\n      out.println(ans[i]);\n  }\n\n  private static final int BUF_SIZE = 1 << 13; // 8192\n\n  private byte[] inbuf = new byte[BUF_SIZE];\n  private int ptr = BUF_SIZE;\n  private int buflen = 0;\n  private boolean hasNextByte() {\n    if (ptr < buflen)\n      return true;\n    if (ptr < BUF_SIZE) {\n      ptr = 0;\n      try {\n        buflen = in.read(inbuf);\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n      if (buflen <= 0)\n        return false;\n    }\n    return true;\n  }\n  private boolean hasNextByteSpace() throws IOException {\n    if (hasNextByte()) {\n      int b = inbuf[ptr];\n      while (b =='' || b == '\\t' || b == '\\n' || b == '\\r') {\n        if (hasNextByte())\n          b = inbuf[++ptr];\n        else\n          return false;\n      }\n      return true;\n    }\n    return false;\n  }\n  private boolean hasNextByteChar(int c) throws IOException {\n    if (hasNextByte()) {\n      int b = inbuf[ptr];\n      while (b!= c) {\n        if (hasNextByte())\n          b = inbuf[++ptr];\n        else\n          return false;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  private InputStream in;\n  public Solution() {\n    in = System.in;\n  }\n\n  private PrintWriter out;\n  private int nextInt() throws IOException {\n    if (!hasNextByte())\n      throw new NumberFormatException();\n    int n = 0;\n    boolean minus = false;\n    int b = inbuf[ptr++];\n    if (b == '-') {\n      minus = true;\n      b = inbuf[ptr++];\n    }\n    if (b < '0' || '9' < b)\n      throw new NumberFormatException();\n    n = (int)b - '0';\n    while (hasNextByte()) {\n      b = inbuf[ptr++];\n      if (b < '0' || '9' < b)\n        break;\n      n = n * 10 + b - '0';\n    }\n    return minus? -n : n;\n  }\n  private long nextLong() throws IOException {\n    long n = 0;\n    boolean minus = false;\n    int b = inbuf[ptr++];\n    if (b == '-') {\n      minus = true;\n      b = inbuf[ptr++];\n    }\n    if (b < '0' || '9' < b)\n      throw new NumberFormat"}
{"src_uid": "1670a3d7dba83e29e98f0ac6fe4acb18", "id": 114, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '3\\r\\n1 2 3\\r\\n', 'output': ['YES\\r\\n0\\r\\n10\\r\\n110\\r\\n']}, {'input': '3\\r\\n1 1 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10\\r\\n4 4 4 4 4 4 4 4 4 4\\r\\n', 'output': ['YES\\r\\n0000\\r\\n0001\\r\\n0010\\r\\n0011\\r\\n0100\\r\\n0101\\r\\n0110\\r\\n0111\\r\\n1000\\r\\n1001\\r\\n']}, {'input': '20\\r\\n6 7 7 7 7 6 7 7 7 7 7 7 7 7 7 7 7 7 6 7\\r\\n', 'output': ['YES\\r\\n000000\\r\\n0000110\\r\\n0000111\\r\\n0001000\\r\\n0001001\\r\\n000001\\r\\n0001010\\r\\n0001011\\r\\n0001100\\r\\n0001101\\r\\n0001110\\r\\n0001111\\r\\n0010000\\r\\n0010001\\r\\n0010010\\r\\n0010011\\r\\n0010100\\r\\n0010101\\r\\n000010\\r\\n0010110\\r\\n']}, {'input': '30\\r\\n9 10 8 10 10 10 10 10 7 7 10 10 10 10 10 10 10 10 10 10 9 10 10 10 10 10 10 10 4 3\\r\\n', 'output': ['YES\\r\\n001101010\\r\\n0011011000\\r\\n00110100\\r\\n0011011001\\r\\n0011011010\\r\\n0011011011\\r\\n0011011100\\r\\n0011011101\\r\\n0011000\\r\\n0011001\\r\\n0011011110\\r\\n0011011111\\r\\n0011100000\\r\\n0011100001\\r\\n0011100010\\r\\n0011100011\\r\\n0011100100\\r\\n0011100101\\r\\n0011100110\\r\\n0011100111\\r\\n001101011\\r\\n0011101000\\r\\n0011101001\\r\\n0011101010\\r\\n0011101011\\r\\n0011101100\\r\\n0011101101\\r\\n0011101110\\r\\n0010\\r\\n000\\r\\n']}, {'input': '20\\r\\n4 4 3 4 4 4 4 4 4 4 4 3 3 2 1 4 4 3 3 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '30\\r\\n6 7 7 6 7 7 7 7 7 7 7 7 7 7 7 5 7 7 7 7 2 1 5 3 7 3 2 7 5 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '65\\r\\n7 8 6 9 10 9 10 10 9 10 10 10 10 10 10 9 9 10 9 10 10 6 9 7 7 6 8 10 10 8 4 5 2 3 5 3 6 5 2 4 10 4 2 8 10 1 1 4 5 3 8 5 6 7 6 1 10 5 2 8 4 9 1 2 7\\r\\n', 'output': ['NO\\r\\n']}, {'input': '85\\r\\n7 9 8 9 5 6 9 8 10 10 9 10 10 10 10 7 7 4 8 7 7 7 9 10 10 9 10 9 10 10 10 8 8 10 10 10 10 10 10 10 10 10 10 10 10 10 10 9 7 10 4 2 9 3 3 6 2 6 5 6 4 1 7 3 7 7 5 8 4 5 4 1 10 2 9 3 1 4 2 9 9 3 5 6 8\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10\\r\\n4 4 4 4 4 4 4 4 2 2\\r\\n', 'output': ['YES\\r\\n1000\\r\\n1001\\r\\n1010\\r\\n1011\\r\\n1100\\r\\n1101\\r\\n1110\\r\\n1111\\r\\n00\\r\\n01\\r\\n']}, {'input': '20\\r\\n5 4 5 5 5 6 5 6 4 5 6 4 5 4 2 4 6 4 4 5\\r\\n', 'output': ['YES\\r\\n10110\\r\\n0100\\r\\n10111\\r\\n11000\\r\\n11001\\r\\n111100\\r\\n11010\\r\\n111101\\r\\n0101\\r\\n11011\\r\\n111110\\r\\n0110\\r\\n11100\\r\\n0111\\r\\n00\\r\\n1000\\r\\n111111\\r\\n1001\\r\\n1010\\r\\n11101\\r\\n']}, {'input': '30\\r\\n7 8 6 4 2 8 8 7 7 10 4 6 4 7 4 4 7 6 7 9 7 3 5 5 10 4 5 8 5 8\\r\\n', 'output': ['YES\\r\\n1110110\\r\\n11111010\\r\\n111000\\r\\n0110\\r\\n00\\r\\n11111011\\r\\n11111100\\r\\n1110111\\r\\n1111000\\r\\n1111111110\\r\\n0111\\r\\n111001\\r\\n1000\\r\\n1111001\\r\\n1001\\r\\n1010\\r\\n1111010\\r\\n111010\\r\\n1111011\\r\\n111111110\\r\\n1111100\\r\\n010\\r\\n11000\\r\\n11001\\r\\n1111111111\\r\\n1011\\r\\n11010\\r\\n11111101\\r\\n11011\\r\\n11111110\\r\\n']}, {'input': '50\\r\\n4 7 9 7 7 5 5 5 8 9 9 7 9 7 7 6 5 6 4 9 6 5 6 6 5 7 7 6 6 6 5 8 2 7 8 7 6 5 7 9 8 7 5 6 6 8 6 6 7 7\\r\\n', 'output': ['YES\\r\\n0100\\r\\n1101110\\r\\n111111010\\r\\n1101111\\r\\n1110000\\r\\n01100\\r\\n01101\\r\\n01110\\r\\n11111000\\r\\n111111011\\r\\n111111100\\r\\n1110001\\r\\n111111101\\r\\n1110010\\r\\n1110011\\r\\n101010\\r\\n01111\\r\\n101011\\r\\n0101\\r\\n111111110\\r\\n101100\\r\\n10000\\r\\n101101\\r\\n101110\\r\\n10001\\r\\n1110100\\r\\n1110101\\r\\n101111\\r\\n110000\\r\\n110001\\r\\n10010\\r\\n11111001\\r\\n00\\r\\n1110110\\r\\n11111010\\r\\n1110111\\r\\n110010\\r\\n10011\\r\\n1111000\\r\\n111111111\\r\\n11111011\\r\\n1111001\\r\\n10100\\r\\n110011\\r\\n110100\\r\\n11111100\\r\\n110101\\r\\n110110\\r\\n1111010\\r\\n1111011\\r\\n']}, {'input': '20\\r\\n2 3 4 4 2 4 4 2 4 4 3 4 4 3 1 3 3 3 2 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '30\\r\\n6 6 6 5 6 7 3 4 6 5 2 4 6 4 5 4 6 5 4 4 6 6 2 1 4 4 6 1 6 7\\r\\n', 'output': ['NO\\r\\n']}, {'input': '65\\r\\n9 7 8 6 6 10 3 9 10 4 8 3 2 8 9 1 6 3 2 7 9 7 8 10 10 4 5 6 8 8 7 10 10 8 6 6 4 8 8 7 6 9 10 7 8 7 3 3 10 8 9 10 1 9 6 9 2 7 9 10 8 10 3 7 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '85\\r\\n9 10 4 5 10 4 10 4 5 7 4 8 10 10 9 6 10 10 7 1 10 8 4 4 7 6 3 9 4 4 9 6 3 3 8 9 8 8 10 6 10 10 4 9 6 9 4 3 4 5 8 6 1 5 9 9 9 7 10 10 7 10 4 4 8 2 1 8 10 10 7 1 3 10 7 10 4 5 10 1 10 8 6 2 10\\r\\n', 'output': ['NO\\r\\n']}, {'input': '200\\r\\n11 23 6 1 15 6 5 9 8 9 13 11 7 21 14 17 8 8 12 6 18 4 9 20 3 9 6 9 9 12 18 5 22 5 16 20 11 6 22 10 5 6 8 19 9 12 14 2 10 6 7 7 18 17 4 16 9 13 3 10 15 8 8 9 13 7 8 18 12 12 13 14 9 8 5 5 22 19 23 15 11 7 23 7 5 3 9 3 15 9 22 9 2 11 21 8 12 7 6 8 10 6 12 9 11 8 7 6 5 7 8 9 10 7 19 12 14 9 6 7 2 7 8 4 12 21 14 4 11 12 9 13 17 4 10 8 17 3 9 5 11 6 4 11 1 13 10 10 8 10 14 23 17 8 20 23 23 23 14 7 18 5 10 21 9 7 7 7 4 23 13 8 9 22 7 4 8 12 8 19 17 11 10 8 8 7 7 13 6 13 14 14 22 2 10 11 5 1 14 13\\r\\n', 'output': ['NO\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['YES\\r\\n0\\r\\n']}, {'input': '2\\r\\n1 1\\r\\n', 'output': ['YES\\r\\n0\\r\\n1\\r\\n']}, {'input': '3\\r\\n1 1 2\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.util.ArrayList;\nimport java.util.List;\nimport static java.util.stream.Collectors.groupingBy;\nimport static java.util.stream.Collectors.toList;\n\n/**\n *\n * @author Ayush Raj\n */\npublic class JavaApplication9 {\n\n    public static void main(String[] args) {\n        int n = Inputs.nextInt();\n        int[] l = new int[n];\n        for (int i = 0; i < n; i++) {\n            l[i] = Inputs.nextInt();\n        }\n        boolean[] visited = new boolean[l.length];\n        List<int[]> groups = new ArrayList();\n        for (int i = 0; i < l.length; i++) {\n            int pos = i;\n            while(pos < l.length){\n                if(visited[pos]){\n                    pos = i+1;\n                    continue;\n                }\n                int j = pos;\n                boolean flag = false;\n                while(j < l.length && l[pos] <= l[j]){\n                    flag |= visited[j];\n                    j++;\n                }\n                pos = j;\n                if(flag){\n                    visited[i] = true;\n                    pos = i+1;\n                }\n            }\n        }\n        for (int i = 0; i < l.length; i++) {\n            if(visited[i])\n                groups.add(new int[]{l[i],i});\n        }\n        boolean flag = true;\n        List<int[]> group2 = new ArrayList();\n        while(!groups.isEmpty()){\n            group2.add(groups.remove(0));\n            while(groups.size()>0 && groups.get(0)[0] <= group2.get(group2.size()-1)[0])\n                group2.add(groups.remove(0));\n        }\n        for(int[] group : group2){\n            int pos = group[1];\n            StringBuilder sb = new StringBuilder();\n            sb.append(0);\n            for (int j = 0; j < group[0]; j++) {\n                sb.append(1);\n            }\n            int tmp = 0;\n            for (int j = 0; j < l.length; j++) {\n                if(pos < l.length && l[pos] == group[0] &&!visited[pos]){\n                    tmp = pos;\n                    break;\n                }\n            }\n            if(pos!= tmp && flag){\n                flag = false;\n                System.out.println(\"NO\");\n                System.exit(0);\n            }\n            pos = tmp;\n            String[] output = new String[l.length-pos];\n            for(int j = pos; j < l.length; j++){\n                output[j-pos] = Outputs.toString(new String[]{\"\", Integer.toString(l[j])});\n            }\n            int cnt = group[0];\n            for(String output1 : output){\n                if(cnt > 0){\n                    int j = 0;\n                    for( ; j < output1.length()-cnt; j++){\n                        if(output1.charAt(j)!= '1'){\n                            break;\n                        }\n                    }\n                    int k = 0;\n                    for( ; k < output1.length()-cnt-j; k++){\n                        if(output1.charAt(j)!= '1'){\n                            break;\n                        }\n                    }\n                    String word = new String(new char[]{output1.charAt(j), output1.charAt(j+k)});\n                    sb.append(word);\n                    cnt -= k;\n                }\n                else{\n                    sb.append(output1);\n                }\n            }\n            System.out.println(sb);\n        }\n        System.out.println(\"YES\");\n    }\n}\n\nclass Inputs {\n    static boolean hasNextByte() throws java.io.IOException {\n        java.io.BufferedInputStream stream = new java.io.BufferedInputStream(System.in);\n        int b1 = stream.read();\n        while(b1!=-1 && b1!= '\\n')\n            b1 = stream.read();"}
{"src_uid": "1670a3d7dba83e29e98f0ac6fe4acb18", "id": 114, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '3\\r\\n1 2 3\\r\\n', 'output': ['YES\\r\\n0\\r\\n10\\r\\n110\\r\\n']}, {'input': '3\\r\\n1 1 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10\\r\\n4 4 4 4 4 4 4 4 4 4\\r\\n', 'output': ['YES\\r\\n0000\\r\\n0001\\r\\n0010\\r\\n0011\\r\\n0100\\r\\n0101\\r\\n0110\\r\\n0111\\r\\n1000\\r\\n1001\\r\\n']}, {'input': '20\\r\\n6 7 7 7 7 6 7 7 7 7 7 7 7 7 7 7 7 7 6 7\\r\\n', 'output': ['YES\\r\\n000000\\r\\n0000110\\r\\n0000111\\r\\n0001000\\r\\n0001001\\r\\n000001\\r\\n0001010\\r\\n0001011\\r\\n0001100\\r\\n0001101\\r\\n0001110\\r\\n0001111\\r\\n0010000\\r\\n0010001\\r\\n0010010\\r\\n0010011\\r\\n0010100\\r\\n0010101\\r\\n000010\\r\\n0010110\\r\\n']}, {'input': '30\\r\\n9 10 8 10 10 10 10 10 7 7 10 10 10 10 10 10 10 10 10 10 9 10 10 10 10 10 10 10 4 3\\r\\n', 'output': ['YES\\r\\n001101010\\r\\n0011011000\\r\\n00110100\\r\\n0011011001\\r\\n0011011010\\r\\n0011011011\\r\\n0011011100\\r\\n0011011101\\r\\n0011000\\r\\n0011001\\r\\n0011011110\\r\\n0011011111\\r\\n0011100000\\r\\n0011100001\\r\\n0011100010\\r\\n0011100011\\r\\n0011100100\\r\\n0011100101\\r\\n0011100110\\r\\n0011100111\\r\\n001101011\\r\\n0011101000\\r\\n0011101001\\r\\n0011101010\\r\\n0011101011\\r\\n0011101100\\r\\n0011101101\\r\\n0011101110\\r\\n0010\\r\\n000\\r\\n']}, {'input': '20\\r\\n4 4 3 4 4 4 4 4 4 4 4 3 3 2 1 4 4 3 3 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '30\\r\\n6 7 7 6 7 7 7 7 7 7 7 7 7 7 7 5 7 7 7 7 2 1 5 3 7 3 2 7 5 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '65\\r\\n7 8 6 9 10 9 10 10 9 10 10 10 10 10 10 9 9 10 9 10 10 6 9 7 7 6 8 10 10 8 4 5 2 3 5 3 6 5 2 4 10 4 2 8 10 1 1 4 5 3 8 5 6 7 6 1 10 5 2 8 4 9 1 2 7\\r\\n', 'output': ['NO\\r\\n']}, {'input': '85\\r\\n7 9 8 9 5 6 9 8 10 10 9 10 10 10 10 7 7 4 8 7 7 7 9 10 10 9 10 9 10 10 10 8 8 10 10 10 10 10 10 10 10 10 10 10 10 10 10 9 7 10 4 2 9 3 3 6 2 6 5 6 4 1 7 3 7 7 5 8 4 5 4 1 10 2 9 3 1 4 2 9 9 3 5 6 8\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10\\r\\n4 4 4 4 4 4 4 4 2 2\\r\\n', 'output': ['YES\\r\\n1000\\r\\n1001\\r\\n1010\\r\\n1011\\r\\n1100\\r\\n1101\\r\\n1110\\r\\n1111\\r\\n00\\r\\n01\\r\\n']}, {'input': '20\\r\\n5 4 5 5 5 6 5 6 4 5 6 4 5 4 2 4 6 4 4 5\\r\\n', 'output': ['YES\\r\\n10110\\r\\n0100\\r\\n10111\\r\\n11000\\r\\n11001\\r\\n111100\\r\\n11010\\r\\n111101\\r\\n0101\\r\\n11011\\r\\n111110\\r\\n0110\\r\\n11100\\r\\n0111\\r\\n00\\r\\n1000\\r\\n111111\\r\\n1001\\r\\n1010\\r\\n11101\\r\\n']}, {'input': '30\\r\\n7 8 6 4 2 8 8 7 7 10 4 6 4 7 4 4 7 6 7 9 7 3 5 5 10 4 5 8 5 8\\r\\n', 'output': ['YES\\r\\n1110110\\r\\n11111010\\r\\n111000\\r\\n0110\\r\\n00\\r\\n11111011\\r\\n11111100\\r\\n1110111\\r\\n1111000\\r\\n1111111110\\r\\n0111\\r\\n111001\\r\\n1000\\r\\n1111001\\r\\n1001\\r\\n1010\\r\\n1111010\\r\\n111010\\r\\n1111011\\r\\n111111110\\r\\n1111100\\r\\n010\\r\\n11000\\r\\n11001\\r\\n1111111111\\r\\n1011\\r\\n11010\\r\\n11111101\\r\\n11011\\r\\n11111110\\r\\n']}, {'input': '50\\r\\n4 7 9 7 7 5 5 5 8 9 9 7 9 7 7 6 5 6 4 9 6 5 6 6 5 7 7 6 6 6 5 8 2 7 8 7 6 5 7 9 8 7 5 6 6 8 6 6 7 7\\r\\n', 'output': ['YES\\r\\n0100\\r\\n1101110\\r\\n111111010\\r\\n1101111\\r\\n1110000\\r\\n01100\\r\\n01101\\r\\n01110\\r\\n11111000\\r\\n111111011\\r\\n111111100\\r\\n1110001\\r\\n111111101\\r\\n1110010\\r\\n1110011\\r\\n101010\\r\\n01111\\r\\n101011\\r\\n0101\\r\\n111111110\\r\\n101100\\r\\n10000\\r\\n101101\\r\\n101110\\r\\n10001\\r\\n1110100\\r\\n1110101\\r\\n101111\\r\\n110000\\r\\n110001\\r\\n10010\\r\\n11111001\\r\\n00\\r\\n1110110\\r\\n11111010\\r\\n1110111\\r\\n110010\\r\\n10011\\r\\n1111000\\r\\n111111111\\r\\n11111011\\r\\n1111001\\r\\n10100\\r\\n110011\\r\\n110100\\r\\n11111100\\r\\n110101\\r\\n110110\\r\\n1111010\\r\\n1111011\\r\\n']}, {'input': '20\\r\\n2 3 4 4 2 4 4 2 4 4 3 4 4 3 1 3 3 3 2 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '30\\r\\n6 6 6 5 6 7 3 4 6 5 2 4 6 4 5 4 6 5 4 4 6 6 2 1 4 4 6 1 6 7\\r\\n', 'output': ['NO\\r\\n']}, {'input': '65\\r\\n9 7 8 6 6 10 3 9 10 4 8 3 2 8 9 1 6 3 2 7 9 7 8 10 10 4 5 6 8 8 7 10 10 8 6 6 4 8 8 7 6 9 10 7 8 7 3 3 10 8 9 10 1 9 6 9 2 7 9 10 8 10 3 7 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '85\\r\\n9 10 4 5 10 4 10 4 5 7 4 8 10 10 9 6 10 10 7 1 10 8 4 4 7 6 3 9 4 4 9 6 3 3 8 9 8 8 10 6 10 10 4 9 6 9 4 3 4 5 8 6 1 5 9 9 9 7 10 10 7 10 4 4 8 2 1 8 10 10 7 1 3 10 7 10 4 5 10 1 10 8 6 2 10\\r\\n', 'output': ['NO\\r\\n']}, {'input': '200\\r\\n11 23 6 1 15 6 5 9 8 9 13 11 7 21 14 17 8 8 12 6 18 4 9 20 3 9 6 9 9 12 18 5 22 5 16 20 11 6 22 10 5 6 8 19 9 12 14 2 10 6 7 7 18 17 4 16 9 13 3 10 15 8 8 9 13 7 8 18 12 12 13 14 9 8 5 5 22 19 23 15 11 7 23 7 5 3 9 3 15 9 22 9 2 11 21 8 12 7 6 8 10 6 12 9 11 8 7 6 5 7 8 9 10 7 19 12 14 9 6 7 2 7 8 4 12 21 14 4 11 12 9 13 17 4 10 8 17 3 9 5 11 6 4 11 1 13 10 10 8 10 14 23 17 8 20 23 23 23 14 7 18 5 10 21 9 7 7 7 4 23 13 8 9 22 7 4 8 12 8 19 17 11 10 8 8 7 7 13 6 13 14 14 22 2 10 11 5 1 14 13\\r\\n', 'output': ['NO\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['YES\\r\\n0\\r\\n']}, {'input': '2\\r\\n1 1\\r\\n', 'output': ['YES\\r\\n0\\r\\n1\\r\\n']}, {'input': '3\\r\\n1 1 2\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.io.*;\nimport java.util.ArrayList;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class HelloWorld {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) throws IOException {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        int N = Integer.parseInt(br.readLine()), x, min = Integer.MAX_VALUE;\n        boolean[][] dp = new boolean[1100][1100]; //dp[i][j] if a word of length i can be 1th char of a word of length j\n        String[] ans = new String[N]; // the answers will be written here\n        for (int l = 0; l < N; l++)\n        {\n            dp[Integer.parseInt(br.readLine().split(\" \")[l])][1] = true;\n        }\n        StringBuilder res = new StringBuilder();\n        int[] idx = new int[N]; // index in the array of the first character\n        for (int j = 2; j <= 1000; j++)\n        {\n            for (int i = 0; i <= 1000 - j; i++)\n            {\n                if (dp[i][j - 1])\n                {\n                    for (x = 1; i + x <= 1000 && dp[i][i + x]; x++) ;\n                    if (j + x > 1000) dp[i][j] = true;\n                }\n            }\n        }\n        for (int i = 1; i < 1001; i++)\n        {\n            for (int j = 0; j < i; j++)\n            {\n                if (dp[j][i]) \n                {\n                    idx[min] = j;\n                    min = i;\n                }\n            }\n            if (min < 1001)\n            {\n                if (idx[min] == 0) res.append(1);\n                else res.append(idx[min] + 1);\n                min = Integer.MAX_VALUE;\n            }\n        }\n        if (res.length() == 0) System.out.println(\"NO\");\n        else\n        {\n            System.out.println(\"YES\");\n            System.out.println(res);\n        }\n    }\n}\n"}
{"src_uid": "1670a3d7dba83e29e98f0ac6fe4acb18", "id": 114, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '3\\r\\n1 2 3\\r\\n', 'output': ['YES\\r\\n0\\r\\n10\\r\\n110\\r\\n']}, {'input': '3\\r\\n1 1 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10\\r\\n4 4 4 4 4 4 4 4 4 4\\r\\n', 'output': ['YES\\r\\n0000\\r\\n0001\\r\\n0010\\r\\n0011\\r\\n0100\\r\\n0101\\r\\n0110\\r\\n0111\\r\\n1000\\r\\n1001\\r\\n']}, {'input': '20\\r\\n6 7 7 7 7 6 7 7 7 7 7 7 7 7 7 7 7 7 6 7\\r\\n', 'output': ['YES\\r\\n000000\\r\\n0000110\\r\\n0000111\\r\\n0001000\\r\\n0001001\\r\\n000001\\r\\n0001010\\r\\n0001011\\r\\n0001100\\r\\n0001101\\r\\n0001110\\r\\n0001111\\r\\n0010000\\r\\n0010001\\r\\n0010010\\r\\n0010011\\r\\n0010100\\r\\n0010101\\r\\n000010\\r\\n0010110\\r\\n']}, {'input': '30\\r\\n9 10 8 10 10 10 10 10 7 7 10 10 10 10 10 10 10 10 10 10 9 10 10 10 10 10 10 10 4 3\\r\\n', 'output': ['YES\\r\\n001101010\\r\\n0011011000\\r\\n00110100\\r\\n0011011001\\r\\n0011011010\\r\\n0011011011\\r\\n0011011100\\r\\n0011011101\\r\\n0011000\\r\\n0011001\\r\\n0011011110\\r\\n0011011111\\r\\n0011100000\\r\\n0011100001\\r\\n0011100010\\r\\n0011100011\\r\\n0011100100\\r\\n0011100101\\r\\n0011100110\\r\\n0011100111\\r\\n001101011\\r\\n0011101000\\r\\n0011101001\\r\\n0011101010\\r\\n0011101011\\r\\n0011101100\\r\\n0011101101\\r\\n0011101110\\r\\n0010\\r\\n000\\r\\n']}, {'input': '20\\r\\n4 4 3 4 4 4 4 4 4 4 4 3 3 2 1 4 4 3 3 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '30\\r\\n6 7 7 6 7 7 7 7 7 7 7 7 7 7 7 5 7 7 7 7 2 1 5 3 7 3 2 7 5 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '65\\r\\n7 8 6 9 10 9 10 10 9 10 10 10 10 10 10 9 9 10 9 10 10 6 9 7 7 6 8 10 10 8 4 5 2 3 5 3 6 5 2 4 10 4 2 8 10 1 1 4 5 3 8 5 6 7 6 1 10 5 2 8 4 9 1 2 7\\r\\n', 'output': ['NO\\r\\n']}, {'input': '85\\r\\n7 9 8 9 5 6 9 8 10 10 9 10 10 10 10 7 7 4 8 7 7 7 9 10 10 9 10 9 10 10 10 8 8 10 10 10 10 10 10 10 10 10 10 10 10 10 10 9 7 10 4 2 9 3 3 6 2 6 5 6 4 1 7 3 7 7 5 8 4 5 4 1 10 2 9 3 1 4 2 9 9 3 5 6 8\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10\\r\\n4 4 4 4 4 4 4 4 2 2\\r\\n', 'output': ['YES\\r\\n1000\\r\\n1001\\r\\n1010\\r\\n1011\\r\\n1100\\r\\n1101\\r\\n1110\\r\\n1111\\r\\n00\\r\\n01\\r\\n']}, {'input': '20\\r\\n5 4 5 5 5 6 5 6 4 5 6 4 5 4 2 4 6 4 4 5\\r\\n', 'output': ['YES\\r\\n10110\\r\\n0100\\r\\n10111\\r\\n11000\\r\\n11001\\r\\n111100\\r\\n11010\\r\\n111101\\r\\n0101\\r\\n11011\\r\\n111110\\r\\n0110\\r\\n11100\\r\\n0111\\r\\n00\\r\\n1000\\r\\n111111\\r\\n1001\\r\\n1010\\r\\n11101\\r\\n']}, {'input': '30\\r\\n7 8 6 4 2 8 8 7 7 10 4 6 4 7 4 4 7 6 7 9 7 3 5 5 10 4 5 8 5 8\\r\\n', 'output': ['YES\\r\\n1110110\\r\\n11111010\\r\\n111000\\r\\n0110\\r\\n00\\r\\n11111011\\r\\n11111100\\r\\n1110111\\r\\n1111000\\r\\n1111111110\\r\\n0111\\r\\n111001\\r\\n1000\\r\\n1111001\\r\\n1001\\r\\n1010\\r\\n1111010\\r\\n111010\\r\\n1111011\\r\\n111111110\\r\\n1111100\\r\\n010\\r\\n11000\\r\\n11001\\r\\n1111111111\\r\\n1011\\r\\n11010\\r\\n11111101\\r\\n11011\\r\\n11111110\\r\\n']}, {'input': '50\\r\\n4 7 9 7 7 5 5 5 8 9 9 7 9 7 7 6 5 6 4 9 6 5 6 6 5 7 7 6 6 6 5 8 2 7 8 7 6 5 7 9 8 7 5 6 6 8 6 6 7 7\\r\\n', 'output': ['YES\\r\\n0100\\r\\n1101110\\r\\n111111010\\r\\n1101111\\r\\n1110000\\r\\n01100\\r\\n01101\\r\\n01110\\r\\n11111000\\r\\n111111011\\r\\n111111100\\r\\n1110001\\r\\n111111101\\r\\n1110010\\r\\n1110011\\r\\n101010\\r\\n01111\\r\\n101011\\r\\n0101\\r\\n111111110\\r\\n101100\\r\\n10000\\r\\n101101\\r\\n101110\\r\\n10001\\r\\n1110100\\r\\n1110101\\r\\n101111\\r\\n110000\\r\\n110001\\r\\n10010\\r\\n11111001\\r\\n00\\r\\n1110110\\r\\n11111010\\r\\n1110111\\r\\n110010\\r\\n10011\\r\\n1111000\\r\\n111111111\\r\\n11111011\\r\\n1111001\\r\\n10100\\r\\n110011\\r\\n110100\\r\\n11111100\\r\\n110101\\r\\n110110\\r\\n1111010\\r\\n1111011\\r\\n']}, {'input': '20\\r\\n2 3 4 4 2 4 4 2 4 4 3 4 4 3 1 3 3 3 2 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '30\\r\\n6 6 6 5 6 7 3 4 6 5 2 4 6 4 5 4 6 5 4 4 6 6 2 1 4 4 6 1 6 7\\r\\n', 'output': ['NO\\r\\n']}, {'input': '65\\r\\n9 7 8 6 6 10 3 9 10 4 8 3 2 8 9 1 6 3 2 7 9 7 8 10 10 4 5 6 8 8 7 10 10 8 6 6 4 8 8 7 6 9 10 7 8 7 3 3 10 8 9 10 1 9 6 9 2 7 9 10 8 10 3 7 3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '85\\r\\n9 10 4 5 10 4 10 4 5 7 4 8 10 10 9 6 10 10 7 1 10 8 4 4 7 6 3 9 4 4 9 6 3 3 8 9 8 8 10 6 10 10 4 9 6 9 4 3 4 5 8 6 1 5 9 9 9 7 10 10 7 10 4 4 8 2 1 8 10 10 7 1 3 10 7 10 4 5 10 1 10 8 6 2 10\\r\\n', 'output': ['NO\\r\\n']}, {'input': '200\\r\\n11 23 6 1 15 6 5 9 8 9 13 11 7 21 14 17 8 8 12 6 18 4 9 20 3 9 6 9 9 12 18 5 22 5 16 20 11 6 22 10 5 6 8 19 9 12 14 2 10 6 7 7 18 17 4 16 9 13 3 10 15 8 8 9 13 7 8 18 12 12 13 14 9 8 5 5 22 19 23 15 11 7 23 7 5 3 9 3 15 9 22 9 2 11 21 8 12 7 6 8 10 6 12 9 11 8 7 6 5 7 8 9 10 7 19 12 14 9 6 7 2 7 8 4 12 21 14 4 11 12 9 13 17 4 10 8 17 3 9 5 11 6 4 11 1 13 10 10 8 10 14 23 17 8 20 23 23 23 14 7 18 5 10 21 9 7 7 7 4 23 13 8 9 22 7 4 8 12 8 19 17 11 10 8 8 7 7 13 6 13 14 14 22 2 10 11 5 1 14 13\\r\\n', 'output': ['NO\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['YES\\r\\n0\\r\\n']}, {'input': '2\\r\\n1 1\\r\\n', 'output': ['YES\\r\\n0\\r\\n1\\r\\n']}, {'input': '3\\r\\n1 1 2\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.util.Arrays;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport static java.util.stream.Collectors.*;\nimport static java.util.Comparator.reverseOrder;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport static java.util.Map.Entry.comparingByValue;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class Sol {\n    \n    \n    \n    static String[] solve(int N, int[] L){\n        String[] res = new String[N];\n        int L0 = L[0];\n        boolean done = false;\n        int count = 0;\n        if(L0 == 2){\n            res[0] = \"0\";\n            res[1] = \"1\";\n            done = true;\n        }\n        else if(L0 == 3){\n            res[0] = \"0\";\n            res[1] = \"1\";\n            res[2] = \"01\";\n            done = true;\n        }\n        \n        \n        int limit = L[L.length-1];\n        for(int i = 1; i < L.length-1; ++i){\n            int li = L[i];\n            if(li > limit-li){\n                li = limit - li;\n            }\n            if(L0 == li){\n                ++count;\n            }\n        }\n        \n        if(count > 0){\n            res[0] = res[0].repeat(count);\n        }\n        \n        if(done){\n            return res;\n        }\n        String prefix = \"\";\n        for(int i = 0; i < L.length-1; ++i){\n            int li = L[i];\n            int next = L[i+1];\n            if(li == 1 || li == 2){\n                if(next <= li){\n                    String temp =  prefix;\n                    String suffix = solve(next, L)[0];\n                    if(li == 1){\n                        res[i] = temp + \"0\" + suffix;\n                    }\n                    else if(li == 2){\n                        res[i] = temp + \"1\" + suffix;\n                    }\n                }\n                else{\n                    String temp =  prefix;\n                    String suffix = solve(next, L)[0];\n                    String suffix2 = solve(li-next, L)[0];\n                    if(li == 1){\n                        res[i] = temp + \"0\" + suffix + suffix2;\n                    }\n                    else if(li == 2){\n                        res[i] = temp + \"1\" + suffix + suffix2;\n                    }\n                }\n            }\n            else if(li > next+1){\n                String temp =  prefix;\n                String suffix = solve(next, L)[0];\n                if(li == 3){\n                    res[i] = temp + \"0\" + suffix + \"0\" + suffix;\n                }\n                else{\n                    res[i] = temp + \"1\" + suffix + suffix;\n                }\n            }\n            else if(li == 3){\n                String temp =  prefix;\n                String suffix = solve(next, L)[0];\n                String suffix2 = solve(li-next, L)[0];\n                res[i] = temp + \"0\" + suffix + suffix2 + \"0\";\n            }\n            else if(li == 1){\n                prefix += \"0\";\n            }\n            else if(li == 2){\n                prefix += \"1\";\n            }\n            else if(li == 0){\n            }\n            else if(li == 4){\n                String temp =  prefix;\n                String suffix = solve(next, L)[0];\n                String suffix2 = solve(li-next, L)[0];\n                res[i] = temp + \"0\" + suffix + \"0\" + suffix + \"0\";\n            }\n            else if(li == 5){\n                String temp =  prefix;\n                String suffix = solve(next, L)[0];\n                String suffix2"}
{"src_uid": "0ef5e0621f13107d0c8786766ae2ac56", "id": 115, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2600, "testcases": "[{'input': '2\\r\\n', 'output': ['YES\\r\\n1\\r\\n1\\r\\n0\\r\\n']}, {'input': '3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '13\\r\\n', 'output': ['YES\\r\\n1\\r\\n2\\r\\n0\\r\\n']}, {'input': '1729\\r\\n', 'output': ['YES\\r\\n1\\r\\n4\\r\\n1\\r\\n156\\r\\n']}, {'input': '1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '156\\r\\n', 'output': ['YES\\r\\n1\\r\\n4\\r\\n1\\r\\n1729\\r\\n']}, {'input': '144\\r\\n', 'output': ['NO\\r\\n']}, {'input': '15407021574586369\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n']}, {'input': '1283918464548876\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n15407021574586369\\r\\n']}, {'input': '106993205379216\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '8916100449984\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '743008391424\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '61917613056\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '5162766336\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '465813504\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '1190892770349870530939783612223854919520376583681977765887915460625605936058755310651852367291739265953207545289130222590192089760107219016552443777446454737593270848929686985225627328165141495957916933183554147885929489200931370369335342990301385609877410822418323040587200691179244114277235163137\\r\\n', 'output': ['NO\\r\\n']}, {'input': '595446385174935265469891806111927459760188291840988882943957730312802968029377655325926183645869632976603772644565111295096044880053609508276221888723227368796635424464843492612813664082570747978958466591777073942964744600465685184667671495150692804938705411209161520293600345589622057138617581568\\r\\n', 'output': ['NO\\r\\n']}, {'input': '25\\r\\n', 'output': ['NO\\r\\n']}, {'input': '941796563564014133460267652699405064136604147775680640408635568423120076418612383600961606320075481457728632621229496557902028935524874377670656752361237195740789199168688114539822313589449591752852405348364368488613997844015773837981050319855641810991084718329572826001220219\\r\\n', 'output': ['NO\\r\\n']}, {'input': '79360359146807441660707083821018832188095237636414144034857851003419752010124705615779249215657075053438039921073878645370211154334804568157886814559909\\r\\n', 'output': ['NO\\r\\n']}, {'input': '63730052926382178992698271572\\r\\n', 'output': ['NO\\r\\n']}, {'input': '781127467969689863953686682245136076127159921705034542049372816247984349746396880068864077830521695515007722284098436125466526268962707778595903329840419133974864831578401355678018910046595664462\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6158324958633591462725987806787114657822761584945953440793358408\\r\\n', 'output': ['NO\\r\\n']}, {'input': '46865942276811740149949176718949673344632458696505595472917789224885825949034661409971763949176343056701403524645790892802371117466746709730235969308113002256137529699677021858777002204698794034488631496662175642982367736619451227\\r\\n', 'output': ['NO\\r\\n']}, {'input': '30237645054497458443810364460387991000047179363449854478913094584184671326397148735574822623728870964468880\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2340834982489248497640077401144544875656219324259480464300721974528452789353163588007890141857933775490305682107276886017882071992830194933217950703328428111517059826130590646975303231172522274173055168264136989194405810785131454927884294753122224538370897882934059\\r\\n', 'output': ['NO\\r\\n']}, {'input': '188808426143782131983811729737047667239979348184409855460833141044812532916921011366813880911319644625405122800255947507577498497005580408229\\r\\n', 'output': ['NO\\r\\n']}, {'input': '11\\r\\n', 'output': ['NO\\r\\n']}, {'input': '837952166310387766556098005402621146120844433859027080340550200820\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6658370691480968202384509492140362150472696196949673577340706113760133821635599667476781507918250717914609488172442814676\\r\\n', 'output': ['NO\\r\\n']}, {'input': '496620932866717074931903995027173085744596193421095444317407919730992986418713478580824584919587030125446806223296721174921873955469939680411818878465888018986191990428049489376\\r\\n', 'output': ['NO\\r\\n']}, {'input': '1055050055824280186133547527395898666709023463559337207019374080060005629519967890329878081184599905695126755199503698703340223998620951421943134090897041663457029971964336512111472968057533187306110300592753045593222495258017559167383354672\\r\\n', 'output': ['NO\\r\\n']}, {'input': '833488\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6623739799588591251984406341341227075747347067457011846886851179047097\\r\\n', 'output': ['NO\\r\\n']}, {'input': '491137842784568289872893698937459777201151060689848471272003426250808340375567208957554901863756992593841404624991936090178731\\r\\n', 'output': ['NO\\r\\n']}, {'input': '921020945402270233565256424740666649108666245414796768645533036514715926608741510409618545180420952947917462937925573726593991655435868735899832746218676826629010574075553051352459309199055\\r\\n', 'output': ['NO\\r\\n']}, {'input': '73010581613999159726778758153209240813500342925961695523976131595080552126499402124287397930918281238199343324378719343080627189983992629778313739785259010389762036264197722427990331444297391895841265448905560880286941336214995793596526089977876\\r\\n', 'output': ['NO\\r\\n']}, {'input': '20046142930690780976270827075270\\r\\n', 'output': ['NO\\r\\n']}, {'input': '9685166910821197056344900917707673568669808490600751439157007968027004377622601634787545920946543261243701428886581331490848676434786296227674864970612484770201\\r\\n', 'output': ['NO\\r\\n']}, {'input': '8135498415686025907059626116077260223347794805104214588176486213766836727225732896611278946787711775240855660997946707132990500568944980168321229607627861318462551364491230037357687242571268657488824365976425738641613571689437917277074234256494445914221354904615014917288299991097350709814\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4805043123239964766764344326469867688727869311599746349016084457204677169811854267718990063526979167327981002200329174783850464\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2376595620091080825479292544658464163405755746884100218035485700973409491416884420742631899446144679322008453313773241425622490028383089317622842863337164723765526589656211098933400307364163919083790470365474085981340438888606855706394352678991102\\r\\n', 'output': ['NO\\r\\n']}, {'input': '99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\\r\\n', 'output': ['NO\\r\\n']}, {'input': '145\\r\\n', 'output': ['YES\\r\\n1\\r\\n3\\r\\n1\\r\\n24\\r\\n']}, {'input': '24\\r\\n', 'output': ['YES\\r\\n1\\r\\n3\\r\\n1\\r\\n145\\r\\n']}, {'input': '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport static java.util.Collections.reverseOrder;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class java {\n      public static void main(String[] args) \n    {\n        Scanner sc=new Scanner(System.in);\n        String s=sc.next();\n        int n=s.length();\n        int p=1;\n        int m=0;\n        while(p<=n)\n        {\n            if(s.charAt(n-p)=='0')\n            {\n                m+=1;\n            }\n            else if(s.charAt(n-p)=='5')\n            {\n                s=\"5\"+s.charAt(n-p+1)+s.substring(n-p+2);\n                p-=1;\n            }\n            else if(s.charAt(n-p)=='6' || s.charAt(n-p)=='7' || s.charAt(n-p)=='8'|| s.charAt(n-p)=='9')\n            {\n                s=s.charAt(n-p)+\"0\"+s.substring(n-p+1);\n                p-=1;\n            }\n            p+=1;\n            \n        }\n        String b=\"\";\n        String c=\"\";\n        String d=\"\";\n        if(s.contains(\"0\"))\n        {\n            b=\"YES\";\n            p=1;\n            while(p<=s.length()-1)\n            {\n                if(s.charAt(p)=='0'&&s.charAt(p-1)=='0')\n                {\n                    \n                }\n                else if(s.charAt(p)=='1'&&s.charAt(p-1)=='0')\n                {\n                    c=s.charAt(p)+c;\n                }\n                else if(s.charAt(p)=='2'&&s.charAt(p-1)=='0')\n                {\n                    c=s.charAt(p)+s.charAt(p-1)+c;\n                }\n                else if(s.charAt(p)=='3'&&s.charAt(p-1)=='0')\n                {\n                    c=s.charAt(p)+s.charAt(p-1)+s.charAt(p-2)+c;\n                }\n                else if(s.charAt(p)=='4'&&s.charAt(p-1)=='0')\n                {\n                    c=s.charAt(p)+s.charAt(p-1)+s.charAt(p-2)+s.charAt(p-3)+c;\n                }\n                else if(s.charAt(p)=='0'&&s.charAt(p-1)=='1')\n                {\n                    d=s.charAt(p)+d;\n                }\n                else if(s.charAt(p)=='0'&&s.charAt(p-1)=='2')\n                {\n                    d=s.charAt(p)+s.charAt(p-1)+d;\n                }\n                else if(s.charAt(p)=='0'&&s.charAt(p-1)=='3')\n                {\n                    d=s.charAt(p)+s.charAt(p-1)+s.charAt(p-2)+d;\n                }\n                else if(s.charAt(p)=='0'&&s.charAt(p-1)=='4')\n                {\n                    d=s.charAt(p)+s.charAt(p-1)+s.charAt(p-2)+s.charAt(p-3)+d;\n                }\n                else if(s.charAt(p"}
{"src_uid": "0ef5e0621f13107d0c8786766ae2ac56", "id": 115, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2600, "testcases": "[{'input': '2\\r\\n', 'output': ['YES\\r\\n1\\r\\n1\\r\\n0\\r\\n']}, {'input': '3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '13\\r\\n', 'output': ['YES\\r\\n1\\r\\n2\\r\\n0\\r\\n']}, {'input': '1729\\r\\n', 'output': ['YES\\r\\n1\\r\\n4\\r\\n1\\r\\n156\\r\\n']}, {'input': '1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '156\\r\\n', 'output': ['YES\\r\\n1\\r\\n4\\r\\n1\\r\\n1729\\r\\n']}, {'input': '144\\r\\n', 'output': ['NO\\r\\n']}, {'input': '15407021574586369\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n']}, {'input': '1283918464548876\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n15407021574586369\\r\\n']}, {'input': '106993205379216\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '8916100449984\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '743008391424\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '61917613056\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '5162766336\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '465813504\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '1190892770349870530939783612223854919520376583681977765887915460625605936058755310651852367291739265953207545289130222590192089760107219016552443777446454737593270848929686985225627328165141495957916933183554147885929489200931370369335342990301385609877410822418323040587200691179244114277235163137\\r\\n', 'output': ['NO\\r\\n']}, {'input': '595446385174935265469891806111927459760188291840988882943957730312802968029377655325926183645869632976603772644565111295096044880053609508276221888723227368796635424464843492612813664082570747978958466591777073942964744600465685184667671495150692804938705411209161520293600345589622057138617581568\\r\\n', 'output': ['NO\\r\\n']}, {'input': '25\\r\\n', 'output': ['NO\\r\\n']}, {'input': '941796563564014133460267652699405064136604147775680640408635568423120076418612383600961606320075481457728632621229496557902028935524874377670656752361237195740789199168688114539822313589449591752852405348364368488613997844015773837981050319855641810991084718329572826001220219\\r\\n', 'output': ['NO\\r\\n']}, {'input': '79360359146807441660707083821018832188095237636414144034857851003419752010124705615779249215657075053438039921073878645370211154334804568157886814559909\\r\\n', 'output': ['NO\\r\\n']}, {'input': '63730052926382178992698271572\\r\\n', 'output': ['NO\\r\\n']}, {'input': '781127467969689863953686682245136076127159921705034542049372816247984349746396880068864077830521695515007722284098436125466526268962707778595903329840419133974864831578401355678018910046595664462\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6158324958633591462725987806787114657822761584945953440793358408\\r\\n', 'output': ['NO\\r\\n']}, {'input': '46865942276811740149949176718949673344632458696505595472917789224885825949034661409971763949176343056701403524645790892802371117466746709730235969308113002256137529699677021858777002204698794034488631496662175642982367736619451227\\r\\n', 'output': ['NO\\r\\n']}, {'input': '30237645054497458443810364460387991000047179363449854478913094584184671326397148735574822623728870964468880\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2340834982489248497640077401144544875656219324259480464300721974528452789353163588007890141857933775490305682107276886017882071992830194933217950703328428111517059826130590646975303231172522274173055168264136989194405810785131454927884294753122224538370897882934059\\r\\n', 'output': ['NO\\r\\n']}, {'input': '188808426143782131983811729737047667239979348184409855460833141044812532916921011366813880911319644625405122800255947507577498497005580408229\\r\\n', 'output': ['NO\\r\\n']}, {'input': '11\\r\\n', 'output': ['NO\\r\\n']}, {'input': '837952166310387766556098005402621146120844433859027080340550200820\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6658370691480968202384509492140362150472696196949673577340706113760133821635599667476781507918250717914609488172442814676\\r\\n', 'output': ['NO\\r\\n']}, {'input': '496620932866717074931903995027173085744596193421095444317407919730992986418713478580824584919587030125446806223296721174921873955469939680411818878465888018986191990428049489376\\r\\n', 'output': ['NO\\r\\n']}, {'input': '1055050055824280186133547527395898666709023463559337207019374080060005629519967890329878081184599905695126755199503698703340223998620951421943134090897041663457029971964336512111472968057533187306110300592753045593222495258017559167383354672\\r\\n', 'output': ['NO\\r\\n']}, {'input': '833488\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6623739799588591251984406341341227075747347067457011846886851179047097\\r\\n', 'output': ['NO\\r\\n']}, {'input': '491137842784568289872893698937459777201151060689848471272003426250808340375567208957554901863756992593841404624991936090178731\\r\\n', 'output': ['NO\\r\\n']}, {'input': '921020945402270233565256424740666649108666245414796768645533036514715926608741510409618545180420952947917462937925573726593991655435868735899832746218676826629010574075553051352459309199055\\r\\n', 'output': ['NO\\r\\n']}, {'input': '73010581613999159726778758153209240813500342925961695523976131595080552126499402124287397930918281238199343324378719343080627189983992629778313739785259010389762036264197722427990331444297391895841265448905560880286941336214995793596526089977876\\r\\n', 'output': ['NO\\r\\n']}, {'input': '20046142930690780976270827075270\\r\\n', 'output': ['NO\\r\\n']}, {'input': '9685166910821197056344900917707673568669808490600751439157007968027004377622601634787545920946543261243701428886581331490848676434786296227674864970612484770201\\r\\n', 'output': ['NO\\r\\n']}, {'input': '8135498415686025907059626116077260223347794805104214588176486213766836727225732896611278946787711775240855660997946707132990500568944980168321229607627861318462551364491230037357687242571268657488824365976425738641613571689437917277074234256494445914221354904615014917288299991097350709814\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4805043123239964766764344326469867688727869311599746349016084457204677169811854267718990063526979167327981002200329174783850464\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2376595620091080825479292544658464163405755746884100218035485700973409491416884420742631899446144679322008453313773241425622490028383089317622842863337164723765526589656211098933400307364163919083790470365474085981340438888606855706394352678991102\\r\\n', 'output': ['NO\\r\\n']}, {'input': '99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\\r\\n', 'output': ['NO\\r\\n']}, {'input': '145\\r\\n', 'output': ['YES\\r\\n1\\r\\n3\\r\\n1\\r\\n24\\r\\n']}, {'input': '24\\r\\n', 'output': ['YES\\r\\n1\\r\\n3\\r\\n1\\r\\n145\\r\\n']}, {'input': '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport static java.util.stream.Collectors.*;\nimport java.util.stream.IntStream;\n\n/**\n *\n * @author Tazmin\n */\npublic class A1 {\n    \n    public static void main(String[] args) {\n        String n = reader.next();\n        int A = Integer.parseInt(n);\n        int x,y;\n        int max = 0;\n        int min = 0;\n        int z;\n        int i = 0;\n        int cnt = 0;\n        boolean flag = false;\n        for(i = 2; i <= A; i++){\n            x = (int) Math.pow(i, 2);\n            if(x == A){\n                max = i;\n                flag = true;\n                break;\n            }\n        }\n        if(flag == true){\n            System.out.println(\"YES\");\n            System.out.println(max);\n            z = max / 12;\n            for(i = 0; i < z; i++){\n                min = 12 * i + 2;\n                System.out.println(min);\n            }\n            for(i = 0; i < z; i++){\n                min = 13 * i + 1 - 12 * i + 2;\n                System.out.println(min);\n            }\n        }\n        else{\n            System.out.println(\"NO\");\n        }\n    }\n    \n    static final java.util.Scanner reader = new java.util.Scanner(System.in);\n}\n"}
{"src_uid": "0ef5e0621f13107d0c8786766ae2ac56", "id": 115, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2600, "testcases": "[{'input': '2\\r\\n', 'output': ['YES\\r\\n1\\r\\n1\\r\\n0\\r\\n']}, {'input': '3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '13\\r\\n', 'output': ['YES\\r\\n1\\r\\n2\\r\\n0\\r\\n']}, {'input': '1729\\r\\n', 'output': ['YES\\r\\n1\\r\\n4\\r\\n1\\r\\n156\\r\\n']}, {'input': '1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '156\\r\\n', 'output': ['YES\\r\\n1\\r\\n4\\r\\n1\\r\\n1729\\r\\n']}, {'input': '144\\r\\n', 'output': ['NO\\r\\n']}, {'input': '15407021574586369\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n']}, {'input': '1283918464548876\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n15407021574586369\\r\\n']}, {'input': '106993205379216\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '8916100449984\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '743008391424\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '61917613056\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '5162766336\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '465813504\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '1190892770349870530939783612223854919520376583681977765887915460625605936058755310651852367291739265953207545289130222590192089760107219016552443777446454737593270848929686985225627328165141495957916933183554147885929489200931370369335342990301385609877410822418323040587200691179244114277235163137\\r\\n', 'output': ['NO\\r\\n']}, {'input': '595446385174935265469891806111927459760188291840988882943957730312802968029377655325926183645869632976603772644565111295096044880053609508276221888723227368796635424464843492612813664082570747978958466591777073942964744600465685184667671495150692804938705411209161520293600345589622057138617581568\\r\\n', 'output': ['NO\\r\\n']}, {'input': '25\\r\\n', 'output': ['NO\\r\\n']}, {'input': '941796563564014133460267652699405064136604147775680640408635568423120076418612383600961606320075481457728632621229496557902028935524874377670656752361237195740789199168688114539822313589449591752852405348364368488613997844015773837981050319855641810991084718329572826001220219\\r\\n', 'output': ['NO\\r\\n']}, {'input': '79360359146807441660707083821018832188095237636414144034857851003419752010124705615779249215657075053438039921073878645370211154334804568157886814559909\\r\\n', 'output': ['NO\\r\\n']}, {'input': '63730052926382178992698271572\\r\\n', 'output': ['NO\\r\\n']}, {'input': '781127467969689863953686682245136076127159921705034542049372816247984349746396880068864077830521695515007722284098436125466526268962707778595903329840419133974864831578401355678018910046595664462\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6158324958633591462725987806787114657822761584945953440793358408\\r\\n', 'output': ['NO\\r\\n']}, {'input': '46865942276811740149949176718949673344632458696505595472917789224885825949034661409971763949176343056701403524645790892802371117466746709730235969308113002256137529699677021858777002204698794034488631496662175642982367736619451227\\r\\n', 'output': ['NO\\r\\n']}, {'input': '30237645054497458443810364460387991000047179363449854478913094584184671326397148735574822623728870964468880\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2340834982489248497640077401144544875656219324259480464300721974528452789353163588007890141857933775490305682107276886017882071992830194933217950703328428111517059826130590646975303231172522274173055168264136989194405810785131454927884294753122224538370897882934059\\r\\n', 'output': ['NO\\r\\n']}, {'input': '188808426143782131983811729737047667239979348184409855460833141044812532916921011366813880911319644625405122800255947507577498497005580408229\\r\\n', 'output': ['NO\\r\\n']}, {'input': '11\\r\\n', 'output': ['NO\\r\\n']}, {'input': '837952166310387766556098005402621146120844433859027080340550200820\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6658370691480968202384509492140362150472696196949673577340706113760133821635599667476781507918250717914609488172442814676\\r\\n', 'output': ['NO\\r\\n']}, {'input': '496620932866717074931903995027173085744596193421095444317407919730992986418713478580824584919587030125446806223296721174921873955469939680411818878465888018986191990428049489376\\r\\n', 'output': ['NO\\r\\n']}, {'input': '1055050055824280186133547527395898666709023463559337207019374080060005629519967890329878081184599905695126755199503698703340223998620951421943134090897041663457029971964336512111472968057533187306110300592753045593222495258017559167383354672\\r\\n', 'output': ['NO\\r\\n']}, {'input': '833488\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6623739799588591251984406341341227075747347067457011846886851179047097\\r\\n', 'output': ['NO\\r\\n']}, {'input': '491137842784568289872893698937459777201151060689848471272003426250808340375567208957554901863756992593841404624991936090178731\\r\\n', 'output': ['NO\\r\\n']}, {'input': '921020945402270233565256424740666649108666245414796768645533036514715926608741510409618545180420952947917462937925573726593991655435868735899832746218676826629010574075553051352459309199055\\r\\n', 'output': ['NO\\r\\n']}, {'input': '73010581613999159726778758153209240813500342925961695523976131595080552126499402124287397930918281238199343324378719343080627189983992629778313739785259010389762036264197722427990331444297391895841265448905560880286941336214995793596526089977876\\r\\n', 'output': ['NO\\r\\n']}, {'input': '20046142930690780976270827075270\\r\\n', 'output': ['NO\\r\\n']}, {'input': '9685166910821197056344900917707673568669808490600751439157007968027004377622601634787545920946543261243701428886581331490848676434786296227674864970612484770201\\r\\n', 'output': ['NO\\r\\n']}, {'input': '8135498415686025907059626116077260223347794805104214588176486213766836727225732896611278946787711775240855660997946707132990500568944980168321229607627861318462551364491230037357687242571268657488824365976425738641613571689437917277074234256494445914221354904615014917288299991097350709814\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4805043123239964766764344326469867688727869311599746349016084457204677169811854267718990063526979167327981002200329174783850464\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2376595620091080825479292544658464163405755746884100218035485700973409491416884420742631899446144679322008453313773241425622490028383089317622842863337164723765526589656211098933400307364163919083790470365474085981340438888606855706394352678991102\\r\\n', 'output': ['NO\\r\\n']}, {'input': '99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\\r\\n', 'output': ['NO\\r\\n']}, {'input': '145\\r\\n', 'output': ['YES\\r\\n1\\r\\n3\\r\\n1\\r\\n24\\r\\n']}, {'input': '24\\r\\n', 'output': ['YES\\r\\n1\\r\\n3\\r\\n1\\r\\n145\\r\\n']}, {'input': '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Solution {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String s = in.next();\n        String output = \"\";\n        output += \"NO\";\n        for(int i=0;i<31;i++){\n            String t = \"\";\n            for(int j=0;j<i;j++){\n                t+=\"0\";\n            }\n            if(s.equals(t+\"1\"+\"2\"+\"3\"+s.substring(3))){\n                output = \"YES\";\n                output += \"\\n\"+(i+1);\n                output += \"\\n\"+(i+2);\n                output += \"\\n\"+(i+3-Integer.parseInt(s.charAt(3)+\"\"));\n                i = 30;\n            }\n        }\n        String[] outputA = output.split(\"\\n\");\n        int n = 0;\n        for(int i=0;i<outputA.length;i++){\n            if(outputA[i]!= null &&!outputA[i].equals(\"\") &&!outputA[i].equals(\"0\")){\n                n++;\n            }\n        }\n        System.out.print(outputA[0] + \"\\n\" + n);\n        for(int i=1;i<outputA.length;i++){\n            if(outputA[i]!= null &&!outputA[i].equals(\"\") &&!outputA[i].equals(\"0\")){\n                System.out.print(outputA[i] + \"\\n\");\n            }\n        }\n    }\n}"}
{"src_uid": "0ef5e0621f13107d0c8786766ae2ac56", "id": 115, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2600, "testcases": "[{'input': '2\\r\\n', 'output': ['YES\\r\\n1\\r\\n1\\r\\n0\\r\\n']}, {'input': '3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '13\\r\\n', 'output': ['YES\\r\\n1\\r\\n2\\r\\n0\\r\\n']}, {'input': '1729\\r\\n', 'output': ['YES\\r\\n1\\r\\n4\\r\\n1\\r\\n156\\r\\n']}, {'input': '1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '156\\r\\n', 'output': ['YES\\r\\n1\\r\\n4\\r\\n1\\r\\n1729\\r\\n']}, {'input': '144\\r\\n', 'output': ['NO\\r\\n']}, {'input': '15407021574586369\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n']}, {'input': '1283918464548876\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n15407021574586369\\r\\n']}, {'input': '106993205379216\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '8916100449984\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '743008391424\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '61917613056\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '5162766336\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '465813504\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '1190892770349870530939783612223854919520376583681977765887915460625605936058755310651852367291739265953207545289130222590192089760107219016552443777446454737593270848929686985225627328165141495957916933183554147885929489200931370369335342990301385609877410822418323040587200691179244114277235163137\\r\\n', 'output': ['NO\\r\\n']}, {'input': '595446385174935265469891806111927459760188291840988882943957730312802968029377655325926183645869632976603772644565111295096044880053609508276221888723227368796635424464843492612813664082570747978958466591777073942964744600465685184667671495150692804938705411209161520293600345589622057138617581568\\r\\n', 'output': ['NO\\r\\n']}, {'input': '25\\r\\n', 'output': ['NO\\r\\n']}, {'input': '941796563564014133460267652699405064136604147775680640408635568423120076418612383600961606320075481457728632621229496557902028935524874377670656752361237195740789199168688114539822313589449591752852405348364368488613997844015773837981050319855641810991084718329572826001220219\\r\\n', 'output': ['NO\\r\\n']}, {'input': '79360359146807441660707083821018832188095237636414144034857851003419752010124705615779249215657075053438039921073878645370211154334804568157886814559909\\r\\n', 'output': ['NO\\r\\n']}, {'input': '63730052926382178992698271572\\r\\n', 'output': ['NO\\r\\n']}, {'input': '781127467969689863953686682245136076127159921705034542049372816247984349746396880068864077830521695515007722284098436125466526268962707778595903329840419133974864831578401355678018910046595664462\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6158324958633591462725987806787114657822761584945953440793358408\\r\\n', 'output': ['NO\\r\\n']}, {'input': '46865942276811740149949176718949673344632458696505595472917789224885825949034661409971763949176343056701403524645790892802371117466746709730235969308113002256137529699677021858777002204698794034488631496662175642982367736619451227\\r\\n', 'output': ['NO\\r\\n']}, {'input': '30237645054497458443810364460387991000047179363449854478913094584184671326397148735574822623728870964468880\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2340834982489248497640077401144544875656219324259480464300721974528452789353163588007890141857933775490305682107276886017882071992830194933217950703328428111517059826130590646975303231172522274173055168264136989194405810785131454927884294753122224538370897882934059\\r\\n', 'output': ['NO\\r\\n']}, {'input': '188808426143782131983811729737047667239979348184409855460833141044812532916921011366813880911319644625405122800255947507577498497005580408229\\r\\n', 'output': ['NO\\r\\n']}, {'input': '11\\r\\n', 'output': ['NO\\r\\n']}, {'input': '837952166310387766556098005402621146120844433859027080340550200820\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6658370691480968202384509492140362150472696196949673577340706113760133821635599667476781507918250717914609488172442814676\\r\\n', 'output': ['NO\\r\\n']}, {'input': '496620932866717074931903995027173085744596193421095444317407919730992986418713478580824584919587030125446806223296721174921873955469939680411818878465888018986191990428049489376\\r\\n', 'output': ['NO\\r\\n']}, {'input': '1055050055824280186133547527395898666709023463559337207019374080060005629519967890329878081184599905695126755199503698703340223998620951421943134090897041663457029971964336512111472968057533187306110300592753045593222495258017559167383354672\\r\\n', 'output': ['NO\\r\\n']}, {'input': '833488\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6623739799588591251984406341341227075747347067457011846886851179047097\\r\\n', 'output': ['NO\\r\\n']}, {'input': '491137842784568289872893698937459777201151060689848471272003426250808340375567208957554901863756992593841404624991936090178731\\r\\n', 'output': ['NO\\r\\n']}, {'input': '921020945402270233565256424740666649108666245414796768645533036514715926608741510409618545180420952947917462937925573726593991655435868735899832746218676826629010574075553051352459309199055\\r\\n', 'output': ['NO\\r\\n']}, {'input': '73010581613999159726778758153209240813500342925961695523976131595080552126499402124287397930918281238199343324378719343080627189983992629778313739785259010389762036264197722427990331444297391895841265448905560880286941336214995793596526089977876\\r\\n', 'output': ['NO\\r\\n']}, {'input': '20046142930690780976270827075270\\r\\n', 'output': ['NO\\r\\n']}, {'input': '9685166910821197056344900917707673568669808490600751439157007968027004377622601634787545920946543261243701428886581331490848676434786296227674864970612484770201\\r\\n', 'output': ['NO\\r\\n']}, {'input': '8135498415686025907059626116077260223347794805104214588176486213766836727225732896611278946787711775240855660997946707132990500568944980168321229607627861318462551364491230037357687242571268657488824365976425738641613571689437917277074234256494445914221354904615014917288299991097350709814\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4805043123239964766764344326469867688727869311599746349016084457204677169811854267718990063526979167327981002200329174783850464\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2376595620091080825479292544658464163405755746884100218035485700973409491416884420742631899446144679322008453313773241425622490028383089317622842863337164723765526589656211098933400307364163919083790470365474085981340438888606855706394352678991102\\r\\n', 'output': ['NO\\r\\n']}, {'input': '99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\\r\\n', 'output': ['NO\\r\\n']}, {'input': '145\\r\\n', 'output': ['YES\\r\\n1\\r\\n3\\r\\n1\\r\\n24\\r\\n']}, {'input': '24\\r\\n', 'output': ['YES\\r\\n1\\r\\n3\\r\\n1\\r\\n145\\r\\n']}, {'input': '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.io.DataInputStream; \nimport java.io.FileInputStream; \nimport java.io.IOException; \nimport java.io.InputStreamReader; \nimport java.util.*;\nimport java.util.Arrays;\n \n\n \npublic class test { \n    \n    public static void main(String[] args) throws NumberFormatException, IOException{ \n        FileInputStream in = new FileInputStream(\"input.txt\");\n        //in = System.in;\n        DataInputStream reader = new DataInputStream(in);\n        StringBuilder sBuilder = new StringBuilder();\n        //FileWriter writer = new FileWriter(\"output.txt\");\n        reader.readLine();\n        String s = reader.readLine();\n        String ans = \"NO\";\n        int n = s.length();\n        int sum[][] = new int [2][16];\n        int c =0;\n        int temp =1;\n        int max = 0;\n        int cnt = 0;\n        int flag = 1;\n        int flag1 = 1;\n        int flag2 = 1;\n        int flag3 = 1;\n        while(flag>0 || flag2>0){\n            for(int i = 0 ; i<n ; i++){\n                if(s.charAt(i)=='0'){\n                    flag=0;\n                    break;\n                }\n            }\n            if(flag==0){\n                break;\n            }\n            else{\n                sum[0][c] = Integer.parseInt(s);\n                flag1 =1;\n                flag3 = 1;\n                for(int i = 0 ; i<n ; i++){\n                    sum[1][c] += (int)(Math.pow(10, i) * (s.charAt(i)-'0'));\n                }\n                flag2=1;\n                for(int j = 0 ; j<n-1 ; j++){\n                    for(int i = 0 ; i<n-1 ;i++){\n                        if( (int)(Math.pow(10, j) * (s.charAt(i)-'0')) > (int)(Math.pow(10, j+1) * (s.charAt(i+1)-'0')) ){\n                            temp = (int)Math.pow(10, j) * (s.charAt(i)-'0');\n                            s.charAt(i) = s.charAt(i+1);\n                            s.charAt(i+1) = (char)(temp +'0');\n                            flag2=0;\n                        }\n                    }\n                }\n                if(flag2==1){\n                    c++;\n                }\n                s = \"\";\n                for(int i = 0 ; i<n ;i++){\n                    s+=s.charAt(i);\n                }\n            }\n        }\n        int a1[] = new int [1000];\n        int cnt1 = 0;\n        if(sum[0][0]==Integer.parseInt(args[0])){\n            ans = \"YES\";\n            a1[cnt1++] = 1;\n        }\n        for(int i = 0 ; i<c ;i++){\n            for(int j = 0 ; j<c ;j++){\n                if(sum[0][j]==Integer.parseInt(args[0])-sum[1][i]){\n                    ans = \"YES\";\n                    a1[cnt1++] = j+1;\n                }\n            }\n        }\n        int a2[] = new int [1000];\n        int cnt2 = 0;\n        if(ans.equals(\"YES\")){\n            a2[cnt2++] = sum[1][0]-Integer.parseInt(args[0]);\n            for(int i = 0 ; i<c ;i++){\n                if(sum[0][i]>Integer.parseInt(args[0])){\n                    a2[cnt2++] = sum[1][i]-Integer.parseInt(args[0]);\n                }\n            }\n            max = cnt2;\n        }\n        else{\n            max = 0;\n        }\n        System.out.println(ans);\n        int flag4 = 0;\n        for(int i = 0 ; i<a1.length ;"}
{"src_uid": "0ef5e0621f13107d0c8786766ae2ac56", "id": 115, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2600, "testcases": "[{'input': '2\\r\\n', 'output': ['YES\\r\\n1\\r\\n1\\r\\n0\\r\\n']}, {'input': '3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '13\\r\\n', 'output': ['YES\\r\\n1\\r\\n2\\r\\n0\\r\\n']}, {'input': '1729\\r\\n', 'output': ['YES\\r\\n1\\r\\n4\\r\\n1\\r\\n156\\r\\n']}, {'input': '1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '156\\r\\n', 'output': ['YES\\r\\n1\\r\\n4\\r\\n1\\r\\n1729\\r\\n']}, {'input': '144\\r\\n', 'output': ['NO\\r\\n']}, {'input': '15407021574586369\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n']}, {'input': '1283918464548876\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n15407021574586369\\r\\n']}, {'input': '106993205379216\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '8916100449984\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '743008391424\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '61917613056\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '5162766336\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '465813504\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '1190892770349870530939783612223854919520376583681977765887915460625605936058755310651852367291739265953207545289130222590192089760107219016552443777446454737593270848929686985225627328165141495957916933183554147885929489200931370369335342990301385609877410822418323040587200691179244114277235163137\\r\\n', 'output': ['NO\\r\\n']}, {'input': '595446385174935265469891806111927459760188291840988882943957730312802968029377655325926183645869632976603772644565111295096044880053609508276221888723227368796635424464843492612813664082570747978958466591777073942964744600465685184667671495150692804938705411209161520293600345589622057138617581568\\r\\n', 'output': ['NO\\r\\n']}, {'input': '25\\r\\n', 'output': ['NO\\r\\n']}, {'input': '941796563564014133460267652699405064136604147775680640408635568423120076418612383600961606320075481457728632621229496557902028935524874377670656752361237195740789199168688114539822313589449591752852405348364368488613997844015773837981050319855641810991084718329572826001220219\\r\\n', 'output': ['NO\\r\\n']}, {'input': '79360359146807441660707083821018832188095237636414144034857851003419752010124705615779249215657075053438039921073878645370211154334804568157886814559909\\r\\n', 'output': ['NO\\r\\n']}, {'input': '63730052926382178992698271572\\r\\n', 'output': ['NO\\r\\n']}, {'input': '781127467969689863953686682245136076127159921705034542049372816247984349746396880068864077830521695515007722284098436125466526268962707778595903329840419133974864831578401355678018910046595664462\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6158324958633591462725987806787114657822761584945953440793358408\\r\\n', 'output': ['NO\\r\\n']}, {'input': '46865942276811740149949176718949673344632458696505595472917789224885825949034661409971763949176343056701403524645790892802371117466746709730235969308113002256137529699677021858777002204698794034488631496662175642982367736619451227\\r\\n', 'output': ['NO\\r\\n']}, {'input': '30237645054497458443810364460387991000047179363449854478913094584184671326397148735574822623728870964468880\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2340834982489248497640077401144544875656219324259480464300721974528452789353163588007890141857933775490305682107276886017882071992830194933217950703328428111517059826130590646975303231172522274173055168264136989194405810785131454927884294753122224538370897882934059\\r\\n', 'output': ['NO\\r\\n']}, {'input': '188808426143782131983811729737047667239979348184409855460833141044812532916921011366813880911319644625405122800255947507577498497005580408229\\r\\n', 'output': ['NO\\r\\n']}, {'input': '11\\r\\n', 'output': ['NO\\r\\n']}, {'input': '837952166310387766556098005402621146120844433859027080340550200820\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6658370691480968202384509492140362150472696196949673577340706113760133821635599667476781507918250717914609488172442814676\\r\\n', 'output': ['NO\\r\\n']}, {'input': '496620932866717074931903995027173085744596193421095444317407919730992986418713478580824584919587030125446806223296721174921873955469939680411818878465888018986191990428049489376\\r\\n', 'output': ['NO\\r\\n']}, {'input': '1055050055824280186133547527395898666709023463559337207019374080060005629519967890329878081184599905695126755199503698703340223998620951421943134090897041663457029971964336512111472968057533187306110300592753045593222495258017559167383354672\\r\\n', 'output': ['NO\\r\\n']}, {'input': '833488\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6623739799588591251984406341341227075747347067457011846886851179047097\\r\\n', 'output': ['NO\\r\\n']}, {'input': '491137842784568289872893698937459777201151060689848471272003426250808340375567208957554901863756992593841404624991936090178731\\r\\n', 'output': ['NO\\r\\n']}, {'input': '921020945402270233565256424740666649108666245414796768645533036514715926608741510409618545180420952947917462937925573726593991655435868735899832746218676826629010574075553051352459309199055\\r\\n', 'output': ['NO\\r\\n']}, {'input': '73010581613999159726778758153209240813500342925961695523976131595080552126499402124287397930918281238199343324378719343080627189983992629778313739785259010389762036264197722427990331444297391895841265448905560880286941336214995793596526089977876\\r\\n', 'output': ['NO\\r\\n']}, {'input': '20046142930690780976270827075270\\r\\n', 'output': ['NO\\r\\n']}, {'input': '9685166910821197056344900917707673568669808490600751439157007968027004377622601634787545920946543261243701428886581331490848676434786296227674864970612484770201\\r\\n', 'output': ['NO\\r\\n']}, {'input': '8135498415686025907059626116077260223347794805104214588176486213766836727225732896611278946787711775240855660997946707132990500568944980168321229607627861318462551364491230037357687242571268657488824365976425738641613571689437917277074234256494445914221354904615014917288299991097350709814\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4805043123239964766764344326469867688727869311599746349016084457204677169811854267718990063526979167327981002200329174783850464\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2376595620091080825479292544658464163405755746884100218035485700973409491416884420742631899446144679322008453313773241425622490028383089317622842863337164723765526589656211098933400307364163919083790470365474085981340438888606855706394352678991102\\r\\n', 'output': ['NO\\r\\n']}, {'input': '99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\\r\\n', 'output': ['NO\\r\\n']}, {'input': '145\\r\\n', 'output': ['YES\\r\\n1\\r\\n3\\r\\n1\\r\\n24\\r\\n']}, {'input': '24\\r\\n', 'output': ['YES\\r\\n1\\r\\n3\\r\\n1\\r\\n145\\r\\n']}, {'input': '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport static java.util.Collections.reverseOrder;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n *\n * @author Ahmed_Naser\n */\npublic class Population {\n    \n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        String s = input.nextLine();\n        int a[] = new int[2];\n        a[0] = 12; a[1] = 13;\n        int index = 0;\n        int count = 0;\n        int flag = 0;\n        int val1 = 0;\n        int val2 = 0;\n        boolean flag1 = false;\n        int n = 0;\n        int k = 0;\n        int temp = 1;\n        int max = 1000;\n        int min = 1;\n        \n        for(int i = 1; i < s.length(); i++){\n            if(s.charAt(i) == '0' && s.charAt(i-1)!= '0'){\n                flag = 1;\n                break;\n            }\n        }\n        \n        if(flag == 0){\n            int j = 0;\n            for(int i = 0; i < 2; i++){\n                while(true){\n                    if(a[i] > s){\n                        a[i] -= 12;\n                        if(a[i] == 1){\n                            a[i] = 13;\n                        }\n                    }\n                    else if(a[i] == s){\n                        flag1 = true;\n                        index = j;\n                        j = 0;\n                        break;\n                    }\n                    else if(a[i] < s){\n                        j++;\n                        if(j == 2){\n                            break;\n                        }\n                    }\n                    else if(a[i] == 1){\n                        j++;\n                        if(j == 2){\n                            break;\n                        }\n                    }\n                }\n            }\n            \n            if(flag1 == true){\n                System.out.println(\"YES\");\n                if(index == 0){\n                    n = 1;\n                    System.out.println(1);\n                    val1 = s;\n                }\n                else if(index == 1){\n                    n = 2;\n                    System.out.println(1 + \" \" + 2);\n                    val1 = (12 * s) - 13;\n                    val2 = s;\n                }\n                k = 0;\n                int temp1 = 0;\n                while(true){\n                    temp1 += 12;\n                    if(temp1 % 13 == 0){\n                        temp1 += 1;\n                        if(temp1 > 1000){\n                            break;\n                        }\n                        else{\n                            k++;\n                        }\n                    }\n                }\n                System.out.println(k);\n                for(int i = 0; i < k; i++){\n                    temp += 12;\n                    if(temp % 13 == 0){\n                        temp += 1;\n                        temp1 += 12;\n                        if(temp1 > 1000){\n                            break;\n                        }\n                        else{\n                            System.out.println(temp1);\n                        }\n                    }\n                }\n            }\n            else{\n                System.out.println(\"NO\");\n            }\n        }\n        else{\n            System.out.println(\"NO\");\n        }\n    }\n}\n"}
{"src_uid": "52b13cca189853e6af02bea8d3d85276", "id": 116, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2300, "testcases": "[{'input': '2 1 2\\r\\n1 2\\r\\nDmitry 1 1 1\\r\\nNatalia 2 0\\r\\nNatalia 1 1 1\\r\\nDmitry 2 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4 4 3\\r\\n1 3\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\nArtem 1 1 4\\r\\nDmitry 1 1 2\\r\\nEdvard 4 2 1 3\\r\\nArtem 2 0\\r\\nDmitry 1 0\\r\\nEdvard 4 4 1 2 3 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2 1 1\\r\\n2 1\\r\\nabsgdf 1 1 1\\r\\nabsgdf 1 1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '2 1 1\\r\\n2 1\\r\\nabsgdf 2 1 1\\r\\nabsgdf 1 1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3 3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\na 1 1 1\\r\\nb 2 1 3\\r\\nc 3 1 2\\r\\na 3 1 3\\r\\nb 1 0\\r\\nc 2 2 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3 3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\na 1 1 1\\r\\nb 2 1 3\\r\\nc 3 1 2\\r\\nb 1 1 2\\r\\nc 2 1 3\\r\\na 3 1 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3 3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\nb 1 1 2\\r\\nc 2 1 3\\r\\na 3 1 1\\r\\na 3 1 3\\r\\nb 1 0\\r\\nc 2 2 1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4 5 3\\r\\n1 2\\r\\n2 3\\r\\n2 4\\r\\n1 3\\r\\n1 3\\r\\na 1 2 4 3\\r\\nb 1 0\\r\\nc 4 3 1 2 5\\r\\na 1 2 4 3\\r\\nb 1 1 5\\r\\nc 4 2 1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2 2 2\\r\\n1 2\\r\\n2 1\\r\\nA 1 1 2\\r\\nB 1 1 1\\r\\nA 1 0\\r\\nB 2 2 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4 2 4\\r\\n2 1\\r\\n4 3\\r\\na 1 1 1\\r\\nb 2 1 2\\r\\nc 3 0\\r\\nd 4 0\\r\\na 2 1 2\\r\\nb 1 1 1\\r\\nc 3 0\\r\\nd 4 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4 2 4\\r\\n2 1\\r\\n4 3\\r\\na 1 1 1\\r\\nb 2 1 2\\r\\nc 3 0\\r\\nd 4 0\\r\\na 2 1 2\\r\\nb 1 1 1\\r\\nc 4 0\\r\\nd 3 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6 3 4\\r\\n1 2\\r\\n3 4\\r\\n5 6\\r\\na 1 2 1 3\\r\\nb 3 1 2\\r\\nc 5 0\\r\\nd 6 0\\r\\na 2 2 1 3\\r\\nb 4 1 2\\r\\nc 5 0\\r\\nd 6 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '6 3 4\\r\\n1 2\\r\\n3 4\\r\\n5 6\\r\\na 1 2 1 3\\r\\nb 3 1 2\\r\\nc 5 0\\r\\nd 6 0\\r\\na 2 1 1\\r\\nb 4 2 2 3\\r\\nc 5 0\\r\\nd 6 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10 20 5\\r\\n2 1\\r\\n3 1\\r\\n4 2\\r\\n5 1\\r\\n6 5\\r\\n7 2\\r\\n8 5\\r\\n9 8\\r\\n10 6\\r\\n2 6\\r\\n3 5\\r\\n3 4\\r\\n10 5\\r\\n8 3\\r\\n9 4\\r\\n10 8\\r\\n9 2\\r\\n6 3\\r\\n3 8\\r\\n9 8\\r\\nDKkXdT 10 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\\r\\nOzvgPXMzAr 5 0\\r\\nbjac 3 0\\r\\ncBPbJtoND 6 0\\r\\nw 5 0\\r\\nbjac 4 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\\r\\nOzvgPXMzAr 2 0\\r\\ncBPbJtoND 5 0\\r\\nw 10 0\\r\\nDKkXdT 4 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '10 9 10\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 8\\r\\n8 9\\r\\n9 10\\r\\nInCeN 1 0\\r\\nIzHqPceNhj 2 1 9\\r\\neH 3 1 8\\r\\nJvgBsNFi 4 1 7\\r\\nBA 5 1 6\\r\\nRrjSTXJzhL 6 1 5\\r\\nDMx 7 1 4\\r\\nJzt 8 1 3\\r\\nhxBRlDlqwD 9 1 2\\r\\nImWeEPkggZ 10 1 1\\r\\neH 1 0\\r\\nImWeEPkggZ 2 1 9\\r\\nDMx 3 1 8\\r\\nIzHqPceNhj 4 1 7\\r\\nInCeN 5 1 6\\r\\nJvgBsNFi 6 1 5\\r\\nRrjSTXJzhL 7 1 4\\r\\nJzt 8 1 3\\r\\nhxBRlDlqwD 9 1 2\\r\\nBA 10 1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '11 10 11\\r\\n1 2\\r\\n2 11\\r\\n3 4\\r\\n4 11\\r\\n5 6\\r\\n6 11\\r\\n7 8\\r\\n8 11\\r\\n9 10\\r\\n10 11\\r\\na 1 1 9\\r\\nb 2 1 10\\r\\nc 3 0\\r\\nd 4 1 1\\r\\ne 5 1 3\\r\\nf 6 1 4\\r\\ng 7 1 5\\r\\nh 8 1 6\\r\\ni 9 1 7\\r\\nj 10 1 8\\r\\nk 11 1 2\\r\\na 1 0\\r\\nb 2 0\\r\\nc 3 0\\r\\nd 4 0\\r\\ne 5 0\\r\\nf 6 0\\r\\ng 7 0\\r\\nh 8 0\\r\\ni 9 0\\r\\nj 10 0\\r\\nk 11 10 1 2 3 4 5 6 7 8 9 10\\r\\n', 'output': ['YES\\r\\n']}, {'input': '11 10 11\\r\\n1 2\\r\\n2 11\\r\\n3 4\\r\\n4 11\\r\\n5 6\\r\\n6 11\\r\\n7 8\\r\\n8 11\\r\\n9 10\\r\\n10 11\\r\\na 1 0\\r\\nb 2 0\\r\\nc 3 0\\r\\nd 4 0\\r\\ne 5 0\\r\\nf 6 0\\r\\ng 7 0\\r\\nh 8 0\\r\\ni 9 0\\r\\nj 10 0\\r\\nk 11 10 1 2 3 4 5 6 7 8 9 10\\r\\na 1 1 9\\r\\nb 2 1 10\\r\\nc 3 0\\r\\nd 4 1 1\\r\\ne 5 1 3\\r\\nf 6 1 4\\r\\ng 7 1 5\\r\\nh 8 1 6\\r\\ni 9 1 7\\r\\nj 10 1 8\\r\\nk 11 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '7 8 2\\r\\n3 7\\r\\n7 6\\r\\n1 2\\r\\n4 5\\r\\n1 3\\r\\n5 6\\r\\n4 6\\r\\n2 3\\r\\na 7 4 3 8 5 2\\r\\nb 7 4 4 6 7 1\\r\\na 1 4 3 8 5 2\\r\\nb 4 4 4 6 7 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7 8 2\\r\\n3 7\\r\\n7 6\\r\\n1 2\\r\\n4 5\\r\\n1 3\\r\\n5 6\\r\\n4 6\\r\\n2 3\\r\\na 1 4 3 8 5 2\\r\\nb 4 4 4 6 7 1\\r\\na 3 4 3 8 5 2\\r\\nb 6 4 4 6 7 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '7 7 2\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 1\\r\\na 1 4 1 3 5 7\\r\\nb 2 3 2 4 6\\r\\na 7 4 1 3 5 7\\r\\nb 4 3 2 4 6\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7 7 2\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 1\\r\\na 1 4 1 3 5 7\\r\\nb 2 3 2 4 6\\r\\na 4 4 1 3 5 7\\r\\nb 4 3 2 4 6\\r\\n', 'output': ['YES\\r\\n']}, {'input': '10 20 10\\r\\n1 10\\r\\n5 10\\r\\n2 9\\r\\n2 6\\r\\n9 6\\r\\n3 9\\r\\n7 1\\r\\n10 5\\r\\n7 8\\r\\n8 7\\r\\n2 3\\r\\n9 6\\r\\n1 6\\r\\n5 3\\r\\n4 3\\r\\n3 7\\r\\n8 2\\r\\n6 4\\r\\n2 3\\r\\n4 1\\r\\nTjOMmYPRUY 7 3 1 3 9\\r\\nj 6 2 11 15\\r\\nBanBSrUA 4 2 19 20\\r\\ncSWZxzR 8 1 8\\r\\nzVoRlNgt 10 2 6 7\\r\\nWLGaq 1 3 10 13 17\\r\\nKahHtTDj 1 2 2 14\\r\\nrUFZmkpI 6 1 16\\r\\ni 4 3 4 5 12\\r\\nKLGiua 6 1 18\\r\\nWLGaq 10 0\\r\\ncSWZxzR 3 1 4\\r\\nj 2 3 8 13 17\\r\\nrUFZmkpI 7 2 1 19\\r\\nKahHtTDj 5 1 16\\r\\nKLGiua 6 2 2 12\\r\\nBanBSrUA 2 4 6 7 10 15\\r\\nTjOMmYPRUY 9 3 3 9 18\\r\\nzVoRlNgt 10 2 11 20\\r\\ni 2 2 5 14\\r\\n', 'output': ['YES\\r\\n']}, {'input': '10 10 10\\r\\n7 10\\r\\n1 2\\r\\n4 3\\r\\n7 4\\r\\n9 2\\r\\n8 7\\r\\n10 8\\r\\n6 10\\r\\n5 2\\r\\n6 10\\r\\nznkkxCkkxv 9 1 10\\r\\nP 5 1 7\\r\\nKOF 1 2 3 9\\r\\nwYtfFWkb 3 0\\r\\nZPJiebeu 9 1 6\\r\\ndgzAhKY 4 0\\r\\nayqPf 3 0\\r\\nxFSb 9 0\\r\\nreYnbMDm 10 1 1\\r\\nydSIPy 6 4 2 4 5 8\\r\\nKOF 10 1 4\\r\\nayqPf 7 1 7\\r\\nreYnbMDm 4 1 5\\r\\nwYtfFWkb 5 1 6\\r\\nznkkxCkkxv 9 2 1 9\\r\\nydSIPy 10 0\\r\\nP 10 1 8\\r\\ndgzAhKY 7 1 2\\r\\nZPJiebeu 8 1 3\\r\\nxFSb 7 1 10\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 8 5\\r\\n1 3\\r\\n4 2\\r\\n1 3\\r\\n4 2\\r\\n1 5\\r\\n5 3\\r\\n2 5\\r\\n2 5\\r\\nTaMmKIk 1 0\\r\\nvrLryIxio 1 3 1 6 5\\r\\nGFKONi 2 1 4\\r\\nTzRVfh 3 2 3 8\\r\\nqp 4 2 7 2\\r\\nTaMmKIk 1 2 7 4\\r\\nvrLryIxio 1 3 1 6 5\\r\\nTzRVfh 3 1 8\\r\\nqp 4 1 3\\r\\nGFKONi 4 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '10 9 10\\r\\n4 7\\r\\n4 8\\r\\n8 3\\r\\n9 2\\r\\n8 3\\r\\n8 1\\r\\n6 9\\r\\n4 7\\r\\n7 4\\r\\nznkkxCkkxv 1 2 3 6\\r\\nQlf 3 0\\r\\nKOF 5 2 1 8\\r\\ndgzAhKY 5 0\\r\\nwYtfFWkb 6 2 4 7\\r\\nLbYfZPhWd 9 0\\r\\nP 10 1 9\\r\\nZPJiebeu 10 1 5\\r\\nayqPf 10 0\\r\\nzmZLwuf 10 1 2\\r\\nwYtfFWkb 2 2 7 4\\r\\nQlf 3 1 2\\r\\nznkkxCkkxv 3 3 6 3 9\\r\\nKOF 5 0\\r\\ndgzAhKY 5 0\\r\\nLbYfZPhWd 9 0\\r\\nP 10 1 5\\r\\nZPJiebeu 10 0\\r\\nayqPf 10 0\\r\\nzmZLwuf 10 2 1 8\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.io.*;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author JUAN CARLOS\n */\npublic class Main {\n    public static void main(String[] args) {\n        \n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader input = new InputReader(inputStream);\n        OutputWriter output = new OutputWriter(outputStream);\n        String n,m,k;\n        String str1[][];\n        String str2[][];\n        int aux,num1[][], num2[][], i, j, a, b;\n        \n        n = input.next();\n        m = input.next();\n        k = input.next();\n        int n_1 = Integer.parseInt(n);\n        int m_1 = Integer.parseInt(m);\n        int k_1 = Integer.parseInt(k);\n        str1 = new String [k_1][3];\n        str2 = new String [k_1][3];\n        for(i = 0;i < k_1;i++)\n        {\n            str1[i] = input.next().split(\" \");\n        }\n        for(i = 0;i < k_1;i++)\n        {\n            str2[i] = input.next().split(\" \");\n        }\n        num1 = new int[k_1][m_1+1];\n        num2 = new int[k_1][m_1+1];\n        for(i = 0;i < k_1;i++)\n        {\n            for(j = 0;j < str1[i].length-1;j++)\n            {\n                num1[i][j] = Integer.parseInt(str1[i][j+1]);\n            }\n            for(j = 0;j < str2[i].length-1;j++)\n            {\n                num2[i][j] = Integer.parseInt(str2[i][j+1]);\n            }\n        }\n        \n        //System.out.print(str1[0][2]);\n        for(i = 0;i < k_1;i++)\n        {\n            for(j = 0;j < m_1;j++)\n            {\n                a = num1[i][j];\n                b = num2[i][j];\n                for(a = num1[i][j];a!= 0;a = num1[i][a-1])\n                {\n                    for(b = num2[i][j];b!= 0;b = num2[i][b-1])\n                    {\n                        if((num1[i][b-1]!= 0) && (num2[i][num1[i][b-1]-1]!= j+1))\n                        {\n                            aux = num1[i][b-1];\n                            num1[i][b-1] = num1[i][j];\n                            num1[i][j] = aux;\n                        }\n                    }\n                }\n                //if((num1[i][num1[i].length-1]!= 0) && (num1[i][num1[i].length-1]!= num2[i][j]))\n                if((num1[i][num1[i].length-1]!= 0) && (num2[i][num1[i][num1[i].length-1]-1]!= j))\n                {\n                    aux = num1[i][num1[i].length-1];\n                    num1[i][num1[i].length-1] = num1[i][j];\n                    num1[i][j] = aux;\n                }\n            }\n        }\n        //System.out.println(str1[0][2]);\n        //System.out.println();\n        //for(i = 0;i < k_1;i++)\n        //{\n        //    for(j = 0;j < m_1;j++)\n        //    {\n        //        System.out.print(num1[i][j]);\n        //        System.out.print"}
{"src_uid": "52b13cca189853e6af02bea8d3d85276", "id": 116, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2300, "testcases": "[{'input': '2 1 2\\r\\n1 2\\r\\nDmitry 1 1 1\\r\\nNatalia 2 0\\r\\nNatalia 1 1 1\\r\\nDmitry 2 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4 4 3\\r\\n1 3\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\nArtem 1 1 4\\r\\nDmitry 1 1 2\\r\\nEdvard 4 2 1 3\\r\\nArtem 2 0\\r\\nDmitry 1 0\\r\\nEdvard 4 4 1 2 3 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2 1 1\\r\\n2 1\\r\\nabsgdf 1 1 1\\r\\nabsgdf 1 1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '2 1 1\\r\\n2 1\\r\\nabsgdf 2 1 1\\r\\nabsgdf 1 1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3 3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\na 1 1 1\\r\\nb 2 1 3\\r\\nc 3 1 2\\r\\na 3 1 3\\r\\nb 1 0\\r\\nc 2 2 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3 3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\na 1 1 1\\r\\nb 2 1 3\\r\\nc 3 1 2\\r\\nb 1 1 2\\r\\nc 2 1 3\\r\\na 3 1 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3 3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\nb 1 1 2\\r\\nc 2 1 3\\r\\na 3 1 1\\r\\na 3 1 3\\r\\nb 1 0\\r\\nc 2 2 1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4 5 3\\r\\n1 2\\r\\n2 3\\r\\n2 4\\r\\n1 3\\r\\n1 3\\r\\na 1 2 4 3\\r\\nb 1 0\\r\\nc 4 3 1 2 5\\r\\na 1 2 4 3\\r\\nb 1 1 5\\r\\nc 4 2 1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2 2 2\\r\\n1 2\\r\\n2 1\\r\\nA 1 1 2\\r\\nB 1 1 1\\r\\nA 1 0\\r\\nB 2 2 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4 2 4\\r\\n2 1\\r\\n4 3\\r\\na 1 1 1\\r\\nb 2 1 2\\r\\nc 3 0\\r\\nd 4 0\\r\\na 2 1 2\\r\\nb 1 1 1\\r\\nc 3 0\\r\\nd 4 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4 2 4\\r\\n2 1\\r\\n4 3\\r\\na 1 1 1\\r\\nb 2 1 2\\r\\nc 3 0\\r\\nd 4 0\\r\\na 2 1 2\\r\\nb 1 1 1\\r\\nc 4 0\\r\\nd 3 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6 3 4\\r\\n1 2\\r\\n3 4\\r\\n5 6\\r\\na 1 2 1 3\\r\\nb 3 1 2\\r\\nc 5 0\\r\\nd 6 0\\r\\na 2 2 1 3\\r\\nb 4 1 2\\r\\nc 5 0\\r\\nd 6 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '6 3 4\\r\\n1 2\\r\\n3 4\\r\\n5 6\\r\\na 1 2 1 3\\r\\nb 3 1 2\\r\\nc 5 0\\r\\nd 6 0\\r\\na 2 1 1\\r\\nb 4 2 2 3\\r\\nc 5 0\\r\\nd 6 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10 20 5\\r\\n2 1\\r\\n3 1\\r\\n4 2\\r\\n5 1\\r\\n6 5\\r\\n7 2\\r\\n8 5\\r\\n9 8\\r\\n10 6\\r\\n2 6\\r\\n3 5\\r\\n3 4\\r\\n10 5\\r\\n8 3\\r\\n9 4\\r\\n10 8\\r\\n9 2\\r\\n6 3\\r\\n3 8\\r\\n9 8\\r\\nDKkXdT 10 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\\r\\nOzvgPXMzAr 5 0\\r\\nbjac 3 0\\r\\ncBPbJtoND 6 0\\r\\nw 5 0\\r\\nbjac 4 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\\r\\nOzvgPXMzAr 2 0\\r\\ncBPbJtoND 5 0\\r\\nw 10 0\\r\\nDKkXdT 4 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '10 9 10\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 8\\r\\n8 9\\r\\n9 10\\r\\nInCeN 1 0\\r\\nIzHqPceNhj 2 1 9\\r\\neH 3 1 8\\r\\nJvgBsNFi 4 1 7\\r\\nBA 5 1 6\\r\\nRrjSTXJzhL 6 1 5\\r\\nDMx 7 1 4\\r\\nJzt 8 1 3\\r\\nhxBRlDlqwD 9 1 2\\r\\nImWeEPkggZ 10 1 1\\r\\neH 1 0\\r\\nImWeEPkggZ 2 1 9\\r\\nDMx 3 1 8\\r\\nIzHqPceNhj 4 1 7\\r\\nInCeN 5 1 6\\r\\nJvgBsNFi 6 1 5\\r\\nRrjSTXJzhL 7 1 4\\r\\nJzt 8 1 3\\r\\nhxBRlDlqwD 9 1 2\\r\\nBA 10 1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '11 10 11\\r\\n1 2\\r\\n2 11\\r\\n3 4\\r\\n4 11\\r\\n5 6\\r\\n6 11\\r\\n7 8\\r\\n8 11\\r\\n9 10\\r\\n10 11\\r\\na 1 1 9\\r\\nb 2 1 10\\r\\nc 3 0\\r\\nd 4 1 1\\r\\ne 5 1 3\\r\\nf 6 1 4\\r\\ng 7 1 5\\r\\nh 8 1 6\\r\\ni 9 1 7\\r\\nj 10 1 8\\r\\nk 11 1 2\\r\\na 1 0\\r\\nb 2 0\\r\\nc 3 0\\r\\nd 4 0\\r\\ne 5 0\\r\\nf 6 0\\r\\ng 7 0\\r\\nh 8 0\\r\\ni 9 0\\r\\nj 10 0\\r\\nk 11 10 1 2 3 4 5 6 7 8 9 10\\r\\n', 'output': ['YES\\r\\n']}, {'input': '11 10 11\\r\\n1 2\\r\\n2 11\\r\\n3 4\\r\\n4 11\\r\\n5 6\\r\\n6 11\\r\\n7 8\\r\\n8 11\\r\\n9 10\\r\\n10 11\\r\\na 1 0\\r\\nb 2 0\\r\\nc 3 0\\r\\nd 4 0\\r\\ne 5 0\\r\\nf 6 0\\r\\ng 7 0\\r\\nh 8 0\\r\\ni 9 0\\r\\nj 10 0\\r\\nk 11 10 1 2 3 4 5 6 7 8 9 10\\r\\na 1 1 9\\r\\nb 2 1 10\\r\\nc 3 0\\r\\nd 4 1 1\\r\\ne 5 1 3\\r\\nf 6 1 4\\r\\ng 7 1 5\\r\\nh 8 1 6\\r\\ni 9 1 7\\r\\nj 10 1 8\\r\\nk 11 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '7 8 2\\r\\n3 7\\r\\n7 6\\r\\n1 2\\r\\n4 5\\r\\n1 3\\r\\n5 6\\r\\n4 6\\r\\n2 3\\r\\na 7 4 3 8 5 2\\r\\nb 7 4 4 6 7 1\\r\\na 1 4 3 8 5 2\\r\\nb 4 4 4 6 7 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7 8 2\\r\\n3 7\\r\\n7 6\\r\\n1 2\\r\\n4 5\\r\\n1 3\\r\\n5 6\\r\\n4 6\\r\\n2 3\\r\\na 1 4 3 8 5 2\\r\\nb 4 4 4 6 7 1\\r\\na 3 4 3 8 5 2\\r\\nb 6 4 4 6 7 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '7 7 2\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 1\\r\\na 1 4 1 3 5 7\\r\\nb 2 3 2 4 6\\r\\na 7 4 1 3 5 7\\r\\nb 4 3 2 4 6\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7 7 2\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 1\\r\\na 1 4 1 3 5 7\\r\\nb 2 3 2 4 6\\r\\na 4 4 1 3 5 7\\r\\nb 4 3 2 4 6\\r\\n', 'output': ['YES\\r\\n']}, {'input': '10 20 10\\r\\n1 10\\r\\n5 10\\r\\n2 9\\r\\n2 6\\r\\n9 6\\r\\n3 9\\r\\n7 1\\r\\n10 5\\r\\n7 8\\r\\n8 7\\r\\n2 3\\r\\n9 6\\r\\n1 6\\r\\n5 3\\r\\n4 3\\r\\n3 7\\r\\n8 2\\r\\n6 4\\r\\n2 3\\r\\n4 1\\r\\nTjOMmYPRUY 7 3 1 3 9\\r\\nj 6 2 11 15\\r\\nBanBSrUA 4 2 19 20\\r\\ncSWZxzR 8 1 8\\r\\nzVoRlNgt 10 2 6 7\\r\\nWLGaq 1 3 10 13 17\\r\\nKahHtTDj 1 2 2 14\\r\\nrUFZmkpI 6 1 16\\r\\ni 4 3 4 5 12\\r\\nKLGiua 6 1 18\\r\\nWLGaq 10 0\\r\\ncSWZxzR 3 1 4\\r\\nj 2 3 8 13 17\\r\\nrUFZmkpI 7 2 1 19\\r\\nKahHtTDj 5 1 16\\r\\nKLGiua 6 2 2 12\\r\\nBanBSrUA 2 4 6 7 10 15\\r\\nTjOMmYPRUY 9 3 3 9 18\\r\\nzVoRlNgt 10 2 11 20\\r\\ni 2 2 5 14\\r\\n', 'output': ['YES\\r\\n']}, {'input': '10 10 10\\r\\n7 10\\r\\n1 2\\r\\n4 3\\r\\n7 4\\r\\n9 2\\r\\n8 7\\r\\n10 8\\r\\n6 10\\r\\n5 2\\r\\n6 10\\r\\nznkkxCkkxv 9 1 10\\r\\nP 5 1 7\\r\\nKOF 1 2 3 9\\r\\nwYtfFWkb 3 0\\r\\nZPJiebeu 9 1 6\\r\\ndgzAhKY 4 0\\r\\nayqPf 3 0\\r\\nxFSb 9 0\\r\\nreYnbMDm 10 1 1\\r\\nydSIPy 6 4 2 4 5 8\\r\\nKOF 10 1 4\\r\\nayqPf 7 1 7\\r\\nreYnbMDm 4 1 5\\r\\nwYtfFWkb 5 1 6\\r\\nznkkxCkkxv 9 2 1 9\\r\\nydSIPy 10 0\\r\\nP 10 1 8\\r\\ndgzAhKY 7 1 2\\r\\nZPJiebeu 8 1 3\\r\\nxFSb 7 1 10\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 8 5\\r\\n1 3\\r\\n4 2\\r\\n1 3\\r\\n4 2\\r\\n1 5\\r\\n5 3\\r\\n2 5\\r\\n2 5\\r\\nTaMmKIk 1 0\\r\\nvrLryIxio 1 3 1 6 5\\r\\nGFKONi 2 1 4\\r\\nTzRVfh 3 2 3 8\\r\\nqp 4 2 7 2\\r\\nTaMmKIk 1 2 7 4\\r\\nvrLryIxio 1 3 1 6 5\\r\\nTzRVfh 3 1 8\\r\\nqp 4 1 3\\r\\nGFKONi 4 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '10 9 10\\r\\n4 7\\r\\n4 8\\r\\n8 3\\r\\n9 2\\r\\n8 3\\r\\n8 1\\r\\n6 9\\r\\n4 7\\r\\n7 4\\r\\nznkkxCkkxv 1 2 3 6\\r\\nQlf 3 0\\r\\nKOF 5 2 1 8\\r\\ndgzAhKY 5 0\\r\\nwYtfFWkb 6 2 4 7\\r\\nLbYfZPhWd 9 0\\r\\nP 10 1 9\\r\\nZPJiebeu 10 1 5\\r\\nayqPf 10 0\\r\\nzmZLwuf 10 1 2\\r\\nwYtfFWkb 2 2 7 4\\r\\nQlf 3 1 2\\r\\nznkkxCkkxv 3 3 6 3 9\\r\\nKOF 5 0\\r\\ndgzAhKY 5 0\\r\\nLbYfZPhWd 9 0\\r\\nP 10 1 5\\r\\nZPJiebeu 10 0\\r\\nayqPf 10 0\\r\\nzmZLwuf 10 2 1 8\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport static java.util.Map.Entry.comparingByKey;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n *\n * @author Mohamed_Naser\n */\npublic class HomeIsTheSickestBet {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt(), m = in.nextInt(), k = in.nextInt();\n        int[] arr = new int[m];\n        int[] d = new int[m];\n        String[] s = new String[k];\n        String[] s2 = new String[k];\n        \n        for(int i = 0 ; i < m ; i++)\n            arr[i] = in.nextInt();\n        \n        for(int i = 0 ; i < m ; i++)\n            d[i] = in.nextInt();\n        \n        for(int i = 0 ; i < k ; i++)\n            s[i] = in.next();\n        \n        for(int i = 0 ; i < k ; i++){\n            s2[i] = in.next();\n            int f = in.nextInt();\n            while(f > 0){\n                f--;\n                int c = in.nextInt();\n                if(arr[c-1] == 0 || arr[c-1] == arr[arr[i]-1])\n                    arr[c-1] = arr[i];\n                else if(arr[c-1]!= 0 && arr[c-1]!= arr[arr[i]-1])\n                    d[c-1]++;\n            }\n            if(s[i].equals(s2[i]))\n                continue;\n            else if((arr[arr[i]-1]!= 0 && arr[arr[i]-1]!= arr[arr[arr[i]-1]-1]) || (d[arr[i]-1]!= 0 && d[arr[i]-1]!= d[arr[arr[i]-1]-1]))\n                System.out.print(\"NO\");\n            else\n                System.out.print(\"YES\");\n            return ;\n        }\n        \n        System.out.print(\"YES\");\n        \n        \n    }\n}\n"}
{"src_uid": "52b13cca189853e6af02bea8d3d85276", "id": 116, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2300, "testcases": "[{'input': '2 1 2\\r\\n1 2\\r\\nDmitry 1 1 1\\r\\nNatalia 2 0\\r\\nNatalia 1 1 1\\r\\nDmitry 2 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4 4 3\\r\\n1 3\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\nArtem 1 1 4\\r\\nDmitry 1 1 2\\r\\nEdvard 4 2 1 3\\r\\nArtem 2 0\\r\\nDmitry 1 0\\r\\nEdvard 4 4 1 2 3 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2 1 1\\r\\n2 1\\r\\nabsgdf 1 1 1\\r\\nabsgdf 1 1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '2 1 1\\r\\n2 1\\r\\nabsgdf 2 1 1\\r\\nabsgdf 1 1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3 3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\na 1 1 1\\r\\nb 2 1 3\\r\\nc 3 1 2\\r\\na 3 1 3\\r\\nb 1 0\\r\\nc 2 2 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3 3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\na 1 1 1\\r\\nb 2 1 3\\r\\nc 3 1 2\\r\\nb 1 1 2\\r\\nc 2 1 3\\r\\na 3 1 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3 3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\nb 1 1 2\\r\\nc 2 1 3\\r\\na 3 1 1\\r\\na 3 1 3\\r\\nb 1 0\\r\\nc 2 2 1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4 5 3\\r\\n1 2\\r\\n2 3\\r\\n2 4\\r\\n1 3\\r\\n1 3\\r\\na 1 2 4 3\\r\\nb 1 0\\r\\nc 4 3 1 2 5\\r\\na 1 2 4 3\\r\\nb 1 1 5\\r\\nc 4 2 1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2 2 2\\r\\n1 2\\r\\n2 1\\r\\nA 1 1 2\\r\\nB 1 1 1\\r\\nA 1 0\\r\\nB 2 2 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4 2 4\\r\\n2 1\\r\\n4 3\\r\\na 1 1 1\\r\\nb 2 1 2\\r\\nc 3 0\\r\\nd 4 0\\r\\na 2 1 2\\r\\nb 1 1 1\\r\\nc 3 0\\r\\nd 4 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4 2 4\\r\\n2 1\\r\\n4 3\\r\\na 1 1 1\\r\\nb 2 1 2\\r\\nc 3 0\\r\\nd 4 0\\r\\na 2 1 2\\r\\nb 1 1 1\\r\\nc 4 0\\r\\nd 3 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6 3 4\\r\\n1 2\\r\\n3 4\\r\\n5 6\\r\\na 1 2 1 3\\r\\nb 3 1 2\\r\\nc 5 0\\r\\nd 6 0\\r\\na 2 2 1 3\\r\\nb 4 1 2\\r\\nc 5 0\\r\\nd 6 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '6 3 4\\r\\n1 2\\r\\n3 4\\r\\n5 6\\r\\na 1 2 1 3\\r\\nb 3 1 2\\r\\nc 5 0\\r\\nd 6 0\\r\\na 2 1 1\\r\\nb 4 2 2 3\\r\\nc 5 0\\r\\nd 6 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10 20 5\\r\\n2 1\\r\\n3 1\\r\\n4 2\\r\\n5 1\\r\\n6 5\\r\\n7 2\\r\\n8 5\\r\\n9 8\\r\\n10 6\\r\\n2 6\\r\\n3 5\\r\\n3 4\\r\\n10 5\\r\\n8 3\\r\\n9 4\\r\\n10 8\\r\\n9 2\\r\\n6 3\\r\\n3 8\\r\\n9 8\\r\\nDKkXdT 10 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\\r\\nOzvgPXMzAr 5 0\\r\\nbjac 3 0\\r\\ncBPbJtoND 6 0\\r\\nw 5 0\\r\\nbjac 4 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\\r\\nOzvgPXMzAr 2 0\\r\\ncBPbJtoND 5 0\\r\\nw 10 0\\r\\nDKkXdT 4 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '10 9 10\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 8\\r\\n8 9\\r\\n9 10\\r\\nInCeN 1 0\\r\\nIzHqPceNhj 2 1 9\\r\\neH 3 1 8\\r\\nJvgBsNFi 4 1 7\\r\\nBA 5 1 6\\r\\nRrjSTXJzhL 6 1 5\\r\\nDMx 7 1 4\\r\\nJzt 8 1 3\\r\\nhxBRlDlqwD 9 1 2\\r\\nImWeEPkggZ 10 1 1\\r\\neH 1 0\\r\\nImWeEPkggZ 2 1 9\\r\\nDMx 3 1 8\\r\\nIzHqPceNhj 4 1 7\\r\\nInCeN 5 1 6\\r\\nJvgBsNFi 6 1 5\\r\\nRrjSTXJzhL 7 1 4\\r\\nJzt 8 1 3\\r\\nhxBRlDlqwD 9 1 2\\r\\nBA 10 1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '11 10 11\\r\\n1 2\\r\\n2 11\\r\\n3 4\\r\\n4 11\\r\\n5 6\\r\\n6 11\\r\\n7 8\\r\\n8 11\\r\\n9 10\\r\\n10 11\\r\\na 1 1 9\\r\\nb 2 1 10\\r\\nc 3 0\\r\\nd 4 1 1\\r\\ne 5 1 3\\r\\nf 6 1 4\\r\\ng 7 1 5\\r\\nh 8 1 6\\r\\ni 9 1 7\\r\\nj 10 1 8\\r\\nk 11 1 2\\r\\na 1 0\\r\\nb 2 0\\r\\nc 3 0\\r\\nd 4 0\\r\\ne 5 0\\r\\nf 6 0\\r\\ng 7 0\\r\\nh 8 0\\r\\ni 9 0\\r\\nj 10 0\\r\\nk 11 10 1 2 3 4 5 6 7 8 9 10\\r\\n', 'output': ['YES\\r\\n']}, {'input': '11 10 11\\r\\n1 2\\r\\n2 11\\r\\n3 4\\r\\n4 11\\r\\n5 6\\r\\n6 11\\r\\n7 8\\r\\n8 11\\r\\n9 10\\r\\n10 11\\r\\na 1 0\\r\\nb 2 0\\r\\nc 3 0\\r\\nd 4 0\\r\\ne 5 0\\r\\nf 6 0\\r\\ng 7 0\\r\\nh 8 0\\r\\ni 9 0\\r\\nj 10 0\\r\\nk 11 10 1 2 3 4 5 6 7 8 9 10\\r\\na 1 1 9\\r\\nb 2 1 10\\r\\nc 3 0\\r\\nd 4 1 1\\r\\ne 5 1 3\\r\\nf 6 1 4\\r\\ng 7 1 5\\r\\nh 8 1 6\\r\\ni 9 1 7\\r\\nj 10 1 8\\r\\nk 11 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '7 8 2\\r\\n3 7\\r\\n7 6\\r\\n1 2\\r\\n4 5\\r\\n1 3\\r\\n5 6\\r\\n4 6\\r\\n2 3\\r\\na 7 4 3 8 5 2\\r\\nb 7 4 4 6 7 1\\r\\na 1 4 3 8 5 2\\r\\nb 4 4 4 6 7 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7 8 2\\r\\n3 7\\r\\n7 6\\r\\n1 2\\r\\n4 5\\r\\n1 3\\r\\n5 6\\r\\n4 6\\r\\n2 3\\r\\na 1 4 3 8 5 2\\r\\nb 4 4 4 6 7 1\\r\\na 3 4 3 8 5 2\\r\\nb 6 4 4 6 7 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '7 7 2\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 1\\r\\na 1 4 1 3 5 7\\r\\nb 2 3 2 4 6\\r\\na 7 4 1 3 5 7\\r\\nb 4 3 2 4 6\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7 7 2\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 1\\r\\na 1 4 1 3 5 7\\r\\nb 2 3 2 4 6\\r\\na 4 4 1 3 5 7\\r\\nb 4 3 2 4 6\\r\\n', 'output': ['YES\\r\\n']}, {'input': '10 20 10\\r\\n1 10\\r\\n5 10\\r\\n2 9\\r\\n2 6\\r\\n9 6\\r\\n3 9\\r\\n7 1\\r\\n10 5\\r\\n7 8\\r\\n8 7\\r\\n2 3\\r\\n9 6\\r\\n1 6\\r\\n5 3\\r\\n4 3\\r\\n3 7\\r\\n8 2\\r\\n6 4\\r\\n2 3\\r\\n4 1\\r\\nTjOMmYPRUY 7 3 1 3 9\\r\\nj 6 2 11 15\\r\\nBanBSrUA 4 2 19 20\\r\\ncSWZxzR 8 1 8\\r\\nzVoRlNgt 10 2 6 7\\r\\nWLGaq 1 3 10 13 17\\r\\nKahHtTDj 1 2 2 14\\r\\nrUFZmkpI 6 1 16\\r\\ni 4 3 4 5 12\\r\\nKLGiua 6 1 18\\r\\nWLGaq 10 0\\r\\ncSWZxzR 3 1 4\\r\\nj 2 3 8 13 17\\r\\nrUFZmkpI 7 2 1 19\\r\\nKahHtTDj 5 1 16\\r\\nKLGiua 6 2 2 12\\r\\nBanBSrUA 2 4 6 7 10 15\\r\\nTjOMmYPRUY 9 3 3 9 18\\r\\nzVoRlNgt 10 2 11 20\\r\\ni 2 2 5 14\\r\\n', 'output': ['YES\\r\\n']}, {'input': '10 10 10\\r\\n7 10\\r\\n1 2\\r\\n4 3\\r\\n7 4\\r\\n9 2\\r\\n8 7\\r\\n10 8\\r\\n6 10\\r\\n5 2\\r\\n6 10\\r\\nznkkxCkkxv 9 1 10\\r\\nP 5 1 7\\r\\nKOF 1 2 3 9\\r\\nwYtfFWkb 3 0\\r\\nZPJiebeu 9 1 6\\r\\ndgzAhKY 4 0\\r\\nayqPf 3 0\\r\\nxFSb 9 0\\r\\nreYnbMDm 10 1 1\\r\\nydSIPy 6 4 2 4 5 8\\r\\nKOF 10 1 4\\r\\nayqPf 7 1 7\\r\\nreYnbMDm 4 1 5\\r\\nwYtfFWkb 5 1 6\\r\\nznkkxCkkxv 9 2 1 9\\r\\nydSIPy 10 0\\r\\nP 10 1 8\\r\\ndgzAhKY 7 1 2\\r\\nZPJiebeu 8 1 3\\r\\nxFSb 7 1 10\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 8 5\\r\\n1 3\\r\\n4 2\\r\\n1 3\\r\\n4 2\\r\\n1 5\\r\\n5 3\\r\\n2 5\\r\\n2 5\\r\\nTaMmKIk 1 0\\r\\nvrLryIxio 1 3 1 6 5\\r\\nGFKONi 2 1 4\\r\\nTzRVfh 3 2 3 8\\r\\nqp 4 2 7 2\\r\\nTaMmKIk 1 2 7 4\\r\\nvrLryIxio 1 3 1 6 5\\r\\nTzRVfh 3 1 8\\r\\nqp 4 1 3\\r\\nGFKONi 4 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '10 9 10\\r\\n4 7\\r\\n4 8\\r\\n8 3\\r\\n9 2\\r\\n8 3\\r\\n8 1\\r\\n6 9\\r\\n4 7\\r\\n7 4\\r\\nznkkxCkkxv 1 2 3 6\\r\\nQlf 3 0\\r\\nKOF 5 2 1 8\\r\\ndgzAhKY 5 0\\r\\nwYtfFWkb 6 2 4 7\\r\\nLbYfZPhWd 9 0\\r\\nP 10 1 9\\r\\nZPJiebeu 10 1 5\\r\\nayqPf 10 0\\r\\nzmZLwuf 10 1 2\\r\\nwYtfFWkb 2 2 7 4\\r\\nQlf 3 1 2\\r\\nznkkxCkkxv 3 3 6 3 9\\r\\nKOF 5 0\\r\\ndgzAhKY 5 0\\r\\nLbYfZPhWd 9 0\\r\\nP 10 1 5\\r\\nZPJiebeu 10 0\\r\\nayqPf 10 0\\r\\nzmZLwuf 10 2 1 8\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.util.Arrays;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String[] args) {\n    \t\t\t\t\n        Scanner in=new Scanner(System.in);\n        int n = in.nextInt(), m = in.nextInt(), k = in.nextInt();\n        int [] keys = new int [1002];\n        int [][] doors = new int[1002][2];\n        int i,j,t1,t2,x,y;\n        for(i=0; i<m; i++)\n        \t\tfor(j=0;j<2;j++)\n        \t\t\tdoors[i][j] = in.nextInt();\n        for(i=0; i<k; i++)\n        \t\t{\n        \t\t\t\tString name = in.next();\n        \t\t\t\tx = in.nextInt();\n        \t\t\t\tfor(j=0; j<n; j++)\n        \t\t\t\t\t\tif(j+1 == x)\n        \t\t\t\t\t\t\t\ty = j;\n        \t\t\t\tkeys[y] = in.nextInt();\n        \t\t\t\tfor(j=0; j<keys[y]; j++)\n        \t\t\t\t\t\t{\n        \t\t\t\t\t\t\t\tt1 = in.nextInt() - 1;\n        \t\t\t\t\t\t\t\tt2 = doors[t1][0] == y? 0 : 1;\n        \t\t\t\t\t\t\t\tkeys[doors[t1][t2]]++;\n        \t\t\t\t\t\t}\n        \t\t}\n        String ans = \"NO\";\n        for(i=0; i<n; i++)\n        \t\tfor(j=0; j<n; j++)\n        \t\t\t\tif(i!= j)\n        \t\t\t\t{\n        \t\t\t\t\t\tif((keys[i] < keys[j] && (doors[i][0] == j || doors[j][0] == i)) || (keys[i] > keys[j] && (doors[i][1] == j || doors[j][1] == i)))\n        \t\t\t\t\t\t\t\tans = \"YES\";\n        \t\t\t\t}\n        System.out.println(ans);\n    }\n}"}
{"src_uid": "52b13cca189853e6af02bea8d3d85276", "id": 116, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2300, "testcases": "[{'input': '2 1 2\\r\\n1 2\\r\\nDmitry 1 1 1\\r\\nNatalia 2 0\\r\\nNatalia 1 1 1\\r\\nDmitry 2 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4 4 3\\r\\n1 3\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\nArtem 1 1 4\\r\\nDmitry 1 1 2\\r\\nEdvard 4 2 1 3\\r\\nArtem 2 0\\r\\nDmitry 1 0\\r\\nEdvard 4 4 1 2 3 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2 1 1\\r\\n2 1\\r\\nabsgdf 1 1 1\\r\\nabsgdf 1 1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '2 1 1\\r\\n2 1\\r\\nabsgdf 2 1 1\\r\\nabsgdf 1 1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3 3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\na 1 1 1\\r\\nb 2 1 3\\r\\nc 3 1 2\\r\\na 3 1 3\\r\\nb 1 0\\r\\nc 2 2 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3 3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\na 1 1 1\\r\\nb 2 1 3\\r\\nc 3 1 2\\r\\nb 1 1 2\\r\\nc 2 1 3\\r\\na 3 1 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3 3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\nb 1 1 2\\r\\nc 2 1 3\\r\\na 3 1 1\\r\\na 3 1 3\\r\\nb 1 0\\r\\nc 2 2 1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4 5 3\\r\\n1 2\\r\\n2 3\\r\\n2 4\\r\\n1 3\\r\\n1 3\\r\\na 1 2 4 3\\r\\nb 1 0\\r\\nc 4 3 1 2 5\\r\\na 1 2 4 3\\r\\nb 1 1 5\\r\\nc 4 2 1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2 2 2\\r\\n1 2\\r\\n2 1\\r\\nA 1 1 2\\r\\nB 1 1 1\\r\\nA 1 0\\r\\nB 2 2 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4 2 4\\r\\n2 1\\r\\n4 3\\r\\na 1 1 1\\r\\nb 2 1 2\\r\\nc 3 0\\r\\nd 4 0\\r\\na 2 1 2\\r\\nb 1 1 1\\r\\nc 3 0\\r\\nd 4 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4 2 4\\r\\n2 1\\r\\n4 3\\r\\na 1 1 1\\r\\nb 2 1 2\\r\\nc 3 0\\r\\nd 4 0\\r\\na 2 1 2\\r\\nb 1 1 1\\r\\nc 4 0\\r\\nd 3 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6 3 4\\r\\n1 2\\r\\n3 4\\r\\n5 6\\r\\na 1 2 1 3\\r\\nb 3 1 2\\r\\nc 5 0\\r\\nd 6 0\\r\\na 2 2 1 3\\r\\nb 4 1 2\\r\\nc 5 0\\r\\nd 6 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '6 3 4\\r\\n1 2\\r\\n3 4\\r\\n5 6\\r\\na 1 2 1 3\\r\\nb 3 1 2\\r\\nc 5 0\\r\\nd 6 0\\r\\na 2 1 1\\r\\nb 4 2 2 3\\r\\nc 5 0\\r\\nd 6 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10 20 5\\r\\n2 1\\r\\n3 1\\r\\n4 2\\r\\n5 1\\r\\n6 5\\r\\n7 2\\r\\n8 5\\r\\n9 8\\r\\n10 6\\r\\n2 6\\r\\n3 5\\r\\n3 4\\r\\n10 5\\r\\n8 3\\r\\n9 4\\r\\n10 8\\r\\n9 2\\r\\n6 3\\r\\n3 8\\r\\n9 8\\r\\nDKkXdT 10 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\\r\\nOzvgPXMzAr 5 0\\r\\nbjac 3 0\\r\\ncBPbJtoND 6 0\\r\\nw 5 0\\r\\nbjac 4 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\\r\\nOzvgPXMzAr 2 0\\r\\ncBPbJtoND 5 0\\r\\nw 10 0\\r\\nDKkXdT 4 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '10 9 10\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 8\\r\\n8 9\\r\\n9 10\\r\\nInCeN 1 0\\r\\nIzHqPceNhj 2 1 9\\r\\neH 3 1 8\\r\\nJvgBsNFi 4 1 7\\r\\nBA 5 1 6\\r\\nRrjSTXJzhL 6 1 5\\r\\nDMx 7 1 4\\r\\nJzt 8 1 3\\r\\nhxBRlDlqwD 9 1 2\\r\\nImWeEPkggZ 10 1 1\\r\\neH 1 0\\r\\nImWeEPkggZ 2 1 9\\r\\nDMx 3 1 8\\r\\nIzHqPceNhj 4 1 7\\r\\nInCeN 5 1 6\\r\\nJvgBsNFi 6 1 5\\r\\nRrjSTXJzhL 7 1 4\\r\\nJzt 8 1 3\\r\\nhxBRlDlqwD 9 1 2\\r\\nBA 10 1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '11 10 11\\r\\n1 2\\r\\n2 11\\r\\n3 4\\r\\n4 11\\r\\n5 6\\r\\n6 11\\r\\n7 8\\r\\n8 11\\r\\n9 10\\r\\n10 11\\r\\na 1 1 9\\r\\nb 2 1 10\\r\\nc 3 0\\r\\nd 4 1 1\\r\\ne 5 1 3\\r\\nf 6 1 4\\r\\ng 7 1 5\\r\\nh 8 1 6\\r\\ni 9 1 7\\r\\nj 10 1 8\\r\\nk 11 1 2\\r\\na 1 0\\r\\nb 2 0\\r\\nc 3 0\\r\\nd 4 0\\r\\ne 5 0\\r\\nf 6 0\\r\\ng 7 0\\r\\nh 8 0\\r\\ni 9 0\\r\\nj 10 0\\r\\nk 11 10 1 2 3 4 5 6 7 8 9 10\\r\\n', 'output': ['YES\\r\\n']}, {'input': '11 10 11\\r\\n1 2\\r\\n2 11\\r\\n3 4\\r\\n4 11\\r\\n5 6\\r\\n6 11\\r\\n7 8\\r\\n8 11\\r\\n9 10\\r\\n10 11\\r\\na 1 0\\r\\nb 2 0\\r\\nc 3 0\\r\\nd 4 0\\r\\ne 5 0\\r\\nf 6 0\\r\\ng 7 0\\r\\nh 8 0\\r\\ni 9 0\\r\\nj 10 0\\r\\nk 11 10 1 2 3 4 5 6 7 8 9 10\\r\\na 1 1 9\\r\\nb 2 1 10\\r\\nc 3 0\\r\\nd 4 1 1\\r\\ne 5 1 3\\r\\nf 6 1 4\\r\\ng 7 1 5\\r\\nh 8 1 6\\r\\ni 9 1 7\\r\\nj 10 1 8\\r\\nk 11 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '7 8 2\\r\\n3 7\\r\\n7 6\\r\\n1 2\\r\\n4 5\\r\\n1 3\\r\\n5 6\\r\\n4 6\\r\\n2 3\\r\\na 7 4 3 8 5 2\\r\\nb 7 4 4 6 7 1\\r\\na 1 4 3 8 5 2\\r\\nb 4 4 4 6 7 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7 8 2\\r\\n3 7\\r\\n7 6\\r\\n1 2\\r\\n4 5\\r\\n1 3\\r\\n5 6\\r\\n4 6\\r\\n2 3\\r\\na 1 4 3 8 5 2\\r\\nb 4 4 4 6 7 1\\r\\na 3 4 3 8 5 2\\r\\nb 6 4 4 6 7 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '7 7 2\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 1\\r\\na 1 4 1 3 5 7\\r\\nb 2 3 2 4 6\\r\\na 7 4 1 3 5 7\\r\\nb 4 3 2 4 6\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7 7 2\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 1\\r\\na 1 4 1 3 5 7\\r\\nb 2 3 2 4 6\\r\\na 4 4 1 3 5 7\\r\\nb 4 3 2 4 6\\r\\n', 'output': ['YES\\r\\n']}, {'input': '10 20 10\\r\\n1 10\\r\\n5 10\\r\\n2 9\\r\\n2 6\\r\\n9 6\\r\\n3 9\\r\\n7 1\\r\\n10 5\\r\\n7 8\\r\\n8 7\\r\\n2 3\\r\\n9 6\\r\\n1 6\\r\\n5 3\\r\\n4 3\\r\\n3 7\\r\\n8 2\\r\\n6 4\\r\\n2 3\\r\\n4 1\\r\\nTjOMmYPRUY 7 3 1 3 9\\r\\nj 6 2 11 15\\r\\nBanBSrUA 4 2 19 20\\r\\ncSWZxzR 8 1 8\\r\\nzVoRlNgt 10 2 6 7\\r\\nWLGaq 1 3 10 13 17\\r\\nKahHtTDj 1 2 2 14\\r\\nrUFZmkpI 6 1 16\\r\\ni 4 3 4 5 12\\r\\nKLGiua 6 1 18\\r\\nWLGaq 10 0\\r\\ncSWZxzR 3 1 4\\r\\nj 2 3 8 13 17\\r\\nrUFZmkpI 7 2 1 19\\r\\nKahHtTDj 5 1 16\\r\\nKLGiua 6 2 2 12\\r\\nBanBSrUA 2 4 6 7 10 15\\r\\nTjOMmYPRUY 9 3 3 9 18\\r\\nzVoRlNgt 10 2 11 20\\r\\ni 2 2 5 14\\r\\n', 'output': ['YES\\r\\n']}, {'input': '10 10 10\\r\\n7 10\\r\\n1 2\\r\\n4 3\\r\\n7 4\\r\\n9 2\\r\\n8 7\\r\\n10 8\\r\\n6 10\\r\\n5 2\\r\\n6 10\\r\\nznkkxCkkxv 9 1 10\\r\\nP 5 1 7\\r\\nKOF 1 2 3 9\\r\\nwYtfFWkb 3 0\\r\\nZPJiebeu 9 1 6\\r\\ndgzAhKY 4 0\\r\\nayqPf 3 0\\r\\nxFSb 9 0\\r\\nreYnbMDm 10 1 1\\r\\nydSIPy 6 4 2 4 5 8\\r\\nKOF 10 1 4\\r\\nayqPf 7 1 7\\r\\nreYnbMDm 4 1 5\\r\\nwYtfFWkb 5 1 6\\r\\nznkkxCkkxv 9 2 1 9\\r\\nydSIPy 10 0\\r\\nP 10 1 8\\r\\ndgzAhKY 7 1 2\\r\\nZPJiebeu 8 1 3\\r\\nxFSb 7 1 10\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 8 5\\r\\n1 3\\r\\n4 2\\r\\n1 3\\r\\n4 2\\r\\n1 5\\r\\n5 3\\r\\n2 5\\r\\n2 5\\r\\nTaMmKIk 1 0\\r\\nvrLryIxio 1 3 1 6 5\\r\\nGFKONi 2 1 4\\r\\nTzRVfh 3 2 3 8\\r\\nqp 4 2 7 2\\r\\nTaMmKIk 1 2 7 4\\r\\nvrLryIxio 1 3 1 6 5\\r\\nTzRVfh 3 1 8\\r\\nqp 4 1 3\\r\\nGFKONi 4 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '10 9 10\\r\\n4 7\\r\\n4 8\\r\\n8 3\\r\\n9 2\\r\\n8 3\\r\\n8 1\\r\\n6 9\\r\\n4 7\\r\\n7 4\\r\\nznkkxCkkxv 1 2 3 6\\r\\nQlf 3 0\\r\\nKOF 5 2 1 8\\r\\ndgzAhKY 5 0\\r\\nwYtfFWkb 6 2 4 7\\r\\nLbYfZPhWd 9 0\\r\\nP 10 1 9\\r\\nZPJiebeu 10 1 5\\r\\nayqPf 10 0\\r\\nzmZLwuf 10 1 2\\r\\nwYtfFWkb 2 2 7 4\\r\\nQlf 3 1 2\\r\\nznkkxCkkxv 3 3 6 3 9\\r\\nKOF 5 0\\r\\ndgzAhKY 5 0\\r\\nLbYfZPhWd 9 0\\r\\nP 10 1 5\\r\\nZPJiebeu 10 0\\r\\nayqPf 10 0\\r\\nzmZLwuf 10 2 1 8\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class A1 {\n\n\t//\tFileWriter writer;\n\n\n\tvoid solve() throws IOException {\n\t\tint n = reader.nextInt(),\n\t\t\tm = reader.nextInt(),\n\t\t\tk = reader.nextInt();\n\n\t\tint[][] d = new int[k][m];\n\t\tString[] p = new String[k];\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tp[i] = reader.next();\n\t\t\tint pp = reader.nextInt();\n\t\t\td[i][pp - 1] = reader.nextInt();\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\td[i][j] = reader.nextInt();\n\t\t\t}\n\t\t}\n\t\tString s = \"YES\";\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tif (! p[i].equals(reader.next())) {\n\t\t\t\t\ts = \"NO\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tif (reader.nextInt()!= d[i][j]) {\n\t\t\t\t\ts = \"NO\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\twriter.write(s);\n\t\twriter.flush();\n\t}\n\n\tBufferedReader reader;\n\tStringTokenizer tokenizer;\n\tPrintWriter writer;\n\n\tprivate A1() throws IOException {\n\t\treader = new BufferedReader(new InputStreamReader(System.in));\n\t\t//\t\twriter = new FileWriter(\"out\");\n\t\twriter = new PrintWriter(System.out);\n\t\tsolve();\n\t\t//\t\twriter.close();\n\t\treader.close();\n\t}\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tnew A1();\n\t}\n}"}
{"src_uid": "52b13cca189853e6af02bea8d3d85276", "id": 116, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2300, "testcases": "[{'input': '2 1 2\\r\\n1 2\\r\\nDmitry 1 1 1\\r\\nNatalia 2 0\\r\\nNatalia 1 1 1\\r\\nDmitry 2 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4 4 3\\r\\n1 3\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\nArtem 1 1 4\\r\\nDmitry 1 1 2\\r\\nEdvard 4 2 1 3\\r\\nArtem 2 0\\r\\nDmitry 1 0\\r\\nEdvard 4 4 1 2 3 4\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2 1 1\\r\\n2 1\\r\\nabsgdf 1 1 1\\r\\nabsgdf 1 1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '2 1 1\\r\\n2 1\\r\\nabsgdf 2 1 1\\r\\nabsgdf 1 1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3 3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\na 1 1 1\\r\\nb 2 1 3\\r\\nc 3 1 2\\r\\na 3 1 3\\r\\nb 1 0\\r\\nc 2 2 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '3 3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\na 1 1 1\\r\\nb 2 1 3\\r\\nc 3 1 2\\r\\nb 1 1 2\\r\\nc 2 1 3\\r\\na 3 1 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3 3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\nb 1 1 2\\r\\nc 2 1 3\\r\\na 3 1 1\\r\\na 3 1 3\\r\\nb 1 0\\r\\nc 2 2 1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4 5 3\\r\\n1 2\\r\\n2 3\\r\\n2 4\\r\\n1 3\\r\\n1 3\\r\\na 1 2 4 3\\r\\nb 1 0\\r\\nc 4 3 1 2 5\\r\\na 1 2 4 3\\r\\nb 1 1 5\\r\\nc 4 2 1 2\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2 2 2\\r\\n1 2\\r\\n2 1\\r\\nA 1 1 2\\r\\nB 1 1 1\\r\\nA 1 0\\r\\nB 2 2 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4 2 4\\r\\n2 1\\r\\n4 3\\r\\na 1 1 1\\r\\nb 2 1 2\\r\\nc 3 0\\r\\nd 4 0\\r\\na 2 1 2\\r\\nb 1 1 1\\r\\nc 3 0\\r\\nd 4 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '4 2 4\\r\\n2 1\\r\\n4 3\\r\\na 1 1 1\\r\\nb 2 1 2\\r\\nc 3 0\\r\\nd 4 0\\r\\na 2 1 2\\r\\nb 1 1 1\\r\\nc 4 0\\r\\nd 3 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6 3 4\\r\\n1 2\\r\\n3 4\\r\\n5 6\\r\\na 1 2 1 3\\r\\nb 3 1 2\\r\\nc 5 0\\r\\nd 6 0\\r\\na 2 2 1 3\\r\\nb 4 1 2\\r\\nc 5 0\\r\\nd 6 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '6 3 4\\r\\n1 2\\r\\n3 4\\r\\n5 6\\r\\na 1 2 1 3\\r\\nb 3 1 2\\r\\nc 5 0\\r\\nd 6 0\\r\\na 2 1 1\\r\\nb 4 2 2 3\\r\\nc 5 0\\r\\nd 6 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10 20 5\\r\\n2 1\\r\\n3 1\\r\\n4 2\\r\\n5 1\\r\\n6 5\\r\\n7 2\\r\\n8 5\\r\\n9 8\\r\\n10 6\\r\\n2 6\\r\\n3 5\\r\\n3 4\\r\\n10 5\\r\\n8 3\\r\\n9 4\\r\\n10 8\\r\\n9 2\\r\\n6 3\\r\\n3 8\\r\\n9 8\\r\\nDKkXdT 10 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\\r\\nOzvgPXMzAr 5 0\\r\\nbjac 3 0\\r\\ncBPbJtoND 6 0\\r\\nw 5 0\\r\\nbjac 4 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\\r\\nOzvgPXMzAr 2 0\\r\\ncBPbJtoND 5 0\\r\\nw 10 0\\r\\nDKkXdT 4 0\\r\\n', 'output': ['YES\\r\\n']}, {'input': '10 9 10\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 8\\r\\n8 9\\r\\n9 10\\r\\nInCeN 1 0\\r\\nIzHqPceNhj 2 1 9\\r\\neH 3 1 8\\r\\nJvgBsNFi 4 1 7\\r\\nBA 5 1 6\\r\\nRrjSTXJzhL 6 1 5\\r\\nDMx 7 1 4\\r\\nJzt 8 1 3\\r\\nhxBRlDlqwD 9 1 2\\r\\nImWeEPkggZ 10 1 1\\r\\neH 1 0\\r\\nImWeEPkggZ 2 1 9\\r\\nDMx 3 1 8\\r\\nIzHqPceNhj 4 1 7\\r\\nInCeN 5 1 6\\r\\nJvgBsNFi 6 1 5\\r\\nRrjSTXJzhL 7 1 4\\r\\nJzt 8 1 3\\r\\nhxBRlDlqwD 9 1 2\\r\\nBA 10 1 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '11 10 11\\r\\n1 2\\r\\n2 11\\r\\n3 4\\r\\n4 11\\r\\n5 6\\r\\n6 11\\r\\n7 8\\r\\n8 11\\r\\n9 10\\r\\n10 11\\r\\na 1 1 9\\r\\nb 2 1 10\\r\\nc 3 0\\r\\nd 4 1 1\\r\\ne 5 1 3\\r\\nf 6 1 4\\r\\ng 7 1 5\\r\\nh 8 1 6\\r\\ni 9 1 7\\r\\nj 10 1 8\\r\\nk 11 1 2\\r\\na 1 0\\r\\nb 2 0\\r\\nc 3 0\\r\\nd 4 0\\r\\ne 5 0\\r\\nf 6 0\\r\\ng 7 0\\r\\nh 8 0\\r\\ni 9 0\\r\\nj 10 0\\r\\nk 11 10 1 2 3 4 5 6 7 8 9 10\\r\\n', 'output': ['YES\\r\\n']}, {'input': '11 10 11\\r\\n1 2\\r\\n2 11\\r\\n3 4\\r\\n4 11\\r\\n5 6\\r\\n6 11\\r\\n7 8\\r\\n8 11\\r\\n9 10\\r\\n10 11\\r\\na 1 0\\r\\nb 2 0\\r\\nc 3 0\\r\\nd 4 0\\r\\ne 5 0\\r\\nf 6 0\\r\\ng 7 0\\r\\nh 8 0\\r\\ni 9 0\\r\\nj 10 0\\r\\nk 11 10 1 2 3 4 5 6 7 8 9 10\\r\\na 1 1 9\\r\\nb 2 1 10\\r\\nc 3 0\\r\\nd 4 1 1\\r\\ne 5 1 3\\r\\nf 6 1 4\\r\\ng 7 1 5\\r\\nh 8 1 6\\r\\ni 9 1 7\\r\\nj 10 1 8\\r\\nk 11 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '7 8 2\\r\\n3 7\\r\\n7 6\\r\\n1 2\\r\\n4 5\\r\\n1 3\\r\\n5 6\\r\\n4 6\\r\\n2 3\\r\\na 7 4 3 8 5 2\\r\\nb 7 4 4 6 7 1\\r\\na 1 4 3 8 5 2\\r\\nb 4 4 4 6 7 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7 8 2\\r\\n3 7\\r\\n7 6\\r\\n1 2\\r\\n4 5\\r\\n1 3\\r\\n5 6\\r\\n4 6\\r\\n2 3\\r\\na 1 4 3 8 5 2\\r\\nb 4 4 4 6 7 1\\r\\na 3 4 3 8 5 2\\r\\nb 6 4 4 6 7 1\\r\\n', 'output': ['YES\\r\\n']}, {'input': '7 7 2\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 1\\r\\na 1 4 1 3 5 7\\r\\nb 2 3 2 4 6\\r\\na 7 4 1 3 5 7\\r\\nb 4 3 2 4 6\\r\\n', 'output': ['NO\\r\\n']}, {'input': '7 7 2\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 1\\r\\na 1 4 1 3 5 7\\r\\nb 2 3 2 4 6\\r\\na 4 4 1 3 5 7\\r\\nb 4 3 2 4 6\\r\\n', 'output': ['YES\\r\\n']}, {'input': '10 20 10\\r\\n1 10\\r\\n5 10\\r\\n2 9\\r\\n2 6\\r\\n9 6\\r\\n3 9\\r\\n7 1\\r\\n10 5\\r\\n7 8\\r\\n8 7\\r\\n2 3\\r\\n9 6\\r\\n1 6\\r\\n5 3\\r\\n4 3\\r\\n3 7\\r\\n8 2\\r\\n6 4\\r\\n2 3\\r\\n4 1\\r\\nTjOMmYPRUY 7 3 1 3 9\\r\\nj 6 2 11 15\\r\\nBanBSrUA 4 2 19 20\\r\\ncSWZxzR 8 1 8\\r\\nzVoRlNgt 10 2 6 7\\r\\nWLGaq 1 3 10 13 17\\r\\nKahHtTDj 1 2 2 14\\r\\nrUFZmkpI 6 1 16\\r\\ni 4 3 4 5 12\\r\\nKLGiua 6 1 18\\r\\nWLGaq 10 0\\r\\ncSWZxzR 3 1 4\\r\\nj 2 3 8 13 17\\r\\nrUFZmkpI 7 2 1 19\\r\\nKahHtTDj 5 1 16\\r\\nKLGiua 6 2 2 12\\r\\nBanBSrUA 2 4 6 7 10 15\\r\\nTjOMmYPRUY 9 3 3 9 18\\r\\nzVoRlNgt 10 2 11 20\\r\\ni 2 2 5 14\\r\\n', 'output': ['YES\\r\\n']}, {'input': '10 10 10\\r\\n7 10\\r\\n1 2\\r\\n4 3\\r\\n7 4\\r\\n9 2\\r\\n8 7\\r\\n10 8\\r\\n6 10\\r\\n5 2\\r\\n6 10\\r\\nznkkxCkkxv 9 1 10\\r\\nP 5 1 7\\r\\nKOF 1 2 3 9\\r\\nwYtfFWkb 3 0\\r\\nZPJiebeu 9 1 6\\r\\ndgzAhKY 4 0\\r\\nayqPf 3 0\\r\\nxFSb 9 0\\r\\nreYnbMDm 10 1 1\\r\\nydSIPy 6 4 2 4 5 8\\r\\nKOF 10 1 4\\r\\nayqPf 7 1 7\\r\\nreYnbMDm 4 1 5\\r\\nwYtfFWkb 5 1 6\\r\\nznkkxCkkxv 9 2 1 9\\r\\nydSIPy 10 0\\r\\nP 10 1 8\\r\\ndgzAhKY 7 1 2\\r\\nZPJiebeu 8 1 3\\r\\nxFSb 7 1 10\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 8 5\\r\\n1 3\\r\\n4 2\\r\\n1 3\\r\\n4 2\\r\\n1 5\\r\\n5 3\\r\\n2 5\\r\\n2 5\\r\\nTaMmKIk 1 0\\r\\nvrLryIxio 1 3 1 6 5\\r\\nGFKONi 2 1 4\\r\\nTzRVfh 3 2 3 8\\r\\nqp 4 2 7 2\\r\\nTaMmKIk 1 2 7 4\\r\\nvrLryIxio 1 3 1 6 5\\r\\nTzRVfh 3 1 8\\r\\nqp 4 1 3\\r\\nGFKONi 4 1 2\\r\\n', 'output': ['YES\\r\\n']}, {'input': '10 9 10\\r\\n4 7\\r\\n4 8\\r\\n8 3\\r\\n9 2\\r\\n8 3\\r\\n8 1\\r\\n6 9\\r\\n4 7\\r\\n7 4\\r\\nznkkxCkkxv 1 2 3 6\\r\\nQlf 3 0\\r\\nKOF 5 2 1 8\\r\\ndgzAhKY 5 0\\r\\nwYtfFWkb 6 2 4 7\\r\\nLbYfZPhWd 9 0\\r\\nP 10 1 9\\r\\nZPJiebeu 10 1 5\\r\\nayqPf 10 0\\r\\nzmZLwuf 10 1 2\\r\\nwYtfFWkb 2 2 7 4\\r\\nQlf 3 1 2\\r\\nznkkxCkkxv 3 3 6 3 9\\r\\nKOF 5 0\\r\\ndgzAhKY 5 0\\r\\nLbYfZPhWd 9 0\\r\\nP 10 1 5\\r\\nZPJiebeu 10 0\\r\\nayqPf 10 0\\r\\nzmZLwuf 10 2 1 8\\r\\n', 'output': ['NO\\r\\n']}]", "source_code": "import java.util.*;\nimport java.io.*;\npublic class HelloWorld\n{\n\tstatic class Reader \n    {\n        static final int BUFFER_SIZE = 1 << 16;\n        private final InputStream din;\n        private final byte[] buffer;\n        private int bufferPointer, bytesRead;\n        public Reader() \n        {\n            din = System.in;\n            buffer = new byte[BUFFER_SIZE];\n            bufferPointer = bytesRead = 0;\n        }\n        public Reader(String file_name) throws IOException \n        {\n            din = new FileInputStream(file_name);\n            buffer = new byte[BUFFER_SIZE];\n            bufferPointer = bytesRead = 0;\n        }\n        public String readLine() throws IOException \n        {\n            byte[] buf = new byte[64]; // line length\n            int cnt = 0, c;\n            while ((c = read())!= -1) \n            {\n                if (c == '\\n') \n                    break;\n                buf[cnt++] = (byte) c;\n            }\n            return new String(buf, 0, cnt);\n        }\n        public int nextInt() throws IOException \n        {\n            int ret = 0;\n            byte c = read();\n            while (c <='')\n                c = read();\n            boolean neg = (c == '-');\n            if (neg)\n                c = read();\n            do\n            {\n                ret = ret * 10 + c - '0';\n            }  while ((c = read()) >= '0' && c <= '9');\n            if (neg)\n                return -ret;\n            return ret;\n        }\n        public long nextLong() throws IOException \n        {\n            long ret = 0;\n            byte c = read();\n            while (c <='')\n                c = read();\n            boolean neg = (c == '-');\n            if (neg)\n                c = read();\n            do {\n                ret = ret * 10 + c - '0';\n            }\n            while ((c = read()) >= '0' && c <= '9');\n            if (neg)\n                return -ret;\n            return ret;\n        }\n        public double nextDouble() throws IOException \n        {\n            double ret = 0, div = 1;\n            byte c = read();\n            while (c <='')\n                c = read();\n            boolean neg = (c == '-');\n            if (neg)\n                c = read();\n            do\n            {\n                ret = ret * 10 + c - '0';\n            }\n            while ((c = read()) >= '0' && c <= '9');\n            if (c == '.')\n            {\n                while ((c = read()) >= '0' && c <= '9')\n                {\n                    ret += (c - '0') / (div *= 10);\n                }\n            }\n            if (neg)\n                return -ret;\n            return ret;\n        }\n        private void fillBuffer() throws IOException \n        {\n            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);\n            if (bytesRead == -1) \n                buffer[0] = -1;\n        }\n        private byte read() throws IOException \n        {\n            if (bufferPointer < bytesRead) \n                return buffer[bufferPointer++];\n            else \n                fillBuffer();\n            return read();\n        }\n        public void close() throws IOException \n        {\n            if (din == null) \n                return;\n            din.close();\n        }\n    }\n\tpublic static void main (String[] args) throws java.lang.Exception \n    {\n        int n,m,k,a,b,x;\n        String s1,s2;\n        int b1[] = new int[1005];\n        int b2[][] = new int[1005][10];\n        Reader st = new Reader();\n        n = st.nextInt();\n        m = st.nextInt();\n        k = st.nextInt();\n        for(a = 0 ; a < m ; ++a)\n            for(x = 0 ; x < 2 ; ++x)\n                b2[a][x] = st.nextInt() - "}
{"src_uid": "1503f0379bf8d7f25c191ddea9278842", "id": 117, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2500, "testcases": "[{'input': '5\\r\\n4 8\\r\\n8 8\\r\\n9 4\\r\\n4 0\\r\\n0 4\\r\\n', 'output': ['5\\r\\n']}, {'input': '5\\r\\n4 8\\r\\n5 8\\r\\n5 4\\r\\n7 4\\r\\n2 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n0 4\\r\\n5 4\\r\\n2 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '4\\r\\n0 4\\r\\n5 4\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '4\\r\\n100 200\\r\\n800 200\\r\\n500 100\\r\\n100 0\\r\\n', 'output': ['701\\r\\n']}, {'input': '5\\r\\n0 4\\r\\n5 4\\r\\n2 2\\r\\n4 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n2 5\\r\\n5 5\\r\\n4 4\\r\\n5 3\\r\\n0 0\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n1 9\\r\\n10 9\\r\\n11 7\\r\\n9 5\\r\\n5 7\\r\\n1 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '6\\r\\n1 9\\r\\n10 9\\r\\n5 7\\r\\n11 7\\r\\n9 5\\r\\n1 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n10 150\\r\\n90 150\\r\\n10 15\\r\\n', 'output': ['81\\r\\n']}, {'input': '5\\r\\n0 100\\r\\n50 100\\r\\n50 99\\r\\n149 0\\r\\n0 0\\r\\n', 'output': ['50\\r\\n']}, {'input': '10\\r\\n1000 0\\r\\n100 0\\r\\n0 25\\r\\n100 50\\r\\n100 51\\r\\n99 102\\r\\n1001 102\\r\\n1000 51\\r\\n1000 50\\r\\n1100 25\\r\\n', 'output': ['899\\r\\n']}, {'input': '6\\r\\n1 1000000\\r\\n999999 1000000\\r\\n519023 50000\\r\\n520013 500\\r\\n300033 50\\r\\n400023 500000\\r\\n', 'output': ['1\\r\\n']}, {'input': '8\\r\\n100 100\\r\\n10 100\\r\\n0 200\\r\\n5 400\\r\\n20 800\\r\\n16 801\\r\\n50 900\\r\\n110 300\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n588523 0\\r\\n411477 0\\r\\n400000 86602\\r\\n', 'output': ['177047\\r\\n']}, {'input': '15\\r\\n507852 0\\r\\n492148 0\\r\\n489545 9858\\r\\n489631 11995\\r\\n490865 14012\\r\\n491570 15795\\r\\n492996 17376\\r\\n495001 18605\\r\\n496671 19452\\r\\n498570 19850\\r\\n500373 19859\\r\\n502484 19363\\r\\n505000 18605\\r\\n506393 17344\\r\\n507857 15808\\r\\n', 'output': ['15705\\r\\n']}, {'input': '4\\r\\n889308 0\\r\\n110692 0\\r\\n0 461939\\r\\n146447 815492\\r\\n', 'output': ['778617\\r\\n']}, {'input': '5\\r\\n785915 0\\r\\n214085 0\\r\\n40939 436592\\r\\n128612 706421\\r\\n358143 873184\\r\\n', 'output': ['571831\\r\\n']}, {'input': '5\\r\\n999990 0\\r\\n0 0\\r\\n0 1000000\\r\\n1000000 1000000\\r\\n500000 50000\\r\\n', 'output': ['473685\\r\\n']}, {'input': '8\\r\\n3 0\\r\\n0 0\\r\\n0 1\\r\\n1 1\\r\\n1 2\\r\\n2 2\\r\\n2 1\\r\\n3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n1 4\\r\\n3 4\\r\\n2 2\\r\\n1 1\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n999998 999999\\r\\n1000000 999999\\r\\n0 0\\r\\n', 'output': ['3\\r\\n']}, {'input': '4\\r\\n999998 999999\\r\\n1000000 999999\\r\\n1 1\\r\\n0 0\\r\\n', 'output': ['2\\r\\n']}, {'input': '10\\r\\n500944 0\\r\\n499056 0\\r\\n498479 979\\r\\n498437 1288\\r\\n499191 1574\\r\\n499413 1796\\r\\n499300 1937\\r\\n500000 1987\\r\\n499995 1934\\r\\n500587 1796\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 4\\r\\n3 4\\r\\n2 2\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['3\\r\\n']}, {'input': '6\\r\\n4 0\\r\\n0 0\\r\\n2 2\\r\\n3 4\\r\\n2 5\\r\\n4 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '7\\r\\n0 5\\r\\n3 5\\r\\n2 3\\r\\n2 2\\r\\n1 2\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n10 0\\r\\n0 0\\r\\n2 2\\r\\n1 3\\r\\n1 6\\r\\n', 'output': ['7\\r\\n']}, {'input': '8\\r\\n0 6\\r\\n5 6\\r\\n5 4\\r\\n3 4\\r\\n3 2\\r\\n5 2\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '7\\r\\n0 6\\r\\n5 6\\r\\n5 4\\r\\n3 4\\r\\n3 2\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n1000000 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n999999 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n999998 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '6\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n2 999998\\r\\n1000000 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n999999 0\\r\\n0 0\\r\\n999999 999998\\r\\n1 1\\r\\n1000000 1000000\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n5 6\\r\\n7 6\\r\\n8 2\\r\\n6 2\\r\\n7 3\\r\\n6 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n7 8\\r\\n5 8\\r\\n4 12\\r\\n6 12\\r\\n5 11\\r\\n6 10\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n5 6\\r\\n12 6\\r\\n8 2\\r\\n6 2\\r\\n7 3\\r\\n6 4\\r\\n', 'output': ['3\\r\\n']}, {'input': '6\\r\\n10 12\\r\\n24 12\\r\\n16 4\\r\\n12 4\\r\\n14 6\\r\\n12 8\\r\\n', 'output': ['5\\r\\n']}]", "source_code": "import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\n//#define int long long \n\npublic class Solution {\n\n    static long gcd(long a, long b) {\n\t\tif(b == 0) return a;\n\t\treturn gcd(b, a%b);\n    }\n\n    public static void main(String[] args) throws Exception {\n        //BufferedReader bufferedReader = new BufferedReader(new FileReader(\"input.txt\"));\n        //BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(\"output.txt\"));\n        //PrintWriter writer = new PrintWriter(bufferedWriter);\n        //Scanner sc = new Scanner(System.in);\n        \n        //int[] nm = input(sc);\n        int n = 10;\n        int[] x = new int[n];\n        int[] y = new int[n];\n        x[0] = 4;y[0] = 8;\n        x[1] = 8;y[1] = 8;\n        x[2] = 9;y[2] = 4;\n        x[3] = 4;y[3] = 0;\n        x[4] = 0;y[4] = 4;\n        int point = 0;\n        for(int j = 2; j < n; ++j)\n        {\n            if((x[j] - x[j-2]) * (y[1] - y[j-1]) == (y[j] - y[j-2]) * (x[j-1] - x[j-2]))\n                continue;\n            if((y[j] - y[j-2]) < 0)\n            {\n                if((y[1] - y[j-1]) < 0)\n                    ++point;\n            }\n            else if((y[j] - y[j-2]) > 0)\n            {\n                if((y[1] - y[j-1]) > 0)\n                    ++point;\n            }\n            else if((y[j] - y[j-2]) == 0)\n            {\n                if(x[j] > x[j-1])\n                    ++point;\n            }\n        }\n        System.out.println(point);\n\n\n        //writer.close();\n        //System.out.close();\n    }\n\n    static int[] input(Scanner sc) throws IOException {\n        //Input n\n        //int n = sc.nextInt();\n        //Input n integers\n        //int[] data = new int[n];\n        //for(int i = 0; i < n; ++i) data[i] = sc.nextInt();\n        //Output n integers\n        //for(int i = 0; i < n; ++i) System.out.print(data[i] + \" \");\n        //Output n integers\n        //for(int i = 0; i < n; ++i) System.out.printf(data[i] + (i == n - 1? \"\\n\" : \" \"));\n        //Output n integers\n        //System.out.println(Arrays.toString(data));\n        //return data;\n        return null;\n    }\n}\n\n// import java.util.*;\nimport java.io.*;\n\n/* Name of the class has to be \"Main\" only if the class is public. */\npublic class Main\n{\n    public static void main (String[] args) throws java.lang.Exception\n    {\n        // your code goes here\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)))\n        {\n            int n = Integer.parseInt(reader.readLine());\n            StringTokenizer tokenizer = new StringTokenizer(reader.readLine());\n            int[][] pts = new int[n][2];\n            for (int i = 0; i < n; ++i)\n                for (int j = 0; j < 2; ++j)\n                    pts[i][j] = Integer.parseInt(tokenizer.nextToken());\n\n            int min = Integer.MAX_VALUE;\n            int max = -1;\n            for (int i = 1; i < n - 1; ++i)\n            {\n                int cnt = 0;\n                for (int"}
{"src_uid": "1503f0379bf8d7f25c191ddea9278842", "id": 117, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2500, "testcases": "[{'input': '5\\r\\n4 8\\r\\n8 8\\r\\n9 4\\r\\n4 0\\r\\n0 4\\r\\n', 'output': ['5\\r\\n']}, {'input': '5\\r\\n4 8\\r\\n5 8\\r\\n5 4\\r\\n7 4\\r\\n2 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n0 4\\r\\n5 4\\r\\n2 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '4\\r\\n0 4\\r\\n5 4\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '4\\r\\n100 200\\r\\n800 200\\r\\n500 100\\r\\n100 0\\r\\n', 'output': ['701\\r\\n']}, {'input': '5\\r\\n0 4\\r\\n5 4\\r\\n2 2\\r\\n4 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n2 5\\r\\n5 5\\r\\n4 4\\r\\n5 3\\r\\n0 0\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n1 9\\r\\n10 9\\r\\n11 7\\r\\n9 5\\r\\n5 7\\r\\n1 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '6\\r\\n1 9\\r\\n10 9\\r\\n5 7\\r\\n11 7\\r\\n9 5\\r\\n1 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n10 150\\r\\n90 150\\r\\n10 15\\r\\n', 'output': ['81\\r\\n']}, {'input': '5\\r\\n0 100\\r\\n50 100\\r\\n50 99\\r\\n149 0\\r\\n0 0\\r\\n', 'output': ['50\\r\\n']}, {'input': '10\\r\\n1000 0\\r\\n100 0\\r\\n0 25\\r\\n100 50\\r\\n100 51\\r\\n99 102\\r\\n1001 102\\r\\n1000 51\\r\\n1000 50\\r\\n1100 25\\r\\n', 'output': ['899\\r\\n']}, {'input': '6\\r\\n1 1000000\\r\\n999999 1000000\\r\\n519023 50000\\r\\n520013 500\\r\\n300033 50\\r\\n400023 500000\\r\\n', 'output': ['1\\r\\n']}, {'input': '8\\r\\n100 100\\r\\n10 100\\r\\n0 200\\r\\n5 400\\r\\n20 800\\r\\n16 801\\r\\n50 900\\r\\n110 300\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n588523 0\\r\\n411477 0\\r\\n400000 86602\\r\\n', 'output': ['177047\\r\\n']}, {'input': '15\\r\\n507852 0\\r\\n492148 0\\r\\n489545 9858\\r\\n489631 11995\\r\\n490865 14012\\r\\n491570 15795\\r\\n492996 17376\\r\\n495001 18605\\r\\n496671 19452\\r\\n498570 19850\\r\\n500373 19859\\r\\n502484 19363\\r\\n505000 18605\\r\\n506393 17344\\r\\n507857 15808\\r\\n', 'output': ['15705\\r\\n']}, {'input': '4\\r\\n889308 0\\r\\n110692 0\\r\\n0 461939\\r\\n146447 815492\\r\\n', 'output': ['778617\\r\\n']}, {'input': '5\\r\\n785915 0\\r\\n214085 0\\r\\n40939 436592\\r\\n128612 706421\\r\\n358143 873184\\r\\n', 'output': ['571831\\r\\n']}, {'input': '5\\r\\n999990 0\\r\\n0 0\\r\\n0 1000000\\r\\n1000000 1000000\\r\\n500000 50000\\r\\n', 'output': ['473685\\r\\n']}, {'input': '8\\r\\n3 0\\r\\n0 0\\r\\n0 1\\r\\n1 1\\r\\n1 2\\r\\n2 2\\r\\n2 1\\r\\n3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n1 4\\r\\n3 4\\r\\n2 2\\r\\n1 1\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n999998 999999\\r\\n1000000 999999\\r\\n0 0\\r\\n', 'output': ['3\\r\\n']}, {'input': '4\\r\\n999998 999999\\r\\n1000000 999999\\r\\n1 1\\r\\n0 0\\r\\n', 'output': ['2\\r\\n']}, {'input': '10\\r\\n500944 0\\r\\n499056 0\\r\\n498479 979\\r\\n498437 1288\\r\\n499191 1574\\r\\n499413 1796\\r\\n499300 1937\\r\\n500000 1987\\r\\n499995 1934\\r\\n500587 1796\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 4\\r\\n3 4\\r\\n2 2\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['3\\r\\n']}, {'input': '6\\r\\n4 0\\r\\n0 0\\r\\n2 2\\r\\n3 4\\r\\n2 5\\r\\n4 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '7\\r\\n0 5\\r\\n3 5\\r\\n2 3\\r\\n2 2\\r\\n1 2\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n10 0\\r\\n0 0\\r\\n2 2\\r\\n1 3\\r\\n1 6\\r\\n', 'output': ['7\\r\\n']}, {'input': '8\\r\\n0 6\\r\\n5 6\\r\\n5 4\\r\\n3 4\\r\\n3 2\\r\\n5 2\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '7\\r\\n0 6\\r\\n5 6\\r\\n5 4\\r\\n3 4\\r\\n3 2\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n1000000 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n999999 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n999998 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '6\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n2 999998\\r\\n1000000 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n999999 0\\r\\n0 0\\r\\n999999 999998\\r\\n1 1\\r\\n1000000 1000000\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n5 6\\r\\n7 6\\r\\n8 2\\r\\n6 2\\r\\n7 3\\r\\n6 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n7 8\\r\\n5 8\\r\\n4 12\\r\\n6 12\\r\\n5 11\\r\\n6 10\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n5 6\\r\\n12 6\\r\\n8 2\\r\\n6 2\\r\\n7 3\\r\\n6 4\\r\\n', 'output': ['3\\r\\n']}, {'input': '6\\r\\n10 12\\r\\n24 12\\r\\n16 4\\r\\n12 4\\r\\n14 6\\r\\n12 8\\r\\n', 'output': ['5\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class Main {\n    static long c = 0;\n    static long mod = 1000000007;\n    static long e[][] = new long[2000][11];\n    public static void main(String[] args){\n        //Scanner in = new Scanner(System.in);\n        //int n = in.nextInt();\n        int n = 8;\n        int pos = 0,neg = 0,a,b,ans = 1;\n        int x[] = new int[10000],y[] = new int[10000];\n        int start = 1,end = n;\n        for(int i = 1 ; i <= n ; ++i){\n            a = in.nextInt();\n            b = in.nextInt();\n            x[i] = a;\n            y[i] = b;\n        }\n        for(int i = 2 ; i <= n ; ++i){\n            if(y[i] >= y[i - 1]) {\n                start = i - 1;\n                end = i;\n            }\n        }\n        for(int i = 1 ; i <= n ; ++i){\n            if(y[i] < y[start]) {\n                start = i;\n            }\n        }\n        int first = start;\n        int last = end;\n        int i = start;\n        int count = 1;\n        int m = 2000;\n        while(true){\n            m = count;\n            if(m > n){\n                break;\n            }\n            if(y[i + m] < y[i]) {\n                //System.out.print(x[i]);\n                ans = ans + (x[i + m] - x[i]) + 1;\n                break;\n            } else if(y[i + m] == y[i]) {\n                //System.out.print(x[i]);\n                ans = ans + (x[i + m] - x[i]) + 1;\n                break;\n            } else if(y[i + m] > y[i]) {\n                //System.out.print(x[i]);\n                ans = ans + (x[i + m] - x[i]) + 1;\n            }\n            //System.out.print(x[i]);\n            count++;\n        }\n        //System.out.println();\n        for(int i = 1 ; i <= n ; ++i){\n            if(y[i] > y[first] && y[i] <= y[last] && y[i]!= y[first]){\n                //System.out.print(x[i]);\n                ans++;\n            }\n        }\n        System.out.println(ans);\n\n\n    }\n    static class Reader{\n        final private int BUFFER_SIZE = 1 << 16;\n        private DataInputStream din;\n        private byte[] buffer;\n        private int bufferPointer,bytesRead;\n        public Reader(){\n            din = new DataInputStream(System.in);\n            buffer = new byte[BUFFER_SIZE];\n            bufferPointer = bytesRead = 0;\n        }\n        public Reader(String file_name){\n            try{\n                din = new DataInputStream(new FileInputStream(file_name));\n                buffer = new byte[BUFFER_SIZE];\n                bufferPointer = bytesRead = 0;\n            } catch (IOException e){\n                e.printStackTrace();\n            }\n        }\n        public void close(){\n            try{\n                if(din == null) return;\n                din.close();\n            } catch (IOException e){\n                e.printStackTrace();\n            }\n        }\n        public int readInt() throws IOException {\n            int ret = 0;\n            byte c = readByte();\n            while(c <='')\n                c = readByte();\n            boolean neg = (c == '-');\n            if(neg)\n                c = readByte();\n            do{\n                ret *= 10;\n                ret += c - '0';\n            }  while((c = readByte()) >= '0' && c <= '9');\n            if(neg)\n                return -ret;\n            return ret;\n        }\n        public long readLong() throws IOException {\n            long ret ="}
{"src_uid": "1503f0379bf8d7f25c191ddea9278842", "id": 117, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2500, "testcases": "[{'input': '5\\r\\n4 8\\r\\n8 8\\r\\n9 4\\r\\n4 0\\r\\n0 4\\r\\n', 'output': ['5\\r\\n']}, {'input': '5\\r\\n4 8\\r\\n5 8\\r\\n5 4\\r\\n7 4\\r\\n2 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n0 4\\r\\n5 4\\r\\n2 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '4\\r\\n0 4\\r\\n5 4\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '4\\r\\n100 200\\r\\n800 200\\r\\n500 100\\r\\n100 0\\r\\n', 'output': ['701\\r\\n']}, {'input': '5\\r\\n0 4\\r\\n5 4\\r\\n2 2\\r\\n4 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n2 5\\r\\n5 5\\r\\n4 4\\r\\n5 3\\r\\n0 0\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n1 9\\r\\n10 9\\r\\n11 7\\r\\n9 5\\r\\n5 7\\r\\n1 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '6\\r\\n1 9\\r\\n10 9\\r\\n5 7\\r\\n11 7\\r\\n9 5\\r\\n1 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n10 150\\r\\n90 150\\r\\n10 15\\r\\n', 'output': ['81\\r\\n']}, {'input': '5\\r\\n0 100\\r\\n50 100\\r\\n50 99\\r\\n149 0\\r\\n0 0\\r\\n', 'output': ['50\\r\\n']}, {'input': '10\\r\\n1000 0\\r\\n100 0\\r\\n0 25\\r\\n100 50\\r\\n100 51\\r\\n99 102\\r\\n1001 102\\r\\n1000 51\\r\\n1000 50\\r\\n1100 25\\r\\n', 'output': ['899\\r\\n']}, {'input': '6\\r\\n1 1000000\\r\\n999999 1000000\\r\\n519023 50000\\r\\n520013 500\\r\\n300033 50\\r\\n400023 500000\\r\\n', 'output': ['1\\r\\n']}, {'input': '8\\r\\n100 100\\r\\n10 100\\r\\n0 200\\r\\n5 400\\r\\n20 800\\r\\n16 801\\r\\n50 900\\r\\n110 300\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n588523 0\\r\\n411477 0\\r\\n400000 86602\\r\\n', 'output': ['177047\\r\\n']}, {'input': '15\\r\\n507852 0\\r\\n492148 0\\r\\n489545 9858\\r\\n489631 11995\\r\\n490865 14012\\r\\n491570 15795\\r\\n492996 17376\\r\\n495001 18605\\r\\n496671 19452\\r\\n498570 19850\\r\\n500373 19859\\r\\n502484 19363\\r\\n505000 18605\\r\\n506393 17344\\r\\n507857 15808\\r\\n', 'output': ['15705\\r\\n']}, {'input': '4\\r\\n889308 0\\r\\n110692 0\\r\\n0 461939\\r\\n146447 815492\\r\\n', 'output': ['778617\\r\\n']}, {'input': '5\\r\\n785915 0\\r\\n214085 0\\r\\n40939 436592\\r\\n128612 706421\\r\\n358143 873184\\r\\n', 'output': ['571831\\r\\n']}, {'input': '5\\r\\n999990 0\\r\\n0 0\\r\\n0 1000000\\r\\n1000000 1000000\\r\\n500000 50000\\r\\n', 'output': ['473685\\r\\n']}, {'input': '8\\r\\n3 0\\r\\n0 0\\r\\n0 1\\r\\n1 1\\r\\n1 2\\r\\n2 2\\r\\n2 1\\r\\n3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n1 4\\r\\n3 4\\r\\n2 2\\r\\n1 1\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n999998 999999\\r\\n1000000 999999\\r\\n0 0\\r\\n', 'output': ['3\\r\\n']}, {'input': '4\\r\\n999998 999999\\r\\n1000000 999999\\r\\n1 1\\r\\n0 0\\r\\n', 'output': ['2\\r\\n']}, {'input': '10\\r\\n500944 0\\r\\n499056 0\\r\\n498479 979\\r\\n498437 1288\\r\\n499191 1574\\r\\n499413 1796\\r\\n499300 1937\\r\\n500000 1987\\r\\n499995 1934\\r\\n500587 1796\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 4\\r\\n3 4\\r\\n2 2\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['3\\r\\n']}, {'input': '6\\r\\n4 0\\r\\n0 0\\r\\n2 2\\r\\n3 4\\r\\n2 5\\r\\n4 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '7\\r\\n0 5\\r\\n3 5\\r\\n2 3\\r\\n2 2\\r\\n1 2\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n10 0\\r\\n0 0\\r\\n2 2\\r\\n1 3\\r\\n1 6\\r\\n', 'output': ['7\\r\\n']}, {'input': '8\\r\\n0 6\\r\\n5 6\\r\\n5 4\\r\\n3 4\\r\\n3 2\\r\\n5 2\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '7\\r\\n0 6\\r\\n5 6\\r\\n5 4\\r\\n3 4\\r\\n3 2\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n1000000 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n999999 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n999998 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '6\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n2 999998\\r\\n1000000 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n999999 0\\r\\n0 0\\r\\n999999 999998\\r\\n1 1\\r\\n1000000 1000000\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n5 6\\r\\n7 6\\r\\n8 2\\r\\n6 2\\r\\n7 3\\r\\n6 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n7 8\\r\\n5 8\\r\\n4 12\\r\\n6 12\\r\\n5 11\\r\\n6 10\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n5 6\\r\\n12 6\\r\\n8 2\\r\\n6 2\\r\\n7 3\\r\\n6 4\\r\\n', 'output': ['3\\r\\n']}, {'input': '6\\r\\n10 12\\r\\n24 12\\r\\n16 4\\r\\n12 4\\r\\n14 6\\r\\n12 8\\r\\n', 'output': ['5\\r\\n']}]", "source_code": "import java.util.*;\nimport static java.util.Arrays.deepToString;\nimport static java.util.Collections.*;\nimport java.io.*;\n\npublic class Main implements Runnable{\n    private void solve() {\n        int n = in.nextInt(), x[] = new int[n + 1], y[] = new int[n + 1], a = x[1] = in.nextInt(), b = y[1] = in.nextInt(), c = x[2] = in.nextInt(), d = y[2] = in.nextInt(), i;\n        int max = 0;\n        for(i = 3; i < n + 1; i++){\n            x[i] = in.nextInt();\n            y[i] = in.nextInt();\n        }\n        for(i = 1; i < n; i++)\n            if((((y[i + 1] - y[i]) * (x[i] - a) > (y[i] - y[i + 1]) * (x[i + 1] - a)) && ((y[i + 1] - y[i]) * (x[i + 1] - x[i]) > 0)) || (((y[i] - y[i + 1]) * (x[i + 1] - x[i]) < 0) && ((y[i + 1] - y[i]) * (x[i] - x[i + 1]) > (y[i] - y[i + 1]) * (x[i + 1] - x[i])))){\n                max += get(x[i], x[i + 1], a, c);\n            }\n        max += get(a, c, x[n], x[1]) + get(b, d, y[n], y[1]);\n        System.out.println(max);\n    }\n\n    public int get(int x1, int x2, int x3, int x4){\n        if((x2 > x1 && x3 > x4) || (x2 < x1 && x3 < x4)){\n            return 0;\n        }\n        if(x3 > x4){\n            return (x4 - x3) / (x2 - x1) + 1;\n        }\n        return (x2 - x1) / (x3 - x4) + 1;\n    }\n\n    private void run() {\n        solve();\n    }\n\n    private static Reader newStandardReader(){\n        return new Reader(){\n            private final InputStream INPUT = System.in;\n            private final byte[] buffer = new byte[1024];\n            private int ptr = 0;\n            private int buflen = 0;\n            private boolean hasNextByte(){\n                if(ptr < buflen){\n                    return true;\n                }else{\n                    ptr = 0;\n                    try{\n                        buflen = INPUT.read(buffer);\n                    }catch(IOException e){\n                        e.printStackTrace();\n                    }\n                    if(buflen <= 0){\n                        return false;\n                    }\n                }\n                return true;\n            }\n            public int readByte() throws IOException{\n                if(hasNextByte()){\n                    return buffer[ptr++];\n                }else{\n                    return -1;\n                }\n            }\n        };\n    }\n\n    private Reader in = newStandardReader();\n\n    public static void main(String[] args){\n        // 遅いから呼び出し元でnewしてね\n        new Main().run();\n    }\n\n    private interface Reader{\n        int readByte() throws IOException;\n    }\n}"}
{"src_uid": "1503f0379bf8d7f25c191ddea9278842", "id": 117, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2500, "testcases": "[{'input': '5\\r\\n4 8\\r\\n8 8\\r\\n9 4\\r\\n4 0\\r\\n0 4\\r\\n', 'output': ['5\\r\\n']}, {'input': '5\\r\\n4 8\\r\\n5 8\\r\\n5 4\\r\\n7 4\\r\\n2 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n0 4\\r\\n5 4\\r\\n2 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '4\\r\\n0 4\\r\\n5 4\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '4\\r\\n100 200\\r\\n800 200\\r\\n500 100\\r\\n100 0\\r\\n', 'output': ['701\\r\\n']}, {'input': '5\\r\\n0 4\\r\\n5 4\\r\\n2 2\\r\\n4 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n2 5\\r\\n5 5\\r\\n4 4\\r\\n5 3\\r\\n0 0\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n1 9\\r\\n10 9\\r\\n11 7\\r\\n9 5\\r\\n5 7\\r\\n1 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '6\\r\\n1 9\\r\\n10 9\\r\\n5 7\\r\\n11 7\\r\\n9 5\\r\\n1 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n10 150\\r\\n90 150\\r\\n10 15\\r\\n', 'output': ['81\\r\\n']}, {'input': '5\\r\\n0 100\\r\\n50 100\\r\\n50 99\\r\\n149 0\\r\\n0 0\\r\\n', 'output': ['50\\r\\n']}, {'input': '10\\r\\n1000 0\\r\\n100 0\\r\\n0 25\\r\\n100 50\\r\\n100 51\\r\\n99 102\\r\\n1001 102\\r\\n1000 51\\r\\n1000 50\\r\\n1100 25\\r\\n', 'output': ['899\\r\\n']}, {'input': '6\\r\\n1 1000000\\r\\n999999 1000000\\r\\n519023 50000\\r\\n520013 500\\r\\n300033 50\\r\\n400023 500000\\r\\n', 'output': ['1\\r\\n']}, {'input': '8\\r\\n100 100\\r\\n10 100\\r\\n0 200\\r\\n5 400\\r\\n20 800\\r\\n16 801\\r\\n50 900\\r\\n110 300\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n588523 0\\r\\n411477 0\\r\\n400000 86602\\r\\n', 'output': ['177047\\r\\n']}, {'input': '15\\r\\n507852 0\\r\\n492148 0\\r\\n489545 9858\\r\\n489631 11995\\r\\n490865 14012\\r\\n491570 15795\\r\\n492996 17376\\r\\n495001 18605\\r\\n496671 19452\\r\\n498570 19850\\r\\n500373 19859\\r\\n502484 19363\\r\\n505000 18605\\r\\n506393 17344\\r\\n507857 15808\\r\\n', 'output': ['15705\\r\\n']}, {'input': '4\\r\\n889308 0\\r\\n110692 0\\r\\n0 461939\\r\\n146447 815492\\r\\n', 'output': ['778617\\r\\n']}, {'input': '5\\r\\n785915 0\\r\\n214085 0\\r\\n40939 436592\\r\\n128612 706421\\r\\n358143 873184\\r\\n', 'output': ['571831\\r\\n']}, {'input': '5\\r\\n999990 0\\r\\n0 0\\r\\n0 1000000\\r\\n1000000 1000000\\r\\n500000 50000\\r\\n', 'output': ['473685\\r\\n']}, {'input': '8\\r\\n3 0\\r\\n0 0\\r\\n0 1\\r\\n1 1\\r\\n1 2\\r\\n2 2\\r\\n2 1\\r\\n3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n1 4\\r\\n3 4\\r\\n2 2\\r\\n1 1\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n999998 999999\\r\\n1000000 999999\\r\\n0 0\\r\\n', 'output': ['3\\r\\n']}, {'input': '4\\r\\n999998 999999\\r\\n1000000 999999\\r\\n1 1\\r\\n0 0\\r\\n', 'output': ['2\\r\\n']}, {'input': '10\\r\\n500944 0\\r\\n499056 0\\r\\n498479 979\\r\\n498437 1288\\r\\n499191 1574\\r\\n499413 1796\\r\\n499300 1937\\r\\n500000 1987\\r\\n499995 1934\\r\\n500587 1796\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 4\\r\\n3 4\\r\\n2 2\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['3\\r\\n']}, {'input': '6\\r\\n4 0\\r\\n0 0\\r\\n2 2\\r\\n3 4\\r\\n2 5\\r\\n4 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '7\\r\\n0 5\\r\\n3 5\\r\\n2 3\\r\\n2 2\\r\\n1 2\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n10 0\\r\\n0 0\\r\\n2 2\\r\\n1 3\\r\\n1 6\\r\\n', 'output': ['7\\r\\n']}, {'input': '8\\r\\n0 6\\r\\n5 6\\r\\n5 4\\r\\n3 4\\r\\n3 2\\r\\n5 2\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '7\\r\\n0 6\\r\\n5 6\\r\\n5 4\\r\\n3 4\\r\\n3 2\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n1000000 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n999999 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n999998 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '6\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n2 999998\\r\\n1000000 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n999999 0\\r\\n0 0\\r\\n999999 999998\\r\\n1 1\\r\\n1000000 1000000\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n5 6\\r\\n7 6\\r\\n8 2\\r\\n6 2\\r\\n7 3\\r\\n6 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n7 8\\r\\n5 8\\r\\n4 12\\r\\n6 12\\r\\n5 11\\r\\n6 10\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n5 6\\r\\n12 6\\r\\n8 2\\r\\n6 2\\r\\n7 3\\r\\n6 4\\r\\n', 'output': ['3\\r\\n']}, {'input': '6\\r\\n10 12\\r\\n24 12\\r\\n16 4\\r\\n12 4\\r\\n14 6\\r\\n12 8\\r\\n', 'output': ['5\\r\\n']}]", "source_code": "import java.io.IOException;\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) throws IOException{\n        final int MAX_N = 1000;\n        final int MOD = 1000000007;\n        int n;\n        int x1, x2, y1, y2;\n        boolean[] vis = new boolean[MAX_N];\n\n        MyScanner sc = new MyScanner();\n        n = sc.nextInt();\n        x1 = sc.nextInt();\n        y1 = sc.nextInt();\n        x2 = sc.nextInt();\n        y2 = sc.nextInt();\n        int d = (int)((y2-y1)/(x2-x1)+0.5);\n        int min = (int)(((y1%d==0)? y1 : y1+d)-y1%d);\n        int max = (int)(((y2%d==0)? y2 : y2-y2%d)+d);\n\n        if(x2 <= x1)\n            d = -d;\n\n        int maxx = (int)(x2-x1+MOD)%MOD;\n        int keta = 0;\n        int maxCount = 0;\n\n        for(int i = 0; i < max; i++){\n            int tmp = (min + i*d);\n            if(0 <= tmp && tmp <= MAX_N)\n                vis[tmp] = true;\n            if(i%d==0){\n                keta = 0;\n                for(int j = 0; j <= maxx; j++){\n                    int t = (j+x1)%MAX_N;\n                    if(vis[tmp+j] ^ vis[tmp-j]){\n                        keta++;\n                    }\n                }\n                maxCount = Math.max(maxCount, keta);\n            }\n        }\n        maxCount = Math.max(maxCount, keta);\n        maxCount = Math.max(maxCount, ((y1<=1 && 1<=y2)? 2 : 0));\n        maxCount = Math.max(maxCount, ((y1>=MAX_N-1 && y2>=MAX_N-1)? 2 : 0));\n        maxCount = Math.max(maxCount, (((x1<=1 && 1<x2)? x2-1 : 0) + ((x1>=MAX_N-1 && x2>=MAX_N-1)? MAX_N-1-x1 : 0)));\n        System.out.println(maxCount);\n\n\n    }\n\n    static class MyScanner {\n        private final InputStream inputStream;\n        private final byte[] buffer = new byte[1024];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n            if (ptr < buflen) {\n                return true;\n            } else {\n                ptr = 0;\n                try {\n                    buflen = inputStream.read(buffer);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                if (buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        private boolean isPrintableChar(int c) {\n            return 33 <= c && c <= 126;\n        }\n        private boolean isSpaceChar(int c) {\n            return c =='' || c == '\\n' || c == '\\r' || c == '\\t';\n        }\n        private void skip() {\n            while (hasNextByte() &&!isPrintableChar(buffer[ptr])) {\n                ptr++;\n            }\n        }\n        private int read() {\n            if (!hasNextByte()) throw new NoSuchElementException();\n            return buffer[ptr++];\n        }\n        private static boolean isNum1To9(int c) { return '1' <= c && c <= '9'; }\n        private static boolean isNum0OrNum1To9(int c) { return c == '0' || isNum1To9(c); }\n        private long parseLong() {\n            if (!isNum0OrNum1To9(read())) throw new NumberFormatException();\n            long x = 0"}
{"src_uid": "1503f0379bf8d7f25c191ddea9278842", "id": 117, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2500, "testcases": "[{'input': '5\\r\\n4 8\\r\\n8 8\\r\\n9 4\\r\\n4 0\\r\\n0 4\\r\\n', 'output': ['5\\r\\n']}, {'input': '5\\r\\n4 8\\r\\n5 8\\r\\n5 4\\r\\n7 4\\r\\n2 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n0 4\\r\\n5 4\\r\\n2 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '4\\r\\n0 4\\r\\n5 4\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '4\\r\\n100 200\\r\\n800 200\\r\\n500 100\\r\\n100 0\\r\\n', 'output': ['701\\r\\n']}, {'input': '5\\r\\n0 4\\r\\n5 4\\r\\n2 2\\r\\n4 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n2 5\\r\\n5 5\\r\\n4 4\\r\\n5 3\\r\\n0 0\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n1 9\\r\\n10 9\\r\\n11 7\\r\\n9 5\\r\\n5 7\\r\\n1 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '6\\r\\n1 9\\r\\n10 9\\r\\n5 7\\r\\n11 7\\r\\n9 5\\r\\n1 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n10 150\\r\\n90 150\\r\\n10 15\\r\\n', 'output': ['81\\r\\n']}, {'input': '5\\r\\n0 100\\r\\n50 100\\r\\n50 99\\r\\n149 0\\r\\n0 0\\r\\n', 'output': ['50\\r\\n']}, {'input': '10\\r\\n1000 0\\r\\n100 0\\r\\n0 25\\r\\n100 50\\r\\n100 51\\r\\n99 102\\r\\n1001 102\\r\\n1000 51\\r\\n1000 50\\r\\n1100 25\\r\\n', 'output': ['899\\r\\n']}, {'input': '6\\r\\n1 1000000\\r\\n999999 1000000\\r\\n519023 50000\\r\\n520013 500\\r\\n300033 50\\r\\n400023 500000\\r\\n', 'output': ['1\\r\\n']}, {'input': '8\\r\\n100 100\\r\\n10 100\\r\\n0 200\\r\\n5 400\\r\\n20 800\\r\\n16 801\\r\\n50 900\\r\\n110 300\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n588523 0\\r\\n411477 0\\r\\n400000 86602\\r\\n', 'output': ['177047\\r\\n']}, {'input': '15\\r\\n507852 0\\r\\n492148 0\\r\\n489545 9858\\r\\n489631 11995\\r\\n490865 14012\\r\\n491570 15795\\r\\n492996 17376\\r\\n495001 18605\\r\\n496671 19452\\r\\n498570 19850\\r\\n500373 19859\\r\\n502484 19363\\r\\n505000 18605\\r\\n506393 17344\\r\\n507857 15808\\r\\n', 'output': ['15705\\r\\n']}, {'input': '4\\r\\n889308 0\\r\\n110692 0\\r\\n0 461939\\r\\n146447 815492\\r\\n', 'output': ['778617\\r\\n']}, {'input': '5\\r\\n785915 0\\r\\n214085 0\\r\\n40939 436592\\r\\n128612 706421\\r\\n358143 873184\\r\\n', 'output': ['571831\\r\\n']}, {'input': '5\\r\\n999990 0\\r\\n0 0\\r\\n0 1000000\\r\\n1000000 1000000\\r\\n500000 50000\\r\\n', 'output': ['473685\\r\\n']}, {'input': '8\\r\\n3 0\\r\\n0 0\\r\\n0 1\\r\\n1 1\\r\\n1 2\\r\\n2 2\\r\\n2 1\\r\\n3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n1 4\\r\\n3 4\\r\\n2 2\\r\\n1 1\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n999998 999999\\r\\n1000000 999999\\r\\n0 0\\r\\n', 'output': ['3\\r\\n']}, {'input': '4\\r\\n999998 999999\\r\\n1000000 999999\\r\\n1 1\\r\\n0 0\\r\\n', 'output': ['2\\r\\n']}, {'input': '10\\r\\n500944 0\\r\\n499056 0\\r\\n498479 979\\r\\n498437 1288\\r\\n499191 1574\\r\\n499413 1796\\r\\n499300 1937\\r\\n500000 1987\\r\\n499995 1934\\r\\n500587 1796\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 4\\r\\n3 4\\r\\n2 2\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['3\\r\\n']}, {'input': '6\\r\\n4 0\\r\\n0 0\\r\\n2 2\\r\\n3 4\\r\\n2 5\\r\\n4 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '7\\r\\n0 5\\r\\n3 5\\r\\n2 3\\r\\n2 2\\r\\n1 2\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n10 0\\r\\n0 0\\r\\n2 2\\r\\n1 3\\r\\n1 6\\r\\n', 'output': ['7\\r\\n']}, {'input': '8\\r\\n0 6\\r\\n5 6\\r\\n5 4\\r\\n3 4\\r\\n3 2\\r\\n5 2\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '7\\r\\n0 6\\r\\n5 6\\r\\n5 4\\r\\n3 4\\r\\n3 2\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n1000000 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n999999 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n999998 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '6\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n2 999998\\r\\n1000000 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n999999 0\\r\\n0 0\\r\\n999999 999998\\r\\n1 1\\r\\n1000000 1000000\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n5 6\\r\\n7 6\\r\\n8 2\\r\\n6 2\\r\\n7 3\\r\\n6 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n7 8\\r\\n5 8\\r\\n4 12\\r\\n6 12\\r\\n5 11\\r\\n6 10\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n5 6\\r\\n12 6\\r\\n8 2\\r\\n6 2\\r\\n7 3\\r\\n6 4\\r\\n', 'output': ['3\\r\\n']}, {'input': '6\\r\\n10 12\\r\\n24 12\\r\\n16 4\\r\\n12 4\\r\\n14 6\\r\\n12 8\\r\\n', 'output': ['5\\r\\n']}]", "source_code": "import java.util.*;\npublic class Solution{\n \tpublic static void main(String [] args){\n\t\tFastScanner scanner = new FastScanner();\n\t\tint n = scanner.nextInt();\n\t\tlong [] x = new long[n+1];\n\t\tlong [] y = new long[n+1];\n\t\tfor(int i = 1; i<=n; i++){\n\t\t\tx[i] = scanner.nextInt();\n\t\t\ty[i] = scanner.nextInt();\n\t\t}\n\t\t//x[n+1] = x[1];\n\t\t//y[n+1] = y[1];\n\t\tboolean isLeft;\n\t\tint count = 0;\n\t\tfor(int i = 1; i<=n; i++){\n\t\t\tisLeft = ((x[i+1]-x[i])*(y[1]-y[i])-(y[i+1]-y[i])*(x[1]-x[i])) < 0;\n\t\t\t//System.out.println(isLeft);\n\t\t\t//System.out.println(count);\n\t\t\tif(isLeft){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(((y[1]-y[2])*(x[1]-x[2])-(x[1]-x[2])*(y[1]-y[2])) > 0){\n\t\t\tcount--;\n\t\t}\n\t\t//System.out.println(count);\n\t\t//count = (count % 2 == 0)? count/2 : (count+1)/2;\n\t\tSystem.out.println(count);\n\t}\n\tprivate static class FastScanner {\n\t\tprivate final InputStream in = System.in;\n\t\tprivate final byte[] buffer = new byte[1024];\n\t\tprivate int ptr = 0;\n\t\tprivate int buflen = 0;\n\t\tprivate boolean hasNextByte() {\n\t\t\t\t\t\tif (ptr < buflen) {\n\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\tptr = 0;\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbuflen = in.read(buffer);\n\t\t\t\t\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif (buflen <= 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t}\n\t\tprivate int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n\t\tprivate static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n\t\tpublic boolean hasNext() { while(hasNextByte() &&!isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\n\t\tpublic String next() {\n\t\t\t\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\t\tint b = readByte();\n\t\t\t\t\t\twhile(isPrintableChar(b)) {\n\t\t\t\t\t\t\t\t\t\tsb.appendCodePoint(b);\n\t\t\t\t\t\t\t\t\t\tb = readByte();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn sb.toString();\n\t\t}\n\t\tpublic long nextLong() {\n\t\t\t\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\t\t\t\tlong nl = 0;\n\t\t\t\t\t\tboolean minus = false;\n\t\t\t\t\t\tint b = readByte();\n\t\t\t\t\t\tif (b == '-') {\n\t\t\t\t\t\t\t\t\t\tminus = true;\n\t\t\t\t\t\t\t\t\t"}
{"src_uid": "645a6ca9a8dda6946c2cc055a4beb08f", "id": 118, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '0 0 2 3\\r\\n1 1\\r\\n1 2\\r\\n', 'output': ['Anton']}, {'input': '0 0 2 4\\r\\n1 1\\r\\n1 2\\r\\n', 'output': ['Dasha']}, {'input': '0 0 5 100\\r\\n12 105\\r\\n15 59\\r\\n21 1\\r\\n27 6\\r\\n27 76\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n16 24\\r\\n29 6\\r\\n44 24\\r\\n66 37\\r\\n102 19\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n4 108\\r\\n5 170\\r\\n7 30\\r\\n7 101\\r\\n21 117\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n30 9\\r\\n53 14\\r\\n84 7\\r\\n94 18\\r\\n121 16\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n52 144\\r\\n55 58\\r\\n56 103\\r\\n98 65\\r\\n134 16\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n17 3\\r\\n42 24\\r\\n72 22\\r\\n72 25\\r\\n120 25\\r\\n', 'output': ['Dasha']}, {'input': '0 0 5 100\\r\\n21 38\\r\\n43 42\\r\\n59 29\\r\\n69 3\\r\\n84 52\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n2 164\\r\\n23 107\\r\\n30 167\\r\\n46 178\\r\\n66 148\\r\\n', 'output': ['Dasha']}, {'input': '3 -1 20 200\\r\\n2 27\\r\\n12 61\\r\\n14 76\\r\\n16 20\\r\\n19 72\\r\\n20 22\\r\\n30 27\\r\\n39 61\\r\\n42 44\\r\\n45 8\\r\\n46 23\\r\\n57 13\\r\\n62 56\\r\\n64 67\\r\\n80 30\\r\\n94 34\\r\\n94 77\\r\\n100 36\\r\\n101 13\\r\\n107 9\\r\\n', 'output': ['Anton']}, {'input': '3 -1 20 200\\r\\n1 139\\r\\n8 76\\r\\n10 97\\r\\n25 99\\r\\n26 147\\r\\n29 51\\r\\n48 79\\r\\n56 164\\r\\n67 80\\r\\n71 35\\r\\n89 90\\r\\n108 16\\r\\n108 127\\r\\n127 54\\r\\n137 13\\r\\n140 156\\r\\n146 104\\r\\n160 155\\r\\n164 138\\r\\n172 102\\r\\n', 'output': ['Anton']}, {'input': '3 -1 20 200\\r\\n1 28\\r\\n9 80\\r\\n20 92\\r\\n29 82\\r\\n38 65\\r\\n42 9\\r\\n50 65\\r\\n67 57\\r\\n71 60\\r\\n73 51\\r\\n78 89\\r\\n86 31\\r\\n90 39\\r\\n97 96\\r\\n104 27\\r\\n115 49\\r\\n119 59\\r\\n125 18\\r\\n132 37\\r\\n133 9\\r\\n', 'output': ['Anton']}, {'input': '3 -1 20 200\\r\\n3 51\\r\\n6 75\\r\\n7 105\\r\\n8 109\\r\\n12 59\\r\\n12 90\\r\\n15 71\\r\\n17 150\\r\\n18 161\\r\\n19 106\\r\\n23 71\\r\\n26 68\\r\\n34 95\\r\\n36 47\\r\\n38 29\\r\\n38 153\\r\\n41 91\\r\\n43 128\\r\\n43 164\\r\\n44 106\\r\\n', 'output': ['Anton']}, {'input': '3 -1 20 200\\r\\n19 12\\r\\n24 121\\r\\n25 32\\r\\n28 19\\r\\n28 87\\r\\n29 49\\r\\n32 88\\r\\n33 70\\r\\n37 77\\r\\n54 33\\r\\n56 27\\r\\n61 59\\r\\n67 42\\r\\n73 15\\r\\n76 40\\r\\n80 73\\r\\n83 39\\r\\n91 34\\r\\n91 112\\r\\n95 95\\r\\n', 'output': ['Anton']}, {'input': '-3 -14 20 200\\r\\n6 90\\r\\n7 12\\r\\n15 24\\r\\n16 67\\r\\n26 35\\r\\n34 63\\r\\n35 48\\r\\n36 30\\r\\n48 28\\r\\n56 35\\r\\n59 91\\r\\n60 34\\r\\n76 43\\r\\n77 90\\r\\n77 95\\r\\n79 34\\r\\n87 69\\r\\n93 6\\r\\n99 10\\r\\n99 41\\r\\n', 'output': ['Anton']}, {'input': '-3 -14 20 200\\r\\n5 54\\r\\n10 62\\r\\n20 43\\r\\n20 79\\r\\n21 47\\r\\n32 75\\r\\n33 48\\r\\n40 61\\r\\n44 65\\r\\n52 7\\r\\n52 28\\r\\n55 65\\r\\n55 67\\r\\n59 78\\r\\n68 52\\r\\n70 20\\r\\n71 72\\r\\n76 50\\r\\n90 100\\r\\n99 9\\r\\n', 'output': ['Dasha']}, {'input': '-3 -14 20 200\\r\\n1 60\\r\\n5 47\\r\\n10 6\\r\\n14 17\\r\\n14 32\\r\\n34 93\\r\\n40 9\\r\\n43 85\\r\\n44 47\\r\\n49 59\\r\\n57 85\\r\\n68 50\\r\\n69 93\\r\\n71 42\\r\\n71 57\\r\\n73 5\\r\\n74 70\\r\\n83 41\\r\\n83 83\\r\\n89 8\\r\\n', 'output': ['Anton']}, {'input': '-3 -14 20 200\\r\\n14 51\\r\\n26 54\\r\\n30 50\\r\\n38 41\\r\\n40 68\\r\\n47 12\\r\\n50 86\\r\\n63 4\\r\\n65 52\\r\\n67 83\\r\\n70 88\\r\\n71 61\\r\\n79 82\\r\\n82 53\\r\\n89 84\\r\\n90 16\\r\\n92 79\\r\\n97 37\\r\\n100 37\\r\\n100 93\\r\\n', 'output': ['Dasha']}, {'input': '-3 -14 20 200\\r\\n11 24\\r\\n13 8\\r\\n14 8\\r\\n15 44\\r\\n15 54\\r\\n20 79\\r\\n24 72\\r\\n27 7\\r\\n28 6\\r\\n30 18\\r\\n46 34\\r\\n51 5\\r\\n64 83\\r\\n69 48\\r\\n78 76\\r\\n79 2\\r\\n89 43\\r\\n92 31\\r\\n94 76\\r\\n99 64\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n12 147\\r\\n14 181\\r\\n14 198\\r\\n33 51\\r\\n34 93\\r\\n43 29\\r\\n47 44\\r\\n56 161\\r\\n66 111\\r\\n96 119\\r\\n102 71\\r\\n117 184\\r\\n133 69\\r\\n151 189\\r\\n152 28\\r\\n173 27\\r\\n173 120\\r\\n176 12\\r\\n183 1\\r\\n188 196\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n6 108\\r\\n14 188\\r\\n23 60\\r\\n28 44\\r\\n35 151\\r\\n36 82\\r\\n58 49\\r\\n65 81\\r\\n97 100\\r\\n104 26\\r\\n114 143\\r\\n136 156\\r\\n139 112\\r\\n142 119\\r\\n147 184\\r\\n148 46\\r\\n149 152\\r\\n175 178\\r\\n184 85\\r\\n187 12\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n11 189\\r\\n12 108\\r\\n19 190\\r\\n21 27\\r\\n24 193\\r\\n26 86\\r\\n26 123\\r\\n31 180\\r\\n39 196\\r\\n107 193\\r\\n122 46\\r\\n129 103\\r\\n131 129\\r\\n132 135\\r\\n142 51\\r\\n157 22\\r\\n161 27\\r\\n195 163\\r\\n198 55\\r\\n199 64\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n8 176\\r\\n11 162\\r\\n25 130\\r\\n32 124\\r\\n58 175\\r\\n59 170\\r\\n61 98\\r\\n66 37\\r\\n78 5\\r\\n87 150\\r\\n94 172\\r\\n99 171\\r\\n121 11\\r\\n121 31\\r\\n124 172\\r\\n131 71\\r\\n134 190\\r\\n162 50\\r\\n182 99\\r\\n194 119\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n6 80\\r\\n12 62\\r\\n14 15\\r\\n16 133\\r\\n41 28\\r\\n43 47\\r\\n79 136\\r\\n90 196\\r\\n99 151\\r\\n99 187\\r\\n119 42\\r\\n121 11\\r\\n147 132\\r\\n149 166\\r\\n161 102\\r\\n174 4\\r\\n182 122\\r\\n194 50\\r\\n200 182\\r\\n200 197\\r\\n', 'output': ['Anton']}, {'input': '0 0 19 27\\r\\n1 25\\r\\n11 3\\r\\n12 38\\r\\n27 52\\r\\n35 111\\r\\n36 51\\r\\n44 7\\r\\n45 106\\r\\n58 104\\r\\n63 108\\r\\n75 4\\r\\n76 84\\r\\n89 2\\r\\n89 44\\r\\n92 23\\r\\n98 66\\r\\n111 58\\r\\n113 9\\r\\n114 76\\r\\n', 'output': ['Anton']}, {'input': '0 0 15 98\\r\\n5 14\\r\\n9 133\\r\\n10 128\\r\\n15 140\\r\\n17 53\\r\\n33 43\\r\\n50 15\\r\\n69 55\\r\\n74 134\\r\\n77 100\\r\\n99 82\\r\\n100 140\\r\\n102 12\\r\\n110 65\\r\\n128 110\\r\\n', 'output': ['Anton']}, {'input': '0 0 19 34\\r\\n0 116\\r\\n6 11\\r\\n6 32\\r\\n9 84\\r\\n14 3\\r\\n27 85\\r\\n42 58\\r\\n46 31\\r\\n52 104\\r\\n65 83\\r\\n66 37\\r\\n68 130\\r\\n69 69\\r\\n78 7\\r\\n78 23\\r\\n81 66\\r\\n90 27\\r\\n91 39\\r\\n96 10\\r\\n', 'output': ['Anton']}, {'input': '0 0 17 141\\r\\n9 30\\r\\n9 55\\r\\n11 64\\r\\n18 37\\r\\n20 94\\r\\n23 37\\r\\n23 140\\r\\n28 134\\r\\n36 43\\r\\n38 77\\r\\n50 47\\r\\n54 42\\r\\n70 32\\r\\n74 151\\r\\n85 68\\r\\n87 53\\r\\n88 91\\r\\n', 'output': ['Anton']}, {'input': '0 0 17 160\\r\\n31 75\\r\\n32 149\\r\\n49 132\\r\\n54 98\\r\\n54 100\\r\\n57 48\\r\\n65 20\\r\\n67 177\\r\\n72 76\\r\\n74 25\\r\\n99 49\\r\\n105 86\\r\\n128 116\\r\\n147 176\\r\\n156 130\\r\\n160 26\\r\\n178 177\\r\\n', 'output': ['Anton']}, {'input': '-100 -100 10 200\\r\\n0 1\\r\\n1 0\\r\\n1 1\\r\\n31 41\\r\\n3 4\\r\\n5 2\\r\\n1 2\\r\\n3 3\\r\\n9 8\\r\\n10 2\\r\\n', 'output': ['Anton']}, {'input': '-140 -140 2 200\\r\\n1 0\\r\\n0 1\\r\\n', 'output': ['Dasha']}, {'input': '-130 -130 20 200\\r\\n0 1\\r\\n1 0\\r\\n1 1\\r\\n31 41\\r\\n3 4\\r\\n5 2\\r\\n1 2\\r\\n3 3\\r\\n9 8\\r\\n10 2\\r\\n0 2\\r\\n0 3\\r\\n0 4\\r\\n0 5\\r\\n0 6\\r\\n2 0\\r\\n3 0\\r\\n4 0\\r\\n5 0\\r\\n6 0\\r\\n', 'output': ['Anton']}, {'input': '-133 -133 20 200\\r\\n1 0\\r\\n0 1\\r\\n1 1\\r\\n2 0\\r\\n0 2\\r\\n2 1\\r\\n1 2\\r\\n3 0\\r\\n0 3\\r\\n3 1\\r\\n3 2\\r\\n3 3\\r\\n2 2\\r\\n2 3\\r\\n1 3\\r\\n4 0\\r\\n0 4\\r\\n4 1\\r\\n1 4\\r\\n2 4\\r\\n', 'output': ['Anton']}, {'input': '-12 -34 5 200\\r\\n1 0\\r\\n2 0\\r\\n3 1\\r\\n10 3\\r\\n11 4\\r\\n', 'output': ['Dasha']}]", "source_code": "import java.util.*;\n\npublic class Main {\n\tpublic static void main (String[] args) throws java.io.IOException\n\t{\n\t\tBufferedReader bf = new BufferedReader(new java.io.InputStreamReader(System.in));\n\t\tString[] temp = bf.readLine().split(\" \");\n\t\tint x = Integer.parseInt(temp[0]), y = Integer.parseInt(temp[1]);\n\t\tint d = Integer.parseInt(temp[2]), n = Integer.parseInt(temp[3]);\n\t\tArrayList<ArrayList<Integer>> move = new ArrayList<ArrayList<Integer>>();\n\t\tString output = \"\";\n\t\tfor(int i=0;i<n;i++){\n\t\t\tString[] in = bf.readLine().split(\" \");\n\t\t\tArrayList<Integer> newMove = new ArrayList<Integer>();\n\t\t\tnewMove.add(Integer.parseInt(in[0]));\n\t\t\tnewMove.add(Integer.parseInt(in[1]));\n\t\t\tmove.add(newMove);\n\t\t}\n\t\tboolean anton = true;\n\t\tint step;\n\t\tdo{\n\t\t\tint x2 = 0, y2 = 0;\n\t\t\tfor(int i=0;i<move.size();i++){\n\t\t\t\tx2 += move.get(i).get(0);\n\t\t\t\ty2 += move.get(i).get(1);\n\t\t\t}\n\t\t\tint x3 = x2+y2, y3 = x2-y2;\n\t\t\tint d2 = x2*x2+y2*y2;\n\t\t\tif(x2 > 0){\n\t\t\t\tstep = y/x2;\n\t\t\t}else if(y2 > 0){\n\t\t\t\tstep = x/y2;\n\t\t\t}else if(x3 > 0){\n\t\t\t\tstep = y/x3;\n\t\t\t}else if(y3 > 0){\n\t\t\t\tstep = x/y3;\n\t\t\t}else if(x > 0){\n\t\t\t\tstep = y/x;\n\t\t\t}else if(y > 0){\n\t\t\t\tstep = x/y;\n\t\t\t}else{\n\t\t\t\tstep = 0;\n\t\t\t}\n\t\t\tx += step*x2;\n\t\t\ty += step*y2;\n\t\t\tif(x*x+y*y > d2){\n\t\t\t\toutput = \"Dasha\";\n\t\t\t\tant = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx = x%201;\n\t\t\ty = y%201;\n\t\t\tant =!ant;\n\t\t}while(ant);\n\t\tif(x==0 && y == 0)\n\t\t\toutput = \"Dasha\";\n\t\tSystem.out.println(output);\n\t}\n}"}
{"src_uid": "645a6ca9a8dda6946c2cc055a4beb08f", "id": 118, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '0 0 2 3\\r\\n1 1\\r\\n1 2\\r\\n', 'output': ['Anton']}, {'input': '0 0 2 4\\r\\n1 1\\r\\n1 2\\r\\n', 'output': ['Dasha']}, {'input': '0 0 5 100\\r\\n12 105\\r\\n15 59\\r\\n21 1\\r\\n27 6\\r\\n27 76\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n16 24\\r\\n29 6\\r\\n44 24\\r\\n66 37\\r\\n102 19\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n4 108\\r\\n5 170\\r\\n7 30\\r\\n7 101\\r\\n21 117\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n30 9\\r\\n53 14\\r\\n84 7\\r\\n94 18\\r\\n121 16\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n52 144\\r\\n55 58\\r\\n56 103\\r\\n98 65\\r\\n134 16\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n17 3\\r\\n42 24\\r\\n72 22\\r\\n72 25\\r\\n120 25\\r\\n', 'output': ['Dasha']}, {'input': '0 0 5 100\\r\\n21 38\\r\\n43 42\\r\\n59 29\\r\\n69 3\\r\\n84 52\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n2 164\\r\\n23 107\\r\\n30 167\\r\\n46 178\\r\\n66 148\\r\\n', 'output': ['Dasha']}, {'input': '3 -1 20 200\\r\\n2 27\\r\\n12 61\\r\\n14 76\\r\\n16 20\\r\\n19 72\\r\\n20 22\\r\\n30 27\\r\\n39 61\\r\\n42 44\\r\\n45 8\\r\\n46 23\\r\\n57 13\\r\\n62 56\\r\\n64 67\\r\\n80 30\\r\\n94 34\\r\\n94 77\\r\\n100 36\\r\\n101 13\\r\\n107 9\\r\\n', 'output': ['Anton']}, {'input': '3 -1 20 200\\r\\n1 139\\r\\n8 76\\r\\n10 97\\r\\n25 99\\r\\n26 147\\r\\n29 51\\r\\n48 79\\r\\n56 164\\r\\n67 80\\r\\n71 35\\r\\n89 90\\r\\n108 16\\r\\n108 127\\r\\n127 54\\r\\n137 13\\r\\n140 156\\r\\n146 104\\r\\n160 155\\r\\n164 138\\r\\n172 102\\r\\n', 'output': ['Anton']}, {'input': '3 -1 20 200\\r\\n1 28\\r\\n9 80\\r\\n20 92\\r\\n29 82\\r\\n38 65\\r\\n42 9\\r\\n50 65\\r\\n67 57\\r\\n71 60\\r\\n73 51\\r\\n78 89\\r\\n86 31\\r\\n90 39\\r\\n97 96\\r\\n104 27\\r\\n115 49\\r\\n119 59\\r\\n125 18\\r\\n132 37\\r\\n133 9\\r\\n', 'output': ['Anton']}, {'input': '3 -1 20 200\\r\\n3 51\\r\\n6 75\\r\\n7 105\\r\\n8 109\\r\\n12 59\\r\\n12 90\\r\\n15 71\\r\\n17 150\\r\\n18 161\\r\\n19 106\\r\\n23 71\\r\\n26 68\\r\\n34 95\\r\\n36 47\\r\\n38 29\\r\\n38 153\\r\\n41 91\\r\\n43 128\\r\\n43 164\\r\\n44 106\\r\\n', 'output': ['Anton']}, {'input': '3 -1 20 200\\r\\n19 12\\r\\n24 121\\r\\n25 32\\r\\n28 19\\r\\n28 87\\r\\n29 49\\r\\n32 88\\r\\n33 70\\r\\n37 77\\r\\n54 33\\r\\n56 27\\r\\n61 59\\r\\n67 42\\r\\n73 15\\r\\n76 40\\r\\n80 73\\r\\n83 39\\r\\n91 34\\r\\n91 112\\r\\n95 95\\r\\n', 'output': ['Anton']}, {'input': '-3 -14 20 200\\r\\n6 90\\r\\n7 12\\r\\n15 24\\r\\n16 67\\r\\n26 35\\r\\n34 63\\r\\n35 48\\r\\n36 30\\r\\n48 28\\r\\n56 35\\r\\n59 91\\r\\n60 34\\r\\n76 43\\r\\n77 90\\r\\n77 95\\r\\n79 34\\r\\n87 69\\r\\n93 6\\r\\n99 10\\r\\n99 41\\r\\n', 'output': ['Anton']}, {'input': '-3 -14 20 200\\r\\n5 54\\r\\n10 62\\r\\n20 43\\r\\n20 79\\r\\n21 47\\r\\n32 75\\r\\n33 48\\r\\n40 61\\r\\n44 65\\r\\n52 7\\r\\n52 28\\r\\n55 65\\r\\n55 67\\r\\n59 78\\r\\n68 52\\r\\n70 20\\r\\n71 72\\r\\n76 50\\r\\n90 100\\r\\n99 9\\r\\n', 'output': ['Dasha']}, {'input': '-3 -14 20 200\\r\\n1 60\\r\\n5 47\\r\\n10 6\\r\\n14 17\\r\\n14 32\\r\\n34 93\\r\\n40 9\\r\\n43 85\\r\\n44 47\\r\\n49 59\\r\\n57 85\\r\\n68 50\\r\\n69 93\\r\\n71 42\\r\\n71 57\\r\\n73 5\\r\\n74 70\\r\\n83 41\\r\\n83 83\\r\\n89 8\\r\\n', 'output': ['Anton']}, {'input': '-3 -14 20 200\\r\\n14 51\\r\\n26 54\\r\\n30 50\\r\\n38 41\\r\\n40 68\\r\\n47 12\\r\\n50 86\\r\\n63 4\\r\\n65 52\\r\\n67 83\\r\\n70 88\\r\\n71 61\\r\\n79 82\\r\\n82 53\\r\\n89 84\\r\\n90 16\\r\\n92 79\\r\\n97 37\\r\\n100 37\\r\\n100 93\\r\\n', 'output': ['Dasha']}, {'input': '-3 -14 20 200\\r\\n11 24\\r\\n13 8\\r\\n14 8\\r\\n15 44\\r\\n15 54\\r\\n20 79\\r\\n24 72\\r\\n27 7\\r\\n28 6\\r\\n30 18\\r\\n46 34\\r\\n51 5\\r\\n64 83\\r\\n69 48\\r\\n78 76\\r\\n79 2\\r\\n89 43\\r\\n92 31\\r\\n94 76\\r\\n99 64\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n12 147\\r\\n14 181\\r\\n14 198\\r\\n33 51\\r\\n34 93\\r\\n43 29\\r\\n47 44\\r\\n56 161\\r\\n66 111\\r\\n96 119\\r\\n102 71\\r\\n117 184\\r\\n133 69\\r\\n151 189\\r\\n152 28\\r\\n173 27\\r\\n173 120\\r\\n176 12\\r\\n183 1\\r\\n188 196\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n6 108\\r\\n14 188\\r\\n23 60\\r\\n28 44\\r\\n35 151\\r\\n36 82\\r\\n58 49\\r\\n65 81\\r\\n97 100\\r\\n104 26\\r\\n114 143\\r\\n136 156\\r\\n139 112\\r\\n142 119\\r\\n147 184\\r\\n148 46\\r\\n149 152\\r\\n175 178\\r\\n184 85\\r\\n187 12\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n11 189\\r\\n12 108\\r\\n19 190\\r\\n21 27\\r\\n24 193\\r\\n26 86\\r\\n26 123\\r\\n31 180\\r\\n39 196\\r\\n107 193\\r\\n122 46\\r\\n129 103\\r\\n131 129\\r\\n132 135\\r\\n142 51\\r\\n157 22\\r\\n161 27\\r\\n195 163\\r\\n198 55\\r\\n199 64\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n8 176\\r\\n11 162\\r\\n25 130\\r\\n32 124\\r\\n58 175\\r\\n59 170\\r\\n61 98\\r\\n66 37\\r\\n78 5\\r\\n87 150\\r\\n94 172\\r\\n99 171\\r\\n121 11\\r\\n121 31\\r\\n124 172\\r\\n131 71\\r\\n134 190\\r\\n162 50\\r\\n182 99\\r\\n194 119\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n6 80\\r\\n12 62\\r\\n14 15\\r\\n16 133\\r\\n41 28\\r\\n43 47\\r\\n79 136\\r\\n90 196\\r\\n99 151\\r\\n99 187\\r\\n119 42\\r\\n121 11\\r\\n147 132\\r\\n149 166\\r\\n161 102\\r\\n174 4\\r\\n182 122\\r\\n194 50\\r\\n200 182\\r\\n200 197\\r\\n', 'output': ['Anton']}, {'input': '0 0 19 27\\r\\n1 25\\r\\n11 3\\r\\n12 38\\r\\n27 52\\r\\n35 111\\r\\n36 51\\r\\n44 7\\r\\n45 106\\r\\n58 104\\r\\n63 108\\r\\n75 4\\r\\n76 84\\r\\n89 2\\r\\n89 44\\r\\n92 23\\r\\n98 66\\r\\n111 58\\r\\n113 9\\r\\n114 76\\r\\n', 'output': ['Anton']}, {'input': '0 0 15 98\\r\\n5 14\\r\\n9 133\\r\\n10 128\\r\\n15 140\\r\\n17 53\\r\\n33 43\\r\\n50 15\\r\\n69 55\\r\\n74 134\\r\\n77 100\\r\\n99 82\\r\\n100 140\\r\\n102 12\\r\\n110 65\\r\\n128 110\\r\\n', 'output': ['Anton']}, {'input': '0 0 19 34\\r\\n0 116\\r\\n6 11\\r\\n6 32\\r\\n9 84\\r\\n14 3\\r\\n27 85\\r\\n42 58\\r\\n46 31\\r\\n52 104\\r\\n65 83\\r\\n66 37\\r\\n68 130\\r\\n69 69\\r\\n78 7\\r\\n78 23\\r\\n81 66\\r\\n90 27\\r\\n91 39\\r\\n96 10\\r\\n', 'output': ['Anton']}, {'input': '0 0 17 141\\r\\n9 30\\r\\n9 55\\r\\n11 64\\r\\n18 37\\r\\n20 94\\r\\n23 37\\r\\n23 140\\r\\n28 134\\r\\n36 43\\r\\n38 77\\r\\n50 47\\r\\n54 42\\r\\n70 32\\r\\n74 151\\r\\n85 68\\r\\n87 53\\r\\n88 91\\r\\n', 'output': ['Anton']}, {'input': '0 0 17 160\\r\\n31 75\\r\\n32 149\\r\\n49 132\\r\\n54 98\\r\\n54 100\\r\\n57 48\\r\\n65 20\\r\\n67 177\\r\\n72 76\\r\\n74 25\\r\\n99 49\\r\\n105 86\\r\\n128 116\\r\\n147 176\\r\\n156 130\\r\\n160 26\\r\\n178 177\\r\\n', 'output': ['Anton']}, {'input': '-100 -100 10 200\\r\\n0 1\\r\\n1 0\\r\\n1 1\\r\\n31 41\\r\\n3 4\\r\\n5 2\\r\\n1 2\\r\\n3 3\\r\\n9 8\\r\\n10 2\\r\\n', 'output': ['Anton']}, {'input': '-140 -140 2 200\\r\\n1 0\\r\\n0 1\\r\\n', 'output': ['Dasha']}, {'input': '-130 -130 20 200\\r\\n0 1\\r\\n1 0\\r\\n1 1\\r\\n31 41\\r\\n3 4\\r\\n5 2\\r\\n1 2\\r\\n3 3\\r\\n9 8\\r\\n10 2\\r\\n0 2\\r\\n0 3\\r\\n0 4\\r\\n0 5\\r\\n0 6\\r\\n2 0\\r\\n3 0\\r\\n4 0\\r\\n5 0\\r\\n6 0\\r\\n', 'output': ['Anton']}, {'input': '-133 -133 20 200\\r\\n1 0\\r\\n0 1\\r\\n1 1\\r\\n2 0\\r\\n0 2\\r\\n2 1\\r\\n1 2\\r\\n3 0\\r\\n0 3\\r\\n3 1\\r\\n3 2\\r\\n3 3\\r\\n2 2\\r\\n2 3\\r\\n1 3\\r\\n4 0\\r\\n0 4\\r\\n4 1\\r\\n1 4\\r\\n2 4\\r\\n', 'output': ['Anton']}, {'input': '-12 -34 5 200\\r\\n1 0\\r\\n2 0\\r\\n3 1\\r\\n10 3\\r\\n11 4\\r\\n', 'output': ['Dasha']}]", "source_code": "import java.util.*;\n\npublic class Main {\n\n    static int a, b, d, n;\n    static boolean turn, win = true, has_move = true;\n    static boolean arr[][] = new boolean[210][210];\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        a = scanner.nextInt();\n        b = scanner.nextInt();\n        n = scanner.nextInt();\n        d = scanner.nextInt();\n        for(int i=0;i<n;i++) {\n            int c = scanner.nextInt();\n            int d = scanner.nextInt();\n            if(a+c>0 && b+d>0) {\n                arr[a+c][b+d] = true;\n                arr[a+c][201-b-d] = true;\n                arr[201-a-c][b+d] = true;\n                arr[201-a-c][201-b-d] = true;\n                arr[b+d][a+c] = true;\n                arr[b+d][201-a-c] = true;\n                arr[201-b-d][a+c] = true;\n                arr[201-b-d][201-a-c] = true;\n            }\n        }\n        move();\n        if(win) {\n            System.out.println(\"Dasha\");\n        }else {\n            System.out.println(\"Anton\");\n        }\n\n    }\n\n    static void move() {\n        int x=a, y=b;\n        int i, c, d;\n        turn = false;\n        for(i=0;i<4;i++) {\n            if(((turn)? a : b)+c>0 && ((turn)? b : a)+d>0) {\n                if(!arr[((turn)? a : b)+c][((turn)? b : a)+d]) {\n                    arr[((turn)? a : b)+c][((turn)? b : a)+d] = true;\n                    a = ((turn)? a : b)+c;\n                    b = ((turn)? b : a)+d;\n                    has_move = true;\n                }\n            }\n            turn =!turn;\n            if(has_move && Math.abs(x-a)+Math.abs(y-b) > d)\n                win = false;\n            has_move = false;\n        }\n        turn = false;\n        for(i=0;i<4;i++) {\n            if(((turn)? a : b)-c>0 && ((turn)? b : a)-d>0) {\n                if(!arr[((turn)? a : b)-c][((turn)? b : a)-d]) {\n                    arr[((turn)? a : b)-c][((turn)? b : a)-d] = true;\n                    a = ((turn)? a : b)-c;\n                    b = ((turn)? b : a)-d;\n                    has_move = true;\n                }\n            }\n            turn =!turn;\n            if(has_move && Math.abs(x-a)+Math.abs(y-b) > d)\n                win = false;\n            has_move = false;\n        }\n        turn = false;\n        for(i=0;i<4;i++) {\n            if(((turn)? a : b)+c < 201 && ((turn)? b : a)-d>0) {\n                if(!arr[((turn)? a : b)+c][((turn)? b : a)-d]) {\n                    arr[((turn)? a : b)+c][((turn)? b : a)-d] = true;\n                    a = ((turn)? a : b)+c;\n                    b = ((turn)? b : a)-d;\n                    has_move = true;\n                }\n            }\n            turn =!turn;\n            if(has_move && Math.abs(x-a)+Math.abs(y-b) > d)\n                win = false;\n            has_move = false;\n        }\n        turn = false;\n"}
{"src_uid": "645a6ca9a8dda6946c2cc055a4beb08f", "id": 118, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '0 0 2 3\\r\\n1 1\\r\\n1 2\\r\\n', 'output': ['Anton']}, {'input': '0 0 2 4\\r\\n1 1\\r\\n1 2\\r\\n', 'output': ['Dasha']}, {'input': '0 0 5 100\\r\\n12 105\\r\\n15 59\\r\\n21 1\\r\\n27 6\\r\\n27 76\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n16 24\\r\\n29 6\\r\\n44 24\\r\\n66 37\\r\\n102 19\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n4 108\\r\\n5 170\\r\\n7 30\\r\\n7 101\\r\\n21 117\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n30 9\\r\\n53 14\\r\\n84 7\\r\\n94 18\\r\\n121 16\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n52 144\\r\\n55 58\\r\\n56 103\\r\\n98 65\\r\\n134 16\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n17 3\\r\\n42 24\\r\\n72 22\\r\\n72 25\\r\\n120 25\\r\\n', 'output': ['Dasha']}, {'input': '0 0 5 100\\r\\n21 38\\r\\n43 42\\r\\n59 29\\r\\n69 3\\r\\n84 52\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n2 164\\r\\n23 107\\r\\n30 167\\r\\n46 178\\r\\n66 148\\r\\n', 'output': ['Dasha']}, {'input': '3 -1 20 200\\r\\n2 27\\r\\n12 61\\r\\n14 76\\r\\n16 20\\r\\n19 72\\r\\n20 22\\r\\n30 27\\r\\n39 61\\r\\n42 44\\r\\n45 8\\r\\n46 23\\r\\n57 13\\r\\n62 56\\r\\n64 67\\r\\n80 30\\r\\n94 34\\r\\n94 77\\r\\n100 36\\r\\n101 13\\r\\n107 9\\r\\n', 'output': ['Anton']}, {'input': '3 -1 20 200\\r\\n1 139\\r\\n8 76\\r\\n10 97\\r\\n25 99\\r\\n26 147\\r\\n29 51\\r\\n48 79\\r\\n56 164\\r\\n67 80\\r\\n71 35\\r\\n89 90\\r\\n108 16\\r\\n108 127\\r\\n127 54\\r\\n137 13\\r\\n140 156\\r\\n146 104\\r\\n160 155\\r\\n164 138\\r\\n172 102\\r\\n', 'output': ['Anton']}, {'input': '3 -1 20 200\\r\\n1 28\\r\\n9 80\\r\\n20 92\\r\\n29 82\\r\\n38 65\\r\\n42 9\\r\\n50 65\\r\\n67 57\\r\\n71 60\\r\\n73 51\\r\\n78 89\\r\\n86 31\\r\\n90 39\\r\\n97 96\\r\\n104 27\\r\\n115 49\\r\\n119 59\\r\\n125 18\\r\\n132 37\\r\\n133 9\\r\\n', 'output': ['Anton']}, {'input': '3 -1 20 200\\r\\n3 51\\r\\n6 75\\r\\n7 105\\r\\n8 109\\r\\n12 59\\r\\n12 90\\r\\n15 71\\r\\n17 150\\r\\n18 161\\r\\n19 106\\r\\n23 71\\r\\n26 68\\r\\n34 95\\r\\n36 47\\r\\n38 29\\r\\n38 153\\r\\n41 91\\r\\n43 128\\r\\n43 164\\r\\n44 106\\r\\n', 'output': ['Anton']}, {'input': '3 -1 20 200\\r\\n19 12\\r\\n24 121\\r\\n25 32\\r\\n28 19\\r\\n28 87\\r\\n29 49\\r\\n32 88\\r\\n33 70\\r\\n37 77\\r\\n54 33\\r\\n56 27\\r\\n61 59\\r\\n67 42\\r\\n73 15\\r\\n76 40\\r\\n80 73\\r\\n83 39\\r\\n91 34\\r\\n91 112\\r\\n95 95\\r\\n', 'output': ['Anton']}, {'input': '-3 -14 20 200\\r\\n6 90\\r\\n7 12\\r\\n15 24\\r\\n16 67\\r\\n26 35\\r\\n34 63\\r\\n35 48\\r\\n36 30\\r\\n48 28\\r\\n56 35\\r\\n59 91\\r\\n60 34\\r\\n76 43\\r\\n77 90\\r\\n77 95\\r\\n79 34\\r\\n87 69\\r\\n93 6\\r\\n99 10\\r\\n99 41\\r\\n', 'output': ['Anton']}, {'input': '-3 -14 20 200\\r\\n5 54\\r\\n10 62\\r\\n20 43\\r\\n20 79\\r\\n21 47\\r\\n32 75\\r\\n33 48\\r\\n40 61\\r\\n44 65\\r\\n52 7\\r\\n52 28\\r\\n55 65\\r\\n55 67\\r\\n59 78\\r\\n68 52\\r\\n70 20\\r\\n71 72\\r\\n76 50\\r\\n90 100\\r\\n99 9\\r\\n', 'output': ['Dasha']}, {'input': '-3 -14 20 200\\r\\n1 60\\r\\n5 47\\r\\n10 6\\r\\n14 17\\r\\n14 32\\r\\n34 93\\r\\n40 9\\r\\n43 85\\r\\n44 47\\r\\n49 59\\r\\n57 85\\r\\n68 50\\r\\n69 93\\r\\n71 42\\r\\n71 57\\r\\n73 5\\r\\n74 70\\r\\n83 41\\r\\n83 83\\r\\n89 8\\r\\n', 'output': ['Anton']}, {'input': '-3 -14 20 200\\r\\n14 51\\r\\n26 54\\r\\n30 50\\r\\n38 41\\r\\n40 68\\r\\n47 12\\r\\n50 86\\r\\n63 4\\r\\n65 52\\r\\n67 83\\r\\n70 88\\r\\n71 61\\r\\n79 82\\r\\n82 53\\r\\n89 84\\r\\n90 16\\r\\n92 79\\r\\n97 37\\r\\n100 37\\r\\n100 93\\r\\n', 'output': ['Dasha']}, {'input': '-3 -14 20 200\\r\\n11 24\\r\\n13 8\\r\\n14 8\\r\\n15 44\\r\\n15 54\\r\\n20 79\\r\\n24 72\\r\\n27 7\\r\\n28 6\\r\\n30 18\\r\\n46 34\\r\\n51 5\\r\\n64 83\\r\\n69 48\\r\\n78 76\\r\\n79 2\\r\\n89 43\\r\\n92 31\\r\\n94 76\\r\\n99 64\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n12 147\\r\\n14 181\\r\\n14 198\\r\\n33 51\\r\\n34 93\\r\\n43 29\\r\\n47 44\\r\\n56 161\\r\\n66 111\\r\\n96 119\\r\\n102 71\\r\\n117 184\\r\\n133 69\\r\\n151 189\\r\\n152 28\\r\\n173 27\\r\\n173 120\\r\\n176 12\\r\\n183 1\\r\\n188 196\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n6 108\\r\\n14 188\\r\\n23 60\\r\\n28 44\\r\\n35 151\\r\\n36 82\\r\\n58 49\\r\\n65 81\\r\\n97 100\\r\\n104 26\\r\\n114 143\\r\\n136 156\\r\\n139 112\\r\\n142 119\\r\\n147 184\\r\\n148 46\\r\\n149 152\\r\\n175 178\\r\\n184 85\\r\\n187 12\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n11 189\\r\\n12 108\\r\\n19 190\\r\\n21 27\\r\\n24 193\\r\\n26 86\\r\\n26 123\\r\\n31 180\\r\\n39 196\\r\\n107 193\\r\\n122 46\\r\\n129 103\\r\\n131 129\\r\\n132 135\\r\\n142 51\\r\\n157 22\\r\\n161 27\\r\\n195 163\\r\\n198 55\\r\\n199 64\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n8 176\\r\\n11 162\\r\\n25 130\\r\\n32 124\\r\\n58 175\\r\\n59 170\\r\\n61 98\\r\\n66 37\\r\\n78 5\\r\\n87 150\\r\\n94 172\\r\\n99 171\\r\\n121 11\\r\\n121 31\\r\\n124 172\\r\\n131 71\\r\\n134 190\\r\\n162 50\\r\\n182 99\\r\\n194 119\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n6 80\\r\\n12 62\\r\\n14 15\\r\\n16 133\\r\\n41 28\\r\\n43 47\\r\\n79 136\\r\\n90 196\\r\\n99 151\\r\\n99 187\\r\\n119 42\\r\\n121 11\\r\\n147 132\\r\\n149 166\\r\\n161 102\\r\\n174 4\\r\\n182 122\\r\\n194 50\\r\\n200 182\\r\\n200 197\\r\\n', 'output': ['Anton']}, {'input': '0 0 19 27\\r\\n1 25\\r\\n11 3\\r\\n12 38\\r\\n27 52\\r\\n35 111\\r\\n36 51\\r\\n44 7\\r\\n45 106\\r\\n58 104\\r\\n63 108\\r\\n75 4\\r\\n76 84\\r\\n89 2\\r\\n89 44\\r\\n92 23\\r\\n98 66\\r\\n111 58\\r\\n113 9\\r\\n114 76\\r\\n', 'output': ['Anton']}, {'input': '0 0 15 98\\r\\n5 14\\r\\n9 133\\r\\n10 128\\r\\n15 140\\r\\n17 53\\r\\n33 43\\r\\n50 15\\r\\n69 55\\r\\n74 134\\r\\n77 100\\r\\n99 82\\r\\n100 140\\r\\n102 12\\r\\n110 65\\r\\n128 110\\r\\n', 'output': ['Anton']}, {'input': '0 0 19 34\\r\\n0 116\\r\\n6 11\\r\\n6 32\\r\\n9 84\\r\\n14 3\\r\\n27 85\\r\\n42 58\\r\\n46 31\\r\\n52 104\\r\\n65 83\\r\\n66 37\\r\\n68 130\\r\\n69 69\\r\\n78 7\\r\\n78 23\\r\\n81 66\\r\\n90 27\\r\\n91 39\\r\\n96 10\\r\\n', 'output': ['Anton']}, {'input': '0 0 17 141\\r\\n9 30\\r\\n9 55\\r\\n11 64\\r\\n18 37\\r\\n20 94\\r\\n23 37\\r\\n23 140\\r\\n28 134\\r\\n36 43\\r\\n38 77\\r\\n50 47\\r\\n54 42\\r\\n70 32\\r\\n74 151\\r\\n85 68\\r\\n87 53\\r\\n88 91\\r\\n', 'output': ['Anton']}, {'input': '0 0 17 160\\r\\n31 75\\r\\n32 149\\r\\n49 132\\r\\n54 98\\r\\n54 100\\r\\n57 48\\r\\n65 20\\r\\n67 177\\r\\n72 76\\r\\n74 25\\r\\n99 49\\r\\n105 86\\r\\n128 116\\r\\n147 176\\r\\n156 130\\r\\n160 26\\r\\n178 177\\r\\n', 'output': ['Anton']}, {'input': '-100 -100 10 200\\r\\n0 1\\r\\n1 0\\r\\n1 1\\r\\n31 41\\r\\n3 4\\r\\n5 2\\r\\n1 2\\r\\n3 3\\r\\n9 8\\r\\n10 2\\r\\n', 'output': ['Anton']}, {'input': '-140 -140 2 200\\r\\n1 0\\r\\n0 1\\r\\n', 'output': ['Dasha']}, {'input': '-130 -130 20 200\\r\\n0 1\\r\\n1 0\\r\\n1 1\\r\\n31 41\\r\\n3 4\\r\\n5 2\\r\\n1 2\\r\\n3 3\\r\\n9 8\\r\\n10 2\\r\\n0 2\\r\\n0 3\\r\\n0 4\\r\\n0 5\\r\\n0 6\\r\\n2 0\\r\\n3 0\\r\\n4 0\\r\\n5 0\\r\\n6 0\\r\\n', 'output': ['Anton']}, {'input': '-133 -133 20 200\\r\\n1 0\\r\\n0 1\\r\\n1 1\\r\\n2 0\\r\\n0 2\\r\\n2 1\\r\\n1 2\\r\\n3 0\\r\\n0 3\\r\\n3 1\\r\\n3 2\\r\\n3 3\\r\\n2 2\\r\\n2 3\\r\\n1 3\\r\\n4 0\\r\\n0 4\\r\\n4 1\\r\\n1 4\\r\\n2 4\\r\\n', 'output': ['Anton']}, {'input': '-12 -34 5 200\\r\\n1 0\\r\\n2 0\\r\\n3 1\\r\\n10 3\\r\\n11 4\\r\\n', 'output': ['Dasha']}]", "source_code": "import java.io.FileNotFoundException;\nimport java.util.*;\n\n\npublic class MyClass {\n   \n    private static class Vector {\n    \tint x,y;\n    \t\n    \tprivate Vector(int x, int y) {\n    \t\tthis.x = x;\n    \t\tthis.y = y;\n    \t}\n    }\n   \n    public static void main(String[] args) throws FileNotFoundException {\n    \tScanner scanner = new Scanner(System.in);\n        int x = scanner.nextInt();\n        int y = scanner.nextInt();\n        int n = scanner.nextInt();\n        int d = scanner.nextInt();\n        int player = 0; //0 = Anton, 1 = Dasha\n        int max = 100000000;\n        int x_[] = new int[n];\n        int y_[] = new int[n];\n        Vector vector;\n        for(int i = 0; i < n ; i++){\n        \tx_[i] = scanner.nextInt();\n        \ty_[i] = scanner.nextInt();\n        }\n        while(true){\n        \tmax = 100000000;\n        \tfor(int j = 0 ; j < n ; j++){\n        \t\tif(player % 2 == 1){\n        \t\t\tvector = new Vector(x+x_, y+y_[j]);\n        \t\t}\n        \t\telse{\n        \t\t\tvector = new Vector(x-x_, y-y_[j]);\n        \t\t}\n        \t\t\n        \t\tif( (vector.x > 0 && vector.y > 0) && \n        \t\t\t\t( (Math.abs(vector.x) + Math.abs(vector.y)) <= d) \n        \t\t\t\t){\n        \t\t\tmax = Math.min(max, Math.abs(vector.x) + Math.abs(vector.y) );\n        \t\t}\n        \t\t\n        \t\tif(player % 2 == 1){\n        \t\t\tvector = new Vector(x-x_, y+y_[j]);\n        \t\t}\n        \t\telse{\n        \t\t\tvector = new Vector(x+x_, y-y_[j]);\n        \t\t}\n        \t\t\n        \t\tif( (vector.x > 0 && vector.y > 0) && \n        \t\t\t\t( (Math.abs(vector.x) + Math.abs(vector.y)) <= d) \n        \t\t\t\t){\n        \t\t\tmax = Math.min(max, Math.abs(vector.x) + Math.abs(vector.y) );\n        \t\t}\n        \t}\n        \t\n        \tif(max == 100000000){\n        \t\tSystem.out.println(\"Dasha\");\n        \t\tbreak;\n        \t}\n        \telse{\n        \t\tif(player % 2 == 1){\n        \t\t\tx += x_;\n        \t\t\ty += y_;\n        \t\t}\n        \t\telse{\n        \t\t\tx -= x_;\n        \t\t\ty -= y_;\n        \t\t}\n        \t}\n        \tplayer++;\n        }\n    }\n}\n"}
{"src_uid": "645a6ca9a8dda6946c2cc055a4beb08f", "id": 118, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '0 0 2 3\\r\\n1 1\\r\\n1 2\\r\\n', 'output': ['Anton']}, {'input': '0 0 2 4\\r\\n1 1\\r\\n1 2\\r\\n', 'output': ['Dasha']}, {'input': '0 0 5 100\\r\\n12 105\\r\\n15 59\\r\\n21 1\\r\\n27 6\\r\\n27 76\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n16 24\\r\\n29 6\\r\\n44 24\\r\\n66 37\\r\\n102 19\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n4 108\\r\\n5 170\\r\\n7 30\\r\\n7 101\\r\\n21 117\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n30 9\\r\\n53 14\\r\\n84 7\\r\\n94 18\\r\\n121 16\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n52 144\\r\\n55 58\\r\\n56 103\\r\\n98 65\\r\\n134 16\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n17 3\\r\\n42 24\\r\\n72 22\\r\\n72 25\\r\\n120 25\\r\\n', 'output': ['Dasha']}, {'input': '0 0 5 100\\r\\n21 38\\r\\n43 42\\r\\n59 29\\r\\n69 3\\r\\n84 52\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n2 164\\r\\n23 107\\r\\n30 167\\r\\n46 178\\r\\n66 148\\r\\n', 'output': ['Dasha']}, {'input': '3 -1 20 200\\r\\n2 27\\r\\n12 61\\r\\n14 76\\r\\n16 20\\r\\n19 72\\r\\n20 22\\r\\n30 27\\r\\n39 61\\r\\n42 44\\r\\n45 8\\r\\n46 23\\r\\n57 13\\r\\n62 56\\r\\n64 67\\r\\n80 30\\r\\n94 34\\r\\n94 77\\r\\n100 36\\r\\n101 13\\r\\n107 9\\r\\n', 'output': ['Anton']}, {'input': '3 -1 20 200\\r\\n1 139\\r\\n8 76\\r\\n10 97\\r\\n25 99\\r\\n26 147\\r\\n29 51\\r\\n48 79\\r\\n56 164\\r\\n67 80\\r\\n71 35\\r\\n89 90\\r\\n108 16\\r\\n108 127\\r\\n127 54\\r\\n137 13\\r\\n140 156\\r\\n146 104\\r\\n160 155\\r\\n164 138\\r\\n172 102\\r\\n', 'output': ['Anton']}, {'input': '3 -1 20 200\\r\\n1 28\\r\\n9 80\\r\\n20 92\\r\\n29 82\\r\\n38 65\\r\\n42 9\\r\\n50 65\\r\\n67 57\\r\\n71 60\\r\\n73 51\\r\\n78 89\\r\\n86 31\\r\\n90 39\\r\\n97 96\\r\\n104 27\\r\\n115 49\\r\\n119 59\\r\\n125 18\\r\\n132 37\\r\\n133 9\\r\\n', 'output': ['Anton']}, {'input': '3 -1 20 200\\r\\n3 51\\r\\n6 75\\r\\n7 105\\r\\n8 109\\r\\n12 59\\r\\n12 90\\r\\n15 71\\r\\n17 150\\r\\n18 161\\r\\n19 106\\r\\n23 71\\r\\n26 68\\r\\n34 95\\r\\n36 47\\r\\n38 29\\r\\n38 153\\r\\n41 91\\r\\n43 128\\r\\n43 164\\r\\n44 106\\r\\n', 'output': ['Anton']}, {'input': '3 -1 20 200\\r\\n19 12\\r\\n24 121\\r\\n25 32\\r\\n28 19\\r\\n28 87\\r\\n29 49\\r\\n32 88\\r\\n33 70\\r\\n37 77\\r\\n54 33\\r\\n56 27\\r\\n61 59\\r\\n67 42\\r\\n73 15\\r\\n76 40\\r\\n80 73\\r\\n83 39\\r\\n91 34\\r\\n91 112\\r\\n95 95\\r\\n', 'output': ['Anton']}, {'input': '-3 -14 20 200\\r\\n6 90\\r\\n7 12\\r\\n15 24\\r\\n16 67\\r\\n26 35\\r\\n34 63\\r\\n35 48\\r\\n36 30\\r\\n48 28\\r\\n56 35\\r\\n59 91\\r\\n60 34\\r\\n76 43\\r\\n77 90\\r\\n77 95\\r\\n79 34\\r\\n87 69\\r\\n93 6\\r\\n99 10\\r\\n99 41\\r\\n', 'output': ['Anton']}, {'input': '-3 -14 20 200\\r\\n5 54\\r\\n10 62\\r\\n20 43\\r\\n20 79\\r\\n21 47\\r\\n32 75\\r\\n33 48\\r\\n40 61\\r\\n44 65\\r\\n52 7\\r\\n52 28\\r\\n55 65\\r\\n55 67\\r\\n59 78\\r\\n68 52\\r\\n70 20\\r\\n71 72\\r\\n76 50\\r\\n90 100\\r\\n99 9\\r\\n', 'output': ['Dasha']}, {'input': '-3 -14 20 200\\r\\n1 60\\r\\n5 47\\r\\n10 6\\r\\n14 17\\r\\n14 32\\r\\n34 93\\r\\n40 9\\r\\n43 85\\r\\n44 47\\r\\n49 59\\r\\n57 85\\r\\n68 50\\r\\n69 93\\r\\n71 42\\r\\n71 57\\r\\n73 5\\r\\n74 70\\r\\n83 41\\r\\n83 83\\r\\n89 8\\r\\n', 'output': ['Anton']}, {'input': '-3 -14 20 200\\r\\n14 51\\r\\n26 54\\r\\n30 50\\r\\n38 41\\r\\n40 68\\r\\n47 12\\r\\n50 86\\r\\n63 4\\r\\n65 52\\r\\n67 83\\r\\n70 88\\r\\n71 61\\r\\n79 82\\r\\n82 53\\r\\n89 84\\r\\n90 16\\r\\n92 79\\r\\n97 37\\r\\n100 37\\r\\n100 93\\r\\n', 'output': ['Dasha']}, {'input': '-3 -14 20 200\\r\\n11 24\\r\\n13 8\\r\\n14 8\\r\\n15 44\\r\\n15 54\\r\\n20 79\\r\\n24 72\\r\\n27 7\\r\\n28 6\\r\\n30 18\\r\\n46 34\\r\\n51 5\\r\\n64 83\\r\\n69 48\\r\\n78 76\\r\\n79 2\\r\\n89 43\\r\\n92 31\\r\\n94 76\\r\\n99 64\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n12 147\\r\\n14 181\\r\\n14 198\\r\\n33 51\\r\\n34 93\\r\\n43 29\\r\\n47 44\\r\\n56 161\\r\\n66 111\\r\\n96 119\\r\\n102 71\\r\\n117 184\\r\\n133 69\\r\\n151 189\\r\\n152 28\\r\\n173 27\\r\\n173 120\\r\\n176 12\\r\\n183 1\\r\\n188 196\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n6 108\\r\\n14 188\\r\\n23 60\\r\\n28 44\\r\\n35 151\\r\\n36 82\\r\\n58 49\\r\\n65 81\\r\\n97 100\\r\\n104 26\\r\\n114 143\\r\\n136 156\\r\\n139 112\\r\\n142 119\\r\\n147 184\\r\\n148 46\\r\\n149 152\\r\\n175 178\\r\\n184 85\\r\\n187 12\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n11 189\\r\\n12 108\\r\\n19 190\\r\\n21 27\\r\\n24 193\\r\\n26 86\\r\\n26 123\\r\\n31 180\\r\\n39 196\\r\\n107 193\\r\\n122 46\\r\\n129 103\\r\\n131 129\\r\\n132 135\\r\\n142 51\\r\\n157 22\\r\\n161 27\\r\\n195 163\\r\\n198 55\\r\\n199 64\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n8 176\\r\\n11 162\\r\\n25 130\\r\\n32 124\\r\\n58 175\\r\\n59 170\\r\\n61 98\\r\\n66 37\\r\\n78 5\\r\\n87 150\\r\\n94 172\\r\\n99 171\\r\\n121 11\\r\\n121 31\\r\\n124 172\\r\\n131 71\\r\\n134 190\\r\\n162 50\\r\\n182 99\\r\\n194 119\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n6 80\\r\\n12 62\\r\\n14 15\\r\\n16 133\\r\\n41 28\\r\\n43 47\\r\\n79 136\\r\\n90 196\\r\\n99 151\\r\\n99 187\\r\\n119 42\\r\\n121 11\\r\\n147 132\\r\\n149 166\\r\\n161 102\\r\\n174 4\\r\\n182 122\\r\\n194 50\\r\\n200 182\\r\\n200 197\\r\\n', 'output': ['Anton']}, {'input': '0 0 19 27\\r\\n1 25\\r\\n11 3\\r\\n12 38\\r\\n27 52\\r\\n35 111\\r\\n36 51\\r\\n44 7\\r\\n45 106\\r\\n58 104\\r\\n63 108\\r\\n75 4\\r\\n76 84\\r\\n89 2\\r\\n89 44\\r\\n92 23\\r\\n98 66\\r\\n111 58\\r\\n113 9\\r\\n114 76\\r\\n', 'output': ['Anton']}, {'input': '0 0 15 98\\r\\n5 14\\r\\n9 133\\r\\n10 128\\r\\n15 140\\r\\n17 53\\r\\n33 43\\r\\n50 15\\r\\n69 55\\r\\n74 134\\r\\n77 100\\r\\n99 82\\r\\n100 140\\r\\n102 12\\r\\n110 65\\r\\n128 110\\r\\n', 'output': ['Anton']}, {'input': '0 0 19 34\\r\\n0 116\\r\\n6 11\\r\\n6 32\\r\\n9 84\\r\\n14 3\\r\\n27 85\\r\\n42 58\\r\\n46 31\\r\\n52 104\\r\\n65 83\\r\\n66 37\\r\\n68 130\\r\\n69 69\\r\\n78 7\\r\\n78 23\\r\\n81 66\\r\\n90 27\\r\\n91 39\\r\\n96 10\\r\\n', 'output': ['Anton']}, {'input': '0 0 17 141\\r\\n9 30\\r\\n9 55\\r\\n11 64\\r\\n18 37\\r\\n20 94\\r\\n23 37\\r\\n23 140\\r\\n28 134\\r\\n36 43\\r\\n38 77\\r\\n50 47\\r\\n54 42\\r\\n70 32\\r\\n74 151\\r\\n85 68\\r\\n87 53\\r\\n88 91\\r\\n', 'output': ['Anton']}, {'input': '0 0 17 160\\r\\n31 75\\r\\n32 149\\r\\n49 132\\r\\n54 98\\r\\n54 100\\r\\n57 48\\r\\n65 20\\r\\n67 177\\r\\n72 76\\r\\n74 25\\r\\n99 49\\r\\n105 86\\r\\n128 116\\r\\n147 176\\r\\n156 130\\r\\n160 26\\r\\n178 177\\r\\n', 'output': ['Anton']}, {'input': '-100 -100 10 200\\r\\n0 1\\r\\n1 0\\r\\n1 1\\r\\n31 41\\r\\n3 4\\r\\n5 2\\r\\n1 2\\r\\n3 3\\r\\n9 8\\r\\n10 2\\r\\n', 'output': ['Anton']}, {'input': '-140 -140 2 200\\r\\n1 0\\r\\n0 1\\r\\n', 'output': ['Dasha']}, {'input': '-130 -130 20 200\\r\\n0 1\\r\\n1 0\\r\\n1 1\\r\\n31 41\\r\\n3 4\\r\\n5 2\\r\\n1 2\\r\\n3 3\\r\\n9 8\\r\\n10 2\\r\\n0 2\\r\\n0 3\\r\\n0 4\\r\\n0 5\\r\\n0 6\\r\\n2 0\\r\\n3 0\\r\\n4 0\\r\\n5 0\\r\\n6 0\\r\\n', 'output': ['Anton']}, {'input': '-133 -133 20 200\\r\\n1 0\\r\\n0 1\\r\\n1 1\\r\\n2 0\\r\\n0 2\\r\\n2 1\\r\\n1 2\\r\\n3 0\\r\\n0 3\\r\\n3 1\\r\\n3 2\\r\\n3 3\\r\\n2 2\\r\\n2 3\\r\\n1 3\\r\\n4 0\\r\\n0 4\\r\\n4 1\\r\\n1 4\\r\\n2 4\\r\\n', 'output': ['Anton']}, {'input': '-12 -34 5 200\\r\\n1 0\\r\\n2 0\\r\\n3 1\\r\\n10 3\\r\\n11 4\\r\\n', 'output': ['Dasha']}]", "source_code": "import java.util.*;\nimport java.io.*;\n \npublic class c {\n\t\n\tpublic static void main (String[] args) throws java.io.IOException{\n\t\t\n\t\tFastScanner scanner = new FastScanner();\n\t\t\n\t\tint x = scanner.nextInt();\n\t\tint y = scanner.nextInt();\n\t\tint d = scanner.nextInt();\n\t\tint n = scanner.nextInt();\n\t\t\n\t\tint bestx = 0;\n\t\tint besty = 0;\n\t\tboolean flag = true;\n\t\t\n\t\tint[][] moves = new int[n][2];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tmoves[i][0] = scanner.nextInt();\n\t\t\tmoves[i][1] = scanner.nextInt();\n\t\t}\n\t\t\n\t\tfor(int a = 0; a < 2; a++) {\n\t\t\t\n\t\t\tint tmpx = x;\n\t\t\tint tmpy = y;\n\t\t\t\n\t\t\tfor(int b = 0; b < n; b++) {\n\t\t\t\t\n\t\t\t\tint nextx = tmpx + moves[b][0];\n\t\t\t\tint nexty = tmpy + moves[b][1];\n\t\t\t\t\n\t\t\t\tif((tmpx >= 0 && tmpx <= d) || (tmpy >= 0 && tmpy <= d)) {\n\t\t\t\t\ttmpx = nextx;\n\t\t\t\t\ttmpy = nexty;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(((tmpx+tmpy)%2 == 0 && (nextx+nexty)%2 == 1) || ((tmpx+tmpy)%2 == 1 && (nextx+nexty)%2 == 0))\n\t\t\t\t\t\tflag =!flag;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag) {\n\t\t\t\tx = tmpx;\n\t\t\t\ty = tmpy;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif((x >= 0 && x <= d) || (y >= 0 && y <= d))\n\t\t\tSystem.out.println(\"Dasha\");\n\t\telse if(x+y <= d)\n\t\t\tSystem.out.println(\"Anton\");\n\t\telse if((x+y)%2 == 0)\n\t\t\tSystem.out.println(\"Anton\");\n\t\telse\n\t\t\tSystem.out.println(\"Dasha\");\n\t}\n\t\n\tprivate static class FastScanner{\n\t\tprivate final InputStream in = System.in;\n\t\tprivate final byte[] buffer = new byte[1024];\n\t\tprivate int ptr = 0;\n\t\tprivate int buflen = 0;\n\t\tprivate boolean hasNextByte() {\n\t\t\t\tif (ptr < buflen)\n\t\t\t\t\t\treturn true;\n\t\t\t\tptr = 0;\n\t\t\t\ttry {\n\t\t\t\t\t\tbuflen = in.read(buffer);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tif (buflen <= 0)\n\t\t\t\t\t\treturn false;\n\t\t\t\treturn true;\n\t\t}\n\t\tprivate int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n\t\tprivate static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n\t\tpublic boolean hasNext() { while(hasNextByte() &&!isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\n\t\tpublic String next() {\n\t\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\tint b = readByte();\n\t\t\t\twhile(isPrintableChar(b)) {\n\t\t\t\t\t\tsb.appendCodePoint(b);\n\t\t\t\t\t\tb = readByte();\n\t\t\t\t}\n\t\t\t"}
{"src_uid": "645a6ca9a8dda6946c2cc055a4beb08f", "id": 118, "lang_cluster": "java", "lang": "Java 11", "difficulty": 1900, "testcases": "[{'input': '0 0 2 3\\r\\n1 1\\r\\n1 2\\r\\n', 'output': ['Anton']}, {'input': '0 0 2 4\\r\\n1 1\\r\\n1 2\\r\\n', 'output': ['Dasha']}, {'input': '0 0 5 100\\r\\n12 105\\r\\n15 59\\r\\n21 1\\r\\n27 6\\r\\n27 76\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n16 24\\r\\n29 6\\r\\n44 24\\r\\n66 37\\r\\n102 19\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n4 108\\r\\n5 170\\r\\n7 30\\r\\n7 101\\r\\n21 117\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n30 9\\r\\n53 14\\r\\n84 7\\r\\n94 18\\r\\n121 16\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n52 144\\r\\n55 58\\r\\n56 103\\r\\n98 65\\r\\n134 16\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n17 3\\r\\n42 24\\r\\n72 22\\r\\n72 25\\r\\n120 25\\r\\n', 'output': ['Dasha']}, {'input': '0 0 5 100\\r\\n21 38\\r\\n43 42\\r\\n59 29\\r\\n69 3\\r\\n84 52\\r\\n', 'output': ['Anton']}, {'input': '0 0 5 100\\r\\n2 164\\r\\n23 107\\r\\n30 167\\r\\n46 178\\r\\n66 148\\r\\n', 'output': ['Dasha']}, {'input': '3 -1 20 200\\r\\n2 27\\r\\n12 61\\r\\n14 76\\r\\n16 20\\r\\n19 72\\r\\n20 22\\r\\n30 27\\r\\n39 61\\r\\n42 44\\r\\n45 8\\r\\n46 23\\r\\n57 13\\r\\n62 56\\r\\n64 67\\r\\n80 30\\r\\n94 34\\r\\n94 77\\r\\n100 36\\r\\n101 13\\r\\n107 9\\r\\n', 'output': ['Anton']}, {'input': '3 -1 20 200\\r\\n1 139\\r\\n8 76\\r\\n10 97\\r\\n25 99\\r\\n26 147\\r\\n29 51\\r\\n48 79\\r\\n56 164\\r\\n67 80\\r\\n71 35\\r\\n89 90\\r\\n108 16\\r\\n108 127\\r\\n127 54\\r\\n137 13\\r\\n140 156\\r\\n146 104\\r\\n160 155\\r\\n164 138\\r\\n172 102\\r\\n', 'output': ['Anton']}, {'input': '3 -1 20 200\\r\\n1 28\\r\\n9 80\\r\\n20 92\\r\\n29 82\\r\\n38 65\\r\\n42 9\\r\\n50 65\\r\\n67 57\\r\\n71 60\\r\\n73 51\\r\\n78 89\\r\\n86 31\\r\\n90 39\\r\\n97 96\\r\\n104 27\\r\\n115 49\\r\\n119 59\\r\\n125 18\\r\\n132 37\\r\\n133 9\\r\\n', 'output': ['Anton']}, {'input': '3 -1 20 200\\r\\n3 51\\r\\n6 75\\r\\n7 105\\r\\n8 109\\r\\n12 59\\r\\n12 90\\r\\n15 71\\r\\n17 150\\r\\n18 161\\r\\n19 106\\r\\n23 71\\r\\n26 68\\r\\n34 95\\r\\n36 47\\r\\n38 29\\r\\n38 153\\r\\n41 91\\r\\n43 128\\r\\n43 164\\r\\n44 106\\r\\n', 'output': ['Anton']}, {'input': '3 -1 20 200\\r\\n19 12\\r\\n24 121\\r\\n25 32\\r\\n28 19\\r\\n28 87\\r\\n29 49\\r\\n32 88\\r\\n33 70\\r\\n37 77\\r\\n54 33\\r\\n56 27\\r\\n61 59\\r\\n67 42\\r\\n73 15\\r\\n76 40\\r\\n80 73\\r\\n83 39\\r\\n91 34\\r\\n91 112\\r\\n95 95\\r\\n', 'output': ['Anton']}, {'input': '-3 -14 20 200\\r\\n6 90\\r\\n7 12\\r\\n15 24\\r\\n16 67\\r\\n26 35\\r\\n34 63\\r\\n35 48\\r\\n36 30\\r\\n48 28\\r\\n56 35\\r\\n59 91\\r\\n60 34\\r\\n76 43\\r\\n77 90\\r\\n77 95\\r\\n79 34\\r\\n87 69\\r\\n93 6\\r\\n99 10\\r\\n99 41\\r\\n', 'output': ['Anton']}, {'input': '-3 -14 20 200\\r\\n5 54\\r\\n10 62\\r\\n20 43\\r\\n20 79\\r\\n21 47\\r\\n32 75\\r\\n33 48\\r\\n40 61\\r\\n44 65\\r\\n52 7\\r\\n52 28\\r\\n55 65\\r\\n55 67\\r\\n59 78\\r\\n68 52\\r\\n70 20\\r\\n71 72\\r\\n76 50\\r\\n90 100\\r\\n99 9\\r\\n', 'output': ['Dasha']}, {'input': '-3 -14 20 200\\r\\n1 60\\r\\n5 47\\r\\n10 6\\r\\n14 17\\r\\n14 32\\r\\n34 93\\r\\n40 9\\r\\n43 85\\r\\n44 47\\r\\n49 59\\r\\n57 85\\r\\n68 50\\r\\n69 93\\r\\n71 42\\r\\n71 57\\r\\n73 5\\r\\n74 70\\r\\n83 41\\r\\n83 83\\r\\n89 8\\r\\n', 'output': ['Anton']}, {'input': '-3 -14 20 200\\r\\n14 51\\r\\n26 54\\r\\n30 50\\r\\n38 41\\r\\n40 68\\r\\n47 12\\r\\n50 86\\r\\n63 4\\r\\n65 52\\r\\n67 83\\r\\n70 88\\r\\n71 61\\r\\n79 82\\r\\n82 53\\r\\n89 84\\r\\n90 16\\r\\n92 79\\r\\n97 37\\r\\n100 37\\r\\n100 93\\r\\n', 'output': ['Dasha']}, {'input': '-3 -14 20 200\\r\\n11 24\\r\\n13 8\\r\\n14 8\\r\\n15 44\\r\\n15 54\\r\\n20 79\\r\\n24 72\\r\\n27 7\\r\\n28 6\\r\\n30 18\\r\\n46 34\\r\\n51 5\\r\\n64 83\\r\\n69 48\\r\\n78 76\\r\\n79 2\\r\\n89 43\\r\\n92 31\\r\\n94 76\\r\\n99 64\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n12 147\\r\\n14 181\\r\\n14 198\\r\\n33 51\\r\\n34 93\\r\\n43 29\\r\\n47 44\\r\\n56 161\\r\\n66 111\\r\\n96 119\\r\\n102 71\\r\\n117 184\\r\\n133 69\\r\\n151 189\\r\\n152 28\\r\\n173 27\\r\\n173 120\\r\\n176 12\\r\\n183 1\\r\\n188 196\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n6 108\\r\\n14 188\\r\\n23 60\\r\\n28 44\\r\\n35 151\\r\\n36 82\\r\\n58 49\\r\\n65 81\\r\\n97 100\\r\\n104 26\\r\\n114 143\\r\\n136 156\\r\\n139 112\\r\\n142 119\\r\\n147 184\\r\\n148 46\\r\\n149 152\\r\\n175 178\\r\\n184 85\\r\\n187 12\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n11 189\\r\\n12 108\\r\\n19 190\\r\\n21 27\\r\\n24 193\\r\\n26 86\\r\\n26 123\\r\\n31 180\\r\\n39 196\\r\\n107 193\\r\\n122 46\\r\\n129 103\\r\\n131 129\\r\\n132 135\\r\\n142 51\\r\\n157 22\\r\\n161 27\\r\\n195 163\\r\\n198 55\\r\\n199 64\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n8 176\\r\\n11 162\\r\\n25 130\\r\\n32 124\\r\\n58 175\\r\\n59 170\\r\\n61 98\\r\\n66 37\\r\\n78 5\\r\\n87 150\\r\\n94 172\\r\\n99 171\\r\\n121 11\\r\\n121 31\\r\\n124 172\\r\\n131 71\\r\\n134 190\\r\\n162 50\\r\\n182 99\\r\\n194 119\\r\\n', 'output': ['Anton']}, {'input': '12 -11 20 200\\r\\n6 80\\r\\n12 62\\r\\n14 15\\r\\n16 133\\r\\n41 28\\r\\n43 47\\r\\n79 136\\r\\n90 196\\r\\n99 151\\r\\n99 187\\r\\n119 42\\r\\n121 11\\r\\n147 132\\r\\n149 166\\r\\n161 102\\r\\n174 4\\r\\n182 122\\r\\n194 50\\r\\n200 182\\r\\n200 197\\r\\n', 'output': ['Anton']}, {'input': '0 0 19 27\\r\\n1 25\\r\\n11 3\\r\\n12 38\\r\\n27 52\\r\\n35 111\\r\\n36 51\\r\\n44 7\\r\\n45 106\\r\\n58 104\\r\\n63 108\\r\\n75 4\\r\\n76 84\\r\\n89 2\\r\\n89 44\\r\\n92 23\\r\\n98 66\\r\\n111 58\\r\\n113 9\\r\\n114 76\\r\\n', 'output': ['Anton']}, {'input': '0 0 15 98\\r\\n5 14\\r\\n9 133\\r\\n10 128\\r\\n15 140\\r\\n17 53\\r\\n33 43\\r\\n50 15\\r\\n69 55\\r\\n74 134\\r\\n77 100\\r\\n99 82\\r\\n100 140\\r\\n102 12\\r\\n110 65\\r\\n128 110\\r\\n', 'output': ['Anton']}, {'input': '0 0 19 34\\r\\n0 116\\r\\n6 11\\r\\n6 32\\r\\n9 84\\r\\n14 3\\r\\n27 85\\r\\n42 58\\r\\n46 31\\r\\n52 104\\r\\n65 83\\r\\n66 37\\r\\n68 130\\r\\n69 69\\r\\n78 7\\r\\n78 23\\r\\n81 66\\r\\n90 27\\r\\n91 39\\r\\n96 10\\r\\n', 'output': ['Anton']}, {'input': '0 0 17 141\\r\\n9 30\\r\\n9 55\\r\\n11 64\\r\\n18 37\\r\\n20 94\\r\\n23 37\\r\\n23 140\\r\\n28 134\\r\\n36 43\\r\\n38 77\\r\\n50 47\\r\\n54 42\\r\\n70 32\\r\\n74 151\\r\\n85 68\\r\\n87 53\\r\\n88 91\\r\\n', 'output': ['Anton']}, {'input': '0 0 17 160\\r\\n31 75\\r\\n32 149\\r\\n49 132\\r\\n54 98\\r\\n54 100\\r\\n57 48\\r\\n65 20\\r\\n67 177\\r\\n72 76\\r\\n74 25\\r\\n99 49\\r\\n105 86\\r\\n128 116\\r\\n147 176\\r\\n156 130\\r\\n160 26\\r\\n178 177\\r\\n', 'output': ['Anton']}, {'input': '-100 -100 10 200\\r\\n0 1\\r\\n1 0\\r\\n1 1\\r\\n31 41\\r\\n3 4\\r\\n5 2\\r\\n1 2\\r\\n3 3\\r\\n9 8\\r\\n10 2\\r\\n', 'output': ['Anton']}, {'input': '-140 -140 2 200\\r\\n1 0\\r\\n0 1\\r\\n', 'output': ['Dasha']}, {'input': '-130 -130 20 200\\r\\n0 1\\r\\n1 0\\r\\n1 1\\r\\n31 41\\r\\n3 4\\r\\n5 2\\r\\n1 2\\r\\n3 3\\r\\n9 8\\r\\n10 2\\r\\n0 2\\r\\n0 3\\r\\n0 4\\r\\n0 5\\r\\n0 6\\r\\n2 0\\r\\n3 0\\r\\n4 0\\r\\n5 0\\r\\n6 0\\r\\n', 'output': ['Anton']}, {'input': '-133 -133 20 200\\r\\n1 0\\r\\n0 1\\r\\n1 1\\r\\n2 0\\r\\n0 2\\r\\n2 1\\r\\n1 2\\r\\n3 0\\r\\n0 3\\r\\n3 1\\r\\n3 2\\r\\n3 3\\r\\n2 2\\r\\n2 3\\r\\n1 3\\r\\n4 0\\r\\n0 4\\r\\n4 1\\r\\n1 4\\r\\n2 4\\r\\n', 'output': ['Anton']}, {'input': '-12 -34 5 200\\r\\n1 0\\r\\n2 0\\r\\n3 1\\r\\n10 3\\r\\n11 4\\r\\n', 'output': ['Dasha']}]", "source_code": "import java.util.*;\n\npublic class dot\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner in=new Scanner(System.in);\n\t\tint x=in.nextInt(),y=in.nextInt(),d=in.nextInt(),n=in.nextInt(),p,q,c,a[][]=new int[n+1][2],turn;\n\t\tfor(p=1;p<=n;p++)\n\t\t{\n\t\t\ta[p][0]=in.nextInt();\n\t\t\ta[p][1]=in.nextInt();\n\t\t}\n\t\tturn=-1;\n\t\tfor(p=1;p<=n;p++)\n\t\t{\n\t\t\tfor(c=1;c<=n;c++)\n\t\t\t{\n\t\t\t\tif(turn==-1)\n\t\t\t\t{\n\t\t\t\t\tif(c%2==1)\n\t\t\t\t\t{\n\t\t\t\t\t\tq=x+a[p][0];\n\t\t\t\t\t\tx=y+a[p][1];\n\t\t\t\t\t\ty=q-a[p][1];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tq=x+a[p][0];\n\t\t\t\t\t\tx=q-a[p][0];\n\t\t\t\t\t\ty=y+a[p][1];\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif((x*x+y*y)>d*d)\n\t\t\t\t\t{\n\t\t\t\t\t\tturn=2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(turn==2)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(c%2==1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tq=y+a[p][1];\n\t\t\t\t\t\t\ty=x+a[p][0];\n\t\t\t\t\t\t\tx=q-a[p][0];\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tq=y+a[p][1];\n\t\t\t\t\t\t\ty=q-a[p][1];\n\t\t\t\t\t\t\tx=x+a[p][0];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif((x*x+y*y)>d*d)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tturn=1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(c%2==1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tq=x+a[p][0];\n\t\t\t\t\t\t\tx=y+a[p][1];\n\t\t\t\t\t\t\ty=q-a[p][1];\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tq=x+a[p][0];\n\t\t\t\t\t\t\tx=q-a[p][0];\n\t\t\t\t\t\t\ty=y+a[p][1];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif((x*x+y*y)>d*d)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tturn=2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(turn!=1)\n\t\t\t{\n\t\t\t\tp=n;\n\t\t\t}\n\t\t\tif(turn==-1)\n\t\t\t{\n\t\t\t\tturn=1;\n\t\t\t}\n\t\t}\n\t\tif(turn==1)\n\t\t{\n\t\t\tSystem."}
{"src_uid": "6220f4058f9325dfb211fb1dd86e9464", "id": 119, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2700, "testcases": "[{'input': '8\\r\\n1 0 0\\r\\n1 2 0\\r\\n1 2 2\\r\\n2 1 0\\r\\n1 0 2\\r\\n2 1 1\\r\\n2 2 1\\r\\n2 20 -1\\r\\n', 'output': ['YES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 0 0\\r\\n1 5 0\\r\\n1 0 5\\r\\n2 1 1\\r\\n2 10 10\\r\\n1 2 10\\r\\n2 1 1\\r\\n', 'output': ['YES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '5\\r\\n1 2 -2\\r\\n1 -2 2\\r\\n1 1 5\\r\\n2 3 -1\\r\\n2 3 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\n']}, {'input': '5\\r\\n1 -1 0\\r\\n1 1 0\\r\\n1 0 2\\r\\n2 0 1\\r\\n2 0 3\\r\\n', 'output': ['YES\\r\\nNO\\r\\n']}, {'input': '6\\r\\n1 -2 0\\r\\n1 2 0\\r\\n1 0 2\\r\\n2 4 0\\r\\n2 1 0\\r\\n2 2 0\\r\\n', 'output': ['NO\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '11\\r\\n1 0 -1\\r\\n1 0 1\\r\\n1 1 -1\\r\\n1 -1 -5\\r\\n1 0 5\\r\\n2 5 1\\r\\n2 5 0\\r\\n2 5 -1\\r\\n2 0 0\\r\\n2 0 10\\r\\n2 0 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '30\\r\\n1 -37 889\\r\\n1 771 -764\\r\\n1 -119 938\\r\\n1 599 868\\r\\n1 56 161\\r\\n1 -67 86\\r\\n2 -692 99\\r\\n2 -995 158\\r\\n2 410 116\\r\\n1 -49 -864\\r\\n2 30 -580\\r\\n1 -930 454\\r\\n1 -706 301\\r\\n2 547 -606\\r\\n2 -252 -55\\r\\n2 662 152\\r\\n2 -621 -920\\r\\n1 -128 -595\\r\\n1 -401 -265\\r\\n1 434 388\\r\\n2 299 173\\r\\n1 104 -298\\r\\n1 -693 557\\r\\n2 840 -179\\r\\n2 382 -8\\r\\n1 461 618\\r\\n1 -928 628\\r\\n2 193 -972\\r\\n2 218 945\\r\\n2 490 571\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '30\\r\\n1 -619 -234\\r\\n1 -140 -846\\r\\n1 762 -792\\r\\n2 153 29\\r\\n1 -353 627\\r\\n2 -544 -418\\r\\n2 -922 -965\\r\\n1 -620 -692\\r\\n1 -34 295\\r\\n2 -326 -604\\r\\n2 -906 -867\\r\\n2 57 -690\\r\\n1 -87 -822\\r\\n2 -569 739\\r\\n2 -92 -927\\r\\n2 279 806\\r\\n1 -364 19\\r\\n2 -214 -629\\r\\n2 -283 662\\r\\n2 -324 650\\r\\n1 92 -511\\r\\n2 654 -597\\r\\n1 -87 747\\r\\n2 795 46\\r\\n2 870 -157\\r\\n2 -11 520\\r\\n1 -162 -686\\r\\n2 290 -660\\r\\n2 -660 780\\r\\n2 946 910\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '30\\r\\n1 -702 -823\\r\\n1 -330 -896\\r\\n1 -564 90\\r\\n1 559 818\\r\\n2 404 716\\r\\n1 -900 -379\\r\\n2 866 -218\\r\\n2 444 615\\r\\n2 -782 -887\\r\\n2 584 -919\\r\\n2 891 775\\r\\n1 117 887\\r\\n2 598 162\\r\\n2 759 -925\\r\\n2 713 -507\\r\\n1 -329 120\\r\\n2 546 185\\r\\n2 399 500\\r\\n1 -611 763\\r\\n1 -956 187\\r\\n2 82 -26\\r\\n2 -877 -906\\r\\n1 293 -637\\r\\n2 -685 -275\\r\\n2 -725 -927\\r\\n1 -627 777\\r\\n1 -609 -563\\r\\n2 402 54\\r\\n1 -106 -908\\r\\n2 175 808\\r\\n', 'output': ['YES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '30\\r\\n1 -64 -994\\r\\n1 -692 366\\r\\n1 -72 847\\r\\n2 -963 -251\\r\\n1 -651 -994\\r\\n1 -523 -861\\r\\n2 553 -129\\r\\n2 17 785\\r\\n2 -584 -880\\r\\n1 105 657\\r\\n1 649 98\\r\\n2 -572 -492\\r\\n1 -38 -481\\r\\n1 540 463\\r\\n1 -468 -540\\r\\n1 -730 100\\r\\n1 606 -119\\r\\n1 -254 -380\\r\\n1 169 280\\r\\n1 319 62\\r\\n1 452 -556\\r\\n1 -653 887\\r\\n1 407 -786\\r\\n2 -632 181\\r\\n1 925 -967\\r\\n2 996 -709\\r\\n1 568 517\\r\\n2 -478 76\\r\\n1 156 621\\r\\n2 -592 899\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '30\\r\\n1 836 -283\\r\\n1 299 629\\r\\n1 434 -481\\r\\n1 -500 -368\\r\\n2 -105 -216\\r\\n2 -617 443\\r\\n2 -579 811\\r\\n1 411 -242\\r\\n1 -652 41\\r\\n1 962 -483\\r\\n1 -732 579\\r\\n2 554 -147\\r\\n1 39 967\\r\\n1 917 -199\\r\\n2 686 397\\r\\n1 444 780\\r\\n1 278 462\\r\\n1 729 -18\\r\\n1 252 -864\\r\\n1 884 -952\\r\\n1 272 689\\r\\n2 366 -389\\r\\n1 443 924\\r\\n1 791 -249\\r\\n2 692 74\\r\\n2 -412 550\\r\\n2 506 -472\\r\\n2 -626 474\\r\\n1 -895 -42\\r\\n2 -390 -971\\r\\n', 'output': ['YES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '12\\r\\n1 0 0\\r\\n1 10 0\\r\\n1 8 1\\r\\n2 11 0\\r\\n1 2 0\\r\\n2 7 0\\r\\n2 9 0\\r\\n2 1 0\\r\\n1 1 1\\r\\n2 10 0\\r\\n2 9 0\\r\\n2 11 0\\r\\n', 'output': ['NO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 1 0\\r\\n1 3 0\\r\\n1 5000 5000\\r\\n2 3 0\\r\\n2 2 0\\r\\n2 4 0\\r\\n2 -1 0\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '4\\r\\n1 1 0\\r\\n1 3 0\\r\\n1 2 2\\r\\n2 4 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n1 1 0\\r\\n1 3 0\\r\\n1 0 8\\r\\n2 4 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '11\\r\\n1 0 -1\\r\\n1 0 1\\r\\n1 -1 -5\\r\\n1 6 4\\r\\n1 -8 8\\r\\n2 6 -1\\r\\n2 6 1\\r\\n2 1 0\\r\\n2 1 -1\\r\\n2 1 1\\r\\n2 6 0\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '11\\r\\n1 5 4\\r\\n1 5 6\\r\\n1 4 0\\r\\n1 11 9\\r\\n1 -3 13\\r\\n2 11 4\\r\\n2 11 6\\r\\n2 6 5\\r\\n2 6 4\\r\\n2 6 6\\r\\n2 11 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -2 -1000000\\r\\n1 -1 -1000000\\r\\n1 -1 -999999\\r\\n1 1 1000000\\r\\n1 -231100 1000000\\r\\n2 0 0\\r\\n2 1 999999\\r\\n', 'output': ['YES\\r\\nNO\\r\\n']}, {'input': '10\\r\\n1 -1000000 -1000000\\r\\n1 -999999 -1000000\\r\\n1 999999 1000000\\r\\n1 1000000 1000000\\r\\n2 0 0\\r\\n2 1000000 999999\\r\\n2 999999 1000000\\r\\n2 999999 999999\\r\\n2 999999 999998\\r\\n2 999999 999997\\r\\n', 'output': ['YES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '9\\r\\n1 -2 -4\\r\\n1 2 4\\r\\n1 -3 3\\r\\n2 -1 -2\\r\\n2 -4 -8\\r\\n2 -3 -6\\r\\n2 1 2\\r\\n2 4 8\\r\\n2 3 6\\r\\n', 'output': ['YES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '16\\r\\n1 -10000 0\\r\\n1 10000 0\\r\\n1 0 -1\\r\\n2 50000 0\\r\\n2 -50000 0\\r\\n2 49000 0\\r\\n2 -49000 0\\r\\n2 27000 0\\r\\n2 -27000 0\\r\\n1 0 1\\r\\n2 50000 0\\r\\n2 -50000 0\\r\\n2 49000 0\\r\\n2 -49000 0\\r\\n2 27000 0\\r\\n2 -27000 0\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -7000 -9000\\r\\n1 7000 9000\\r\\n1 7000 -7000\\r\\n2 21 27\\r\\n2 -21 -27\\r\\n2 7007 9009\\r\\n2 -7007 -9009\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -7000 -9000\\r\\n1 7000 9000\\r\\n1 -7000 7000\\r\\n2 21 27\\r\\n2 -21 -27\\r\\n2 7007 9009\\r\\n2 -7007 -9009\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -9000 7000\\r\\n1 9000 -7000\\r\\n1 7000 7000\\r\\n2 -27 21\\r\\n2 27 -21\\r\\n2 -9009 7007\\r\\n2 9009 -7007\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -9000 7000\\r\\n1 9000 -7000\\r\\n1 -7000 -7000\\r\\n2 -27 21\\r\\n2 27 -21\\r\\n2 -9009 7007\\r\\n2 9009 -7007\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 7 6\\r\\n1 0 5\\r\\n1 0 4\\r\\n1 2 5\\r\\n1 8 0\\r\\n1 6 4\\r\\n1 1 1\\r\\n1 8 4\\r\\n2 1 1\\r\\n2 2 7\\r\\n1 2 3\\r\\n1 4 2\\r\\n2 4 3\\r\\n1 3 2\\r\\n1 7 2\\r\\n1 1 0\\r\\n2 3 5\\r\\n1 6 5\\r\\n2 5 7\\r\\n2 1 1\\r\\n2 3 2\\r\\n1 6 2\\r\\n2 6 0\\r\\n2 8 8\\r\\n1 4 6\\r\\n1 3 5\\r\\n2 3 8\\r\\n2 0 5\\r\\n2 1 6\\r\\n1 8 3\\r\\n1 2 2\\r\\n1 8 2\\r\\n1 6 8\\r\\n1 1 3\\r\\n1 3 3\\r\\n1 5 5\\r\\n2 2 0\\r\\n2 6 7\\r\\n2 1 6\\r\\n2 6 4\\r\\n', 'output': ['YES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 3 8\\r\\n1 6 7\\r\\n1 7 7\\r\\n2 5 5\\r\\n1 4 0\\r\\n1 0 0\\r\\n2 7 3\\r\\n1 0 2\\r\\n2 8 2\\r\\n2 5 1\\r\\n2 1 2\\r\\n2 1 5\\r\\n1 1 3\\r\\n1 7 1\\r\\n1 8 7\\r\\n1 2 4\\r\\n1 2 8\\r\\n2 8 5\\r\\n2 8 6\\r\\n1 2 1\\r\\n1 5 6\\r\\n1 2 3\\r\\n2 4 3\\r\\n1 8 3\\r\\n1 1 5\\r\\n2 2 2\\r\\n2 8 5\\r\\n1 0 7\\r\\n1 7 2\\r\\n1 5 5\\r\\n1 8 4\\r\\n1 4 1\\r\\n2 3 2\\r\\n2 6 0\\r\\n2 8 7\\r\\n2 5 7\\r\\n1 3 0\\r\\n2 1 0\\r\\n2 0 7\\r\\n2 5 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 2 8\\r\\n1 3 8\\r\\n1 7 4\\r\\n1 4 5\\r\\n1 4 1\\r\\n2 6 6\\r\\n2 5 8\\r\\n1 5 4\\r\\n1 7 8\\r\\n2 1 3\\r\\n2 6 1\\r\\n2 8 2\\r\\n2 6 8\\r\\n1 4 3\\r\\n2 2 8\\r\\n2 0 6\\r\\n1 0 3\\r\\n2 0 3\\r\\n1 6 6\\r\\n1 5 8\\r\\n1 5 5\\r\\n1 1 2\\r\\n2 6 7\\r\\n1 4 8\\r\\n2 1 2\\r\\n2 2 7\\r\\n2 2 3\\r\\n1 8 4\\r\\n2 8 4\\r\\n2 6 5\\r\\n1 8 2\\r\\n2 7 2\\r\\n2 3 5\\r\\n1 4 0\\r\\n2 6 2\\r\\n2 3 7\\r\\n1 4 6\\r\\n1 8 6\\r\\n1 0 5\\r\\n2 2 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 4 0\\r\\n1 7 1\\r\\n1 8 0\\r\\n1 1 2\\r\\n1 1 8\\r\\n1 6 1\\r\\n2 5 2\\r\\n1 7 7\\r\\n1 6 5\\r\\n2 8 1\\r\\n2 8 7\\r\\n1 7 8\\r\\n2 3 5\\r\\n2 6 6\\r\\n1 4 2\\r\\n1 8 3\\r\\n2 6 8\\r\\n1 4 8\\r\\n2 4 6\\r\\n2 1 7\\r\\n1 4 3\\r\\n2 0 8\\r\\n1 5 2\\r\\n2 5 5\\r\\n2 1 6\\r\\n1 5 5\\r\\n1 1 5\\r\\n2 3 3\\r\\n2 0 1\\r\\n1 1 0\\r\\n2 1 4\\r\\n2 3 6\\r\\n1 4 6\\r\\n2 7 6\\r\\n1 4 4\\r\\n1 7 6\\r\\n1 6 8\\r\\n2 1 1\\r\\n1 0 1\\r\\n2 0 2\\r\\n', 'output': ['YES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 3 0\\r\\n1 1 4\\r\\n1 2 7\\r\\n2 4 0\\r\\n1 0 5\\r\\n1 7 5\\r\\n2 6 3\\r\\n1 0 7\\r\\n2 5 7\\r\\n1 1 0\\r\\n2 0 6\\r\\n1 6 8\\r\\n1 3 5\\r\\n1 8 5\\r\\n1 0 6\\r\\n2 7 0\\r\\n1 4 6\\r\\n1 5 2\\r\\n2 6 2\\r\\n1 7 0\\r\\n2 6 3\\r\\n1 3 7\\r\\n2 4 2\\r\\n2 1 4\\r\\n1 1 3\\r\\n1 5 0\\r\\n2 0 7\\r\\n2 6 8\\r\\n1 4 0\\r\\n2 5 0\\r\\n2 3 2\\r\\n2 6 7\\r\\n1 7 2\\r\\n1 0 3\\r\\n1 6 6\\r\\n2 4 0\\r\\n2 2 4\\r\\n1 6 5\\r\\n2 0 8\\r\\n2 0 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 0 3\\r\\n1 6 0\\r\\n1 8 7\\r\\n2 2 6\\r\\n2 7 2\\r\\n2 7 5\\r\\n1 4 7\\r\\n1 2 3\\r\\n2 2 7\\r\\n2 3 1\\r\\n1 3 5\\r\\n1 8 5\\r\\n2 6 8\\r\\n1 2 8\\r\\n2 4 6\\r\\n1 7 3\\r\\n1 3 3\\r\\n2 2 4\\r\\n1 5 0\\r\\n1 5 6\\r\\n1 1 7\\r\\n2 3 3\\r\\n1 8 6\\r\\n2 7 4\\r\\n1 7 8\\r\\n1 5 8\\r\\n2 3 8\\r\\n1 6 6\\r\\n2 8 5\\r\\n1 5 1\\r\\n2 4 2\\r\\n1 7 7\\r\\n2 4 8\\r\\n1 6 1\\r\\n1 1 5\\r\\n2 1 8\\r\\n2 4 3\\r\\n1 5 5\\r\\n1 4 0\\r\\n2 0 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 5 2\\r\\n1 5 6\\r\\n1 2 1\\r\\n2 7 2\\r\\n2 6 2\\r\\n2 0 8\\r\\n2 0 6\\r\\n1 6 8\\r\\n1 2 0\\r\\n1 0 5\\r\\n2 3 0\\r\\n1 3 8\\r\\n2 8 6\\r\\n1 0 3\\r\\n1 8 8\\r\\n2 1 1\\r\\n1 1 4\\r\\n1 1 3\\r\\n2 0 0\\r\\n2 5 6\\r\\n1 0 0\\r\\n2 0 0\\r\\n1 2 7\\r\\n2 0 0\\r\\n2 3 6\\r\\n1 3 3\\r\\n1 3 2\\r\\n1 5 3\\r\\n1 7 8\\r\\n1 7 4\\r\\n1 8 7\\r\\n1 7 3\\r\\n2 0 3\\r\\n1 4 4\\r\\n2 5 0\\r\\n1 6 6\\r\\n1 8 0\\r\\n2 6 2\\r\\n2 4 8\\r\\n2 7 2\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 1 4\\r\\n1 1 5\\r\\n1 3 5\\r\\n2 8 2\\r\\n2 5 2\\r\\n1 7 3\\r\\n1 8 1\\r\\n2 6 5\\r\\n1 4 3\\r\\n1 2 4\\r\\n1 2 3\\r\\n2 8 3\\r\\n2 3 5\\r\\n2 2 0\\r\\n1 6 7\\r\\n2 2 8\\r\\n1 3 0\\r\\n2 5 1\\r\\n2 2 1\\r\\n1 4 5\\r\\n2 1 6\\r\\n1 8 5\\r\\n2 7 4\\r\\n2 2 0\\r\\n1 3 2\\r\\n1 2 2\\r\\n1 8 3\\r\\n2 3 4\\r\\n1 7 6\\r\\n1 3 7\\r\\n1 5 3\\r\\n1 2 0\\r\\n2 5 7\\r\\n2 0 7\\r\\n2 3 2\\r\\n2 1 0\\r\\n1 6 0\\r\\n2 8 5\\r\\n1 3 4\\r\\n2 0 3\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 8 7\\r\\n1 0 6\\r\\n1 5 0\\r\\n2 6 7\\r\\n2 6 8\\r\\n1 3 5\\r\\n1 6 7\\r\\n1 0 0\\r\\n2 1 7\\r\\n1 2 3\\r\\n2 4 3\\r\\n2 5 5\\r\\n1 4 7\\r\\n2 2 0\\r\\n1 2 4\\r\\n1 4 2\\r\\n1 0 8\\r\\n2 0 3\\r\\n1 8 8\\r\\n2 8 1\\r\\n2 8 6\\r\\n2 4 8\\r\\n1 4 0\\r\\n1 6 6\\r\\n2 0 0\\r\\n1 6 2\\r\\n2 5 1\\r\\n1 3 0\\r\\n1 5 6\\r\\n1 8 1\\r\\n1 3 4\\r\\n1 1 3\\r\\n1 5 1\\r\\n1 5 7\\r\\n1 6 8\\r\\n1 1 5\\r\\n1 1 1\\r\\n1 6 1\\r\\n1 1 4\\r\\n2 7 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 2 8\\r\\n1 4 0\\r\\n1 0 6\\r\\n2 3 8\\r\\n2 4 5\\r\\n1 5 0\\r\\n2 7 6\\r\\n2 6 1\\r\\n2 1 7\\r\\n1 1 2\\r\\n1 5 4\\r\\n1 7 3\\r\\n2 6 4\\r\\n1 3 0\\r\\n2 2 8\\r\\n1 8 2\\r\\n1 8 8\\r\\n1 7 8\\r\\n2 2 5\\r\\n2 2 3\\r\\n2 4 6\\r\\n2 0 2\\r\\n2 6 7\\r\\n2 2 8\\r\\n1 8 3\\r\\n2 5 5\\r\\n1 4 8\\r\\n1 7 1\\r\\n2 7 3\\r\\n2 4 5\\r\\n2 1 1\\r\\n2 4 2\\r\\n1 1 1\\r\\n2 4 0\\r\\n1 2 4\\r\\n2 7 0\\r\\n1 4 1\\r\\n1 7 5\\r\\n1 6 6\\r\\n2 7 8\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 6 3\\r\\n1 5 3\\r\\n1 3 4\\r\\n1 2 3\\r\\n2 2 5\\r\\n1 6 1\\r\\n2 3 7\\r\\n1 0 0\\r\\n1 8 7\\r\\n1 3 8\\r\\n1 0 8\\r\\n1 3 5\\r\\n1 4 5\\r\\n1 0 5\\r\\n2 8 1\\r\\n2 4 7\\r\\n2 3 2\\r\\n1 6 4\\r\\n2 2 3\\r\\n2 6 3\\r\\n1 0 2\\r\\n2 1 2\\r\\n2 6 2\\r\\n1 5 7\\r\\n2 7 0\\r\\n1 4 8\\r\\n1 4 6\\r\\n2 8 7\\r\\n2 0 7\\r\\n1 7 8\\r\\n2 0 3\\r\\n1 5 5\\r\\n1 6 2\\r\\n2 4 5\\r\\n1 2 5\\r\\n2 3 3\\r\\n2 1 1\\r\\n1 8 3\\r\\n1 6 5\\r\\n2 5 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 6 5\\r\\n1 4 8\\r\\n1 5 7\\r\\n1 3 1\\r\\n2 4 2\\r\\n1 4 3\\r\\n1 0 7\\r\\n2 4 6\\r\\n2 4 2\\r\\n1 0 3\\r\\n2 1 5\\r\\n2 5 6\\r\\n1 8 8\\r\\n1 1 7\\r\\n1 3 3\\r\\n2 6 7\\r\\n1 7 4\\r\\n1 0 2\\r\\n1 8 4\\r\\n2 4 5\\r\\n2 0 7\\r\\n1 4 1\\r\\n1 4 4\\r\\n1 5 3\\r\\n1 1 0\\r\\n1 4 5\\r\\n2 1 4\\r\\n1 0 6\\r\\n2 1 0\\r\\n1 5 5\\r\\n2 5 6\\r\\n2 8 2\\r\\n2 1 7\\r\\n2 8 1\\r\\n2 0 5\\r\\n1 0 4\\r\\n1 6 6\\r\\n2 1 1\\r\\n1 8 0\\r\\n2 6 3\\r\\n', 'output': ['NO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 1 7\\r\\n1 3 3\\r\\n1 6 5\\r\\n1 7 3\\r\\n1 2 8\\r\\n1 3 0\\r\\n2 0 0\\r\\n1 7 7\\r\\n2 6 8\\r\\n2 6 0\\r\\n2 4 7\\r\\n1 7 8\\r\\n2 0 7\\r\\n2 0 5\\r\\n1 6 2\\r\\n1 7 1\\r\\n1 1 1\\r\\n2 4 8\\r\\n2 2 1\\r\\n2 7 0\\r\\n2 5 4\\r\\n1 2 4\\r\\n2 1 3\\r\\n2 0 5\\r\\n2 5 5\\r\\n2 1 4\\r\\n2 5 5\\r\\n1 2 6\\r\\n1 4 4\\r\\n2 0 8\\r\\n1 0 6\\r\\n2 0 5\\r\\n2 4 6\\r\\n2 8 1\\r\\n2 2 0\\r\\n2 3 3\\r\\n1 0 4\\r\\n1 3 7\\r\\n2 3 2\\r\\n2 3 7\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 2 7\\r\\n1 6 5\\r\\n1 2 0\\r\\n2 4 5\\r\\n1 1 0\\r\\n2 3 4\\r\\n1 7 3\\r\\n2 8 1\\r\\n2 0 0\\r\\n2 2 0\\r\\n1 7 4\\r\\n1 6 3\\r\\n2 8 1\\r\\n2 6 0\\r\\n1 4 7\\r\\n2 4 2\\r\\n1 4 5\\r\\n2 3 7\\r\\n2 6 8\\r\\n2 2 6\\r\\n2 7 4\\r\\n1 0 6\\r\\n2 1 7\\r\\n1 4 4\\r\\n2 2 3\\r\\n1 1 3\\r\\n1 8 5\\r\\n1 0 5\\r\\n1 1 1\\r\\n1 4 3\\r\\n2 5 3\\r\\n1 3 6\\r\\n1 7 0\\r\\n2 5 6\\r\\n2 5 6\\r\\n1 0 7\\r\\n2 7 0\\r\\n2 6 4\\r\\n1 3 7\\r\\n2 2 2\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 4 4\\r\\n1 2 6\\r\\n1 8 2\\r\\n2 4 6\\r\\n1 5 4\\r\\n2 5 8\\r\\n2 6 7\\r\\n2 4 8\\r\\n1 1 0\\r\\n1 3 1\\r\\n1 0 3\\r\\n1 8 1\\r\\n1 3 0\\r\\n2 7 4\\r\\n1 2 0\\r\\n1 8 5\\r\\n1 6 2\\r\\n2 2 0\\r\\n1 0 4\\r\\n1 1 1\\r\\n1 4 5\\r\\n2 8 3\\r\\n2 1 0\\r\\n2 5 5\\r\\n1 3 4\\r\\n2 0 7\\r\\n1 4 3\\r\\n1 7 0\\r\\n2 3 8\\r\\n1 0 1\\r\\n1 0 7\\r\\n2 4 1\\r\\n1 0 6\\r\\n2 1 2\\r\\n1 5 7\\r\\n2 7 2\\r\\n2 7 3\\r\\n1 3 6\\r\\n2 7 3\\r\\n2 7 0\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 0 8\\r\\n1 3 5\\r\\n1 0 2\\r\\n1 8 0\\r\\n1 5 3\\r\\n1 5 2\\r\\n2 8 2\\r\\n2 7 6\\r\\n1 6 1\\r\\n2 2 7\\r\\n2 6 5\\r\\n1 3 7\\r\\n2 7 8\\r\\n1 2 4\\r\\n1 4 2\\r\\n2 5 7\\r\\n2 0 6\\r\\n1 3 1\\r\\n2 2 3\\r\\n1 5 7\\r\\n2 2 8\\r\\n1 7 1\\r\\n1 3 0\\r\\n2 5 5\\r\\n1 7 4\\r\\n2 5 5\\r\\n1 2 0\\r\\n2 4 3\\r\\n2 8 1\\r\\n2 8 0\\r\\n1 2 6\\r\\n1 7 5\\r\\n2 4 8\\r\\n1 2 3\\r\\n2 6 6\\r\\n1 7 8\\r\\n2 7 5\\r\\n2 7 4\\r\\n1 8 1\\r\\n2 5 6\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 1 3\\r\\n1 7 2\\r\\n1 6 2\\r\\n2 0 8\\r\\n2 3 8\\r\\n2 0 3\\r\\n1 5 8\\r\\n2 7 1\\r\\n1 8 1\\r\\n2 8 7\\r\\n1 5 5\\r\\n2 2 4\\r\\n2 3 3\\r\\n2 2 4\\r\\n1 0 1\\r\\n1 2 0\\r\\n1 7 4\\r\\n2 7 4\\r\\n2 5 5\\r\\n1 1 1\\r\\n2 6 4\\r\\n2 1 7\\r\\n2 5 0\\r\\n1 8 0\\r\\n2 6 2\\r\\n1 7 1\\r\\n2 8 6\\r\\n1 8 7\\r\\n2 2 5\\r\\n1 7 3\\r\\n1 5 6\\r\\n1 4 0\\r\\n2 3 8\\r\\n2 8 6\\r\\n1 7 0\\r\\n2 3 5\\r\\n2 6 1\\r\\n1 2 6\\r\\n1 1 2\\r\\n2 7 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 4 4\\r\\n1 2 6\\r\\n1 7 2\\r\\n2 1 4\\r\\n2 0 2\\r\\n1 5 4\\r\\n2 5 1\\r\\n1 0 8\\r\\n1 1 7\\r\\n2 2 0\\r\\n1 8 4\\r\\n2 6 5\\r\\n2 8 0\\r\\n1 6 5\\r\\n2 8 7\\r\\n2 0 0\\r\\n2 4 0\\r\\n2 7 2\\r\\n2 6 8\\r\\n1 7 8\\r\\n2 8 8\\r\\n2 4 7\\r\\n1 7 1\\r\\n2 8 8\\r\\n1 5 8\\r\\n1 3 6\\r\\n1 4 6\\r\\n1 3 5\\r\\n2 6 1\\r\\n2 1 3\\r\\n2 8 4\\r\\n2 8 5\\r\\n2 1 3\\r\\n2 7 1\\r\\n2 5 8\\r\\n1 8 2\\r\\n2 6 1\\r\\n1 7 4\\r\\n1 8 5\\r\\n2 6 4\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 2 1\\r\\n1 4 7\\r\\n1 1 1\\r\\n1 2 4\\r\\n2 4 4\\r\\n1 4 4\\r\\n2 0 6\\r\\n2 7 6\\r\\n1 4 0\\r\\n2 6 5\\r\\n2 5 2\\r\\n1 6 1\\r\\n2 7 0\\r\\n1 6 2\\r\\n2 3 2\\r\\n1 0 6\\r\\n2 7 0\\r\\n1 8 6\\r\\n2 1 3\\r\\n2 0 1\\r\\n1 2 5\\r\\n1 0 2\\r\\n2 4 2\\r\\n2 6 8\\r\\n2 2 0\\r\\n2 5 7\\r\\n2 6 0\\r\\n1 2 2\\r\\n2 0 3\\r\\n1 7 4\\r\\n2 7 3\\r\\n1 4 1\\r\\n2 2 6\\r\\n2 8 2\\r\\n1 8 3\\r\\n1 8 7\\r\\n1 0 3\\r\\n1 7 0\\r\\n2 2 1\\r\\n2 6 4\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 3 7\\r\\n1 5 8\\r\\n1 4 4\\r\\n1 8 1\\r\\n1 4 6\\r\\n1 6 6\\r\\n2 5 0\\r\\n2 3 4\\r\\n1 5 3\\r\\n2 0 7\\r\\n2 3 1\\r\\n1 5 4\\r\\n1 3 4\\r\\n2 3 4\\r\\n2 8 2\\r\\n1 0 1\\r\\n1 0 8\\r\\n2 3 8\\r\\n1 0 4\\r\\n2 4 6\\r\\n1 7 3\\r\\n2 4 0\\r\\n1 2 3\\r\\n2 8 1\\r\\n2 8 4\\r\\n1 7 0\\r\\n2 2 6\\r\\n2 2 2\\r\\n1 2 2\\r\\n1 6 5\\r\\n1 7 1\\r\\n2 5 1\\r\\n1 2 4\\r\\n2 3 2\\r\\n1 8 4\\r\\n1 7 4\\r\\n1 1 2\\r\\n1 3 2\\r\\n2 7 3\\r\\n2 4 4\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 1 0\\r\\n1 0 7\\r\\n1 8 4\\r\\n2 1 6\\r\\n2 1 2\\r\\n1 0 0\\r\\n1 1 1\\r\\n2 5 2\\r\\n1 8 5\\r\\n1 0 6\\r\\n2 6 8\\r\\n1 4 2\\r\\n1 8 3\\r\\n2 2 3\\r\\n1 6 3\\r\\n2 6 0\\r\\n1 5 3\\r\\n2 0 5\\r\\n1 3 4\\r\\n2 4 4\\r\\n1 8 6\\r\\n1 1 2\\r\\n1 5 7\\r\\n1 5 1\\r\\n1 3 8\\r\\n2 7 0\\r\\n1 7 2\\r\\n1 3 3\\r\\n2 6 5\\r\\n2 5 0\\r\\n2 2 4\\r\\n2 5 5\\r\\n2 4 6\\r\\n1 6 1\\r\\n1 5 2\\r\\n2 7 5\\r\\n1 8 7\\r\\n1 1 6\\r\\n1 4 8\\r\\n2 8 5\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 8 1\\r\\n1 8 6\\r\\n1 1 1\\r\\n2 5 4\\r\\n2 7 8\\r\\n1 6 2\\r\\n1 7 4\\r\\n1 4 4\\r\\n2 3 7\\r\\n1 6 3\\r\\n2 0 1\\r\\n1 8 0\\r\\n2 0 3\\r\\n1 6 0\\r\\n1 3 4\\r\\n1 1 8\\r\\n1 3 3\\r\\n2 3 1\\r\\n2 4 0\\r\\n1 4 3\\r\\n2 1 3\\r\\n2 5 4\\r\\n1 8 5\\r\\n2 1 0\\r\\n1 4 7\\r\\n2 5 3\\r\\n2 4 1\\r\\n1 4 0\\r\\n1 6 8\\r\\n1 5 1\\r\\n2 8 3\\r\\n2 5 7\\r\\n1 3 2\\r\\n1 7 5\\r\\n1 7 3\\r\\n1 0 8\\r\\n1 7 8\\r\\n2 7 3\\r\\n2 6 7\\r\\n2 4 2\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '50\\r\\n1 58 -49\\r\\n1 -77 -90\\r\\n1 32 -52\\r\\n1 -89 -31\\r\\n1 99 -34\\r\\n1 -3 -59\\r\\n2 65 93\\r\\n2 67 -51\\r\\n2 25 -47\\r\\n1 -72 86\\r\\n2 48 -45\\r\\n2 64 -70\\r\\n2 -96 -43\\r\\n2 87 -58\\r\\n2 3 21\\r\\n2 39 -57\\r\\n1 -58 49\\r\\n2 -1 87\\r\\n2 -63 19\\r\\n2 -27 90\\r\\n2 31 3\\r\\n1 55 41\\r\\n1 90 39\\r\\n1 -53 28\\r\\n2 49 -51\\r\\n2 6 42\\r\\n1 50 15\\r\\n2 21 -2\\r\\n2 -6 70\\r\\n1 -13 -61\\r\\n2 -60 -69\\r\\n1 -22 33\\r\\n1 -22 17\\r\\n2 30 -98\\r\\n2 -56 -48\\r\\n2 -84 -77\\r\\n2 49 56\\r\\n1 81 29\\r\\n1 26 29\\r\\n1 -14 20\\r\\n2 -37 83\\r\\n1 -91 96\\r\\n2 57 19\\r\\n1 94 54\\r\\n2 25 -30\\r\\n1 92 5\\r\\n2 -48 51\\r\\n2 81 23\\r\\n1 39 -47\\r\\n2 34 89\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '50\\r\\n1 7 -8\\r\\n1 -30 -28\\r\\n1 -8 2\\r\\n1 -28 -29\\r\\n2 -8 -21\\r\\n2 -23 19\\r\\n2 -23 18\\r\\n1 6 27\\r\\n2 -17 20\\r\\n1 9 -5\\r\\n2 -27 29\\r\\n1 -8 27\\r\\n2 13 12\\r\\n2 -29 13\\r\\n2 -30 8\\r\\n2 -30 -8\\r\\n1 -24 -21\\r\\n1 -14 -15\\r\\n2 -23 14\\r\\n2 -12 -13\\r\\n1 15 -24\\r\\n1 28 6\\r\\n2 -20 -21\\r\\n1 -8 -13\\r\\n1 -15 -15\\r\\n1 11 20\\r\\n2 24 -26\\r\\n1 -30 -11\\r\\n2 -17 18\\r\\n1 -17 6\\r\\n2 5 -9\\r\\n2 -29 8\\r\\n2 -29 1\\r\\n2 10 24\\r\\n2 29 27\\r\\n2 -12 21\\r\\n2 5 -28\\r\\n2 28 27\\r\\n2 -4 -4\\r\\n1 -24 29\\r\\n1 17 -1\\r\\n1 0 17\\r\\n1 -2 -1\\r\\n2 -7 -10\\r\\n1 5 -16\\r\\n2 -3 -26\\r\\n2 -7 17\\r\\n1 -27 -26\\r\\n1 -3 -30\\r\\n2 28 -15\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '10\\r\\n1 0 0\\r\\n1 6 0\\r\\n1 0 6\\r\\n2 0 0\\r\\n2 6 0\\r\\n2 0 6\\r\\n2 3 3\\r\\n2 3 0\\r\\n2 0 3\\r\\n2 2 2\\r\\n', 'output': ['YES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '50\\r\\n1 33 -21\\r\\n1 9 82\\r\\n1 -69 -54\\r\\n2 -3 84\\r\\n1 -9 -28\\r\\n2 -54 87\\r\\n2 26 -64\\r\\n2 8 52\\r\\n2 98 63\\r\\n2 -77 10\\r\\n2 -52 -46\\r\\n1 92 42\\r\\n2 -53 -69\\r\\n2 -48 44\\r\\n1 -52 90\\r\\n2 56 29\\r\\n2 -100 -13\\r\\n2 -23 1\\r\\n2 6 91\\r\\n2 53 -38\\r\\n1 48 -35\\r\\n2 19 -62\\r\\n2 -62 49\\r\\n1 59 78\\r\\n2 85 72\\r\\n2 28 76\\r\\n2 46 -91\\r\\n2 6 32\\r\\n2 -16 -59\\r\\n1 40 -53\\r\\n2 -6 87\\r\\n2 -79 -58\\r\\n2 -12 25\\r\\n2 73 49\\r\\n1 57 -42\\r\\n2 12 19\\r\\n1 -60 -5\\r\\n1 -40 -20\\r\\n1 90 35\\r\\n2 10 3\\r\\n2 63 -49\\r\\n1 50 10\\r\\n1 0 77\\r\\n1 92 24\\r\\n1 71 -7\\r\\n2 46 22\\r\\n1 19 81\\r\\n1 -3 -71\\r\\n2 -44 56\\r\\n2 92 34\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 3 3\\r\\n1 3 1\\r\\n1 0 1\\r\\n2 3 0\\r\\n2 6 5\\r\\n2 1 5\\r\\n2 8 3\\r\\n2 0 5\\r\\n2 3 4\\r\\n1 7 6\\r\\n1 1 0\\r\\n1 0 8\\r\\n1 3 7\\r\\n2 4 5\\r\\n2 2 5\\r\\n2 2 0\\r\\n1 7 4\\r\\n2 7 3\\r\\n1 5 0\\r\\n1 4 6\\r\\n1 1 5\\r\\n1 7 8\\r\\n2 7 5\\r\\n1 0 4\\r\\n2 3 8\\r\\n1 1 8\\r\\n1 0 5\\r\\n1 4 8\\r\\n2 8 5\\r\\n1 8 5\\r\\n2 3 6\\r\\n1 8 7\\r\\n2 4 3\\r\\n1 5 2\\r\\n2 2 8\\r\\n2 5 3\\r\\n2 4 0\\r\\n1 4 4\\r\\n1 6 5\\r\\n2 2 7\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\nclass Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tFastScanner scanner = new FastScanner();\n\t\tint q = scanner.nextInt();\n\t\tint[][] pts = new int [3][2];\n\t\tfor (int i = 0; i < 3; ++i)\n\t\t\tfor (int j = 0; j < 2; ++j)\n\t\t\t\tpts[i][j] = scanner.nextInt();\n\t\twhile (q-- > 0)\n\t\t{\n\t\t\tint x = scanner.nextInt(), y = scanner.nextInt();\n\t\t\tboolean inside = isPointInTriangle(pts, x, y);\n\t\t\tSystem.out.println(inside? \"YES\" : \"NO\");\n\t\t}\n\t}\n\t\n\t// Algorithm from https://en.wikipedia.org/wiki/Cyrus_Beck_algorithm\n\tstatic boolean isPointInTriangle(int[][] pts, int x, int y)\n\t{\n\t\tfor (int i = 0; i < 3; ++i)\n\t\t{\n\t\t\tint nx = pts[(i + 1) % 3][0] - pts[i][0], ny = pts[(i + 1) % 3][1] - pts[i][1];\n\t\t\tif ((ny * x - ny * pts[i][0] + nx * pts[i][1]) < 0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate static class FastScanner {\n\t\tprivate final InputStream in = System.in;\n\t\tprivate final byte[] buffer = new byte[1024];\n\t\tprivate int ptr = 0;\n\t\tprivate int buflen = 0;\n\t\tprivate boolean hasNextByte() {\n\t\t\t\tif (ptr < buflen) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t} else { // Buffer exhausted\n\t\t\t\t\t\tptr = 0;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tbuflen = in.read(buffer); // Read new bytes\n\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (buflen <= 0) { // No bytes read from input\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t}\n\t\tprivate int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n\t\tprivate static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n\t\tpublic boolean hasNext() { while(hasNextByte() &&!isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\n\t\tpublic String next() {\n\t\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\tint b = readByte();\n\t\t\t\twhile(isPrintableChar(b)) {\n\t\t\t\t\t\tsb.appendCodePoint(b);\n\t\t\t\t\t\tb = readByte();\n\t\t\t\t}\n\t\t\t\treturn sb.toString();\n\t\t}\n\t\tpublic long nextLong() {\n\t\t\t\tif (!hasNext()) throw new NoSuchElementException();\n\t\t\t\tlong n = 0;\n\t\t\t\tboolean minus = false;\n\t\t\t\tint b = readByte();\n\t\t\t\tif (b == '-') {\n\t\t\t\t\t\tminus = true;\n\t\t\t\t\t\tb = readByte();\n\t\t\t\t}\n\t\t\t\tif (b < '0' || '9' < b) {\n\t\t\t\t\t\tthrow new NumberFormatException();\n\t\t\t\t}\n\t\t\t\twhile(true){\n\t\t\t\t\t\tif ('0' <= b && b <= '9') {\n\t\t\t\t\t\t\t\tn *= 10;\n\t\t"}
{"src_uid": "6220f4058f9325dfb211fb1dd86e9464", "id": 119, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2700, "testcases": "[{'input': '8\\r\\n1 0 0\\r\\n1 2 0\\r\\n1 2 2\\r\\n2 1 0\\r\\n1 0 2\\r\\n2 1 1\\r\\n2 2 1\\r\\n2 20 -1\\r\\n', 'output': ['YES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 0 0\\r\\n1 5 0\\r\\n1 0 5\\r\\n2 1 1\\r\\n2 10 10\\r\\n1 2 10\\r\\n2 1 1\\r\\n', 'output': ['YES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '5\\r\\n1 2 -2\\r\\n1 -2 2\\r\\n1 1 5\\r\\n2 3 -1\\r\\n2 3 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\n']}, {'input': '5\\r\\n1 -1 0\\r\\n1 1 0\\r\\n1 0 2\\r\\n2 0 1\\r\\n2 0 3\\r\\n', 'output': ['YES\\r\\nNO\\r\\n']}, {'input': '6\\r\\n1 -2 0\\r\\n1 2 0\\r\\n1 0 2\\r\\n2 4 0\\r\\n2 1 0\\r\\n2 2 0\\r\\n', 'output': ['NO\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '11\\r\\n1 0 -1\\r\\n1 0 1\\r\\n1 1 -1\\r\\n1 -1 -5\\r\\n1 0 5\\r\\n2 5 1\\r\\n2 5 0\\r\\n2 5 -1\\r\\n2 0 0\\r\\n2 0 10\\r\\n2 0 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '30\\r\\n1 -37 889\\r\\n1 771 -764\\r\\n1 -119 938\\r\\n1 599 868\\r\\n1 56 161\\r\\n1 -67 86\\r\\n2 -692 99\\r\\n2 -995 158\\r\\n2 410 116\\r\\n1 -49 -864\\r\\n2 30 -580\\r\\n1 -930 454\\r\\n1 -706 301\\r\\n2 547 -606\\r\\n2 -252 -55\\r\\n2 662 152\\r\\n2 -621 -920\\r\\n1 -128 -595\\r\\n1 -401 -265\\r\\n1 434 388\\r\\n2 299 173\\r\\n1 104 -298\\r\\n1 -693 557\\r\\n2 840 -179\\r\\n2 382 -8\\r\\n1 461 618\\r\\n1 -928 628\\r\\n2 193 -972\\r\\n2 218 945\\r\\n2 490 571\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '30\\r\\n1 -619 -234\\r\\n1 -140 -846\\r\\n1 762 -792\\r\\n2 153 29\\r\\n1 -353 627\\r\\n2 -544 -418\\r\\n2 -922 -965\\r\\n1 -620 -692\\r\\n1 -34 295\\r\\n2 -326 -604\\r\\n2 -906 -867\\r\\n2 57 -690\\r\\n1 -87 -822\\r\\n2 -569 739\\r\\n2 -92 -927\\r\\n2 279 806\\r\\n1 -364 19\\r\\n2 -214 -629\\r\\n2 -283 662\\r\\n2 -324 650\\r\\n1 92 -511\\r\\n2 654 -597\\r\\n1 -87 747\\r\\n2 795 46\\r\\n2 870 -157\\r\\n2 -11 520\\r\\n1 -162 -686\\r\\n2 290 -660\\r\\n2 -660 780\\r\\n2 946 910\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '30\\r\\n1 -702 -823\\r\\n1 -330 -896\\r\\n1 -564 90\\r\\n1 559 818\\r\\n2 404 716\\r\\n1 -900 -379\\r\\n2 866 -218\\r\\n2 444 615\\r\\n2 -782 -887\\r\\n2 584 -919\\r\\n2 891 775\\r\\n1 117 887\\r\\n2 598 162\\r\\n2 759 -925\\r\\n2 713 -507\\r\\n1 -329 120\\r\\n2 546 185\\r\\n2 399 500\\r\\n1 -611 763\\r\\n1 -956 187\\r\\n2 82 -26\\r\\n2 -877 -906\\r\\n1 293 -637\\r\\n2 -685 -275\\r\\n2 -725 -927\\r\\n1 -627 777\\r\\n1 -609 -563\\r\\n2 402 54\\r\\n1 -106 -908\\r\\n2 175 808\\r\\n', 'output': ['YES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '30\\r\\n1 -64 -994\\r\\n1 -692 366\\r\\n1 -72 847\\r\\n2 -963 -251\\r\\n1 -651 -994\\r\\n1 -523 -861\\r\\n2 553 -129\\r\\n2 17 785\\r\\n2 -584 -880\\r\\n1 105 657\\r\\n1 649 98\\r\\n2 -572 -492\\r\\n1 -38 -481\\r\\n1 540 463\\r\\n1 -468 -540\\r\\n1 -730 100\\r\\n1 606 -119\\r\\n1 -254 -380\\r\\n1 169 280\\r\\n1 319 62\\r\\n1 452 -556\\r\\n1 -653 887\\r\\n1 407 -786\\r\\n2 -632 181\\r\\n1 925 -967\\r\\n2 996 -709\\r\\n1 568 517\\r\\n2 -478 76\\r\\n1 156 621\\r\\n2 -592 899\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '30\\r\\n1 836 -283\\r\\n1 299 629\\r\\n1 434 -481\\r\\n1 -500 -368\\r\\n2 -105 -216\\r\\n2 -617 443\\r\\n2 -579 811\\r\\n1 411 -242\\r\\n1 -652 41\\r\\n1 962 -483\\r\\n1 -732 579\\r\\n2 554 -147\\r\\n1 39 967\\r\\n1 917 -199\\r\\n2 686 397\\r\\n1 444 780\\r\\n1 278 462\\r\\n1 729 -18\\r\\n1 252 -864\\r\\n1 884 -952\\r\\n1 272 689\\r\\n2 366 -389\\r\\n1 443 924\\r\\n1 791 -249\\r\\n2 692 74\\r\\n2 -412 550\\r\\n2 506 -472\\r\\n2 -626 474\\r\\n1 -895 -42\\r\\n2 -390 -971\\r\\n', 'output': ['YES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '12\\r\\n1 0 0\\r\\n1 10 0\\r\\n1 8 1\\r\\n2 11 0\\r\\n1 2 0\\r\\n2 7 0\\r\\n2 9 0\\r\\n2 1 0\\r\\n1 1 1\\r\\n2 10 0\\r\\n2 9 0\\r\\n2 11 0\\r\\n', 'output': ['NO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 1 0\\r\\n1 3 0\\r\\n1 5000 5000\\r\\n2 3 0\\r\\n2 2 0\\r\\n2 4 0\\r\\n2 -1 0\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '4\\r\\n1 1 0\\r\\n1 3 0\\r\\n1 2 2\\r\\n2 4 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n1 1 0\\r\\n1 3 0\\r\\n1 0 8\\r\\n2 4 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '11\\r\\n1 0 -1\\r\\n1 0 1\\r\\n1 -1 -5\\r\\n1 6 4\\r\\n1 -8 8\\r\\n2 6 -1\\r\\n2 6 1\\r\\n2 1 0\\r\\n2 1 -1\\r\\n2 1 1\\r\\n2 6 0\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '11\\r\\n1 5 4\\r\\n1 5 6\\r\\n1 4 0\\r\\n1 11 9\\r\\n1 -3 13\\r\\n2 11 4\\r\\n2 11 6\\r\\n2 6 5\\r\\n2 6 4\\r\\n2 6 6\\r\\n2 11 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -2 -1000000\\r\\n1 -1 -1000000\\r\\n1 -1 -999999\\r\\n1 1 1000000\\r\\n1 -231100 1000000\\r\\n2 0 0\\r\\n2 1 999999\\r\\n', 'output': ['YES\\r\\nNO\\r\\n']}, {'input': '10\\r\\n1 -1000000 -1000000\\r\\n1 -999999 -1000000\\r\\n1 999999 1000000\\r\\n1 1000000 1000000\\r\\n2 0 0\\r\\n2 1000000 999999\\r\\n2 999999 1000000\\r\\n2 999999 999999\\r\\n2 999999 999998\\r\\n2 999999 999997\\r\\n', 'output': ['YES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '9\\r\\n1 -2 -4\\r\\n1 2 4\\r\\n1 -3 3\\r\\n2 -1 -2\\r\\n2 -4 -8\\r\\n2 -3 -6\\r\\n2 1 2\\r\\n2 4 8\\r\\n2 3 6\\r\\n', 'output': ['YES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '16\\r\\n1 -10000 0\\r\\n1 10000 0\\r\\n1 0 -1\\r\\n2 50000 0\\r\\n2 -50000 0\\r\\n2 49000 0\\r\\n2 -49000 0\\r\\n2 27000 0\\r\\n2 -27000 0\\r\\n1 0 1\\r\\n2 50000 0\\r\\n2 -50000 0\\r\\n2 49000 0\\r\\n2 -49000 0\\r\\n2 27000 0\\r\\n2 -27000 0\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -7000 -9000\\r\\n1 7000 9000\\r\\n1 7000 -7000\\r\\n2 21 27\\r\\n2 -21 -27\\r\\n2 7007 9009\\r\\n2 -7007 -9009\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -7000 -9000\\r\\n1 7000 9000\\r\\n1 -7000 7000\\r\\n2 21 27\\r\\n2 -21 -27\\r\\n2 7007 9009\\r\\n2 -7007 -9009\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -9000 7000\\r\\n1 9000 -7000\\r\\n1 7000 7000\\r\\n2 -27 21\\r\\n2 27 -21\\r\\n2 -9009 7007\\r\\n2 9009 -7007\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -9000 7000\\r\\n1 9000 -7000\\r\\n1 -7000 -7000\\r\\n2 -27 21\\r\\n2 27 -21\\r\\n2 -9009 7007\\r\\n2 9009 -7007\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 7 6\\r\\n1 0 5\\r\\n1 0 4\\r\\n1 2 5\\r\\n1 8 0\\r\\n1 6 4\\r\\n1 1 1\\r\\n1 8 4\\r\\n2 1 1\\r\\n2 2 7\\r\\n1 2 3\\r\\n1 4 2\\r\\n2 4 3\\r\\n1 3 2\\r\\n1 7 2\\r\\n1 1 0\\r\\n2 3 5\\r\\n1 6 5\\r\\n2 5 7\\r\\n2 1 1\\r\\n2 3 2\\r\\n1 6 2\\r\\n2 6 0\\r\\n2 8 8\\r\\n1 4 6\\r\\n1 3 5\\r\\n2 3 8\\r\\n2 0 5\\r\\n2 1 6\\r\\n1 8 3\\r\\n1 2 2\\r\\n1 8 2\\r\\n1 6 8\\r\\n1 1 3\\r\\n1 3 3\\r\\n1 5 5\\r\\n2 2 0\\r\\n2 6 7\\r\\n2 1 6\\r\\n2 6 4\\r\\n', 'output': ['YES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 3 8\\r\\n1 6 7\\r\\n1 7 7\\r\\n2 5 5\\r\\n1 4 0\\r\\n1 0 0\\r\\n2 7 3\\r\\n1 0 2\\r\\n2 8 2\\r\\n2 5 1\\r\\n2 1 2\\r\\n2 1 5\\r\\n1 1 3\\r\\n1 7 1\\r\\n1 8 7\\r\\n1 2 4\\r\\n1 2 8\\r\\n2 8 5\\r\\n2 8 6\\r\\n1 2 1\\r\\n1 5 6\\r\\n1 2 3\\r\\n2 4 3\\r\\n1 8 3\\r\\n1 1 5\\r\\n2 2 2\\r\\n2 8 5\\r\\n1 0 7\\r\\n1 7 2\\r\\n1 5 5\\r\\n1 8 4\\r\\n1 4 1\\r\\n2 3 2\\r\\n2 6 0\\r\\n2 8 7\\r\\n2 5 7\\r\\n1 3 0\\r\\n2 1 0\\r\\n2 0 7\\r\\n2 5 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 2 8\\r\\n1 3 8\\r\\n1 7 4\\r\\n1 4 5\\r\\n1 4 1\\r\\n2 6 6\\r\\n2 5 8\\r\\n1 5 4\\r\\n1 7 8\\r\\n2 1 3\\r\\n2 6 1\\r\\n2 8 2\\r\\n2 6 8\\r\\n1 4 3\\r\\n2 2 8\\r\\n2 0 6\\r\\n1 0 3\\r\\n2 0 3\\r\\n1 6 6\\r\\n1 5 8\\r\\n1 5 5\\r\\n1 1 2\\r\\n2 6 7\\r\\n1 4 8\\r\\n2 1 2\\r\\n2 2 7\\r\\n2 2 3\\r\\n1 8 4\\r\\n2 8 4\\r\\n2 6 5\\r\\n1 8 2\\r\\n2 7 2\\r\\n2 3 5\\r\\n1 4 0\\r\\n2 6 2\\r\\n2 3 7\\r\\n1 4 6\\r\\n1 8 6\\r\\n1 0 5\\r\\n2 2 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 4 0\\r\\n1 7 1\\r\\n1 8 0\\r\\n1 1 2\\r\\n1 1 8\\r\\n1 6 1\\r\\n2 5 2\\r\\n1 7 7\\r\\n1 6 5\\r\\n2 8 1\\r\\n2 8 7\\r\\n1 7 8\\r\\n2 3 5\\r\\n2 6 6\\r\\n1 4 2\\r\\n1 8 3\\r\\n2 6 8\\r\\n1 4 8\\r\\n2 4 6\\r\\n2 1 7\\r\\n1 4 3\\r\\n2 0 8\\r\\n1 5 2\\r\\n2 5 5\\r\\n2 1 6\\r\\n1 5 5\\r\\n1 1 5\\r\\n2 3 3\\r\\n2 0 1\\r\\n1 1 0\\r\\n2 1 4\\r\\n2 3 6\\r\\n1 4 6\\r\\n2 7 6\\r\\n1 4 4\\r\\n1 7 6\\r\\n1 6 8\\r\\n2 1 1\\r\\n1 0 1\\r\\n2 0 2\\r\\n', 'output': ['YES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 3 0\\r\\n1 1 4\\r\\n1 2 7\\r\\n2 4 0\\r\\n1 0 5\\r\\n1 7 5\\r\\n2 6 3\\r\\n1 0 7\\r\\n2 5 7\\r\\n1 1 0\\r\\n2 0 6\\r\\n1 6 8\\r\\n1 3 5\\r\\n1 8 5\\r\\n1 0 6\\r\\n2 7 0\\r\\n1 4 6\\r\\n1 5 2\\r\\n2 6 2\\r\\n1 7 0\\r\\n2 6 3\\r\\n1 3 7\\r\\n2 4 2\\r\\n2 1 4\\r\\n1 1 3\\r\\n1 5 0\\r\\n2 0 7\\r\\n2 6 8\\r\\n1 4 0\\r\\n2 5 0\\r\\n2 3 2\\r\\n2 6 7\\r\\n1 7 2\\r\\n1 0 3\\r\\n1 6 6\\r\\n2 4 0\\r\\n2 2 4\\r\\n1 6 5\\r\\n2 0 8\\r\\n2 0 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 0 3\\r\\n1 6 0\\r\\n1 8 7\\r\\n2 2 6\\r\\n2 7 2\\r\\n2 7 5\\r\\n1 4 7\\r\\n1 2 3\\r\\n2 2 7\\r\\n2 3 1\\r\\n1 3 5\\r\\n1 8 5\\r\\n2 6 8\\r\\n1 2 8\\r\\n2 4 6\\r\\n1 7 3\\r\\n1 3 3\\r\\n2 2 4\\r\\n1 5 0\\r\\n1 5 6\\r\\n1 1 7\\r\\n2 3 3\\r\\n1 8 6\\r\\n2 7 4\\r\\n1 7 8\\r\\n1 5 8\\r\\n2 3 8\\r\\n1 6 6\\r\\n2 8 5\\r\\n1 5 1\\r\\n2 4 2\\r\\n1 7 7\\r\\n2 4 8\\r\\n1 6 1\\r\\n1 1 5\\r\\n2 1 8\\r\\n2 4 3\\r\\n1 5 5\\r\\n1 4 0\\r\\n2 0 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 5 2\\r\\n1 5 6\\r\\n1 2 1\\r\\n2 7 2\\r\\n2 6 2\\r\\n2 0 8\\r\\n2 0 6\\r\\n1 6 8\\r\\n1 2 0\\r\\n1 0 5\\r\\n2 3 0\\r\\n1 3 8\\r\\n2 8 6\\r\\n1 0 3\\r\\n1 8 8\\r\\n2 1 1\\r\\n1 1 4\\r\\n1 1 3\\r\\n2 0 0\\r\\n2 5 6\\r\\n1 0 0\\r\\n2 0 0\\r\\n1 2 7\\r\\n2 0 0\\r\\n2 3 6\\r\\n1 3 3\\r\\n1 3 2\\r\\n1 5 3\\r\\n1 7 8\\r\\n1 7 4\\r\\n1 8 7\\r\\n1 7 3\\r\\n2 0 3\\r\\n1 4 4\\r\\n2 5 0\\r\\n1 6 6\\r\\n1 8 0\\r\\n2 6 2\\r\\n2 4 8\\r\\n2 7 2\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 1 4\\r\\n1 1 5\\r\\n1 3 5\\r\\n2 8 2\\r\\n2 5 2\\r\\n1 7 3\\r\\n1 8 1\\r\\n2 6 5\\r\\n1 4 3\\r\\n1 2 4\\r\\n1 2 3\\r\\n2 8 3\\r\\n2 3 5\\r\\n2 2 0\\r\\n1 6 7\\r\\n2 2 8\\r\\n1 3 0\\r\\n2 5 1\\r\\n2 2 1\\r\\n1 4 5\\r\\n2 1 6\\r\\n1 8 5\\r\\n2 7 4\\r\\n2 2 0\\r\\n1 3 2\\r\\n1 2 2\\r\\n1 8 3\\r\\n2 3 4\\r\\n1 7 6\\r\\n1 3 7\\r\\n1 5 3\\r\\n1 2 0\\r\\n2 5 7\\r\\n2 0 7\\r\\n2 3 2\\r\\n2 1 0\\r\\n1 6 0\\r\\n2 8 5\\r\\n1 3 4\\r\\n2 0 3\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 8 7\\r\\n1 0 6\\r\\n1 5 0\\r\\n2 6 7\\r\\n2 6 8\\r\\n1 3 5\\r\\n1 6 7\\r\\n1 0 0\\r\\n2 1 7\\r\\n1 2 3\\r\\n2 4 3\\r\\n2 5 5\\r\\n1 4 7\\r\\n2 2 0\\r\\n1 2 4\\r\\n1 4 2\\r\\n1 0 8\\r\\n2 0 3\\r\\n1 8 8\\r\\n2 8 1\\r\\n2 8 6\\r\\n2 4 8\\r\\n1 4 0\\r\\n1 6 6\\r\\n2 0 0\\r\\n1 6 2\\r\\n2 5 1\\r\\n1 3 0\\r\\n1 5 6\\r\\n1 8 1\\r\\n1 3 4\\r\\n1 1 3\\r\\n1 5 1\\r\\n1 5 7\\r\\n1 6 8\\r\\n1 1 5\\r\\n1 1 1\\r\\n1 6 1\\r\\n1 1 4\\r\\n2 7 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 2 8\\r\\n1 4 0\\r\\n1 0 6\\r\\n2 3 8\\r\\n2 4 5\\r\\n1 5 0\\r\\n2 7 6\\r\\n2 6 1\\r\\n2 1 7\\r\\n1 1 2\\r\\n1 5 4\\r\\n1 7 3\\r\\n2 6 4\\r\\n1 3 0\\r\\n2 2 8\\r\\n1 8 2\\r\\n1 8 8\\r\\n1 7 8\\r\\n2 2 5\\r\\n2 2 3\\r\\n2 4 6\\r\\n2 0 2\\r\\n2 6 7\\r\\n2 2 8\\r\\n1 8 3\\r\\n2 5 5\\r\\n1 4 8\\r\\n1 7 1\\r\\n2 7 3\\r\\n2 4 5\\r\\n2 1 1\\r\\n2 4 2\\r\\n1 1 1\\r\\n2 4 0\\r\\n1 2 4\\r\\n2 7 0\\r\\n1 4 1\\r\\n1 7 5\\r\\n1 6 6\\r\\n2 7 8\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 6 3\\r\\n1 5 3\\r\\n1 3 4\\r\\n1 2 3\\r\\n2 2 5\\r\\n1 6 1\\r\\n2 3 7\\r\\n1 0 0\\r\\n1 8 7\\r\\n1 3 8\\r\\n1 0 8\\r\\n1 3 5\\r\\n1 4 5\\r\\n1 0 5\\r\\n2 8 1\\r\\n2 4 7\\r\\n2 3 2\\r\\n1 6 4\\r\\n2 2 3\\r\\n2 6 3\\r\\n1 0 2\\r\\n2 1 2\\r\\n2 6 2\\r\\n1 5 7\\r\\n2 7 0\\r\\n1 4 8\\r\\n1 4 6\\r\\n2 8 7\\r\\n2 0 7\\r\\n1 7 8\\r\\n2 0 3\\r\\n1 5 5\\r\\n1 6 2\\r\\n2 4 5\\r\\n1 2 5\\r\\n2 3 3\\r\\n2 1 1\\r\\n1 8 3\\r\\n1 6 5\\r\\n2 5 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 6 5\\r\\n1 4 8\\r\\n1 5 7\\r\\n1 3 1\\r\\n2 4 2\\r\\n1 4 3\\r\\n1 0 7\\r\\n2 4 6\\r\\n2 4 2\\r\\n1 0 3\\r\\n2 1 5\\r\\n2 5 6\\r\\n1 8 8\\r\\n1 1 7\\r\\n1 3 3\\r\\n2 6 7\\r\\n1 7 4\\r\\n1 0 2\\r\\n1 8 4\\r\\n2 4 5\\r\\n2 0 7\\r\\n1 4 1\\r\\n1 4 4\\r\\n1 5 3\\r\\n1 1 0\\r\\n1 4 5\\r\\n2 1 4\\r\\n1 0 6\\r\\n2 1 0\\r\\n1 5 5\\r\\n2 5 6\\r\\n2 8 2\\r\\n2 1 7\\r\\n2 8 1\\r\\n2 0 5\\r\\n1 0 4\\r\\n1 6 6\\r\\n2 1 1\\r\\n1 8 0\\r\\n2 6 3\\r\\n', 'output': ['NO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 1 7\\r\\n1 3 3\\r\\n1 6 5\\r\\n1 7 3\\r\\n1 2 8\\r\\n1 3 0\\r\\n2 0 0\\r\\n1 7 7\\r\\n2 6 8\\r\\n2 6 0\\r\\n2 4 7\\r\\n1 7 8\\r\\n2 0 7\\r\\n2 0 5\\r\\n1 6 2\\r\\n1 7 1\\r\\n1 1 1\\r\\n2 4 8\\r\\n2 2 1\\r\\n2 7 0\\r\\n2 5 4\\r\\n1 2 4\\r\\n2 1 3\\r\\n2 0 5\\r\\n2 5 5\\r\\n2 1 4\\r\\n2 5 5\\r\\n1 2 6\\r\\n1 4 4\\r\\n2 0 8\\r\\n1 0 6\\r\\n2 0 5\\r\\n2 4 6\\r\\n2 8 1\\r\\n2 2 0\\r\\n2 3 3\\r\\n1 0 4\\r\\n1 3 7\\r\\n2 3 2\\r\\n2 3 7\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 2 7\\r\\n1 6 5\\r\\n1 2 0\\r\\n2 4 5\\r\\n1 1 0\\r\\n2 3 4\\r\\n1 7 3\\r\\n2 8 1\\r\\n2 0 0\\r\\n2 2 0\\r\\n1 7 4\\r\\n1 6 3\\r\\n2 8 1\\r\\n2 6 0\\r\\n1 4 7\\r\\n2 4 2\\r\\n1 4 5\\r\\n2 3 7\\r\\n2 6 8\\r\\n2 2 6\\r\\n2 7 4\\r\\n1 0 6\\r\\n2 1 7\\r\\n1 4 4\\r\\n2 2 3\\r\\n1 1 3\\r\\n1 8 5\\r\\n1 0 5\\r\\n1 1 1\\r\\n1 4 3\\r\\n2 5 3\\r\\n1 3 6\\r\\n1 7 0\\r\\n2 5 6\\r\\n2 5 6\\r\\n1 0 7\\r\\n2 7 0\\r\\n2 6 4\\r\\n1 3 7\\r\\n2 2 2\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 4 4\\r\\n1 2 6\\r\\n1 8 2\\r\\n2 4 6\\r\\n1 5 4\\r\\n2 5 8\\r\\n2 6 7\\r\\n2 4 8\\r\\n1 1 0\\r\\n1 3 1\\r\\n1 0 3\\r\\n1 8 1\\r\\n1 3 0\\r\\n2 7 4\\r\\n1 2 0\\r\\n1 8 5\\r\\n1 6 2\\r\\n2 2 0\\r\\n1 0 4\\r\\n1 1 1\\r\\n1 4 5\\r\\n2 8 3\\r\\n2 1 0\\r\\n2 5 5\\r\\n1 3 4\\r\\n2 0 7\\r\\n1 4 3\\r\\n1 7 0\\r\\n2 3 8\\r\\n1 0 1\\r\\n1 0 7\\r\\n2 4 1\\r\\n1 0 6\\r\\n2 1 2\\r\\n1 5 7\\r\\n2 7 2\\r\\n2 7 3\\r\\n1 3 6\\r\\n2 7 3\\r\\n2 7 0\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 0 8\\r\\n1 3 5\\r\\n1 0 2\\r\\n1 8 0\\r\\n1 5 3\\r\\n1 5 2\\r\\n2 8 2\\r\\n2 7 6\\r\\n1 6 1\\r\\n2 2 7\\r\\n2 6 5\\r\\n1 3 7\\r\\n2 7 8\\r\\n1 2 4\\r\\n1 4 2\\r\\n2 5 7\\r\\n2 0 6\\r\\n1 3 1\\r\\n2 2 3\\r\\n1 5 7\\r\\n2 2 8\\r\\n1 7 1\\r\\n1 3 0\\r\\n2 5 5\\r\\n1 7 4\\r\\n2 5 5\\r\\n1 2 0\\r\\n2 4 3\\r\\n2 8 1\\r\\n2 8 0\\r\\n1 2 6\\r\\n1 7 5\\r\\n2 4 8\\r\\n1 2 3\\r\\n2 6 6\\r\\n1 7 8\\r\\n2 7 5\\r\\n2 7 4\\r\\n1 8 1\\r\\n2 5 6\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 1 3\\r\\n1 7 2\\r\\n1 6 2\\r\\n2 0 8\\r\\n2 3 8\\r\\n2 0 3\\r\\n1 5 8\\r\\n2 7 1\\r\\n1 8 1\\r\\n2 8 7\\r\\n1 5 5\\r\\n2 2 4\\r\\n2 3 3\\r\\n2 2 4\\r\\n1 0 1\\r\\n1 2 0\\r\\n1 7 4\\r\\n2 7 4\\r\\n2 5 5\\r\\n1 1 1\\r\\n2 6 4\\r\\n2 1 7\\r\\n2 5 0\\r\\n1 8 0\\r\\n2 6 2\\r\\n1 7 1\\r\\n2 8 6\\r\\n1 8 7\\r\\n2 2 5\\r\\n1 7 3\\r\\n1 5 6\\r\\n1 4 0\\r\\n2 3 8\\r\\n2 8 6\\r\\n1 7 0\\r\\n2 3 5\\r\\n2 6 1\\r\\n1 2 6\\r\\n1 1 2\\r\\n2 7 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 4 4\\r\\n1 2 6\\r\\n1 7 2\\r\\n2 1 4\\r\\n2 0 2\\r\\n1 5 4\\r\\n2 5 1\\r\\n1 0 8\\r\\n1 1 7\\r\\n2 2 0\\r\\n1 8 4\\r\\n2 6 5\\r\\n2 8 0\\r\\n1 6 5\\r\\n2 8 7\\r\\n2 0 0\\r\\n2 4 0\\r\\n2 7 2\\r\\n2 6 8\\r\\n1 7 8\\r\\n2 8 8\\r\\n2 4 7\\r\\n1 7 1\\r\\n2 8 8\\r\\n1 5 8\\r\\n1 3 6\\r\\n1 4 6\\r\\n1 3 5\\r\\n2 6 1\\r\\n2 1 3\\r\\n2 8 4\\r\\n2 8 5\\r\\n2 1 3\\r\\n2 7 1\\r\\n2 5 8\\r\\n1 8 2\\r\\n2 6 1\\r\\n1 7 4\\r\\n1 8 5\\r\\n2 6 4\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 2 1\\r\\n1 4 7\\r\\n1 1 1\\r\\n1 2 4\\r\\n2 4 4\\r\\n1 4 4\\r\\n2 0 6\\r\\n2 7 6\\r\\n1 4 0\\r\\n2 6 5\\r\\n2 5 2\\r\\n1 6 1\\r\\n2 7 0\\r\\n1 6 2\\r\\n2 3 2\\r\\n1 0 6\\r\\n2 7 0\\r\\n1 8 6\\r\\n2 1 3\\r\\n2 0 1\\r\\n1 2 5\\r\\n1 0 2\\r\\n2 4 2\\r\\n2 6 8\\r\\n2 2 0\\r\\n2 5 7\\r\\n2 6 0\\r\\n1 2 2\\r\\n2 0 3\\r\\n1 7 4\\r\\n2 7 3\\r\\n1 4 1\\r\\n2 2 6\\r\\n2 8 2\\r\\n1 8 3\\r\\n1 8 7\\r\\n1 0 3\\r\\n1 7 0\\r\\n2 2 1\\r\\n2 6 4\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 3 7\\r\\n1 5 8\\r\\n1 4 4\\r\\n1 8 1\\r\\n1 4 6\\r\\n1 6 6\\r\\n2 5 0\\r\\n2 3 4\\r\\n1 5 3\\r\\n2 0 7\\r\\n2 3 1\\r\\n1 5 4\\r\\n1 3 4\\r\\n2 3 4\\r\\n2 8 2\\r\\n1 0 1\\r\\n1 0 8\\r\\n2 3 8\\r\\n1 0 4\\r\\n2 4 6\\r\\n1 7 3\\r\\n2 4 0\\r\\n1 2 3\\r\\n2 8 1\\r\\n2 8 4\\r\\n1 7 0\\r\\n2 2 6\\r\\n2 2 2\\r\\n1 2 2\\r\\n1 6 5\\r\\n1 7 1\\r\\n2 5 1\\r\\n1 2 4\\r\\n2 3 2\\r\\n1 8 4\\r\\n1 7 4\\r\\n1 1 2\\r\\n1 3 2\\r\\n2 7 3\\r\\n2 4 4\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 1 0\\r\\n1 0 7\\r\\n1 8 4\\r\\n2 1 6\\r\\n2 1 2\\r\\n1 0 0\\r\\n1 1 1\\r\\n2 5 2\\r\\n1 8 5\\r\\n1 0 6\\r\\n2 6 8\\r\\n1 4 2\\r\\n1 8 3\\r\\n2 2 3\\r\\n1 6 3\\r\\n2 6 0\\r\\n1 5 3\\r\\n2 0 5\\r\\n1 3 4\\r\\n2 4 4\\r\\n1 8 6\\r\\n1 1 2\\r\\n1 5 7\\r\\n1 5 1\\r\\n1 3 8\\r\\n2 7 0\\r\\n1 7 2\\r\\n1 3 3\\r\\n2 6 5\\r\\n2 5 0\\r\\n2 2 4\\r\\n2 5 5\\r\\n2 4 6\\r\\n1 6 1\\r\\n1 5 2\\r\\n2 7 5\\r\\n1 8 7\\r\\n1 1 6\\r\\n1 4 8\\r\\n2 8 5\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 8 1\\r\\n1 8 6\\r\\n1 1 1\\r\\n2 5 4\\r\\n2 7 8\\r\\n1 6 2\\r\\n1 7 4\\r\\n1 4 4\\r\\n2 3 7\\r\\n1 6 3\\r\\n2 0 1\\r\\n1 8 0\\r\\n2 0 3\\r\\n1 6 0\\r\\n1 3 4\\r\\n1 1 8\\r\\n1 3 3\\r\\n2 3 1\\r\\n2 4 0\\r\\n1 4 3\\r\\n2 1 3\\r\\n2 5 4\\r\\n1 8 5\\r\\n2 1 0\\r\\n1 4 7\\r\\n2 5 3\\r\\n2 4 1\\r\\n1 4 0\\r\\n1 6 8\\r\\n1 5 1\\r\\n2 8 3\\r\\n2 5 7\\r\\n1 3 2\\r\\n1 7 5\\r\\n1 7 3\\r\\n1 0 8\\r\\n1 7 8\\r\\n2 7 3\\r\\n2 6 7\\r\\n2 4 2\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '50\\r\\n1 58 -49\\r\\n1 -77 -90\\r\\n1 32 -52\\r\\n1 -89 -31\\r\\n1 99 -34\\r\\n1 -3 -59\\r\\n2 65 93\\r\\n2 67 -51\\r\\n2 25 -47\\r\\n1 -72 86\\r\\n2 48 -45\\r\\n2 64 -70\\r\\n2 -96 -43\\r\\n2 87 -58\\r\\n2 3 21\\r\\n2 39 -57\\r\\n1 -58 49\\r\\n2 -1 87\\r\\n2 -63 19\\r\\n2 -27 90\\r\\n2 31 3\\r\\n1 55 41\\r\\n1 90 39\\r\\n1 -53 28\\r\\n2 49 -51\\r\\n2 6 42\\r\\n1 50 15\\r\\n2 21 -2\\r\\n2 -6 70\\r\\n1 -13 -61\\r\\n2 -60 -69\\r\\n1 -22 33\\r\\n1 -22 17\\r\\n2 30 -98\\r\\n2 -56 -48\\r\\n2 -84 -77\\r\\n2 49 56\\r\\n1 81 29\\r\\n1 26 29\\r\\n1 -14 20\\r\\n2 -37 83\\r\\n1 -91 96\\r\\n2 57 19\\r\\n1 94 54\\r\\n2 25 -30\\r\\n1 92 5\\r\\n2 -48 51\\r\\n2 81 23\\r\\n1 39 -47\\r\\n2 34 89\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '50\\r\\n1 7 -8\\r\\n1 -30 -28\\r\\n1 -8 2\\r\\n1 -28 -29\\r\\n2 -8 -21\\r\\n2 -23 19\\r\\n2 -23 18\\r\\n1 6 27\\r\\n2 -17 20\\r\\n1 9 -5\\r\\n2 -27 29\\r\\n1 -8 27\\r\\n2 13 12\\r\\n2 -29 13\\r\\n2 -30 8\\r\\n2 -30 -8\\r\\n1 -24 -21\\r\\n1 -14 -15\\r\\n2 -23 14\\r\\n2 -12 -13\\r\\n1 15 -24\\r\\n1 28 6\\r\\n2 -20 -21\\r\\n1 -8 -13\\r\\n1 -15 -15\\r\\n1 11 20\\r\\n2 24 -26\\r\\n1 -30 -11\\r\\n2 -17 18\\r\\n1 -17 6\\r\\n2 5 -9\\r\\n2 -29 8\\r\\n2 -29 1\\r\\n2 10 24\\r\\n2 29 27\\r\\n2 -12 21\\r\\n2 5 -28\\r\\n2 28 27\\r\\n2 -4 -4\\r\\n1 -24 29\\r\\n1 17 -1\\r\\n1 0 17\\r\\n1 -2 -1\\r\\n2 -7 -10\\r\\n1 5 -16\\r\\n2 -3 -26\\r\\n2 -7 17\\r\\n1 -27 -26\\r\\n1 -3 -30\\r\\n2 28 -15\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '10\\r\\n1 0 0\\r\\n1 6 0\\r\\n1 0 6\\r\\n2 0 0\\r\\n2 6 0\\r\\n2 0 6\\r\\n2 3 3\\r\\n2 3 0\\r\\n2 0 3\\r\\n2 2 2\\r\\n', 'output': ['YES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '50\\r\\n1 33 -21\\r\\n1 9 82\\r\\n1 -69 -54\\r\\n2 -3 84\\r\\n1 -9 -28\\r\\n2 -54 87\\r\\n2 26 -64\\r\\n2 8 52\\r\\n2 98 63\\r\\n2 -77 10\\r\\n2 -52 -46\\r\\n1 92 42\\r\\n2 -53 -69\\r\\n2 -48 44\\r\\n1 -52 90\\r\\n2 56 29\\r\\n2 -100 -13\\r\\n2 -23 1\\r\\n2 6 91\\r\\n2 53 -38\\r\\n1 48 -35\\r\\n2 19 -62\\r\\n2 -62 49\\r\\n1 59 78\\r\\n2 85 72\\r\\n2 28 76\\r\\n2 46 -91\\r\\n2 6 32\\r\\n2 -16 -59\\r\\n1 40 -53\\r\\n2 -6 87\\r\\n2 -79 -58\\r\\n2 -12 25\\r\\n2 73 49\\r\\n1 57 -42\\r\\n2 12 19\\r\\n1 -60 -5\\r\\n1 -40 -20\\r\\n1 90 35\\r\\n2 10 3\\r\\n2 63 -49\\r\\n1 50 10\\r\\n1 0 77\\r\\n1 92 24\\r\\n1 71 -7\\r\\n2 46 22\\r\\n1 19 81\\r\\n1 -3 -71\\r\\n2 -44 56\\r\\n2 92 34\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 3 3\\r\\n1 3 1\\r\\n1 0 1\\r\\n2 3 0\\r\\n2 6 5\\r\\n2 1 5\\r\\n2 8 3\\r\\n2 0 5\\r\\n2 3 4\\r\\n1 7 6\\r\\n1 1 0\\r\\n1 0 8\\r\\n1 3 7\\r\\n2 4 5\\r\\n2 2 5\\r\\n2 2 0\\r\\n1 7 4\\r\\n2 7 3\\r\\n1 5 0\\r\\n1 4 6\\r\\n1 1 5\\r\\n1 7 8\\r\\n2 7 5\\r\\n1 0 4\\r\\n2 3 8\\r\\n1 1 8\\r\\n1 0 5\\r\\n1 4 8\\r\\n2 8 5\\r\\n1 8 5\\r\\n2 3 6\\r\\n1 8 7\\r\\n2 4 3\\r\\n1 5 2\\r\\n2 2 8\\r\\n2 5 3\\r\\n2 4 0\\r\\n1 4 4\\r\\n1 6 5\\r\\n2 2 7\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}]", "source_code": "\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.StreamTokenizer;\nimport java.util.*;\n\npublic class javaapplication2 {\n   \n     static int getInt() throws IOException {\n        token.nextToken();\n        return (int) token.nval;\n    }\n    \n    static double getDouble() throws IOException {\n        token.nextToken();\n        return token.nval;\n    }\n    \n    static long getLong() throws IOException {\n        token.nextToken();\n        return (long) token.nval;\n    }\n    \n    static String getString() throws IOException {\n        token.nextToken();\n        return token.sval;\n    }\n    \n    static StreamTokenizer token;\n    static StringBuffer out;\n    static int n;\n    static ConvexHull hull;\n    public static void main(String[] args) throws IOException {\n        token = new StreamTokenizer(new InputStreamReader(System.in));\n        out = new StringBuffer();\n        n = getInt();\n        int[] x = new int[n];\n        int[] y = new int[n];\n        for(int i = 0 ; i < n ; i++){\n            x[i] = getInt();\n            y[i] = getInt();\n        }\n        hull = new ConvexHull(x,y);\n        \n        for(int i = 0 ; i < n ; i++){\n            int type = getInt();\n            int cx = getInt();\n            int cy = getInt();\n            if(type == 1){\n                hull.addPoint(cx,cy);\n            }else{\n                boolean bool = hull.isPointInHull(cx,cy);\n                out.append(bool+\"\\n\");\n            }\n        }\n        System.out.println(out);\n    }\n}\n\n\nclass ConvexHull{\n    int n;\n    double[][] point;\n    double[][] base;\n    ConvexHull(){\n        n = 0;\n    }\n    ConvexHull(int[] x,int[] y){\n        n = x.length;\n        point = new double[n][2];\n        base = new double[n][2];\n        for(int i = 0 ; i < n ; i++){\n            point[i][0] = x[i];\n            point[i][1] = y[i];\n        }\n        sort(0);\n        base[0] = point[0];\n        base[1] = point[1];\n        for(int i = 2 ; i < n ; i++){\n            if(ccw(base[0], base[1], point[i]) >= 0)\n                base[1] = base[0];\n            base[0] = point[i];\n        }\n        while(n > 0){\n            int m = 0;\n            double max = 0 ;\n            for(int i = 0 ; i < n ; i++){\n                if(ccw(base[i%2], base[i%2+1], point[i]) > max){\n                    max = ccw(base[i%2], base[i%2+1], point[i]);\n                    m = i;\n                }\n            }\n            base[1] = base[0];\n            base[0] = point[m];\n            n--;\n        }\n    }\n    \n    void sort(int ind){\n        if(n <= 1) return ;\n        int mid = n/2;\n        sort(ind+1);\n        merge(ind,mid);\n    }\n    \n    void merge(int ind, int mid){\n        int[] a1 = new int[mid];\n        int[] a2 = new int[n-mid];\n        \n        int j = 0, i = ind ;\n        int l = 0, k = mid + ind ;\n        while(i < k && l < n){\n            if(point[i][ind] <= point[l][ind]){\n                a1[j++] = point[i][ind];\n                a1[j++] = point[i++][ind+1];\n            }else{\n                a2[k-j] = point[l][ind];\n                a2[k"}
{"src_uid": "6220f4058f9325dfb211fb1dd86e9464", "id": 119, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2700, "testcases": "[{'input': '8\\r\\n1 0 0\\r\\n1 2 0\\r\\n1 2 2\\r\\n2 1 0\\r\\n1 0 2\\r\\n2 1 1\\r\\n2 2 1\\r\\n2 20 -1\\r\\n', 'output': ['YES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 0 0\\r\\n1 5 0\\r\\n1 0 5\\r\\n2 1 1\\r\\n2 10 10\\r\\n1 2 10\\r\\n2 1 1\\r\\n', 'output': ['YES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '5\\r\\n1 2 -2\\r\\n1 -2 2\\r\\n1 1 5\\r\\n2 3 -1\\r\\n2 3 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\n']}, {'input': '5\\r\\n1 -1 0\\r\\n1 1 0\\r\\n1 0 2\\r\\n2 0 1\\r\\n2 0 3\\r\\n', 'output': ['YES\\r\\nNO\\r\\n']}, {'input': '6\\r\\n1 -2 0\\r\\n1 2 0\\r\\n1 0 2\\r\\n2 4 0\\r\\n2 1 0\\r\\n2 2 0\\r\\n', 'output': ['NO\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '11\\r\\n1 0 -1\\r\\n1 0 1\\r\\n1 1 -1\\r\\n1 -1 -5\\r\\n1 0 5\\r\\n2 5 1\\r\\n2 5 0\\r\\n2 5 -1\\r\\n2 0 0\\r\\n2 0 10\\r\\n2 0 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '30\\r\\n1 -37 889\\r\\n1 771 -764\\r\\n1 -119 938\\r\\n1 599 868\\r\\n1 56 161\\r\\n1 -67 86\\r\\n2 -692 99\\r\\n2 -995 158\\r\\n2 410 116\\r\\n1 -49 -864\\r\\n2 30 -580\\r\\n1 -930 454\\r\\n1 -706 301\\r\\n2 547 -606\\r\\n2 -252 -55\\r\\n2 662 152\\r\\n2 -621 -920\\r\\n1 -128 -595\\r\\n1 -401 -265\\r\\n1 434 388\\r\\n2 299 173\\r\\n1 104 -298\\r\\n1 -693 557\\r\\n2 840 -179\\r\\n2 382 -8\\r\\n1 461 618\\r\\n1 -928 628\\r\\n2 193 -972\\r\\n2 218 945\\r\\n2 490 571\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '30\\r\\n1 -619 -234\\r\\n1 -140 -846\\r\\n1 762 -792\\r\\n2 153 29\\r\\n1 -353 627\\r\\n2 -544 -418\\r\\n2 -922 -965\\r\\n1 -620 -692\\r\\n1 -34 295\\r\\n2 -326 -604\\r\\n2 -906 -867\\r\\n2 57 -690\\r\\n1 -87 -822\\r\\n2 -569 739\\r\\n2 -92 -927\\r\\n2 279 806\\r\\n1 -364 19\\r\\n2 -214 -629\\r\\n2 -283 662\\r\\n2 -324 650\\r\\n1 92 -511\\r\\n2 654 -597\\r\\n1 -87 747\\r\\n2 795 46\\r\\n2 870 -157\\r\\n2 -11 520\\r\\n1 -162 -686\\r\\n2 290 -660\\r\\n2 -660 780\\r\\n2 946 910\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '30\\r\\n1 -702 -823\\r\\n1 -330 -896\\r\\n1 -564 90\\r\\n1 559 818\\r\\n2 404 716\\r\\n1 -900 -379\\r\\n2 866 -218\\r\\n2 444 615\\r\\n2 -782 -887\\r\\n2 584 -919\\r\\n2 891 775\\r\\n1 117 887\\r\\n2 598 162\\r\\n2 759 -925\\r\\n2 713 -507\\r\\n1 -329 120\\r\\n2 546 185\\r\\n2 399 500\\r\\n1 -611 763\\r\\n1 -956 187\\r\\n2 82 -26\\r\\n2 -877 -906\\r\\n1 293 -637\\r\\n2 -685 -275\\r\\n2 -725 -927\\r\\n1 -627 777\\r\\n1 -609 -563\\r\\n2 402 54\\r\\n1 -106 -908\\r\\n2 175 808\\r\\n', 'output': ['YES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '30\\r\\n1 -64 -994\\r\\n1 -692 366\\r\\n1 -72 847\\r\\n2 -963 -251\\r\\n1 -651 -994\\r\\n1 -523 -861\\r\\n2 553 -129\\r\\n2 17 785\\r\\n2 -584 -880\\r\\n1 105 657\\r\\n1 649 98\\r\\n2 -572 -492\\r\\n1 -38 -481\\r\\n1 540 463\\r\\n1 -468 -540\\r\\n1 -730 100\\r\\n1 606 -119\\r\\n1 -254 -380\\r\\n1 169 280\\r\\n1 319 62\\r\\n1 452 -556\\r\\n1 -653 887\\r\\n1 407 -786\\r\\n2 -632 181\\r\\n1 925 -967\\r\\n2 996 -709\\r\\n1 568 517\\r\\n2 -478 76\\r\\n1 156 621\\r\\n2 -592 899\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '30\\r\\n1 836 -283\\r\\n1 299 629\\r\\n1 434 -481\\r\\n1 -500 -368\\r\\n2 -105 -216\\r\\n2 -617 443\\r\\n2 -579 811\\r\\n1 411 -242\\r\\n1 -652 41\\r\\n1 962 -483\\r\\n1 -732 579\\r\\n2 554 -147\\r\\n1 39 967\\r\\n1 917 -199\\r\\n2 686 397\\r\\n1 444 780\\r\\n1 278 462\\r\\n1 729 -18\\r\\n1 252 -864\\r\\n1 884 -952\\r\\n1 272 689\\r\\n2 366 -389\\r\\n1 443 924\\r\\n1 791 -249\\r\\n2 692 74\\r\\n2 -412 550\\r\\n2 506 -472\\r\\n2 -626 474\\r\\n1 -895 -42\\r\\n2 -390 -971\\r\\n', 'output': ['YES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '12\\r\\n1 0 0\\r\\n1 10 0\\r\\n1 8 1\\r\\n2 11 0\\r\\n1 2 0\\r\\n2 7 0\\r\\n2 9 0\\r\\n2 1 0\\r\\n1 1 1\\r\\n2 10 0\\r\\n2 9 0\\r\\n2 11 0\\r\\n', 'output': ['NO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 1 0\\r\\n1 3 0\\r\\n1 5000 5000\\r\\n2 3 0\\r\\n2 2 0\\r\\n2 4 0\\r\\n2 -1 0\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '4\\r\\n1 1 0\\r\\n1 3 0\\r\\n1 2 2\\r\\n2 4 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n1 1 0\\r\\n1 3 0\\r\\n1 0 8\\r\\n2 4 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '11\\r\\n1 0 -1\\r\\n1 0 1\\r\\n1 -1 -5\\r\\n1 6 4\\r\\n1 -8 8\\r\\n2 6 -1\\r\\n2 6 1\\r\\n2 1 0\\r\\n2 1 -1\\r\\n2 1 1\\r\\n2 6 0\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '11\\r\\n1 5 4\\r\\n1 5 6\\r\\n1 4 0\\r\\n1 11 9\\r\\n1 -3 13\\r\\n2 11 4\\r\\n2 11 6\\r\\n2 6 5\\r\\n2 6 4\\r\\n2 6 6\\r\\n2 11 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -2 -1000000\\r\\n1 -1 -1000000\\r\\n1 -1 -999999\\r\\n1 1 1000000\\r\\n1 -231100 1000000\\r\\n2 0 0\\r\\n2 1 999999\\r\\n', 'output': ['YES\\r\\nNO\\r\\n']}, {'input': '10\\r\\n1 -1000000 -1000000\\r\\n1 -999999 -1000000\\r\\n1 999999 1000000\\r\\n1 1000000 1000000\\r\\n2 0 0\\r\\n2 1000000 999999\\r\\n2 999999 1000000\\r\\n2 999999 999999\\r\\n2 999999 999998\\r\\n2 999999 999997\\r\\n', 'output': ['YES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '9\\r\\n1 -2 -4\\r\\n1 2 4\\r\\n1 -3 3\\r\\n2 -1 -2\\r\\n2 -4 -8\\r\\n2 -3 -6\\r\\n2 1 2\\r\\n2 4 8\\r\\n2 3 6\\r\\n', 'output': ['YES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '16\\r\\n1 -10000 0\\r\\n1 10000 0\\r\\n1 0 -1\\r\\n2 50000 0\\r\\n2 -50000 0\\r\\n2 49000 0\\r\\n2 -49000 0\\r\\n2 27000 0\\r\\n2 -27000 0\\r\\n1 0 1\\r\\n2 50000 0\\r\\n2 -50000 0\\r\\n2 49000 0\\r\\n2 -49000 0\\r\\n2 27000 0\\r\\n2 -27000 0\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -7000 -9000\\r\\n1 7000 9000\\r\\n1 7000 -7000\\r\\n2 21 27\\r\\n2 -21 -27\\r\\n2 7007 9009\\r\\n2 -7007 -9009\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -7000 -9000\\r\\n1 7000 9000\\r\\n1 -7000 7000\\r\\n2 21 27\\r\\n2 -21 -27\\r\\n2 7007 9009\\r\\n2 -7007 -9009\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -9000 7000\\r\\n1 9000 -7000\\r\\n1 7000 7000\\r\\n2 -27 21\\r\\n2 27 -21\\r\\n2 -9009 7007\\r\\n2 9009 -7007\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -9000 7000\\r\\n1 9000 -7000\\r\\n1 -7000 -7000\\r\\n2 -27 21\\r\\n2 27 -21\\r\\n2 -9009 7007\\r\\n2 9009 -7007\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 7 6\\r\\n1 0 5\\r\\n1 0 4\\r\\n1 2 5\\r\\n1 8 0\\r\\n1 6 4\\r\\n1 1 1\\r\\n1 8 4\\r\\n2 1 1\\r\\n2 2 7\\r\\n1 2 3\\r\\n1 4 2\\r\\n2 4 3\\r\\n1 3 2\\r\\n1 7 2\\r\\n1 1 0\\r\\n2 3 5\\r\\n1 6 5\\r\\n2 5 7\\r\\n2 1 1\\r\\n2 3 2\\r\\n1 6 2\\r\\n2 6 0\\r\\n2 8 8\\r\\n1 4 6\\r\\n1 3 5\\r\\n2 3 8\\r\\n2 0 5\\r\\n2 1 6\\r\\n1 8 3\\r\\n1 2 2\\r\\n1 8 2\\r\\n1 6 8\\r\\n1 1 3\\r\\n1 3 3\\r\\n1 5 5\\r\\n2 2 0\\r\\n2 6 7\\r\\n2 1 6\\r\\n2 6 4\\r\\n', 'output': ['YES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 3 8\\r\\n1 6 7\\r\\n1 7 7\\r\\n2 5 5\\r\\n1 4 0\\r\\n1 0 0\\r\\n2 7 3\\r\\n1 0 2\\r\\n2 8 2\\r\\n2 5 1\\r\\n2 1 2\\r\\n2 1 5\\r\\n1 1 3\\r\\n1 7 1\\r\\n1 8 7\\r\\n1 2 4\\r\\n1 2 8\\r\\n2 8 5\\r\\n2 8 6\\r\\n1 2 1\\r\\n1 5 6\\r\\n1 2 3\\r\\n2 4 3\\r\\n1 8 3\\r\\n1 1 5\\r\\n2 2 2\\r\\n2 8 5\\r\\n1 0 7\\r\\n1 7 2\\r\\n1 5 5\\r\\n1 8 4\\r\\n1 4 1\\r\\n2 3 2\\r\\n2 6 0\\r\\n2 8 7\\r\\n2 5 7\\r\\n1 3 0\\r\\n2 1 0\\r\\n2 0 7\\r\\n2 5 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 2 8\\r\\n1 3 8\\r\\n1 7 4\\r\\n1 4 5\\r\\n1 4 1\\r\\n2 6 6\\r\\n2 5 8\\r\\n1 5 4\\r\\n1 7 8\\r\\n2 1 3\\r\\n2 6 1\\r\\n2 8 2\\r\\n2 6 8\\r\\n1 4 3\\r\\n2 2 8\\r\\n2 0 6\\r\\n1 0 3\\r\\n2 0 3\\r\\n1 6 6\\r\\n1 5 8\\r\\n1 5 5\\r\\n1 1 2\\r\\n2 6 7\\r\\n1 4 8\\r\\n2 1 2\\r\\n2 2 7\\r\\n2 2 3\\r\\n1 8 4\\r\\n2 8 4\\r\\n2 6 5\\r\\n1 8 2\\r\\n2 7 2\\r\\n2 3 5\\r\\n1 4 0\\r\\n2 6 2\\r\\n2 3 7\\r\\n1 4 6\\r\\n1 8 6\\r\\n1 0 5\\r\\n2 2 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 4 0\\r\\n1 7 1\\r\\n1 8 0\\r\\n1 1 2\\r\\n1 1 8\\r\\n1 6 1\\r\\n2 5 2\\r\\n1 7 7\\r\\n1 6 5\\r\\n2 8 1\\r\\n2 8 7\\r\\n1 7 8\\r\\n2 3 5\\r\\n2 6 6\\r\\n1 4 2\\r\\n1 8 3\\r\\n2 6 8\\r\\n1 4 8\\r\\n2 4 6\\r\\n2 1 7\\r\\n1 4 3\\r\\n2 0 8\\r\\n1 5 2\\r\\n2 5 5\\r\\n2 1 6\\r\\n1 5 5\\r\\n1 1 5\\r\\n2 3 3\\r\\n2 0 1\\r\\n1 1 0\\r\\n2 1 4\\r\\n2 3 6\\r\\n1 4 6\\r\\n2 7 6\\r\\n1 4 4\\r\\n1 7 6\\r\\n1 6 8\\r\\n2 1 1\\r\\n1 0 1\\r\\n2 0 2\\r\\n', 'output': ['YES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 3 0\\r\\n1 1 4\\r\\n1 2 7\\r\\n2 4 0\\r\\n1 0 5\\r\\n1 7 5\\r\\n2 6 3\\r\\n1 0 7\\r\\n2 5 7\\r\\n1 1 0\\r\\n2 0 6\\r\\n1 6 8\\r\\n1 3 5\\r\\n1 8 5\\r\\n1 0 6\\r\\n2 7 0\\r\\n1 4 6\\r\\n1 5 2\\r\\n2 6 2\\r\\n1 7 0\\r\\n2 6 3\\r\\n1 3 7\\r\\n2 4 2\\r\\n2 1 4\\r\\n1 1 3\\r\\n1 5 0\\r\\n2 0 7\\r\\n2 6 8\\r\\n1 4 0\\r\\n2 5 0\\r\\n2 3 2\\r\\n2 6 7\\r\\n1 7 2\\r\\n1 0 3\\r\\n1 6 6\\r\\n2 4 0\\r\\n2 2 4\\r\\n1 6 5\\r\\n2 0 8\\r\\n2 0 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 0 3\\r\\n1 6 0\\r\\n1 8 7\\r\\n2 2 6\\r\\n2 7 2\\r\\n2 7 5\\r\\n1 4 7\\r\\n1 2 3\\r\\n2 2 7\\r\\n2 3 1\\r\\n1 3 5\\r\\n1 8 5\\r\\n2 6 8\\r\\n1 2 8\\r\\n2 4 6\\r\\n1 7 3\\r\\n1 3 3\\r\\n2 2 4\\r\\n1 5 0\\r\\n1 5 6\\r\\n1 1 7\\r\\n2 3 3\\r\\n1 8 6\\r\\n2 7 4\\r\\n1 7 8\\r\\n1 5 8\\r\\n2 3 8\\r\\n1 6 6\\r\\n2 8 5\\r\\n1 5 1\\r\\n2 4 2\\r\\n1 7 7\\r\\n2 4 8\\r\\n1 6 1\\r\\n1 1 5\\r\\n2 1 8\\r\\n2 4 3\\r\\n1 5 5\\r\\n1 4 0\\r\\n2 0 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 5 2\\r\\n1 5 6\\r\\n1 2 1\\r\\n2 7 2\\r\\n2 6 2\\r\\n2 0 8\\r\\n2 0 6\\r\\n1 6 8\\r\\n1 2 0\\r\\n1 0 5\\r\\n2 3 0\\r\\n1 3 8\\r\\n2 8 6\\r\\n1 0 3\\r\\n1 8 8\\r\\n2 1 1\\r\\n1 1 4\\r\\n1 1 3\\r\\n2 0 0\\r\\n2 5 6\\r\\n1 0 0\\r\\n2 0 0\\r\\n1 2 7\\r\\n2 0 0\\r\\n2 3 6\\r\\n1 3 3\\r\\n1 3 2\\r\\n1 5 3\\r\\n1 7 8\\r\\n1 7 4\\r\\n1 8 7\\r\\n1 7 3\\r\\n2 0 3\\r\\n1 4 4\\r\\n2 5 0\\r\\n1 6 6\\r\\n1 8 0\\r\\n2 6 2\\r\\n2 4 8\\r\\n2 7 2\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 1 4\\r\\n1 1 5\\r\\n1 3 5\\r\\n2 8 2\\r\\n2 5 2\\r\\n1 7 3\\r\\n1 8 1\\r\\n2 6 5\\r\\n1 4 3\\r\\n1 2 4\\r\\n1 2 3\\r\\n2 8 3\\r\\n2 3 5\\r\\n2 2 0\\r\\n1 6 7\\r\\n2 2 8\\r\\n1 3 0\\r\\n2 5 1\\r\\n2 2 1\\r\\n1 4 5\\r\\n2 1 6\\r\\n1 8 5\\r\\n2 7 4\\r\\n2 2 0\\r\\n1 3 2\\r\\n1 2 2\\r\\n1 8 3\\r\\n2 3 4\\r\\n1 7 6\\r\\n1 3 7\\r\\n1 5 3\\r\\n1 2 0\\r\\n2 5 7\\r\\n2 0 7\\r\\n2 3 2\\r\\n2 1 0\\r\\n1 6 0\\r\\n2 8 5\\r\\n1 3 4\\r\\n2 0 3\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 8 7\\r\\n1 0 6\\r\\n1 5 0\\r\\n2 6 7\\r\\n2 6 8\\r\\n1 3 5\\r\\n1 6 7\\r\\n1 0 0\\r\\n2 1 7\\r\\n1 2 3\\r\\n2 4 3\\r\\n2 5 5\\r\\n1 4 7\\r\\n2 2 0\\r\\n1 2 4\\r\\n1 4 2\\r\\n1 0 8\\r\\n2 0 3\\r\\n1 8 8\\r\\n2 8 1\\r\\n2 8 6\\r\\n2 4 8\\r\\n1 4 0\\r\\n1 6 6\\r\\n2 0 0\\r\\n1 6 2\\r\\n2 5 1\\r\\n1 3 0\\r\\n1 5 6\\r\\n1 8 1\\r\\n1 3 4\\r\\n1 1 3\\r\\n1 5 1\\r\\n1 5 7\\r\\n1 6 8\\r\\n1 1 5\\r\\n1 1 1\\r\\n1 6 1\\r\\n1 1 4\\r\\n2 7 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 2 8\\r\\n1 4 0\\r\\n1 0 6\\r\\n2 3 8\\r\\n2 4 5\\r\\n1 5 0\\r\\n2 7 6\\r\\n2 6 1\\r\\n2 1 7\\r\\n1 1 2\\r\\n1 5 4\\r\\n1 7 3\\r\\n2 6 4\\r\\n1 3 0\\r\\n2 2 8\\r\\n1 8 2\\r\\n1 8 8\\r\\n1 7 8\\r\\n2 2 5\\r\\n2 2 3\\r\\n2 4 6\\r\\n2 0 2\\r\\n2 6 7\\r\\n2 2 8\\r\\n1 8 3\\r\\n2 5 5\\r\\n1 4 8\\r\\n1 7 1\\r\\n2 7 3\\r\\n2 4 5\\r\\n2 1 1\\r\\n2 4 2\\r\\n1 1 1\\r\\n2 4 0\\r\\n1 2 4\\r\\n2 7 0\\r\\n1 4 1\\r\\n1 7 5\\r\\n1 6 6\\r\\n2 7 8\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 6 3\\r\\n1 5 3\\r\\n1 3 4\\r\\n1 2 3\\r\\n2 2 5\\r\\n1 6 1\\r\\n2 3 7\\r\\n1 0 0\\r\\n1 8 7\\r\\n1 3 8\\r\\n1 0 8\\r\\n1 3 5\\r\\n1 4 5\\r\\n1 0 5\\r\\n2 8 1\\r\\n2 4 7\\r\\n2 3 2\\r\\n1 6 4\\r\\n2 2 3\\r\\n2 6 3\\r\\n1 0 2\\r\\n2 1 2\\r\\n2 6 2\\r\\n1 5 7\\r\\n2 7 0\\r\\n1 4 8\\r\\n1 4 6\\r\\n2 8 7\\r\\n2 0 7\\r\\n1 7 8\\r\\n2 0 3\\r\\n1 5 5\\r\\n1 6 2\\r\\n2 4 5\\r\\n1 2 5\\r\\n2 3 3\\r\\n2 1 1\\r\\n1 8 3\\r\\n1 6 5\\r\\n2 5 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 6 5\\r\\n1 4 8\\r\\n1 5 7\\r\\n1 3 1\\r\\n2 4 2\\r\\n1 4 3\\r\\n1 0 7\\r\\n2 4 6\\r\\n2 4 2\\r\\n1 0 3\\r\\n2 1 5\\r\\n2 5 6\\r\\n1 8 8\\r\\n1 1 7\\r\\n1 3 3\\r\\n2 6 7\\r\\n1 7 4\\r\\n1 0 2\\r\\n1 8 4\\r\\n2 4 5\\r\\n2 0 7\\r\\n1 4 1\\r\\n1 4 4\\r\\n1 5 3\\r\\n1 1 0\\r\\n1 4 5\\r\\n2 1 4\\r\\n1 0 6\\r\\n2 1 0\\r\\n1 5 5\\r\\n2 5 6\\r\\n2 8 2\\r\\n2 1 7\\r\\n2 8 1\\r\\n2 0 5\\r\\n1 0 4\\r\\n1 6 6\\r\\n2 1 1\\r\\n1 8 0\\r\\n2 6 3\\r\\n', 'output': ['NO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 1 7\\r\\n1 3 3\\r\\n1 6 5\\r\\n1 7 3\\r\\n1 2 8\\r\\n1 3 0\\r\\n2 0 0\\r\\n1 7 7\\r\\n2 6 8\\r\\n2 6 0\\r\\n2 4 7\\r\\n1 7 8\\r\\n2 0 7\\r\\n2 0 5\\r\\n1 6 2\\r\\n1 7 1\\r\\n1 1 1\\r\\n2 4 8\\r\\n2 2 1\\r\\n2 7 0\\r\\n2 5 4\\r\\n1 2 4\\r\\n2 1 3\\r\\n2 0 5\\r\\n2 5 5\\r\\n2 1 4\\r\\n2 5 5\\r\\n1 2 6\\r\\n1 4 4\\r\\n2 0 8\\r\\n1 0 6\\r\\n2 0 5\\r\\n2 4 6\\r\\n2 8 1\\r\\n2 2 0\\r\\n2 3 3\\r\\n1 0 4\\r\\n1 3 7\\r\\n2 3 2\\r\\n2 3 7\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 2 7\\r\\n1 6 5\\r\\n1 2 0\\r\\n2 4 5\\r\\n1 1 0\\r\\n2 3 4\\r\\n1 7 3\\r\\n2 8 1\\r\\n2 0 0\\r\\n2 2 0\\r\\n1 7 4\\r\\n1 6 3\\r\\n2 8 1\\r\\n2 6 0\\r\\n1 4 7\\r\\n2 4 2\\r\\n1 4 5\\r\\n2 3 7\\r\\n2 6 8\\r\\n2 2 6\\r\\n2 7 4\\r\\n1 0 6\\r\\n2 1 7\\r\\n1 4 4\\r\\n2 2 3\\r\\n1 1 3\\r\\n1 8 5\\r\\n1 0 5\\r\\n1 1 1\\r\\n1 4 3\\r\\n2 5 3\\r\\n1 3 6\\r\\n1 7 0\\r\\n2 5 6\\r\\n2 5 6\\r\\n1 0 7\\r\\n2 7 0\\r\\n2 6 4\\r\\n1 3 7\\r\\n2 2 2\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 4 4\\r\\n1 2 6\\r\\n1 8 2\\r\\n2 4 6\\r\\n1 5 4\\r\\n2 5 8\\r\\n2 6 7\\r\\n2 4 8\\r\\n1 1 0\\r\\n1 3 1\\r\\n1 0 3\\r\\n1 8 1\\r\\n1 3 0\\r\\n2 7 4\\r\\n1 2 0\\r\\n1 8 5\\r\\n1 6 2\\r\\n2 2 0\\r\\n1 0 4\\r\\n1 1 1\\r\\n1 4 5\\r\\n2 8 3\\r\\n2 1 0\\r\\n2 5 5\\r\\n1 3 4\\r\\n2 0 7\\r\\n1 4 3\\r\\n1 7 0\\r\\n2 3 8\\r\\n1 0 1\\r\\n1 0 7\\r\\n2 4 1\\r\\n1 0 6\\r\\n2 1 2\\r\\n1 5 7\\r\\n2 7 2\\r\\n2 7 3\\r\\n1 3 6\\r\\n2 7 3\\r\\n2 7 0\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 0 8\\r\\n1 3 5\\r\\n1 0 2\\r\\n1 8 0\\r\\n1 5 3\\r\\n1 5 2\\r\\n2 8 2\\r\\n2 7 6\\r\\n1 6 1\\r\\n2 2 7\\r\\n2 6 5\\r\\n1 3 7\\r\\n2 7 8\\r\\n1 2 4\\r\\n1 4 2\\r\\n2 5 7\\r\\n2 0 6\\r\\n1 3 1\\r\\n2 2 3\\r\\n1 5 7\\r\\n2 2 8\\r\\n1 7 1\\r\\n1 3 0\\r\\n2 5 5\\r\\n1 7 4\\r\\n2 5 5\\r\\n1 2 0\\r\\n2 4 3\\r\\n2 8 1\\r\\n2 8 0\\r\\n1 2 6\\r\\n1 7 5\\r\\n2 4 8\\r\\n1 2 3\\r\\n2 6 6\\r\\n1 7 8\\r\\n2 7 5\\r\\n2 7 4\\r\\n1 8 1\\r\\n2 5 6\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 1 3\\r\\n1 7 2\\r\\n1 6 2\\r\\n2 0 8\\r\\n2 3 8\\r\\n2 0 3\\r\\n1 5 8\\r\\n2 7 1\\r\\n1 8 1\\r\\n2 8 7\\r\\n1 5 5\\r\\n2 2 4\\r\\n2 3 3\\r\\n2 2 4\\r\\n1 0 1\\r\\n1 2 0\\r\\n1 7 4\\r\\n2 7 4\\r\\n2 5 5\\r\\n1 1 1\\r\\n2 6 4\\r\\n2 1 7\\r\\n2 5 0\\r\\n1 8 0\\r\\n2 6 2\\r\\n1 7 1\\r\\n2 8 6\\r\\n1 8 7\\r\\n2 2 5\\r\\n1 7 3\\r\\n1 5 6\\r\\n1 4 0\\r\\n2 3 8\\r\\n2 8 6\\r\\n1 7 0\\r\\n2 3 5\\r\\n2 6 1\\r\\n1 2 6\\r\\n1 1 2\\r\\n2 7 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 4 4\\r\\n1 2 6\\r\\n1 7 2\\r\\n2 1 4\\r\\n2 0 2\\r\\n1 5 4\\r\\n2 5 1\\r\\n1 0 8\\r\\n1 1 7\\r\\n2 2 0\\r\\n1 8 4\\r\\n2 6 5\\r\\n2 8 0\\r\\n1 6 5\\r\\n2 8 7\\r\\n2 0 0\\r\\n2 4 0\\r\\n2 7 2\\r\\n2 6 8\\r\\n1 7 8\\r\\n2 8 8\\r\\n2 4 7\\r\\n1 7 1\\r\\n2 8 8\\r\\n1 5 8\\r\\n1 3 6\\r\\n1 4 6\\r\\n1 3 5\\r\\n2 6 1\\r\\n2 1 3\\r\\n2 8 4\\r\\n2 8 5\\r\\n2 1 3\\r\\n2 7 1\\r\\n2 5 8\\r\\n1 8 2\\r\\n2 6 1\\r\\n1 7 4\\r\\n1 8 5\\r\\n2 6 4\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 2 1\\r\\n1 4 7\\r\\n1 1 1\\r\\n1 2 4\\r\\n2 4 4\\r\\n1 4 4\\r\\n2 0 6\\r\\n2 7 6\\r\\n1 4 0\\r\\n2 6 5\\r\\n2 5 2\\r\\n1 6 1\\r\\n2 7 0\\r\\n1 6 2\\r\\n2 3 2\\r\\n1 0 6\\r\\n2 7 0\\r\\n1 8 6\\r\\n2 1 3\\r\\n2 0 1\\r\\n1 2 5\\r\\n1 0 2\\r\\n2 4 2\\r\\n2 6 8\\r\\n2 2 0\\r\\n2 5 7\\r\\n2 6 0\\r\\n1 2 2\\r\\n2 0 3\\r\\n1 7 4\\r\\n2 7 3\\r\\n1 4 1\\r\\n2 2 6\\r\\n2 8 2\\r\\n1 8 3\\r\\n1 8 7\\r\\n1 0 3\\r\\n1 7 0\\r\\n2 2 1\\r\\n2 6 4\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 3 7\\r\\n1 5 8\\r\\n1 4 4\\r\\n1 8 1\\r\\n1 4 6\\r\\n1 6 6\\r\\n2 5 0\\r\\n2 3 4\\r\\n1 5 3\\r\\n2 0 7\\r\\n2 3 1\\r\\n1 5 4\\r\\n1 3 4\\r\\n2 3 4\\r\\n2 8 2\\r\\n1 0 1\\r\\n1 0 8\\r\\n2 3 8\\r\\n1 0 4\\r\\n2 4 6\\r\\n1 7 3\\r\\n2 4 0\\r\\n1 2 3\\r\\n2 8 1\\r\\n2 8 4\\r\\n1 7 0\\r\\n2 2 6\\r\\n2 2 2\\r\\n1 2 2\\r\\n1 6 5\\r\\n1 7 1\\r\\n2 5 1\\r\\n1 2 4\\r\\n2 3 2\\r\\n1 8 4\\r\\n1 7 4\\r\\n1 1 2\\r\\n1 3 2\\r\\n2 7 3\\r\\n2 4 4\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 1 0\\r\\n1 0 7\\r\\n1 8 4\\r\\n2 1 6\\r\\n2 1 2\\r\\n1 0 0\\r\\n1 1 1\\r\\n2 5 2\\r\\n1 8 5\\r\\n1 0 6\\r\\n2 6 8\\r\\n1 4 2\\r\\n1 8 3\\r\\n2 2 3\\r\\n1 6 3\\r\\n2 6 0\\r\\n1 5 3\\r\\n2 0 5\\r\\n1 3 4\\r\\n2 4 4\\r\\n1 8 6\\r\\n1 1 2\\r\\n1 5 7\\r\\n1 5 1\\r\\n1 3 8\\r\\n2 7 0\\r\\n1 7 2\\r\\n1 3 3\\r\\n2 6 5\\r\\n2 5 0\\r\\n2 2 4\\r\\n2 5 5\\r\\n2 4 6\\r\\n1 6 1\\r\\n1 5 2\\r\\n2 7 5\\r\\n1 8 7\\r\\n1 1 6\\r\\n1 4 8\\r\\n2 8 5\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 8 1\\r\\n1 8 6\\r\\n1 1 1\\r\\n2 5 4\\r\\n2 7 8\\r\\n1 6 2\\r\\n1 7 4\\r\\n1 4 4\\r\\n2 3 7\\r\\n1 6 3\\r\\n2 0 1\\r\\n1 8 0\\r\\n2 0 3\\r\\n1 6 0\\r\\n1 3 4\\r\\n1 1 8\\r\\n1 3 3\\r\\n2 3 1\\r\\n2 4 0\\r\\n1 4 3\\r\\n2 1 3\\r\\n2 5 4\\r\\n1 8 5\\r\\n2 1 0\\r\\n1 4 7\\r\\n2 5 3\\r\\n2 4 1\\r\\n1 4 0\\r\\n1 6 8\\r\\n1 5 1\\r\\n2 8 3\\r\\n2 5 7\\r\\n1 3 2\\r\\n1 7 5\\r\\n1 7 3\\r\\n1 0 8\\r\\n1 7 8\\r\\n2 7 3\\r\\n2 6 7\\r\\n2 4 2\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '50\\r\\n1 58 -49\\r\\n1 -77 -90\\r\\n1 32 -52\\r\\n1 -89 -31\\r\\n1 99 -34\\r\\n1 -3 -59\\r\\n2 65 93\\r\\n2 67 -51\\r\\n2 25 -47\\r\\n1 -72 86\\r\\n2 48 -45\\r\\n2 64 -70\\r\\n2 -96 -43\\r\\n2 87 -58\\r\\n2 3 21\\r\\n2 39 -57\\r\\n1 -58 49\\r\\n2 -1 87\\r\\n2 -63 19\\r\\n2 -27 90\\r\\n2 31 3\\r\\n1 55 41\\r\\n1 90 39\\r\\n1 -53 28\\r\\n2 49 -51\\r\\n2 6 42\\r\\n1 50 15\\r\\n2 21 -2\\r\\n2 -6 70\\r\\n1 -13 -61\\r\\n2 -60 -69\\r\\n1 -22 33\\r\\n1 -22 17\\r\\n2 30 -98\\r\\n2 -56 -48\\r\\n2 -84 -77\\r\\n2 49 56\\r\\n1 81 29\\r\\n1 26 29\\r\\n1 -14 20\\r\\n2 -37 83\\r\\n1 -91 96\\r\\n2 57 19\\r\\n1 94 54\\r\\n2 25 -30\\r\\n1 92 5\\r\\n2 -48 51\\r\\n2 81 23\\r\\n1 39 -47\\r\\n2 34 89\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '50\\r\\n1 7 -8\\r\\n1 -30 -28\\r\\n1 -8 2\\r\\n1 -28 -29\\r\\n2 -8 -21\\r\\n2 -23 19\\r\\n2 -23 18\\r\\n1 6 27\\r\\n2 -17 20\\r\\n1 9 -5\\r\\n2 -27 29\\r\\n1 -8 27\\r\\n2 13 12\\r\\n2 -29 13\\r\\n2 -30 8\\r\\n2 -30 -8\\r\\n1 -24 -21\\r\\n1 -14 -15\\r\\n2 -23 14\\r\\n2 -12 -13\\r\\n1 15 -24\\r\\n1 28 6\\r\\n2 -20 -21\\r\\n1 -8 -13\\r\\n1 -15 -15\\r\\n1 11 20\\r\\n2 24 -26\\r\\n1 -30 -11\\r\\n2 -17 18\\r\\n1 -17 6\\r\\n2 5 -9\\r\\n2 -29 8\\r\\n2 -29 1\\r\\n2 10 24\\r\\n2 29 27\\r\\n2 -12 21\\r\\n2 5 -28\\r\\n2 28 27\\r\\n2 -4 -4\\r\\n1 -24 29\\r\\n1 17 -1\\r\\n1 0 17\\r\\n1 -2 -1\\r\\n2 -7 -10\\r\\n1 5 -16\\r\\n2 -3 -26\\r\\n2 -7 17\\r\\n1 -27 -26\\r\\n1 -3 -30\\r\\n2 28 -15\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '10\\r\\n1 0 0\\r\\n1 6 0\\r\\n1 0 6\\r\\n2 0 0\\r\\n2 6 0\\r\\n2 0 6\\r\\n2 3 3\\r\\n2 3 0\\r\\n2 0 3\\r\\n2 2 2\\r\\n', 'output': ['YES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '50\\r\\n1 33 -21\\r\\n1 9 82\\r\\n1 -69 -54\\r\\n2 -3 84\\r\\n1 -9 -28\\r\\n2 -54 87\\r\\n2 26 -64\\r\\n2 8 52\\r\\n2 98 63\\r\\n2 -77 10\\r\\n2 -52 -46\\r\\n1 92 42\\r\\n2 -53 -69\\r\\n2 -48 44\\r\\n1 -52 90\\r\\n2 56 29\\r\\n2 -100 -13\\r\\n2 -23 1\\r\\n2 6 91\\r\\n2 53 -38\\r\\n1 48 -35\\r\\n2 19 -62\\r\\n2 -62 49\\r\\n1 59 78\\r\\n2 85 72\\r\\n2 28 76\\r\\n2 46 -91\\r\\n2 6 32\\r\\n2 -16 -59\\r\\n1 40 -53\\r\\n2 -6 87\\r\\n2 -79 -58\\r\\n2 -12 25\\r\\n2 73 49\\r\\n1 57 -42\\r\\n2 12 19\\r\\n1 -60 -5\\r\\n1 -40 -20\\r\\n1 90 35\\r\\n2 10 3\\r\\n2 63 -49\\r\\n1 50 10\\r\\n1 0 77\\r\\n1 92 24\\r\\n1 71 -7\\r\\n2 46 22\\r\\n1 19 81\\r\\n1 -3 -71\\r\\n2 -44 56\\r\\n2 92 34\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 3 3\\r\\n1 3 1\\r\\n1 0 1\\r\\n2 3 0\\r\\n2 6 5\\r\\n2 1 5\\r\\n2 8 3\\r\\n2 0 5\\r\\n2 3 4\\r\\n1 7 6\\r\\n1 1 0\\r\\n1 0 8\\r\\n1 3 7\\r\\n2 4 5\\r\\n2 2 5\\r\\n2 2 0\\r\\n1 7 4\\r\\n2 7 3\\r\\n1 5 0\\r\\n1 4 6\\r\\n1 1 5\\r\\n1 7 8\\r\\n2 7 5\\r\\n1 0 4\\r\\n2 3 8\\r\\n1 1 8\\r\\n1 0 5\\r\\n1 4 8\\r\\n2 8 5\\r\\n1 8 5\\r\\n2 3 6\\r\\n1 8 7\\r\\n2 4 3\\r\\n1 5 2\\r\\n2 2 8\\r\\n2 5 3\\r\\n2 4 0\\r\\n1 4 4\\r\\n1 6 5\\r\\n2 2 7\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}]", "source_code": "import java.util.*;\n\npublic class A {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int q = sc.nextInt(), p1[][] = new int [2][3], p2[] = new int [3], p3[] = new int [3], flag = 1, ans, x1 = 0, x2 = 0, \n        \tx3 = 0, y1 = 0, y2 = 0, y3 = 0;\n        String a = \"\";\n        while(q-- > 0) {\n        \tint x = sc.nextInt(), y = sc.nextInt();\n        \tif(x == 1) {\n        \t\tfor(int i = 0; i < 3; i++) {\n        \t\t\tp1[flag][i] = sc.nextInt();\n        \t\t\tif(flag == 1) {\n        \t\t\t\tx1 = p1[flag][0];\n        \t\t\t\ty1 = p1[flag][1];\n        \t\t\t\tflag++;\n        \t\t\t}\n        \t\t}\n        \t\t\n        \t}\n        \telse {\n        \t\tp2[0] = x1; p2[1] = y1; p2[2] = x2;\n        \t\tp3[0] = x1; p3[1] = y1; p3[2] = x3;\n        \t\tans = cross(p2, p3);\n        \t\t\n        \t\tp2[0] = x1; p2[1] = y1; p2[2] = x;\n        \t\tp3[0] = x3; p3[1] = y3; p3[2] = x;\n        \t\tif(((cross(p2, p3) > 0 && ans > 0) || (cross(p2, p3) < 0 && ans < 0)) && (y >= Math.min(y1, y3) && y <= Math.max(y1, y3))) {\n        \t\t\tx2 = x; y2 = y; a = \"YES\";\n        \t\t}\n        \t\telse\n        \t\t\ta = \"NO\";\n        \t\t\n        \t\tp2[0] = x3; p2[1] = y3; p2[2] = x;\n        \t\tp3[0] = x2; p3[1] = y2; p3[2] = x;\n        \t\tif(((cross(p2, p3) > 0 && ans > 0) || (cross(p2, p3) < 0 && ans < 0)) && (y >= Math.min(y3, y2) && y <= Math.max(y2, y3))) {\n        \t\t\tx3 = x; y3 = y; a = \"YES\";\n        \t\t}\n        \t\telse\n        \t\t\ta = \"NO\";\n        \t\tSystem.out.print(a);\n        \t}\n        \tSystem.out.print(\"\\n\");\n        \ta = \"\";\n        }\n    }\n    static int cross(int x1[], int x2[] ) {\n        return (x1[0]-x2[0])*(x1[1]+x2[1]);\n    }\n}\n\n    \t"}
{"src_uid": "6220f4058f9325dfb211fb1dd86e9464", "id": 119, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2700, "testcases": "[{'input': '8\\r\\n1 0 0\\r\\n1 2 0\\r\\n1 2 2\\r\\n2 1 0\\r\\n1 0 2\\r\\n2 1 1\\r\\n2 2 1\\r\\n2 20 -1\\r\\n', 'output': ['YES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 0 0\\r\\n1 5 0\\r\\n1 0 5\\r\\n2 1 1\\r\\n2 10 10\\r\\n1 2 10\\r\\n2 1 1\\r\\n', 'output': ['YES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '5\\r\\n1 2 -2\\r\\n1 -2 2\\r\\n1 1 5\\r\\n2 3 -1\\r\\n2 3 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\n']}, {'input': '5\\r\\n1 -1 0\\r\\n1 1 0\\r\\n1 0 2\\r\\n2 0 1\\r\\n2 0 3\\r\\n', 'output': ['YES\\r\\nNO\\r\\n']}, {'input': '6\\r\\n1 -2 0\\r\\n1 2 0\\r\\n1 0 2\\r\\n2 4 0\\r\\n2 1 0\\r\\n2 2 0\\r\\n', 'output': ['NO\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '11\\r\\n1 0 -1\\r\\n1 0 1\\r\\n1 1 -1\\r\\n1 -1 -5\\r\\n1 0 5\\r\\n2 5 1\\r\\n2 5 0\\r\\n2 5 -1\\r\\n2 0 0\\r\\n2 0 10\\r\\n2 0 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '30\\r\\n1 -37 889\\r\\n1 771 -764\\r\\n1 -119 938\\r\\n1 599 868\\r\\n1 56 161\\r\\n1 -67 86\\r\\n2 -692 99\\r\\n2 -995 158\\r\\n2 410 116\\r\\n1 -49 -864\\r\\n2 30 -580\\r\\n1 -930 454\\r\\n1 -706 301\\r\\n2 547 -606\\r\\n2 -252 -55\\r\\n2 662 152\\r\\n2 -621 -920\\r\\n1 -128 -595\\r\\n1 -401 -265\\r\\n1 434 388\\r\\n2 299 173\\r\\n1 104 -298\\r\\n1 -693 557\\r\\n2 840 -179\\r\\n2 382 -8\\r\\n1 461 618\\r\\n1 -928 628\\r\\n2 193 -972\\r\\n2 218 945\\r\\n2 490 571\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '30\\r\\n1 -619 -234\\r\\n1 -140 -846\\r\\n1 762 -792\\r\\n2 153 29\\r\\n1 -353 627\\r\\n2 -544 -418\\r\\n2 -922 -965\\r\\n1 -620 -692\\r\\n1 -34 295\\r\\n2 -326 -604\\r\\n2 -906 -867\\r\\n2 57 -690\\r\\n1 -87 -822\\r\\n2 -569 739\\r\\n2 -92 -927\\r\\n2 279 806\\r\\n1 -364 19\\r\\n2 -214 -629\\r\\n2 -283 662\\r\\n2 -324 650\\r\\n1 92 -511\\r\\n2 654 -597\\r\\n1 -87 747\\r\\n2 795 46\\r\\n2 870 -157\\r\\n2 -11 520\\r\\n1 -162 -686\\r\\n2 290 -660\\r\\n2 -660 780\\r\\n2 946 910\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '30\\r\\n1 -702 -823\\r\\n1 -330 -896\\r\\n1 -564 90\\r\\n1 559 818\\r\\n2 404 716\\r\\n1 -900 -379\\r\\n2 866 -218\\r\\n2 444 615\\r\\n2 -782 -887\\r\\n2 584 -919\\r\\n2 891 775\\r\\n1 117 887\\r\\n2 598 162\\r\\n2 759 -925\\r\\n2 713 -507\\r\\n1 -329 120\\r\\n2 546 185\\r\\n2 399 500\\r\\n1 -611 763\\r\\n1 -956 187\\r\\n2 82 -26\\r\\n2 -877 -906\\r\\n1 293 -637\\r\\n2 -685 -275\\r\\n2 -725 -927\\r\\n1 -627 777\\r\\n1 -609 -563\\r\\n2 402 54\\r\\n1 -106 -908\\r\\n2 175 808\\r\\n', 'output': ['YES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '30\\r\\n1 -64 -994\\r\\n1 -692 366\\r\\n1 -72 847\\r\\n2 -963 -251\\r\\n1 -651 -994\\r\\n1 -523 -861\\r\\n2 553 -129\\r\\n2 17 785\\r\\n2 -584 -880\\r\\n1 105 657\\r\\n1 649 98\\r\\n2 -572 -492\\r\\n1 -38 -481\\r\\n1 540 463\\r\\n1 -468 -540\\r\\n1 -730 100\\r\\n1 606 -119\\r\\n1 -254 -380\\r\\n1 169 280\\r\\n1 319 62\\r\\n1 452 -556\\r\\n1 -653 887\\r\\n1 407 -786\\r\\n2 -632 181\\r\\n1 925 -967\\r\\n2 996 -709\\r\\n1 568 517\\r\\n2 -478 76\\r\\n1 156 621\\r\\n2 -592 899\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '30\\r\\n1 836 -283\\r\\n1 299 629\\r\\n1 434 -481\\r\\n1 -500 -368\\r\\n2 -105 -216\\r\\n2 -617 443\\r\\n2 -579 811\\r\\n1 411 -242\\r\\n1 -652 41\\r\\n1 962 -483\\r\\n1 -732 579\\r\\n2 554 -147\\r\\n1 39 967\\r\\n1 917 -199\\r\\n2 686 397\\r\\n1 444 780\\r\\n1 278 462\\r\\n1 729 -18\\r\\n1 252 -864\\r\\n1 884 -952\\r\\n1 272 689\\r\\n2 366 -389\\r\\n1 443 924\\r\\n1 791 -249\\r\\n2 692 74\\r\\n2 -412 550\\r\\n2 506 -472\\r\\n2 -626 474\\r\\n1 -895 -42\\r\\n2 -390 -971\\r\\n', 'output': ['YES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '12\\r\\n1 0 0\\r\\n1 10 0\\r\\n1 8 1\\r\\n2 11 0\\r\\n1 2 0\\r\\n2 7 0\\r\\n2 9 0\\r\\n2 1 0\\r\\n1 1 1\\r\\n2 10 0\\r\\n2 9 0\\r\\n2 11 0\\r\\n', 'output': ['NO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 1 0\\r\\n1 3 0\\r\\n1 5000 5000\\r\\n2 3 0\\r\\n2 2 0\\r\\n2 4 0\\r\\n2 -1 0\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '4\\r\\n1 1 0\\r\\n1 3 0\\r\\n1 2 2\\r\\n2 4 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n1 1 0\\r\\n1 3 0\\r\\n1 0 8\\r\\n2 4 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '11\\r\\n1 0 -1\\r\\n1 0 1\\r\\n1 -1 -5\\r\\n1 6 4\\r\\n1 -8 8\\r\\n2 6 -1\\r\\n2 6 1\\r\\n2 1 0\\r\\n2 1 -1\\r\\n2 1 1\\r\\n2 6 0\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '11\\r\\n1 5 4\\r\\n1 5 6\\r\\n1 4 0\\r\\n1 11 9\\r\\n1 -3 13\\r\\n2 11 4\\r\\n2 11 6\\r\\n2 6 5\\r\\n2 6 4\\r\\n2 6 6\\r\\n2 11 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -2 -1000000\\r\\n1 -1 -1000000\\r\\n1 -1 -999999\\r\\n1 1 1000000\\r\\n1 -231100 1000000\\r\\n2 0 0\\r\\n2 1 999999\\r\\n', 'output': ['YES\\r\\nNO\\r\\n']}, {'input': '10\\r\\n1 -1000000 -1000000\\r\\n1 -999999 -1000000\\r\\n1 999999 1000000\\r\\n1 1000000 1000000\\r\\n2 0 0\\r\\n2 1000000 999999\\r\\n2 999999 1000000\\r\\n2 999999 999999\\r\\n2 999999 999998\\r\\n2 999999 999997\\r\\n', 'output': ['YES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '9\\r\\n1 -2 -4\\r\\n1 2 4\\r\\n1 -3 3\\r\\n2 -1 -2\\r\\n2 -4 -8\\r\\n2 -3 -6\\r\\n2 1 2\\r\\n2 4 8\\r\\n2 3 6\\r\\n', 'output': ['YES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '16\\r\\n1 -10000 0\\r\\n1 10000 0\\r\\n1 0 -1\\r\\n2 50000 0\\r\\n2 -50000 0\\r\\n2 49000 0\\r\\n2 -49000 0\\r\\n2 27000 0\\r\\n2 -27000 0\\r\\n1 0 1\\r\\n2 50000 0\\r\\n2 -50000 0\\r\\n2 49000 0\\r\\n2 -49000 0\\r\\n2 27000 0\\r\\n2 -27000 0\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -7000 -9000\\r\\n1 7000 9000\\r\\n1 7000 -7000\\r\\n2 21 27\\r\\n2 -21 -27\\r\\n2 7007 9009\\r\\n2 -7007 -9009\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -7000 -9000\\r\\n1 7000 9000\\r\\n1 -7000 7000\\r\\n2 21 27\\r\\n2 -21 -27\\r\\n2 7007 9009\\r\\n2 -7007 -9009\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -9000 7000\\r\\n1 9000 -7000\\r\\n1 7000 7000\\r\\n2 -27 21\\r\\n2 27 -21\\r\\n2 -9009 7007\\r\\n2 9009 -7007\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -9000 7000\\r\\n1 9000 -7000\\r\\n1 -7000 -7000\\r\\n2 -27 21\\r\\n2 27 -21\\r\\n2 -9009 7007\\r\\n2 9009 -7007\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 7 6\\r\\n1 0 5\\r\\n1 0 4\\r\\n1 2 5\\r\\n1 8 0\\r\\n1 6 4\\r\\n1 1 1\\r\\n1 8 4\\r\\n2 1 1\\r\\n2 2 7\\r\\n1 2 3\\r\\n1 4 2\\r\\n2 4 3\\r\\n1 3 2\\r\\n1 7 2\\r\\n1 1 0\\r\\n2 3 5\\r\\n1 6 5\\r\\n2 5 7\\r\\n2 1 1\\r\\n2 3 2\\r\\n1 6 2\\r\\n2 6 0\\r\\n2 8 8\\r\\n1 4 6\\r\\n1 3 5\\r\\n2 3 8\\r\\n2 0 5\\r\\n2 1 6\\r\\n1 8 3\\r\\n1 2 2\\r\\n1 8 2\\r\\n1 6 8\\r\\n1 1 3\\r\\n1 3 3\\r\\n1 5 5\\r\\n2 2 0\\r\\n2 6 7\\r\\n2 1 6\\r\\n2 6 4\\r\\n', 'output': ['YES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 3 8\\r\\n1 6 7\\r\\n1 7 7\\r\\n2 5 5\\r\\n1 4 0\\r\\n1 0 0\\r\\n2 7 3\\r\\n1 0 2\\r\\n2 8 2\\r\\n2 5 1\\r\\n2 1 2\\r\\n2 1 5\\r\\n1 1 3\\r\\n1 7 1\\r\\n1 8 7\\r\\n1 2 4\\r\\n1 2 8\\r\\n2 8 5\\r\\n2 8 6\\r\\n1 2 1\\r\\n1 5 6\\r\\n1 2 3\\r\\n2 4 3\\r\\n1 8 3\\r\\n1 1 5\\r\\n2 2 2\\r\\n2 8 5\\r\\n1 0 7\\r\\n1 7 2\\r\\n1 5 5\\r\\n1 8 4\\r\\n1 4 1\\r\\n2 3 2\\r\\n2 6 0\\r\\n2 8 7\\r\\n2 5 7\\r\\n1 3 0\\r\\n2 1 0\\r\\n2 0 7\\r\\n2 5 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 2 8\\r\\n1 3 8\\r\\n1 7 4\\r\\n1 4 5\\r\\n1 4 1\\r\\n2 6 6\\r\\n2 5 8\\r\\n1 5 4\\r\\n1 7 8\\r\\n2 1 3\\r\\n2 6 1\\r\\n2 8 2\\r\\n2 6 8\\r\\n1 4 3\\r\\n2 2 8\\r\\n2 0 6\\r\\n1 0 3\\r\\n2 0 3\\r\\n1 6 6\\r\\n1 5 8\\r\\n1 5 5\\r\\n1 1 2\\r\\n2 6 7\\r\\n1 4 8\\r\\n2 1 2\\r\\n2 2 7\\r\\n2 2 3\\r\\n1 8 4\\r\\n2 8 4\\r\\n2 6 5\\r\\n1 8 2\\r\\n2 7 2\\r\\n2 3 5\\r\\n1 4 0\\r\\n2 6 2\\r\\n2 3 7\\r\\n1 4 6\\r\\n1 8 6\\r\\n1 0 5\\r\\n2 2 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 4 0\\r\\n1 7 1\\r\\n1 8 0\\r\\n1 1 2\\r\\n1 1 8\\r\\n1 6 1\\r\\n2 5 2\\r\\n1 7 7\\r\\n1 6 5\\r\\n2 8 1\\r\\n2 8 7\\r\\n1 7 8\\r\\n2 3 5\\r\\n2 6 6\\r\\n1 4 2\\r\\n1 8 3\\r\\n2 6 8\\r\\n1 4 8\\r\\n2 4 6\\r\\n2 1 7\\r\\n1 4 3\\r\\n2 0 8\\r\\n1 5 2\\r\\n2 5 5\\r\\n2 1 6\\r\\n1 5 5\\r\\n1 1 5\\r\\n2 3 3\\r\\n2 0 1\\r\\n1 1 0\\r\\n2 1 4\\r\\n2 3 6\\r\\n1 4 6\\r\\n2 7 6\\r\\n1 4 4\\r\\n1 7 6\\r\\n1 6 8\\r\\n2 1 1\\r\\n1 0 1\\r\\n2 0 2\\r\\n', 'output': ['YES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 3 0\\r\\n1 1 4\\r\\n1 2 7\\r\\n2 4 0\\r\\n1 0 5\\r\\n1 7 5\\r\\n2 6 3\\r\\n1 0 7\\r\\n2 5 7\\r\\n1 1 0\\r\\n2 0 6\\r\\n1 6 8\\r\\n1 3 5\\r\\n1 8 5\\r\\n1 0 6\\r\\n2 7 0\\r\\n1 4 6\\r\\n1 5 2\\r\\n2 6 2\\r\\n1 7 0\\r\\n2 6 3\\r\\n1 3 7\\r\\n2 4 2\\r\\n2 1 4\\r\\n1 1 3\\r\\n1 5 0\\r\\n2 0 7\\r\\n2 6 8\\r\\n1 4 0\\r\\n2 5 0\\r\\n2 3 2\\r\\n2 6 7\\r\\n1 7 2\\r\\n1 0 3\\r\\n1 6 6\\r\\n2 4 0\\r\\n2 2 4\\r\\n1 6 5\\r\\n2 0 8\\r\\n2 0 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 0 3\\r\\n1 6 0\\r\\n1 8 7\\r\\n2 2 6\\r\\n2 7 2\\r\\n2 7 5\\r\\n1 4 7\\r\\n1 2 3\\r\\n2 2 7\\r\\n2 3 1\\r\\n1 3 5\\r\\n1 8 5\\r\\n2 6 8\\r\\n1 2 8\\r\\n2 4 6\\r\\n1 7 3\\r\\n1 3 3\\r\\n2 2 4\\r\\n1 5 0\\r\\n1 5 6\\r\\n1 1 7\\r\\n2 3 3\\r\\n1 8 6\\r\\n2 7 4\\r\\n1 7 8\\r\\n1 5 8\\r\\n2 3 8\\r\\n1 6 6\\r\\n2 8 5\\r\\n1 5 1\\r\\n2 4 2\\r\\n1 7 7\\r\\n2 4 8\\r\\n1 6 1\\r\\n1 1 5\\r\\n2 1 8\\r\\n2 4 3\\r\\n1 5 5\\r\\n1 4 0\\r\\n2 0 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 5 2\\r\\n1 5 6\\r\\n1 2 1\\r\\n2 7 2\\r\\n2 6 2\\r\\n2 0 8\\r\\n2 0 6\\r\\n1 6 8\\r\\n1 2 0\\r\\n1 0 5\\r\\n2 3 0\\r\\n1 3 8\\r\\n2 8 6\\r\\n1 0 3\\r\\n1 8 8\\r\\n2 1 1\\r\\n1 1 4\\r\\n1 1 3\\r\\n2 0 0\\r\\n2 5 6\\r\\n1 0 0\\r\\n2 0 0\\r\\n1 2 7\\r\\n2 0 0\\r\\n2 3 6\\r\\n1 3 3\\r\\n1 3 2\\r\\n1 5 3\\r\\n1 7 8\\r\\n1 7 4\\r\\n1 8 7\\r\\n1 7 3\\r\\n2 0 3\\r\\n1 4 4\\r\\n2 5 0\\r\\n1 6 6\\r\\n1 8 0\\r\\n2 6 2\\r\\n2 4 8\\r\\n2 7 2\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 1 4\\r\\n1 1 5\\r\\n1 3 5\\r\\n2 8 2\\r\\n2 5 2\\r\\n1 7 3\\r\\n1 8 1\\r\\n2 6 5\\r\\n1 4 3\\r\\n1 2 4\\r\\n1 2 3\\r\\n2 8 3\\r\\n2 3 5\\r\\n2 2 0\\r\\n1 6 7\\r\\n2 2 8\\r\\n1 3 0\\r\\n2 5 1\\r\\n2 2 1\\r\\n1 4 5\\r\\n2 1 6\\r\\n1 8 5\\r\\n2 7 4\\r\\n2 2 0\\r\\n1 3 2\\r\\n1 2 2\\r\\n1 8 3\\r\\n2 3 4\\r\\n1 7 6\\r\\n1 3 7\\r\\n1 5 3\\r\\n1 2 0\\r\\n2 5 7\\r\\n2 0 7\\r\\n2 3 2\\r\\n2 1 0\\r\\n1 6 0\\r\\n2 8 5\\r\\n1 3 4\\r\\n2 0 3\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 8 7\\r\\n1 0 6\\r\\n1 5 0\\r\\n2 6 7\\r\\n2 6 8\\r\\n1 3 5\\r\\n1 6 7\\r\\n1 0 0\\r\\n2 1 7\\r\\n1 2 3\\r\\n2 4 3\\r\\n2 5 5\\r\\n1 4 7\\r\\n2 2 0\\r\\n1 2 4\\r\\n1 4 2\\r\\n1 0 8\\r\\n2 0 3\\r\\n1 8 8\\r\\n2 8 1\\r\\n2 8 6\\r\\n2 4 8\\r\\n1 4 0\\r\\n1 6 6\\r\\n2 0 0\\r\\n1 6 2\\r\\n2 5 1\\r\\n1 3 0\\r\\n1 5 6\\r\\n1 8 1\\r\\n1 3 4\\r\\n1 1 3\\r\\n1 5 1\\r\\n1 5 7\\r\\n1 6 8\\r\\n1 1 5\\r\\n1 1 1\\r\\n1 6 1\\r\\n1 1 4\\r\\n2 7 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 2 8\\r\\n1 4 0\\r\\n1 0 6\\r\\n2 3 8\\r\\n2 4 5\\r\\n1 5 0\\r\\n2 7 6\\r\\n2 6 1\\r\\n2 1 7\\r\\n1 1 2\\r\\n1 5 4\\r\\n1 7 3\\r\\n2 6 4\\r\\n1 3 0\\r\\n2 2 8\\r\\n1 8 2\\r\\n1 8 8\\r\\n1 7 8\\r\\n2 2 5\\r\\n2 2 3\\r\\n2 4 6\\r\\n2 0 2\\r\\n2 6 7\\r\\n2 2 8\\r\\n1 8 3\\r\\n2 5 5\\r\\n1 4 8\\r\\n1 7 1\\r\\n2 7 3\\r\\n2 4 5\\r\\n2 1 1\\r\\n2 4 2\\r\\n1 1 1\\r\\n2 4 0\\r\\n1 2 4\\r\\n2 7 0\\r\\n1 4 1\\r\\n1 7 5\\r\\n1 6 6\\r\\n2 7 8\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 6 3\\r\\n1 5 3\\r\\n1 3 4\\r\\n1 2 3\\r\\n2 2 5\\r\\n1 6 1\\r\\n2 3 7\\r\\n1 0 0\\r\\n1 8 7\\r\\n1 3 8\\r\\n1 0 8\\r\\n1 3 5\\r\\n1 4 5\\r\\n1 0 5\\r\\n2 8 1\\r\\n2 4 7\\r\\n2 3 2\\r\\n1 6 4\\r\\n2 2 3\\r\\n2 6 3\\r\\n1 0 2\\r\\n2 1 2\\r\\n2 6 2\\r\\n1 5 7\\r\\n2 7 0\\r\\n1 4 8\\r\\n1 4 6\\r\\n2 8 7\\r\\n2 0 7\\r\\n1 7 8\\r\\n2 0 3\\r\\n1 5 5\\r\\n1 6 2\\r\\n2 4 5\\r\\n1 2 5\\r\\n2 3 3\\r\\n2 1 1\\r\\n1 8 3\\r\\n1 6 5\\r\\n2 5 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 6 5\\r\\n1 4 8\\r\\n1 5 7\\r\\n1 3 1\\r\\n2 4 2\\r\\n1 4 3\\r\\n1 0 7\\r\\n2 4 6\\r\\n2 4 2\\r\\n1 0 3\\r\\n2 1 5\\r\\n2 5 6\\r\\n1 8 8\\r\\n1 1 7\\r\\n1 3 3\\r\\n2 6 7\\r\\n1 7 4\\r\\n1 0 2\\r\\n1 8 4\\r\\n2 4 5\\r\\n2 0 7\\r\\n1 4 1\\r\\n1 4 4\\r\\n1 5 3\\r\\n1 1 0\\r\\n1 4 5\\r\\n2 1 4\\r\\n1 0 6\\r\\n2 1 0\\r\\n1 5 5\\r\\n2 5 6\\r\\n2 8 2\\r\\n2 1 7\\r\\n2 8 1\\r\\n2 0 5\\r\\n1 0 4\\r\\n1 6 6\\r\\n2 1 1\\r\\n1 8 0\\r\\n2 6 3\\r\\n', 'output': ['NO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 1 7\\r\\n1 3 3\\r\\n1 6 5\\r\\n1 7 3\\r\\n1 2 8\\r\\n1 3 0\\r\\n2 0 0\\r\\n1 7 7\\r\\n2 6 8\\r\\n2 6 0\\r\\n2 4 7\\r\\n1 7 8\\r\\n2 0 7\\r\\n2 0 5\\r\\n1 6 2\\r\\n1 7 1\\r\\n1 1 1\\r\\n2 4 8\\r\\n2 2 1\\r\\n2 7 0\\r\\n2 5 4\\r\\n1 2 4\\r\\n2 1 3\\r\\n2 0 5\\r\\n2 5 5\\r\\n2 1 4\\r\\n2 5 5\\r\\n1 2 6\\r\\n1 4 4\\r\\n2 0 8\\r\\n1 0 6\\r\\n2 0 5\\r\\n2 4 6\\r\\n2 8 1\\r\\n2 2 0\\r\\n2 3 3\\r\\n1 0 4\\r\\n1 3 7\\r\\n2 3 2\\r\\n2 3 7\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 2 7\\r\\n1 6 5\\r\\n1 2 0\\r\\n2 4 5\\r\\n1 1 0\\r\\n2 3 4\\r\\n1 7 3\\r\\n2 8 1\\r\\n2 0 0\\r\\n2 2 0\\r\\n1 7 4\\r\\n1 6 3\\r\\n2 8 1\\r\\n2 6 0\\r\\n1 4 7\\r\\n2 4 2\\r\\n1 4 5\\r\\n2 3 7\\r\\n2 6 8\\r\\n2 2 6\\r\\n2 7 4\\r\\n1 0 6\\r\\n2 1 7\\r\\n1 4 4\\r\\n2 2 3\\r\\n1 1 3\\r\\n1 8 5\\r\\n1 0 5\\r\\n1 1 1\\r\\n1 4 3\\r\\n2 5 3\\r\\n1 3 6\\r\\n1 7 0\\r\\n2 5 6\\r\\n2 5 6\\r\\n1 0 7\\r\\n2 7 0\\r\\n2 6 4\\r\\n1 3 7\\r\\n2 2 2\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 4 4\\r\\n1 2 6\\r\\n1 8 2\\r\\n2 4 6\\r\\n1 5 4\\r\\n2 5 8\\r\\n2 6 7\\r\\n2 4 8\\r\\n1 1 0\\r\\n1 3 1\\r\\n1 0 3\\r\\n1 8 1\\r\\n1 3 0\\r\\n2 7 4\\r\\n1 2 0\\r\\n1 8 5\\r\\n1 6 2\\r\\n2 2 0\\r\\n1 0 4\\r\\n1 1 1\\r\\n1 4 5\\r\\n2 8 3\\r\\n2 1 0\\r\\n2 5 5\\r\\n1 3 4\\r\\n2 0 7\\r\\n1 4 3\\r\\n1 7 0\\r\\n2 3 8\\r\\n1 0 1\\r\\n1 0 7\\r\\n2 4 1\\r\\n1 0 6\\r\\n2 1 2\\r\\n1 5 7\\r\\n2 7 2\\r\\n2 7 3\\r\\n1 3 6\\r\\n2 7 3\\r\\n2 7 0\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 0 8\\r\\n1 3 5\\r\\n1 0 2\\r\\n1 8 0\\r\\n1 5 3\\r\\n1 5 2\\r\\n2 8 2\\r\\n2 7 6\\r\\n1 6 1\\r\\n2 2 7\\r\\n2 6 5\\r\\n1 3 7\\r\\n2 7 8\\r\\n1 2 4\\r\\n1 4 2\\r\\n2 5 7\\r\\n2 0 6\\r\\n1 3 1\\r\\n2 2 3\\r\\n1 5 7\\r\\n2 2 8\\r\\n1 7 1\\r\\n1 3 0\\r\\n2 5 5\\r\\n1 7 4\\r\\n2 5 5\\r\\n1 2 0\\r\\n2 4 3\\r\\n2 8 1\\r\\n2 8 0\\r\\n1 2 6\\r\\n1 7 5\\r\\n2 4 8\\r\\n1 2 3\\r\\n2 6 6\\r\\n1 7 8\\r\\n2 7 5\\r\\n2 7 4\\r\\n1 8 1\\r\\n2 5 6\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 1 3\\r\\n1 7 2\\r\\n1 6 2\\r\\n2 0 8\\r\\n2 3 8\\r\\n2 0 3\\r\\n1 5 8\\r\\n2 7 1\\r\\n1 8 1\\r\\n2 8 7\\r\\n1 5 5\\r\\n2 2 4\\r\\n2 3 3\\r\\n2 2 4\\r\\n1 0 1\\r\\n1 2 0\\r\\n1 7 4\\r\\n2 7 4\\r\\n2 5 5\\r\\n1 1 1\\r\\n2 6 4\\r\\n2 1 7\\r\\n2 5 0\\r\\n1 8 0\\r\\n2 6 2\\r\\n1 7 1\\r\\n2 8 6\\r\\n1 8 7\\r\\n2 2 5\\r\\n1 7 3\\r\\n1 5 6\\r\\n1 4 0\\r\\n2 3 8\\r\\n2 8 6\\r\\n1 7 0\\r\\n2 3 5\\r\\n2 6 1\\r\\n1 2 6\\r\\n1 1 2\\r\\n2 7 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 4 4\\r\\n1 2 6\\r\\n1 7 2\\r\\n2 1 4\\r\\n2 0 2\\r\\n1 5 4\\r\\n2 5 1\\r\\n1 0 8\\r\\n1 1 7\\r\\n2 2 0\\r\\n1 8 4\\r\\n2 6 5\\r\\n2 8 0\\r\\n1 6 5\\r\\n2 8 7\\r\\n2 0 0\\r\\n2 4 0\\r\\n2 7 2\\r\\n2 6 8\\r\\n1 7 8\\r\\n2 8 8\\r\\n2 4 7\\r\\n1 7 1\\r\\n2 8 8\\r\\n1 5 8\\r\\n1 3 6\\r\\n1 4 6\\r\\n1 3 5\\r\\n2 6 1\\r\\n2 1 3\\r\\n2 8 4\\r\\n2 8 5\\r\\n2 1 3\\r\\n2 7 1\\r\\n2 5 8\\r\\n1 8 2\\r\\n2 6 1\\r\\n1 7 4\\r\\n1 8 5\\r\\n2 6 4\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 2 1\\r\\n1 4 7\\r\\n1 1 1\\r\\n1 2 4\\r\\n2 4 4\\r\\n1 4 4\\r\\n2 0 6\\r\\n2 7 6\\r\\n1 4 0\\r\\n2 6 5\\r\\n2 5 2\\r\\n1 6 1\\r\\n2 7 0\\r\\n1 6 2\\r\\n2 3 2\\r\\n1 0 6\\r\\n2 7 0\\r\\n1 8 6\\r\\n2 1 3\\r\\n2 0 1\\r\\n1 2 5\\r\\n1 0 2\\r\\n2 4 2\\r\\n2 6 8\\r\\n2 2 0\\r\\n2 5 7\\r\\n2 6 0\\r\\n1 2 2\\r\\n2 0 3\\r\\n1 7 4\\r\\n2 7 3\\r\\n1 4 1\\r\\n2 2 6\\r\\n2 8 2\\r\\n1 8 3\\r\\n1 8 7\\r\\n1 0 3\\r\\n1 7 0\\r\\n2 2 1\\r\\n2 6 4\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 3 7\\r\\n1 5 8\\r\\n1 4 4\\r\\n1 8 1\\r\\n1 4 6\\r\\n1 6 6\\r\\n2 5 0\\r\\n2 3 4\\r\\n1 5 3\\r\\n2 0 7\\r\\n2 3 1\\r\\n1 5 4\\r\\n1 3 4\\r\\n2 3 4\\r\\n2 8 2\\r\\n1 0 1\\r\\n1 0 8\\r\\n2 3 8\\r\\n1 0 4\\r\\n2 4 6\\r\\n1 7 3\\r\\n2 4 0\\r\\n1 2 3\\r\\n2 8 1\\r\\n2 8 4\\r\\n1 7 0\\r\\n2 2 6\\r\\n2 2 2\\r\\n1 2 2\\r\\n1 6 5\\r\\n1 7 1\\r\\n2 5 1\\r\\n1 2 4\\r\\n2 3 2\\r\\n1 8 4\\r\\n1 7 4\\r\\n1 1 2\\r\\n1 3 2\\r\\n2 7 3\\r\\n2 4 4\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 1 0\\r\\n1 0 7\\r\\n1 8 4\\r\\n2 1 6\\r\\n2 1 2\\r\\n1 0 0\\r\\n1 1 1\\r\\n2 5 2\\r\\n1 8 5\\r\\n1 0 6\\r\\n2 6 8\\r\\n1 4 2\\r\\n1 8 3\\r\\n2 2 3\\r\\n1 6 3\\r\\n2 6 0\\r\\n1 5 3\\r\\n2 0 5\\r\\n1 3 4\\r\\n2 4 4\\r\\n1 8 6\\r\\n1 1 2\\r\\n1 5 7\\r\\n1 5 1\\r\\n1 3 8\\r\\n2 7 0\\r\\n1 7 2\\r\\n1 3 3\\r\\n2 6 5\\r\\n2 5 0\\r\\n2 2 4\\r\\n2 5 5\\r\\n2 4 6\\r\\n1 6 1\\r\\n1 5 2\\r\\n2 7 5\\r\\n1 8 7\\r\\n1 1 6\\r\\n1 4 8\\r\\n2 8 5\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 8 1\\r\\n1 8 6\\r\\n1 1 1\\r\\n2 5 4\\r\\n2 7 8\\r\\n1 6 2\\r\\n1 7 4\\r\\n1 4 4\\r\\n2 3 7\\r\\n1 6 3\\r\\n2 0 1\\r\\n1 8 0\\r\\n2 0 3\\r\\n1 6 0\\r\\n1 3 4\\r\\n1 1 8\\r\\n1 3 3\\r\\n2 3 1\\r\\n2 4 0\\r\\n1 4 3\\r\\n2 1 3\\r\\n2 5 4\\r\\n1 8 5\\r\\n2 1 0\\r\\n1 4 7\\r\\n2 5 3\\r\\n2 4 1\\r\\n1 4 0\\r\\n1 6 8\\r\\n1 5 1\\r\\n2 8 3\\r\\n2 5 7\\r\\n1 3 2\\r\\n1 7 5\\r\\n1 7 3\\r\\n1 0 8\\r\\n1 7 8\\r\\n2 7 3\\r\\n2 6 7\\r\\n2 4 2\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '50\\r\\n1 58 -49\\r\\n1 -77 -90\\r\\n1 32 -52\\r\\n1 -89 -31\\r\\n1 99 -34\\r\\n1 -3 -59\\r\\n2 65 93\\r\\n2 67 -51\\r\\n2 25 -47\\r\\n1 -72 86\\r\\n2 48 -45\\r\\n2 64 -70\\r\\n2 -96 -43\\r\\n2 87 -58\\r\\n2 3 21\\r\\n2 39 -57\\r\\n1 -58 49\\r\\n2 -1 87\\r\\n2 -63 19\\r\\n2 -27 90\\r\\n2 31 3\\r\\n1 55 41\\r\\n1 90 39\\r\\n1 -53 28\\r\\n2 49 -51\\r\\n2 6 42\\r\\n1 50 15\\r\\n2 21 -2\\r\\n2 -6 70\\r\\n1 -13 -61\\r\\n2 -60 -69\\r\\n1 -22 33\\r\\n1 -22 17\\r\\n2 30 -98\\r\\n2 -56 -48\\r\\n2 -84 -77\\r\\n2 49 56\\r\\n1 81 29\\r\\n1 26 29\\r\\n1 -14 20\\r\\n2 -37 83\\r\\n1 -91 96\\r\\n2 57 19\\r\\n1 94 54\\r\\n2 25 -30\\r\\n1 92 5\\r\\n2 -48 51\\r\\n2 81 23\\r\\n1 39 -47\\r\\n2 34 89\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '50\\r\\n1 7 -8\\r\\n1 -30 -28\\r\\n1 -8 2\\r\\n1 -28 -29\\r\\n2 -8 -21\\r\\n2 -23 19\\r\\n2 -23 18\\r\\n1 6 27\\r\\n2 -17 20\\r\\n1 9 -5\\r\\n2 -27 29\\r\\n1 -8 27\\r\\n2 13 12\\r\\n2 -29 13\\r\\n2 -30 8\\r\\n2 -30 -8\\r\\n1 -24 -21\\r\\n1 -14 -15\\r\\n2 -23 14\\r\\n2 -12 -13\\r\\n1 15 -24\\r\\n1 28 6\\r\\n2 -20 -21\\r\\n1 -8 -13\\r\\n1 -15 -15\\r\\n1 11 20\\r\\n2 24 -26\\r\\n1 -30 -11\\r\\n2 -17 18\\r\\n1 -17 6\\r\\n2 5 -9\\r\\n2 -29 8\\r\\n2 -29 1\\r\\n2 10 24\\r\\n2 29 27\\r\\n2 -12 21\\r\\n2 5 -28\\r\\n2 28 27\\r\\n2 -4 -4\\r\\n1 -24 29\\r\\n1 17 -1\\r\\n1 0 17\\r\\n1 -2 -1\\r\\n2 -7 -10\\r\\n1 5 -16\\r\\n2 -3 -26\\r\\n2 -7 17\\r\\n1 -27 -26\\r\\n1 -3 -30\\r\\n2 28 -15\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '10\\r\\n1 0 0\\r\\n1 6 0\\r\\n1 0 6\\r\\n2 0 0\\r\\n2 6 0\\r\\n2 0 6\\r\\n2 3 3\\r\\n2 3 0\\r\\n2 0 3\\r\\n2 2 2\\r\\n', 'output': ['YES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '50\\r\\n1 33 -21\\r\\n1 9 82\\r\\n1 -69 -54\\r\\n2 -3 84\\r\\n1 -9 -28\\r\\n2 -54 87\\r\\n2 26 -64\\r\\n2 8 52\\r\\n2 98 63\\r\\n2 -77 10\\r\\n2 -52 -46\\r\\n1 92 42\\r\\n2 -53 -69\\r\\n2 -48 44\\r\\n1 -52 90\\r\\n2 56 29\\r\\n2 -100 -13\\r\\n2 -23 1\\r\\n2 6 91\\r\\n2 53 -38\\r\\n1 48 -35\\r\\n2 19 -62\\r\\n2 -62 49\\r\\n1 59 78\\r\\n2 85 72\\r\\n2 28 76\\r\\n2 46 -91\\r\\n2 6 32\\r\\n2 -16 -59\\r\\n1 40 -53\\r\\n2 -6 87\\r\\n2 -79 -58\\r\\n2 -12 25\\r\\n2 73 49\\r\\n1 57 -42\\r\\n2 12 19\\r\\n1 -60 -5\\r\\n1 -40 -20\\r\\n1 90 35\\r\\n2 10 3\\r\\n2 63 -49\\r\\n1 50 10\\r\\n1 0 77\\r\\n1 92 24\\r\\n1 71 -7\\r\\n2 46 22\\r\\n1 19 81\\r\\n1 -3 -71\\r\\n2 -44 56\\r\\n2 92 34\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 3 3\\r\\n1 3 1\\r\\n1 0 1\\r\\n2 3 0\\r\\n2 6 5\\r\\n2 1 5\\r\\n2 8 3\\r\\n2 0 5\\r\\n2 3 4\\r\\n1 7 6\\r\\n1 1 0\\r\\n1 0 8\\r\\n1 3 7\\r\\n2 4 5\\r\\n2 2 5\\r\\n2 2 0\\r\\n1 7 4\\r\\n2 7 3\\r\\n1 5 0\\r\\n1 4 6\\r\\n1 1 5\\r\\n1 7 8\\r\\n2 7 5\\r\\n1 0 4\\r\\n2 3 8\\r\\n1 1 8\\r\\n1 0 5\\r\\n1 4 8\\r\\n2 8 5\\r\\n1 8 5\\r\\n2 3 6\\r\\n1 8 7\\r\\n2 4 3\\r\\n1 5 2\\r\\n2 2 8\\r\\n2 5 3\\r\\n2 4 0\\r\\n1 4 4\\r\\n1 6 5\\r\\n2 2 7\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}]", "source_code": "import java.util.Scanner;\n\npublic class Q3_test {\n    public static void main(String args[]) {\n        Scanner s = new Scanner(System.in);\n        int N = s.nextInt();\n        ConvexHull ch = new ConvexHull();\n        for (int i = 0; i < N; i++) {\n            int a = s.nextInt();\n            int x = s.nextInt();\n            int y = s.nextInt();\n            if (a == 1) {\n                ch.addPoint(x, y);\n            } else {\n                if (ch.isIn(x, y)) {\n                    System.out.println(\"YES\");\n                } else {\n                    System.out.println(\"NO\");\n                }\n            }\n        }\n    }\n}\n\nclass ConvexHull {\n    private double[] X = new double[100000];\n    private double[] Y = new double[100000];\n    private int point = 3;\n    private double d;\n    private int v0, v1, v2;\n\n    public ConvexHull() {\n        X[0] = 0;\n        Y[0] = 0;\n        X[1] = 2;\n        Y[1] = 0;\n        X[2] = 1;\n        Y[2] = 1;\n        v0 = 0;\n        v1 = 1;\n        v2 = 2;\n    }\n\n    public boolean isIn(int x, int y) {\n        d = (Y[v2] - Y[v0]) * (x - X[v0]) - (X[v2] - X[v0]) * (y - Y[v0]);\n        if (((Y[v1] - Y[v0]) * (x - X[v0]) - (X[v1] - X[v0]) * (y - Y[v0])) > 0) {\n            d = -1 - d;\n        }\n        return (d <= 0);\n    }\n\n    public void addPoint(int x, int y) {\n        X[point] = x;\n        Y[point] = y;\n        while (point > 2 && orientation(point - 2, point - 1, point) >= 0) {\n            v2 = point - 1;\n            v1 = point - 2;\n            v0 = point - 3;\n            point--;\n        }\n        point++;\n    }\n\n    private int orientation(int v, int v1, int v2) {\n        return (int) (((X[v2] - X[v1]) * (Y[v] - Y[v1])) - ((Y[v2] - Y[v1]) * (X[v] - X[v1])));\n    }\n}\n"}
{"src_uid": "6220f4058f9325dfb211fb1dd86e9464", "id": 119, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2700, "testcases": "[{'input': '8\\r\\n1 0 0\\r\\n1 2 0\\r\\n1 2 2\\r\\n2 1 0\\r\\n1 0 2\\r\\n2 1 1\\r\\n2 2 1\\r\\n2 20 -1\\r\\n', 'output': ['YES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 0 0\\r\\n1 5 0\\r\\n1 0 5\\r\\n2 1 1\\r\\n2 10 10\\r\\n1 2 10\\r\\n2 1 1\\r\\n', 'output': ['YES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '5\\r\\n1 2 -2\\r\\n1 -2 2\\r\\n1 1 5\\r\\n2 3 -1\\r\\n2 3 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\n']}, {'input': '5\\r\\n1 -1 0\\r\\n1 1 0\\r\\n1 0 2\\r\\n2 0 1\\r\\n2 0 3\\r\\n', 'output': ['YES\\r\\nNO\\r\\n']}, {'input': '6\\r\\n1 -2 0\\r\\n1 2 0\\r\\n1 0 2\\r\\n2 4 0\\r\\n2 1 0\\r\\n2 2 0\\r\\n', 'output': ['NO\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '11\\r\\n1 0 -1\\r\\n1 0 1\\r\\n1 1 -1\\r\\n1 -1 -5\\r\\n1 0 5\\r\\n2 5 1\\r\\n2 5 0\\r\\n2 5 -1\\r\\n2 0 0\\r\\n2 0 10\\r\\n2 0 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '30\\r\\n1 -37 889\\r\\n1 771 -764\\r\\n1 -119 938\\r\\n1 599 868\\r\\n1 56 161\\r\\n1 -67 86\\r\\n2 -692 99\\r\\n2 -995 158\\r\\n2 410 116\\r\\n1 -49 -864\\r\\n2 30 -580\\r\\n1 -930 454\\r\\n1 -706 301\\r\\n2 547 -606\\r\\n2 -252 -55\\r\\n2 662 152\\r\\n2 -621 -920\\r\\n1 -128 -595\\r\\n1 -401 -265\\r\\n1 434 388\\r\\n2 299 173\\r\\n1 104 -298\\r\\n1 -693 557\\r\\n2 840 -179\\r\\n2 382 -8\\r\\n1 461 618\\r\\n1 -928 628\\r\\n2 193 -972\\r\\n2 218 945\\r\\n2 490 571\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '30\\r\\n1 -619 -234\\r\\n1 -140 -846\\r\\n1 762 -792\\r\\n2 153 29\\r\\n1 -353 627\\r\\n2 -544 -418\\r\\n2 -922 -965\\r\\n1 -620 -692\\r\\n1 -34 295\\r\\n2 -326 -604\\r\\n2 -906 -867\\r\\n2 57 -690\\r\\n1 -87 -822\\r\\n2 -569 739\\r\\n2 -92 -927\\r\\n2 279 806\\r\\n1 -364 19\\r\\n2 -214 -629\\r\\n2 -283 662\\r\\n2 -324 650\\r\\n1 92 -511\\r\\n2 654 -597\\r\\n1 -87 747\\r\\n2 795 46\\r\\n2 870 -157\\r\\n2 -11 520\\r\\n1 -162 -686\\r\\n2 290 -660\\r\\n2 -660 780\\r\\n2 946 910\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '30\\r\\n1 -702 -823\\r\\n1 -330 -896\\r\\n1 -564 90\\r\\n1 559 818\\r\\n2 404 716\\r\\n1 -900 -379\\r\\n2 866 -218\\r\\n2 444 615\\r\\n2 -782 -887\\r\\n2 584 -919\\r\\n2 891 775\\r\\n1 117 887\\r\\n2 598 162\\r\\n2 759 -925\\r\\n2 713 -507\\r\\n1 -329 120\\r\\n2 546 185\\r\\n2 399 500\\r\\n1 -611 763\\r\\n1 -956 187\\r\\n2 82 -26\\r\\n2 -877 -906\\r\\n1 293 -637\\r\\n2 -685 -275\\r\\n2 -725 -927\\r\\n1 -627 777\\r\\n1 -609 -563\\r\\n2 402 54\\r\\n1 -106 -908\\r\\n2 175 808\\r\\n', 'output': ['YES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '30\\r\\n1 -64 -994\\r\\n1 -692 366\\r\\n1 -72 847\\r\\n2 -963 -251\\r\\n1 -651 -994\\r\\n1 -523 -861\\r\\n2 553 -129\\r\\n2 17 785\\r\\n2 -584 -880\\r\\n1 105 657\\r\\n1 649 98\\r\\n2 -572 -492\\r\\n1 -38 -481\\r\\n1 540 463\\r\\n1 -468 -540\\r\\n1 -730 100\\r\\n1 606 -119\\r\\n1 -254 -380\\r\\n1 169 280\\r\\n1 319 62\\r\\n1 452 -556\\r\\n1 -653 887\\r\\n1 407 -786\\r\\n2 -632 181\\r\\n1 925 -967\\r\\n2 996 -709\\r\\n1 568 517\\r\\n2 -478 76\\r\\n1 156 621\\r\\n2 -592 899\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '30\\r\\n1 836 -283\\r\\n1 299 629\\r\\n1 434 -481\\r\\n1 -500 -368\\r\\n2 -105 -216\\r\\n2 -617 443\\r\\n2 -579 811\\r\\n1 411 -242\\r\\n1 -652 41\\r\\n1 962 -483\\r\\n1 -732 579\\r\\n2 554 -147\\r\\n1 39 967\\r\\n1 917 -199\\r\\n2 686 397\\r\\n1 444 780\\r\\n1 278 462\\r\\n1 729 -18\\r\\n1 252 -864\\r\\n1 884 -952\\r\\n1 272 689\\r\\n2 366 -389\\r\\n1 443 924\\r\\n1 791 -249\\r\\n2 692 74\\r\\n2 -412 550\\r\\n2 506 -472\\r\\n2 -626 474\\r\\n1 -895 -42\\r\\n2 -390 -971\\r\\n', 'output': ['YES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '12\\r\\n1 0 0\\r\\n1 10 0\\r\\n1 8 1\\r\\n2 11 0\\r\\n1 2 0\\r\\n2 7 0\\r\\n2 9 0\\r\\n2 1 0\\r\\n1 1 1\\r\\n2 10 0\\r\\n2 9 0\\r\\n2 11 0\\r\\n', 'output': ['NO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 1 0\\r\\n1 3 0\\r\\n1 5000 5000\\r\\n2 3 0\\r\\n2 2 0\\r\\n2 4 0\\r\\n2 -1 0\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '4\\r\\n1 1 0\\r\\n1 3 0\\r\\n1 2 2\\r\\n2 4 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4\\r\\n1 1 0\\r\\n1 3 0\\r\\n1 0 8\\r\\n2 4 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '11\\r\\n1 0 -1\\r\\n1 0 1\\r\\n1 -1 -5\\r\\n1 6 4\\r\\n1 -8 8\\r\\n2 6 -1\\r\\n2 6 1\\r\\n2 1 0\\r\\n2 1 -1\\r\\n2 1 1\\r\\n2 6 0\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '11\\r\\n1 5 4\\r\\n1 5 6\\r\\n1 4 0\\r\\n1 11 9\\r\\n1 -3 13\\r\\n2 11 4\\r\\n2 11 6\\r\\n2 6 5\\r\\n2 6 4\\r\\n2 6 6\\r\\n2 11 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -2 -1000000\\r\\n1 -1 -1000000\\r\\n1 -1 -999999\\r\\n1 1 1000000\\r\\n1 -231100 1000000\\r\\n2 0 0\\r\\n2 1 999999\\r\\n', 'output': ['YES\\r\\nNO\\r\\n']}, {'input': '10\\r\\n1 -1000000 -1000000\\r\\n1 -999999 -1000000\\r\\n1 999999 1000000\\r\\n1 1000000 1000000\\r\\n2 0 0\\r\\n2 1000000 999999\\r\\n2 999999 1000000\\r\\n2 999999 999999\\r\\n2 999999 999998\\r\\n2 999999 999997\\r\\n', 'output': ['YES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '9\\r\\n1 -2 -4\\r\\n1 2 4\\r\\n1 -3 3\\r\\n2 -1 -2\\r\\n2 -4 -8\\r\\n2 -3 -6\\r\\n2 1 2\\r\\n2 4 8\\r\\n2 3 6\\r\\n', 'output': ['YES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '16\\r\\n1 -10000 0\\r\\n1 10000 0\\r\\n1 0 -1\\r\\n2 50000 0\\r\\n2 -50000 0\\r\\n2 49000 0\\r\\n2 -49000 0\\r\\n2 27000 0\\r\\n2 -27000 0\\r\\n1 0 1\\r\\n2 50000 0\\r\\n2 -50000 0\\r\\n2 49000 0\\r\\n2 -49000 0\\r\\n2 27000 0\\r\\n2 -27000 0\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -7000 -9000\\r\\n1 7000 9000\\r\\n1 7000 -7000\\r\\n2 21 27\\r\\n2 -21 -27\\r\\n2 7007 9009\\r\\n2 -7007 -9009\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -7000 -9000\\r\\n1 7000 9000\\r\\n1 -7000 7000\\r\\n2 21 27\\r\\n2 -21 -27\\r\\n2 7007 9009\\r\\n2 -7007 -9009\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -9000 7000\\r\\n1 9000 -7000\\r\\n1 7000 7000\\r\\n2 -27 21\\r\\n2 27 -21\\r\\n2 -9009 7007\\r\\n2 9009 -7007\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '7\\r\\n1 -9000 7000\\r\\n1 9000 -7000\\r\\n1 -7000 -7000\\r\\n2 -27 21\\r\\n2 27 -21\\r\\n2 -9009 7007\\r\\n2 9009 -7007\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 7 6\\r\\n1 0 5\\r\\n1 0 4\\r\\n1 2 5\\r\\n1 8 0\\r\\n1 6 4\\r\\n1 1 1\\r\\n1 8 4\\r\\n2 1 1\\r\\n2 2 7\\r\\n1 2 3\\r\\n1 4 2\\r\\n2 4 3\\r\\n1 3 2\\r\\n1 7 2\\r\\n1 1 0\\r\\n2 3 5\\r\\n1 6 5\\r\\n2 5 7\\r\\n2 1 1\\r\\n2 3 2\\r\\n1 6 2\\r\\n2 6 0\\r\\n2 8 8\\r\\n1 4 6\\r\\n1 3 5\\r\\n2 3 8\\r\\n2 0 5\\r\\n2 1 6\\r\\n1 8 3\\r\\n1 2 2\\r\\n1 8 2\\r\\n1 6 8\\r\\n1 1 3\\r\\n1 3 3\\r\\n1 5 5\\r\\n2 2 0\\r\\n2 6 7\\r\\n2 1 6\\r\\n2 6 4\\r\\n', 'output': ['YES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 3 8\\r\\n1 6 7\\r\\n1 7 7\\r\\n2 5 5\\r\\n1 4 0\\r\\n1 0 0\\r\\n2 7 3\\r\\n1 0 2\\r\\n2 8 2\\r\\n2 5 1\\r\\n2 1 2\\r\\n2 1 5\\r\\n1 1 3\\r\\n1 7 1\\r\\n1 8 7\\r\\n1 2 4\\r\\n1 2 8\\r\\n2 8 5\\r\\n2 8 6\\r\\n1 2 1\\r\\n1 5 6\\r\\n1 2 3\\r\\n2 4 3\\r\\n1 8 3\\r\\n1 1 5\\r\\n2 2 2\\r\\n2 8 5\\r\\n1 0 7\\r\\n1 7 2\\r\\n1 5 5\\r\\n1 8 4\\r\\n1 4 1\\r\\n2 3 2\\r\\n2 6 0\\r\\n2 8 7\\r\\n2 5 7\\r\\n1 3 0\\r\\n2 1 0\\r\\n2 0 7\\r\\n2 5 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 2 8\\r\\n1 3 8\\r\\n1 7 4\\r\\n1 4 5\\r\\n1 4 1\\r\\n2 6 6\\r\\n2 5 8\\r\\n1 5 4\\r\\n1 7 8\\r\\n2 1 3\\r\\n2 6 1\\r\\n2 8 2\\r\\n2 6 8\\r\\n1 4 3\\r\\n2 2 8\\r\\n2 0 6\\r\\n1 0 3\\r\\n2 0 3\\r\\n1 6 6\\r\\n1 5 8\\r\\n1 5 5\\r\\n1 1 2\\r\\n2 6 7\\r\\n1 4 8\\r\\n2 1 2\\r\\n2 2 7\\r\\n2 2 3\\r\\n1 8 4\\r\\n2 8 4\\r\\n2 6 5\\r\\n1 8 2\\r\\n2 7 2\\r\\n2 3 5\\r\\n1 4 0\\r\\n2 6 2\\r\\n2 3 7\\r\\n1 4 6\\r\\n1 8 6\\r\\n1 0 5\\r\\n2 2 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 4 0\\r\\n1 7 1\\r\\n1 8 0\\r\\n1 1 2\\r\\n1 1 8\\r\\n1 6 1\\r\\n2 5 2\\r\\n1 7 7\\r\\n1 6 5\\r\\n2 8 1\\r\\n2 8 7\\r\\n1 7 8\\r\\n2 3 5\\r\\n2 6 6\\r\\n1 4 2\\r\\n1 8 3\\r\\n2 6 8\\r\\n1 4 8\\r\\n2 4 6\\r\\n2 1 7\\r\\n1 4 3\\r\\n2 0 8\\r\\n1 5 2\\r\\n2 5 5\\r\\n2 1 6\\r\\n1 5 5\\r\\n1 1 5\\r\\n2 3 3\\r\\n2 0 1\\r\\n1 1 0\\r\\n2 1 4\\r\\n2 3 6\\r\\n1 4 6\\r\\n2 7 6\\r\\n1 4 4\\r\\n1 7 6\\r\\n1 6 8\\r\\n2 1 1\\r\\n1 0 1\\r\\n2 0 2\\r\\n', 'output': ['YES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 3 0\\r\\n1 1 4\\r\\n1 2 7\\r\\n2 4 0\\r\\n1 0 5\\r\\n1 7 5\\r\\n2 6 3\\r\\n1 0 7\\r\\n2 5 7\\r\\n1 1 0\\r\\n2 0 6\\r\\n1 6 8\\r\\n1 3 5\\r\\n1 8 5\\r\\n1 0 6\\r\\n2 7 0\\r\\n1 4 6\\r\\n1 5 2\\r\\n2 6 2\\r\\n1 7 0\\r\\n2 6 3\\r\\n1 3 7\\r\\n2 4 2\\r\\n2 1 4\\r\\n1 1 3\\r\\n1 5 0\\r\\n2 0 7\\r\\n2 6 8\\r\\n1 4 0\\r\\n2 5 0\\r\\n2 3 2\\r\\n2 6 7\\r\\n1 7 2\\r\\n1 0 3\\r\\n1 6 6\\r\\n2 4 0\\r\\n2 2 4\\r\\n1 6 5\\r\\n2 0 8\\r\\n2 0 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 0 3\\r\\n1 6 0\\r\\n1 8 7\\r\\n2 2 6\\r\\n2 7 2\\r\\n2 7 5\\r\\n1 4 7\\r\\n1 2 3\\r\\n2 2 7\\r\\n2 3 1\\r\\n1 3 5\\r\\n1 8 5\\r\\n2 6 8\\r\\n1 2 8\\r\\n2 4 6\\r\\n1 7 3\\r\\n1 3 3\\r\\n2 2 4\\r\\n1 5 0\\r\\n1 5 6\\r\\n1 1 7\\r\\n2 3 3\\r\\n1 8 6\\r\\n2 7 4\\r\\n1 7 8\\r\\n1 5 8\\r\\n2 3 8\\r\\n1 6 6\\r\\n2 8 5\\r\\n1 5 1\\r\\n2 4 2\\r\\n1 7 7\\r\\n2 4 8\\r\\n1 6 1\\r\\n1 1 5\\r\\n2 1 8\\r\\n2 4 3\\r\\n1 5 5\\r\\n1 4 0\\r\\n2 0 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 5 2\\r\\n1 5 6\\r\\n1 2 1\\r\\n2 7 2\\r\\n2 6 2\\r\\n2 0 8\\r\\n2 0 6\\r\\n1 6 8\\r\\n1 2 0\\r\\n1 0 5\\r\\n2 3 0\\r\\n1 3 8\\r\\n2 8 6\\r\\n1 0 3\\r\\n1 8 8\\r\\n2 1 1\\r\\n1 1 4\\r\\n1 1 3\\r\\n2 0 0\\r\\n2 5 6\\r\\n1 0 0\\r\\n2 0 0\\r\\n1 2 7\\r\\n2 0 0\\r\\n2 3 6\\r\\n1 3 3\\r\\n1 3 2\\r\\n1 5 3\\r\\n1 7 8\\r\\n1 7 4\\r\\n1 8 7\\r\\n1 7 3\\r\\n2 0 3\\r\\n1 4 4\\r\\n2 5 0\\r\\n1 6 6\\r\\n1 8 0\\r\\n2 6 2\\r\\n2 4 8\\r\\n2 7 2\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 1 4\\r\\n1 1 5\\r\\n1 3 5\\r\\n2 8 2\\r\\n2 5 2\\r\\n1 7 3\\r\\n1 8 1\\r\\n2 6 5\\r\\n1 4 3\\r\\n1 2 4\\r\\n1 2 3\\r\\n2 8 3\\r\\n2 3 5\\r\\n2 2 0\\r\\n1 6 7\\r\\n2 2 8\\r\\n1 3 0\\r\\n2 5 1\\r\\n2 2 1\\r\\n1 4 5\\r\\n2 1 6\\r\\n1 8 5\\r\\n2 7 4\\r\\n2 2 0\\r\\n1 3 2\\r\\n1 2 2\\r\\n1 8 3\\r\\n2 3 4\\r\\n1 7 6\\r\\n1 3 7\\r\\n1 5 3\\r\\n1 2 0\\r\\n2 5 7\\r\\n2 0 7\\r\\n2 3 2\\r\\n2 1 0\\r\\n1 6 0\\r\\n2 8 5\\r\\n1 3 4\\r\\n2 0 3\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '40\\r\\n1 8 7\\r\\n1 0 6\\r\\n1 5 0\\r\\n2 6 7\\r\\n2 6 8\\r\\n1 3 5\\r\\n1 6 7\\r\\n1 0 0\\r\\n2 1 7\\r\\n1 2 3\\r\\n2 4 3\\r\\n2 5 5\\r\\n1 4 7\\r\\n2 2 0\\r\\n1 2 4\\r\\n1 4 2\\r\\n1 0 8\\r\\n2 0 3\\r\\n1 8 8\\r\\n2 8 1\\r\\n2 8 6\\r\\n2 4 8\\r\\n1 4 0\\r\\n1 6 6\\r\\n2 0 0\\r\\n1 6 2\\r\\n2 5 1\\r\\n1 3 0\\r\\n1 5 6\\r\\n1 8 1\\r\\n1 3 4\\r\\n1 1 3\\r\\n1 5 1\\r\\n1 5 7\\r\\n1 6 8\\r\\n1 1 5\\r\\n1 1 1\\r\\n1 6 1\\r\\n1 1 4\\r\\n2 7 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 2 8\\r\\n1 4 0\\r\\n1 0 6\\r\\n2 3 8\\r\\n2 4 5\\r\\n1 5 0\\r\\n2 7 6\\r\\n2 6 1\\r\\n2 1 7\\r\\n1 1 2\\r\\n1 5 4\\r\\n1 7 3\\r\\n2 6 4\\r\\n1 3 0\\r\\n2 2 8\\r\\n1 8 2\\r\\n1 8 8\\r\\n1 7 8\\r\\n2 2 5\\r\\n2 2 3\\r\\n2 4 6\\r\\n2 0 2\\r\\n2 6 7\\r\\n2 2 8\\r\\n1 8 3\\r\\n2 5 5\\r\\n1 4 8\\r\\n1 7 1\\r\\n2 7 3\\r\\n2 4 5\\r\\n2 1 1\\r\\n2 4 2\\r\\n1 1 1\\r\\n2 4 0\\r\\n1 2 4\\r\\n2 7 0\\r\\n1 4 1\\r\\n1 7 5\\r\\n1 6 6\\r\\n2 7 8\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 6 3\\r\\n1 5 3\\r\\n1 3 4\\r\\n1 2 3\\r\\n2 2 5\\r\\n1 6 1\\r\\n2 3 7\\r\\n1 0 0\\r\\n1 8 7\\r\\n1 3 8\\r\\n1 0 8\\r\\n1 3 5\\r\\n1 4 5\\r\\n1 0 5\\r\\n2 8 1\\r\\n2 4 7\\r\\n2 3 2\\r\\n1 6 4\\r\\n2 2 3\\r\\n2 6 3\\r\\n1 0 2\\r\\n2 1 2\\r\\n2 6 2\\r\\n1 5 7\\r\\n2 7 0\\r\\n1 4 8\\r\\n1 4 6\\r\\n2 8 7\\r\\n2 0 7\\r\\n1 7 8\\r\\n2 0 3\\r\\n1 5 5\\r\\n1 6 2\\r\\n2 4 5\\r\\n1 2 5\\r\\n2 3 3\\r\\n2 1 1\\r\\n1 8 3\\r\\n1 6 5\\r\\n2 5 5\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 6 5\\r\\n1 4 8\\r\\n1 5 7\\r\\n1 3 1\\r\\n2 4 2\\r\\n1 4 3\\r\\n1 0 7\\r\\n2 4 6\\r\\n2 4 2\\r\\n1 0 3\\r\\n2 1 5\\r\\n2 5 6\\r\\n1 8 8\\r\\n1 1 7\\r\\n1 3 3\\r\\n2 6 7\\r\\n1 7 4\\r\\n1 0 2\\r\\n1 8 4\\r\\n2 4 5\\r\\n2 0 7\\r\\n1 4 1\\r\\n1 4 4\\r\\n1 5 3\\r\\n1 1 0\\r\\n1 4 5\\r\\n2 1 4\\r\\n1 0 6\\r\\n2 1 0\\r\\n1 5 5\\r\\n2 5 6\\r\\n2 8 2\\r\\n2 1 7\\r\\n2 8 1\\r\\n2 0 5\\r\\n1 0 4\\r\\n1 6 6\\r\\n2 1 1\\r\\n1 8 0\\r\\n2 6 3\\r\\n', 'output': ['NO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 1 7\\r\\n1 3 3\\r\\n1 6 5\\r\\n1 7 3\\r\\n1 2 8\\r\\n1 3 0\\r\\n2 0 0\\r\\n1 7 7\\r\\n2 6 8\\r\\n2 6 0\\r\\n2 4 7\\r\\n1 7 8\\r\\n2 0 7\\r\\n2 0 5\\r\\n1 6 2\\r\\n1 7 1\\r\\n1 1 1\\r\\n2 4 8\\r\\n2 2 1\\r\\n2 7 0\\r\\n2 5 4\\r\\n1 2 4\\r\\n2 1 3\\r\\n2 0 5\\r\\n2 5 5\\r\\n2 1 4\\r\\n2 5 5\\r\\n1 2 6\\r\\n1 4 4\\r\\n2 0 8\\r\\n1 0 6\\r\\n2 0 5\\r\\n2 4 6\\r\\n2 8 1\\r\\n2 2 0\\r\\n2 3 3\\r\\n1 0 4\\r\\n1 3 7\\r\\n2 3 2\\r\\n2 3 7\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 2 7\\r\\n1 6 5\\r\\n1 2 0\\r\\n2 4 5\\r\\n1 1 0\\r\\n2 3 4\\r\\n1 7 3\\r\\n2 8 1\\r\\n2 0 0\\r\\n2 2 0\\r\\n1 7 4\\r\\n1 6 3\\r\\n2 8 1\\r\\n2 6 0\\r\\n1 4 7\\r\\n2 4 2\\r\\n1 4 5\\r\\n2 3 7\\r\\n2 6 8\\r\\n2 2 6\\r\\n2 7 4\\r\\n1 0 6\\r\\n2 1 7\\r\\n1 4 4\\r\\n2 2 3\\r\\n1 1 3\\r\\n1 8 5\\r\\n1 0 5\\r\\n1 1 1\\r\\n1 4 3\\r\\n2 5 3\\r\\n1 3 6\\r\\n1 7 0\\r\\n2 5 6\\r\\n2 5 6\\r\\n1 0 7\\r\\n2 7 0\\r\\n2 6 4\\r\\n1 3 7\\r\\n2 2 2\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 4 4\\r\\n1 2 6\\r\\n1 8 2\\r\\n2 4 6\\r\\n1 5 4\\r\\n2 5 8\\r\\n2 6 7\\r\\n2 4 8\\r\\n1 1 0\\r\\n1 3 1\\r\\n1 0 3\\r\\n1 8 1\\r\\n1 3 0\\r\\n2 7 4\\r\\n1 2 0\\r\\n1 8 5\\r\\n1 6 2\\r\\n2 2 0\\r\\n1 0 4\\r\\n1 1 1\\r\\n1 4 5\\r\\n2 8 3\\r\\n2 1 0\\r\\n2 5 5\\r\\n1 3 4\\r\\n2 0 7\\r\\n1 4 3\\r\\n1 7 0\\r\\n2 3 8\\r\\n1 0 1\\r\\n1 0 7\\r\\n2 4 1\\r\\n1 0 6\\r\\n2 1 2\\r\\n1 5 7\\r\\n2 7 2\\r\\n2 7 3\\r\\n1 3 6\\r\\n2 7 3\\r\\n2 7 0\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 0 8\\r\\n1 3 5\\r\\n1 0 2\\r\\n1 8 0\\r\\n1 5 3\\r\\n1 5 2\\r\\n2 8 2\\r\\n2 7 6\\r\\n1 6 1\\r\\n2 2 7\\r\\n2 6 5\\r\\n1 3 7\\r\\n2 7 8\\r\\n1 2 4\\r\\n1 4 2\\r\\n2 5 7\\r\\n2 0 6\\r\\n1 3 1\\r\\n2 2 3\\r\\n1 5 7\\r\\n2 2 8\\r\\n1 7 1\\r\\n1 3 0\\r\\n2 5 5\\r\\n1 7 4\\r\\n2 5 5\\r\\n1 2 0\\r\\n2 4 3\\r\\n2 8 1\\r\\n2 8 0\\r\\n1 2 6\\r\\n1 7 5\\r\\n2 4 8\\r\\n1 2 3\\r\\n2 6 6\\r\\n1 7 8\\r\\n2 7 5\\r\\n2 7 4\\r\\n1 8 1\\r\\n2 5 6\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 1 3\\r\\n1 7 2\\r\\n1 6 2\\r\\n2 0 8\\r\\n2 3 8\\r\\n2 0 3\\r\\n1 5 8\\r\\n2 7 1\\r\\n1 8 1\\r\\n2 8 7\\r\\n1 5 5\\r\\n2 2 4\\r\\n2 3 3\\r\\n2 2 4\\r\\n1 0 1\\r\\n1 2 0\\r\\n1 7 4\\r\\n2 7 4\\r\\n2 5 5\\r\\n1 1 1\\r\\n2 6 4\\r\\n2 1 7\\r\\n2 5 0\\r\\n1 8 0\\r\\n2 6 2\\r\\n1 7 1\\r\\n2 8 6\\r\\n1 8 7\\r\\n2 2 5\\r\\n1 7 3\\r\\n1 5 6\\r\\n1 4 0\\r\\n2 3 8\\r\\n2 8 6\\r\\n1 7 0\\r\\n2 3 5\\r\\n2 6 1\\r\\n1 2 6\\r\\n1 1 2\\r\\n2 7 1\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 4 4\\r\\n1 2 6\\r\\n1 7 2\\r\\n2 1 4\\r\\n2 0 2\\r\\n1 5 4\\r\\n2 5 1\\r\\n1 0 8\\r\\n1 1 7\\r\\n2 2 0\\r\\n1 8 4\\r\\n2 6 5\\r\\n2 8 0\\r\\n1 6 5\\r\\n2 8 7\\r\\n2 0 0\\r\\n2 4 0\\r\\n2 7 2\\r\\n2 6 8\\r\\n1 7 8\\r\\n2 8 8\\r\\n2 4 7\\r\\n1 7 1\\r\\n2 8 8\\r\\n1 5 8\\r\\n1 3 6\\r\\n1 4 6\\r\\n1 3 5\\r\\n2 6 1\\r\\n2 1 3\\r\\n2 8 4\\r\\n2 8 5\\r\\n2 1 3\\r\\n2 7 1\\r\\n2 5 8\\r\\n1 8 2\\r\\n2 6 1\\r\\n1 7 4\\r\\n1 8 5\\r\\n2 6 4\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 2 1\\r\\n1 4 7\\r\\n1 1 1\\r\\n1 2 4\\r\\n2 4 4\\r\\n1 4 4\\r\\n2 0 6\\r\\n2 7 6\\r\\n1 4 0\\r\\n2 6 5\\r\\n2 5 2\\r\\n1 6 1\\r\\n2 7 0\\r\\n1 6 2\\r\\n2 3 2\\r\\n1 0 6\\r\\n2 7 0\\r\\n1 8 6\\r\\n2 1 3\\r\\n2 0 1\\r\\n1 2 5\\r\\n1 0 2\\r\\n2 4 2\\r\\n2 6 8\\r\\n2 2 0\\r\\n2 5 7\\r\\n2 6 0\\r\\n1 2 2\\r\\n2 0 3\\r\\n1 7 4\\r\\n2 7 3\\r\\n1 4 1\\r\\n2 2 6\\r\\n2 8 2\\r\\n1 8 3\\r\\n1 8 7\\r\\n1 0 3\\r\\n1 7 0\\r\\n2 2 1\\r\\n2 6 4\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 3 7\\r\\n1 5 8\\r\\n1 4 4\\r\\n1 8 1\\r\\n1 4 6\\r\\n1 6 6\\r\\n2 5 0\\r\\n2 3 4\\r\\n1 5 3\\r\\n2 0 7\\r\\n2 3 1\\r\\n1 5 4\\r\\n1 3 4\\r\\n2 3 4\\r\\n2 8 2\\r\\n1 0 1\\r\\n1 0 8\\r\\n2 3 8\\r\\n1 0 4\\r\\n2 4 6\\r\\n1 7 3\\r\\n2 4 0\\r\\n1 2 3\\r\\n2 8 1\\r\\n2 8 4\\r\\n1 7 0\\r\\n2 2 6\\r\\n2 2 2\\r\\n1 2 2\\r\\n1 6 5\\r\\n1 7 1\\r\\n2 5 1\\r\\n1 2 4\\r\\n2 3 2\\r\\n1 8 4\\r\\n1 7 4\\r\\n1 1 2\\r\\n1 3 2\\r\\n2 7 3\\r\\n2 4 4\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 1 0\\r\\n1 0 7\\r\\n1 8 4\\r\\n2 1 6\\r\\n2 1 2\\r\\n1 0 0\\r\\n1 1 1\\r\\n2 5 2\\r\\n1 8 5\\r\\n1 0 6\\r\\n2 6 8\\r\\n1 4 2\\r\\n1 8 3\\r\\n2 2 3\\r\\n1 6 3\\r\\n2 6 0\\r\\n1 5 3\\r\\n2 0 5\\r\\n1 3 4\\r\\n2 4 4\\r\\n1 8 6\\r\\n1 1 2\\r\\n1 5 7\\r\\n1 5 1\\r\\n1 3 8\\r\\n2 7 0\\r\\n1 7 2\\r\\n1 3 3\\r\\n2 6 5\\r\\n2 5 0\\r\\n2 2 4\\r\\n2 5 5\\r\\n2 4 6\\r\\n1 6 1\\r\\n1 5 2\\r\\n2 7 5\\r\\n1 8 7\\r\\n1 1 6\\r\\n1 4 8\\r\\n2 8 5\\r\\n', 'output': ['YES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 8 1\\r\\n1 8 6\\r\\n1 1 1\\r\\n2 5 4\\r\\n2 7 8\\r\\n1 6 2\\r\\n1 7 4\\r\\n1 4 4\\r\\n2 3 7\\r\\n1 6 3\\r\\n2 0 1\\r\\n1 8 0\\r\\n2 0 3\\r\\n1 6 0\\r\\n1 3 4\\r\\n1 1 8\\r\\n1 3 3\\r\\n2 3 1\\r\\n2 4 0\\r\\n1 4 3\\r\\n2 1 3\\r\\n2 5 4\\r\\n1 8 5\\r\\n2 1 0\\r\\n1 4 7\\r\\n2 5 3\\r\\n2 4 1\\r\\n1 4 0\\r\\n1 6 8\\r\\n1 5 1\\r\\n2 8 3\\r\\n2 5 7\\r\\n1 3 2\\r\\n1 7 5\\r\\n1 7 3\\r\\n1 0 8\\r\\n1 7 8\\r\\n2 7 3\\r\\n2 6 7\\r\\n2 4 2\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '50\\r\\n1 58 -49\\r\\n1 -77 -90\\r\\n1 32 -52\\r\\n1 -89 -31\\r\\n1 99 -34\\r\\n1 -3 -59\\r\\n2 65 93\\r\\n2 67 -51\\r\\n2 25 -47\\r\\n1 -72 86\\r\\n2 48 -45\\r\\n2 64 -70\\r\\n2 -96 -43\\r\\n2 87 -58\\r\\n2 3 21\\r\\n2 39 -57\\r\\n1 -58 49\\r\\n2 -1 87\\r\\n2 -63 19\\r\\n2 -27 90\\r\\n2 31 3\\r\\n1 55 41\\r\\n1 90 39\\r\\n1 -53 28\\r\\n2 49 -51\\r\\n2 6 42\\r\\n1 50 15\\r\\n2 21 -2\\r\\n2 -6 70\\r\\n1 -13 -61\\r\\n2 -60 -69\\r\\n1 -22 33\\r\\n1 -22 17\\r\\n2 30 -98\\r\\n2 -56 -48\\r\\n2 -84 -77\\r\\n2 49 56\\r\\n1 81 29\\r\\n1 26 29\\r\\n1 -14 20\\r\\n2 -37 83\\r\\n1 -91 96\\r\\n2 57 19\\r\\n1 94 54\\r\\n2 25 -30\\r\\n1 92 5\\r\\n2 -48 51\\r\\n2 81 23\\r\\n1 39 -47\\r\\n2 34 89\\r\\n', 'output': ['NO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '50\\r\\n1 7 -8\\r\\n1 -30 -28\\r\\n1 -8 2\\r\\n1 -28 -29\\r\\n2 -8 -21\\r\\n2 -23 19\\r\\n2 -23 18\\r\\n1 6 27\\r\\n2 -17 20\\r\\n1 9 -5\\r\\n2 -27 29\\r\\n1 -8 27\\r\\n2 13 12\\r\\n2 -29 13\\r\\n2 -30 8\\r\\n2 -30 -8\\r\\n1 -24 -21\\r\\n1 -14 -15\\r\\n2 -23 14\\r\\n2 -12 -13\\r\\n1 15 -24\\r\\n1 28 6\\r\\n2 -20 -21\\r\\n1 -8 -13\\r\\n1 -15 -15\\r\\n1 11 20\\r\\n2 24 -26\\r\\n1 -30 -11\\r\\n2 -17 18\\r\\n1 -17 6\\r\\n2 5 -9\\r\\n2 -29 8\\r\\n2 -29 1\\r\\n2 10 24\\r\\n2 29 27\\r\\n2 -12 21\\r\\n2 5 -28\\r\\n2 28 27\\r\\n2 -4 -4\\r\\n1 -24 29\\r\\n1 17 -1\\r\\n1 0 17\\r\\n1 -2 -1\\r\\n2 -7 -10\\r\\n1 5 -16\\r\\n2 -3 -26\\r\\n2 -7 17\\r\\n1 -27 -26\\r\\n1 -3 -30\\r\\n2 28 -15\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\n']}, {'input': '10\\r\\n1 0 0\\r\\n1 6 0\\r\\n1 0 6\\r\\n2 0 0\\r\\n2 6 0\\r\\n2 0 6\\r\\n2 3 3\\r\\n2 3 0\\r\\n2 0 3\\r\\n2 2 2\\r\\n', 'output': ['YES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '50\\r\\n1 33 -21\\r\\n1 9 82\\r\\n1 -69 -54\\r\\n2 -3 84\\r\\n1 -9 -28\\r\\n2 -54 87\\r\\n2 26 -64\\r\\n2 8 52\\r\\n2 98 63\\r\\n2 -77 10\\r\\n2 -52 -46\\r\\n1 92 42\\r\\n2 -53 -69\\r\\n2 -48 44\\r\\n1 -52 90\\r\\n2 56 29\\r\\n2 -100 -13\\r\\n2 -23 1\\r\\n2 6 91\\r\\n2 53 -38\\r\\n1 48 -35\\r\\n2 19 -62\\r\\n2 -62 49\\r\\n1 59 78\\r\\n2 85 72\\r\\n2 28 76\\r\\n2 46 -91\\r\\n2 6 32\\r\\n2 -16 -59\\r\\n1 40 -53\\r\\n2 -6 87\\r\\n2 -79 -58\\r\\n2 -12 25\\r\\n2 73 49\\r\\n1 57 -42\\r\\n2 12 19\\r\\n1 -60 -5\\r\\n1 -40 -20\\r\\n1 90 35\\r\\n2 10 3\\r\\n2 63 -49\\r\\n1 50 10\\r\\n1 0 77\\r\\n1 92 24\\r\\n1 71 -7\\r\\n2 46 22\\r\\n1 19 81\\r\\n1 -3 -71\\r\\n2 -44 56\\r\\n2 92 34\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}, {'input': '40\\r\\n1 3 3\\r\\n1 3 1\\r\\n1 0 1\\r\\n2 3 0\\r\\n2 6 5\\r\\n2 1 5\\r\\n2 8 3\\r\\n2 0 5\\r\\n2 3 4\\r\\n1 7 6\\r\\n1 1 0\\r\\n1 0 8\\r\\n1 3 7\\r\\n2 4 5\\r\\n2 2 5\\r\\n2 2 0\\r\\n1 7 4\\r\\n2 7 3\\r\\n1 5 0\\r\\n1 4 6\\r\\n1 1 5\\r\\n1 7 8\\r\\n2 7 5\\r\\n1 0 4\\r\\n2 3 8\\r\\n1 1 8\\r\\n1 0 5\\r\\n1 4 8\\r\\n2 8 5\\r\\n1 8 5\\r\\n2 3 6\\r\\n1 8 7\\r\\n2 4 3\\r\\n1 5 2\\r\\n2 2 8\\r\\n2 5 3\\r\\n2 4 0\\r\\n1 4 4\\r\\n1 6 5\\r\\n2 2 7\\r\\n', 'output': ['NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\n']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class CF {\n    public static void main (String[] args) throws IOException {\n        // Input\n        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(bf.readLine());\n        Point[] points = new Point[n];\n        boolean[] in = new boolean[n];\n        int t, x, y;\n        for (int i = 0; i < n; i++) {\n            StringTokenizer st = new StringTokenizer(bf.readLine());\n            t = Integer.parseInt(st.nextToken());\n            x = Integer.parseInt(st.nextToken());\n            y = Integer.parseInt(st.nextToken());\n            points[i] = new Point(x, y);\n            if (t == 2) {\n                in[i] = ConvexHull.isIn(points, 0, 1, 2, points[i]);\n            }\n        }\n\n        // Process\n        for (int i = 0; i < n; i++) {\n            if (t == 2) {\n                System.out.println(in[i]? \"YES\" : \"NO\");\n            }\n        }\n    }\n\n    private static class Point implements Comparable<Point> {\n        int x, y;\n\n        Point (int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n\n        public int compareTo (Point point) {\n            if (x!= point.x) return x - point.x;\n            else return y - point.y;\n        }\n\n        public String toString () {\n            return (\"(\" + x + \",\" + y + \")\");\n        }\n    }\n\n    private static class ConvexHull {\n        public static int isIn (Point[] points, int l, int m, int r, Point testPoint) {\n            if (doIntersect(points, l, m, r) || points[l].compareTo(points[m])!= points[r].compareTo(testPoint)) {\n                return orientation(points[l], points[m], testPoint)!= -1;\n            } else {\n                return onSegment(points[l], points[m], testPoint);\n            }\n        }\n\n        private static int orientation (Point p1, Point p2, Point p3) {\n            int val = (p2.y - p1.y) * (p3.x - p2.x) - (p2.x - p1.x) * (p3.y - p2.y);\n            if (val == 0) return 0;\n            return (val > 0)? 1 : 2;\n        }\n\n        private static boolean doIntersect (Point[] points, int l, int m, int r) {\n            // if not on same line\n            if (orientation(points[l], points[m], points[r])!= 0) return false;\n            // if p3 is on the extended side of p1 and p2\n            if (orientation(points[l], points[m], points[l]) == 2 && orientation(points[m], points[r], points[l]) == 2) return true;\n            // if p3 is on the extended side of p2 and p1\n            if (orientation(points[m], points[r], points[m]) == 2 && orientation(points[r], points[l], points[m]) == 2) return true;\n            return false;\n        }\n\n        private static boolean onSegment (Point p1, Point p2, Point p3) {\n            if (p1.x <= p3.x && p3.x <= p2.x || p2.x <= p3.x && p3.x <= p1.x) return p3.y >= Math.min(p1.y, p2.y) && p3.y <= Math.max(p1.y, p2.y);\n            else return false;\n        }\n    }\n}\n"}
{"src_uid": "560d70425c765c325f412152c8124d2d", "id": 120, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2200, "testcases": "[{'input': '3 3 2\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['0']}, {'input': '4 2 2\\r\\n1 2\\r\\n3 4\\r\\n', 'output': ['0']}, {'input': '4 0 2\\r\\n', 'output': ['1']}, {'input': '4 0 3\\r\\n', 'output': ['1']}, {'input': '8 3 4\\r\\n1 4\\r\\n4 8\\r\\n8 1\\r\\n', 'output': ['1']}, {'input': '8 3 2\\r\\n1 4\\r\\n4 8\\r\\n8 1\\r\\n', 'output': ['2']}, {'input': '8 3 3\\r\\n1 4\\r\\n4 8\\r\\n8 1\\r\\n', 'output': ['1']}, {'input': '8 0 3\\r\\n', 'output': ['3']}, {'input': '50 0 50\\r\\n', 'output': ['24']}, {'input': '50 0 2\\r\\n', 'output': ['24']}, {'input': '50 0 100\\r\\n', 'output': ['24']}, {'input': '100 0 1\\r\\n', 'output': ['98']}, {'input': '3289 0 2\\r\\n', 'output': ['1644']}, {'input': '1000000 0 1\\r\\n', 'output': ['999998']}, {'input': '1000000 0 2\\r\\n', 'output': ['499999']}, {'input': '1000000 0 1000000\\r\\n', 'output': ['499999']}, {'input': '1000000 0 100\\r\\n', 'output': ['499999']}, {'input': '999999 0 1\\r\\n', 'output': ['999997']}, {'input': '999999 0 2\\r\\n', 'output': ['499999']}, {'input': '999999 0 999999\\r\\n', 'output': ['499999']}, {'input': '102 1 1\\r\\n23 58\\r\\n', 'output': ['99']}, {'input': '102 1 2\\r\\n1 62\\r\\n', 'output': ['49']}, {'input': '102 1 10000\\r\\n66 45\\r\\n', 'output': ['49']}, {'input': '1000000 1 1\\r\\n663349 495214\\r\\n', 'output': ['999997']}, {'input': '1000000 1 2\\r\\n998708 47343\\r\\n', 'output': ['499998']}, {'input': '1000000 1 5\\r\\n789076 458264\\r\\n', 'output': ['499998']}, {'input': '11 5 1\\r\\n8 11\\r\\n11 2\\r\\n2 5\\r\\n5 7\\r\\n8 2\\r\\n', 'output': ['5']}, {'input': '11 5 2\\r\\n1 6\\r\\n6 7\\r\\n7 2\\r\\n2 11\\r\\n2 1\\r\\n', 'output': ['2']}, {'input': '11 5 3\\r\\n2 7\\r\\n7 9\\r\\n9 8\\r\\n8 3\\r\\n8 7\\r\\n', 'output': ['2']}, {'input': '11 5 4\\r\\n9 8\\r\\n8 4\\r\\n4 1\\r\\n1 10\\r\\n8 1\\r\\n', 'output': ['1']}, {'input': '11 5 5\\r\\n10 8\\r\\n8 7\\r\\n7 11\\r\\n11 6\\r\\n10 7\\r\\n', 'output': ['1']}, {'input': '11 5 6\\r\\n10 1\\r\\n1 8\\r\\n8 7\\r\\n7 3\\r\\n10 7\\r\\n', 'output': ['1']}, {'input': '3 2 1\\r\\n1 2\\r\\n2 3\\r\\n', 'output': ['0']}, {'input': '2 0 1\\r\\n', 'output': ['0']}, {'input': '1 0 1\\r\\n', 'output': ['0']}, {'input': '3 0 1\\r\\n', 'output': ['1']}, {'input': '4 0 1\\r\\n', 'output': ['2']}, {'input': '4 1 1\\r\\n1 2\\r\\n', 'output': ['1']}, {'input': '4 2 1\\r\\n1 2\\r\\n3 4\\r\\n', 'output': ['0']}, {'input': '4 3 1\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n', 'output': ['0']}, {'input': '2 1 1\\r\\n1 2\\r\\n', 'output': ['0']}, {'input': '5 0 1\\r\\n', 'output': ['3']}, {'input': '5 1 1\\r\\n1 2\\r\\n', 'output': ['2']}, {'input': '5 2 1\\r\\n1 2\\r\\n2 3\\r\\n', 'output': ['1']}, {'input': '5 2 1\\r\\n1 2\\r\\n3 4\\r\\n', 'output': ['1']}, {'input': '5 3 1\\r\\n1 2\\r\\n2 3\\r\\n4 5\\r\\n', 'output': ['0']}, {'input': '10 0 1\\r\\n', 'output': ['8']}]", "source_code": "import java.util.*;\n\npublic class Main {\n\tprivate static Scanner stdin = new Scanner(System.in);\n\t\n\tprivate static int n, m, k;\n\tprivate static int[][] graph;\n\tprivate static int[] dist;\n\tprivate static int min = Integer.MAX_VALUE;\n\t\n\tpublic static void main (String[] args) {\n\t\tinit();\n\t\tfind();\n\t\tprint(min);\n\t}\n\t\n\tprivate static void init() {\n\t\tn = stdin.nextInt();\n\t\tm = stdin.nextInt();\n\t\tk = stdin.nextInt();\n\t\tgraph = new int[n][2];\n\t\tdist = new int[n];\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tgraph[i][0] = stdin.nextInt() - 1;\n\t\t\tgraph[i][1] = stdin.nextInt() - 1;\n\t\t}\n\t}\n\t\n\tprivate static void find() {\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tboolean[] visited = new boolean[n];\n\t\t\tArrays.fill(visited, false);\n\t\t\tmin = Integer.MAX_VALUE;\n\t\t\tdfs(i, visited);\n\t\t}\n\t}\n\t\n\tprivate static void dfs(int x, boolean[] visited) {\n\t\tvisited[x] = true;\n\t\tfor (int i = 0; i < 2; i++) {\n\t\t\tint v = graph[x][i];\n\t\t\tif (visited[v]) {\n\t\t\t\tif (dist[v] == dist[x] + 1) {\n\t\t\t\t\tmin = Math.min(min, dist[x] + 2);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tdist[v] = dist[x] + 1;\n\t\t\tdfs(v, visited);\n\t\t}\n\t}\n\t\n\tprivate static void print(int min) {\n\t\tif (min <= m) {\n\t\t\tSystem.out.println(min - m);\n\t\t} else {\n\t\t\tSystem.out.println(0);\n\t\t}\n\t}\n}\n"}
{"src_uid": "560d70425c765c325f412152c8124d2d", "id": 120, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2200, "testcases": "[{'input': '3 3 2\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['0']}, {'input': '4 2 2\\r\\n1 2\\r\\n3 4\\r\\n', 'output': ['0']}, {'input': '4 0 2\\r\\n', 'output': ['1']}, {'input': '4 0 3\\r\\n', 'output': ['1']}, {'input': '8 3 4\\r\\n1 4\\r\\n4 8\\r\\n8 1\\r\\n', 'output': ['1']}, {'input': '8 3 2\\r\\n1 4\\r\\n4 8\\r\\n8 1\\r\\n', 'output': ['2']}, {'input': '8 3 3\\r\\n1 4\\r\\n4 8\\r\\n8 1\\r\\n', 'output': ['1']}, {'input': '8 0 3\\r\\n', 'output': ['3']}, {'input': '50 0 50\\r\\n', 'output': ['24']}, {'input': '50 0 2\\r\\n', 'output': ['24']}, {'input': '50 0 100\\r\\n', 'output': ['24']}, {'input': '100 0 1\\r\\n', 'output': ['98']}, {'input': '3289 0 2\\r\\n', 'output': ['1644']}, {'input': '1000000 0 1\\r\\n', 'output': ['999998']}, {'input': '1000000 0 2\\r\\n', 'output': ['499999']}, {'input': '1000000 0 1000000\\r\\n', 'output': ['499999']}, {'input': '1000000 0 100\\r\\n', 'output': ['499999']}, {'input': '999999 0 1\\r\\n', 'output': ['999997']}, {'input': '999999 0 2\\r\\n', 'output': ['499999']}, {'input': '999999 0 999999\\r\\n', 'output': ['499999']}, {'input': '102 1 1\\r\\n23 58\\r\\n', 'output': ['99']}, {'input': '102 1 2\\r\\n1 62\\r\\n', 'output': ['49']}, {'input': '102 1 10000\\r\\n66 45\\r\\n', 'output': ['49']}, {'input': '1000000 1 1\\r\\n663349 495214\\r\\n', 'output': ['999997']}, {'input': '1000000 1 2\\r\\n998708 47343\\r\\n', 'output': ['499998']}, {'input': '1000000 1 5\\r\\n789076 458264\\r\\n', 'output': ['499998']}, {'input': '11 5 1\\r\\n8 11\\r\\n11 2\\r\\n2 5\\r\\n5 7\\r\\n8 2\\r\\n', 'output': ['5']}, {'input': '11 5 2\\r\\n1 6\\r\\n6 7\\r\\n7 2\\r\\n2 11\\r\\n2 1\\r\\n', 'output': ['2']}, {'input': '11 5 3\\r\\n2 7\\r\\n7 9\\r\\n9 8\\r\\n8 3\\r\\n8 7\\r\\n', 'output': ['2']}, {'input': '11 5 4\\r\\n9 8\\r\\n8 4\\r\\n4 1\\r\\n1 10\\r\\n8 1\\r\\n', 'output': ['1']}, {'input': '11 5 5\\r\\n10 8\\r\\n8 7\\r\\n7 11\\r\\n11 6\\r\\n10 7\\r\\n', 'output': ['1']}, {'input': '11 5 6\\r\\n10 1\\r\\n1 8\\r\\n8 7\\r\\n7 3\\r\\n10 7\\r\\n', 'output': ['1']}, {'input': '3 2 1\\r\\n1 2\\r\\n2 3\\r\\n', 'output': ['0']}, {'input': '2 0 1\\r\\n', 'output': ['0']}, {'input': '1 0 1\\r\\n', 'output': ['0']}, {'input': '3 0 1\\r\\n', 'output': ['1']}, {'input': '4 0 1\\r\\n', 'output': ['2']}, {'input': '4 1 1\\r\\n1 2\\r\\n', 'output': ['1']}, {'input': '4 2 1\\r\\n1 2\\r\\n3 4\\r\\n', 'output': ['0']}, {'input': '4 3 1\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n', 'output': ['0']}, {'input': '2 1 1\\r\\n1 2\\r\\n', 'output': ['0']}, {'input': '5 0 1\\r\\n', 'output': ['3']}, {'input': '5 1 1\\r\\n1 2\\r\\n', 'output': ['2']}, {'input': '5 2 1\\r\\n1 2\\r\\n2 3\\r\\n', 'output': ['1']}, {'input': '5 2 1\\r\\n1 2\\r\\n3 4\\r\\n', 'output': ['1']}, {'input': '5 3 1\\r\\n1 2\\r\\n2 3\\r\\n4 5\\r\\n', 'output': ['0']}, {'input': '10 0 1\\r\\n', 'output': ['8']}]", "source_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class Tunnel {\n\tstatic class Reader \n\t{ \n\t\tfinal private int BUFFER_SIZE = 1 << 16; \n\t\tprivate DataInputStream din; \n\t\tprivate byte[] buffer; \n\t\tprivate int bufferPointer, bytesRead; \n\t\tprivate boolean hasNextByte;\n\n\t\tReader()\n\t\t{\n\t\t\tbuffer = new byte[BUFFER_SIZE]; \n\t\t\tbufferPointer = bytesRead = 0; \n\t\t\tdin = new DataInputStream(System.in);\n\t\t\thasNextByte = true;\n\t\t} \n\t\tpublic static final int EOF = -1;\n\t\tpublic static final int WHITESPACE = 0;\n\t\tpublic static final int DIGIT = 1;\n\t\tpublic static final int LETTER = 2;\n\t\tpublic static final int BIGDECIMAL = 3;\n\t\tpublic static final int QUOTE = 4;\n\n\t\tprivate int bt() throws Exception {\n\t\t   \tbyte c = readByte();\n\t\t   \twhile(true)\n\t\t   \t{\n\t\t   \t\tif(Character.isWhitespace(c))\n\t\t   \t\t{\n\t\t   \t\t\treturn WHITESPACE;\n\t\t   \t\t}\n\t\t   \t\telse if(c == -1)\n\t\t   \t\t{\n\t\t   \t\t\treturn EOF;\n\t\t   \t\t}\n\t\t   \t\telse if(Character.isDigit(c))\n\t\t   \t\t{\n\t\t   \t\t\treturn DIGIT;\n\t\t   \t\t}\n\t\t   \t\telse if(Character.isLetter(c))\n\t\t   \t\t{\n\t\t   \t\t\treturn LETTER;\n\t\t   \t\t}\n\t\t   \t\telse if(c == '.')\n\t\t   \t\t{\n\t\t   \t\t\treturn BIGDECIMAL;\n\t\t   \t\t}\n\t\t   \t\telse if(c == '\"')\n\t\t   \t\t{\n\t\t   \t\t\treturn QUOTE;\n\t\t   \t\t}\n\t\t   \t\telse\n\t\t   \t\t{\n\t\t   \t\t\treturn c;\n\t\t   \t\t}\n\t\t   \t}\n\t\t}\n\n\t\tprivate byte readByte() throws Exception {\n\t\t   \tif(hasNextByte)\n\t\t   \t{\n\t\t   \t\thasNextByte = false;\n\t\t   \t\treturn buffer[bufferPointer++];\n\t\t   \t}\n\t\t   \tif(bufferPointer < bytesRead)\n\t\t   \t{\n\t\t   \t\treturn buffer[bufferPointer++];\n\t\t   \t}\n\t\t   \tbufferPointer = 0;\n\t\t   \tbytesRead = din.read(buffer, bufferPointer, buffer.length);\n\t\t   \tif(bytesRead <= 0)\n\t\t   \t{\n\t\t   \t\treturn -1;\n\t\t   \t}\n\t\t   \treturn readByte();\n\t\t}\n\n\t\tprivate void fillBuffer() throws Exception {\n\t\t\thasNextByte = true;\n\t\t   \tif(bufferPointer < bytesRead)\n\t\t   \t{\n\t\t   \t\tbufferPointer = 0;\n\t\t   \t}\n\t\t   \telse\n\t\t   \t{\n\t\t   \t\tbufferPointer = 0;\n\t\t   \t\tbytesRead = din.read(buffer, bufferPointer, buffer.length);\n\t\t   \t}\n\t\t}\n\n\t\t//returns char\n\t\tprivate char readChar() throws Exception {\n\t\t   \tif(hasNextByte)\n\t\t   \t{\n\t\t   \t\thasNextByte = false;\n\t\t   "}
{"src_uid": "560d70425c765c325f412152c8124d2d", "id": 120, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2200, "testcases": "[{'input': '3 3 2\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['0']}, {'input': '4 2 2\\r\\n1 2\\r\\n3 4\\r\\n', 'output': ['0']}, {'input': '4 0 2\\r\\n', 'output': ['1']}, {'input': '4 0 3\\r\\n', 'output': ['1']}, {'input': '8 3 4\\r\\n1 4\\r\\n4 8\\r\\n8 1\\r\\n', 'output': ['1']}, {'input': '8 3 2\\r\\n1 4\\r\\n4 8\\r\\n8 1\\r\\n', 'output': ['2']}, {'input': '8 3 3\\r\\n1 4\\r\\n4 8\\r\\n8 1\\r\\n', 'output': ['1']}, {'input': '8 0 3\\r\\n', 'output': ['3']}, {'input': '50 0 50\\r\\n', 'output': ['24']}, {'input': '50 0 2\\r\\n', 'output': ['24']}, {'input': '50 0 100\\r\\n', 'output': ['24']}, {'input': '100 0 1\\r\\n', 'output': ['98']}, {'input': '3289 0 2\\r\\n', 'output': ['1644']}, {'input': '1000000 0 1\\r\\n', 'output': ['999998']}, {'input': '1000000 0 2\\r\\n', 'output': ['499999']}, {'input': '1000000 0 1000000\\r\\n', 'output': ['499999']}, {'input': '1000000 0 100\\r\\n', 'output': ['499999']}, {'input': '999999 0 1\\r\\n', 'output': ['999997']}, {'input': '999999 0 2\\r\\n', 'output': ['499999']}, {'input': '999999 0 999999\\r\\n', 'output': ['499999']}, {'input': '102 1 1\\r\\n23 58\\r\\n', 'output': ['99']}, {'input': '102 1 2\\r\\n1 62\\r\\n', 'output': ['49']}, {'input': '102 1 10000\\r\\n66 45\\r\\n', 'output': ['49']}, {'input': '1000000 1 1\\r\\n663349 495214\\r\\n', 'output': ['999997']}, {'input': '1000000 1 2\\r\\n998708 47343\\r\\n', 'output': ['499998']}, {'input': '1000000 1 5\\r\\n789076 458264\\r\\n', 'output': ['499998']}, {'input': '11 5 1\\r\\n8 11\\r\\n11 2\\r\\n2 5\\r\\n5 7\\r\\n8 2\\r\\n', 'output': ['5']}, {'input': '11 5 2\\r\\n1 6\\r\\n6 7\\r\\n7 2\\r\\n2 11\\r\\n2 1\\r\\n', 'output': ['2']}, {'input': '11 5 3\\r\\n2 7\\r\\n7 9\\r\\n9 8\\r\\n8 3\\r\\n8 7\\r\\n', 'output': ['2']}, {'input': '11 5 4\\r\\n9 8\\r\\n8 4\\r\\n4 1\\r\\n1 10\\r\\n8 1\\r\\n', 'output': ['1']}, {'input': '11 5 5\\r\\n10 8\\r\\n8 7\\r\\n7 11\\r\\n11 6\\r\\n10 7\\r\\n', 'output': ['1']}, {'input': '11 5 6\\r\\n10 1\\r\\n1 8\\r\\n8 7\\r\\n7 3\\r\\n10 7\\r\\n', 'output': ['1']}, {'input': '3 2 1\\r\\n1 2\\r\\n2 3\\r\\n', 'output': ['0']}, {'input': '2 0 1\\r\\n', 'output': ['0']}, {'input': '1 0 1\\r\\n', 'output': ['0']}, {'input': '3 0 1\\r\\n', 'output': ['1']}, {'input': '4 0 1\\r\\n', 'output': ['2']}, {'input': '4 1 1\\r\\n1 2\\r\\n', 'output': ['1']}, {'input': '4 2 1\\r\\n1 2\\r\\n3 4\\r\\n', 'output': ['0']}, {'input': '4 3 1\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n', 'output': ['0']}, {'input': '2 1 1\\r\\n1 2\\r\\n', 'output': ['0']}, {'input': '5 0 1\\r\\n', 'output': ['3']}, {'input': '5 1 1\\r\\n1 2\\r\\n', 'output': ['2']}, {'input': '5 2 1\\r\\n1 2\\r\\n2 3\\r\\n', 'output': ['1']}, {'input': '5 2 1\\r\\n1 2\\r\\n3 4\\r\\n', 'output': ['1']}, {'input': '5 3 1\\r\\n1 2\\r\\n2 3\\r\\n4 5\\r\\n', 'output': ['0']}, {'input': '10 0 1\\r\\n', 'output': ['8']}]", "source_code": "import java.util.*;\n\npublic class Solution{\n  public static void main (String[] args){\n    Scanner scan = new Scanner(System.in);\n\n    int n = scan.nextInt(), m = scan.nextInt(), k = scan.nextInt();\n    int[][] arr = new int[n][n];\n    int u, v, a, b;\n    String[] st = new String[m];\n\n    for (int i = 0 ; i < m ; i ++) st[i] = scan.next();\n\n    int cnt;\n\n    while (m --!= 0){\n      u = Integer.parseInt(st[m].split(\" \")[0]);\n      v = Integer.parseInt(st[m].split(\" \")[1]);\n\n      a = u ;\n      b = 0;\n      while (a!= v){\n\twhile (b!= v){\n\t  if (arr[a][b] == 0){ m ++; break;}\n\t  b ++;\n\t}\n\tif (b == v){ a ++; b = 0;}\n      }\n\n      arr[u][v] = 1;\n      arr[v][u] = 1;\n\n      cnt = 0;\n      for (int j = 0 ; j < n ; j ++){\n\tcnt += arr[j][u];\n      }\n\n      if (cnt > k){\n\tSystem.out.println(m + 1);\n\treturn ;\n      }\n    }\n\n    System.out.println(m);\n  }\n}"}
{"src_uid": "560d70425c765c325f412152c8124d2d", "id": 120, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2200, "testcases": "[{'input': '3 3 2\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['0']}, {'input': '4 2 2\\r\\n1 2\\r\\n3 4\\r\\n', 'output': ['0']}, {'input': '4 0 2\\r\\n', 'output': ['1']}, {'input': '4 0 3\\r\\n', 'output': ['1']}, {'input': '8 3 4\\r\\n1 4\\r\\n4 8\\r\\n8 1\\r\\n', 'output': ['1']}, {'input': '8 3 2\\r\\n1 4\\r\\n4 8\\r\\n8 1\\r\\n', 'output': ['2']}, {'input': '8 3 3\\r\\n1 4\\r\\n4 8\\r\\n8 1\\r\\n', 'output': ['1']}, {'input': '8 0 3\\r\\n', 'output': ['3']}, {'input': '50 0 50\\r\\n', 'output': ['24']}, {'input': '50 0 2\\r\\n', 'output': ['24']}, {'input': '50 0 100\\r\\n', 'output': ['24']}, {'input': '100 0 1\\r\\n', 'output': ['98']}, {'input': '3289 0 2\\r\\n', 'output': ['1644']}, {'input': '1000000 0 1\\r\\n', 'output': ['999998']}, {'input': '1000000 0 2\\r\\n', 'output': ['499999']}, {'input': '1000000 0 1000000\\r\\n', 'output': ['499999']}, {'input': '1000000 0 100\\r\\n', 'output': ['499999']}, {'input': '999999 0 1\\r\\n', 'output': ['999997']}, {'input': '999999 0 2\\r\\n', 'output': ['499999']}, {'input': '999999 0 999999\\r\\n', 'output': ['499999']}, {'input': '102 1 1\\r\\n23 58\\r\\n', 'output': ['99']}, {'input': '102 1 2\\r\\n1 62\\r\\n', 'output': ['49']}, {'input': '102 1 10000\\r\\n66 45\\r\\n', 'output': ['49']}, {'input': '1000000 1 1\\r\\n663349 495214\\r\\n', 'output': ['999997']}, {'input': '1000000 1 2\\r\\n998708 47343\\r\\n', 'output': ['499998']}, {'input': '1000000 1 5\\r\\n789076 458264\\r\\n', 'output': ['499998']}, {'input': '11 5 1\\r\\n8 11\\r\\n11 2\\r\\n2 5\\r\\n5 7\\r\\n8 2\\r\\n', 'output': ['5']}, {'input': '11 5 2\\r\\n1 6\\r\\n6 7\\r\\n7 2\\r\\n2 11\\r\\n2 1\\r\\n', 'output': ['2']}, {'input': '11 5 3\\r\\n2 7\\r\\n7 9\\r\\n9 8\\r\\n8 3\\r\\n8 7\\r\\n', 'output': ['2']}, {'input': '11 5 4\\r\\n9 8\\r\\n8 4\\r\\n4 1\\r\\n1 10\\r\\n8 1\\r\\n', 'output': ['1']}, {'input': '11 5 5\\r\\n10 8\\r\\n8 7\\r\\n7 11\\r\\n11 6\\r\\n10 7\\r\\n', 'output': ['1']}, {'input': '11 5 6\\r\\n10 1\\r\\n1 8\\r\\n8 7\\r\\n7 3\\r\\n10 7\\r\\n', 'output': ['1']}, {'input': '3 2 1\\r\\n1 2\\r\\n2 3\\r\\n', 'output': ['0']}, {'input': '2 0 1\\r\\n', 'output': ['0']}, {'input': '1 0 1\\r\\n', 'output': ['0']}, {'input': '3 0 1\\r\\n', 'output': ['1']}, {'input': '4 0 1\\r\\n', 'output': ['2']}, {'input': '4 1 1\\r\\n1 2\\r\\n', 'output': ['1']}, {'input': '4 2 1\\r\\n1 2\\r\\n3 4\\r\\n', 'output': ['0']}, {'input': '4 3 1\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n', 'output': ['0']}, {'input': '2 1 1\\r\\n1 2\\r\\n', 'output': ['0']}, {'input': '5 0 1\\r\\n', 'output': ['3']}, {'input': '5 1 1\\r\\n1 2\\r\\n', 'output': ['2']}, {'input': '5 2 1\\r\\n1 2\\r\\n2 3\\r\\n', 'output': ['1']}, {'input': '5 2 1\\r\\n1 2\\r\\n3 4\\r\\n', 'output': ['1']}, {'input': '5 3 1\\r\\n1 2\\r\\n2 3\\r\\n4 5\\r\\n', 'output': ['0']}, {'input': '10 0 1\\r\\n', 'output': ['8']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\tstatic int n, m, k, cnt[] = new int [100001], cnt2 = 0;\n\tstatic boolean visited[] = new boolean [100001], a[][] = new boolean [100001] [100001];\n\n\tstatic void solve () {\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (!visited[i]) {\n\t\t\t\tfor (int j = i; j <= n; j++) visited[j] = false;\n\t\t\t\tcnt2++;\n\t\t\t\tfor (int j = 1; j <= n; j++) {\n\t\t\t\t\tif (a[i][j]) visited[j] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcnt[i] = cnt2;\n\t\t}\n\t}\n\n\tpublic static void main (String[] args) throws IOException {\n\t\tFastScanner scanner = new FastScanner();\n\t\tn = scanner.nextInt(), m = scanner.nextInt(), k = scanner.nextInt();\n\t\tfor (int i = 1; i <= m; i++) {\n\t\t\tint v1 = scanner.nextInt(), v2 = scanner.nextInt();\n\t\t\ta[v1][v2] = a[v2][v1] = true;\n\t\t}\n\n\t\tsolve();\n\n\t\tint max = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tint tmp = 0;\n\t\t\tfor (int j = 1; j <= n; j++) {\n\t\t\t\tif (a[i][j]) tmp++;\n\t\t\t}\n\t\t\tmax = Math.max(max, tmp);\n\t\t}\n\t\t\n\t\tint ans = 0;\n\t\tfor (int i = 1; i <= n; i++) ans += (cnt[i] == cnt[n]? k + 1 - max : k - (cnt[i] == cnt[i - 1]? 0 : (cnt[i] - 1)));\n\t\tif (ans > m) System.out.println(m);\n\t\telse System.out.println(ans);\n\t}\n\n\tprivate static boolean isNextInt() {\n\t\twhile (hasNext() &&!isInt()) nextToken();\n\t\treturn hasNext();\n\t}\n\n\tprivate static boolean isInt() {\n\t\treturn token instanceof Long;\n\t}\n\n\tprivate static Long nextInt() {\n\t\tLong value = (Long) token;\n\t\tnextToken();\n\t\treturn value;\n\t}\n\n\tprivate static boolean hasNext() {\n\t\tboolean hasNext = tokenizer.hasMoreTokens();\n\t\tif (!hasNext) token = null;\n\t\treturn hasNext;\n\t}\n\n\tprivate static void nextToken() {\n\t\ttry {\n\t\t\tif (isNextInt()) token = tokenizer.nextLong();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tprivate static final class FastScanner {\n\t\tprivate final InputStream inputStream;\n\t\tprivate final InputStreamReader inputStreamReader;\n\t\tprivate final BufferedReader bufferedReader;\n\t\tprivate final StringTokenizer tokenizer;\n\t\tprivate String token;\n\n\t\tprivate FastScanner() {\n\t\t\tinputStream = System.in;\n\t\t\tinputStreamReader = new InputStreamReader(inputStream);\n\t\t\tbufferedReader = new BufferedReader(inputStreamReader);\n\t\t\ttokenizer = new StringTokenizer(bufferedReader.readLine());\n\t\t\ttoken = tokenizer.nextToken();\n\t\t}\n\n\t\tprivate static FastScanner getInstance() {\n\t\t\treturn new FastScanner();\n\t\t}\n\n\t\tprivate static int nextInt() {\n\t\t\treturn new FastScanner().nextInt();\n\t\t}\n\n\t\tprivate static long nextLong() {\n\t\t\treturn new FastScanner().nextLong();\n\t\t}\n\t}\n}\n"}
{"src_uid": "560d70425c765c325f412152c8124d2d", "id": 120, "lang_cluster": "java", "lang": "Java 11", "difficulty": 2200, "testcases": "[{'input': '3 3 2\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['0']}, {'input': '4 2 2\\r\\n1 2\\r\\n3 4\\r\\n', 'output': ['0']}, {'input': '4 0 2\\r\\n', 'output': ['1']}, {'input': '4 0 3\\r\\n', 'output': ['1']}, {'input': '8 3 4\\r\\n1 4\\r\\n4 8\\r\\n8 1\\r\\n', 'output': ['1']}, {'input': '8 3 2\\r\\n1 4\\r\\n4 8\\r\\n8 1\\r\\n', 'output': ['2']}, {'input': '8 3 3\\r\\n1 4\\r\\n4 8\\r\\n8 1\\r\\n', 'output': ['1']}, {'input': '8 0 3\\r\\n', 'output': ['3']}, {'input': '50 0 50\\r\\n', 'output': ['24']}, {'input': '50 0 2\\r\\n', 'output': ['24']}, {'input': '50 0 100\\r\\n', 'output': ['24']}, {'input': '100 0 1\\r\\n', 'output': ['98']}, {'input': '3289 0 2\\r\\n', 'output': ['1644']}, {'input': '1000000 0 1\\r\\n', 'output': ['999998']}, {'input': '1000000 0 2\\r\\n', 'output': ['499999']}, {'input': '1000000 0 1000000\\r\\n', 'output': ['499999']}, {'input': '1000000 0 100\\r\\n', 'output': ['499999']}, {'input': '999999 0 1\\r\\n', 'output': ['999997']}, {'input': '999999 0 2\\r\\n', 'output': ['499999']}, {'input': '999999 0 999999\\r\\n', 'output': ['499999']}, {'input': '102 1 1\\r\\n23 58\\r\\n', 'output': ['99']}, {'input': '102 1 2\\r\\n1 62\\r\\n', 'output': ['49']}, {'input': '102 1 10000\\r\\n66 45\\r\\n', 'output': ['49']}, {'input': '1000000 1 1\\r\\n663349 495214\\r\\n', 'output': ['999997']}, {'input': '1000000 1 2\\r\\n998708 47343\\r\\n', 'output': ['499998']}, {'input': '1000000 1 5\\r\\n789076 458264\\r\\n', 'output': ['499998']}, {'input': '11 5 1\\r\\n8 11\\r\\n11 2\\r\\n2 5\\r\\n5 7\\r\\n8 2\\r\\n', 'output': ['5']}, {'input': '11 5 2\\r\\n1 6\\r\\n6 7\\r\\n7 2\\r\\n2 11\\r\\n2 1\\r\\n', 'output': ['2']}, {'input': '11 5 3\\r\\n2 7\\r\\n7 9\\r\\n9 8\\r\\n8 3\\r\\n8 7\\r\\n', 'output': ['2']}, {'input': '11 5 4\\r\\n9 8\\r\\n8 4\\r\\n4 1\\r\\n1 10\\r\\n8 1\\r\\n', 'output': ['1']}, {'input': '11 5 5\\r\\n10 8\\r\\n8 7\\r\\n7 11\\r\\n11 6\\r\\n10 7\\r\\n', 'output': ['1']}, {'input': '11 5 6\\r\\n10 1\\r\\n1 8\\r\\n8 7\\r\\n7 3\\r\\n10 7\\r\\n', 'output': ['1']}, {'input': '3 2 1\\r\\n1 2\\r\\n2 3\\r\\n', 'output': ['0']}, {'input': '2 0 1\\r\\n', 'output': ['0']}, {'input': '1 0 1\\r\\n', 'output': ['0']}, {'input': '3 0 1\\r\\n', 'output': ['1']}, {'input': '4 0 1\\r\\n', 'output': ['2']}, {'input': '4 1 1\\r\\n1 2\\r\\n', 'output': ['1']}, {'input': '4 2 1\\r\\n1 2\\r\\n3 4\\r\\n', 'output': ['0']}, {'input': '4 3 1\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n', 'output': ['0']}, {'input': '2 1 1\\r\\n1 2\\r\\n', 'output': ['0']}, {'input': '5 0 1\\r\\n', 'output': ['3']}, {'input': '5 1 1\\r\\n1 2\\r\\n', 'output': ['2']}, {'input': '5 2 1\\r\\n1 2\\r\\n2 3\\r\\n', 'output': ['1']}, {'input': '5 2 1\\r\\n1 2\\r\\n3 4\\r\\n', 'output': ['1']}, {'input': '5 3 1\\r\\n1 2\\r\\n2 3\\r\\n4 5\\r\\n', 'output': ['0']}, {'input': '10 0 1\\r\\n', 'output': ['8']}]", "source_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tInput input = new StandardInput();\n\t\tint n = input.nextInt(), m = input.nextInt(), k = input.nextInt();\n\t\tint[] road = new int[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\troad[i][i] = 0;\n\t\t}\n\t\twhile (m-- > 0) {\n\t\t\troad[input.nextInt() - 1][input.nextInt() - 1] = 1;\n\t\t}\n\t\tint min = Integer.MAX_VALUE;\n\t\tint roadc = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i; j < n; j++) {\n\t\t\t\tint count = 0;\n\t\t\t\tfor (int kk = 0; kk < n; kk++) {\n\t\t\t\t\tif (road[i][kk] == 1 && road[j][kk] == 1 && kk!= i && kk!= j)\n\t\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\troadc += count;\n\t\t\t\tmin = Math.min(min, count);\n\t\t\t}\n\t\t}\n\t\tif (min > k)\n\t\t\troadc += (min - k);\n\t\tSystem.out.println(roadc);\n\t}\n}\n\nclass Input {\n\tpublic int nextInt() throws IOException {\n\t\treturn Integer.parseInt(next());\n\t}\n\n\tpublic long nextLong() throws IOException {\n\t\treturn Long.parseLong(next());\n\t}\n\n\tpublic double nextDouble() throws IOException {\n\t\treturn Double.parseDouble(next());\n\t}\n\n\tpublic String next() throws IOException {\n\t\treturn reader.next();\n\t}\n\n\tpublic boolean ready() throws IOException {\n\t\treturn reader.ready();\n\t}\n\n\tpublic void close() throws IOException {\n\t\treader.close();\n\t}\n\n\tpublic void mark(int readAheadLimit) throws IOException {\n\t\treader.mark(readAheadLimit);\n\t}\n\n\tpublic void reset() throws IOException {\n\t\treader.reset();\n\t}\n\n\tprivate interface Reader {\n\t\tString next() throws IOException;\n\n\t\tdefault void mark(int readAheadLimit) throws IOException {\n\t\t}\n\n\t\tdefault void reset() throws IOException {\n\t\t}\n\n\t\tdefault void close() throws IOException {\n\t\t}\n\t}\n\n\tprivate static class StandardInput implements Reader {\n\t\tprivate final StandardInput reader = this;\n\t\tprivate final BufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));\n\n\t\tprivate StringTokenizer stringTokenizer;\n\n\t\t@Override\n\t\tpublic String next() throws IOException {\n\t\t\twhile ((stringTokenizer == null ||!stringTokenizer.hasMoreTokens()) && reader.ready()) {\n\t\t\t\tstringTokenizer = new StringTokenizer(reader.next());\n\t\t\t}\n\t\t\tif (stringTokenizer == null)\n\t\t\t\treturn null;\n\t\t\treturn stringTokenizer.nextToken();\n\t\t}\n\t}\n}"}
